begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|DoNotCall
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_comment
comment|/**  * A type-to-instance map backed by an {@link ImmutableMap}. See also {@link  * MutableTypeToInstanceMap}.  *  * @author Ben Yu  * @since 13.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|ImmutableTypeToInstanceMap
specifier|public
specifier|final
class|class
name|ImmutableTypeToInstanceMap
parameter_list|<
name|B
parameter_list|>
extends|extends
name|ForwardingMap
argument_list|<
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
argument_list|,
name|B
argument_list|>
implements|implements
name|TypeToInstanceMap
argument_list|<
name|B
argument_list|>
block|{
comment|/** Returns an empty type to instance map. */
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|B
parameter_list|>
name|ImmutableTypeToInstanceMap
argument_list|<
name|B
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|new
name|ImmutableTypeToInstanceMap
argument_list|<
name|B
argument_list|>
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
operator|,
name|B
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a new builder. */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|B
parameter_list|>
name|Builder
argument_list|<
name|B
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|B
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * A builder for creating immutable type-to-instance maps. Example:    *    *<pre>{@code    * static final ImmutableTypeToInstanceMap<Handler<?>> HANDLERS =    *     ImmutableTypeToInstanceMap.<Handler<?>>builder()    *         .put(new TypeToken<Handler<Foo>>() {}, new FooHandler())    *         .put(new TypeToken<Handler<Bar>>() {}, new SubBarHandler())    *         .build();    * }</pre>    *    *<p>After invoking {@link #build()} it is still possible to add more entries and build again.    * Thus each map generated by this builder will be a superset of any map generated before it.    *    * @since 13.0    */
annotation|@
name|Beta
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
parameter_list|<
name|B
parameter_list|>
block|{
DECL|field|mapBuilder
specifier|private
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
argument_list|,
name|B
argument_list|>
name|mapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{}
comment|/**      * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,      * and will cause {@link #build} to fail.      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (Class<T> key, T value)
specifier|public
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|Builder
argument_list|<
name|B
argument_list|>
name|put
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|mapBuilder
operator|.
name|put
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,      * and will cause {@link #build} to fail.      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (TypeToken<T> key, T value)
specifier|public
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|Builder
argument_list|<
name|B
argument_list|>
name|put
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|mapBuilder
operator|.
name|put
argument_list|(
name|key
operator|.
name|rejectTypeVariables
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns a new immutable type-to-instance map containing the entries provided to this builder.      *      * @throws IllegalArgumentException if duplicate keys were added      */
DECL|method|build ()
specifier|public
name|ImmutableTypeToInstanceMap
argument_list|<
name|B
argument_list|>
name|build
parameter_list|()
block|{
return|return
operator|new
name|ImmutableTypeToInstanceMap
argument_list|<
name|B
argument_list|>
argument_list|(
name|mapBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|field|delegate
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
argument_list|,
name|B
argument_list|>
name|delegate
decl_stmt|;
DECL|method|ImmutableTypeToInstanceMap (ImmutableMap<TypeToken<? extends B>, B> delegate)
specifier|private
name|ImmutableTypeToInstanceMap
parameter_list|(
name|ImmutableMap
argument_list|<
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
argument_list|,
name|B
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getInstance (TypeToken<T> type)
specifier|public
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|trustedGet
argument_list|(
name|type
operator|.
name|rejectTypeVariables
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getInstance (Class<T> type)
specifier|public
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|trustedGet
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @deprecated unsupported operation    * @throws UnsupportedOperationException always    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
annotation|@
name|CheckForNull
DECL|method|putInstance (TypeToken<T> type, T value)
specifier|public
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|T
name|putInstance
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @deprecated unsupported operation    * @throws UnsupportedOperationException always    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
annotation|@
name|CheckForNull
DECL|method|putInstance (Class<T> type, T value)
specifier|public
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|T
name|putInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @deprecated unsupported operation    * @throws UnsupportedOperationException always    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
annotation|@
name|CheckForNull
DECL|method|put (TypeToken<? extends B> key, B value)
specifier|public
name|B
name|put
parameter_list|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|key
parameter_list|,
name|B
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @deprecated unsupported operation    * @throws UnsupportedOperationException always    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|putAll (Map<? extends TypeToken<? extends B>, ? extends B> map)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
argument_list|,
name|?
extends|extends
name|B
argument_list|>
name|map
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Map
argument_list|<
name|TypeToken
argument_list|<
name|?
extends|extends
name|B
argument_list|>
argument_list|,
name|B
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// value could not get in if not a T
annotation|@
name|CheckForNull
DECL|method|trustedGet (TypeToken<T> type)
specifier|private
parameter_list|<
name|T
extends|extends
name|B
parameter_list|>
name|T
name|trustedGet
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|delegate
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

