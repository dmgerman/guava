begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|NotThreadSafe
import|;
end_import

begin_comment
comment|/**  * Based on what a {@link Type} is, dispatch it to the corresponding {@code visit*} method. By  * default, no recursion is done for type arguments or type bounds. But subclasses can opt to do  * recursion by calling {@link #visit} for any {@code Type} while visitation is in progress. For  * example, this can be used to reject wildcards or type variables contained in a type as in:  *<pre>   {@code  *  *   new TypeVisitor() {  *     protected void visitParameterizedType(ParameterizedType t) {  *       visit(t.getOwnerType());  *       visit(t.getActualTypeArguments());  *     }  *     protected void visitGenericArrayType(GenericArrayType t) {  *       visit(t.getGenericComponentType());  *     }  *     protected void visitTypeVariable(TypeVariable<?> t) {  *       throw new IllegalArgumentException("Cannot contain type variable.");  *     }  *     protected void visitWildcardType(WildcardType t) {  *       throw new IllegalArgumentException("Cannot contain wildcard type.");  *     }  *   }.visit(type);  * }</pre>  *   *<p>One {@code Type} is visited at most once. The second time the same type is visited, it's  * ignored by {@link #visit}. This avoids infinite recursion caused by recursive type bounds.  *  *<p>This class is<em>not</em> thread safe.  *  * @author Ben Yu  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
DECL|class|TypeVisitor
specifier|abstract
class|class
name|TypeVisitor
block|{
DECL|field|visited
specifier|private
specifier|final
name|Set
argument_list|<
name|Type
argument_list|>
name|visited
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
comment|/**    * Visits the given types. Null types are ignored. This allows subclasses to call    * {@code visit(parameterizedType.getOwnerType())} safely without having to check nulls.    */
DECL|method|visit (Type... types)
specifier|public
specifier|final
name|void
name|visit
parameter_list|(
name|Type
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|Type
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|visited
operator|.
name|add
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// null owner type, or already visited;
continue|continue;
block|}
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|visitTypeVariable
argument_list|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|visitWildcardType
argument_list|(
operator|(
name|WildcardType
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|visitParameterizedType
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|visitClass
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|visitGenericArrayType
argument_list|(
operator|(
name|GenericArrayType
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|succeeded
condition|)
block|{
comment|// When the visitation failed, we don't want to ignore the second.
name|visited
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|visitClass (Class<?> t)
name|void
name|visitClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{}
DECL|method|visitGenericArrayType (GenericArrayType t)
name|void
name|visitGenericArrayType
parameter_list|(
name|GenericArrayType
name|t
parameter_list|)
block|{}
DECL|method|visitParameterizedType (ParameterizedType t)
name|void
name|visitParameterizedType
parameter_list|(
name|ParameterizedType
name|t
parameter_list|)
block|{}
DECL|method|visitTypeVariable (TypeVariable<?> t)
name|void
name|visitTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{}
DECL|method|visitWildcardType (WildcardType t)
name|void
name|visitWildcardType
parameter_list|(
name|WildcardType
name|t
parameter_list|)
block|{}
block|}
end_class

end_unit

