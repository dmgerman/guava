begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_comment
comment|/**  * Captures a free type variable that can be used in {@link TypeToken#where}.  * For example:<pre>   {@code  *  *   static<T> TypeToken<List<T>> listOf(Class<T> elementType) {  *     return new TypeToken<List<T>>() {}  *         .where(new TypeParameter<T>() {}, elementType);  *   }  * }</pre>  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|TypeParameter
specifier|public
specifier|abstract
class|class
name|TypeParameter
parameter_list|<
name|T
parameter_list|>
extends|extends
name|TypeCapture
argument_list|<
name|T
argument_list|>
block|{
DECL|field|typeVariable
specifier|final
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
decl_stmt|;
DECL|method|TypeParameter (TypeVariable<?> typeVariable)
specifier|private
name|TypeParameter
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
parameter_list|)
block|{
name|this
operator|.
name|typeVariable
operator|=
name|checkNotNull
argument_list|(
name|typeVariable
argument_list|)
expr_stmt|;
block|}
DECL|method|TypeParameter ()
specifier|protected
name|TypeParameter
parameter_list|()
block|{
name|Type
name|type
init|=
name|capture
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|type
operator|instanceof
name|TypeVariable
argument_list|,
literal|"%s should be a type variable."
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeVariable
operator|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
expr_stmt|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|typeVariable
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TypeParameter
condition|)
block|{
name|TypeParameter
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|TypeParameter
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|typeVariable
operator|.
name|equals
argument_list|(
name|that
operator|.
name|typeVariable
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|typeVariable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

