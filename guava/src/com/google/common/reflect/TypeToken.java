begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Primitives
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link Type} with generics.  *  *<p>Operations that are otherwise only available in {@link Class} are implemented to support  * {@code Type}, for example {@link #isSubtypeOf}, {@link #isArray} and {@link #getComponentType}.  * It also provides additional utilities such as {@link #getTypes}, {@link #resolveType}, etc.  *  *<p>There are three ways to get a {@code TypeToken} instance:<ul>  *<li>Wrap a {@code Type} obtained via reflection. For example: {@code  * TypeToken.of(method.getGenericReturnType())}.  *<li>Capture a generic type with a (usually anonymous) subclass. For example:<pre>   {@code  *   new TypeToken<List<String>>() {}}</pre>  *<p>Note that it's critical that the actual type argument is carried by a subclass.  * The following code is wrong because it only captures the {@code<T>} type variable  * of the {@code listType()} method signature; while {@code<String>} is lost in erasure:  *<pre>   {@code  *   class Util {  *     static<T> TypeToken<List<T>> listType() {  *       return new TypeToken<List<T>>() {};  *     }  *   }  *  *   TypeToken<List<String>> stringListType = Util.<String>listType();}</pre>  *<li>Capture a generic type with a (usually anonymous) subclass and resolve it against  * a context class that knows what the type parameters are. For example:<pre>   {@code  *   abstract class IKnowMyType<T> {  *     TypeToken<T> type = new TypeToken<T>(getClass()) {};  *   }  *   new IKnowMyType<String>() {}.type => String}</pre>  *</ul>  *  *<p>{@code TypeToken} is serializable when no type variable is contained in the type.  *  *<p>Note to Guice users: {@code} TypeToken is similar to Guice's {@code TypeLiteral} class  * except that it is serializable and offers numerous additional utility methods.  *  * @author Bob Lee  * @author Sven Mawson  * @author Ben Yu  * @since 12.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// SimpleTypeToken is the serialized form.
DECL|class|TypeToken
specifier|public
specifier|abstract
class|class
name|TypeToken
parameter_list|<
name|T
parameter_list|>
extends|extends
name|TypeCapture
argument_list|<
name|T
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|runtimeType
specifier|private
specifier|final
name|Type
name|runtimeType
decl_stmt|;
comment|/** Resolver for resolving types with {@link #runtimeType} as context. */
DECL|field|typeResolver
specifier|private
specifier|transient
name|TypeResolver
name|typeResolver
decl_stmt|;
comment|/**    * Constructs a new type token of {@code T}.    *    *<p>Clients create an empty anonymous subclass. Doing so embeds the type    * parameter in the anonymous class's type hierarchy so we can reconstitute    * it at runtime despite erasure.    *    *<p>For example:<pre>   {@code    *   TypeToken<List<String>> t = new TypeToken<List<String>>() {};}</pre>    */
DECL|method|TypeToken ()
specifier|protected
name|TypeToken
parameter_list|()
block|{
name|this
operator|.
name|runtimeType
operator|=
name|capture
argument_list|()
expr_stmt|;
name|checkState
argument_list|(
operator|!
operator|(
name|runtimeType
operator|instanceof
name|TypeVariable
operator|)
argument_list|,
literal|"Cannot construct a TypeToken for a type variable.\n"
operator|+
literal|"You probably meant to call new TypeToken<%s>(getClass()) "
operator|+
literal|"that can resolve the type variable for you.\n"
operator|+
literal|"If you do need to create a TypeToken of a type variable, "
operator|+
literal|"please use TypeToken.of() instead."
argument_list|,
name|runtimeType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a new type token of {@code T} while resolving free type variables in the context of    * {@code declaringClass}.    *    *<p>Clients create an empty anonymous subclass. Doing so embeds the type    * parameter in the anonymous class's type hierarchy so we can reconstitute    * it at runtime despite erasure.    *    *<p>For example:<pre>   {@code    *   abstract class IKnowMyType<T> {    *     TypeToken<T> getMyType() {    *       return new TypeToken<T>(getClass()) {};    *     }    *   }    *    *   new IKnowMyType<String>() {}.getMyType() => String}</pre>    */
DECL|method|TypeToken (Class<?> declaringClass)
specifier|protected
name|TypeToken
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|)
block|{
name|Type
name|captured
init|=
name|super
operator|.
name|capture
argument_list|()
decl_stmt|;
if|if
condition|(
name|captured
operator|instanceof
name|Class
condition|)
block|{
name|this
operator|.
name|runtimeType
operator|=
name|captured
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|runtimeType
operator|=
name|of
argument_list|(
name|declaringClass
argument_list|)
operator|.
name|resolveType
argument_list|(
name|captured
argument_list|)
operator|.
name|runtimeType
expr_stmt|;
block|}
block|}
DECL|method|TypeToken (Type type)
specifier|private
name|TypeToken
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|runtimeType
operator|=
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/** Returns an instance of type token that wraps {@code type}. */
DECL|method|of (Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|TypeToken
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|SimpleTypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** Returns an instance of type token that wraps {@code type}. */
DECL|method|of (Type type)
specifier|public
specifier|static
name|TypeToken
argument_list|<
name|?
argument_list|>
name|of
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
operator|new
name|SimpleTypeToken
argument_list|<
name|Object
argument_list|>
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by    * {@link java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by    * {@link java.lang.reflect.Method#getReturnType} of the same method object. Specifically:    *<ul>    *<li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.    *<li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is    *     returned.    *<li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array    *     class. For example: {@code List<Integer>[] => List[]}.    *<li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound    *     is returned. For example: {@code<X extends Foo> => Foo}.    *</ul>    */
DECL|method|getRawType ()
specifier|public
specifier|final
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getRawType
parameter_list|()
block|{
comment|// For wildcard or type variable, the first bound determines the runtime type.
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|getRawTypes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// raw type is |T|
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|result
init|=
operator|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|rawType
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/** Returns the represented type. */
DECL|method|getType ()
specifier|public
specifier|final
name|Type
name|getType
parameter_list|()
block|{
return|return
name|runtimeType
return|;
block|}
comment|/**    *<p>Returns a new {@code TypeToken} where type variables represented by {@code typeParam}    * are substituted by {@code typeArg}. For example, it can be used to construct    * {@code Map<K, V>} for any {@code K} and {@code V} type:<pre>   {@code    *   static<K, V> TypeToken<Map<K, V>> mapOf(    *       TypeToken<K> keyType, TypeToken<V> valueType) {    *     return new TypeToken<Map<K, V>>() {}    *         .where(new TypeParameter<K>() {}, keyType)    *         .where(new TypeParameter<V>() {}, valueType);    *   }}</pre>    *    * @param<X> The parameter type    * @param typeParam the parameter type variable    * @param typeArg the actual type to substitute    */
DECL|method|where (TypeParameter<X> typeParam, TypeToken<X> typeArg)
specifier|public
specifier|final
parameter_list|<
name|X
parameter_list|>
name|TypeToken
argument_list|<
name|T
argument_list|>
name|where
parameter_list|(
name|TypeParameter
argument_list|<
name|X
argument_list|>
name|typeParam
parameter_list|,
name|TypeToken
argument_list|<
name|X
argument_list|>
name|typeArg
parameter_list|)
block|{
name|TypeResolver
name|resolver
init|=
operator|new
name|TypeResolver
argument_list|()
operator|.
name|where
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
operator|new
name|TypeResolver
operator|.
name|TypeVariableKey
argument_list|(
name|typeParam
operator|.
name|typeVariable
argument_list|)
argument_list|,
name|typeArg
operator|.
name|runtimeType
argument_list|)
argument_list|)
decl_stmt|;
comment|// If there's any type error, we'd report now rather than later.
return|return
operator|new
name|SimpleTypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|resolver
operator|.
name|resolveType
argument_list|(
name|runtimeType
argument_list|)
argument_list|)
return|;
block|}
comment|/**    *<p>Returns a new {@code TypeToken} where type variables represented by {@code typeParam}    * are substituted by {@code typeArg}. For example, it can be used to construct    * {@code Map<K, V>} for any {@code K} and {@code V} type:<pre>   {@code    *   static<K, V> TypeToken<Map<K, V>> mapOf(    *       Class<K> keyType, Class<V> valueType) {    *     return new TypeToken<Map<K, V>>() {}    *         .where(new TypeParameter<K>() {}, keyType)    *         .where(new TypeParameter<V>() {}, valueType);    *   }}</pre>    *    * @param<X> The parameter type    * @param typeParam the parameter type variable    * @param typeArg the actual type to substitute    */
DECL|method|where (TypeParameter<X> typeParam, Class<X> typeArg)
specifier|public
specifier|final
parameter_list|<
name|X
parameter_list|>
name|TypeToken
argument_list|<
name|T
argument_list|>
name|where
parameter_list|(
name|TypeParameter
argument_list|<
name|X
argument_list|>
name|typeParam
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|typeArg
parameter_list|)
block|{
return|return
name|where
argument_list|(
name|typeParam
argument_list|,
name|of
argument_list|(
name|typeArg
argument_list|)
argument_list|)
return|;
block|}
comment|/**    *<p>Resolves the given {@code type} against the type context represented by this type.    * For example:<pre>   {@code    *   new TypeToken<List<String>>() {}.resolveType(    *       List.class.getMethod("get", int.class).getGenericReturnType())    *   => String.class}</pre>    */
DECL|method|resolveType (Type type)
specifier|public
specifier|final
name|TypeToken
argument_list|<
name|?
argument_list|>
name|resolveType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|TypeResolver
name|resolver
init|=
name|typeResolver
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|resolver
operator|=
operator|(
name|typeResolver
operator|=
name|TypeResolver
operator|.
name|accordingTo
argument_list|(
name|runtimeType
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|of
argument_list|(
name|resolver
operator|.
name|resolveType
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
DECL|method|resolveInPlace (Type[] types)
specifier|private
name|Type
index|[]
name|resolveInPlace
parameter_list|(
name|Type
index|[]
name|types
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|resolveType
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
DECL|method|resolveSupertype (Type type)
specifier|private
name|TypeToken
argument_list|<
name|?
argument_list|>
name|resolveSupertype
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertype
init|=
name|resolveType
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// super types' type mapping is a subset of type mapping of this type.
name|supertype
operator|.
name|typeResolver
operator|=
name|typeResolver
expr_stmt|;
return|return
name|supertype
return|;
block|}
comment|/**    * Returns the generic superclass of this type or {@code null} if the type represents    * {@link Object} or an interface. This method is similar but different from {@link    * Class#getGenericSuperclass}. For example, {@code    * new TypeToken<StringArrayList>() {}.getGenericSuperclass()} will return {@code    * new TypeToken<ArrayList<String>>() {}}; while {@code    * StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where {@code E}    * is the type variable declared by class {@code ArrayList}.    *    *<p>If this type is a type variable or wildcard, its first upper bound is examined and returned    * if the bound is a class or extends from a class. This means that the returned type could be a    * type variable too.    */
annotation|@
name|Nullable
DECL|method|getGenericSuperclass ()
specifier|final
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getGenericSuperclass
parameter_list|()
block|{
if|if
condition|(
name|runtimeType
operator|instanceof
name|TypeVariable
condition|)
block|{
comment|// First bound is always the super class, if one exists.
return|return
name|boundAsSuperclass
argument_list|(
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
operator|)
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|runtimeType
operator|instanceof
name|WildcardType
condition|)
block|{
comment|// wildcard has one and only one upper bound.
return|return
name|boundAsSuperclass
argument_list|(
operator|(
operator|(
name|WildcardType
operator|)
name|runtimeType
operator|)
operator|.
name|getUpperBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|Type
name|superclass
init|=
name|getRawType
argument_list|()
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// super class of T
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|superToken
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|resolveSupertype
argument_list|(
name|superclass
argument_list|)
decl_stmt|;
return|return
name|superToken
return|;
block|}
DECL|method|boundAsSuperclass (Type bound)
annotation|@
name|Nullable
specifier|private
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|boundAsSuperclass
parameter_list|(
name|Type
name|bound
parameter_list|)
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|token
init|=
name|of
argument_list|(
name|bound
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getRawType
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// only upper bound of T is passed in.
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|superclass
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|token
decl_stmt|;
return|return
name|superclass
return|;
block|}
comment|/**    * Returns the generic interfaces that this type directly {@code implements}. This method is    * similar but different from {@link Class#getGenericInterfaces()}. For example, {@code    * new TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains    * {@code new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()}    * will return an array that contains {@code Iterable<T>}, where the {@code T} is the type    * variable declared by interface {@code Iterable}.    *    *<p>If this type is a type variable or wildcard, its upper bounds are examined and those that    * are either an interface or upper-bounded only by interfaces are returned. This means that the    * returned types could include type variables too.    */
DECL|method|getGenericInterfaces ()
specifier|final
name|ImmutableList
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|getGenericInterfaces
parameter_list|()
block|{
if|if
condition|(
name|runtimeType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|boundsAsInterfaces
argument_list|(
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
operator|)
operator|.
name|getBounds
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|runtimeType
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|boundsAsInterfaces
argument_list|(
operator|(
operator|(
name|WildcardType
operator|)
name|runtimeType
operator|)
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
return|;
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|interfaceType
range|:
name|getRawType
argument_list|()
operator|.
name|getGenericInterfaces
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// interface of T
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|resolvedInterface
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|resolveSupertype
argument_list|(
name|interfaceType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|resolvedInterface
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|boundsAsInterfaces (Type[] bounds)
specifier|private
name|ImmutableList
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|boundsAsInterfaces
parameter_list|(
name|Type
index|[]
name|bounds
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|bound
range|:
name|bounds
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// upper bound of T
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|boundType
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|of
argument_list|(
name|bound
argument_list|)
decl_stmt|;
if|if
condition|(
name|boundType
operator|.
name|getRawType
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|boundType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the set of interfaces and classes that this type is or is a subtype of. The returned    * types are parameterized with proper type arguments.    *    *<p>Subtypes are always listed before supertypes. But the reverse is not true. A type isn't    * necessarily a subtype of all the types following. Order between types without subtype    * relationship is arbitrary and not guaranteed.    *    *<p>If this type is a type variable or wildcard, upper bounds that are themselves type variables    * aren't included (their super interfaces and superclasses are).    */
DECL|method|getTypes ()
specifier|public
specifier|final
name|TypeSet
name|getTypes
parameter_list|()
block|{
return|return
operator|new
name|TypeSet
argument_list|()
return|;
block|}
comment|/**    * Returns the generic form of {@code superclass}. For example, if this is    * {@code ArrayList<String>}, {@code Iterable<String>} is returned given the    * input {@code Iterable.class}.    */
DECL|method|getSupertype (Class<? super T> superclass)
specifier|public
specifier|final
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getSupertype
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|superclass
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|this
operator|.
name|someRawTypeIsSubclassOf
argument_list|(
name|superclass
argument_list|)
argument_list|,
literal|"%s is not a super class of %s"
argument_list|,
name|superclass
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|runtimeType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|getSupertypeFromUpperBounds
argument_list|(
name|superclass
argument_list|,
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
operator|)
operator|.
name|getBounds
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|runtimeType
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|getSupertypeFromUpperBounds
argument_list|(
name|superclass
argument_list|,
operator|(
operator|(
name|WildcardType
operator|)
name|runtimeType
operator|)
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|superclass
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|getArraySupertype
argument_list|(
name|superclass
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// resolved supertype
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|supertype
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|resolveSupertype
argument_list|(
name|toGenericType
argument_list|(
name|superclass
argument_list|)
operator|.
name|runtimeType
argument_list|)
decl_stmt|;
return|return
name|supertype
return|;
block|}
comment|/**    * Returns subtype of {@code this} with {@code subclass} as the raw class.    * For example, if this is {@code Iterable<String>} and {@code subclass} is {@code List},    * {@code List<String>} is returned.    */
DECL|method|getSubtype (Class<?> subclass)
specifier|public
specifier|final
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getSubtype
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|runtimeType
operator|instanceof
name|TypeVariable
operator|)
argument_list|,
literal|"Cannot get subtype of type variable<%s>"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|runtimeType
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|getSubtypeFromLowerBounds
argument_list|(
name|subclass
argument_list|,
operator|(
operator|(
name|WildcardType
operator|)
name|runtimeType
operator|)
operator|.
name|getLowerBounds
argument_list|()
argument_list|)
return|;
block|}
comment|// unwrap array type if necessary
if|if
condition|(
name|isArray
argument_list|()
condition|)
block|{
return|return
name|getArraySubtype
argument_list|(
name|subclass
argument_list|)
return|;
block|}
comment|// At this point, it's either a raw class or parameterized type.
name|checkArgument
argument_list|(
name|getRawType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|subclass
argument_list|)
argument_list|,
literal|"%s isn't a subclass of %s"
argument_list|,
name|subclass
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Type
name|resolvedTypeArgs
init|=
name|resolveTypeArgsForSubclass
argument_list|(
name|subclass
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// guarded by the isAssignableFrom() statement above
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|subtype
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|of
argument_list|(
name|resolvedTypeArgs
argument_list|)
decl_stmt|;
return|return
name|subtype
return|;
block|}
comment|/**    * Returns true if this type is a supertype of the given {@code type}. "Supertype" is defined    * according to<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"    *>the rules for type arguments</a> introduced with Java generics.    *    * @since 19.0    */
DECL|method|isSupertypeOf (TypeToken<?> type)
specifier|public
specifier|final
name|boolean
name|isSupertypeOf
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|isSubtypeOf
argument_list|(
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns true if this type is a supertype of the given {@code type}. "Supertype" is defined    * according to<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"    *>the rules for type arguments</a> introduced with Java generics.    *    * @since 19.0    */
DECL|method|isSupertypeOf (Type type)
specifier|public
specifier|final
name|boolean
name|isSupertypeOf
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|type
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns true if this type is a subtype of the given {@code type}. "Subtype" is defined    * according to<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"    *>the rules for type arguments</a> introduced with Java generics.    *    * @since 19.0    */
DECL|method|isSubtypeOf (TypeToken<?> type)
specifier|public
specifier|final
name|boolean
name|isSubtypeOf
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|isSubtypeOf
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns true if this type is a subtype of the given {@code type}. "Subtype" is defined    * according to<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"    *>the rules for type arguments</a> introduced with Java generics.    *    * @since 19.0    */
DECL|method|isSubtypeOf (Type supertype)
specifier|public
specifier|final
name|boolean
name|isSubtypeOf
parameter_list|(
name|Type
name|supertype
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|supertype
argument_list|)
expr_stmt|;
if|if
condition|(
name|supertype
operator|instanceof
name|WildcardType
condition|)
block|{
comment|// if 'supertype' is<? super Foo>, 'this' can be:
comment|// Foo, SubFoo,<? extends Foo>.
comment|// if 'supertype' is<? extends Foo>, nothing is a subtype.
return|return
name|any
argument_list|(
operator|(
operator|(
name|WildcardType
operator|)
name|supertype
operator|)
operator|.
name|getLowerBounds
argument_list|()
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|runtimeType
argument_list|)
return|;
block|}
comment|// if 'this' is wildcard, it's a suptype of to 'supertype' if any of its "extends"
comment|// bounds is a subtype of 'supertype'.
if|if
condition|(
name|runtimeType
operator|instanceof
name|WildcardType
condition|)
block|{
comment|//<? super Base> is of no use in checking 'from' being a subtype of 'to'.
return|return
name|any
argument_list|(
operator|(
operator|(
name|WildcardType
operator|)
name|runtimeType
operator|)
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|supertype
argument_list|)
return|;
block|}
comment|// if 'this' is type variable, it's a subtype if any of its "extends"
comment|// bounds is a subtype of 'supertype'.
if|if
condition|(
name|runtimeType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|runtimeType
operator|.
name|equals
argument_list|(
name|supertype
argument_list|)
operator|||
name|any
argument_list|(
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
operator|)
operator|.
name|getBounds
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|supertype
argument_list|)
return|;
block|}
if|if
condition|(
name|runtimeType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|of
argument_list|(
name|supertype
argument_list|)
operator|.
name|isSuperTypeOfArray
argument_list|(
operator|(
name|GenericArrayType
operator|)
name|runtimeType
argument_list|)
return|;
block|}
comment|// Proceed to regular Type subtype check
if|if
condition|(
name|supertype
operator|instanceof
name|Class
condition|)
block|{
return|return
name|this
operator|.
name|someRawTypeIsSubclassOf
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|supertype
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|supertype
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|this
operator|.
name|isSubtypeOfParameterizedType
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|supertype
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|supertype
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|this
operator|.
name|isSubTypeOfArrayType
argument_list|(
operator|(
name|GenericArrayType
operator|)
name|supertype
argument_list|)
return|;
block|}
else|else
block|{
comment|// to instanceof TypeVariable
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]},    * {@code<? extends Map<String, Integer>[]>} etc.    */
DECL|method|isArray ()
specifier|public
specifier|final
name|boolean
name|isArray
parameter_list|()
block|{
return|return
name|getComponentType
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/**    * Returns true if this type is one of the nine primitive types (including {@code void}).    *    * @since 15.0    */
DECL|method|isPrimitive ()
specifier|public
specifier|final
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
operator|(
name|runtimeType
operator|instanceof
name|Class
operator|)
operator|&&
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
operator|)
operator|.
name|isPrimitive
argument_list|()
return|;
block|}
comment|/**    * Returns the corresponding wrapper type if this is a primitive type; otherwise returns    * {@code this} itself. Idempotent.    *    * @since 15.0    */
DECL|method|wrap ()
specifier|public
specifier|final
name|TypeToken
argument_list|<
name|T
argument_list|>
name|wrap
parameter_list|()
block|{
if|if
condition|(
name|isPrimitive
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// this is a primitive class
name|Class
argument_list|<
name|T
argument_list|>
name|type
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|runtimeType
decl_stmt|;
return|return
name|of
argument_list|(
name|Primitives
operator|.
name|wrap
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|isWrapper ()
specifier|private
name|boolean
name|isWrapper
parameter_list|()
block|{
return|return
name|Primitives
operator|.
name|allWrapperTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|runtimeType
argument_list|)
return|;
block|}
comment|/**    * Returns the corresponding primitive type if this is a wrapper type; otherwise returns    * {@code this} itself. Idempotent.    *    * @since 15.0    */
DECL|method|unwrap ()
specifier|public
specifier|final
name|TypeToken
argument_list|<
name|T
argument_list|>
name|unwrap
parameter_list|()
block|{
if|if
condition|(
name|isWrapper
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// this is a wrapper class
name|Class
argument_list|<
name|T
argument_list|>
name|type
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|runtimeType
decl_stmt|;
return|return
name|of
argument_list|(
name|Primitives
operator|.
name|unwrap
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Returns the array component type if this type represents an array ({@code int[]}, {@code T[]},    * {@code<? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.    */
DECL|method|getComponentType ()
annotation|@
name|Nullable
specifier|public
specifier|final
name|TypeToken
argument_list|<
name|?
argument_list|>
name|getComponentType
parameter_list|()
block|{
name|Type
name|componentType
init|=
name|Types
operator|.
name|getComponentType
argument_list|(
name|runtimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|of
argument_list|(
name|componentType
argument_list|)
return|;
block|}
comment|/**    * Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}.    *    * @since 14.0    */
DECL|method|method (Method method)
specifier|public
specifier|final
name|Invokable
argument_list|<
name|T
argument_list|,
name|Object
argument_list|>
name|method
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|this
operator|.
name|someRawTypeIsSubclassOf
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
argument_list|,
literal|"%s not declared by %s"
argument_list|,
name|method
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|Invokable
operator|.
name|MethodInvokable
argument_list|<
name|T
argument_list|>
argument_list|(
name|method
argument_list|)
block|{
annotation|@
name|Override
name|Type
name|getGenericReturnType
parameter_list|()
block|{
return|return
name|resolveType
argument_list|(
name|super
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Type
index|[]
name|getGenericParameterTypes
parameter_list|()
block|{
return|return
name|resolveInPlace
argument_list|(
name|super
operator|.
name|getGenericParameterTypes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Type
index|[]
name|getGenericExceptionTypes
parameter_list|()
block|{
return|return
name|resolveInPlace
argument_list|(
name|super
operator|.
name|getGenericExceptionTypes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeToken
argument_list|<
name|T
argument_list|>
name|getOwnerType
parameter_list|()
block|{
return|return
name|TypeToken
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getOwnerType
argument_list|()
operator|+
literal|"."
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}.    *    * @since 14.0    */
DECL|method|constructor (Constructor<?> constructor)
specifier|public
specifier|final
name|Invokable
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|constructor
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|constructor
operator|.
name|getDeclaringClass
argument_list|()
operator|==
name|getRawType
argument_list|()
argument_list|,
literal|"%s not declared by %s"
argument_list|,
name|constructor
argument_list|,
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Invokable
operator|.
name|ConstructorInvokable
argument_list|<
name|T
argument_list|>
argument_list|(
name|constructor
argument_list|)
block|{
annotation|@
name|Override
name|Type
name|getGenericReturnType
parameter_list|()
block|{
return|return
name|resolveType
argument_list|(
name|super
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Type
index|[]
name|getGenericParameterTypes
parameter_list|()
block|{
return|return
name|resolveInPlace
argument_list|(
name|super
operator|.
name|getGenericParameterTypes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Type
index|[]
name|getGenericExceptionTypes
parameter_list|()
block|{
return|return
name|resolveInPlace
argument_list|(
name|super
operator|.
name|getGenericExceptionTypes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeToken
argument_list|<
name|T
argument_list|>
name|getOwnerType
parameter_list|()
block|{
return|return
name|TypeToken
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getOwnerType
argument_list|()
operator|+
literal|"("
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|getGenericParameterTypes
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**    * The set of interfaces and classes that {@code T} is or is a subtype of. {@link Object} is not    * included in the set if this type is an interface.    */
DECL|class|TypeSet
specifier|public
class|class
name|TypeSet
extends|extends
name|ForwardingSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|types
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|types
decl_stmt|;
DECL|method|TypeSet ()
name|TypeSet
parameter_list|()
block|{}
comment|/** Returns the types that are interfaces implemented by this type. */
DECL|method|interfaces ()
specifier|public
name|TypeSet
name|interfaces
parameter_list|()
block|{
return|return
operator|new
name|InterfaceSet
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Returns the types that are classes. */
DECL|method|classes ()
specifier|public
name|TypeSet
name|classes
parameter_list|()
block|{
return|return
operator|new
name|ClassSet
argument_list|()
return|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|filteredTypes
init|=
name|types
decl_stmt|;
if|if
condition|(
name|filteredTypes
operator|==
literal|null
condition|)
block|{
comment|// Java has no way to express ? super T when we parameterize TypeToken vs. Class.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ImmutableList
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|collectedTypes
init|=
operator|(
name|ImmutableList
operator|)
name|TypeCollector
operator|.
name|FOR_GENERIC_TYPE
operator|.
name|collectTypes
argument_list|(
name|TypeToken
operator|.
name|this
argument_list|)
decl_stmt|;
return|return
operator|(
name|types
operator|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|collectedTypes
argument_list|)
operator|.
name|filter
argument_list|(
name|TypeFilter
operator|.
name|IGNORE_TYPE_VARIABLE_OR_WILDCARD
argument_list|)
operator|.
name|toSet
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|filteredTypes
return|;
block|}
block|}
comment|/** Returns the raw types of the types in this set, in the same order. */
DECL|method|rawTypes ()
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|rawTypes
parameter_list|()
block|{
comment|// Java has no way to express ? super T when we parameterize TypeToken vs. Class.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|collectedTypes
init|=
operator|(
name|ImmutableList
operator|)
name|TypeCollector
operator|.
name|FOR_RAW_TYPE
operator|.
name|collectTypes
argument_list|(
name|getRawTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|collectedTypes
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|InterfaceSet
specifier|private
specifier|final
class|class
name|InterfaceSet
extends|extends
name|TypeSet
block|{
DECL|field|allTypes
specifier|private
specifier|final
specifier|transient
name|TypeSet
name|allTypes
decl_stmt|;
DECL|field|interfaces
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|interfaces
decl_stmt|;
DECL|method|InterfaceSet (TypeSet allTypes)
name|InterfaceSet
parameter_list|(
name|TypeSet
name|allTypes
parameter_list|)
block|{
name|this
operator|.
name|allTypes
operator|=
name|allTypes
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|result
init|=
name|interfaces
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|interfaces
operator|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|allTypes
argument_list|)
operator|.
name|filter
argument_list|(
name|TypeFilter
operator|.
name|INTERFACE_ONLY
argument_list|)
operator|.
name|toSet
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
DECL|method|interfaces ()
annotation|@
name|Override
specifier|public
name|TypeSet
name|interfaces
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|rawTypes ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|rawTypes
parameter_list|()
block|{
comment|// Java has no way to express ? super T when we parameterize TypeToken vs. Class.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|collectedTypes
init|=
operator|(
name|ImmutableList
operator|)
name|TypeCollector
operator|.
name|FOR_RAW_TYPE
operator|.
name|collectTypes
argument_list|(
name|getRawTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|collectedTypes
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|isInterface
argument_list|()
return|;
block|}
block|}
block|)
function|.toSet
parameter_list|()
function|;
block|}
DECL|method|classes ()
annotation|@
name|Override
specifier|public
name|TypeSet
name|classes
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"interfaces().classes() not supported."
argument_list|)
throw|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|getTypes
argument_list|()
operator|.
name|interfaces
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

begin_class
DECL|class|ClassSet
specifier|private
specifier|final
class|class
name|ClassSet
extends|extends
name|TypeSet
block|{
DECL|field|classes
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|classes
decl_stmt|;
DECL|method|delegate ()
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|result
init|=
name|classes
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ImmutableList
argument_list|<
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|collectedTypes
init|=
operator|(
name|ImmutableList
operator|)
name|TypeCollector
operator|.
name|FOR_GENERIC_TYPE
operator|.
name|classesOnly
argument_list|()
operator|.
name|collectTypes
argument_list|(
name|TypeToken
operator|.
name|this
argument_list|)
decl_stmt|;
return|return
operator|(
name|classes
operator|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|collectedTypes
argument_list|)
operator|.
name|filter
argument_list|(
name|TypeFilter
operator|.
name|IGNORE_TYPE_VARIABLE_OR_WILDCARD
argument_list|)
operator|.
name|toSet
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
DECL|method|classes ()
annotation|@
name|Override
specifier|public
name|TypeSet
name|classes
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|rawTypes ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|rawTypes
parameter_list|()
block|{
comment|// Java has no way to express ? super T when we parameterize TypeToken vs. Class.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|collectedTypes
init|=
operator|(
name|ImmutableList
operator|)
name|TypeCollector
operator|.
name|FOR_RAW_TYPE
operator|.
name|classesOnly
argument_list|()
operator|.
name|collectTypes
argument_list|(
name|getRawTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|collectedTypes
argument_list|)
return|;
block|}
DECL|method|interfaces ()
annotation|@
name|Override
specifier|public
name|TypeSet
name|interfaces
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"classes().interfaces() not supported."
argument_list|)
throw|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|getTypes
argument_list|()
operator|.
name|classes
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

begin_enum
DECL|enum|TypeFilter
specifier|private
enum|enum
name|TypeFilter
implements|implements
name|Predicate
argument_list|<
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|enumConstant|IGNORE_TYPE_VARIABLE_OR_WILDCARD
name|IGNORE_TYPE_VARIABLE_OR_WILDCARD
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|!
operator|(
name|type
operator|.
name|runtimeType
operator|instanceof
name|TypeVariable
operator|||
name|type
operator|.
name|runtimeType
operator|instanceof
name|WildcardType
operator|)
return|;
block|}
block|}
block|,
DECL|enumConstant|INTERFACE_ONLY
name|INTERFACE_ONLY
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getRawType
argument_list|()
operator|.
name|isInterface
argument_list|()
return|;
block|}
block|}
block|}
end_enum

begin_comment
comment|/**    * Returns true if {@code o} is another {@code TypeToken} that represents the same {@link Type}.    */
end_comment

begin_function
DECL|method|equals (@ullable Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TypeToken
condition|)
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|runtimeType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|runtimeType
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|runtimeType
operator|.
name|hashCode
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Types
operator|.
name|toString
argument_list|(
name|runtimeType
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Implemented to support serialization of subclasses. */
end_comment

begin_function
DECL|method|writeReplace ()
specifier|protected
name|Object
name|writeReplace
parameter_list|()
block|{
comment|// TypeResolver just transforms the type to our own impls that are Serializable
comment|// except TypeVariable.
return|return
name|of
argument_list|(
operator|new
name|TypeResolver
argument_list|()
operator|.
name|resolveType
argument_list|(
name|runtimeType
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Ensures that this type token doesn't contain type variables, which can cause unchecked type    * errors for callers like {@link TypeToInstanceMap}.    */
end_comment

begin_function
DECL|method|rejectTypeVariables ()
specifier|final
name|TypeToken
argument_list|<
name|T
argument_list|>
name|rejectTypeVariables
parameter_list|()
block|{
operator|new
name|TypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|runtimeType
operator|+
literal|"contains a type variable and is not safe for the operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|visitWildcardType
parameter_list|(
name|WildcardType
name|type
parameter_list|)
block|{
name|visit
argument_list|(
name|type
operator|.
name|getLowerBounds
argument_list|()
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|type
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitParameterizedType
parameter_list|(
name|ParameterizedType
name|type
parameter_list|)
block|{
name|visit
argument_list|(
name|type
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|type
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitGenericArrayType
parameter_list|(
name|GenericArrayType
name|type
parameter_list|)
block|{
name|visit
argument_list|(
name|type
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|visit
argument_list|(
name|runtimeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
end_function

begin_function
DECL|method|someRawTypeIsSubclassOf (Class<?> superclass)
specifier|private
name|boolean
name|someRawTypeIsSubclassOf
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
range|:
name|getRawTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|superclass
operator|.
name|isAssignableFrom
argument_list|(
name|rawType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|isSubtypeOfParameterizedType (ParameterizedType supertype)
specifier|private
name|boolean
name|isSubtypeOfParameterizedType
parameter_list|(
name|ParameterizedType
name|supertype
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|matchedClass
init|=
name|of
argument_list|(
name|supertype
argument_list|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|someRawTypeIsSubclassOf
argument_list|(
name|matchedClass
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Type
index|[]
name|typeParams
init|=
name|matchedClass
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|Type
index|[]
name|toTypeArgs
init|=
name|supertype
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeParams
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// If 'supertype' is "List<? extends CharSequence>"
comment|// and 'this' is StringArrayList,
comment|// First step is to figure out StringArrayList "is-a" List<E> and<E> is
comment|// String.
comment|// typeParams[0] is E and fromTypeToken.get(typeParams[0]) will resolve to
comment|// String.
comment|// String is then matched against<? extends CharSequence>.
if|if
condition|(
operator|!
name|resolveType
argument_list|(
name|typeParams
index|[
name|i
index|]
argument_list|)
operator|.
name|is
argument_list|(
name|toTypeArgs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
DECL|method|isSubTypeOfArrayType (GenericArrayType supertype)
specifier|private
name|boolean
name|isSubTypeOfArrayType
parameter_list|(
name|GenericArrayType
name|supertype
parameter_list|)
block|{
if|if
condition|(
name|runtimeType
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|fromClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
decl_stmt|;
if|if
condition|(
operator|!
name|fromClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|of
argument_list|(
name|fromClass
operator|.
name|getComponentType
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|supertype
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|runtimeType
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|fromArrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|runtimeType
decl_stmt|;
return|return
name|of
argument_list|(
name|fromArrayType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|supertype
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function

begin_function
DECL|method|isSuperTypeOfArray (GenericArrayType subtype)
specifier|private
name|boolean
name|isSuperTypeOfArray
parameter_list|(
name|GenericArrayType
name|subtype
parameter_list|)
block|{
if|if
condition|(
name|runtimeType
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|thisClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|runtimeType
decl_stmt|;
if|if
condition|(
operator|!
name|thisClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|thisClass
operator|.
name|isAssignableFrom
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
return|;
block|}
return|return
name|of
argument_list|(
name|subtype
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|thisClass
operator|.
name|getComponentType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|runtimeType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|of
argument_list|(
name|subtype
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
operator|(
operator|(
name|GenericArrayType
operator|)
name|runtimeType
operator|)
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Return true if any of the following conditions is met:<ul>    *<li>'this' and {@code formalType} are equal    *<li>{@code formalType} is {@code<? extends Foo>} and 'this' is a subtype of {@code Foo}    *<li>{@code formalType} is {@code<? super Foo>} and 'this' is a supertype of {@code Foo}    *</ul>    */
end_comment

begin_function
DECL|method|is (Type formalType)
specifier|private
name|boolean
name|is
parameter_list|(
name|Type
name|formalType
parameter_list|)
block|{
if|if
condition|(
name|runtimeType
operator|.
name|equals
argument_list|(
name|formalType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|formalType
operator|instanceof
name|WildcardType
condition|)
block|{
comment|// if "formalType" is<? extends Foo>, "this" can be:
comment|// Foo, SubFoo,<? extends Foo>,<? extends SubFoo>,<T extends Foo> or
comment|//<T extends SubFoo>.
comment|// if "formalType" is<? super Foo>, "this" can be:
comment|// Foo, SuperFoo,<? super Foo> or<? super SuperFoo>.
return|return
name|every
argument_list|(
operator|(
operator|(
name|WildcardType
operator|)
name|formalType
operator|)
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|runtimeType
argument_list|)
operator|&&
name|every
argument_list|(
operator|(
operator|(
name|WildcardType
operator|)
name|formalType
operator|)
operator|.
name|getLowerBounds
argument_list|()
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|runtimeType
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|every (Type[] bounds)
specifier|private
specifier|static
name|Bounds
name|every
parameter_list|(
name|Type
index|[]
name|bounds
parameter_list|)
block|{
comment|// Every bound must match. On any false, result is false.
return|return
operator|new
name|Bounds
argument_list|(
name|bounds
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|any (Type[] bounds)
specifier|private
specifier|static
name|Bounds
name|any
parameter_list|(
name|Type
index|[]
name|bounds
parameter_list|)
block|{
comment|// Any bound matches. On any true, result is true.
return|return
operator|new
name|Bounds
argument_list|(
name|bounds
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|Bounds
specifier|private
specifier|static
class|class
name|Bounds
block|{
DECL|field|bounds
specifier|private
specifier|final
name|Type
index|[]
name|bounds
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|boolean
name|target
decl_stmt|;
DECL|method|Bounds (Type[] bounds, boolean target)
name|Bounds
parameter_list|(
name|Type
index|[]
name|bounds
parameter_list|,
name|boolean
name|target
parameter_list|)
block|{
name|this
operator|.
name|bounds
operator|=
name|bounds
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
DECL|method|isSubtypeOf (Type supertype)
name|boolean
name|isSubtypeOf
parameter_list|(
name|Type
name|supertype
parameter_list|)
block|{
for|for
control|(
name|Type
name|bound
range|:
name|bounds
control|)
block|{
if|if
condition|(
name|of
argument_list|(
name|bound
argument_list|)
operator|.
name|isSubtypeOf
argument_list|(
name|supertype
argument_list|)
operator|==
name|target
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
return|return
operator|!
name|target
return|;
block|}
DECL|method|isSupertypeOf (Type subtype)
name|boolean
name|isSupertypeOf
parameter_list|(
name|Type
name|subtype
parameter_list|)
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
init|=
name|of
argument_list|(
name|subtype
argument_list|)
decl_stmt|;
for|for
control|(
name|Type
name|bound
range|:
name|bounds
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isSubtypeOf
argument_list|(
name|bound
argument_list|)
operator|==
name|target
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
return|return
operator|!
name|target
return|;
block|}
block|}
end_class

begin_function
DECL|method|getRawTypes ()
specifier|private
name|ImmutableSet
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|getRawTypes
parameter_list|()
block|{
specifier|final
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
operator|new
name|TypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|visit
argument_list|(
name|t
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitWildcardType
parameter_list|(
name|WildcardType
name|t
parameter_list|)
block|{
name|visit
argument_list|(
name|t
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitParameterizedType
parameter_list|(
name|ParameterizedType
name|t
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitGenericArrayType
parameter_list|(
name|GenericArrayType
name|t
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Types
operator|.
name|getArrayClass
argument_list|(
name|of
argument_list|(
name|t
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|visit
argument_list|(
name|runtimeType
argument_list|)
expr_stmt|;
comment|// Cast from ImmutableSet<Class<?>> to ImmutableSet<Class<? super T>>
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ImmutableSet
argument_list|<
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|result
init|=
operator|(
name|ImmutableSet
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the type token representing the generic type declaration of {@code cls}. For example:    * {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}.    *    *<p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is    * returned.    */
end_comment

begin_function
DECL|method|toGenericType (Class<T> cls)
annotation|@
name|VisibleForTesting
specifier|static
parameter_list|<
name|T
parameter_list|>
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|toGenericType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Type
name|arrayOfGenericType
init|=
name|Types
operator|.
name|newArrayType
argument_list|(
comment|// If we are passed with int[].class, don't turn it to GenericArrayType
name|toGenericType
argument_list|(
name|cls
operator|.
name|getComponentType
argument_list|()
argument_list|)
operator|.
name|runtimeType
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// array is covariant
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|result
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|of
argument_list|(
name|arrayOfGenericType
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
name|TypeVariable
argument_list|<
name|Class
argument_list|<
name|T
argument_list|>
argument_list|>
index|[]
name|typeParams
init|=
name|cls
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|Type
name|ownerType
init|=
name|cls
operator|.
name|isMemberClass
argument_list|()
condition|?
name|toGenericType
argument_list|(
name|cls
operator|.
name|getEnclosingClass
argument_list|()
argument_list|)
operator|.
name|runtimeType
else|:
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|typeParams
operator|.
name|length
operator|>
literal|0
operator|)
operator|||
operator|(
name|ownerType
operator|!=
name|cls
operator|.
name|getEnclosingClass
argument_list|()
operator|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Like, it's Iterable<T> for Iterable.class
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|of
argument_list|(
name|Types
operator|.
name|newParameterizedTypeWithOwner
argument_list|(
name|ownerType
argument_list|,
name|cls
argument_list|,
name|typeParams
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|type
return|;
block|}
else|else
block|{
return|return
name|of
argument_list|(
name|cls
argument_list|)
return|;
block|}
block|}
end_function

begin_function
DECL|method|getSupertypeFromUpperBounds ( Class<? super T> supertype, Type[] upperBounds)
specifier|private
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getSupertypeFromUpperBounds
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|supertype
parameter_list|,
name|Type
index|[]
name|upperBounds
parameter_list|)
block|{
for|for
control|(
name|Type
name|upperBound
range|:
name|upperBounds
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// T's upperbound is<? super T>.
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|bound
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|of
argument_list|(
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|isSubtypeOf
argument_list|(
name|supertype
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
comment|// guarded by the isSubtypeOf check.
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|result
init|=
name|bound
operator|.
name|getSupertype
argument_list|(
operator|(
name|Class
operator|)
name|supertype
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|supertype
operator|+
literal|" isn't a super type of "
operator|+
name|this
argument_list|)
throw|;
block|}
end_function

begin_function
DECL|method|getSubtypeFromLowerBounds (Class<?> subclass, Type[] lowerBounds)
specifier|private
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getSubtypeFromLowerBounds
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Type
index|[]
name|lowerBounds
parameter_list|)
block|{
for|for
control|(
name|Type
name|lowerBound
range|:
name|lowerBounds
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// T's lower bound is<? extends T>
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|bound
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|of
argument_list|(
name|lowerBound
argument_list|)
decl_stmt|;
comment|// Java supports only one lowerbound anyway.
return|return
name|bound
operator|.
name|getSubtype
argument_list|(
name|subclass
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|subclass
operator|+
literal|" isn't a subclass of "
operator|+
name|this
argument_list|)
throw|;
block|}
end_function

begin_function
DECL|method|getArraySupertype (Class<? super T> supertype)
specifier|private
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getArraySupertype
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|supertype
parameter_list|)
block|{
comment|// with component type, we have lost generic type information
comment|// Use raw type so that compiler allows us to call getSupertype()
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|TypeToken
name|componentType
init|=
name|checkNotNull
argument_list|(
name|getComponentType
argument_list|()
argument_list|,
literal|"%s isn't a super type of %s"
argument_list|,
name|supertype
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// array is covariant. component type is super type, so is the array type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// going from raw type back to generics
name|TypeToken
argument_list|<
name|?
argument_list|>
name|componentSupertype
init|=
name|componentType
operator|.
name|getSupertype
argument_list|(
name|supertype
operator|.
name|getComponentType
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// component type is super type, so is array type.
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
name|result
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
comment|// If we are passed with int[].class, don't turn it to GenericArrayType
name|of
argument_list|(
name|newArrayClassOrGenericArrayType
argument_list|(
name|componentSupertype
operator|.
name|runtimeType
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
DECL|method|getArraySubtype (Class<?> subclass)
specifier|private
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getArraySubtype
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|)
block|{
comment|// array is covariant. component type is subtype, so is the array type.
name|TypeToken
argument_list|<
name|?
argument_list|>
name|componentSubtype
init|=
name|getComponentType
argument_list|()
operator|.
name|getSubtype
argument_list|(
name|subclass
operator|.
name|getComponentType
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// component type is subtype, so is array type.
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|result
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
comment|// If we are passed with int[].class, don't turn it to GenericArrayType
name|of
argument_list|(
name|newArrayClassOrGenericArrayType
argument_list|(
name|componentSubtype
operator|.
name|runtimeType
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
DECL|method|resolveTypeArgsForSubclass (Class<?> subclass)
specifier|private
name|Type
name|resolveTypeArgsForSubclass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|)
block|{
if|if
condition|(
name|runtimeType
operator|instanceof
name|Class
condition|)
block|{
comment|// no resolution needed
return|return
name|subclass
return|;
block|}
comment|// class Base<A, B> {}
comment|// class Sub<X, Y> extends Base<X, Y> {}
comment|// Base<String, Integer>.subtype(Sub.class):
comment|// Sub<X, Y>.getSupertype(Base.class) => Base<X, Y>
comment|// => X=String, Y=Integer
comment|// => Sub<X, Y>=Sub<String, Integer>
name|TypeToken
argument_list|<
name|?
argument_list|>
name|genericSubtype
init|=
name|toGenericType
argument_list|(
name|subclass
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
comment|// subclass isn't<? extends T>
name|Type
name|supertypeWithArgsFromSubtype
init|=
name|genericSubtype
operator|.
name|getSupertype
argument_list|(
operator|(
name|Class
operator|)
name|getRawType
argument_list|()
argument_list|)
operator|.
name|runtimeType
decl_stmt|;
return|return
operator|new
name|TypeResolver
argument_list|()
operator|.
name|where
argument_list|(
name|supertypeWithArgsFromSubtype
argument_list|,
name|runtimeType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|genericSubtype
operator|.
name|runtimeType
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates an array class if {@code componentType} is a class, or else, a    * {@link GenericArrayType}. This is what Java7 does for generic array type    * parameters.    */
end_comment

begin_function
DECL|method|newArrayClassOrGenericArrayType (Type componentType)
specifier|private
specifier|static
name|Type
name|newArrayClassOrGenericArrayType
parameter_list|(
name|Type
name|componentType
parameter_list|)
block|{
return|return
name|Types
operator|.
name|JavaVersion
operator|.
name|JAVA7
operator|.
name|newArrayType
argument_list|(
name|componentType
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|SimpleTypeToken
specifier|private
specifier|static
specifier|final
class|class
name|SimpleTypeToken
parameter_list|<
name|T
parameter_list|>
extends|extends
name|TypeToken
argument_list|<
name|T
argument_list|>
block|{
DECL|method|SimpleTypeToken (Type type)
name|SimpleTypeToken
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

begin_comment
comment|/**    * Collects parent types from a sub type.    *    * @param<K> The type "kind". Either a TypeToken, or Class.    */
end_comment

begin_class
DECL|class|TypeCollector
specifier|private
specifier|abstract
specifier|static
class|class
name|TypeCollector
parameter_list|<
name|K
parameter_list|>
block|{
DECL|field|FOR_GENERIC_TYPE
specifier|static
specifier|final
name|TypeCollector
argument_list|<
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
name|FOR_GENERIC_TYPE
init|=
operator|new
name|TypeCollector
argument_list|<
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getRawType
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|?
extends|extends
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
name|getInterfaces
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getGenericInterfaces
argument_list|()
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
name|TypeToken
argument_list|<
name|?
argument_list|>
name|getSuperclass
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getGenericSuperclass
argument_list|()
return|;
block|}
block|}
empty_stmt|;
DECL|field|FOR_RAW_TYPE
specifier|static
specifier|final
name|TypeCollector
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|FOR_RAW_TYPE
init|=
operator|new
name|TypeCollector
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|?
extends|extends
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getInterfaces
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getInterfaces
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
name|Class
argument_list|<
name|?
argument_list|>
name|getSuperclass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getSuperclass
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/** For just classes, we don't have to traverse interfaces. */
DECL|method|classesOnly ()
specifier|final
name|TypeCollector
argument_list|<
name|K
argument_list|>
name|classesOnly
parameter_list|()
block|{
return|return
operator|new
name|ForwardingTypeCollector
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|getInterfaces
parameter_list|(
name|K
name|type
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|collectTypes
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|types
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|K
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|K
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
operator|!
name|getRawType
argument_list|(
name|type
argument_list|)
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|collectTypes
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|collectTypes (K type)
specifier|final
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|collectTypes
parameter_list|(
name|K
name|type
parameter_list|)
block|{
return|return
name|collectTypes
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
DECL|method|collectTypes (Iterable<? extends K> types)
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|collectTypes
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|types
parameter_list|)
block|{
comment|// type -> order number. 1 for Object, 2 for anything directly below, so on so forth.
name|Map
argument_list|<
name|K
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|K
name|type
range|:
name|types
control|)
block|{
name|collectTypes
argument_list|(
name|type
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|sortKeysByValue
argument_list|(
name|map
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
return|;
block|}
comment|/** Collects all types to map, and returns the total depth from T up to Object. */
DECL|method|collectTypes (K type, Map<? super K, Integer> map)
specifier|private
name|int
name|collectTypes
parameter_list|(
name|K
name|type
parameter_list|,
name|Map
argument_list|<
name|?
super|super
name|K
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
block|{
name|Integer
name|existing
init|=
name|map
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// short circuit: if set contains type it already contains its supertypes
return|return
name|existing
return|;
block|}
name|int
name|aboveMe
init|=
name|getRawType
argument_list|(
name|type
argument_list|)
operator|.
name|isInterface
argument_list|()
condition|?
literal|1
comment|// interfaces should be listed before Object
else|:
literal|0
decl_stmt|;
for|for
control|(
name|K
name|interfaceType
range|:
name|getInterfaces
argument_list|(
name|type
argument_list|)
control|)
block|{
name|aboveMe
operator|=
name|Math
operator|.
name|max
argument_list|(
name|aboveMe
argument_list|,
name|collectTypes
argument_list|(
name|interfaceType
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|K
name|superclass
init|=
name|getSuperclass
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|aboveMe
operator|=
name|Math
operator|.
name|max
argument_list|(
name|aboveMe
argument_list|,
name|collectTypes
argument_list|(
name|superclass
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*        * TODO(benyu): should we include Object for interface?        * Also, CharSequence[] and Object[] for String[]?        *        */
name|map
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|aboveMe
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|aboveMe
operator|+
literal|1
return|;
block|}
DECL|method|sortKeysByValue ( final Map<K, V> map, final Comparator<? super V> valueComparator)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|sortKeysByValue
parameter_list|(
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|)
block|{
name|Ordering
argument_list|<
name|K
argument_list|>
name|keyOrdering
init|=
operator|new
name|Ordering
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|K
name|left
parameter_list|,
name|K
name|right
parameter_list|)
block|{
return|return
name|valueComparator
operator|.
name|compare
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|left
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|right
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|keyOrdering
operator|.
name|immutableSortedCopy
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRawType (K type)
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|(
name|K
name|type
parameter_list|)
function_decl|;
DECL|method|getInterfaces (K type)
specifier|abstract
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|getInterfaces
parameter_list|(
name|K
name|type
parameter_list|)
function_decl|;
DECL|method|getSuperclass (K type)
annotation|@
name|Nullable
specifier|abstract
name|K
name|getSuperclass
parameter_list|(
name|K
name|type
parameter_list|)
function_decl|;
DECL|class|ForwardingTypeCollector
specifier|private
specifier|static
class|class
name|ForwardingTypeCollector
parameter_list|<
name|K
parameter_list|>
extends|extends
name|TypeCollector
argument_list|<
name|K
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|TypeCollector
argument_list|<
name|K
argument_list|>
name|delegate
decl_stmt|;
DECL|method|ForwardingTypeCollector (TypeCollector<K> delegate)
name|ForwardingTypeCollector
parameter_list|(
name|TypeCollector
argument_list|<
name|K
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|getRawType (K type)
annotation|@
name|Override
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|(
name|K
name|type
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getRawType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getInterfaces (K type)
annotation|@
name|Override
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|getInterfaces
parameter_list|(
name|K
name|type
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getInterfaces
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getSuperclass (K type)
annotation|@
name|Override
name|K
name|getSuperclass
parameter_list|(
name|K
name|type
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getSuperclass
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
block|}
end_class

unit|}
end_unit

