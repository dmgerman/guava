begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AccessibleObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Represents either a {@link Field}, a {@link Method} or a {@link Constructor}.  * Provides convenience methods such as {@link #isPublic} and {@link #isPackagePrivate}.  *   * @author Ben Yu  */
end_comment

begin_class
DECL|class|Element
class|class
name|Element
extends|extends
name|AccessibleObject
implements|implements
name|Member
block|{
DECL|field|accessibleObject
specifier|private
specifier|final
name|AccessibleObject
name|accessibleObject
decl_stmt|;
DECL|field|member
specifier|private
specifier|final
name|Member
name|member
decl_stmt|;
DECL|method|Element (M member)
parameter_list|<
name|M
extends|extends
name|AccessibleObject
operator|&
name|Member
parameter_list|>
name|Element
parameter_list|(
name|M
name|member
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|this
operator|.
name|accessibleObject
operator|=
name|member
expr_stmt|;
name|this
operator|.
name|member
operator|=
name|member
expr_stmt|;
block|}
DECL|method|isAnnotationPresent (Class<? extends Annotation> annotationClass)
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isAnnotationPresent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationClass
parameter_list|)
block|{
return|return
name|accessibleObject
operator|.
name|isAnnotationPresent
argument_list|(
name|annotationClass
argument_list|)
return|;
block|}
DECL|method|getAnnotation (Class<A> annotationClass)
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|A
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|A
argument_list|>
name|annotationClass
parameter_list|)
block|{
return|return
name|accessibleObject
operator|.
name|getAnnotation
argument_list|(
name|annotationClass
argument_list|)
return|;
block|}
DECL|method|getAnnotations ()
annotation|@
name|Override
specifier|public
specifier|final
name|Annotation
index|[]
name|getAnnotations
parameter_list|()
block|{
return|return
name|accessibleObject
operator|.
name|getAnnotations
argument_list|()
return|;
block|}
DECL|method|getDeclaredAnnotations ()
annotation|@
name|Override
specifier|public
specifier|final
name|Annotation
index|[]
name|getDeclaredAnnotations
parameter_list|()
block|{
return|return
name|accessibleObject
operator|.
name|getDeclaredAnnotations
argument_list|()
return|;
block|}
DECL|method|setAccessible (boolean flag)
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setAccessible
parameter_list|(
name|boolean
name|flag
parameter_list|)
throws|throws
name|SecurityException
block|{
name|accessibleObject
operator|.
name|setAccessible
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
DECL|method|isAccessible ()
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isAccessible
parameter_list|()
block|{
return|return
name|accessibleObject
operator|.
name|isAccessible
argument_list|()
return|;
block|}
DECL|method|getDeclaringClass ()
annotation|@
name|Override
specifier|public
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|getDeclaringClass
parameter_list|()
block|{
return|return
name|member
operator|.
name|getDeclaringClass
argument_list|()
return|;
block|}
DECL|method|getName ()
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|member
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getModifiers ()
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|getModifiers
parameter_list|()
block|{
return|return
name|member
operator|.
name|getModifiers
argument_list|()
return|;
block|}
DECL|method|isSynthetic ()
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isSynthetic
parameter_list|()
block|{
return|return
name|member
operator|.
name|isSynthetic
argument_list|()
return|;
block|}
comment|/** Returns true if the element is public. */
DECL|method|isPublic ()
specifier|public
specifier|final
name|boolean
name|isPublic
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isPublic
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the element is protected. */
DECL|method|isProtected ()
specifier|public
specifier|final
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isProtected
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the element is package-private. */
DECL|method|isPackagePrivate ()
specifier|public
specifier|final
name|boolean
name|isPackagePrivate
parameter_list|()
block|{
return|return
operator|!
name|isPrivate
argument_list|()
operator|&&
operator|!
name|isPublic
argument_list|()
operator|&&
operator|!
name|isProtected
argument_list|()
return|;
block|}
comment|/** Returns true if the element is private. */
DECL|method|isPrivate ()
specifier|public
specifier|final
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the field or method is static. */
DECL|method|isStatic ()
specifier|public
specifier|final
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isStatic
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.    *     *<p>Note that a method may still be effectively "final", or non-overridable when it has no    * {@code final} keyword. For example, it could be private, or it could be declared by a final    * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.    */
DECL|method|isFinal ()
specifier|public
specifier|final
name|boolean
name|isFinal
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isFinal
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the method is abstract. */
DECL|method|isAbstract ()
specifier|public
specifier|final
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the element is native. */
DECL|method|isNative ()
specifier|public
specifier|final
name|boolean
name|isNative
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isNative
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the method is synchronized. */
DECL|method|isSynchronized ()
specifier|public
specifier|final
name|boolean
name|isSynchronized
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isSynchronized
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the field is volatile. */
DECL|method|isVolatile ()
specifier|final
name|boolean
name|isVolatile
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isVolatile
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns true if the field is transient. */
DECL|method|isTransient ()
specifier|final
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
name|Modifier
operator|.
name|isTransient
argument_list|(
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|that
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
return|return
name|member
operator|.
name|equals
argument_list|(
name|that
operator|.
name|member
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|member
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|member
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

