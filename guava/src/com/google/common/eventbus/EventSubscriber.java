begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Wraps a single-argument subscriber method on a specific object.  *  *<p>This class only verifies the suitability of the method and event type if  * something fails.  Callers are expected to verify their uses of this class.  *  *<p>Two EventSubscribers are equivalent when they refer to the same method on the  * same object (not class).   This property is used to ensure that no subscriber  * method is registered more than once.  *  * @author Cliff Biffle  */
end_comment

begin_class
DECL|class|EventSubscriber
class|class
name|EventSubscriber
block|{
comment|/** Object sporting the subscriber method. */
DECL|field|target
specifier|private
specifier|final
name|Object
name|target
decl_stmt|;
comment|/** Subscriber method. */
DECL|field|method
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
comment|/**    * Creates a new EventSubscriber to wrap {@code method} on @{code target}.    *    * @param target  object to which the method applies.    * @param method  subscriber method.    */
DECL|method|EventSubscriber (Object target, Method method)
name|EventSubscriber
parameter_list|(
name|Object
name|target
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|target
argument_list|,
literal|"EventSubscriber target cannot be null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|method
argument_list|,
literal|"EventSubscriber method cannot be null."
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invokes the wrapped subscriber method to handle {@code event}.    *    * @param event  event to handle    * @throws InvocationTargetException  if the wrapped method throws any    *     {@link Throwable} that is not an {@link Error} ({@code Error} instances are    *     propagated as-is).    */
DECL|method|handleEvent (Object event)
specifier|public
name|void
name|handleEvent
parameter_list|(
name|Object
name|event
parameter_list|)
throws|throws
name|InvocationTargetException
block|{
name|checkNotNull
argument_list|(
name|event
argument_list|)
expr_stmt|;
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|event
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Method rejected target/argument: "
operator|+
name|event
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Method became inaccessible: "
operator|+
name|event
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[wrapper "
operator|+
name|method
operator|+
literal|"]"
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|PRIME
init|=
literal|31
decl_stmt|;
return|return
operator|(
name|PRIME
operator|+
name|method
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
name|PRIME
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|EventSubscriber
condition|)
block|{
name|EventSubscriber
name|that
init|=
operator|(
name|EventSubscriber
operator|)
name|obj
decl_stmt|;
comment|// Use == so that different equal instances will still receive events.
comment|// We only guard against the case that the same object is registered
comment|// multiple times
return|return
name|target
operator|==
name|that
operator|.
name|target
operator|&&
name|method
operator|.
name|equals
argument_list|(
name|that
operator|.
name|method
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getSubscriber ()
specifier|public
name|Object
name|getSubscriber
parameter_list|()
block|{
return|return
name|target
return|;
block|}
DECL|method|getMethod ()
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
block|}
end_class

end_unit

