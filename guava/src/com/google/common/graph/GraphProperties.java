begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Static utility methods for calculating properties of {@link Graph} instances.  *  * @author Joshua O'Madadhain  * @since 20.0  */
end_comment

begin_comment
comment|// TODO(b/27628622): Move these methods to {@link Graphs}? Or at least rename this class to
end_comment

begin_comment
comment|// something besides "GraphProperties", and consider putting in graph/algorithms/.
end_comment

begin_class
annotation|@
name|Beta
DECL|class|GraphProperties
specifier|public
specifier|final
class|class
name|GraphProperties
block|{
DECL|method|GraphProperties ()
specifier|private
name|GraphProperties
parameter_list|()
block|{}
comment|/**    * Returns true iff {@code graph} has at least one cycle. A cycle is defined as a non-empty    * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)    * starting and ending with the same node.    *    *<p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).    */
DECL|method|isCyclic (Graph<?> graph)
specifier|public
specifier|static
name|boolean
name|isCyclic
parameter_list|(
name|Graph
argument_list|<
name|?
argument_list|>
name|graph
parameter_list|)
block|{
name|int
name|numEdges
init|=
name|graph
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numEdges
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
comment|// An edge-free graph is acyclic by definition.
block|}
if|if
condition|(
operator|!
name|graph
operator|.
name|isDirected
argument_list|()
operator|&&
name|numEdges
operator|>=
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// Optimization for the undirected case: at least one cycle must exist.
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|NodeState
argument_list|>
name|visitedNodes
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|isSubgraphCyclic
argument_list|(
name|graph
argument_list|,
name|visitedNodes
argument_list|,
name|node
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns true iff {@code network} has at least one cycle. A cycle is defined as a non-empty    * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)    * starting and ending with the same node.    *    *<p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).    */
DECL|method|isCyclic (Network<?, ?> network)
specifier|public
specifier|static
name|boolean
name|isCyclic
parameter_list|(
name|Network
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|network
parameter_list|)
block|{
comment|// In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.
comment|// However, in an undirected graph, any parallel edge induces a cycle in the graph.
if|if
condition|(
operator|!
name|network
operator|.
name|isDirected
argument_list|()
operator|&&
name|network
operator|.
name|allowsParallelEdges
argument_list|()
operator|&&
name|network
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|network
operator|.
name|asGraph
argument_list|()
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|isCyclic
argument_list|(
name|network
operator|.
name|asGraph
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Performs a traversal of the nodes reachable from {@code node}. If we ever reach a node we've    * already visited (following only outgoing edges and without reusing edges), we know there's a    * cycle in the graph.    */
DECL|method|isSubgraphCyclic ( Graph<?> graph, Map<Object, NodeState> visitedNodes, Object node, @Nullable Object previousNode)
specifier|private
specifier|static
name|boolean
name|isSubgraphCyclic
parameter_list|(
name|Graph
argument_list|<
name|?
argument_list|>
name|graph
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|NodeState
argument_list|>
name|visitedNodes
parameter_list|,
name|Object
name|node
parameter_list|,
annotation|@
name|Nullable
name|Object
name|previousNode
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|visitedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|NodeState
operator|.
name|COMPLETE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|==
name|NodeState
operator|.
name|PENDING
condition|)
block|{
return|return
literal|true
return|;
block|}
name|visitedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|NodeState
operator|.
name|PENDING
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|nextNode
range|:
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|canTraverseWithoutReusingEdge
argument_list|(
name|graph
argument_list|,
name|nextNode
argument_list|,
name|previousNode
argument_list|)
operator|&&
name|isSubgraphCyclic
argument_list|(
name|graph
argument_list|,
name|visitedNodes
argument_list|,
name|nextNode
argument_list|,
name|node
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|visitedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|NodeState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Determines whether an edge has already been used during traversal. In the directed case a cycle    * is always detected before reusing an edge, so no special logic is required. In the undirected    * case, we must take care not to "backtrack" over an edge (i.e. going from A to B and then going    * from B to A).    */
DECL|method|canTraverseWithoutReusingEdge ( Graph<?> graph, Object nextNode, @Nullable Object previousNode)
specifier|private
specifier|static
name|boolean
name|canTraverseWithoutReusingEdge
parameter_list|(
name|Graph
argument_list|<
name|?
argument_list|>
name|graph
parameter_list|,
name|Object
name|nextNode
parameter_list|,
annotation|@
name|Nullable
name|Object
name|previousNode
parameter_list|)
block|{
if|if
condition|(
name|graph
operator|.
name|isDirected
argument_list|()
operator|||
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|previousNode
argument_list|,
name|nextNode
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// This falls into the undirected A->B->A case. The Graph interface does not support parallel
comment|// edges, so this traversal would require reusing the undirected AB edge.
return|return
literal|false
return|;
block|}
comment|/**    * An enum representing the state of a node during DFS. {@code PENDING} means that    * the node is on the stack of the DFS, while {@code COMPLETE} means that    * the node and all its successors have been already explored. Any node that    * has not been explored will not have a state at all.    */
DECL|enum|NodeState
specifier|private
enum|enum
name|NodeState
block|{
DECL|enumConstant|PENDING
name|PENDING
block|,
DECL|enumConstant|COMPLETE
name|COMPLETE
block|}
block|}
end_class

end_unit

