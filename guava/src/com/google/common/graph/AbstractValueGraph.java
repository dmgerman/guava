begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|GRAPH_STRING_FORMAT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class provides a skeletal implementation of {@link ValueGraph}. It is recommended to extend  * this class rather than implement {@link ValueGraph} directly.  *  * @author James Sexton  * @param<N> Node parameter type  * @param<V> Value parameter type  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|AbstractValueGraph
specifier|public
specifier|abstract
class|class
name|AbstractValueGraph
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractGraph
argument_list|<
name|N
argument_list|>
implements|implements
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
block|{
DECL|field|edgeValueMap
specifier|private
specifier|transient
name|Map
argument_list|<
name|EndpointPair
argument_list|<
name|N
argument_list|>
argument_list|,
name|V
argument_list|>
name|edgeValueMap
decl_stmt|;
annotation|@
name|Override
DECL|method|edgeValues ()
specifier|public
name|Map
argument_list|<
name|EndpointPair
argument_list|<
name|N
argument_list|>
argument_list|,
name|V
argument_list|>
name|edgeValues
parameter_list|()
block|{
if|if
condition|(
name|edgeValueMap
operator|==
literal|null
condition|)
block|{
name|Function
argument_list|<
name|EndpointPair
argument_list|<
name|N
argument_list|>
argument_list|,
name|V
argument_list|>
name|edgeToValueFn
init|=
operator|new
name|Function
argument_list|<
name|EndpointPair
argument_list|<
name|N
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|apply
parameter_list|(
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|edge
parameter_list|)
block|{
return|return
name|edgeValue
argument_list|(
name|edge
operator|.
name|nodeU
argument_list|()
argument_list|,
name|edge
operator|.
name|nodeV
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|edgeValueMap
operator|=
name|Maps
operator|.
name|asMap
argument_list|(
name|edges
argument_list|()
argument_list|,
name|edgeToValueFn
argument_list|)
expr_stmt|;
block|}
return|return
name|edgeValueMap
return|;
block|}
comment|/** Returns a string representation of this graph. */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|propertiesString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"isDirected: %s, allowsSelfLoops: %s"
argument_list|,
name|isDirected
argument_list|()
argument_list|,
name|allowsSelfLoops
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|GRAPH_STRING_FORMAT
argument_list|,
name|propertiesString
argument_list|,
name|nodes
argument_list|()
argument_list|,
name|edgeValues
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

