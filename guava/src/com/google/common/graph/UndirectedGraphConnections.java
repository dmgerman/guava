begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|INNER_CAPACITY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|INNER_LOAD_FACTOR
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link GraphConnections} for undirected graphs.  *  * @author James Sexton  * @param<N> Node parameter type  * @param<V> Value parameter type  */
end_comment

begin_class
DECL|class|UndirectedGraphConnections
specifier|final
class|class
name|UndirectedGraphConnections
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
implements|implements
name|GraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
block|{
DECL|field|adjacentNodeValues
specifier|private
specifier|final
name|Map
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|adjacentNodeValues
decl_stmt|;
DECL|method|UndirectedGraphConnections (Map<N, V> adjacentNodeValues)
specifier|private
name|UndirectedGraphConnections
parameter_list|(
name|Map
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|adjacentNodeValues
parameter_list|)
block|{
name|this
operator|.
name|adjacentNodeValues
operator|=
name|checkNotNull
argument_list|(
name|adjacentNodeValues
argument_list|)
expr_stmt|;
block|}
DECL|method|of ()
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|UndirectedGraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|new
name|UndirectedGraphConnections
argument_list|<>
argument_list|(
operator|new
name|HashMap
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
argument_list|(
name|INNER_CAPACITY
argument_list|,
name|INNER_LOAD_FACTOR
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ofImmutable (Map<N, V> adjacentNodeValues)
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|UndirectedGraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|ofImmutable
parameter_list|(
name|Map
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|adjacentNodeValues
parameter_list|)
block|{
return|return
operator|new
name|UndirectedGraphConnections
argument_list|<>
argument_list|(
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|adjacentNodeValues
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentNodes ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|adjacentNodeValues
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|()
block|{
return|return
name|adjacentNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|successors ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|()
block|{
return|return
name|adjacentNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|value (N node)
specifier|public
name|V
name|value
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|adjacentNodeValues
operator|.
name|get
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removePredecessor (N node)
specifier|public
name|void
name|removePredecessor
parameter_list|(
name|N
name|node
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|V
name|unused
init|=
name|removeSuccessor
argument_list|(
name|node
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeSuccessor (N node)
specifier|public
name|V
name|removeSuccessor
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|adjacentNodeValues
operator|.
name|remove
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addPredecessor (N node, V value)
specifier|public
name|void
name|addPredecessor
parameter_list|(
name|N
name|node
parameter_list|,
name|V
name|value
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|V
name|unused
init|=
name|addSuccessor
argument_list|(
name|node
argument_list|,
name|value
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|addSuccessor (N node, V value)
specifier|public
name|V
name|addSuccessor
parameter_list|(
name|N
name|node
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

