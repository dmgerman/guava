begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|NOT_AVAILABLE_ON_UNDIRECTED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * An immutable {@link Collection} to represent the endpoints of an edge in a graph.  *<p>  * If an {@link Endpoints} is directed, it is an ordered pair of nodes (source and target).  * Otherwise, it is an unordered pair of nodes that can be accessed through the iterator.  *  * @author James Sexton  * @since 20.0  */
end_comment

begin_class
DECL|class|Endpoints
specifier|public
specifier|abstract
class|class
name|Endpoints
parameter_list|<
name|N
parameter_list|>
extends|extends
name|AbstractCollection
argument_list|<
name|N
argument_list|>
block|{
DECL|field|nodeA
specifier|private
specifier|final
name|N
name|nodeA
decl_stmt|;
DECL|field|nodeB
specifier|private
specifier|final
name|N
name|nodeB
decl_stmt|;
DECL|method|Endpoints (N nodeA, N nodeB)
specifier|private
name|Endpoints
parameter_list|(
name|N
name|nodeA
parameter_list|,
name|N
name|nodeB
parameter_list|)
block|{
name|this
operator|.
name|nodeA
operator|=
name|checkNotNull
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeB
operator|=
name|checkNotNull
argument_list|(
name|nodeB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns an {@link Endpoints} representing the endpoints of a directed edge.    */
DECL|method|ofDirected (N source, N target)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|Endpoints
argument_list|<
name|N
argument_list|>
name|ofDirected
parameter_list|(
name|N
name|source
parameter_list|,
name|N
name|target
parameter_list|)
block|{
return|return
operator|new
name|Directed
argument_list|<
name|N
argument_list|>
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
comment|/**    * Returns an {@link Endpoints} representing the endpoints of an undirected edge.    */
DECL|method|ofUndirected (N nodeA, N nodeB)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|Endpoints
argument_list|<
name|N
argument_list|>
name|ofUndirected
parameter_list|(
name|N
name|nodeA
parameter_list|,
name|N
name|nodeB
parameter_list|)
block|{
return|return
operator|new
name|Undirected
argument_list|<
name|N
argument_list|>
argument_list|(
name|nodeA
argument_list|,
name|nodeB
argument_list|)
return|;
block|}
comment|/**    * Returns whether the nodes of this {@link Endpoints} are ordered. Generally, this is equal to    * {@link Graph#isDirected()} of the graph that generated this {@link Endpoints}.    */
DECL|method|isDirected ()
specifier|public
specifier|abstract
name|boolean
name|isDirected
parameter_list|()
function_decl|;
comment|/**    * If this {@link Endpoints} is directed, returns the node which is the source.    *    * @throws UnsupportedOperationException if this Endpoints is not directed    */
DECL|method|source ()
specifier|public
specifier|abstract
name|N
name|source
parameter_list|()
function_decl|;
comment|/**    * If this {@link Endpoints} is directed, returns the node which is the target.    *    * @throws UnsupportedOperationException if this Endpoints is not directed    */
DECL|method|target ()
specifier|public
specifier|abstract
name|N
name|target
parameter_list|()
function_decl|;
comment|/**    * If this {@link Endpoints} is directed, returns the node which is the source.    * Otherwise, returns an arbitrary (but consistent) endpoint of the edge.    */
DECL|method|nodeA ()
name|N
name|nodeA
parameter_list|()
block|{
return|return
name|nodeA
return|;
block|}
comment|/**    * Returns the node that is opposite {@link #nodeA()}. In the directed case, this is the target.    */
DECL|method|nodeB ()
name|N
name|nodeB
parameter_list|()
block|{
return|return
name|nodeB
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|N
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableIterator
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|N
name|next
parameter_list|()
block|{
switch|switch
condition|(
name|pos
operator|++
condition|)
block|{
case|case
literal|0
case|:
return|return
name|nodeA
return|;
case|case
literal|1
case|:
return|return
name|nodeB
return|;
default|default:
name|pos
operator|=
literal|2
expr_stmt|;
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object obj)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|nodeA
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|||
name|nodeB
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/**    * If two {@link Endpoints}s are directed, the source and target must be equal to be considered    * equal. If two {@link Endpoints}s are undirected, the unordered set of nodes must be equal to be    * considered equal. Directed {@link Endpoints} are never equal to undirected {@link Endpoints}.    */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
DECL|class|Directed
specifier|private
specifier|static
specifier|final
class|class
name|Directed
parameter_list|<
name|N
parameter_list|>
extends|extends
name|Endpoints
argument_list|<
name|N
argument_list|>
block|{
DECL|method|Directed (N source, N target)
specifier|private
name|Directed
parameter_list|(
name|N
name|source
parameter_list|,
name|N
name|target
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDirected ()
specifier|public
name|boolean
name|isDirected
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|source ()
specifier|public
name|N
name|source
parameter_list|()
block|{
return|return
name|nodeA
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|target ()
specifier|public
name|N
name|target
parameter_list|()
block|{
return|return
name|nodeB
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Directed
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Directed
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Directed
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|source
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|source
argument_list|()
argument_list|)
operator|&&
name|target
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|target
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|source
argument_list|()
argument_list|,
name|target
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"<%s -> %s>"
argument_list|,
name|source
argument_list|()
argument_list|,
name|target
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Undirected
specifier|private
specifier|static
specifier|final
class|class
name|Undirected
parameter_list|<
name|N
parameter_list|>
extends|extends
name|Endpoints
argument_list|<
name|N
argument_list|>
block|{
DECL|method|Undirected (N nodeA, N nodeB)
specifier|private
name|Undirected
parameter_list|(
name|N
name|nodeA
parameter_list|,
name|N
name|nodeB
parameter_list|)
block|{
name|super
argument_list|(
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDirected ()
specifier|public
name|boolean
name|isDirected
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|source ()
specifier|public
name|N
name|source
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|NOT_AVAILABLE_ON_UNDIRECTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|target ()
specifier|public
name|N
name|target
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|NOT_AVAILABLE_ON_UNDIRECTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Undirected
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Undirected
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Undirected
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|nodeA
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodeA
argument_list|()
argument_list|)
operator|&&
name|nodeB
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodeB
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|nodeA
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodeB
argument_list|()
argument_list|)
operator|&&
name|nodeB
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodeA
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|nodeA
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|nodeB
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

