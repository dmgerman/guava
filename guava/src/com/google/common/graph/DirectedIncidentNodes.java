begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable pair representing the incident nodes (source and target) on a directed edge.  *  * @author Joshua O'Madadhain  * @param<N> Node parameter type  */
end_comment

begin_class
DECL|class|DirectedIncidentNodes
specifier|final
class|class
name|DirectedIncidentNodes
parameter_list|<
name|N
parameter_list|>
block|{
DECL|field|source
specifier|private
specifier|final
name|N
name|source
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|N
name|target
decl_stmt|;
DECL|method|DirectedIncidentNodes (N source, N target)
specifier|private
name|DirectedIncidentNodes
parameter_list|(
name|N
name|source
parameter_list|,
name|N
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|checkNotNull
argument_list|(
name|source
argument_list|,
literal|"source"
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|checkNotNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
block|}
DECL|method|of (N source, N target)
specifier|static
parameter_list|<
name|N
parameter_list|>
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|of
parameter_list|(
name|N
name|source
parameter_list|,
name|N
name|target
parameter_list|)
block|{
return|return
operator|new
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
DECL|method|source ()
name|N
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|target ()
name|N
name|target
parameter_list|()
block|{
return|return
name|target
return|;
block|}
DECL|method|isSelfLoop ()
name|boolean
name|isSelfLoop
parameter_list|()
block|{
return|return
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|asImmutableSet ()
name|ImmutableSet
argument_list|<
name|N
argument_list|>
name|asImmutableSet
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|DirectedIncidentNodes
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|DirectedIncidentNodes
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|DirectedIncidentNodes
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|source
operator|.
name|equals
argument_list|(
name|that
operator|.
name|source
argument_list|)
operator|&&
name|this
operator|.
name|target
operator|.
name|equals
argument_list|(
name|that
operator|.
name|target
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"<%s -> %s>"
argument_list|,
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
block|}
end_class

end_unit

