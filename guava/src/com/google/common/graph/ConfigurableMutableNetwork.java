begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|ADDING_PARALLEL_EDGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|REUSING_EDGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|SELF_LOOPS_NOT_ALLOWED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Configurable implementation of {@link MutableNetwork} that supports both directed and undirected  * graphs. Instances of this class should be constructed with {@link NetworkBuilder}.  *  *<p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},  * which is in O(d_node) where d_node is the degree of {@code node}.  *  * @author James Sexton  * @author Joshua O'Madadhain  * @author Omar Darwish  * @param<N> Node parameter type  * @param<E> Edge parameter type  */
end_comment

begin_comment
comment|// TODO(b/24620028): Enable this class to support sorted nodes/edges.
end_comment

begin_class
DECL|class|ConfigurableMutableNetwork
class|class
name|ConfigurableMutableNetwork
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|AbstractConfigurableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
implements|implements
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
comment|/**    * Constructs a mutable graph with the properties specified in {@code builder}.    */
DECL|method|ConfigurableMutableNetwork (NetworkBuilder<? super N, ? super E> builder)
name|ConfigurableMutableNetwork
parameter_list|(
name|NetworkBuilder
argument_list|<
name|?
super|super
name|N
argument_list|,
name|?
super|super
name|E
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a graph with the properties specified in {@code builder}, initialized with    * the given node and edge maps. May be used for either mutable or immutable graphs.    */
DECL|method|ConfigurableMutableNetwork (NetworkBuilder<? super N, ? super E> builder, Map<N, NodeConnections<N, E>> nodeConnections, Map<E, N> edgeToReferenceNode)
name|ConfigurableMutableNetwork
parameter_list|(
name|NetworkBuilder
argument_list|<
name|?
super|super
name|N
argument_list|,
name|?
super|super
name|E
argument_list|>
name|builder
parameter_list|,
name|Map
argument_list|<
name|N
argument_list|,
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|>
name|nodeConnections
parameter_list|,
name|Map
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|edgeToReferenceNode
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|,
name|nodeConnections
argument_list|,
name|edgeToReferenceNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addNode (N node)
specifier|public
name|boolean
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
if|if
condition|(
name|containsNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|nodeConnections
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|newNodeConnections
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add nodes that are not elements of the graph, then add {@code edge} between them.    * Return {@code false} if {@code edge} already exists between {@code node1} and {@code node2},    * and in the same direction.    *    * @throws IllegalArgumentException if an edge (other than {@code edge}) already    *         exists from {@code node1} to {@code node2}, and this is not a multigraph.    *         Also, if self-loops are not allowed, and {@code node1} is equal to {@code node2}.    */
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (E edge, N node1, N node2)
specifier|public
name|boolean
name|addEdge
parameter_list|(
name|E
name|edge
parameter_list|,
name|N
name|node1
parameter_list|,
name|N
name|node2
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|edge
argument_list|,
literal|"edge"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|node1
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|node2
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|allowsSelfLoops
argument_list|()
operator|||
operator|!
name|node1
operator|.
name|equals
argument_list|(
name|node2
argument_list|)
argument_list|,
name|SELF_LOOPS_NOT_ALLOWED
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|boolean
name|containsN1
init|=
name|containsNode
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|boolean
name|containsN2
init|=
name|containsNode
argument_list|(
name|node2
argument_list|)
decl_stmt|;
if|if
condition|(
name|containsEdge
argument_list|(
name|edge
argument_list|)
condition|)
block|{
name|checkArgument
argument_list|(
name|containsN1
operator|&&
name|containsN2
operator|&&
name|edgesConnecting
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
argument_list|,
name|REUSING_EDGE
argument_list|,
name|edge
argument_list|,
name|incidentNodes
argument_list|(
name|edge
argument_list|)
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|allowsParallelEdges
argument_list|()
condition|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|containsN1
operator|&&
name|containsN2
operator|&&
name|successors
argument_list|(
name|node1
argument_list|)
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
operator|)
argument_list|,
name|ADDING_PARALLEL_EDGE
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|containsN1
condition|)
block|{
name|addNode
argument_list|(
name|node1
argument_list|)
expr_stmt|;
block|}
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connectionsN1
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|connectionsN1
operator|.
name|addOutEdge
argument_list|(
name|edge
argument_list|,
name|node2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containsN2
condition|)
block|{
name|addNode
argument_list|(
name|node2
argument_list|)
expr_stmt|;
block|}
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connectionsN2
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|connectionsN2
operator|.
name|addInEdge
argument_list|(
name|edge
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|edgeToReferenceNode
operator|.
name|put
argument_list|(
name|edge
argument_list|,
name|node1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeNode (Object node)
specifier|public
name|boolean
name|removeNode
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containsNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Since views are returned, we need to copy the edges that will be removed.
comment|// Thus we avoid modifying the underlying view while iterating over it.
for|for
control|(
name|E
name|edge
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|removeEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
name|nodeConnections
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeEdge (Object edge)
specifier|public
name|boolean
name|removeEdge
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|edge
argument_list|,
literal|"edge"
argument_list|)
expr_stmt|;
name|N
name|node1
init|=
name|edgeToReferenceNode
operator|.
name|get
argument_list|(
name|edge
argument_list|)
decl_stmt|;
if|if
condition|(
name|node1
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|N
name|node2
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node1
argument_list|)
operator|.
name|oppositeNode
argument_list|(
name|edge
argument_list|)
decl_stmt|;
name|nodeConnections
operator|.
name|get
argument_list|(
name|node1
argument_list|)
operator|.
name|removeOutEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|nodeConnections
operator|.
name|get
argument_list|(
name|node2
argument_list|)
operator|.
name|removeInEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|edgeToReferenceNode
operator|.
name|remove
argument_list|(
name|edge
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|newNodeConnections ()
specifier|private
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|newNodeConnections
parameter_list|()
block|{
return|return
name|isDirected
argument_list|()
condition|?
name|allowsParallelEdges
argument_list|()
condition|?
name|DirectedMultiNodeConnections
operator|.
expr|<
name|N
operator|,
name|E
operator|>
name|of
argument_list|()
operator|:
name|DirectedNodeConnections
operator|.
expr|<
name|N
operator|,
name|E
operator|>
name|of
argument_list|()
operator|:
name|allowsParallelEdges
argument_list|()
condition|?
name|UndirectedMultiNodeConnections
operator|.
expr|<
name|N
operator|,
name|E
operator|>
name|of
argument_list|()
operator|:
name|UndirectedNodeConnections
operator|.
expr|<
name|N
operator|,
name|E
operator|>
name|of
argument_list|()
return|;
block|}
block|}
end_class

end_unit

