begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A class to facilitate the set returned by {@link Graph#edges()}.  *  * @author James Sexton  */
end_comment

begin_class
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|EndpointPairIterator
specifier|abstract
class|class
name|EndpointPairIterator
parameter_list|<
name|N
parameter_list|>
extends|extends
name|AbstractIterator
argument_list|<
name|EndpointPair
argument_list|<
name|N
argument_list|>
argument_list|>
block|{
DECL|field|graph
specifier|private
specifier|final
name|BaseGraph
argument_list|<
name|N
argument_list|>
name|graph
decl_stmt|;
DECL|field|nodeIterator
specifier|private
specifier|final
name|Iterator
argument_list|<
name|N
argument_list|>
name|nodeIterator
decl_stmt|;
annotation|@
name|CheckForNull
DECL|field|node
name|N
name|node
init|=
literal|null
decl_stmt|;
comment|// null is safe as an initial value because graphs don't allow null nodes
DECL|field|successorIterator
name|Iterator
argument_list|<
name|N
argument_list|>
name|successorIterator
init|=
name|ImmutableSet
operator|.
expr|<
name|N
operator|>
name|of
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|method|of (BaseGraph<N> graph)
specifier|static
parameter_list|<
name|N
parameter_list|>
name|EndpointPairIterator
argument_list|<
name|N
argument_list|>
name|of
parameter_list|(
name|BaseGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
return|return
name|graph
operator|.
name|isDirected
argument_list|()
condition|?
operator|new
name|Directed
argument_list|<
name|N
argument_list|>
argument_list|(
name|graph
argument_list|)
else|:
operator|new
name|Undirected
argument_list|<
name|N
argument_list|>
argument_list|(
name|graph
argument_list|)
return|;
block|}
DECL|method|EndpointPairIterator (BaseGraph<N> graph)
specifier|private
name|EndpointPairIterator
parameter_list|(
name|BaseGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|this
operator|.
name|graph
operator|=
name|graph
expr_stmt|;
name|this
operator|.
name|nodeIterator
operator|=
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
comment|/**    * Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node    * and updates {@link #successorIterator} to iterate through the successors of {@link #node}.    */
DECL|method|advance ()
specifier|final
name|boolean
name|advance
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|successorIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|node
operator|=
name|nodeIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|successorIterator
operator|=
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * If the graph is directed, each ordered [source, target] pair will be visited once if there is    * an edge connecting them.    */
DECL|class|Directed
specifier|private
specifier|static
specifier|final
class|class
name|Directed
parameter_list|<
name|N
parameter_list|>
extends|extends
name|EndpointPairIterator
argument_list|<
name|N
argument_list|>
block|{
DECL|method|Directed (BaseGraph<N> graph)
specifier|private
name|Directed
parameter_list|(
name|BaseGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|super
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|computeNext ()
specifier|protected
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|successorIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// requireNonNull is safe because successorIterator is empty until we set this.node.
return|return
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|requireNonNull
argument_list|(
name|node
argument_list|)
argument_list|,
name|successorIterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|advance
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
block|}
block|}
comment|/**    * If the graph is undirected, each unordered [node, otherNode] pair (except self-loops) will be    * visited twice if there is an edge connecting them. To avoid returning duplicate {@link    * EndpointPair}s, we keep track of the nodes that we have visited. When processing endpoint    * pairs, we skip if the "other node" is in the visited set, as shown below:    *    *<pre>    * Nodes = {N1, N2, N3, N4}    *    N2           __    *   /  \         |  |    * N1----N3      N4__|    *    * Visited Nodes = {}    * EndpointPair [N1, N2] - return    * EndpointPair [N1, N3] - return    * Visited Nodes = {N1}    * EndpointPair [N2, N1] - skip    * EndpointPair [N2, N3] - return    * Visited Nodes = {N1, N2}    * EndpointPair [N3, N1] - skip    * EndpointPair [N3, N2] - skip    * Visited Nodes = {N1, N2, N3}    * EndpointPair [N4, N4] - return    * Visited Nodes = {N1, N2, N3, N4}    *</pre>    */
DECL|class|Undirected
specifier|private
specifier|static
specifier|final
class|class
name|Undirected
parameter_list|<
name|N
parameter_list|>
extends|extends
name|EndpointPairIterator
argument_list|<
name|N
argument_list|>
block|{
comment|// It's a little weird that we add `null` to this set, but it makes for slightly simpler code.
DECL|field|visitedNodes
annotation|@
name|CheckForNull
specifier|private
name|Set
argument_list|<
annotation|@
name|Nullable
name|N
argument_list|>
name|visitedNodes
decl_stmt|;
DECL|method|Undirected (BaseGraph<N> graph)
specifier|private
name|Undirected
parameter_list|(
name|BaseGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|super
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|this
operator|.
name|visitedNodes
operator|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|computeNext ()
specifier|protected
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|/*          * requireNonNull is safe because visitedNodes isn't cleared until this method calls          * endOfData() (after which this method is never called again).          */
name|requireNonNull
argument_list|(
name|visitedNodes
argument_list|)
expr_stmt|;
while|while
condition|(
name|successorIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|N
name|otherNode
init|=
name|successorIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|visitedNodes
operator|.
name|contains
argument_list|(
name|otherNode
argument_list|)
condition|)
block|{
comment|// requireNonNull is safe because successorIterator is empty until we set node.
return|return
name|EndpointPair
operator|.
name|unordered
argument_list|(
name|requireNonNull
argument_list|(
name|node
argument_list|)
argument_list|,
name|otherNode
argument_list|)
return|;
block|}
block|}
comment|// Add to visited set *after* processing neighbors so we still include self-loops.
name|visitedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|advance
argument_list|()
condition|)
block|{
name|visitedNodes
operator|=
literal|null
expr_stmt|;
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

