begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|NETWORK_WITH_PARALLEL_EDGE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|DirectedNodeAdjacencies
operator|.
name|Adjacency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A {@link Graph} whose relationships are constant. Instances of this class may be obtained  * with {@link #copyOf(Graph)}.  *  * @author James Sexton  * @author Joshua O'Madadhain  * @author Omar Darwish  * @param<N> Node parameter type  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|ImmutableGraph
specifier|public
specifier|final
class|class
name|ImmutableGraph
parameter_list|<
name|N
parameter_list|>
extends|extends
name|AbstractConfigurableGraph
argument_list|<
name|N
argument_list|>
block|{
DECL|method|ImmutableGraph (Graph<N> graph)
specifier|private
name|ImmutableGraph
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|super
argument_list|(
name|GraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
argument_list|,
name|getNodeConnections
argument_list|(
name|graph
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns an immutable copy of {@code graph}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|copyOf (Graph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
name|copyOf
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
comment|// TODO(b/28087289): we can remove this restriction when Graph supports parallel edges
name|checkArgument
argument_list|(
operator|!
operator|(
operator|(
name|graph
operator|instanceof
name|Network
operator|)
operator|&&
operator|(
operator|(
name|Network
argument_list|<
name|N
argument_list|,
name|?
argument_list|>
operator|)
name|graph
operator|)
operator|.
name|allowsParallelEdges
argument_list|()
operator|)
argument_list|,
name|NETWORK_WITH_PARALLEL_EDGE
argument_list|)
expr_stmt|;
return|return
operator|(
name|graph
operator|instanceof
name|ImmutableGraph
operator|)
condition|?
operator|(
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
operator|)
name|graph
else|:
operator|new
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
argument_list|(
name|graph
argument_list|)
return|;
block|}
comment|/**    * Simply returns its argument.    *    * @deprecated no need to use this    */
annotation|@
name|Deprecated
DECL|method|copyOf (ImmutableGraph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
name|copyOf
parameter_list|(
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|graph
argument_list|)
return|;
block|}
DECL|method|getNodeConnections (Graph<N> graph)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|>
name|ImmutableMap
argument_list|<
name|N
argument_list|,
name|NodeAdjacencies
argument_list|<
name|N
argument_list|>
argument_list|>
name|getNodeConnections
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
comment|// ImmutableMap.Builder maintains the order of the elements as inserted, so the map will
comment|// have whatever ordering the graph's nodes do, so ImmutableSortedMap is unnecessary even if the
comment|// input nodes are sorted.
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|NodeAdjacencies
argument_list|<
name|N
argument_list|>
argument_list|>
name|nodeConnections
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|nodeConnections
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|nodeConnectionsOf
argument_list|(
name|graph
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeConnections
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|nodeConnectionsOf (Graph<N> graph, N node)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|>
name|NodeAdjacencies
argument_list|<
name|N
argument_list|>
name|nodeConnectionsOf
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|,
name|N
name|node
parameter_list|)
block|{
return|return
name|graph
operator|.
name|isDirected
argument_list|()
condition|?
name|DirectedNodeAdjacencies
operator|.
name|ofImmutable
argument_list|(
name|createAdjacencyMap
argument_list|(
name|graph
argument_list|,
name|node
argument_list|)
argument_list|,
name|graph
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
else|:
name|UndirectedNodeAdjacencies
operator|.
name|ofImmutable
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createAdjacencyMap (Graph<N> graph, N node)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|>
name|ImmutableMap
argument_list|<
name|N
argument_list|,
name|Adjacency
argument_list|>
name|createAdjacencyMap
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|,
name|N
name|node
parameter_list|)
block|{
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
init|=
name|graph
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|N
argument_list|>
name|successors
init|=
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|Adjacency
argument_list|>
name|nodeAdjacencies
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|adjacentNode
range|:
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|nodeAdjacencies
operator|.
name|put
argument_list|(
name|adjacentNode
argument_list|,
name|getAdjacency
argument_list|(
name|predecessors
operator|.
name|contains
argument_list|(
name|adjacentNode
argument_list|)
argument_list|,
name|successors
operator|.
name|contains
argument_list|(
name|adjacentNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeAdjacencies
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getAdjacency (boolean isPredecessor, boolean isSuccesor)
specifier|private
specifier|static
name|Adjacency
name|getAdjacency
parameter_list|(
name|boolean
name|isPredecessor
parameter_list|,
name|boolean
name|isSuccesor
parameter_list|)
block|{
if|if
condition|(
name|isPredecessor
operator|&&
name|isSuccesor
condition|)
block|{
return|return
name|Adjacency
operator|.
name|BOTH
return|;
block|}
elseif|else
if|if
condition|(
name|isPredecessor
condition|)
block|{
return|return
name|Adjacency
operator|.
name|PRED
return|;
block|}
elseif|else
if|if
condition|(
name|isSuccesor
condition|)
block|{
return|return
name|Adjacency
operator|.
name|SUCC
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

