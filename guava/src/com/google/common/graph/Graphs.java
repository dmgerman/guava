begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Static utility methods for {@link Graph} instances.  *  * @author James Sexton  * @author Joshua O'Madadhain  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|Graphs
specifier|public
specifier|final
class|class
name|Graphs
block|{
DECL|method|Graphs ()
specifier|private
name|Graphs
parameter_list|()
block|{}
comment|// Graph query methods
comment|/**    * Returns an unmodifiable view of edges that are parallel to {@code edge}, i.e. the set of edges    * that connect the same nodes in the same direction (if any). An edge is not parallel to itself.    *    * @throws IllegalArgumentException if {@code edge} is not present in {@code graph}    */
DECL|method|parallelEdges (Network<?, E> graph, Object edge)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|parallelEdges
parameter_list|(
name|Network
argument_list|<
name|?
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
name|Object
name|edge
parameter_list|)
block|{
name|Endpoints
argument_list|<
name|?
argument_list|>
name|endpoints
init|=
name|graph
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
decl_stmt|;
comment|// Verifies that edge is in graph
if|if
condition|(
operator|!
name|graph
operator|.
name|allowsParallelEdges
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|Sets
operator|.
name|difference
argument_list|(
name|graph
operator|.
name|edgesConnecting
argument_list|(
name|endpoints
operator|.
name|nodeA
argument_list|()
argument_list|,
name|endpoints
operator|.
name|nodeB
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|edge
argument_list|)
argument_list|)
return|;
comment|// An edge is not parallel to itself.
block|}
comment|/**    * Returns an unmodifiable view of the edges which have an {@link Network#incidentNodes(Object)    * incident node} in common with {@code edge}. An edge is not considered adjacent to itself.    *    * @throws IllegalArgumentException if {@code edge} is not present in {@code graph}    */
DECL|method|adjacentEdges (Network<?, E> graph, Object edge)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|adjacentEdges
parameter_list|(
name|Network
argument_list|<
name|?
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
name|Object
name|edge
parameter_list|)
block|{
name|Endpoints
argument_list|<
name|?
argument_list|>
name|endpoints
init|=
name|graph
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
decl_stmt|;
comment|// Verifies that edge is in graph
name|Set
argument_list|<
name|E
argument_list|>
name|endpointsIncidentEdges
init|=
name|Sets
operator|.
name|union
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
name|endpoints
operator|.
name|nodeA
argument_list|()
argument_list|)
argument_list|,
name|graph
operator|.
name|incidentEdges
argument_list|(
name|endpoints
operator|.
name|nodeB
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|difference
argument_list|(
name|endpointsIncidentEdges
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|edge
argument_list|)
argument_list|)
return|;
block|}
comment|// Graph mutation methods
comment|// Graph transformation methods
comment|/**    * Returns an induced subgraph of {@code graph}. This subgraph is a new graph that contains    * all of the nodes in {@code nodes}, and all of the edges from {@code graph} for which the    * edge's incident nodes are both contained by {@code nodes}.    *    * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph    */
DECL|method|inducedSubgraph (Network<N, E> graph, Iterable<? extends N> nodes)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|inducedSubgraph
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|N
argument_list|>
name|nodes
parameter_list|)
block|{
name|NetworkBuilder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|builder
init|=
name|NetworkBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|instanceof
name|Collection
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|expectedNodeCount
argument_list|(
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|nodes
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|subgraph
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|nodes
control|)
block|{
name|subgraph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|N
name|node
range|:
name|subgraph
operator|.
name|nodes
argument_list|()
control|)
block|{
for|for
control|(
name|E
name|edge
range|:
name|graph
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
control|)
block|{
name|N
name|adjacentNode
init|=
name|graph
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|adjacentNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|subgraph
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|adjacentNode
argument_list|)
condition|)
block|{
name|subgraph
operator|.
name|addEdgeV2
argument_list|(
name|node
argument_list|,
name|adjacentNode
argument_list|,
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subgraph
return|;
block|}
comment|/**    * Creates a mutable copy of {@code graph}, using the same nodes and edges.    */
DECL|method|copyOf (Graph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|copyOf
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|graph
argument_list|,
literal|"graph"
argument_list|)
expr_stmt|;
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|copy
init|=
name|GraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|checkState
argument_list|(
name|copy
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Endpoints
argument_list|<
name|N
argument_list|>
name|endpoints
range|:
name|graph
operator|.
name|edges
argument_list|()
control|)
block|{
name|checkState
argument_list|(
name|copy
operator|.
name|putEdge
argument_list|(
name|endpoints
operator|.
name|nodeA
argument_list|()
argument_list|,
name|endpoints
operator|.
name|nodeB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
comment|/**    * Creates a mutable copy of {@code graph}, using the same node and edge elements.    */
DECL|method|copyOf (Network<N, E> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|graph
argument_list|,
literal|"graph"
argument_list|)
expr_stmt|;
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copy
init|=
name|NetworkBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|expectedEdgeCount
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|checkState
argument_list|(
name|copy
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|E
name|edge
range|:
name|graph
operator|.
name|edges
argument_list|()
control|)
block|{
name|Endpoints
argument_list|<
name|N
argument_list|>
name|endpoints
init|=
name|graph
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|copy
operator|.
name|addEdgeV2
argument_list|(
name|endpoints
operator|.
name|nodeA
argument_list|()
argument_list|,
name|endpoints
operator|.
name|nodeB
argument_list|()
argument_list|,
name|edge
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkNonNegative (int value)
specifier|static
name|int
name|checkNonNegative
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|value
operator|>=
literal|0
argument_list|,
literal|"Not true that %s is non-negative."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkPositive (int value)
specifier|static
name|int
name|checkPositive
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|value
operator|>
literal|0
argument_list|,
literal|"Not true that %s is positive."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkNonNegative (long value)
specifier|static
name|long
name|checkNonNegative
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|value
operator|>=
literal|0
argument_list|,
literal|"Not true that %s is non-negative."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkPositive (long value)
specifier|static
name|long
name|checkPositive
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|value
operator|>
literal|0
argument_list|,
literal|"Not true that %s is positive."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

