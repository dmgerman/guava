begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|NODE_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Static utility methods for {@link Graph}, {@link ValueGraph}, and {@link Network} instances.  *  * @author James Sexton  * @author Joshua O'Madadhain  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|Graphs
specifier|public
specifier|final
class|class
name|Graphs
block|{
DECL|method|Graphs ()
specifier|private
name|Graphs
parameter_list|()
block|{}
comment|// Graph query methods
comment|/**    * Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset    * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting    * and ending with the same node.    *    *<p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).    */
DECL|method|hasCycle (Graph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|boolean
name|hasCycle
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|int
name|numEdges
init|=
name|graph
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numEdges
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
comment|// An edge-free graph is acyclic by definition.
block|}
if|if
condition|(
operator|!
name|graph
operator|.
name|isDirected
argument_list|()
operator|&&
name|numEdges
operator|>=
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// Optimization for the undirected case: at least one cycle must exist.
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|NodeVisitState
argument_list|>
name|visitedNodes
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|subgraphHasCycle
argument_list|(
name|graph
argument_list|,
name|visitedNodes
argument_list|,
name|node
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty    * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)    * starting and ending with the same node.    *    *<p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).    */
DECL|method|hasCycle (Network<?, ?> network)
specifier|public
specifier|static
name|boolean
name|hasCycle
parameter_list|(
name|Network
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|network
parameter_list|)
block|{
comment|// In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.
comment|// However, in an undirected graph, any parallel edge induces a cycle in the graph.
if|if
condition|(
operator|!
name|network
operator|.
name|isDirected
argument_list|()
operator|&&
name|network
operator|.
name|allowsParallelEdges
argument_list|()
operator|&&
name|network
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|network
operator|.
name|asGraph
argument_list|()
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|hasCycle
argument_list|(
name|network
operator|.
name|asGraph
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Performs a traversal of the nodes reachable from {@code node}. If we ever reach a node we've    * already visited (following only outgoing edges and without reusing edges), we know there's a    * cycle in the graph.    */
DECL|method|subgraphHasCycle ( Graph<N> graph, Map<Object, NodeVisitState> visitedNodes, N node, @Nullable N previousNode)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|>
name|boolean
name|subgraphHasCycle
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|NodeVisitState
argument_list|>
name|visitedNodes
parameter_list|,
name|N
name|node
parameter_list|,
annotation|@
name|Nullable
name|N
name|previousNode
parameter_list|)
block|{
name|NodeVisitState
name|state
init|=
name|visitedNodes
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|NodeVisitState
operator|.
name|COMPLETE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|==
name|NodeVisitState
operator|.
name|PENDING
condition|)
block|{
return|return
literal|true
return|;
block|}
name|visitedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|NodeVisitState
operator|.
name|PENDING
argument_list|)
expr_stmt|;
for|for
control|(
name|N
name|nextNode
range|:
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|canTraverseWithoutReusingEdge
argument_list|(
name|graph
argument_list|,
name|nextNode
argument_list|,
name|previousNode
argument_list|)
operator|&&
name|subgraphHasCycle
argument_list|(
name|graph
argument_list|,
name|visitedNodes
argument_list|,
name|nextNode
argument_list|,
name|node
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|visitedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|NodeVisitState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Determines whether an edge has already been used during traversal. In the directed case a cycle    * is always detected before reusing an edge, so no special logic is required. In the undirected    * case, we must take care not to "backtrack" over an edge (i.e. going from A to B and then going    * from B to A).    */
DECL|method|canTraverseWithoutReusingEdge ( Graph<?> graph, Object nextNode, @Nullable Object previousNode)
specifier|private
specifier|static
name|boolean
name|canTraverseWithoutReusingEdge
parameter_list|(
name|Graph
argument_list|<
name|?
argument_list|>
name|graph
parameter_list|,
name|Object
name|nextNode
parameter_list|,
annotation|@
name|Nullable
name|Object
name|previousNode
parameter_list|)
block|{
if|if
condition|(
name|graph
operator|.
name|isDirected
argument_list|()
operator|||
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|previousNode
argument_list|,
name|nextNode
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// This falls into the undirected A->B->A case. The Graph interface does not support parallel
comment|// edges, so this traversal would require reusing the undirected AB edge.
return|return
literal|false
return|;
block|}
comment|/**    * Returns the transitive closure of {@code graph}. The transitive closure of a graph is another    * graph with an edge connecting node A to node B if node B is {@link #reachableNodes(Graph,    * Object) reachable} from node A.    *    *<p>This is a "snapshot" based on the current topology of {@code graph}, rather than a live view    * of the transitive closure of {@code graph}. In other words, the returned {@link Graph} will not    * be updated after modifications to {@code graph}.    */
comment|// TODO(b/31438252): Consider potential optimizations for this algorithm.
DECL|method|transitiveClosure (Graph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|Graph
argument_list|<
name|N
argument_list|>
name|transitiveClosure
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|transitiveClosure
init|=
name|GraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Every node is, at a minimum, reachable from itself. Since the resulting transitive closure
comment|// will have no isolated nodes, we can skip adding nodes explicitly and let putEdge() do it.
if|if
condition|(
name|graph
operator|.
name|isDirected
argument_list|()
condition|)
block|{
comment|// Note: works for both directed and undirected graphs, but we only use in the directed case.
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
for|for
control|(
name|N
name|reachableNode
range|:
name|reachableNodes
argument_list|(
name|graph
argument_list|,
name|node
argument_list|)
control|)
block|{
name|transitiveClosure
operator|.
name|putEdge
argument_list|(
name|node
argument_list|,
name|reachableNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// An optimization for the undirected case: for every node B reachable from node A,
comment|// node A and node B have the same reachability set.
name|Set
argument_list|<
name|N
argument_list|>
name|visitedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|N
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|visitedNodes
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|N
argument_list|>
name|reachableNodes
init|=
name|reachableNodes
argument_list|(
name|graph
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|visitedNodes
operator|.
name|addAll
argument_list|(
name|reachableNodes
argument_list|)
expr_stmt|;
name|int
name|pairwiseMatch
init|=
literal|1
decl_stmt|;
comment|// start at 1 to include self-loops
for|for
control|(
name|N
name|nodeU
range|:
name|reachableNodes
control|)
block|{
for|for
control|(
name|N
name|nodeV
range|:
name|Iterables
operator|.
name|limit
argument_list|(
name|reachableNodes
argument_list|,
name|pairwiseMatch
operator|++
argument_list|)
control|)
block|{
name|transitiveClosure
operator|.
name|putEdge
argument_list|(
name|nodeU
argument_list|,
name|nodeV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|transitiveClosure
return|;
block|}
comment|/**    * Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable    * from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A    * and ending at node B. Note that a node is always reachable from itself via a zero-length path.    *    *<p>This is a "snapshot" based on the current topology of {@code graph}, rather than a live view    * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will    * not be updated after modifications to {@code graph}.    *    * @throws IllegalArgumentException if {@code node} is not present in {@code graph}    */
DECL|method|reachableNodes (Graph<N> graph, N node)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|Set
argument_list|<
name|N
argument_list|>
name|reachableNodes
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|,
name|N
name|node
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|N
argument_list|>
name|visitedNodes
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|N
argument_list|>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|N
argument_list|>
name|queuedNodes
init|=
operator|new
name|ArrayDeque
argument_list|<
name|N
argument_list|>
argument_list|()
decl_stmt|;
name|visitedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|queuedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// Perform a breadth-first traversal rooted at the input node.
while|while
condition|(
operator|!
name|queuedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|N
name|currentNode
init|=
name|queuedNodes
operator|.
name|remove
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|successor
range|:
name|graph
operator|.
name|successors
argument_list|(
name|currentNode
argument_list|)
control|)
block|{
if|if
condition|(
name|visitedNodes
operator|.
name|add
argument_list|(
name|successor
argument_list|)
condition|)
block|{
name|queuedNodes
operator|.
name|add
argument_list|(
name|successor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|visitedNodes
argument_list|)
return|;
block|}
comment|/**    * @deprecated Use {@link Graph#equals(Object)} instead. This method will be removed in late 2017.    */
comment|// TODO(user): Delete this method.
annotation|@
name|Deprecated
DECL|method|equivalent (@ullable Graph<?> graphA, @Nullable Graph<?> graphB)
specifier|public
specifier|static
name|boolean
name|equivalent
parameter_list|(
annotation|@
name|Nullable
name|Graph
argument_list|<
name|?
argument_list|>
name|graphA
parameter_list|,
annotation|@
name|Nullable
name|Graph
argument_list|<
name|?
argument_list|>
name|graphB
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|graphA
argument_list|,
name|graphB
argument_list|)
return|;
block|}
comment|/**    * @deprecated Use {@link ValueGraph#equals(Object)} instead. This method will be removed in late    * 2017.    */
comment|// TODO(user): Delete this method.
annotation|@
name|Deprecated
DECL|method|equivalent ( @ullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)
specifier|public
specifier|static
name|boolean
name|equivalent
parameter_list|(
annotation|@
name|Nullable
name|ValueGraph
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|graphA
parameter_list|,
annotation|@
name|Nullable
name|ValueGraph
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|graphB
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|graphA
argument_list|,
name|graphB
argument_list|)
return|;
block|}
comment|/**    * @deprecated Use {@link Network#equals(Object)} instead. This method will be removed in late    * 2017.    */
comment|// TODO(user): Delete this method.
annotation|@
name|Deprecated
DECL|method|equivalent ( @ullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)
specifier|public
specifier|static
name|boolean
name|equivalent
parameter_list|(
annotation|@
name|Nullable
name|Network
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|networkA
parameter_list|,
annotation|@
name|Nullable
name|Network
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|networkB
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|networkA
argument_list|,
name|networkB
argument_list|)
return|;
block|}
comment|// Graph mutation methods
comment|// Graph view methods
comment|/**    * Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other    * properties remain intact, and further updates to {@code graph} will be reflected in the view.    */
DECL|method|transpose (Graph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|Graph
argument_list|<
name|N
argument_list|>
name|transpose
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
if|if
condition|(
operator|!
name|graph
operator|.
name|isDirected
argument_list|()
condition|)
block|{
return|return
name|graph
return|;
comment|// the transpose of an undirected graph is an identical graph
block|}
if|if
condition|(
name|graph
operator|instanceof
name|TransposedGraph
condition|)
block|{
return|return
operator|(
operator|(
name|TransposedGraph
argument_list|<
name|N
argument_list|>
operator|)
name|graph
operator|)
operator|.
name|graph
return|;
block|}
return|return
operator|new
name|TransposedGraph
argument_list|<
name|N
argument_list|>
argument_list|(
name|graph
argument_list|)
return|;
block|}
comment|// NOTE: this should work as long as the delegate graph's implementation of edges() (like that of
comment|// AbstractGraph) derives its behavior from calling successors().
DECL|class|TransposedGraph
specifier|private
specifier|static
class|class
name|TransposedGraph
parameter_list|<
name|N
parameter_list|>
extends|extends
name|ForwardingGraph
argument_list|<
name|N
argument_list|>
block|{
DECL|field|graph
specifier|private
specifier|final
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
decl_stmt|;
DECL|method|TransposedGraph (Graph<N> graph)
name|TransposedGraph
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|this
operator|.
name|graph
operator|=
name|graph
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Graph
argument_list|<
name|N
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|graph
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|successors
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|successors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|inDegree (N node)
specifier|public
name|int
name|inDegree
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|outDegree (N node)
specifier|public
name|int
name|outDegree
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|hasEdgeConnecting (N nodeU, N nodeV)
specifier|public
name|boolean
name|hasEdgeConnecting
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hasEdgeConnecting
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
block|}
comment|/**    * Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other    * properties remain intact, and further updates to {@code graph} will be reflected in the view.    */
DECL|method|transpose (ValueGraph<N, V> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|transpose
parameter_list|(
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|graph
parameter_list|)
block|{
if|if
condition|(
operator|!
name|graph
operator|.
name|isDirected
argument_list|()
condition|)
block|{
return|return
name|graph
return|;
comment|// the transpose of an undirected graph is an identical graph
block|}
if|if
condition|(
name|graph
operator|instanceof
name|TransposedValueGraph
condition|)
block|{
return|return
operator|(
operator|(
name|TransposedValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
operator|)
name|graph
operator|)
operator|.
name|graph
return|;
block|}
return|return
operator|new
name|TransposedValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
argument_list|(
name|graph
argument_list|)
return|;
block|}
comment|// NOTE: this should work as long as the delegate graph's implementation of edges() (like that of
comment|// AbstractValueGraph) derives its behavior from calling successors().
DECL|class|TransposedValueGraph
specifier|private
specifier|static
class|class
name|TransposedValueGraph
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
block|{
DECL|field|graph
specifier|private
specifier|final
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|graph
decl_stmt|;
DECL|method|TransposedValueGraph (ValueGraph<N, V> graph)
name|TransposedValueGraph
parameter_list|(
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|graph
parameter_list|)
block|{
name|this
operator|.
name|graph
operator|=
name|graph
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|graph
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|successors
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|successors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|inDegree (N node)
specifier|public
name|int
name|inDegree
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|outDegree (N node)
specifier|public
name|int
name|outDegree
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|hasEdgeConnecting (N nodeU, N nodeV)
specifier|public
name|boolean
name|hasEdgeConnecting
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hasEdgeConnecting
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|edgeValue (N nodeU, N nodeV)
specifier|public
name|Optional
argument_list|<
name|V
argument_list|>
name|edgeValue
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|edgeValue
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|edgeValueOrDefault (N nodeU, N nodeV, @Nullable V defaultValue)
specifier|public
name|V
name|edgeValueOrDefault
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|,
annotation|@
name|Nullable
name|V
name|defaultValue
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|edgeValueOrDefault
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|,
name|defaultValue
argument_list|)
return|;
comment|// transpose
block|}
block|}
comment|/**    * Returns a view of {@code network} with the direction (if any) of every edge reversed. All other    * properties remain intact, and further updates to {@code network} will be reflected in the view.    */
DECL|method|transpose (Network<N, E> network)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|transpose
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
if|if
condition|(
operator|!
name|network
operator|.
name|isDirected
argument_list|()
condition|)
block|{
return|return
name|network
return|;
comment|// the transpose of an undirected network is an identical network
block|}
if|if
condition|(
name|network
operator|instanceof
name|TransposedNetwork
condition|)
block|{
return|return
operator|(
operator|(
name|TransposedNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
operator|)
name|network
operator|)
operator|.
name|network
return|;
block|}
return|return
operator|new
name|TransposedNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|(
name|network
argument_list|)
return|;
block|}
DECL|class|TransposedNetwork
specifier|private
specifier|static
class|class
name|TransposedNetwork
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|ForwardingNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
DECL|field|network
specifier|private
specifier|final
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
decl_stmt|;
DECL|method|TransposedNetwork (Network<N, E> network)
name|TransposedNetwork
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
name|this
operator|.
name|network
operator|=
name|network
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|network
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|successors
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|successors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|inDegree (N node)
specifier|public
name|int
name|inDegree
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|outDegree (N node)
specifier|public
name|int
name|outDegree
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|inEdges (N node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|inEdges
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|outEdges (N node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|outEdges
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|incidentNodes (E edge)
specifier|public
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|incidentNodes
parameter_list|(
name|E
name|edge
parameter_list|)
block|{
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|endpointPair
init|=
name|delegate
argument_list|()
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
decl_stmt|;
return|return
name|EndpointPair
operator|.
name|of
argument_list|(
name|network
argument_list|,
name|endpointPair
operator|.
name|nodeV
argument_list|()
argument_list|,
name|endpointPair
operator|.
name|nodeU
argument_list|()
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|edgesConnecting (N nodeU, N nodeV)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|edgesConnecting
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|edgesConnecting
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|edgeConnecting (N nodeU, N nodeV)
specifier|public
name|Optional
argument_list|<
name|E
argument_list|>
name|edgeConnecting
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|edgeConnecting
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|edgeConnectingOrNull (N nodeU, N nodeV)
specifier|public
name|E
name|edgeConnectingOrNull
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|edgeConnectingOrNull
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
annotation|@
name|Override
DECL|method|hasEdgeConnecting (N nodeU, N nodeV)
specifier|public
name|boolean
name|hasEdgeConnecting
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hasEdgeConnecting
argument_list|(
name|nodeV
argument_list|,
name|nodeU
argument_list|)
return|;
comment|// transpose
block|}
block|}
comment|// Graph copy methods
comment|/**    * Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph    * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}    * from {@code graph} for which both nodes are contained by {@code nodes}.    *    * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph    */
DECL|method|inducedSubgraph (Graph<N> graph, Iterable<? extends N> nodes)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|inducedSubgraph
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|N
argument_list|>
name|nodes
parameter_list|)
block|{
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|subgraph
init|=
operator|(
name|nodes
operator|instanceof
name|Collection
operator|)
condition|?
name|GraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
operator|(
operator|(
name|Collection
operator|)
name|nodes
operator|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
else|:
name|GraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|nodes
control|)
block|{
name|subgraph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|N
name|node
range|:
name|subgraph
operator|.
name|nodes
argument_list|()
control|)
block|{
for|for
control|(
name|N
name|successorNode
range|:
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|subgraph
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|successorNode
argument_list|)
condition|)
block|{
name|subgraph
operator|.
name|putEdge
argument_list|(
name|node
argument_list|,
name|successorNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subgraph
return|;
block|}
comment|/**    * Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph    * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}    * (and associated edge values) from {@code graph} for which both nodes are contained by {@code    * nodes}.    *    * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph    */
DECL|method|inducedSubgraph ( ValueGraph<N, V> graph, Iterable<? extends N> nodes)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|MutableValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|inducedSubgraph
parameter_list|(
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|graph
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|N
argument_list|>
name|nodes
parameter_list|)
block|{
name|MutableValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|subgraph
init|=
operator|(
name|nodes
operator|instanceof
name|Collection
operator|)
condition|?
name|ValueGraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
operator|(
operator|(
name|Collection
operator|)
name|nodes
operator|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
else|:
name|ValueGraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|nodes
control|)
block|{
name|subgraph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|N
name|node
range|:
name|subgraph
operator|.
name|nodes
argument_list|()
control|)
block|{
for|for
control|(
name|N
name|successorNode
range|:
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
control|)
block|{
if|if
condition|(
name|subgraph
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|successorNode
argument_list|)
condition|)
block|{
name|subgraph
operator|.
name|putEdgeValue
argument_list|(
name|node
argument_list|,
name|successorNode
argument_list|,
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|node
argument_list|,
name|successorNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subgraph
return|;
block|}
comment|/**    * Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph    * that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges}    * from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are    * both contained by {@code nodes}.    *    * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph    */
DECL|method|inducedSubgraph ( Network<N, E> network, Iterable<? extends N> nodes)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|inducedSubgraph
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|N
argument_list|>
name|nodes
parameter_list|)
block|{
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|subgraph
init|=
operator|(
name|nodes
operator|instanceof
name|Collection
operator|)
condition|?
name|NetworkBuilder
operator|.
name|from
argument_list|(
name|network
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
operator|(
operator|(
name|Collection
operator|)
name|nodes
operator|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
else|:
name|NetworkBuilder
operator|.
name|from
argument_list|(
name|network
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|nodes
control|)
block|{
name|subgraph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|N
name|node
range|:
name|subgraph
operator|.
name|nodes
argument_list|()
control|)
block|{
for|for
control|(
name|E
name|edge
range|:
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
control|)
block|{
name|N
name|successorNode
init|=
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|adjacentNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|subgraph
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|successorNode
argument_list|)
condition|)
block|{
name|subgraph
operator|.
name|addEdge
argument_list|(
name|node
argument_list|,
name|successorNode
argument_list|,
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subgraph
return|;
block|}
comment|/** Creates a mutable copy of {@code graph} with the same nodes and edges. */
DECL|method|copyOf (Graph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|copyOf
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|MutableGraph
argument_list|<
name|N
argument_list|>
name|copy
init|=
name|GraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|copy
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|edge
range|:
name|graph
operator|.
name|edges
argument_list|()
control|)
block|{
name|copy
operator|.
name|putEdge
argument_list|(
name|edge
operator|.
name|nodeU
argument_list|()
argument_list|,
name|edge
operator|.
name|nodeV
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
comment|/** Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values. */
DECL|method|copyOf (ValueGraph<N, V> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|MutableValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|graph
parameter_list|)
block|{
name|MutableValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|copy
init|=
name|ValueGraphBuilder
operator|.
name|from
argument_list|(
name|graph
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|copy
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|edge
range|:
name|graph
operator|.
name|edges
argument_list|()
control|)
block|{
name|copy
operator|.
name|putEdgeValue
argument_list|(
name|edge
operator|.
name|nodeU
argument_list|()
argument_list|,
name|edge
operator|.
name|nodeV
argument_list|()
argument_list|,
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|edge
operator|.
name|nodeU
argument_list|()
argument_list|,
name|edge
operator|.
name|nodeV
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
comment|/** Creates a mutable copy of {@code network} with the same nodes and edges. */
DECL|method|copyOf (Network<N, E> network)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copy
init|=
name|NetworkBuilder
operator|.
name|from
argument_list|(
name|network
argument_list|)
operator|.
name|expectedNodeCount
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|expectedEdgeCount
argument_list|(
name|network
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|network
operator|.
name|nodes
argument_list|()
control|)
block|{
name|copy
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|E
name|edge
range|:
name|network
operator|.
name|edges
argument_list|()
control|)
block|{
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|endpointPair
init|=
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
decl_stmt|;
name|copy
operator|.
name|addEdge
argument_list|(
name|endpointPair
operator|.
name|nodeU
argument_list|()
argument_list|,
name|endpointPair
operator|.
name|nodeV
argument_list|()
argument_list|,
name|edge
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkNonNegative (int value)
specifier|static
name|int
name|checkNonNegative
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|value
operator|>=
literal|0
argument_list|,
literal|"Not true that %s is non-negative."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkPositive (int value)
specifier|static
name|int
name|checkPositive
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|value
operator|>
literal|0
argument_list|,
literal|"Not true that %s is positive."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkNonNegative (long value)
specifier|static
name|long
name|checkNonNegative
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|value
operator|>=
literal|0
argument_list|,
literal|"Not true that %s is non-negative."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|checkPositive (long value)
specifier|static
name|long
name|checkPositive
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|value
operator|>
literal|0
argument_list|,
literal|"Not true that %s is positive."
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * An enum representing the state of a node during DFS. {@code PENDING} means that the node is on    * the stack of the DFS, while {@code COMPLETE} means that the node and all its successors have    * been already explored. Any node that has not been explored will not have a state at all.    */
DECL|enum|NodeVisitState
specifier|private
enum|enum
name|NodeVisitState
block|{
DECL|enumConstant|PENDING
name|PENDING
block|,
DECL|enumConstant|COMPLETE
name|COMPLETE
block|}
block|}
end_class

end_unit

