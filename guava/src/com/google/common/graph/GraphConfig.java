begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A class for configuring different types of graphs.  *  *<p>{@code Graphs.config()} should be used to get an instance of this class.  *  *<p>Currently, this class supports the following graph configurations (all combinations  * of these properties are valid unless stated otherwise):  *<ul>  *<li>Multigraphs.  *<li>Expected number of nodes/edges.  *<li>Self-loop edges.  *</ul>  *  *<p>Default graph configuration:  *<ul>  *<li>Self-loop edges are allowed.  *<li>It is not a multigraph: parallel edges (multiple edges directed from n1  *     to n2, or between them in case of undirected graphs) are not allowed.  *<li>In case of directed graphs, anti-parallel edges (same incident nodes but  *     in opposite direction, e.g. (n1, n2) and (n2, n1)) are allowed.  *<li>Nodes and edges are not sorted.  *</ul>  *  *<p>{@code GraphConfig} instances are thread-safe immutable, and are therefore safe to  * store as {@code static final} constants.  *  * @author Joshua O'Madadhain  * @see Graphs  * @since 20.0  */
end_comment

begin_comment
comment|// TODO(user): Add support for sorted nodes/edges. Use Object as
end_comment

begin_comment
comment|//     the node and edge types in this case: the same scheme used in CacheBuilder.
end_comment

begin_comment
comment|// TODO(user): Add support for hypergraphs.
end_comment

begin_comment
comment|// TODO(user): Handle sorted nodes/edges and expected number of nodes/edges together,
end_comment

begin_comment
comment|//     in case sorted nodes/edges is supported.
end_comment

begin_class
annotation|@
name|Beta
DECL|class|GraphConfig
specifier|public
specifier|final
class|class
name|GraphConfig
block|{
DECL|field|multigraph
specifier|private
specifier|final
name|boolean
name|multigraph
decl_stmt|;
DECL|field|selfLoopsAllowed
specifier|private
specifier|final
name|boolean
name|selfLoopsAllowed
decl_stmt|;
DECL|field|expectedNodeCount
specifier|private
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|expectedNodeCount
decl_stmt|;
DECL|field|expectedEdgeCount
specifier|private
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|expectedEdgeCount
decl_stmt|;
comment|// Creates an instance of this class with the default graph configuration.
DECL|method|GraphConfig ()
name|GraphConfig
parameter_list|()
block|{
name|multigraph
operator|=
literal|false
expr_stmt|;
name|selfLoopsAllowed
operator|=
literal|true
expr_stmt|;
name|expectedNodeCount
operator|=
name|Optional
operator|.
name|absent
argument_list|()
expr_stmt|;
name|expectedEdgeCount
operator|=
name|Optional
operator|.
name|absent
argument_list|()
expr_stmt|;
block|}
DECL|method|GraphConfig ( boolean multigraph, boolean selfLoopsAllowed, Optional<Integer> expectedNodeCount, Optional<Integer> expectedEdgeCount)
specifier|private
name|GraphConfig
parameter_list|(
name|boolean
name|multigraph
parameter_list|,
name|boolean
name|selfLoopsAllowed
parameter_list|,
name|Optional
argument_list|<
name|Integer
argument_list|>
name|expectedNodeCount
parameter_list|,
name|Optional
argument_list|<
name|Integer
argument_list|>
name|expectedEdgeCount
parameter_list|)
block|{
name|this
operator|.
name|multigraph
operator|=
name|multigraph
expr_stmt|;
name|this
operator|.
name|selfLoopsAllowed
operator|=
name|selfLoopsAllowed
expr_stmt|;
name|this
operator|.
name|expectedNodeCount
operator|=
name|expectedNodeCount
expr_stmt|;
name|this
operator|.
name|expectedEdgeCount
operator|=
name|expectedEdgeCount
expr_stmt|;
block|}
DECL|method|isMultigraph ()
specifier|public
name|boolean
name|isMultigraph
parameter_list|()
block|{
return|return
name|multigraph
return|;
block|}
DECL|method|isSelfLoopsAllowed ()
specifier|public
name|boolean
name|isSelfLoopsAllowed
parameter_list|()
block|{
return|return
name|selfLoopsAllowed
return|;
block|}
DECL|method|getExpectedNodeCount ()
specifier|public
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getExpectedNodeCount
parameter_list|()
block|{
return|return
name|expectedNodeCount
return|;
block|}
DECL|method|getExpectedEdgeCount ()
specifier|public
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getExpectedEdgeCount
parameter_list|()
block|{
return|return
name|expectedEdgeCount
return|;
block|}
comment|/**    * Specifies the expected number of nodes in the graph configuration.    *    * @return a new {@code GraphConfig} instance that augments the existing configuration    *         by specifying the expected number of nodes.    * @throws IllegalArgumentException if {@code expectedNodeCount} is negative    */
DECL|method|expectedNodeCount (int expectedNodeCount)
specifier|public
name|GraphConfig
name|expectedNodeCount
parameter_list|(
name|int
name|expectedNodeCount
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|expectedNodeCount
operator|>=
literal|0
argument_list|,
literal|"The expected number of nodes can't be negative"
argument_list|)
expr_stmt|;
return|return
operator|new
name|GraphConfig
argument_list|(
name|multigraph
argument_list|,
name|selfLoopsAllowed
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedNodeCount
argument_list|)
argument_list|,
name|expectedEdgeCount
argument_list|)
return|;
block|}
comment|/**    * Specifies the expected number of edges in the graph configuration.    *    * @return a new {@code GraphConfig} instance that augments the existing configuration    *         by specifying the expected number of edges.    * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative    */
DECL|method|expectedEdgeCount (int expectedEdgeCount)
specifier|public
name|GraphConfig
name|expectedEdgeCount
parameter_list|(
name|int
name|expectedEdgeCount
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|expectedEdgeCount
operator|>=
literal|0
argument_list|,
literal|"The expected number of edges can't be negative"
argument_list|)
expr_stmt|;
return|return
operator|new
name|GraphConfig
argument_list|(
name|multigraph
argument_list|,
name|selfLoopsAllowed
argument_list|,
name|expectedNodeCount
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|expectedEdgeCount
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Specifies that this graph is a multigraph (allows parallel edges).    *    * @return a new {@code GraphConfig} instance that augments the existing configuration    *         by allowing parallel edges (multigraph).    */
DECL|method|multigraph ()
specifier|public
name|GraphConfig
name|multigraph
parameter_list|()
block|{
return|return
operator|new
name|GraphConfig
argument_list|(
literal|true
argument_list|,
name|selfLoopsAllowed
argument_list|,
name|expectedNodeCount
argument_list|,
name|expectedEdgeCount
argument_list|)
return|;
block|}
comment|/**    * Specifies that this graph does not allow self-loop edges.    *    * @return a new {@code GraphConfig} instance that augments the existing configuration    *         by disallowing self-loop edges.    */
DECL|method|noSelfLoops ()
specifier|public
name|GraphConfig
name|noSelfLoops
parameter_list|()
block|{
return|return
operator|new
name|GraphConfig
argument_list|(
name|multigraph
argument_list|,
literal|false
argument_list|,
name|expectedNodeCount
argument_list|,
name|expectedEdgeCount
argument_list|)
return|;
block|}
comment|/**    * Returns true iff the configuration defined by this object is<i>compatible with</i> the    * configuration defined by {@code that}.  Intuitively, this checks for structural properties    * and ignores non-structural properties.  Specifically, this method checks whether the    * configurations have compatible support for:    *<ul>    *<li>parallel edges    *<li>self-loops    *</ul>    *    *<p>It does not compare expected values for numbers of edges or nodes,    * and it is not equivalent to {@code Object.equals}.    */
DECL|method|compatibleWith (GraphConfig that)
specifier|public
name|boolean
name|compatibleWith
parameter_list|(
name|GraphConfig
name|that
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|that
argument_list|,
literal|"that"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|multigraph
operator|==
name|that
operator|.
name|multigraph
operator|&&
name|this
operator|.
name|selfLoopsAllowed
operator|==
name|that
operator|.
name|selfLoopsAllowed
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|GraphConfig
condition|)
block|{
name|GraphConfig
name|that
init|=
operator|(
name|GraphConfig
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|multigraph
operator|==
name|that
operator|.
name|multigraph
operator|&&
name|this
operator|.
name|selfLoopsAllowed
operator|==
name|that
operator|.
name|selfLoopsAllowed
operator|&&
name|this
operator|.
name|expectedNodeCount
operator|.
name|equals
argument_list|(
name|that
operator|.
name|expectedNodeCount
argument_list|)
operator|&&
name|this
operator|.
name|expectedEdgeCount
operator|.
name|equals
argument_list|(
name|that
operator|.
name|expectedEdgeCount
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|expectedNodeCount
argument_list|,
name|expectedEdgeCount
argument_list|,
name|multigraph
argument_list|,
name|selfLoopsAllowed
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|multigraph
condition|)
block|{
name|properties
operator|.
name|add
argument_list|(
literal|"multigraph"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selfLoopsAllowed
condition|)
block|{
name|properties
operator|.
name|add
argument_list|(
literal|"self-loops allowed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|add
argument_list|(
literal|"self-loops disallowed"
argument_list|)
expr_stmt|;
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|properties
argument_list|)
return|;
block|}
block|}
end_class

end_unit

