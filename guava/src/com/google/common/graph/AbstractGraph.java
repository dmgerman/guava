begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|GRAPH_STRING_FORMAT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this  * class rather than implement {@link Graph} directly, to ensure consistent {@link #equals(Object)}  * and {@link #hashCode()} results across different graph implementations.  *  * @author James Sexton  * @param<N> Node parameter type  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|AbstractGraph
specifier|public
specifier|abstract
class|class
name|AbstractGraph
parameter_list|<
name|N
parameter_list|>
implements|implements
name|Graph
argument_list|<
name|N
argument_list|>
block|{
annotation|@
name|Override
DECL|method|degree (Object node)
specifier|public
name|int
name|degree
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
comment|// TODO(b/28087289): only works for non-multigraphs; multigraphs not yet supported
return|return
name|adjacentNodes
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|inDegree (Object node)
specifier|public
name|int
name|inDegree
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
comment|// TODO(b/28087289): only works for non-multigraphs; multigraphs not yet supported
return|return
name|predecessors
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|outDegree (Object node)
specifier|public
name|int
name|outDegree
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
comment|// TODO(b/28087289): only works for non-multigraphs; multigraphs not yet supported
return|return
name|successors
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Graph
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Graph
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Graph
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
comment|// Needed to enforce a symmetric equality relationship.
if|if
condition|(
name|other
operator|instanceof
name|Network
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isDirected
argument_list|()
operator|!=
name|other
operator|.
name|isDirected
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|nodes
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodes
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|N
name|node
range|:
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|successors
argument_list|(
name|node
argument_list|)
operator|.
name|equals
argument_list|(
name|other
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|Function
argument_list|<
name|N
argument_list|,
name|Set
argument_list|<
name|N
argument_list|>
argument_list|>
name|nodeToSuccessors
init|=
operator|new
name|Function
argument_list|<
name|N
argument_list|,
name|Set
argument_list|<
name|N
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|apply
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|successors
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|Maps
operator|.
name|asMap
argument_list|(
name|nodes
argument_list|()
argument_list|,
name|nodeToSuccessors
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns a string representation of this graph.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// TODO(b/28087289): add allowsParallelEdges() once that's supported
name|String
name|propertiesString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"isDirected: %s, allowsSelfLoops: %s"
argument_list|,
name|isDirected
argument_list|()
argument_list|,
name|allowsSelfLoops
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|endpointsString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"{%s}"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|Graphs
operator|.
name|endpointsInternal
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|GRAPH_STRING_FORMAT
argument_list|,
name|propertiesString
argument_list|,
name|nodes
argument_list|()
argument_list|,
name|endpointsString
argument_list|)
return|;
block|}
block|}
end_class

end_unit

