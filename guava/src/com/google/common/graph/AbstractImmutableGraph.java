begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Abstract base class for implementation of immutable graphs.  *  *<p>All mutation methods throw {@link UnsupportedOperationException} as the graph  * can't be modified.  *  *<p>The time complexity of {@code edgesConnecting(node1, node2)} is O(min(outD_node1, inD_node2)).  *  * @author James Sexton  * @author Joshua O'Madadhain  * @author Omar Darwish  * @param<N> Node parameter type  * @param<E> Edge parameter type  */
end_comment

begin_comment
comment|//TODO(user): Add support for sorted nodes/edges and/or hypergraphs.
end_comment

begin_class
DECL|class|AbstractImmutableGraph
specifier|abstract
class|class
name|AbstractImmutableGraph
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|AbstractConfigurableGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
DECL|method|AbstractImmutableGraph (Builder<N, E> builder)
name|AbstractImmutableGraph
parameter_list|(
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
operator|.
name|graph
operator|.
name|config
argument_list|()
argument_list|,
name|builder
operator|.
name|getNodeConnections
argument_list|()
argument_list|,
name|builder
operator|.
name|getEdgeToIncidentNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newNodeConnections ()
specifier|final
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|newNodeConnections
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addNode (N node)
specifier|public
specifier|final
name|boolean
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addEdge (E edge, N node1, N node2)
specifier|public
specifier|final
name|boolean
name|addEdge
parameter_list|(
name|E
name|edge
parameter_list|,
name|N
name|node1
parameter_list|,
name|N
name|node2
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|removeNode (Object node)
specifier|public
specifier|final
name|boolean
name|removeNode
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|removeEdge (Object edge)
specifier|public
specifier|final
name|boolean
name|removeEdge
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|edgesConnecting (Object node1, Object node2)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|edgesConnecting
parameter_list|(
name|Object
name|node1
parameter_list|,
name|Object
name|node2
parameter_list|)
block|{
comment|// This set is calculated as the intersection of two sets, and is likely to be small.
comment|// As an optimization, copy it to an ImmutableSet so re-iterating is fast.
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|super
operator|.
name|edgesConnecting
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * An abstract class for builders of immutable graph instances.    *    * @param<N> Node parameter type    * @param<E> Edge parameter type    */
DECL|class|Builder
specifier|abstract
specifier|static
class|class
name|Builder
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
block|{
DECL|field|graph
specifier|final
name|Graph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graph
decl_stmt|;
DECL|method|Builder (Graph<N, E> graph)
name|Builder
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|)
block|{
name|this
operator|.
name|graph
operator|=
name|checkNotNull
argument_list|(
name|graph
argument_list|,
literal|"graph"
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeConnectionsOf (N node)
specifier|abstract
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|nodeConnectionsOf
parameter_list|(
name|N
name|node
parameter_list|)
function_decl|;
comment|/**      * Creates and returns a new instance of {@code AbstractImmutableGraph}      * based on the contents of the {@code Builder}.      */
DECL|method|build ()
specifier|public
specifier|abstract
name|AbstractImmutableGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|build
parameter_list|()
function_decl|;
comment|/**      * Adds {@code node} to the graph being built.      *      * @return this {@code Builder} instance      * @throws NullPointerException if {@code node} is null      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addNode (N node)
specifier|public
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
name|graph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds {@code edge} to the graph being built, connecting {@code node1} and {@code node2};      * adds {@code node1} and {@code node2} if not already present.      *      * @return this {@code Builder} instance      * @throws IllegalArgumentException when {@code Graph.addEdge(edge, node1, node2)} throws      *     on the graph being built      * @throws NullPointerException if {@code edge}, {@code node1}, or {@code node2} is null      * @see Graph#addEdge      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (E edge, N node1, N node2)
specifier|public
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addEdge
parameter_list|(
name|E
name|edge
parameter_list|,
name|N
name|node1
parameter_list|,
name|N
name|node2
parameter_list|)
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|edge
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds all elements of {@code graph} to the graph being built.      *      * @throws IllegalArgumentException under either of two conditions:      *     (1) the {@code GraphConfig} objects held by the graph being built and by {@code graph}      *     are not compatible      *     (2) calling {@link Graphs#addEdge} on the graph being built throws IAE      * @see Graph#addEdge      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addGraph (Graph<N, E> graphToAdd)
specifier|public
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addGraph
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graphToAdd
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|graph
operator|.
name|config
argument_list|()
operator|.
name|compatibleWith
argument_list|(
name|graphToAdd
operator|.
name|config
argument_list|()
argument_list|)
argument_list|,
literal|"GraphConfigs for input and for graph being built are not compatible: input: %s, "
operator|+
literal|"this graph: %s"
argument_list|,
name|graphToAdd
operator|.
name|config
argument_list|()
argument_list|,
name|graph
operator|.
name|config
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graphToAdd
operator|.
name|nodes
argument_list|()
control|)
block|{
name|graph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|E
name|edge
range|:
name|graphToAdd
operator|.
name|edges
argument_list|()
control|)
block|{
name|Graphs
operator|.
name|addEdge
argument_list|(
name|graph
argument_list|,
name|edge
argument_list|,
name|graphToAdd
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getNodeConnections ()
specifier|private
name|ImmutableMap
argument_list|<
name|N
argument_list|,
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|>
name|getNodeConnections
parameter_list|()
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|>
name|nodeConnections
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|nodeConnections
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|nodeConnectionsOf
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeConnections
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getEdgeToIncidentNodes ()
specifier|private
name|ImmutableMap
argument_list|<
name|E
argument_list|,
name|IncidentNodes
argument_list|<
name|N
argument_list|>
argument_list|>
name|getEdgeToIncidentNodes
parameter_list|()
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|E
argument_list|,
name|IncidentNodes
argument_list|<
name|N
argument_list|>
argument_list|>
name|edgeToIncidentNodes
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|edge
range|:
name|graph
operator|.
name|edges
argument_list|()
control|)
block|{
name|edgeToIncidentNodes
operator|.
name|put
argument_list|(
name|edge
argument_list|,
name|IncidentNodes
operator|.
name|of
argument_list|(
name|graph
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|edgeToIncidentNodes
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

