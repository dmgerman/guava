begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A class representing an origin node's adjacent nodes in an undirected graph.  *  * @author James Sexton  * @param<N> Node parameter type  */
end_comment

begin_class
DECL|class|UndirectedNodeAdjacencies
specifier|final
class|class
name|UndirectedNodeAdjacencies
parameter_list|<
name|N
parameter_list|>
implements|implements
name|NodeAdjacencies
argument_list|<
name|N
argument_list|>
block|{
DECL|field|adjacentNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
decl_stmt|;
DECL|method|UndirectedNodeAdjacencies (Set<N> adjacentNodes)
specifier|private
name|UndirectedNodeAdjacencies
parameter_list|(
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|)
block|{
name|this
operator|.
name|adjacentNodes
operator|=
name|checkNotNull
argument_list|(
name|adjacentNodes
argument_list|,
literal|"adjacentNodes"
argument_list|)
expr_stmt|;
block|}
DECL|method|of ()
specifier|static
parameter_list|<
name|N
parameter_list|>
name|UndirectedNodeAdjacencies
argument_list|<
name|N
argument_list|>
name|of
parameter_list|()
block|{
comment|// TODO(user): Enable users to specify the expected number of neighbors of a new node.
return|return
operator|new
name|UndirectedNodeAdjacencies
argument_list|<
name|N
argument_list|>
argument_list|(
name|Sets
operator|.
expr|<
name|N
operator|>
name|newHashSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ofImmutable (Set<N> adjacentNodes)
specifier|static
parameter_list|<
name|N
parameter_list|>
name|UndirectedNodeAdjacencies
argument_list|<
name|N
argument_list|>
name|ofImmutable
parameter_list|(
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|)
block|{
return|return
operator|new
name|UndirectedNodeAdjacencies
argument_list|<
name|N
argument_list|>
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|adjacentNodes
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentNodes ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|adjacentNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|()
block|{
return|return
name|adjacentNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|successors ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|()
block|{
return|return
name|adjacentNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|removePredecessor (Object node)
specifier|public
name|boolean
name|removePredecessor
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|removeSuccessor
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeSuccessor (Object node)
specifier|public
name|boolean
name|removeSuccessor
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
return|return
name|adjacentNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addPredecessor (N node)
specifier|public
name|boolean
name|addPredecessor
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|addSuccessor
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addSuccessor (N node)
specifier|public
name|boolean
name|addSuccessor
parameter_list|(
name|N
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
return|return
name|adjacentNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|adjacentNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|UndirectedNodeAdjacencies
condition|)
block|{
name|UndirectedNodeAdjacencies
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|UndirectedNodeAdjacencies
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|adjacentNodes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|adjacentNodes
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"adjacentNodes"
argument_list|,
name|adjacentNodes
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

