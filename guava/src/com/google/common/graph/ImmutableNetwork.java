begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@link Network} whose elements and structural relationships will never change. Instances of  * this class may be obtained with {@link #copyOf(Network)}.  *  *<p>See the Guava User's Guide's<a  * href="https://github.com/google/guava/wiki/GraphsExplained#immutable-implementations">discussion  * of the {@code Immutable*} types</a> for more information on the properties and guarantees  * provided by this class.  *  * @author James Sexton  * @author Joshua O'Madadhain  * @author Omar Darwish  * @author Jens Nyman  * @param<N> Node parameter type  * @param<E> Edge parameter type  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|Immutable
argument_list|(
name|containerOf
operator|=
block|{
literal|"N"
block|,
literal|"E"
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Immutable"
argument_list|)
comment|// Extends StandardNetwork but uses ImmutableMaps.
DECL|class|ImmutableNetwork
specifier|public
specifier|final
class|class
name|ImmutableNetwork
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|StandardNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
DECL|method|ImmutableNetwork (Network<N, E> network)
specifier|private
name|ImmutableNetwork
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
name|super
argument_list|(
name|NetworkBuilder
operator|.
name|from
argument_list|(
name|network
argument_list|)
argument_list|,
name|getNodeConnections
argument_list|(
name|network
argument_list|)
argument_list|,
name|getEdgeToReferenceNode
argument_list|(
name|network
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Returns an immutable copy of {@code network}. */
DECL|method|copyOf (Network<N, E> network)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|ImmutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
return|return
operator|(
name|network
operator|instanceof
name|ImmutableNetwork
operator|)
condition|?
operator|(
name|ImmutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
operator|)
name|network
else|:
operator|new
name|ImmutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|(
name|network
argument_list|)
return|;
block|}
comment|/**    * Simply returns its argument.    *    * @deprecated no need to use this    */
annotation|@
name|Deprecated
DECL|method|copyOf (ImmutableNetwork<N, E> network)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|ImmutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copyOf
parameter_list|(
name|ImmutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|network
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asGraph ()
specifier|public
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
name|asGraph
parameter_list|()
block|{
return|return
operator|new
name|ImmutableGraph
argument_list|<
name|N
argument_list|>
argument_list|(
name|super
operator|.
name|asGraph
argument_list|()
argument_list|)
return|;
comment|// safe because the view is effectively immutable
block|}
DECL|method|getNodeConnections (Network<N, E> network)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Map
argument_list|<
name|N
argument_list|,
name|NetworkConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|>
name|getNodeConnections
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
comment|// ImmutableMap.Builder maintains the order of the elements as inserted, so the map will have
comment|// whatever ordering the network's nodes do, so ImmutableSortedMap is unnecessary even if the
comment|// input nodes are sorted.
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|NetworkConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|>
name|nodeConnections
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|N
name|node
range|:
name|network
operator|.
name|nodes
argument_list|()
control|)
block|{
name|nodeConnections
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|connectionsOf
argument_list|(
name|network
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeConnections
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getEdgeToReferenceNode (Network<N, E> network)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Map
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|getEdgeToReferenceNode
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
comment|// ImmutableMap.Builder maintains the order of the elements as inserted, so the map will have
comment|// whatever ordering the network's edges do, so ImmutableSortedMap is unnecessary even if the
comment|// input edges are sorted.
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|edgeToReferenceNode
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|edge
range|:
name|network
operator|.
name|edges
argument_list|()
control|)
block|{
name|edgeToReferenceNode
operator|.
name|put
argument_list|(
name|edge
argument_list|,
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|nodeU
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|edgeToReferenceNode
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|connectionsOf (Network<N, E> network, N node)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|NetworkConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connectionsOf
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|,
name|N
name|node
parameter_list|)
block|{
if|if
condition|(
name|network
operator|.
name|isDirected
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|inEdgeMap
init|=
name|Maps
operator|.
name|asMap
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|sourceNodeFn
argument_list|(
name|network
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|outEdgeMap
init|=
name|Maps
operator|.
name|asMap
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|targetNodeFn
argument_list|(
name|network
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|selfLoopCount
init|=
name|network
operator|.
name|edgesConnecting
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|network
operator|.
name|allowsParallelEdges
argument_list|()
condition|?
name|DirectedMultiNetworkConnections
operator|.
name|ofImmutable
argument_list|(
name|inEdgeMap
argument_list|,
name|outEdgeMap
argument_list|,
name|selfLoopCount
argument_list|)
else|:
name|DirectedNetworkConnections
operator|.
name|ofImmutable
argument_list|(
name|inEdgeMap
argument_list|,
name|outEdgeMap
argument_list|,
name|selfLoopCount
argument_list|)
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|incidentEdgeMap
init|=
name|Maps
operator|.
name|asMap
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|adjacentNodeFn
argument_list|(
name|network
argument_list|,
name|node
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|network
operator|.
name|allowsParallelEdges
argument_list|()
condition|?
name|UndirectedMultiNetworkConnections
operator|.
name|ofImmutable
argument_list|(
name|incidentEdgeMap
argument_list|)
else|:
name|UndirectedNetworkConnections
operator|.
name|ofImmutable
argument_list|(
name|incidentEdgeMap
argument_list|)
return|;
block|}
block|}
DECL|method|sourceNodeFn (final Network<N, E> network)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Function
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|sourceNodeFn
parameter_list|(
specifier|final
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|N
name|apply
parameter_list|(
name|E
name|edge
parameter_list|)
block|{
return|return
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|source
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|targetNodeFn (final Network<N, E> network)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Function
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|targetNodeFn
parameter_list|(
specifier|final
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|N
name|apply
parameter_list|(
name|E
name|edge
parameter_list|)
block|{
return|return
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|target
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|adjacentNodeFn (final Network<N, E> network, final N node)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Function
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
name|adjacentNodeFn
parameter_list|(
specifier|final
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|,
specifier|final
name|N
name|node
parameter_list|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|E
argument_list|,
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|N
name|apply
parameter_list|(
name|E
name|edge
parameter_list|)
block|{
return|return
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|adjacentNode
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * A builder for creating {@link ImmutableNetwork} instances, especially {@code static final}    * networks. Example:    *    *<pre>{@code    * static final ImmutableNetwork<City, Train> TRAIN_NETWORK =    *     NetworkBuilder.undirected()    *         .allowsParallelEdges(true)    *         .<City, Train>immutable()    *         .addEdge(PARIS, BRUSSELS, Thalys.trainNumber("1111"))    *         .addEdge(PARIS, BRUSSELS, RegionalTrain.trainNumber("2222"))    *         .addEdge(LONDON, PARIS, Eurostar.trainNumber("3333"))    *         .addEdge(LONDON, BRUSSELS, Eurostar.trainNumber("4444"))    *         .addNode(REYKJAVIK)    *         .build();    * }</pre>    *    *<p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build    * multiple networks in series. Each new network contains all the elements of the ones created    * before it.    *    * @since 28.0    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
block|{
DECL|field|mutableNetwork
specifier|private
specifier|final
name|MutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|mutableNetwork
decl_stmt|;
DECL|method|Builder (NetworkBuilder<N, E> networkBuilder)
name|Builder
parameter_list|(
name|NetworkBuilder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|networkBuilder
parameter_list|)
block|{
name|this
operator|.
name|mutableNetwork
operator|=
name|networkBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds {@code node} if it is not already present.      *      *<p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null.      *      * @return this {@code Builder} object      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addNode (N node)
specifier|public
name|ImmutableNetwork
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
name|mutableNetwork
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds {@code edge} connecting {@code nodeU} to {@code nodeV}.      *      *<p>If the network is directed, {@code edge} will be directed in this network; otherwise, it      * will be undirected.      *      *<p><b>{@code edge} must be unique to this network</b>, just as a {@code Map} key must be. It      * must also be non-null.      *      *<p>If {@code nodeU} and {@code nodeV} are not already present in this network, this method      * will silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the network.      *      *<p>If {@code edge} already connects {@code nodeU} to {@code nodeV} (in the specified order if      * this network {@link #isDirected()}, else in any order), then this method will have no effect.      *      * @return this {@code Builder} object      * @throws IllegalArgumentException if {@code edge} already exists in the network and does not      *     connect {@code nodeU} to {@code nodeV}      * @throws IllegalArgumentException if the introduction of the edge would violate {@link      *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (N nodeU, N nodeV, E edge)
specifier|public
name|ImmutableNetwork
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addEdge
parameter_list|(
name|N
name|nodeU
parameter_list|,
name|N
name|nodeV
parameter_list|,
name|E
name|edge
parameter_list|)
block|{
name|mutableNetwork
operator|.
name|addEdge
argument_list|(
name|nodeU
argument_list|,
name|nodeV
argument_list|,
name|edge
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds {@code edge} connecting {@code endpoints}. In an undirected network, {@code edge} will      * also connect {@code nodeV} to {@code nodeU}.      *      *<p>If this network is directed, {@code edge} will be directed in this network; if it is      * undirected, {@code edge} will be undirected in this network.      *      *<p>If this network is directed, {@code endpoints} must be ordered.      *      *<p><b>{@code edge} must be unique to this network</b>, just as a {@code Map} key must be. It      * must also be non-null.      *      *<p>If either or both endpoints are not already present in this network, this method will      * silently {@link #addNode(Object) add} each missing endpoint to the network.      *      *<p>If {@code edge} already connects an endpoint pair equal to {@code endpoints}, then this      * method will have no effect.      *      * @return this {@code Builder} object      * @throws IllegalArgumentException if {@code edge} already exists in the network and connects      *     some other endpoint pair that is not equal to {@code endpoints}      * @throws IllegalArgumentException if the introduction of the edge would violate {@link      *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}      * @throws IllegalArgumentException if the endpoints are unordered and the network is directed      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (EndpointPair<N> endpoints, E edge)
specifier|public
name|ImmutableNetwork
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addEdge
parameter_list|(
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|endpoints
parameter_list|,
name|E
name|edge
parameter_list|)
block|{
name|mutableNetwork
operator|.
name|addEdge
argument_list|(
name|endpoints
argument_list|,
name|edge
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code      * Builder}.      */
DECL|method|build ()
specifier|public
name|ImmutableNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|build
parameter_list|()
block|{
return|return
name|ImmutableNetwork
operator|.
name|copyOf
argument_list|(
name|mutableNetwork
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

