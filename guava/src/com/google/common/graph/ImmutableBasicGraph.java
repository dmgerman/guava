begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|BasicGraph
operator|.
name|Presence
import|;
end_import

begin_comment
comment|/**  * A {@link BasicGraph} whose relationships are constant. Instances of this class may be obtained  * with {@link #copyOf(BasicGraph)}.  *  * @author James Sexton  * @author Joshua O'Madadhain  * @author Omar Darwish  * @param<N> Node parameter type  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|ImmutableBasicGraph
specifier|public
class|class
name|ImmutableBasicGraph
parameter_list|<
name|N
parameter_list|>
extends|extends
name|ImmutableGraph
argument_list|<
name|N
argument_list|,
name|Presence
argument_list|>
implements|implements
name|BasicGraph
argument_list|<
name|N
argument_list|>
block|{
DECL|method|ImmutableBasicGraph (BasicGraph<N> graph)
specifier|private
name|ImmutableBasicGraph
parameter_list|(
name|BasicGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
name|super
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns an immutable copy of {@code graph}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|copyOf (BasicGraph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|ImmutableBasicGraph
argument_list|<
name|N
argument_list|>
name|copyOf
parameter_list|(
name|BasicGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
return|return
operator|(
name|graph
operator|instanceof
name|ImmutableBasicGraph
operator|)
condition|?
operator|(
name|ImmutableBasicGraph
argument_list|<
name|N
argument_list|>
operator|)
name|graph
else|:
operator|new
name|ImmutableBasicGraph
argument_list|<
name|N
argument_list|>
argument_list|(
name|graph
argument_list|)
return|;
block|}
comment|/**    * Simply returns its argument.    *    * @deprecated no need to use this    */
annotation|@
name|Deprecated
DECL|method|copyOf (ImmutableBasicGraph<N> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|>
name|ImmutableBasicGraph
argument_list|<
name|N
argument_list|>
name|copyOf
parameter_list|(
name|ImmutableBasicGraph
argument_list|<
name|N
argument_list|>
name|graph
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|graph
argument_list|)
return|;
block|}
block|}
end_class

end_unit

