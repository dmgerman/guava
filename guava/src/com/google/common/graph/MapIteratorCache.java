begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A map-like data structure that wraps a backing map and caches values while iterating through  * {@link #unmodifiableKeySet()}. By design, the cache is cleared when this structure is mutated. If  * this structure is never mutated, it provides a thread-safe view of the backing map.  *  *<p>The {@link MapIteratorCache} assumes ownership of the backing map, and cannot guarantee  * correctness in the face of external mutations to the backing map. As such, it is<b>strongly</b>  * recommended that the caller does not persist a reference to the backing map (unless the backing  * map is immutable).  *  *<p>This class is tailored toward use cases in common.graph. It is *NOT* a general purpose map.  *  * @author James Sexton  */
end_comment

begin_class
DECL|class|MapIteratorCache
class|class
name|MapIteratorCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|backingMap
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backingMap
decl_stmt|;
comment|/*    * Per JDK: "the behavior of a map entry is undefined if the backing map has been modified after    * the entry was returned by the iterator, except through the setValue operation on the map entry"    * As such, this field must be cleared before every map mutation.    *    * Note about volatile: volatile doesn't make it safe to read from a mutable graph in one thread    * while writing to it in another. All it does is help with _reading_ from multiple threads    * concurrently. For more information, see AbstractNetworkTest.concurrentIteration.    */
DECL|field|cacheEntry
specifier|private
specifier|transient
specifier|volatile
annotation|@
name|Nullable
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cacheEntry
decl_stmt|;
DECL|method|MapIteratorCache (Map<K, V> backingMap)
name|MapIteratorCache
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backingMap
parameter_list|)
block|{
name|this
operator|.
name|backingMap
operator|=
name|checkNotNull
argument_list|(
name|backingMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (K key, V value)
specifier|final
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
return|return
name|backingMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|remove (Object key)
specifier|final
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
return|return
name|backingMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|clear ()
specifier|final
name|void
name|clear
parameter_list|()
block|{
name|clearCache
argument_list|()
expr_stmt|;
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|get (Object key)
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|V
name|value
init|=
name|getIfCached
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
else|:
name|getWithoutCaching
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getWithoutCaching (Object key)
specifier|final
name|V
name|getWithoutCaching
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|containsKey (@ullable Object key)
specifier|final
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|getIfCached
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
operator|||
name|backingMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|unmodifiableKeySet ()
specifier|final
name|Set
argument_list|<
name|K
argument_list|>
name|unmodifiableKeySet
parameter_list|()
block|{
return|return
operator|new
name|AbstractSet
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|UnmodifiableIterator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// store local reference for thread-safety
name|cacheEntry
operator|=
name|entry
expr_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// Internal methods (package-visible, but treat as only subclass-visible)
DECL|method|getIfCached (@ullable Object key)
name|V
name|getIfCached
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|cacheEntry
decl_stmt|;
comment|// store local reference for thread-safety
comment|// Check cache. We use == on purpose because it's cheaper and a cache miss is ok.
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKey
argument_list|()
operator|==
name|key
condition|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|clearCache ()
name|void
name|clearCache
parameter_list|()
block|{
name|cacheEntry
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

