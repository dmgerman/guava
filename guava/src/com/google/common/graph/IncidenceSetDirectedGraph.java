begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|ADDING_PARALLEL_EDGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|EDGE_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|NODE_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|REUSING_EDGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphErrorMessageUtils
operator|.
name|SELF_LOOPS_NOT_ALLOWED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Adjacency-set-based implementation of a directed graph consisting of nodes  * of type N and edges of type E.  *  *<p>{@link Graphs#createDirected()} should be used to get an instance of this class.  *  *<p>This class maintains the following for representing the directed graph data  *    structure:  *<ul>  *<li>For each node: sets of incoming and outgoing edges.  *<li>For each edge: references to the source and target nodes.  *</ul>  *  *<p>Some invariants/assumptions are maintained in this implementation:  *<ul>  *<li>An edge has exactly two end-points (source node and target node), which  *     may or may not be distinct.  *<li>By default, this is not a multigraph, that is, parallel edges (multiple  *     edges directed from n1 to n2) are not allowed.  If you want a multigraph,  *     create the graph with the 'multigraph' option:  *<pre>Graphs.createDirected(Graphs.config().multigraph());</pre>  *<li>Anti-parallel edges (same incident nodes but in opposite direction,  *     e.g. (n1, n2) and (n2, n1)) are always allowed.  *<li>By default, self-loop edges are allowed. If you want to disallow them,  *     create the graph without the option of self-loops:  *<pre>Graphs.createDirected(Graphs.config().noSelfLoops());</pre>  *<li>Edges are not adjacent to themselves by definition. In the case of a  *     self-loop, a node can be adjacent to itself, but an edge will never be.  *</ul>  *  *<p>{@code Set}-returning accessors return unmodifiable views: the view returned  * will reflect changes to the graph, but may not be modified by the user.  * The behavior of the returned view is undefined in the following cases:  *<ul>  *<li>Removing the element on which the accessor is called (e.g.:  *<pre>{@code  *     Set<N> preds = predecessors(node);  *     graph.removeNode(node);}</pre>  *     At this point, the contents of {@code preds} are undefined.  *</ul>  *  *<p>The time complexity of all {@code Set}-returning accessors is O(1), since we  * are returning views.  *  *<p>All other accessors have a time complexity of O(1), except for {@code degree(node)},  * whose time complexity is O(outD_node).  *  *<p>Time complexities for mutation methods:  *<ul>  *<li>{@code addNode}: O(1).  *<li>{@code addEdge(E edge, N node1, N node2)}: O(1).  *<li>{@code removeNode(node)}: O(d_node).  *<li>{@code removeEdge}: O(1), unless this graph is a multigraph (supports parallel edges),  *     then this method is O(min(outD_edgeSource, inD_edgeTarget)).  *  *</ul>  * where d_node is the degree of node, inD_node is the in-degree of node, and outD_node is the  * out-degree of node.  *  * @author Joshua O'Madadhain  * @param<N> Node parameter type  * @param<E> Edge parameter type  * @see IncidenceSetUndirectedGraph  * @see Graphs  */
end_comment

begin_class
DECL|class|IncidenceSetDirectedGraph
specifier|final
class|class
name|IncidenceSetDirectedGraph
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
implements|implements
name|DirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
comment|// TODO(b/24620028): Enable this class to support sorted nodes/edges.
DECL|field|nodeConnections
specifier|private
specifier|final
name|Map
argument_list|<
name|N
argument_list|,
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|>
name|nodeConnections
decl_stmt|;
DECL|field|edgeToIncidentNodes
specifier|private
specifier|final
name|Map
argument_list|<
name|E
argument_list|,
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
argument_list|>
name|edgeToIncidentNodes
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|GraphConfig
name|config
decl_stmt|;
DECL|method|IncidenceSetDirectedGraph (GraphConfig config)
name|IncidenceSetDirectedGraph
parameter_list|(
name|GraphConfig
name|config
parameter_list|)
block|{
comment|// The default of 11 is rather arbitrary, but roughly matches the sizing of just new HashMap()
name|this
operator|.
name|nodeConnections
operator|=
name|Maps
operator|.
name|newLinkedHashMapWithExpectedSize
argument_list|(
name|config
operator|.
name|getExpectedNodeCount
argument_list|()
operator|.
name|or
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|edgeToIncidentNodes
operator|=
name|Maps
operator|.
name|newLinkedHashMapWithExpectedSize
argument_list|(
name|config
operator|.
name|getExpectedEdgeCount
argument_list|()
operator|.
name|or
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodes ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|nodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|nodeConnections
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|edges ()
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|edges
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|edgeToIncidentNodes
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|config ()
specifier|public
name|GraphConfig
name|config
parameter_list|()
block|{
return|return
name|config
return|;
block|}
annotation|@
name|Override
DECL|method|incidentEdges (Object node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|incidentEdges
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|union
argument_list|(
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|incidentNodes (Object edge)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|incidentNodes
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
comment|// Returning an immutable set here as the edge's endpoints will not change anyway.
return|return
name|checkedEndpoints
argument_list|(
name|edge
argument_list|)
operator|.
name|asImmutableSet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentNodes (Object node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|union
argument_list|(
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|,
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentEdges (Object edge)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|adjacentEdges
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
name|Iterator
argument_list|<
name|N
argument_list|>
name|incidentNodesIterator
init|=
name|incidentNodes
argument_list|(
name|edge
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|E
argument_list|>
name|endpointsIncidentEdges
init|=
name|incidentEdges
argument_list|(
name|incidentNodesIterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|incidentNodesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|endpointsIncidentEdges
operator|=
name|Sets
operator|.
name|union
argument_list|(
name|incidentEdges
argument_list|(
name|incidentNodesIterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|endpointsIncidentEdges
argument_list|)
expr_stmt|;
block|}
return|return
name|Sets
operator|.
name|difference
argument_list|(
name|endpointsIncidentEdges
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|edge
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the intersection of these two sets, using {@link Sets#intersection}:    *<ol>    *<li>Outgoing edges of {@code node1}.    *<li>Incoming edges of {@code node2}.    *</ol>    */
annotation|@
name|Override
DECL|method|edgesConnecting (Object node1, Object node2)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|edgesConnecting
parameter_list|(
name|Object
name|node1
parameter_list|,
name|Object
name|node2
parameter_list|)
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|sourceOutEdges
init|=
name|outEdges
argument_list|(
name|node1
argument_list|)
decl_stmt|;
comment|// Verifies that node1 is in graph
if|if
condition|(
operator|!
name|config
operator|.
name|isSelfLoopsAllowed
argument_list|()
operator|&&
name|node1
operator|.
name|equals
argument_list|(
name|node2
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|E
argument_list|>
name|targetInEdges
init|=
name|inEdges
argument_list|(
name|node2
argument_list|)
decl_stmt|;
return|return
operator|(
name|sourceOutEdges
operator|.
name|size
argument_list|()
operator|<=
name|targetInEdges
operator|.
name|size
argument_list|()
operator|)
condition|?
name|Sets
operator|.
name|intersection
argument_list|(
name|sourceOutEdges
argument_list|,
name|targetInEdges
argument_list|)
else|:
name|Sets
operator|.
name|intersection
argument_list|(
name|targetInEdges
argument_list|,
name|sourceOutEdges
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inEdges (Object node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|inEdges
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|checkedConnections
argument_list|(
name|node
argument_list|)
operator|.
name|inEdges
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|outEdges (Object node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|outEdges
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|checkedConnections
argument_list|(
name|node
argument_list|)
operator|.
name|outEdges
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors (Object node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|checkedConnections
argument_list|(
name|node
argument_list|)
operator|.
name|predecessors
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|successors (Object node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|checkedConnections
argument_list|(
name|node
argument_list|)
operator|.
name|successors
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|degree (Object node)
specifier|public
name|long
name|degree
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|incidentEdges
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|inDegree (Object node)
specifier|public
name|long
name|inDegree
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|inEdges
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|outDegree (Object node)
specifier|public
name|long
name|outDegree
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|outEdges
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|source (Object edge)
specifier|public
name|N
name|source
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
return|return
name|checkedEndpoints
argument_list|(
name|edge
argument_list|)
operator|.
name|source
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|target (Object edge)
specifier|public
name|N
name|target
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
return|return
name|checkedEndpoints
argument_list|(
name|edge
argument_list|)
operator|.
name|target
argument_list|()
return|;
block|}
comment|// Element Mutation
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addNode (N node)
specifier|public
name|boolean
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|nodeConnections
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|DirectedNodeConnections
operator|.
expr|<
name|N
argument_list|,
name|E
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add nodes that are not elements of the graph, then add {@code edge} between them.    * Return {@code false} if {@code edge} already exists between {@code node1} and {@code node2},    * and in the same direction.    *    *<p>If this graph is not a multigraph (does not support parallel edges), this method may call    * {@code edgesConnecting(node1, node2)} to discover whether node1 and node2 are already    * connected.    *    * @throws IllegalArgumentException if an edge (other than {@code edge}) already    *         exists from {@code node1} to {@code node2}, and this is not a multigraph.    *         Also, if self-loops are not allowed, and {@code node1} is equal to {@code node2}.    */
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (E edge, N node1, N node2)
specifier|public
name|boolean
name|addEdge
parameter_list|(
name|E
name|edge
parameter_list|,
name|N
name|node1
parameter_list|,
name|N
name|node2
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|edge
argument_list|,
literal|"edge"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|node1
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|node2
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|endpoints
init|=
name|DirectedIncidentNodes
operator|.
name|of
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|config
operator|.
name|isSelfLoopsAllowed
argument_list|()
operator|||
operator|!
name|endpoints
operator|.
name|isSelfLoop
argument_list|()
argument_list|,
name|SELF_LOOPS_NOT_ALLOWED
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|previousEndpoints
init|=
name|edgeToIncidentNodes
operator|.
name|get
argument_list|(
name|edge
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousEndpoints
operator|!=
literal|null
condition|)
block|{
name|checkArgument
argument_list|(
name|previousEndpoints
operator|.
name|equals
argument_list|(
name|endpoints
argument_list|)
argument_list|,
name|REUSING_EDGE
argument_list|,
name|edge
argument_list|,
name|previousEndpoints
argument_list|,
name|endpoints
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|config
operator|.
name|isMultigraph
argument_list|()
condition|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
operator|&&
name|successors
argument_list|(
name|node1
argument_list|)
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
operator|)
argument_list|,
name|ADDING_PARALLEL_EDGE
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
block|}
name|addNode
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connectionsN1
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|connectionsN1
operator|.
name|addSuccessor
argument_list|(
name|node2
argument_list|,
name|edge
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connectionsN2
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|connectionsN2
operator|.
name|addPredecessor
argument_list|(
name|node1
argument_list|,
name|edge
argument_list|)
expr_stmt|;
name|edgeToIncidentNodes
operator|.
name|put
argument_list|(
name|edge
argument_list|,
name|endpoints
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeNode (Object node)
specifier|public
name|boolean
name|removeNode
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
comment|// Return false if the node doesn't exist in the graph
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connections
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|connections
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Since views are returned, we need to copy the edges that will be removed.
comment|// Thus we avoid modifying the underlying view while iterating over it.
for|for
control|(
name|E
name|inEdge
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|endpoints
init|=
name|edgeToIncidentNodes
operator|.
name|get
argument_list|(
name|inEdge
argument_list|)
decl_stmt|;
name|N
name|predecessor
init|=
name|endpoints
operator|.
name|source
argument_list|()
decl_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|predecessorConnections
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|predecessor
argument_list|)
decl_stmt|;
name|predecessorConnections
operator|.
name|removeSuccessor
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|predecessorConnections
operator|.
name|removeOutEdge
argument_list|(
name|inEdge
argument_list|)
expr_stmt|;
name|edgeToIncidentNodes
operator|.
name|remove
argument_list|(
name|inEdge
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|E
name|outEdge
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|endpoints
init|=
name|edgeToIncidentNodes
operator|.
name|get
argument_list|(
name|outEdge
argument_list|)
decl_stmt|;
name|N
name|successor
init|=
name|endpoints
operator|.
name|target
argument_list|()
decl_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|successorConnections
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|successor
argument_list|)
decl_stmt|;
name|successorConnections
operator|.
name|removePredecessor
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|successorConnections
operator|.
name|removeInEdge
argument_list|(
name|outEdge
argument_list|)
expr_stmt|;
name|edgeToIncidentNodes
operator|.
name|remove
argument_list|(
name|outEdge
argument_list|)
expr_stmt|;
block|}
name|nodeConnections
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeEdge (Object edge)
specifier|public
name|boolean
name|removeEdge
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|edge
argument_list|,
literal|"edge"
argument_list|)
expr_stmt|;
comment|// Return false if the edge doesn't exist in the graph
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|endpoints
init|=
name|edgeToIncidentNodes
operator|.
name|get
argument_list|(
name|edge
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoints
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|N
name|source
init|=
name|endpoints
operator|.
name|source
argument_list|()
decl_stmt|;
name|N
name|target
init|=
name|endpoints
operator|.
name|target
argument_list|()
decl_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|sourceConnections
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|targetConnections
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|isMultigraph
argument_list|()
operator|||
name|edgesConnecting
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// If this is the last connecting edge between source and target, they are no longer adjacent.
name|sourceConnections
operator|.
name|removeSuccessor
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|targetConnections
operator|.
name|removePredecessor
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|sourceConnections
operator|.
name|removeOutEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|targetConnections
operator|.
name|removeInEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|edgeToIncidentNodes
operator|.
name|remove
argument_list|(
name|edge
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|DirectedGraph
operator|)
operator|&&
name|Graphs
operator|.
name|equal
argument_list|(
name|this
argument_list|,
operator|(
name|DirectedGraph
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// The node set is included in the hash to differentiate between graphs with isolated nodes.
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|nodes
argument_list|()
argument_list|,
name|edgeToIncidentNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"config: %s, nodes: %s, edges: %s"
argument_list|,
name|config
argument_list|,
name|nodes
argument_list|()
argument_list|,
name|edgeToIncidentNodes
argument_list|)
return|;
block|}
DECL|method|checkedConnections (Object node)
specifier|private
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|checkedConnections
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|connections
init|=
name|nodeConnections
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|connections
operator|!=
literal|null
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|connections
return|;
block|}
DECL|method|checkedEndpoints (Object edge)
specifier|private
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|checkedEndpoints
parameter_list|(
name|Object
name|edge
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|edge
argument_list|,
literal|"edge"
argument_list|)
expr_stmt|;
name|DirectedIncidentNodes
argument_list|<
name|N
argument_list|>
name|endpoints
init|=
name|edgeToIncidentNodes
operator|.
name|get
argument_list|(
name|edge
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|endpoints
operator|!=
literal|null
argument_list|,
name|EDGE_NOT_IN_GRAPH
argument_list|,
name|edge
argument_list|)
expr_stmt|;
return|return
name|endpoints
return|;
block|}
block|}
end_class

end_unit

