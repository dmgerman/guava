begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|INNER_CAPACITY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|INNER_LOAD_FACTOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|checkNonNegative
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|checkPositive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link GraphConnections} for directed graphs.  *  * @author James Sexton  * @param<N> Node parameter type  * @param<V> Value parameter type  */
end_comment

begin_class
DECL|class|DirectedGraphConnections
specifier|final
class|class
name|DirectedGraphConnections
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
implements|implements
name|GraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * A wrapper class to indicate a node is both a predecessor and successor while still providing    * the successor value.    */
DECL|class|PredAndSucc
specifier|private
specifier|static
specifier|final
class|class
name|PredAndSucc
block|{
DECL|field|successorValue
specifier|private
specifier|final
name|Object
name|successorValue
decl_stmt|;
DECL|method|PredAndSucc (Object userValue)
name|PredAndSucc
parameter_list|(
name|Object
name|userValue
parameter_list|)
block|{
name|this
operator|.
name|successorValue
operator|=
name|userValue
expr_stmt|;
block|}
block|}
DECL|field|PRED
specifier|private
specifier|static
specifier|final
name|Object
name|PRED
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// Every value in this map must either be an instance of PredAndSucc with a successorValue of
comment|// type V, PRED (representing predecessor), or an instance of type V (representing successor).
DECL|field|adjacentNodeValues
specifier|private
specifier|final
name|Map
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
name|adjacentNodeValues
decl_stmt|;
DECL|field|predecessorCount
specifier|private
name|int
name|predecessorCount
decl_stmt|;
DECL|field|successorCount
specifier|private
name|int
name|successorCount
decl_stmt|;
DECL|method|DirectedGraphConnections ( Map<N, Object> adjacentNodeValues, int predecessorCount, int successorCount)
specifier|private
name|DirectedGraphConnections
parameter_list|(
name|Map
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
name|adjacentNodeValues
parameter_list|,
name|int
name|predecessorCount
parameter_list|,
name|int
name|successorCount
parameter_list|)
block|{
name|this
operator|.
name|adjacentNodeValues
operator|=
name|checkNotNull
argument_list|(
name|adjacentNodeValues
argument_list|,
literal|"adjacentNodeValues"
argument_list|)
expr_stmt|;
name|this
operator|.
name|predecessorCount
operator|=
name|checkNonNegative
argument_list|(
name|predecessorCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|successorCount
operator|=
name|checkNonNegative
argument_list|(
name|successorCount
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|predecessorCount
operator|<=
name|adjacentNodeValues
operator|.
name|size
argument_list|()
operator|&&
name|successorCount
operator|<=
name|adjacentNodeValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|of ()
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|DirectedGraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
comment|// We store predecessors and successors in the same map, so double the initial capacity.
name|int
name|initialCapacity
init|=
name|INNER_CAPACITY
operator|*
literal|2
decl_stmt|;
return|return
operator|new
name|DirectedGraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
argument_list|(
operator|new
name|HashMap
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
argument_list|(
name|initialCapacity
argument_list|,
name|INNER_LOAD_FACTOR
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|ofImmutable ( Set<N> predecessors, Map<N, V> successorValues)
specifier|static
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
name|DirectedGraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|ofImmutable
parameter_list|(
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|,
name|Map
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
name|successorValues
parameter_list|)
block|{
name|Map
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
name|adjacentNodeValues
init|=
operator|new
name|HashMap
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|adjacentNodeValues
operator|.
name|putAll
argument_list|(
name|successorValues
argument_list|)
expr_stmt|;
for|for
control|(
name|N
name|predecessor
range|:
name|predecessors
control|)
block|{
name|Object
name|value
init|=
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|predecessor
argument_list|,
name|PRED
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|predecessor
argument_list|,
operator|new
name|PredAndSucc
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DirectedGraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
argument_list|(
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|adjacentNodeValues
argument_list|)
argument_list|,
name|predecessors
operator|.
name|size
argument_list|()
argument_list|,
name|successorValues
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentNodes ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|adjacentNodeValues
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|()
block|{
return|return
operator|new
name|AbstractSet
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|N
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|adjacentNodeValues
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|N
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isPredecessor
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|predecessorCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|isPredecessor
argument_list|(
name|adjacentNodeValues
operator|.
name|get
argument_list|(
name|obj
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|successors ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|()
block|{
return|return
operator|new
name|AbstractSet
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|N
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|adjacentNodeValues
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|N
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|N
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSuccessor
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|successorCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|isSuccessor
argument_list|(
name|adjacentNodeValues
operator|.
name|get
argument_list|(
name|obj
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|value (Object node)
specifier|public
name|V
name|value
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|Object
name|value
init|=
name|adjacentNodeValues
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|PRED
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|PredAndSucc
condition|)
block|{
return|return
call|(
name|V
call|)
argument_list|(
operator|(
name|PredAndSucc
operator|)
name|value
argument_list|)
operator|.
name|successorValue
return|;
block|}
return|return
operator|(
name|V
operator|)
name|value
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|removePredecessor (Object node)
specifier|public
name|void
name|removePredecessor
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|Object
name|previousValue
init|=
name|adjacentNodeValues
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousValue
operator|==
name|PRED
condition|)
block|{
name|adjacentNodeValues
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
operator|--
name|predecessorCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previousValue
operator|instanceof
name|PredAndSucc
condition|)
block|{
name|adjacentNodeValues
operator|.
name|put
argument_list|(
operator|(
name|N
operator|)
name|node
argument_list|,
operator|(
operator|(
name|PredAndSucc
operator|)
name|previousValue
operator|)
operator|.
name|successorValue
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
operator|--
name|predecessorCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|removeSuccessor (Object node)
specifier|public
name|V
name|removeSuccessor
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|Object
name|previousValue
init|=
name|adjacentNodeValues
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousValue
operator|==
literal|null
operator|||
name|previousValue
operator|==
name|PRED
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|previousValue
operator|instanceof
name|PredAndSucc
condition|)
block|{
name|adjacentNodeValues
operator|.
name|put
argument_list|(
operator|(
name|N
operator|)
name|node
argument_list|,
name|PRED
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
operator|--
name|successorCount
argument_list|)
expr_stmt|;
return|return
call|(
name|V
call|)
argument_list|(
operator|(
name|PredAndSucc
operator|)
name|previousValue
argument_list|)
operator|.
name|successorValue
return|;
block|}
else|else
block|{
comment|// successor
name|adjacentNodeValues
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
operator|--
name|successorCount
argument_list|)
expr_stmt|;
return|return
operator|(
name|V
operator|)
name|previousValue
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|addPredecessor (N node, V unused)
specifier|public
name|void
name|addPredecessor
parameter_list|(
name|N
name|node
parameter_list|,
name|V
name|unused
parameter_list|)
block|{
name|Object
name|previousValue
init|=
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|PRED
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousValue
operator|==
literal|null
condition|)
block|{
name|checkPositive
argument_list|(
operator|++
name|predecessorCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previousValue
operator|instanceof
name|PredAndSucc
condition|)
block|{
comment|// Restore previous PredAndSucc object.
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|previousValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previousValue
operator|!=
name|PRED
condition|)
block|{
comment|// successor
comment|// Do NOT use method parameter value 'unused'. In directed graphs, successors store the value.
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|PredAndSucc
argument_list|(
name|previousValue
argument_list|)
argument_list|)
expr_stmt|;
name|checkPositive
argument_list|(
operator|++
name|predecessorCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|addSuccessor (N node, V value)
specifier|public
name|V
name|addSuccessor
parameter_list|(
name|N
name|node
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|Object
name|previousValue
init|=
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousValue
operator|==
literal|null
condition|)
block|{
name|checkPositive
argument_list|(
operator|++
name|successorCount
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|previousValue
operator|instanceof
name|PredAndSucc
condition|)
block|{
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|PredAndSucc
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
call|(
name|V
call|)
argument_list|(
operator|(
name|PredAndSucc
operator|)
name|previousValue
argument_list|)
operator|.
name|successorValue
return|;
block|}
elseif|else
if|if
condition|(
name|previousValue
operator|==
name|PRED
condition|)
block|{
name|adjacentNodeValues
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|PredAndSucc
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|checkPositive
argument_list|(
operator|++
name|successorCount
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// successor
return|return
operator|(
name|V
operator|)
name|previousValue
return|;
block|}
block|}
DECL|method|isPredecessor (@ullable Object value)
specifier|private
specifier|static
name|boolean
name|isPredecessor
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|==
name|PRED
operator|)
operator|||
operator|(
name|value
operator|instanceof
name|PredAndSucc
operator|)
return|;
block|}
DECL|method|isSuccessor (@ullable Object value)
specifier|private
specifier|static
name|boolean
name|isSuccessor
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|!=
name|PRED
operator|)
operator|&&
operator|(
name|value
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

