begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|EDGE_CONNECTING_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|NODE_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Subclass of {@link AbstractConfigurableGraph} that adds support for {@link ValueGraph}.  *  * @author James Sexton  * @param<N> Node parameter type  * @param<V> Value parameter type  */
end_comment

begin_class
DECL|class|AbstractConfigurableValueGraph
specifier|abstract
class|class
name|AbstractConfigurableValueGraph
parameter_list|<
name|N
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractConfigurableGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
implements|implements
name|ValueGraph
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Constructs a graph with the properties specified in {@code builder}.    */
DECL|method|AbstractConfigurableValueGraph (AbstractGraphBuilder<? super N> builder)
name|AbstractConfigurableValueGraph
parameter_list|(
name|AbstractGraphBuilder
argument_list|<
name|?
super|super
name|N
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a graph with the properties specified in {@code builder}, initialized with    * the given node map.    */
DECL|method|AbstractConfigurableValueGraph (AbstractGraphBuilder<? super N> builder, Map<N, GraphConnections<N, V>> nodeConnections, long edgeCount)
name|AbstractConfigurableValueGraph
parameter_list|(
name|AbstractGraphBuilder
argument_list|<
name|?
super|super
name|N
argument_list|>
name|builder
parameter_list|,
name|Map
argument_list|<
name|N
argument_list|,
name|GraphConnections
argument_list|<
name|N
argument_list|,
name|V
argument_list|>
argument_list|>
name|nodeConnections
parameter_list|,
name|long
name|edgeCount
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|,
name|nodeConnections
argument_list|,
name|edgeCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|edgeValue (Object nodeA, Object nodeB)
specifier|public
name|V
name|edgeValue
parameter_list|(
name|Object
name|nodeA
parameter_list|,
name|Object
name|nodeB
parameter_list|)
block|{
name|V
name|value
init|=
name|edgeValueOrDefault
argument_list|(
name|nodeA
argument_list|,
name|nodeB
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|value
operator|!=
literal|null
argument_list|,
name|EDGE_CONNECTING_NOT_IN_GRAPH
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|edgeValueOrDefault (Object nodeA, Object nodeB, @Nullable V defaultValue)
specifier|public
name|V
name|edgeValueOrDefault
parameter_list|(
name|Object
name|nodeA
parameter_list|,
name|Object
name|nodeB
parameter_list|,
annotation|@
name|Nullable
name|V
name|defaultValue
parameter_list|)
block|{
name|V
name|value
init|=
name|checkedConnections
argument_list|(
name|nodeA
argument_list|)
operator|.
name|value
argument_list|(
name|nodeB
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|checkArgument
argument_list|(
name|containsNode
argument_list|(
name|nodeB
argument_list|)
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

