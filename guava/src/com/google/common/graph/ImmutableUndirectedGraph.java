begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_comment
comment|/**  * Implementation of an immutable undirected graph consisting of nodes of type N  * and edges of type E.  *  *<p>Some invariants/assumptions are maintained in this implementation:  *<ul>  *<li>An edge has exactly two end-points, which may or may not be distinct.  *<li>By default, this is not a multigraph, that is, parallel edges (multiple  *     edges between n1 and n2) are not allowed.  If you want a multigraph,  *     build the graph with the 'multigraph' option:  *<pre>ImmutableUndirectedGraph.builder(Graphs.config().multigraph()).build();</pre>  *<li>Edges are not adjacent to themselves by definition. In the case of a  *     self-loop, a node can be adjacent to itself, but an edge will never be adjacent to itself.  *</ul>  *  * @author James Sexton  * @author Joshua O'Madadhain  * @author Omar Darwish  * @param<N> Node parameter type  * @param<E> Edge parameter type  * @see AbstractConfigurableGraph  * @see AbstractImmutableGraph  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|ImmutableUndirectedGraph
specifier|public
specifier|final
class|class
name|ImmutableUndirectedGraph
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|AbstractImmutableGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
implements|implements
name|UndirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
DECL|method|ImmutableUndirectedGraph (Builder<N, E> builder)
specifier|private
name|ImmutableUndirectedGraph
parameter_list|(
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a new builder. The generated builder is equivalent to the builder    * created by the {@code Builder} constructor.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a new builder. The generated builder is equivalent to the builder    * created by the {@code Builder} constructor.    *    * @param config an instance of {@code GraphConfig} with the intended    *        graph configuration.    */
DECL|method|builder (GraphConfig config)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|builder
parameter_list|(
name|GraphConfig
name|config
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|(
name|config
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable copy of the input graph.    */
DECL|method|copyOf (UndirectedGraph<N, E> graph)
specifier|public
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|ImmutableUndirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|copyOf
parameter_list|(
name|UndirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * A builder for creating immutable undirected graph instances.    *    * @param<N> Node parameter type    * @param<E> edge parameter type    * @see GraphConfig    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|AbstractImmutableGraph
operator|.
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
comment|/**      * Creates a new builder with the default graph configuration.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|super
argument_list|(
name|Graphs
operator|.
expr|<
name|N
argument_list|,
name|E
operator|>
name|createUndirected
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new builder with the specified configuration.      */
DECL|method|Builder (GraphConfig config)
specifier|public
name|Builder
parameter_list|(
name|GraphConfig
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|Graphs
operator|.
expr|<
name|N
argument_list|,
name|E
operator|>
name|createUndirected
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new builder whose internal state is that of {@code graph}.      *      *<p>NOTE: This constructor should only be used in the case where it will be immediately      * followed by a call to {@code build}, so that the input graph will not be modified.      * Currently the only such contexts are {@code Immutable*Graph.copyOf()}, which use these      * constructors to avoid making an extra copy of the graph state.      * @see ImmutableUndirectedGraph#copyOf(UndirectedGraph)      */
DECL|method|Builder (UndirectedGraph<N, E> graph)
specifier|private
name|Builder
parameter_list|(
name|UndirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graph
parameter_list|)
block|{
name|super
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeConnectionsOf (N node)
name|NodeConnections
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|nodeConnectionsOf
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|UndirectedNodeConnections
operator|.
name|ofImmutable
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|,
name|graph
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|ImmutableUndirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|build
parameter_list|()
block|{
return|return
operator|new
name|ImmutableUndirectedGraph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addNode (N node)
specifier|public
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addNode
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
operator|(
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
operator|)
name|super
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
return|;
comment|// Refine the return type
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (E edge, N node1, N node2)
specifier|public
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addEdge
parameter_list|(
name|E
name|edge
parameter_list|,
name|N
name|node1
parameter_list|,
name|N
name|node2
parameter_list|)
block|{
return|return
operator|(
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
operator|)
name|super
operator|.
name|addEdge
argument_list|(
name|edge
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
return|;
comment|// Refine the return type
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addGraph (Graph<N, E> graphToAdd)
specifier|public
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|addGraph
parameter_list|(
name|Graph
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|graphToAdd
parameter_list|)
block|{
return|return
operator|(
name|Builder
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
operator|)
name|super
operator|.
name|addGraph
argument_list|(
name|graphToAdd
argument_list|)
return|;
comment|// Refine the return type
block|}
block|}
block|}
end_class

end_unit

