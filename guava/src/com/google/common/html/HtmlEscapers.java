begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.html
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|html
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|ArrayBasedCharEscaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|ArrayBasedEscaperMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|ArrayBasedUnicodeEscaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|CharEscaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|Escapers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|UnicodeEscaper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|//TODO(user): Add better class docs once the refactoring is done.
end_comment

begin_comment
comment|/**  * A factory class for obtaining escaper instances suitable for working with  * HTML.  *  * @author Sven Mawson  * @author David Beaumont  * @since 11.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|HtmlEscapers
specifier|public
specifier|final
class|class
name|HtmlEscapers
block|{
DECL|method|HtmlEscapers ()
specifier|private
name|HtmlEscapers
parameter_list|()
block|{ }
comment|// For each xxxEscaper() method, please add links to external reference pages
comment|// that are considered authoritative for the behavior of that escaper.
comment|/**    * Returns an {@link Escaper} instance that escapes Unicode code points as    * specified by<a href="http://www.w3.org/TR/html4/">HTML 4.01</a>. In    * particular see the sections on    *<a href="http://www.w3.org/TR/html4/charset.html">character sets and    * encodings</a> and<a href="http://www.w3.org/TR/html4/sgml/entities.html">    * character entity references</a>.    *    *<p>Unsafe code points are escaped to their associated entity name, such as    * {@code&quot;} if possible, otherwise they are escaped using their decimal    * value, such as {@code&#12345;}.    */
DECL|method|htmlEscaper ()
specifier|public
specifier|static
name|UnicodeEscaper
name|htmlEscaper
parameter_list|()
block|{
comment|// TODO(user): Update callers and return Escaper.
return|return
name|HtmlEscaperHolder
operator|.
name|HTML_UNICODE_ESCAPER
return|;
block|}
comment|// A lazy initialization holder for HTML_ESCAPER. This is used because the
comment|// size of an escaper map is proportional to the highest valued character it
comment|// contains, which in this case is \u2666 (nearly 10,000).
DECL|class|HtmlEscaperHolder
specifier|private
specifier|static
class|class
name|HtmlEscaperHolder
block|{
DECL|field|replacementMap
specifier|private
specifier|static
specifier|final
name|ArrayBasedEscaperMap
name|replacementMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'"'
argument_list|,
literal|"&quot;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\''
argument_list|,
literal|"&#39;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'&'
argument_list|,
literal|"&amp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'<'
argument_list|,
literal|"&lt;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'>'
argument_list|,
literal|"&gt;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A0'
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A1'
argument_list|,
literal|"&iexcl;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A2'
argument_list|,
literal|"&cent;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A3'
argument_list|,
literal|"&pound;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A4'
argument_list|,
literal|"&curren;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A5'
argument_list|,
literal|"&yen;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A6'
argument_list|,
literal|"&brvbar;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A7'
argument_list|,
literal|"&sect;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A8'
argument_list|,
literal|"&uml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00A9'
argument_list|,
literal|"&copy;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00AA'
argument_list|,
literal|"&ordf;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00AB'
argument_list|,
literal|"&laquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00AC'
argument_list|,
literal|"&not;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00AD'
argument_list|,
literal|"&shy;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00AE'
argument_list|,
literal|"&reg;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00AF'
argument_list|,
literal|"&macr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B0'
argument_list|,
literal|"&deg;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B1'
argument_list|,
literal|"&plusmn;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B2'
argument_list|,
literal|"&sup2;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B3'
argument_list|,
literal|"&sup3;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B4'
argument_list|,
literal|"&acute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B5'
argument_list|,
literal|"&micro;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B6'
argument_list|,
literal|"&para;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B7'
argument_list|,
literal|"&middot;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B8'
argument_list|,
literal|"&cedil;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00B9'
argument_list|,
literal|"&sup1;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00BA'
argument_list|,
literal|"&ordm;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00BB'
argument_list|,
literal|"&raquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00BC'
argument_list|,
literal|"&frac14;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00BD'
argument_list|,
literal|"&frac12;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00BE'
argument_list|,
literal|"&frac34;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00BF'
argument_list|,
literal|"&iquest;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C0'
argument_list|,
literal|"&Agrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C1'
argument_list|,
literal|"&Aacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C2'
argument_list|,
literal|"&Acirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C3'
argument_list|,
literal|"&Atilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C4'
argument_list|,
literal|"&Auml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C5'
argument_list|,
literal|"&Aring;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C6'
argument_list|,
literal|"&AElig;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C7'
argument_list|,
literal|"&Ccedil;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C8'
argument_list|,
literal|"&Egrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00C9'
argument_list|,
literal|"&Eacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00CA'
argument_list|,
literal|"&Ecirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00CB'
argument_list|,
literal|"&Euml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00CC'
argument_list|,
literal|"&Igrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00CD'
argument_list|,
literal|"&Iacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00CE'
argument_list|,
literal|"&Icirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00CF'
argument_list|,
literal|"&Iuml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D0'
argument_list|,
literal|"&ETH;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D1'
argument_list|,
literal|"&Ntilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D2'
argument_list|,
literal|"&Ograve;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D3'
argument_list|,
literal|"&Oacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D4'
argument_list|,
literal|"&Ocirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D5'
argument_list|,
literal|"&Otilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D6'
argument_list|,
literal|"&Ouml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D7'
argument_list|,
literal|"&times;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D8'
argument_list|,
literal|"&Oslash;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00D9'
argument_list|,
literal|"&Ugrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00DA'
argument_list|,
literal|"&Uacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00DB'
argument_list|,
literal|"&Ucirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00DC'
argument_list|,
literal|"&Uuml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00DD'
argument_list|,
literal|"&Yacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00DE'
argument_list|,
literal|"&THORN;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00DF'
argument_list|,
literal|"&szlig;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E0'
argument_list|,
literal|"&agrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E1'
argument_list|,
literal|"&aacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E2'
argument_list|,
literal|"&acirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E3'
argument_list|,
literal|"&atilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E4'
argument_list|,
literal|"&auml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E5'
argument_list|,
literal|"&aring;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E6'
argument_list|,
literal|"&aelig;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E7'
argument_list|,
literal|"&ccedil;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E8'
argument_list|,
literal|"&egrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00E9'
argument_list|,
literal|"&eacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00EA'
argument_list|,
literal|"&ecirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00EB'
argument_list|,
literal|"&euml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00EC'
argument_list|,
literal|"&igrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00ED'
argument_list|,
literal|"&iacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00EE'
argument_list|,
literal|"&icirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00EF'
argument_list|,
literal|"&iuml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F0'
argument_list|,
literal|"&eth;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F1'
argument_list|,
literal|"&ntilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F2'
argument_list|,
literal|"&ograve;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F3'
argument_list|,
literal|"&oacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F4'
argument_list|,
literal|"&ocirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F5'
argument_list|,
literal|"&otilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F6'
argument_list|,
literal|"&ouml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F7'
argument_list|,
literal|"&divide;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F8'
argument_list|,
literal|"&oslash;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00F9'
argument_list|,
literal|"&ugrave;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00FA'
argument_list|,
literal|"&uacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00FB'
argument_list|,
literal|"&ucirc;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00FC'
argument_list|,
literal|"&uuml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00FD'
argument_list|,
literal|"&yacute;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00FE'
argument_list|,
literal|"&thorn;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u00FF'
argument_list|,
literal|"&yuml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0152'
argument_list|,
literal|"&OElig;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0153'
argument_list|,
literal|"&oelig;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0160'
argument_list|,
literal|"&Scaron;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0161'
argument_list|,
literal|"&scaron;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0178'
argument_list|,
literal|"&Yuml;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0192'
argument_list|,
literal|"&fnof;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u02C6'
argument_list|,
literal|"&circ;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u02DC'
argument_list|,
literal|"&tilde;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0391'
argument_list|,
literal|"&Alpha;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0392'
argument_list|,
literal|"&Beta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0393'
argument_list|,
literal|"&Gamma;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0394'
argument_list|,
literal|"&Delta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0395'
argument_list|,
literal|"&Epsilon;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0396'
argument_list|,
literal|"&Zeta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0397'
argument_list|,
literal|"&Eta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0398'
argument_list|,
literal|"&Theta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u0399'
argument_list|,
literal|"&Iota;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u039A'
argument_list|,
literal|"&Kappa;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u039B'
argument_list|,
literal|"&Lambda;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u039C'
argument_list|,
literal|"&Mu;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u039D'
argument_list|,
literal|"&Nu;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u039E'
argument_list|,
literal|"&Xi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u039F'
argument_list|,
literal|"&Omicron;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A0'
argument_list|,
literal|"&Pi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A1'
argument_list|,
literal|"&Rho;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A3'
argument_list|,
literal|"&Sigma;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A4'
argument_list|,
literal|"&Tau;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A5'
argument_list|,
literal|"&Upsilon;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A6'
argument_list|,
literal|"&Phi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A7'
argument_list|,
literal|"&Chi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A8'
argument_list|,
literal|"&Psi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03A9'
argument_list|,
literal|"&Omega;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B1'
argument_list|,
literal|"&alpha;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B2'
argument_list|,
literal|"&beta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B3'
argument_list|,
literal|"&gamma;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B4'
argument_list|,
literal|"&delta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B5'
argument_list|,
literal|"&epsilon;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B6'
argument_list|,
literal|"&zeta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B7'
argument_list|,
literal|"&eta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B8'
argument_list|,
literal|"&theta;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03B9'
argument_list|,
literal|"&iota;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03BA'
argument_list|,
literal|"&kappa;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03BB'
argument_list|,
literal|"&lambda;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03BC'
argument_list|,
literal|"&mu;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03BD'
argument_list|,
literal|"&nu;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03BE'
argument_list|,
literal|"&xi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03BF'
argument_list|,
literal|"&omicron;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C0'
argument_list|,
literal|"&pi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C1'
argument_list|,
literal|"&rho;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C2'
argument_list|,
literal|"&sigmaf;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C3'
argument_list|,
literal|"&sigma;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C4'
argument_list|,
literal|"&tau;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C5'
argument_list|,
literal|"&upsilon;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C6'
argument_list|,
literal|"&phi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C7'
argument_list|,
literal|"&chi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C8'
argument_list|,
literal|"&psi;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03C9'
argument_list|,
literal|"&omega;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03D1'
argument_list|,
literal|"&thetasym;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03D2'
argument_list|,
literal|"&upsih;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u03D6'
argument_list|,
literal|"&piv;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2002'
argument_list|,
literal|"&ensp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2003'
argument_list|,
literal|"&emsp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2009'
argument_list|,
literal|"&thinsp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u200C'
argument_list|,
literal|"&zwnj;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u200D'
argument_list|,
literal|"&zwj;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u200E'
argument_list|,
literal|"&lrm;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u200F'
argument_list|,
literal|"&rlm;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2013'
argument_list|,
literal|"&ndash;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2014'
argument_list|,
literal|"&mdash;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2018'
argument_list|,
literal|"&lsquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2019'
argument_list|,
literal|"&rsquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u201A'
argument_list|,
literal|"&sbquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u201C'
argument_list|,
literal|"&ldquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u201D'
argument_list|,
literal|"&rdquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u201E'
argument_list|,
literal|"&bdquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2020'
argument_list|,
literal|"&dagger;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2021'
argument_list|,
literal|"&Dagger;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2022'
argument_list|,
literal|"&bull;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2026'
argument_list|,
literal|"&hellip;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2030'
argument_list|,
literal|"&permil;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2032'
argument_list|,
literal|"&prime;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2033'
argument_list|,
literal|"&Prime;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2039'
argument_list|,
literal|"&lsaquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u203A'
argument_list|,
literal|"&rsaquo;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u203E'
argument_list|,
literal|"&oline;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2044'
argument_list|,
literal|"&frasl;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u20AC'
argument_list|,
literal|"&euro;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2111'
argument_list|,
literal|"&image;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2118'
argument_list|,
literal|"&weierp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u211C'
argument_list|,
literal|"&real;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2122'
argument_list|,
literal|"&trade;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2135'
argument_list|,
literal|"&alefsym;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2190'
argument_list|,
literal|"&larr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2191'
argument_list|,
literal|"&uarr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2192'
argument_list|,
literal|"&rarr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2193'
argument_list|,
literal|"&darr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2194'
argument_list|,
literal|"&harr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u21B5'
argument_list|,
literal|"&crarr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u21D0'
argument_list|,
literal|"&lArr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u21D1'
argument_list|,
literal|"&uArr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u21D2'
argument_list|,
literal|"&rArr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u21D3'
argument_list|,
literal|"&dArr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u21D4'
argument_list|,
literal|"&hArr;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2200'
argument_list|,
literal|"&forall;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2202'
argument_list|,
literal|"&part;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2203'
argument_list|,
literal|"&exist;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2205'
argument_list|,
literal|"&empty;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2207'
argument_list|,
literal|"&nabla;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2208'
argument_list|,
literal|"&isin;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2209'
argument_list|,
literal|"&notin;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u220B'
argument_list|,
literal|"&ni;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u220F'
argument_list|,
literal|"&prod;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2211'
argument_list|,
literal|"&sum;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2212'
argument_list|,
literal|"&minus;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2217'
argument_list|,
literal|"&lowast;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u221A'
argument_list|,
literal|"&radic;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u221D'
argument_list|,
literal|"&prop;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u221E'
argument_list|,
literal|"&infin;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2220'
argument_list|,
literal|"&ang;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2227'
argument_list|,
literal|"&and;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2228'
argument_list|,
literal|"&or;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2229'
argument_list|,
literal|"&cap;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u222A'
argument_list|,
literal|"&cup;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u222B'
argument_list|,
literal|"&int;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2234'
argument_list|,
literal|"&there4;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u223C'
argument_list|,
literal|"&sim;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2245'
argument_list|,
literal|"&cong;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2248'
argument_list|,
literal|"&asymp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2260'
argument_list|,
literal|"&ne;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2261'
argument_list|,
literal|"&equiv;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2264'
argument_list|,
literal|"&le;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2265'
argument_list|,
literal|"&ge;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2282'
argument_list|,
literal|"&sub;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2283'
argument_list|,
literal|"&sup;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2284'
argument_list|,
literal|"&nsub;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2286'
argument_list|,
literal|"&sube;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2287'
argument_list|,
literal|"&supe;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2295'
argument_list|,
literal|"&oplus;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2297'
argument_list|,
literal|"&otimes;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u22A5'
argument_list|,
literal|"&perp;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u22C5'
argument_list|,
literal|"&sdot;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2308'
argument_list|,
literal|"&lceil;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2309'
argument_list|,
literal|"&rceil;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u230A'
argument_list|,
literal|"&lfloor;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u230B'
argument_list|,
literal|"&rfloor;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2329'
argument_list|,
literal|"&lang;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u232A'
argument_list|,
literal|"&rang;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u25CA'
argument_list|,
literal|"&loz;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2660'
argument_list|,
literal|"&spades;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2663'
argument_list|,
literal|"&clubs;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2665'
argument_list|,
literal|"&hearts;"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|'\u2666'
argument_list|,
literal|"&diams;"
argument_list|)
expr_stmt|;
name|replacementMap
operator|=
name|ArrayBasedEscaperMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|field|HTML_CHAR_ESCAPER
specifier|public
specifier|static
specifier|final
name|HtmlCharEscaper
name|HTML_CHAR_ESCAPER
init|=
operator|new
name|HtmlCharEscaper
argument_list|(
name|replacementMap
argument_list|)
decl_stmt|;
DECL|field|HTML_UNICODE_ESCAPER
specifier|public
specifier|static
specifier|final
name|HtmlContentEscaper
name|HTML_UNICODE_ESCAPER
init|=
operator|new
name|HtmlContentEscaper
argument_list|(
name|replacementMap
argument_list|)
decl_stmt|;
block|}
comment|/**    * Returns an {@link Escaper} instance that escapes special characters in a    * string so it can safely be included in an HTML document in either element    * content or attribute values. This escaper only escapes the following five    * ASCII characters {@code '"&<>}.    *    *<p><b>Note</b>: This escaper only performs minimal escaping to make content    * structurally compatible with HTML. Specifically it does not perform entity    * replacement (symbolic or numeric) and will output non-ASCII characters.    */
DECL|method|htmlContentEscaper ()
specifier|public
specifier|static
name|CharEscaper
name|htmlContentEscaper
parameter_list|()
block|{
comment|// TODO(user): Update callers and return Escaper (remove cast below).
return|return
name|HTML_CONTENT_ESCAPER
return|;
block|}
DECL|field|HTML_CONTENT_ESCAPER
specifier|private
specifier|static
specifier|final
name|CharEscaper
name|HTML_CONTENT_ESCAPER
init|=
operator|(
name|CharEscaper
operator|)
name|Escapers
operator|.
name|builder
argument_list|()
operator|.
name|addEscape
argument_list|(
literal|'"'
argument_list|,
literal|"&quot;"
argument_list|)
comment|// Note: "&apos;" is not defined in HTML 4.01.
operator|.
name|addEscape
argument_list|(
literal|'\''
argument_list|,
literal|"&#39;"
argument_list|)
operator|.
name|addEscape
argument_list|(
literal|'&'
argument_list|,
literal|"&amp;"
argument_list|)
operator|.
name|addEscape
argument_list|(
literal|'<'
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|addEscape
argument_list|(
literal|'>'
argument_list|,
literal|"&gt;"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|class|HtmlCharEscaper
specifier|private
specifier|static
class|class
name|HtmlCharEscaper
extends|extends
name|ArrayBasedCharEscaper
block|{
DECL|method|HtmlCharEscaper (ArrayBasedEscaperMap replacementMap)
specifier|public
name|HtmlCharEscaper
parameter_list|(
name|ArrayBasedEscaperMap
name|replacementMap
parameter_list|)
block|{
name|super
argument_list|(
name|replacementMap
argument_list|,
name|Character
operator|.
name|MIN_VALUE
argument_list|,
literal|'~'
argument_list|)
expr_stmt|;
block|}
DECL|method|escapeUnsafe (char c)
annotation|@
name|Override
specifier|protected
name|char
index|[]
name|escapeUnsafe
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|escapeDecimal
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
DECL|class|HtmlContentEscaper
specifier|private
specifier|static
class|class
name|HtmlContentEscaper
extends|extends
name|ArrayBasedUnicodeEscaper
block|{
DECL|method|HtmlContentEscaper (ArrayBasedEscaperMap replacementMap)
specifier|public
name|HtmlContentEscaper
parameter_list|(
name|ArrayBasedEscaperMap
name|replacementMap
parameter_list|)
block|{
name|super
argument_list|(
name|replacementMap
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|'~'
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|escapeUnsafe (int cp)
annotation|@
name|Override
specifier|protected
name|char
index|[]
name|escapeUnsafe
parameter_list|(
name|int
name|cp
parameter_list|)
block|{
return|return
name|escapeDecimal
argument_list|(
name|cp
argument_list|)
return|;
block|}
block|}
comment|// Escapes the given character or code point value as an HTML decimal escape
comment|// sequence of the form {@code&#nnnn;} with up to 7 decimal digits.
comment|// The given values must be in the range [0x7F, 0x10FFFF].
comment|// While the output is the same as String.valueOf(value).toCharArray(), this
comment|// implementation is designed to be high-performance and minimize allocations.
DECL|method|escapeDecimal (int value)
specifier|private
specifier|static
name|char
index|[]
name|escapeDecimal
parameter_list|(
name|int
name|value
parameter_list|)
block|{
comment|// Calculate the index in the output array of the units column of the value.
name|int
name|unitsIndex
decl_stmt|;
comment|// Converting to decimal is a pain but (as of 06/2009) not all supported
comment|// browsers cope with the hex representation&#xhhhh;
if|if
condition|(
name|value
operator|<
literal|10000
condition|)
block|{
comment|// 3 and 4 length decimal sequences
name|unitsIndex
operator|=
operator|(
name|value
operator|<
literal|1000
operator|)
condition|?
literal|4
else|:
literal|5
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|<
literal|1000000
condition|)
block|{
comment|// 5 and 6 length decimal sequences
name|unitsIndex
operator|=
operator|(
name|value
operator|<
literal|100000
operator|)
condition|?
literal|6
else|:
literal|7
expr_stmt|;
block|}
else|else
block|{
comment|// 7 length decimal sequences
name|unitsIndex
operator|=
literal|8
expr_stmt|;
block|}
comment|// Leave space for the ';' that follows after the units column.
name|char
index|[]
name|result
init|=
operator|new
name|char
index|[
name|unitsIndex
operator|+
literal|2
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
literal|'&'
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
literal|'#'
expr_stmt|;
name|result
index|[
name|unitsIndex
operator|+
literal|1
index|]
operator|=
literal|';'
expr_stmt|;
comment|// Loop in reverse to actually output the characters.
for|for
control|(
init|;
name|unitsIndex
operator|>
literal|1
condition|;
name|unitsIndex
operator|--
control|)
block|{
name|result
index|[
name|unitsIndex
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
operator|(
name|value
operator|%
literal|10
operator|)
argument_list|)
expr_stmt|;
name|value
operator|/=
literal|10
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

