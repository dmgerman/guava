begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_comment
comment|/**  * Funnels for common types. All implementations are serializable.  *   * @author Dimitris Andreou  * @since 11.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|Funnels
specifier|public
specifier|final
class|class
name|Funnels
block|{
DECL|method|Funnels ()
specifier|private
name|Funnels
parameter_list|()
block|{}
comment|/**    * Returns a funnel that extracts the bytes from a {@code byte} array.    */
DECL|method|byteArrayFunnel ()
specifier|public
specifier|static
name|Funnel
argument_list|<
name|byte
index|[]
argument_list|>
name|byteArrayFunnel
parameter_list|()
block|{
return|return
name|ByteArrayFunnel
operator|.
name|INSTANCE
return|;
block|}
DECL|enum|ByteArrayFunnel
specifier|private
enum|enum
name|ByteArrayFunnel
implements|implements
name|Funnel
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|method|funnel (byte[] from, Sink into)
specifier|public
name|void
name|funnel
parameter_list|(
name|byte
index|[]
name|from
parameter_list|,
name|Sink
name|into
parameter_list|)
block|{
name|into
operator|.
name|putBytes
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Funnels.byteArrayFunnel()"
return|;
block|}
block|}
comment|/**    * Returns a funnel that extracts the characters from a {@code CharSequence}.    */
DECL|method|stringFunnel ()
specifier|public
specifier|static
name|Funnel
argument_list|<
name|CharSequence
argument_list|>
name|stringFunnel
parameter_list|()
block|{
return|return
name|StringFunnel
operator|.
name|INSTANCE
return|;
block|}
DECL|enum|StringFunnel
specifier|private
enum|enum
name|StringFunnel
implements|implements
name|Funnel
argument_list|<
name|CharSequence
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|method|funnel (CharSequence from, Sink into)
specifier|public
name|void
name|funnel
parameter_list|(
name|CharSequence
name|from
parameter_list|,
name|Sink
name|into
parameter_list|)
block|{
name|into
operator|.
name|putString
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Funnels.stringFunnel()"
return|;
block|}
block|}
block|}
end_class

end_unit

