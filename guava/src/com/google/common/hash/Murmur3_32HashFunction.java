begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_comment
comment|/*  * MurmurHash3 was written by Austin Appleby, and is placed in the public  * domain. The author hereby disclaims copyright to this source code.  */
end_comment

begin_comment
comment|/*  * Source:  * http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp  * (Modified to adapt to Guava coding conventions and to use the HashFunction interface)  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedBytes
operator|.
name|toInt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Chars
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * See http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp  * MurmurHash3_x86_32  *  * @author Austin Appleby  * @author Dimitris Andreou  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|Murmur3_32HashFunction
specifier|final
class|class
name|Murmur3_32HashFunction
extends|extends
name|AbstractStreamingHashFunction
implements|implements
name|Serializable
block|{
DECL|field|C1
specifier|private
specifier|static
specifier|final
name|int
name|C1
init|=
literal|0xcc9e2d51
decl_stmt|;
DECL|field|C2
specifier|private
specifier|static
specifier|final
name|int
name|C2
init|=
literal|0x1b873593
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|int
name|seed
decl_stmt|;
DECL|method|Murmur3_32HashFunction (int seed)
name|Murmur3_32HashFunction
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
literal|32
return|;
block|}
DECL|method|newHasher ()
annotation|@
name|Override
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
return|return
operator|new
name|Murmur3_32Hasher
argument_list|(
name|seed
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Hashing.murmur3_32("
operator|+
name|seed
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Murmur3_32HashFunction
condition|)
block|{
name|Murmur3_32HashFunction
name|other
init|=
operator|(
name|Murmur3_32HashFunction
operator|)
name|object
decl_stmt|;
return|return
name|seed
operator|==
name|other
operator|.
name|seed
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|seed
return|;
block|}
DECL|method|hashInt (int input)
annotation|@
name|Override
specifier|public
name|HashCode
name|hashInt
parameter_list|(
name|int
name|input
parameter_list|)
block|{
name|int
name|k1
init|=
name|mixK1
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|int
name|h1
init|=
name|mixH1
argument_list|(
name|seed
argument_list|,
name|k1
argument_list|)
decl_stmt|;
return|return
name|fmix
argument_list|(
name|h1
argument_list|,
name|Ints
operator|.
name|BYTES
argument_list|)
return|;
block|}
DECL|method|hashLong (long input)
annotation|@
name|Override
specifier|public
name|HashCode
name|hashLong
parameter_list|(
name|long
name|input
parameter_list|)
block|{
name|int
name|low
init|=
operator|(
name|int
operator|)
name|input
decl_stmt|;
name|int
name|high
init|=
call|(
name|int
call|)
argument_list|(
name|input
operator|>>>
literal|32
argument_list|)
decl_stmt|;
name|int
name|k1
init|=
name|mixK1
argument_list|(
name|low
argument_list|)
decl_stmt|;
name|int
name|h1
init|=
name|mixH1
argument_list|(
name|seed
argument_list|,
name|k1
argument_list|)
decl_stmt|;
name|k1
operator|=
name|mixK1
argument_list|(
name|high
argument_list|)
expr_stmt|;
name|h1
operator|=
name|mixH1
argument_list|(
name|h1
argument_list|,
name|k1
argument_list|)
expr_stmt|;
return|return
name|fmix
argument_list|(
name|h1
argument_list|,
name|Longs
operator|.
name|BYTES
argument_list|)
return|;
block|}
comment|// TODO(kak): Maybe implement #hashBytes instead?
DECL|method|hashUnencodedChars (CharSequence input)
annotation|@
name|Override
specifier|public
name|HashCode
name|hashUnencodedChars
parameter_list|(
name|CharSequence
name|input
parameter_list|)
block|{
name|int
name|h1
init|=
name|seed
decl_stmt|;
comment|// step through the CharSequence 2 chars at a time
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|int
name|k1
init|=
name|input
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator||
operator|(
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|<<
literal|16
operator|)
decl_stmt|;
name|k1
operator|=
name|mixK1
argument_list|(
name|k1
argument_list|)
expr_stmt|;
name|h1
operator|=
name|mixH1
argument_list|(
name|h1
argument_list|,
name|k1
argument_list|)
expr_stmt|;
block|}
comment|// deal with any remaining characters
if|if
condition|(
operator|(
name|input
operator|.
name|length
argument_list|()
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|int
name|k1
init|=
name|input
operator|.
name|charAt
argument_list|(
name|input
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|k1
operator|=
name|mixK1
argument_list|(
name|k1
argument_list|)
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
return|return
name|fmix
argument_list|(
name|h1
argument_list|,
name|Chars
operator|.
name|BYTES
operator|*
name|input
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mixK1 (int k1)
specifier|private
specifier|static
name|int
name|mixK1
parameter_list|(
name|int
name|k1
parameter_list|)
block|{
name|k1
operator|*=
name|C1
expr_stmt|;
name|k1
operator|=
name|Integer
operator|.
name|rotateLeft
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|C2
expr_stmt|;
return|return
name|k1
return|;
block|}
DECL|method|mixH1 (int h1, int k1)
specifier|private
specifier|static
name|int
name|mixH1
parameter_list|(
name|int
name|h1
parameter_list|,
name|int
name|k1
parameter_list|)
block|{
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|Integer
operator|.
name|rotateLeft
argument_list|(
name|h1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0xe6546b64
expr_stmt|;
return|return
name|h1
return|;
block|}
comment|// Finalization mix - force all bits of a hash block to avalanche
DECL|method|fmix (int h1, int length)
specifier|private
specifier|static
name|HashCode
name|fmix
parameter_list|(
name|int
name|h1
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|h1
operator|^=
name|length
expr_stmt|;
name|h1
operator|^=
name|h1
operator|>>>
literal|16
expr_stmt|;
name|h1
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|h1
operator|^=
name|h1
operator|>>>
literal|13
expr_stmt|;
name|h1
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|h1
operator|^=
name|h1
operator|>>>
literal|16
expr_stmt|;
return|return
name|HashCode
operator|.
name|fromInt
argument_list|(
name|h1
argument_list|)
return|;
block|}
DECL|class|Murmur3_32Hasher
specifier|private
specifier|static
specifier|final
class|class
name|Murmur3_32Hasher
extends|extends
name|AbstractStreamingHasher
block|{
DECL|field|CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|4
decl_stmt|;
DECL|field|h1
specifier|private
name|int
name|h1
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|method|Murmur3_32Hasher (int seed)
name|Murmur3_32Hasher
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|super
argument_list|(
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|h1
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|process (ByteBuffer bb)
annotation|@
name|Override
specifier|protected
name|void
name|process
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|int
name|k1
init|=
name|Murmur3_32HashFunction
operator|.
name|mixK1
argument_list|(
name|bb
operator|.
name|getInt
argument_list|()
argument_list|)
decl_stmt|;
name|h1
operator|=
name|Murmur3_32HashFunction
operator|.
name|mixH1
argument_list|(
name|h1
argument_list|,
name|k1
argument_list|)
expr_stmt|;
name|length
operator|+=
name|CHUNK_SIZE
expr_stmt|;
block|}
DECL|method|processRemaining (ByteBuffer bb)
annotation|@
name|Override
specifier|protected
name|void
name|processRemaining
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|length
operator|+=
name|bb
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|int
name|k1
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|bb
operator|.
name|hasRemaining
argument_list|()
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|k1
operator|^=
name|toInt
argument_list|(
name|bb
operator|.
name|get
argument_list|()
argument_list|)
operator|<<
name|i
expr_stmt|;
block|}
name|h1
operator|^=
name|Murmur3_32HashFunction
operator|.
name|mixK1
argument_list|(
name|k1
argument_list|)
expr_stmt|;
block|}
DECL|method|makeHash ()
annotation|@
name|Override
specifier|public
name|HashCode
name|makeHash
parameter_list|()
block|{
return|return
name|Murmur3_32HashFunction
operator|.
name|fmix
argument_list|(
name|h1
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
end_class

end_unit

