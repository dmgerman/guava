begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedBytes
operator|.
name|toInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * See http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp  * MurmurHash3_x86_32  *  * @author Austin Appleby  * @author Dimitris Andreou  */
end_comment

begin_class
DECL|class|Murmur3_32HashFunction
specifier|final
class|class
name|Murmur3_32HashFunction
extends|extends
name|AbstractStreamingHashFunction
implements|implements
name|Serializable
block|{
DECL|field|seed
specifier|private
specifier|final
name|int
name|seed
decl_stmt|;
DECL|method|Murmur3_32HashFunction (int seed)
name|Murmur3_32HashFunction
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
literal|32
return|;
block|}
DECL|method|newHasher ()
annotation|@
name|Override
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
return|return
operator|new
name|Murmur3_32Hasher
argument_list|(
name|seed
argument_list|)
return|;
block|}
DECL|class|Murmur3_32Hasher
specifier|private
specifier|static
specifier|final
class|class
name|Murmur3_32Hasher
extends|extends
name|AbstractStreamingHasher
block|{
DECL|field|h1
name|int
name|h1
decl_stmt|;
DECL|field|c1
name|int
name|c1
init|=
literal|0xcc9e2d51
decl_stmt|;
DECL|field|c2
name|int
name|c2
init|=
literal|0x1b873593
decl_stmt|;
DECL|field|len
name|int
name|len
decl_stmt|;
DECL|method|Murmur3_32Hasher (int seed)
name|Murmur3_32Hasher
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|super
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|h1
operator|=
name|seed
expr_stmt|;
block|}
DECL|method|process (ByteBuffer bb)
annotation|@
name|Override
specifier|protected
name|void
name|process
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|int
name|k1
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|len
operator|+=
literal|4
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|Integer
operator|.
name|rotateLeft
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|Integer
operator|.
name|rotateLeft
argument_list|(
name|h1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0xe6546b64
expr_stmt|;
block|}
DECL|method|processRemaining (ByteBuffer bb)
annotation|@
name|Override
specifier|protected
name|void
name|processRemaining
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|len
operator|+=
name|bb
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|int
name|k1
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|bb
operator|.
name|remaining
argument_list|()
condition|)
block|{
case|case
literal|3
case|:
name|k1
operator|^=
name|toInt
argument_list|(
name|bb
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|<<
literal|16
expr_stmt|;
comment|// fall through
case|case
literal|2
case|:
name|k1
operator|^=
name|toInt
argument_list|(
name|bb
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
literal|8
expr_stmt|;
comment|// fall through
case|case
literal|1
case|:
name|k1
operator|^=
name|toInt
argument_list|(
name|bb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// fall through
default|default:
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|Integer
operator|.
name|rotateLeft
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
block|}
DECL|method|makeHash ()
annotation|@
name|Override
specifier|public
name|HashCode
name|makeHash
parameter_list|()
block|{
name|h1
operator|^=
name|len
expr_stmt|;
name|h1
operator|^=
name|h1
operator|>>>
literal|16
expr_stmt|;
name|h1
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|h1
operator|^=
name|h1
operator|>>>
literal|13
expr_stmt|;
name|h1
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|h1
operator|^=
name|h1
operator|>>>
literal|16
expr_stmt|;
return|return
name|HashCodes
operator|.
name|fromInt
argument_list|(
name|h1
argument_list|)
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
end_class

end_unit

