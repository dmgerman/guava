begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedBytes
import|;
end_import

begin_comment
comment|/**  * This implements CRC8 ATM HES.  * According to specification, Polynomial = 0x07, initial = 0, output XOR = 0x55.  * Ported from http://code.google.com/p/rlz/source/browse/trunk/lib/crc8.cc  *  * @author Nicholas Yu  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|Crc8HashFunction
specifier|final
class|class
name|Crc8HashFunction
extends|extends
name|AbstractStreamingHashFunction
block|{
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
annotation|@
name|Override
DECL|method|newHasher ()
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
return|return
operator|new
name|Crc8Hasher
argument_list|()
return|;
block|}
DECL|class|Crc8Hasher
specifier|private
specifier|static
specifier|final
class|class
name|Crc8Hasher
extends|extends
name|AbstractByteHasher
block|{
DECL|field|FINAL_VAL
specifier|private
specifier|static
specifier|final
name|int
name|FINAL_VAL
init|=
literal|0x55
decl_stmt|;
DECL|field|CRC_TABLE
specifier|private
specifier|static
specifier|final
name|int
name|CRC_TABLE
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x07
block|,
literal|0x0E
block|,
literal|0x09
block|,
literal|0x1C
block|,
literal|0x1B
block|,
literal|0x12
block|,
literal|0x15
block|,
literal|0x38
block|,
literal|0x3F
block|,
literal|0x36
block|,
literal|0x31
block|,
literal|0x24
block|,
literal|0x23
block|,
literal|0x2A
block|,
literal|0x2D
block|,
literal|0x70
block|,
literal|0x77
block|,
literal|0x7E
block|,
literal|0x79
block|,
literal|0x6C
block|,
literal|0x6B
block|,
literal|0x62
block|,
literal|0x65
block|,
literal|0x48
block|,
literal|0x4F
block|,
literal|0x46
block|,
literal|0x41
block|,
literal|0x54
block|,
literal|0x53
block|,
literal|0x5A
block|,
literal|0x5D
block|,
literal|0xE0
block|,
literal|0xE7
block|,
literal|0xEE
block|,
literal|0xE9
block|,
literal|0xFC
block|,
literal|0xFB
block|,
literal|0xF2
block|,
literal|0xF5
block|,
literal|0xD8
block|,
literal|0xDF
block|,
literal|0xD6
block|,
literal|0xD1
block|,
literal|0xC4
block|,
literal|0xC3
block|,
literal|0xCA
block|,
literal|0xCD
block|,
literal|0x90
block|,
literal|0x97
block|,
literal|0x9E
block|,
literal|0x99
block|,
literal|0x8C
block|,
literal|0x8B
block|,
literal|0x82
block|,
literal|0x85
block|,
literal|0xA8
block|,
literal|0xAF
block|,
literal|0xA6
block|,
literal|0xA1
block|,
literal|0xB4
block|,
literal|0xB3
block|,
literal|0xBA
block|,
literal|0xBD
block|,
literal|0xC7
block|,
literal|0xC0
block|,
literal|0xC9
block|,
literal|0xCE
block|,
literal|0xDB
block|,
literal|0xDC
block|,
literal|0xD5
block|,
literal|0xD2
block|,
literal|0xFF
block|,
literal|0xF8
block|,
literal|0xF1
block|,
literal|0xF6
block|,
literal|0xE3
block|,
literal|0xE4
block|,
literal|0xED
block|,
literal|0xEA
block|,
literal|0xB7
block|,
literal|0xB0
block|,
literal|0xB9
block|,
literal|0xBE
block|,
literal|0xAB
block|,
literal|0xAC
block|,
literal|0xA5
block|,
literal|0xA2
block|,
literal|0x8F
block|,
literal|0x88
block|,
literal|0x81
block|,
literal|0x86
block|,
literal|0x93
block|,
literal|0x94
block|,
literal|0x9D
block|,
literal|0x9A
block|,
literal|0x27
block|,
literal|0x20
block|,
literal|0x29
block|,
literal|0x2E
block|,
literal|0x3B
block|,
literal|0x3C
block|,
literal|0x35
block|,
literal|0x32
block|,
literal|0x1F
block|,
literal|0x18
block|,
literal|0x11
block|,
literal|0x16
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x0D
block|,
literal|0x0A
block|,
literal|0x57
block|,
literal|0x50
block|,
literal|0x59
block|,
literal|0x5E
block|,
literal|0x4B
block|,
literal|0x4C
block|,
literal|0x45
block|,
literal|0x42
block|,
literal|0x6F
block|,
literal|0x68
block|,
literal|0x61
block|,
literal|0x66
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x7D
block|,
literal|0x7A
block|,
literal|0x89
block|,
literal|0x8E
block|,
literal|0x87
block|,
literal|0x80
block|,
literal|0x95
block|,
literal|0x92
block|,
literal|0x9B
block|,
literal|0x9C
block|,
literal|0xB1
block|,
literal|0xB6
block|,
literal|0xBF
block|,
literal|0xB8
block|,
literal|0xAD
block|,
literal|0xAA
block|,
literal|0xA3
block|,
literal|0xA4
block|,
literal|0xF9
block|,
literal|0xFE
block|,
literal|0xF7
block|,
literal|0xF0
block|,
literal|0xE5
block|,
literal|0xE2
block|,
literal|0xEB
block|,
literal|0xEC
block|,
literal|0xC1
block|,
literal|0xC6
block|,
literal|0xCF
block|,
literal|0xC8
block|,
literal|0xDD
block|,
literal|0xDA
block|,
literal|0xD3
block|,
literal|0xD4
block|,
literal|0x69
block|,
literal|0x6E
block|,
literal|0x67
block|,
literal|0x60
block|,
literal|0x75
block|,
literal|0x72
block|,
literal|0x7B
block|,
literal|0x7C
block|,
literal|0x51
block|,
literal|0x56
block|,
literal|0x5F
block|,
literal|0x58
block|,
literal|0x4D
block|,
literal|0x4A
block|,
literal|0x43
block|,
literal|0x44
block|,
literal|0x19
block|,
literal|0x1E
block|,
literal|0x17
block|,
literal|0x10
block|,
literal|0x05
block|,
literal|0x02
block|,
literal|0x0B
block|,
literal|0x0C
block|,
literal|0x21
block|,
literal|0x26
block|,
literal|0x2F
block|,
literal|0x28
block|,
literal|0x3D
block|,
literal|0x3A
block|,
literal|0x33
block|,
literal|0x34
block|,
literal|0x4E
block|,
literal|0x49
block|,
literal|0x40
block|,
literal|0x47
block|,
literal|0x52
block|,
literal|0x55
block|,
literal|0x5C
block|,
literal|0x5B
block|,
literal|0x76
block|,
literal|0x71
block|,
literal|0x78
block|,
literal|0x7F
block|,
literal|0x6A
block|,
literal|0x6D
block|,
literal|0x64
block|,
literal|0x63
block|,
literal|0x3E
block|,
literal|0x39
block|,
literal|0x30
block|,
literal|0x37
block|,
literal|0x22
block|,
literal|0x25
block|,
literal|0x2C
block|,
literal|0x2B
block|,
literal|0x06
block|,
literal|0x01
block|,
literal|0x08
block|,
literal|0x0F
block|,
literal|0x1A
block|,
literal|0x1D
block|,
literal|0x14
block|,
literal|0x13
block|,
literal|0xAE
block|,
literal|0xA9
block|,
literal|0xA0
block|,
literal|0xA7
block|,
literal|0xB2
block|,
literal|0xB5
block|,
literal|0xBC
block|,
literal|0xBB
block|,
literal|0x96
block|,
literal|0x91
block|,
literal|0x98
block|,
literal|0x9F
block|,
literal|0x8A
block|,
literal|0x8D
block|,
literal|0x84
block|,
literal|0x83
block|,
literal|0xDE
block|,
literal|0xD9
block|,
literal|0xD0
block|,
literal|0xD7
block|,
literal|0xC2
block|,
literal|0xC5
block|,
literal|0xCC
block|,
literal|0xCB
block|,
literal|0xE6
block|,
literal|0xE1
block|,
literal|0xE8
block|,
literal|0xEF
block|,
literal|0xFA
block|,
literal|0xFD
block|,
literal|0xF4
block|,
literal|0xF3
block|}
decl_stmt|;
DECL|field|crc
specifier|private
name|int
name|crc
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|update (byte b)
specifier|public
name|void
name|update
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|crc
operator|=
name|CRC_TABLE
index|[
name|UnsignedBytes
operator|.
name|toInt
argument_list|(
name|b
argument_list|)
operator|^
name|crc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash ()
specifier|public
name|HashCode
name|hash
parameter_list|()
block|{
return|return
name|HashCodes
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|crc
operator|^
name|FINAL_VAL
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

