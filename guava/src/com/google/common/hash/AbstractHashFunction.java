begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  * Skeleton implementation of {@link HashFunction} in terms of {@link #newHasher()}.  *  *<p>TODO(lowasser): make public  */
end_comment

begin_class
DECL|class|AbstractHashFunction
specifier|abstract
class|class
name|AbstractHashFunction
implements|implements
name|HashFunction
block|{
annotation|@
name|Override
DECL|method|hashObject (T instance, Funnel<? super T> funnel)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|HashCode
name|hashObject
parameter_list|(
name|T
name|instance
parameter_list|,
name|Funnel
argument_list|<
name|?
super|super
name|T
argument_list|>
name|funnel
parameter_list|)
block|{
return|return
name|newHasher
argument_list|()
operator|.
name|putObject
argument_list|(
name|instance
argument_list|,
name|funnel
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashUnencodedChars (CharSequence input)
specifier|public
name|HashCode
name|hashUnencodedChars
parameter_list|(
name|CharSequence
name|input
parameter_list|)
block|{
name|int
name|len
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|newHasher
argument_list|(
name|len
operator|*
literal|2
argument_list|)
operator|.
name|putUnencodedChars
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashString (CharSequence input, Charset charset)
specifier|public
name|HashCode
name|hashString
parameter_list|(
name|CharSequence
name|input
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
return|return
name|newHasher
argument_list|()
operator|.
name|putString
argument_list|(
name|input
argument_list|,
name|charset
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashInt (int input)
specifier|public
name|HashCode
name|hashInt
parameter_list|(
name|int
name|input
parameter_list|)
block|{
return|return
name|newHasher
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashLong (long input)
specifier|public
name|HashCode
name|hashLong
parameter_list|(
name|long
name|input
parameter_list|)
block|{
return|return
name|newHasher
argument_list|(
literal|8
argument_list|)
operator|.
name|putLong
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashBytes (byte[] input)
specifier|public
name|HashCode
name|hashBytes
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
block|{
return|return
name|hashBytes
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|input
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashBytes (byte[] input, int off, int len)
specifier|public
name|HashCode
name|hashBytes
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|input
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newHasher
argument_list|(
name|len
argument_list|)
operator|.
name|putBytes
argument_list|(
name|input
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashBytes (ByteBuffer input)
specifier|public
name|HashCode
name|hashBytes
parameter_list|(
name|ByteBuffer
name|input
parameter_list|)
block|{
return|return
name|newHasher
argument_list|(
name|input
operator|.
name|remaining
argument_list|()
argument_list|)
operator|.
name|putBytes
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newHasher (int expectedInputSize)
specifier|public
name|Hasher
name|newHasher
parameter_list|(
name|int
name|expectedInputSize
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|expectedInputSize
operator|>=
literal|0
argument_list|,
literal|"expectedInputSize must be>= 0 but was %s"
argument_list|,
name|expectedInputSize
argument_list|)
expr_stmt|;
return|return
name|newHasher
argument_list|()
return|;
block|}
block|}
end_class

end_unit

