begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_comment
comment|/*  * SipHash-c-d was designed by Jean-Philippe Aumasson and Daniel J. Bernstein and is described in  * "SipHash: a fast short-input PRF" (available at https://131002.net/siphash/siphash.pdf).  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * {@link HashFunction} implementation of SipHash-c-d.  *  * @author Kurt Alfred Kluever  * @author Jean-Philippe Aumasson  * @author Daniel J. Bernstein  */
end_comment

begin_class
DECL|class|SipHashFunction
specifier|final
class|class
name|SipHashFunction
extends|extends
name|AbstractStreamingHashFunction
implements|implements
name|Serializable
block|{
comment|// The number of compression rounds.
DECL|field|c
specifier|private
specifier|final
name|int
name|c
decl_stmt|;
comment|// The number of finalization rounds.
DECL|field|d
specifier|private
specifier|final
name|int
name|d
decl_stmt|;
comment|// Two 64-bit keys (represent a single 128-bit key).
DECL|field|k0
specifier|private
specifier|final
name|long
name|k0
decl_stmt|;
DECL|field|k1
specifier|private
specifier|final
name|long
name|k1
decl_stmt|;
comment|/**    * @param c the number of compression rounds (must be positive)    * @param d the number of finalization rounds (must be positive)    * @param k0 the first half of the key    * @param k1 the second half of the key    */
DECL|method|SipHashFunction (int c, int d, long k0, long k1)
name|SipHashFunction
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|d
parameter_list|,
name|long
name|k0
parameter_list|,
name|long
name|k1
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|c
operator|>
literal|0
argument_list|,
literal|"The number of SipRound iterations (c=%s) during Compression must be positive."
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|d
operator|>
literal|0
argument_list|,
literal|"The number of SipRound iterations (d=%s) during Finalization must be positive."
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|d
operator|=
name|d
expr_stmt|;
name|this
operator|.
name|k0
operator|=
name|k0
expr_stmt|;
name|this
operator|.
name|k1
operator|=
name|k1
expr_stmt|;
block|}
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
DECL|method|newHasher ()
annotation|@
name|Override
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
return|return
operator|new
name|SipHasher
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|k0
argument_list|,
name|k1
argument_list|)
return|;
block|}
comment|// TODO(kak): Implement and benchmark the hashFoo() shortcuts.
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Hashing.sipHash"
operator|+
name|c
operator|+
literal|""
operator|+
name|d
operator|+
literal|"("
operator|+
name|k0
operator|+
literal|", "
operator|+
name|k1
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|SipHashFunction
condition|)
block|{
name|SipHashFunction
name|other
init|=
operator|(
name|SipHashFunction
operator|)
name|object
decl_stmt|;
return|return
operator|(
name|c
operator|==
name|other
operator|.
name|c
operator|)
operator|&&
operator|(
name|d
operator|==
name|other
operator|.
name|d
operator|)
operator|&&
operator|(
name|k0
operator|==
name|other
operator|.
name|k0
operator|)
operator|&&
operator|(
name|k1
operator|==
name|other
operator|.
name|k1
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|c
operator|^
name|d
operator|^
name|k0
operator|^
name|k1
argument_list|)
return|;
block|}
DECL|class|SipHasher
specifier|private
specifier|static
specifier|final
class|class
name|SipHasher
extends|extends
name|AbstractStreamingHasher
block|{
DECL|field|CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|8
decl_stmt|;
comment|// The number of compression rounds.
DECL|field|c
specifier|private
specifier|final
name|int
name|c
decl_stmt|;
comment|// The number of finalization rounds.
DECL|field|d
specifier|private
specifier|final
name|int
name|d
decl_stmt|;
comment|// Four 64-bit words of internal state.
comment|// The initial state corresponds to the ASCII string "somepseudorandomlygeneratedbytes",
comment|// big-endian encoded. There is nothing special about this value; the only requirement
comment|// was some asymmetry so that the initial v0 and v1 differ from v2 and v3.
DECL|field|v0
specifier|private
name|long
name|v0
init|=
literal|0x736f6d6570736575L
decl_stmt|;
DECL|field|v1
specifier|private
name|long
name|v1
init|=
literal|0x646f72616e646f6dL
decl_stmt|;
DECL|field|v2
specifier|private
name|long
name|v2
init|=
literal|0x6c7967656e657261L
decl_stmt|;
DECL|field|v3
specifier|private
name|long
name|v3
init|=
literal|0x7465646279746573L
decl_stmt|;
comment|// The number of bytes in the input.
DECL|field|b
specifier|private
name|long
name|b
init|=
literal|0
decl_stmt|;
comment|// The final 64-bit chunk includes the last 0 through 7 bytes of m followed by null bytes
comment|// and ending with a byte encoding the positive integer b mod 256.
DECL|field|finalM
specifier|private
name|long
name|finalM
init|=
literal|0
decl_stmt|;
DECL|method|SipHasher (int c, int d, long k0, long k1)
name|SipHasher
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|d
parameter_list|,
name|long
name|k0
parameter_list|,
name|long
name|k1
parameter_list|)
block|{
name|super
argument_list|(
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|d
operator|=
name|d
expr_stmt|;
name|this
operator|.
name|v0
operator|^=
name|k0
expr_stmt|;
name|this
operator|.
name|v1
operator|^=
name|k1
expr_stmt|;
name|this
operator|.
name|v2
operator|^=
name|k0
expr_stmt|;
name|this
operator|.
name|v3
operator|^=
name|k1
expr_stmt|;
block|}
DECL|method|process (ByteBuffer buffer)
annotation|@
name|Override
specifier|protected
name|void
name|process
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|b
operator|+=
name|CHUNK_SIZE
expr_stmt|;
name|processM
argument_list|(
name|buffer
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processRemaining (ByteBuffer buffer)
annotation|@
name|Override
specifier|protected
name|void
name|processRemaining
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|b
operator|+=
name|buffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|finalM
operator|^=
operator|(
name|buffer
operator|.
name|get
argument_list|()
operator|&
literal|0xFFL
operator|)
operator|<<
name|i
expr_stmt|;
block|}
block|}
DECL|method|makeHash ()
annotation|@
name|Override
specifier|public
name|HashCode
name|makeHash
parameter_list|()
block|{
comment|// End with a byte encoding the positive integer b mod 256.
name|finalM
operator|^=
name|b
operator|<<
literal|56
expr_stmt|;
name|processM
argument_list|(
name|finalM
argument_list|)
expr_stmt|;
comment|// Finalization
name|v2
operator|^=
literal|0xFFL
expr_stmt|;
name|sipRound
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|HashCode
operator|.
name|fromLong
argument_list|(
name|v0
operator|^
name|v1
operator|^
name|v2
operator|^
name|v3
argument_list|)
return|;
block|}
DECL|method|processM (long m)
specifier|private
name|void
name|processM
parameter_list|(
name|long
name|m
parameter_list|)
block|{
name|v3
operator|^=
name|m
expr_stmt|;
name|sipRound
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|v0
operator|^=
name|m
expr_stmt|;
block|}
DECL|method|sipRound (int iterations)
specifier|private
name|void
name|sipRound
parameter_list|(
name|int
name|iterations
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|v0
operator|+=
name|v1
expr_stmt|;
name|v2
operator|+=
name|v3
expr_stmt|;
name|v1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|v3
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v3
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|v1
operator|^=
name|v0
expr_stmt|;
name|v3
operator|^=
name|v2
expr_stmt|;
name|v0
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v0
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|v2
operator|+=
name|v1
expr_stmt|;
name|v0
operator|+=
name|v3
expr_stmt|;
name|v1
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v1
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|v3
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v3
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|v1
operator|^=
name|v2
expr_stmt|;
name|v3
operator|^=
name|v0
expr_stmt|;
name|v2
operator|=
name|Long
operator|.
name|rotateLeft
argument_list|(
name|v2
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
end_class

end_unit

