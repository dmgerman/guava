begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Skeleton implementation of {@link HashFunction}, appropriate for non-streaming algorithms. All  * the hash computation done using {@linkplain #newHasher()} are delegated to the {@linkplain  * #hashBytes(byte[], int, int)} method.  *  * @author Dimitris Andreou  */
end_comment

begin_class
annotation|@
name|Immutable
DECL|class|AbstractNonStreamingHashFunction
specifier|abstract
class|class
name|AbstractNonStreamingHashFunction
extends|extends
name|AbstractHashFunction
block|{
annotation|@
name|Override
DECL|method|newHasher ()
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
return|return
name|newHasher
argument_list|(
literal|32
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newHasher (int expectedInputSize)
specifier|public
name|Hasher
name|newHasher
parameter_list|(
name|int
name|expectedInputSize
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expectedInputSize
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|BufferingHasher
argument_list|(
name|expectedInputSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashInt (int input)
specifier|public
name|HashCode
name|hashInt
parameter_list|(
name|int
name|input
parameter_list|)
block|{
return|return
name|hashBytes
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|putInt
argument_list|(
name|input
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashLong (long input)
specifier|public
name|HashCode
name|hashLong
parameter_list|(
name|long
name|input
parameter_list|)
block|{
return|return
name|hashBytes
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|putLong
argument_list|(
name|input
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashUnencodedChars (CharSequence input)
specifier|public
name|HashCode
name|hashUnencodedChars
parameter_list|(
name|CharSequence
name|input
parameter_list|)
block|{
name|int
name|len
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|len
operator|*
literal|2
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|putChar
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hashBytes
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashString (CharSequence input, Charset charset)
specifier|public
name|HashCode
name|hashString
parameter_list|(
name|CharSequence
name|input
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
return|return
name|hashBytes
argument_list|(
name|input
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashBytes (byte[] input, int off, int len)
specifier|public
specifier|abstract
name|HashCode
name|hashBytes
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashBytes (ByteBuffer input)
specifier|public
name|HashCode
name|hashBytes
parameter_list|(
name|ByteBuffer
name|input
parameter_list|)
block|{
return|return
name|newHasher
argument_list|(
name|input
operator|.
name|remaining
argument_list|()
argument_list|)
operator|.
name|putBytes
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
return|;
block|}
comment|/** In-memory stream-based implementation of Hasher. */
DECL|class|BufferingHasher
specifier|private
specifier|final
class|class
name|BufferingHasher
extends|extends
name|AbstractHasher
block|{
DECL|field|stream
specifier|final
name|ExposedByteArrayOutputStream
name|stream
decl_stmt|;
DECL|method|BufferingHasher (int expectedInputSize)
name|BufferingHasher
parameter_list|(
name|int
name|expectedInputSize
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
operator|new
name|ExposedByteArrayOutputStream
argument_list|(
name|expectedInputSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|putByte (byte b)
specifier|public
name|Hasher
name|putByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (byte[] bytes, int off, int len)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (ByteBuffer bytes)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|ByteBuffer
name|bytes
parameter_list|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hash ()
specifier|public
name|HashCode
name|hash
parameter_list|()
block|{
return|return
name|hashBytes
argument_list|(
name|stream
operator|.
name|byteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|stream
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// Just to access the byte[] without introducing an unnecessary copy
DECL|class|ExposedByteArrayOutputStream
specifier|private
specifier|static
specifier|final
class|class
name|ExposedByteArrayOutputStream
extends|extends
name|ByteArrayOutputStream
block|{
DECL|method|ExposedByteArrayOutputStream (int expectedInputSize)
name|ExposedByteArrayOutputStream
parameter_list|(
name|int
name|expectedInputSize
parameter_list|)
block|{
name|super
argument_list|(
name|expectedInputSize
argument_list|)
expr_stmt|;
block|}
DECL|method|write (ByteBuffer input)
name|void
name|write
parameter_list|(
name|ByteBuffer
name|input
parameter_list|)
block|{
name|int
name|remaining
init|=
name|input
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|+
name|remaining
operator|>
name|buf
operator|.
name|length
condition|)
block|{
name|buf
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buf
argument_list|,
name|count
operator|+
name|remaining
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|get
argument_list|(
name|buf
argument_list|,
name|count
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|count
operator|+=
name|remaining
expr_stmt|;
block|}
DECL|method|byteArray ()
name|byte
index|[]
name|byteArray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
DECL|method|length ()
name|int
name|length
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
block|}
end_class

end_unit

