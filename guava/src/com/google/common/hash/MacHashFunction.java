begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_comment
comment|/**  * {@link HashFunction} adapter for {@link Mac} instances.  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|MacHashFunction
specifier|final
class|class
name|MacHashFunction
extends|extends
name|AbstractStreamingHashFunction
block|{
DECL|field|prototype
specifier|private
specifier|final
name|Mac
name|prototype
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|Key
name|key
decl_stmt|;
DECL|field|toString
specifier|private
specifier|final
name|String
name|toString
decl_stmt|;
DECL|field|bits
specifier|private
specifier|final
name|int
name|bits
decl_stmt|;
DECL|field|supportsClone
specifier|private
specifier|final
name|boolean
name|supportsClone
decl_stmt|;
DECL|method|MacHashFunction (String algorithmName, Key key, String toString)
name|MacHashFunction
parameter_list|(
name|String
name|algorithmName
parameter_list|,
name|Key
name|key
parameter_list|,
name|String
name|toString
parameter_list|)
block|{
name|this
operator|.
name|prototype
operator|=
name|getMac
argument_list|(
name|algorithmName
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|toString
operator|=
name|checkNotNull
argument_list|(
name|toString
argument_list|)
expr_stmt|;
name|this
operator|.
name|bits
operator|=
name|getMac
argument_list|(
name|algorithmName
argument_list|,
name|key
argument_list|)
operator|.
name|getMacLength
argument_list|()
operator|*
name|Byte
operator|.
name|SIZE
expr_stmt|;
name|this
operator|.
name|supportsClone
operator|=
name|supportsClone
argument_list|(
name|prototype
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bits ()
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
name|bits
return|;
block|}
DECL|method|supportsClone (Mac mac)
specifier|private
specifier|static
name|boolean
name|supportsClone
parameter_list|(
name|Mac
name|mac
parameter_list|)
block|{
try|try
block|{
name|mac
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|getMac (String algorithmName, Key key)
specifier|private
specifier|static
name|Mac
name|getMac
parameter_list|(
name|String
name|algorithmName
parameter_list|,
name|Key
name|key
parameter_list|)
block|{
try|try
block|{
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|algorithmName
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|mac
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|newHasher ()
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
if|if
condition|(
name|supportsClone
condition|)
block|{
try|try
block|{
return|return
operator|new
name|MacHasher
argument_list|(
operator|(
name|Mac
operator|)
name|prototype
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// falls through
block|}
block|}
return|return
operator|new
name|MacHasher
argument_list|(
name|getMac
argument_list|(
name|prototype
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
return|;
block|}
comment|/**    * Hasher that updates a {@link Mac} (message authentication code).    */
DECL|class|MacHasher
specifier|private
specifier|static
specifier|final
class|class
name|MacHasher
extends|extends
name|AbstractByteHasher
block|{
DECL|field|mac
specifier|private
specifier|final
name|Mac
name|mac
decl_stmt|;
DECL|field|done
specifier|private
name|boolean
name|done
decl_stmt|;
DECL|method|MacHasher (Mac mac)
specifier|private
name|MacHasher
parameter_list|(
name|Mac
name|mac
parameter_list|)
block|{
name|this
operator|.
name|mac
operator|=
name|mac
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (byte b)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|checkNotDone
argument_list|()
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (byte[] b)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|checkNotDone
argument_list|()
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (byte[] b, int off, int len)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checkNotDone
argument_list|()
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNotDone ()
specifier|private
name|void
name|checkNotDone
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|done
argument_list|,
literal|"Cannot re-use a Hasher after calling hash() on it"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash ()
specifier|public
name|HashCode
name|hash
parameter_list|()
block|{
name|checkNotDone
argument_list|()
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
return|return
name|HashCode
operator|.
name|fromBytesNoCopy
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

