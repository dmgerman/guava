begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_comment
comment|/**  * Static factories for {@link HashCode} instances.  *  * @author andreou@google.com (Dimitris Andreou)  */
end_comment

begin_class
DECL|class|HashCodes
specifier|final
class|class
name|HashCodes
block|{
DECL|method|HashCodes ()
specifier|private
name|HashCodes
parameter_list|()
block|{ }
comment|/**    * Creates a 32-bit {@code HashCode}, of which the bytes will form the passed int, interpreted    * in little endian order.    */
DECL|method|fromInt (int hash)
specifier|static
name|HashCode
name|fromInt
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
return|return
operator|new
name|IntHashCode
argument_list|(
name|hash
argument_list|)
return|;
block|}
DECL|class|IntHashCode
specifier|private
specifier|static
class|class
name|IntHashCode
extends|extends
name|HashCode
block|{
DECL|field|hash
specifier|final
name|int
name|hash
decl_stmt|;
DECL|method|IntHashCode (int hash)
name|IntHashCode
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
literal|32
return|;
block|}
DECL|method|asBytes ()
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|asBytes
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|hash
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|24
argument_list|)
block|}
return|;
block|}
DECL|method|asInt ()
annotation|@
name|Override
specifier|public
name|int
name|asInt
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
DECL|method|asLong ()
annotation|@
name|Override
specifier|public
name|long
name|asLong
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this HashCode only has 32 bits; cannot create a long"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a 64-bit {@code HashCode}, of which the bytes will form the passed long, interpreted    * in little endian order.    */
DECL|method|fromLong (long hash)
specifier|static
name|HashCode
name|fromLong
parameter_list|(
name|long
name|hash
parameter_list|)
block|{
return|return
operator|new
name|LongHashCode
argument_list|(
name|hash
argument_list|)
return|;
block|}
DECL|class|LongHashCode
specifier|private
specifier|static
class|class
name|LongHashCode
extends|extends
name|HashCode
block|{
DECL|field|hash
specifier|final
name|long
name|hash
decl_stmt|;
DECL|method|LongHashCode (long hash)
name|LongHashCode
parameter_list|(
name|long
name|hash
parameter_list|)
block|{
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
DECL|method|asBytes ()
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|asBytes
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|hash
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|32
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|40
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|48
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|hash
operator|>>
literal|56
argument_list|)
block|}
return|;
block|}
DECL|method|asInt ()
annotation|@
name|Override
specifier|public
name|int
name|asInt
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|hash
return|;
block|}
DECL|method|asLong ()
annotation|@
name|Override
specifier|public
name|long
name|asLong
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
block|}
comment|/**    * Creates a {@code HashCode} from a byte array. The array is<i>not</i> copied defensively,    * so it must be handed-off so as to preserve the immutability contract of {@code HashCode}.    * The array must be at least of length 4 (not checked).    */
DECL|method|fromBytes (byte[] bytes)
specifier|static
name|HashCode
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|BytesHashCode
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|class|BytesHashCode
specifier|private
specifier|static
class|class
name|BytesHashCode
extends|extends
name|HashCode
block|{
DECL|field|bytes
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|method|BytesHashCode (byte[] bytes)
name|BytesHashCode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
block|}
DECL|method|bits ()
annotation|@
name|Override
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
name|bytes
operator|.
name|length
operator|*
literal|8
return|;
block|}
DECL|method|asBytes ()
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|asBytes
parameter_list|()
block|{
return|return
name|bytes
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|asInt ()
annotation|@
name|Override
specifier|public
name|int
name|asInt
parameter_list|()
block|{
return|return
operator|(
name|bytes
index|[
literal|0
index|]
operator|&
literal|0xFF
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|2
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|3
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
return|;
block|}
DECL|method|asLong ()
annotation|@
name|Override
specifier|public
name|long
name|asLong
parameter_list|()
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|<
literal|8
condition|)
block|{
comment|// Checking this to throw the correct type of exception
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not enough bytes"
argument_list|)
throw|;
block|}
return|return
operator|(
name|bytes
index|[
literal|0
index|]
operator|&
literal|0xFFL
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|1
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|2
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|3
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|4
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|5
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|6
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|7
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
literal|56
operator|)
return|;
block|}
block|}
comment|/**    * Slices a hash code into pieces of the specified number of bits each.    */
DECL|method|slice (HashCode hashCode, int bitsPerSlice)
specifier|static
name|HashCodeSlicer
name|slice
parameter_list|(
name|HashCode
name|hashCode
parameter_list|,
name|int
name|bitsPerSlice
parameter_list|)
block|{
comment|// TODO(user): special case for hashCodes.bits() == 32 or 64
return|return
operator|new
name|HashCodeSlicer
argument_list|(
name|hashCode
operator|.
name|asBytes
argument_list|()
argument_list|,
name|bitsPerSlice
argument_list|)
return|;
block|}
DECL|class|HashCodeSlicer
specifier|static
class|class
name|HashCodeSlicer
block|{
DECL|field|bytes
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|bitsPerSlice
specifier|final
name|int
name|bitsPerSlice
decl_stmt|;
DECL|field|byteIndex
name|int
name|byteIndex
decl_stmt|;
DECL|field|bitIndex
name|int
name|bitIndex
decl_stmt|;
DECL|method|HashCodeSlicer (byte[] bytes, int bitsPerSlice)
name|HashCodeSlicer
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bitsPerSlice
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|bitsPerSlice
operator|=
name|bitsPerSlice
expr_stmt|;
block|}
DECL|method|nextSlice ()
name|int
name|nextSlice
parameter_list|()
block|{
comment|// TODO(user): this can be optimized. Especially if we move to int[]
comment|// and even more if Mitzenmacher's trick works, then we have cheap
comment|// hash bits so no problem with just picking K whole, convenient ints.
name|int
name|slice
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitsPerSlice
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextBit
init|=
operator|(
name|bytes
index|[
name|byteIndex
index|]
operator|>>>
name|bitIndex
operator|)
operator|&
literal|1
decl_stmt|;
name|slice
operator|=
operator|(
name|slice
operator|<<
literal|1
operator|)
operator||
name|nextBit
expr_stmt|;
name|bitIndex
operator|++
expr_stmt|;
if|if
condition|(
name|bitIndex
operator|==
literal|8
condition|)
block|{
name|bitIndex
operator|=
literal|0
expr_stmt|;
name|byteIndex
operator|++
expr_stmt|;
block|}
block|}
return|return
name|slice
return|;
block|}
block|}
block|}
end_class

end_unit

