begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * Collections of strategies of generating the {@code k * log(M)} bits required for an element to  * be mapped to a {@link BloomFilter} of {@code M} bits and {@code k} hash functions. These  * strategies are part of the serialized form of the Bloom filters that use them, thus they must be  * preserved as is (no updates allowed, only introduction of new versions).  *  * @author andreou@google.com (Dimitris Andreou)  */
end_comment

begin_enum
DECL|enum|BloomFilterStrategies
enum|enum
name|BloomFilterStrategies
implements|implements
name|BloomFilter
operator|.
name|Strategy
block|{
comment|/**    * See "Less Hashing, Same Performance: Building a Better Bloom Filter" by Adam Kirsch and    * Michael Mitzenmacher. The paper argues that this trick doesn't significantly deteriorate the    * performance of a Bloom filter (yet only needs two 32bit hash functions).    */
DECL|enumConstant|MURMUR128_MITZ_32
DECL|method|MURMUR128_MITZ_32 ()
name|MURMUR128_MITZ_32
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|put
parameter_list|(
name|T
name|object
parameter_list|,
name|Funnel
argument_list|<
name|?
super|super
name|T
argument_list|>
name|funnel
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
block|{
comment|// TODO(user): when the murmur's shortcuts are implemented, update this code
name|long
name|hash64
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putObject
argument_list|(
name|object
argument_list|,
name|funnel
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
decl_stmt|;
name|int
name|hash1
init|=
operator|(
name|int
operator|)
name|hash64
decl_stmt|;
name|int
name|hash2
init|=
call|(
name|int
call|)
argument_list|(
name|hash64
operator|>>>
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextHash
init|=
name|hash1
operator|+
name|i
operator|*
name|hash2
decl_stmt|;
if|if
condition|(
name|nextHash
operator|<
literal|0
condition|)
block|{
name|nextHash
operator|=
operator|~
name|nextHash
expr_stmt|;
block|}
comment|// up to here, the code is identical with the next method
name|bits
operator|.
name|set
argument_list|(
name|nextHash
operator|%
name|bits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|boolean
name|mightContain
parameter_list|(
name|T
name|object
parameter_list|,
name|Funnel
argument_list|<
name|?
super|super
name|T
argument_list|>
name|funnel
parameter_list|,
name|int
name|numHashFunctions
parameter_list|,
name|BitArray
name|bits
parameter_list|)
block|{
name|long
name|hash64
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putObject
argument_list|(
name|object
argument_list|,
name|funnel
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
decl_stmt|;
name|int
name|hash1
init|=
operator|(
name|int
operator|)
name|hash64
decl_stmt|;
name|int
name|hash2
init|=
call|(
name|int
call|)
argument_list|(
name|hash64
operator|>>>
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextHash
init|=
name|hash1
operator|+
name|i
operator|*
name|hash2
decl_stmt|;
if|if
condition|(
name|nextHash
operator|<
literal|0
condition|)
block|{
name|nextHash
operator|=
operator|~
name|nextHash
expr_stmt|;
block|}
comment|// up to here, the code is identical with the previous method
if|if
condition|(
operator|!
name|bits
operator|.
name|get
argument_list|(
name|nextHash
operator|%
name|bits
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|;
DECL|class|BitArray
specifier|static
class|class
name|BitArray
block|{
DECL|field|data
specifier|final
name|long
index|[]
name|data
decl_stmt|;
DECL|method|BitArray (int bits)
name|BitArray
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|long
index|[
name|IntMath
operator|.
name|divide
argument_list|(
name|bits
argument_list|,
literal|64
argument_list|,
name|RoundingMode
operator|.
name|CEILING
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Used by serialization
DECL|method|BitArray (long[] data)
name|BitArray
parameter_list|(
name|long
index|[]
name|data
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|data
operator|.
name|length
operator|>
literal|0
argument_list|,
literal|"data length is zero!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
DECL|method|set (int index)
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|data
index|[
name|index
operator|>>
literal|6
index|]
operator||=
operator|(
literal|1L
operator|<<
name|index
operator|)
expr_stmt|;
block|}
DECL|method|get (int index)
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|data
index|[
name|index
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
name|index
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/** Number of bits */
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
operator|*
name|Long
operator|.
name|SIZE
return|;
block|}
block|}
block|}
end_enum

end_unit

