begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * Collections of strategies of generating the {@code k * log(M)} bits required for an element to  * be mapped to a {@link BloomFilter} of {@code M} bits and {@code k} hash functions. These  * strategies are part of the serialized form of the Bloom filters that use them, thus they must be  * preserved as is (no updates allowed, only introduction of new versions).  *   * @author andreou@google.com (Dimitris Andreou)  */
end_comment

begin_class
DECL|class|BloomFilterStrategies
specifier|final
class|class
name|BloomFilterStrategies
block|{
DECL|method|BloomFilterStrategies ()
specifier|private
name|BloomFilterStrategies
parameter_list|()
block|{}
comment|/**    * See "Less Hashing, Same Performance: Building a Better Bloom Filter" by Adam Kirsch and     * Michael Mitzenmacher. The paper argues that this trick doesn't significantly deteriorate the     * performance of a Bloom filter (yet only needs two 32bit hash functions).    */
DECL|class|From128ToN
specifier|static
class|class
name|From128ToN
extends|extends
name|AbstractCompositeHashFunction
implements|implements
name|Serializable
block|{
DECL|field|bits
specifier|private
specifier|final
name|int
name|bits
decl_stmt|;
DECL|field|hashFunction
specifier|private
specifier|final
name|HashFunction
name|hashFunction
decl_stmt|;
DECL|method|From128ToN (int bits, HashFunction hashFunction)
specifier|private
name|From128ToN
parameter_list|(
name|int
name|bits
parameter_list|,
name|HashFunction
name|hashFunction
parameter_list|)
block|{
name|super
argument_list|(
name|hashFunction
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashFunction
operator|=
name|hashFunction
expr_stmt|;
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
block|}
DECL|method|withBits (int bits, HashFunction hashFunction)
specifier|static
name|From128ToN
name|withBits
parameter_list|(
name|int
name|bits
parameter_list|,
name|HashFunction
name|hashFunction
parameter_list|)
block|{
return|return
operator|new
name|From128ToN
argument_list|(
name|checkPositiveAndMakeMultipleOf64
argument_list|(
name|bits
argument_list|)
argument_list|,
name|hashFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makeHash (Hasher[] hashers)
name|HashCode
name|makeHash
parameter_list|(
name|Hasher
index|[]
name|hashers
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|hashers
index|[
literal|0
index|]
operator|.
name|hash
argument_list|()
operator|.
name|asBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|hash1
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|hash2
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
return|return
name|compose64
argument_list|(
name|hash1
argument_list|,
name|hash2
argument_list|,
name|bits
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bits ()
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
name|bits
return|;
block|}
DECL|method|writeReplace ()
specifier|private
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerialForm
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|class|SerialForm
specifier|private
specifier|static
class|class
name|SerialForm
implements|implements
name|Serializable
block|{
DECL|field|bits
specifier|final
name|int
name|bits
decl_stmt|;
DECL|field|hashFunction
specifier|final
name|HashFunction
name|hashFunction
decl_stmt|;
DECL|method|SerialForm (From128ToN object)
name|SerialForm
parameter_list|(
name|From128ToN
name|object
parameter_list|)
block|{
name|this
operator|.
name|bits
operator|=
name|object
operator|.
name|bits
expr_stmt|;
name|this
operator|.
name|hashFunction
operator|=
name|object
operator|.
name|hashFunction
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|From128ToN
operator|.
name|withBits
argument_list|(
name|bits
argument_list|,
name|hashFunction
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
block|}
DECL|method|checkPositiveAndMakeMultipleOf64 (int bits)
specifier|private
specifier|static
name|int
name|checkPositiveAndMakeMultipleOf64
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|bits
operator|>
literal|0
argument_list|,
literal|"Number of bits must be positive"
argument_list|)
expr_stmt|;
return|return
operator|(
name|bits
operator|+
literal|63
operator|)
operator|&
operator|~
literal|63
return|;
block|}
DECL|method|compose64 (long hash1, long hash2, int bits)
specifier|private
specifier|static
name|HashCode
name|compose64
parameter_list|(
name|long
name|hash1
parameter_list|,
name|long
name|hash2
parameter_list|,
name|int
name|bits
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|bits
operator|/
literal|8
index|]
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|,
name|numLongs
init|=
name|bits
operator|/
literal|64
init|;
name|i
operator|<=
name|numLongs
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|putLong
argument_list|(
name|hash1
operator|+
name|i
operator|*
name|hash2
argument_list|)
expr_stmt|;
block|}
return|return
name|HashCodes
operator|.
name|fromBytes
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

