begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  * An abstract implementation of {@link Hasher}, which only requires subtypes to implement {@link  * #putByte}. Subtypes may provide more efficient implementations, however.  *  * @author Dimitris Andreou  */
end_comment

begin_class
annotation|@
name|CanIgnoreReturnValue
DECL|class|AbstractHasher
specifier|abstract
class|class
name|AbstractHasher
implements|implements
name|Hasher
block|{
annotation|@
name|Override
DECL|method|putBoolean (boolean b)
specifier|public
specifier|final
name|Hasher
name|putBoolean
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
name|putByte
argument_list|(
name|b
condition|?
operator|(
name|byte
operator|)
literal|1
else|:
operator|(
name|byte
operator|)
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putDouble (double d)
specifier|public
specifier|final
name|Hasher
name|putDouble
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|putLong
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|d
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putFloat (float f)
specifier|public
specifier|final
name|Hasher
name|putFloat
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|putInt
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putUnencodedChars (CharSequence charSequence)
specifier|public
name|Hasher
name|putUnencodedChars
parameter_list|(
name|CharSequence
name|charSequence
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|charSequence
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|putChar
argument_list|(
name|charSequence
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putString (CharSequence charSequence, Charset charset)
specifier|public
name|Hasher
name|putString
parameter_list|(
name|CharSequence
name|charSequence
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
return|return
name|putBytes
argument_list|(
name|charSequence
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (byte[] bytes)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|putBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (byte[] bytes, int off, int len)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|putByte
argument_list|(
name|bytes
index|[
name|off
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (ByteBuffer b)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|ByteBuffer
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|putBytes
argument_list|(
name|b
operator|.
name|array
argument_list|()
argument_list|,
name|b
operator|.
name|arrayOffset
argument_list|()
operator|+
name|b
operator|.
name|position
argument_list|()
argument_list|,
name|b
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Java8Compatibility
operator|.
name|position
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|remaining
init|=
name|b
operator|.
name|remaining
argument_list|()
init|;
name|remaining
operator|>
literal|0
condition|;
name|remaining
operator|--
control|)
block|{
name|putByte
argument_list|(
name|b
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putShort (short s)
specifier|public
name|Hasher
name|putShort
parameter_list|(
name|short
name|s
parameter_list|)
block|{
name|putByte
argument_list|(
operator|(
name|byte
operator|)
name|s
argument_list|)
expr_stmt|;
name|putByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|s
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putInt (int i)
specifier|public
name|Hasher
name|putInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|putByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
name|putByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|putByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|putByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putLong (long l)
specifier|public
name|Hasher
name|putLong
parameter_list|(
name|long
name|l
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|64
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|putByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|l
operator|>>>
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putChar (char c)
specifier|public
name|Hasher
name|putChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|putByte
argument_list|(
operator|(
name|byte
operator|)
name|c
argument_list|)
expr_stmt|;
name|putByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|c
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putObject (T instance, Funnel<? super T> funnel)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Hasher
name|putObject
parameter_list|(
name|T
name|instance
parameter_list|,
name|Funnel
argument_list|<
name|?
super|super
name|T
argument_list|>
name|funnel
parameter_list|)
block|{
name|funnel
operator|.
name|funnel
argument_list|(
name|instance
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

