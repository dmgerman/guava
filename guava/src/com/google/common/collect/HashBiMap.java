begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link BiMap} backed by two hash tables. This implementation allows null keys and values. A  * {@code HashBiMap} and its inverse are both serializable.  *  *<p>See the Guava User Guide article on<a href=  * "http://code.google.com/p/guava-libraries/wiki/NewCollectionTypesExplained#BiMap"> {@code BiMap}  *</a>.  *  * @author Louis Wasserman  * @author Mike Bostock  * @since 2.0 (imported from Google Collections Library)  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|HashBiMap
specifier|public
specifier|final
class|class
name|HashBiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
comment|/**    * Returns a new, empty {@code HashBiMap} with the default initial capacity (16).    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|create
argument_list|(
literal|16
argument_list|)
return|;
block|}
comment|/**    * Constructs a new, empty bimap with the specified expected size.    *    * @param expectedSize the expected number of entries    * @throws IllegalArgumentException if the specified expected size is negative    */
DECL|method|create (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
return|return
operator|new
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
comment|/**    * Constructs a new bimap containing initial values from {@code map}. The bimap is created with an    * initial capacity sufficient to hold the mappings in the specified map.    */
DECL|method|create (Map<? extends K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
init|=
name|create
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|bimap
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|bimap
return|;
block|}
DECL|class|BiEntry
specifier|private
specifier|static
specifier|final
class|class
name|BiEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|key
specifier|final
name|K
name|key
decl_stmt|;
DECL|field|keyHash
specifier|final
name|int
name|keyHash
decl_stmt|;
DECL|field|value
specifier|final
name|V
name|value
decl_stmt|;
DECL|field|valueHash
specifier|final
name|int
name|valueHash
decl_stmt|;
annotation|@
name|Nullable
DECL|field|nextInKToVBucket
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInKToVBucket
decl_stmt|;
annotation|@
name|Nullable
DECL|field|nextInVToKBucket
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInVToKBucket
decl_stmt|;
DECL|method|BiEntry (K key, int keyHash, V value, int valueHash)
name|BiEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|int
name|keyHash
parameter_list|,
name|V
name|value
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|keyHash
operator|=
name|keyHash
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|valueHash
operator|=
name|valueHash
expr_stmt|;
block|}
block|}
DECL|field|LOAD_FACTOR
specifier|private
specifier|static
specifier|final
name|double
name|LOAD_FACTOR
init|=
literal|1.0
decl_stmt|;
DECL|field|MAX_TABLE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TABLE_SIZE
init|=
name|Ints
operator|.
name|MAX_POWER_OF_TWO
decl_stmt|;
DECL|field|hashTableKToV
specifier|private
specifier|transient
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|hashTableKToV
decl_stmt|;
DECL|field|hashTableVToK
specifier|private
specifier|transient
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|hashTableVToK
decl_stmt|;
DECL|field|size
specifier|private
specifier|transient
name|int
name|size
decl_stmt|;
DECL|field|mask
specifier|private
specifier|transient
name|int
name|mask
decl_stmt|;
DECL|field|modCount
specifier|private
specifier|transient
name|int
name|modCount
decl_stmt|;
DECL|method|HashBiMap (int expectedSize)
specifier|private
name|HashBiMap
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|init
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
DECL|method|init (int expectedSize)
specifier|private
name|void
name|init
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|expectedSize
operator|>=
literal|0
argument_list|,
literal|"expectedSize must be>= 0 but was %s"
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
name|int
name|tableSize
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
name|expectedSize
argument_list|)
operator|-
literal|1
argument_list|)
operator|<<
literal|1
decl_stmt|;
if|if
condition|(
name|tableSize
operator|<
literal|0
condition|)
block|{
name|tableSize
operator|=
name|Ints
operator|.
name|MAX_POWER_OF_TWO
expr_stmt|;
block|}
name|this
operator|.
name|hashTableKToV
operator|=
name|createTable
argument_list|(
name|tableSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashTableVToK
operator|=
name|createTable
argument_list|(
name|tableSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|mask
operator|=
name|tableSize
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|modCount
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Finds and removes {@code entry} from the bucket linked lists in both the    * key-to-value direction and the value-to-key direction.    */
DECL|method|delete (BiEntry<K, V> entry)
specifier|private
name|void
name|delete
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|int
name|keyBucket
init|=
name|entry
operator|.
name|keyHash
operator|&
name|mask
decl_stmt|;
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|prevBucketEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bucketEntry
init|=
name|hashTableKToV
index|[
name|keyBucket
index|]
init|;
literal|true
condition|;
name|bucketEntry
operator|=
name|bucketEntry
operator|.
name|nextInKToVBucket
control|)
block|{
if|if
condition|(
name|bucketEntry
operator|==
name|entry
condition|)
block|{
if|if
condition|(
name|prevBucketEntry
operator|==
literal|null
condition|)
block|{
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|=
name|entry
operator|.
name|nextInKToVBucket
expr_stmt|;
block|}
else|else
block|{
name|prevBucketEntry
operator|.
name|nextInKToVBucket
operator|=
name|entry
operator|.
name|nextInKToVBucket
expr_stmt|;
block|}
break|break;
block|}
name|prevBucketEntry
operator|=
name|bucketEntry
expr_stmt|;
block|}
name|int
name|valueBucket
init|=
name|entry
operator|.
name|valueHash
operator|&
name|mask
decl_stmt|;
name|prevBucketEntry
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bucketEntry
init|=
name|hashTableVToK
index|[
name|valueBucket
index|]
init|;
condition|;
name|bucketEntry
operator|=
name|bucketEntry
operator|.
name|nextInVToKBucket
control|)
block|{
if|if
condition|(
name|bucketEntry
operator|==
name|entry
condition|)
block|{
if|if
condition|(
name|prevBucketEntry
operator|==
literal|null
condition|)
block|{
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|=
name|entry
operator|.
name|nextInVToKBucket
expr_stmt|;
block|}
else|else
block|{
name|prevBucketEntry
operator|.
name|nextInVToKBucket
operator|=
name|entry
operator|.
name|nextInVToKBucket
expr_stmt|;
block|}
break|break;
block|}
name|prevBucketEntry
operator|=
name|bucketEntry
expr_stmt|;
block|}
name|size
operator|--
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
DECL|method|insert (BiEntry<K, V> entry)
specifier|private
name|void
name|insert
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|int
name|keyBucket
init|=
name|entry
operator|.
name|keyHash
operator|&
name|mask
decl_stmt|;
name|entry
operator|.
name|nextInKToVBucket
operator|=
name|hashTableKToV
index|[
name|keyBucket
index|]
expr_stmt|;
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|=
name|entry
expr_stmt|;
name|int
name|valueBucket
init|=
name|entry
operator|.
name|valueHash
operator|&
name|mask
decl_stmt|;
name|entry
operator|.
name|nextInVToKBucket
operator|=
name|hashTableVToK
index|[
name|valueBucket
index|]
expr_stmt|;
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|=
name|entry
expr_stmt|;
name|size
operator|++
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
DECL|method|hash (@ullable Object o)
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|smear
argument_list|(
operator|(
name|o
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|o
operator|.
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
DECL|method|seekByKey (@ullable Object key, int keyHash)
specifier|private
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|seekByKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|,
name|int
name|keyHash
parameter_list|)
block|{
for|for
control|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|hashTableKToV
index|[
name|keyHash
operator|&
name|mask
index|]
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|entry
operator|.
name|nextInKToVBucket
control|)
block|{
if|if
condition|(
name|keyHash
operator|==
name|entry
operator|.
name|keyHash
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|key
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|seekByValue (@ullable Object value, int valueHash)
specifier|private
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|seekByValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
for|for
control|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|hashTableVToK
index|[
name|valueHash
operator|&
name|mask
index|]
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|entry
operator|.
name|nextInVToKBucket
control|)
block|{
if|if
condition|(
name|valueHash
operator|==
name|entry
operator|.
name|valueHash
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|entry
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|seekByKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|(
name|key
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullable Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
name|seekByValue
argument_list|(
name|value
argument_list|,
name|hash
argument_list|(
name|value
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|seekByKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|entry
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|put (@ullable K key, @Nullable V value)
specifier|public
name|V
name|put
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forcePut (@ullable K key, @Nullable V value)
specifier|public
name|V
name|forcePut
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|put (@ullable K key, @Nullable V value, boolean force)
specifier|private
name|V
name|put
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|int
name|keyHash
init|=
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|valueHash
init|=
name|hash
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|oldEntryForKey
init|=
name|seekByKey
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEntryForKey
operator|!=
literal|null
operator|&&
name|valueHash
operator|==
name|oldEntryForKey
operator|.
name|valueHash
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|oldEntryForKey
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|oldEntryForValue
init|=
name|seekByValue
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEntryForValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|force
condition|)
block|{
name|delete
argument_list|(
name|oldEntryForValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value already present: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|oldEntryForKey
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|oldEntryForKey
argument_list|)
expr_stmt|;
block|}
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|,
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|rehashIfNecessary
argument_list|()
expr_stmt|;
return|return
operator|(
name|oldEntryForKey
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|oldEntryForKey
operator|.
name|value
return|;
block|}
annotation|@
name|Nullable
DECL|method|putInverse (@ullable V value, @Nullable K key, boolean force)
specifier|private
name|K
name|putInverse
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|,
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|int
name|valueHash
init|=
name|hash
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|keyHash
init|=
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|oldEntryForValue
init|=
name|seekByValue
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEntryForValue
operator|!=
literal|null
operator|&&
name|keyHash
operator|==
name|oldEntryForValue
operator|.
name|keyHash
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|oldEntryForValue
operator|.
name|key
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|oldEntryForKey
init|=
name|seekByKey
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEntryForKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|force
condition|)
block|{
name|delete
argument_list|(
name|oldEntryForKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value already present: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|oldEntryForValue
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|oldEntryForValue
argument_list|)
expr_stmt|;
block|}
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|,
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|rehashIfNecessary
argument_list|()
expr_stmt|;
return|return
operator|(
name|oldEntryForValue
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|oldEntryForValue
operator|.
name|key
return|;
block|}
DECL|method|rehashIfNecessary ()
specifier|private
name|void
name|rehashIfNecessary
parameter_list|()
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|oldKToV
init|=
name|hashTableKToV
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|LOAD_FACTOR
operator|*
name|oldKToV
operator|.
name|length
operator|&&
name|oldKToV
operator|.
name|length
operator|<
name|MAX_TABLE_SIZE
condition|)
block|{
name|int
name|newTableSize
init|=
name|oldKToV
operator|.
name|length
operator|*
literal|2
decl_stmt|;
name|this
operator|.
name|hashTableKToV
operator|=
name|createTable
argument_list|(
name|newTableSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashTableVToK
operator|=
name|createTable
argument_list|(
name|newTableSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|mask
operator|=
name|newTableSize
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|oldKToV
operator|.
name|length
condition|;
name|bucket
operator|++
control|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|oldKToV
index|[
name|bucket
index|]
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextEntry
init|=
name|entry
operator|.
name|nextInKToVBucket
decl_stmt|;
name|insert
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
name|nextEntry
expr_stmt|;
block|}
block|}
name|this
operator|.
name|modCount
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createTable (int length)
specifier|private
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createTable
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|BiEntry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object key)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|seekByKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|delete
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|value
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|hashTableKToV
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|hashTableVToK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|class|Itr
specifier|abstract
class|class
name|Itr
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|nextBucket
name|int
name|nextBucket
init|=
literal|0
decl_stmt|;
DECL|field|next
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
init|=
literal|null
decl_stmt|;
DECL|field|toRemove
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|toRemove
init|=
literal|null
decl_stmt|;
DECL|field|expectedModCount
name|int
name|expectedModCount
init|=
name|modCount
decl_stmt|;
DECL|method|checkForConcurrentModification ()
specifier|private
name|void
name|checkForConcurrentModification
parameter_list|()
block|{
if|if
condition|(
name|modCount
operator|!=
name|expectedModCount
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
while|while
condition|(
name|nextBucket
operator|<
name|hashTableKToV
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|hashTableKToV
index|[
name|nextBucket
index|]
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|hashTableKToV
index|[
name|nextBucket
operator|++
index|]
expr_stmt|;
return|return
literal|true
return|;
block|}
name|nextBucket
operator|++
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|next
decl_stmt|;
name|next
operator|=
name|entry
operator|.
name|nextInKToVBucket
expr_stmt|;
name|toRemove
operator|=
name|entry
expr_stmt|;
return|return
name|output
argument_list|(
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
name|checkState
argument_list|(
name|toRemove
operator|!=
literal|null
argument_list|,
literal|"Only one remove() call allowed per call to next"
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
name|expectedModCount
operator|=
name|modCount
expr_stmt|;
name|toRemove
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|output (BiEntry<K, V> entry)
specifier|abstract
name|T
name|output
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|KeySet
argument_list|()
return|;
block|}
DECL|class|KeySet
specifier|private
specifier|final
class|class
name|KeySet
extends|extends
name|Maps
operator|.
name|KeySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map ()
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|K
name|output
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|key
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|seekByKey
argument_list|(
name|o
argument_list|,
name|hash
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|delete
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|inverse
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
DECL|class|EntrySet
specifier|private
specifier|final
class|class
name|EntrySet
extends|extends
name|Maps
operator|.
name|EntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map ()
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|MapEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
class|class
name|MapEntry
extends|extends
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
name|MapEntry
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|V
name|oldValue
init|=
name|delegate
operator|.
name|value
decl_stmt|;
name|int
name|valueHash
init|=
name|hash
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueHash
operator|==
name|delegate
operator|.
name|valueHash
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|oldValue
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
name|checkArgument
argument_list|(
name|seekByValue
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|)
operator|==
literal|null
argument_list|,
literal|"value already present: %s"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|delegate
operator|.
name|key
argument_list|,
name|delegate
operator|.
name|keyHash
argument_list|,
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|expectedModCount
operator|=
name|modCount
expr_stmt|;
if|if
condition|(
name|toRemove
operator|==
name|delegate
condition|)
block|{
name|toRemove
operator|=
name|newEntry
expr_stmt|;
block|}
name|delegate
operator|=
name|newEntry
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
block|}
return|;
block|}
block|}
DECL|field|inverse
specifier|private
specifier|transient
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
decl_stmt|;
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
return|return
operator|(
name|inverse
operator|==
literal|null
operator|)
condition|?
name|inverse
operator|=
operator|new
name|Inverse
argument_list|()
else|:
name|inverse
return|;
block|}
DECL|class|Inverse
specifier|private
specifier|final
class|class
name|Inverse
extends|extends
name|AbstractMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
implements|implements
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
implements|,
name|Serializable
block|{
DECL|method|forward ()
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|forward
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|forward
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object value)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
name|forward
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object value)
specifier|public
name|K
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|seekByValue
argument_list|(
name|value
argument_list|,
name|hash
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|entry
operator|.
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|put (@ullable V value, @Nullable K key)
specifier|public
name|K
name|put
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|,
annotation|@
name|Nullable
name|K
name|key
parameter_list|)
block|{
return|return
name|putInverse
argument_list|(
name|value
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forcePut (@ullable V value, @Nullable K key)
specifier|public
name|K
name|forcePut
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|,
annotation|@
name|Nullable
name|K
name|key
parameter_list|)
block|{
return|return
name|putInverse
argument_list|(
name|value
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object value)
specifier|public
name|K
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|seekByValue
argument_list|(
name|value
argument_list|,
name|hash
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|delete
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|key
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|inverse
parameter_list|()
block|{
return|return
name|forward
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|InverseKeySet
argument_list|()
return|;
block|}
DECL|class|InverseKeySet
specifier|private
specifier|final
class|class
name|InverseKeySet
extends|extends
name|Maps
operator|.
name|KeySet
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map ()
name|Map
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|Inverse
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|seekByValue
argument_list|(
name|o
argument_list|,
name|hash
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|delete
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|V
name|output
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|value
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|forward
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|Maps
operator|.
name|EntrySet
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|Inverse
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|output
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|InverseEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
class|class
name|InverseEntry
extends|extends
name|AbstractMapEntry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
block|{
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
name|InverseEntry
parameter_list|(
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getKey
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|getValue
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|setValue
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|K
name|oldKey
init|=
name|delegate
operator|.
name|key
decl_stmt|;
name|int
name|keyHash
init|=
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyHash
operator|==
name|delegate
operator|.
name|keyHash
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|oldKey
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
name|checkArgument
argument_list|(
name|seekByKey
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|)
operator|==
literal|null
argument_list|,
literal|"value already present: %s"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|BiEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|,
name|delegate
operator|.
name|value
argument_list|,
name|delegate
operator|.
name|valueHash
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|expectedModCount
operator|=
name|modCount
expr_stmt|;
comment|// This is safe because entries can only get bumped up to earlier in the iteration,
comment|// so they can't get revisited.
return|return
name|oldKey
return|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|writeReplace ()
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|InverseSerializedForm
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|HashBiMap
operator|.
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|InverseSerializedForm
specifier|private
specifier|static
specifier|final
class|class
name|InverseSerializedForm
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Serializable
block|{
DECL|field|bimap
specifier|private
specifier|final
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
decl_stmt|;
DECL|method|InverseSerializedForm (HashBiMap<K, V> bimap)
name|InverseSerializedForm
parameter_list|(
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
parameter_list|)
block|{
name|this
operator|.
name|bimap
operator|=
name|bimap
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|bimap
operator|.
name|inverse
argument_list|()
return|;
block|}
block|}
comment|/**    * @serialData the number of entries, first key, first value, second key, second value, and so on.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.io.ObjectOutputStream"
argument_list|)
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|Serialization
operator|.
name|writeMap
argument_list|(
name|this
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.io.ObjectInputStream"
argument_list|)
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|Serialization
operator|.
name|readCount
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Serialization
operator|.
name|populateMap
argument_list|(
name|this
argument_list|,
name|stream
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Not needed in emulated source"
argument_list|)
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

