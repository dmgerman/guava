begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** An ordering that tries several comparators in order. */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|CompoundOrdering
name|final
name|class
name|CompoundOrdering
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|Ordering
argument_list|<
name|T
argument_list|>
expr|implements
name|Serializable
block|{
DECL|field|comparators
name|final
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
index|[]
name|comparators
block|;
DECL|method|CompoundOrdering (Comparator<? super T> primary, Comparator<? super T> secondary)
name|CompoundOrdering
argument_list|(
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|primary
operator|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|secondary
argument_list|)
block|{
name|this
operator|.
name|comparators
operator|=
operator|(
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
index|[]
operator|)
operator|new
name|Comparator
index|[]
block|{
name|primary
block|,
name|secondary
block|}
block|;   }
DECL|method|CompoundOrdering (Iterable<? extends Comparator<? super T>> comparators)
name|CompoundOrdering
argument_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|comparators
argument_list|)
block|{
name|this
operator|.
name|comparators
operator|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|comparators
argument_list|,
operator|new
name|Comparator
index|[
literal|0
index|]
argument_list|)
block|;   }
expr|@
name|Override
DECL|method|compare (@arametricNullness T left, @ParametricNullness T right)
specifier|public
name|int
name|compare
argument_list|(
annotation|@
name|ParametricNullness
name|T
name|left
argument_list|,
annotation|@
name|ParametricNullness
name|T
name|right
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comparators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|comparators
index|[
name|i
index|]
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|equals (@heckForNull Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|CompoundOrdering
condition|)
block|{
name|CompoundOrdering
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|CompoundOrdering
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|comparators
argument_list|,
name|that
operator|.
name|comparators
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|comparators
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Ordering.compound("
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|comparators
argument_list|)
operator|+
literal|")"
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

unit|}
end_unit

