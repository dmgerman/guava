begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
operator|.
name|TransformedCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Provides static methods that involve a {@code Table}.  *  * @author Jared Levy  * @since Guava release 07  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|Beta
DECL|class|Tables
specifier|public
specifier|final
class|class
name|Tables
block|{
DECL|method|Tables ()
specifier|private
name|Tables
parameter_list|()
block|{}
comment|/**    * Returns an immutable cell with the specified row key, column key, and    * value.    *    *<p>The returned cell is serializable.    *    * @param rowKey the row key to be associated with the returned cell    * @param columnKey the column key to be associated with the returned cell    * @param value the value to be associated with the returned cell    */
DECL|method|immutableCell ( @ullable R rowKey, @Nullable C columnKey, @Nullable V value)
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|immutableCell
parameter_list|(
annotation|@
name|Nullable
name|R
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|C
name|columnKey
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmutableCell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|class|ImmutableCell
specifier|private
specifier|static
class|class
name|ImmutableCell
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractCell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|rowKey
specifier|final
name|R
name|rowKey
decl_stmt|;
DECL|field|columnKey
specifier|final
name|C
name|columnKey
decl_stmt|;
DECL|field|value
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|ImmutableCell ( @ullable R rowKey, @Nullable C columnKey, @Nullable V value)
name|ImmutableCell
parameter_list|(
annotation|@
name|Nullable
name|R
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|C
name|columnKey
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|rowKey
operator|=
name|rowKey
expr_stmt|;
name|this
operator|.
name|columnKey
operator|=
name|columnKey
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRowKey ()
specifier|public
name|R
name|getRowKey
parameter_list|()
block|{
return|return
name|rowKey
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnKey ()
specifier|public
name|C
name|getColumnKey
parameter_list|()
block|{
return|return
name|columnKey
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|AbstractCell
specifier|abstract
specifier|static
class|class
name|AbstractCell
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
block|{
comment|// needed for serialization
DECL|method|AbstractCell ()
name|AbstractCell
parameter_list|()
block|{}
DECL|method|equals (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Cell
condition|)
block|{
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|other
init|=
operator|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|getRowKey
argument_list|()
argument_list|,
name|other
operator|.
name|getRowKey
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getColumnKey
argument_list|()
argument_list|,
name|other
operator|.
name|getColumnKey
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getValue
argument_list|()
argument_list|,
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|getRowKey
argument_list|()
argument_list|,
name|getColumnKey
argument_list|()
argument_list|,
name|getValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|getRowKey
argument_list|()
operator|+
literal|","
operator|+
name|getColumnKey
argument_list|()
operator|+
literal|")="
operator|+
name|getValue
argument_list|()
return|;
block|}
block|}
comment|/**    * Creates a transposed view of a given table that flips its row and column    * keys. In other words, calling {@code get(columnKey, rowKey)} on the    * generated table always returns the same value as calling {@code    * get(rowKey, columnKey)} on the original table. Updating the original table    * changes the contents of the transposed table and vice versa.    *    *<p>The returned table supports update operations as long as the input table    * supports the analogous operation with swapped rows and columns. For    * example, in a {@link HashBasedTable} instance, {@code    * rowKeySet().iterator()} supports {@code remove()} but {@code    * columnKeySet().iterator()} doesn't. With a transposed {@link    * HashBasedTable}, it's the other way around.    */
DECL|method|transpose (Table<R, C, V> table)
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|Table
argument_list|<
name|C
argument_list|,
name|R
argument_list|,
name|V
argument_list|>
name|transpose
parameter_list|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|table
parameter_list|)
block|{
return|return
operator|(
name|table
operator|instanceof
name|TransposeTable
operator|)
condition|?
operator|(
operator|(
name|TransposeTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
operator|)
name|table
operator|)
operator|.
name|original
else|:
operator|new
name|TransposeTable
argument_list|<
name|C
argument_list|,
name|R
argument_list|,
name|V
argument_list|>
argument_list|(
name|table
argument_list|)
return|;
block|}
DECL|class|TransposeTable
specifier|private
specifier|static
class|class
name|TransposeTable
parameter_list|<
name|C
parameter_list|,
name|R
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Table
argument_list|<
name|C
argument_list|,
name|R
argument_list|,
name|V
argument_list|>
block|{
DECL|field|original
specifier|final
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|original
decl_stmt|;
DECL|method|TransposeTable (Table<R, C, V> original)
name|TransposeTable
parameter_list|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|original
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|checkNotNull
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|original
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|column (R columnKey)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|column
parameter_list|(
name|R
name|columnKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|row
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|columnKeySet ()
specifier|public
name|Set
argument_list|<
name|R
argument_list|>
name|columnKeySet
parameter_list|()
block|{
return|return
name|original
operator|.
name|rowKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|columnMap ()
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
return|return
name|original
operator|.
name|rowMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains ( @ullable Object rowKey, @Nullable Object columnKey)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|contains
argument_list|(
name|columnKey
argument_list|,
name|rowKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsColumn (@ullable Object columnKey)
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|containsRow
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsRow (@ullable Object rowKey)
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|containsColumn
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullable Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
name|original
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object rowKey, @Nullable Object columnKey)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|get
argument_list|(
name|columnKey
argument_list|,
name|rowKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|original
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|put (C rowKey, R columnKey, V value)
specifier|public
name|V
name|put
parameter_list|(
name|C
name|rowKey
parameter_list|,
name|R
name|columnKey
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|original
operator|.
name|put
argument_list|(
name|columnKey
argument_list|,
name|rowKey
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (Table<? extends C, ? extends R, ? extends V> table)
specifier|public
name|void
name|putAll
parameter_list|(
name|Table
argument_list|<
name|?
extends|extends
name|C
argument_list|,
name|?
extends|extends
name|R
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|table
parameter_list|)
block|{
name|original
operator|.
name|putAll
argument_list|(
name|transpose
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object rowKey, @Nullable Object columnKey)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|remove
argument_list|(
name|columnKey
argument_list|,
name|rowKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|row (C rowKey)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|row
parameter_list|(
name|C
name|rowKey
parameter_list|)
block|{
return|return
name|original
operator|.
name|column
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rowKeySet ()
specifier|public
name|Set
argument_list|<
name|C
argument_list|>
name|rowKeySet
parameter_list|()
block|{
return|return
name|original
operator|.
name|columnKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|rowMap ()
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
return|return
name|original
operator|.
name|columnMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|original
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|original
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Table
condition|)
block|{
name|Table
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|other
init|=
operator|(
name|Table
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|cellSet
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|cellSet
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|cellSet
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|rowMap
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Will cast TRANSPOSE_CELL to a type that always succeeds
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// eclipse doesn't like the raw type
DECL|field|TRANSPOSE_CELL
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|,
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|TRANSPOSE_CELL
init|=
operator|new
name|Function
argument_list|<
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|,
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|apply
parameter_list|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|cell
parameter_list|)
block|{
return|return
name|immutableCell
argument_list|(
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|field|cellSet
name|CellSet
name|cellSet
decl_stmt|;
annotation|@
name|Override
DECL|method|cellSet ()
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|C
argument_list|,
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellSet
parameter_list|()
block|{
name|CellSet
name|result
init|=
name|cellSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|cellSet
operator|=
operator|new
name|CellSet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|CellSet
class|class
name|CellSet
extends|extends
name|TransformedCollection
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|,
name|Cell
argument_list|<
name|C
argument_list|,
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
implements|implements
name|Set
argument_list|<
name|Cell
argument_list|<
name|C
argument_list|,
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
comment|// Casting TRANSPOSE_CELL to a type that always succeeds
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|CellSet ()
name|CellSet
parameter_list|()
block|{
name|super
argument_list|(
name|original
operator|.
name|cellSet
argument_list|()
argument_list|,
operator|(
name|Function
operator|)
name|TRANSPOSE_CELL
argument_list|)
expr_stmt|;
block|}
DECL|method|equals (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Set
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|?
argument_list|>
name|os
init|=
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|size
argument_list|()
operator|!=
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|containsAll
argument_list|(
name|os
argument_list|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|hashCodeImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Cell
condition|)
block|{
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|original
operator|.
name|cellSet
argument_list|()
operator|.
name|contains
argument_list|(
name|immutableCell
argument_list|(
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Cell
condition|)
block|{
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|original
operator|.
name|cellSet
argument_list|()
operator|.
name|remove
argument_list|(
name|immutableCell
argument_list|(
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

