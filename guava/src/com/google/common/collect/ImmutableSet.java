begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkNonnegative
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|concurrent
operator|.
name|LazyInit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link Set} whose contents will never change, with many other important properties detailed at  * {@link ImmutableCollection}.  *  * @since 2.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// we're overriding default serialization
DECL|class|ImmutableSet
specifier|public
specifier|abstract
class|class
name|ImmutableSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
block|{
DECL|field|SPLITERATOR_CHARACTERISTICS
specifier|static
specifier|final
name|int
name|SPLITERATOR_CHARACTERISTICS
init|=
name|ImmutableCollection
operator|.
name|SPLITERATOR_CHARACTERISTICS
operator||
name|Spliterator
operator|.
name|DISTINCT
decl_stmt|;
comment|/**    * Returns a {@code Collector} that accumulates the input elements into a new {@code    * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if    * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first    * duplicate in encounter order will appear in the result.    *    * @since 21.0    */
annotation|@
name|Beta
DECL|method|toImmutableSet ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collector
argument_list|<
name|E
argument_list|,
name|?
argument_list|,
name|ImmutableSet
argument_list|<
name|E
argument_list|>
argument_list|>
name|toImmutableSet
parameter_list|()
block|{
return|return
name|CollectCollectors
operator|.
name|toImmutableSet
argument_list|()
return|;
block|}
comment|/**    * Returns the empty immutable set. Preferred over {@link Collections#emptySet} for code    * consistency, and because the return type conveys the immutability guarantee.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
comment|// fully variant implementation (never actually produces any Es)
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|(
name|ImmutableSet
argument_list|<
name|E
argument_list|>
operator|)
name|RegularImmutableSet
operator|.
name|EMPTY
return|;
block|}
comment|/**    * Returns an immutable set containing {@code element}. Preferred over {@link    * Collections#singleton} for code consistency, {@code null} rejection, and because the return    * type conveys the immutability guarantee.    */
DECL|method|of (E element)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|element
parameter_list|)
block|{
return|return
operator|new
name|SingletonImmutableSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing the given elements, minus duplicates, in the order each was    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except    * the first are ignored.    */
DECL|method|of (E e1, E e2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|)
block|{
return|return
name|construct
argument_list|(
literal|2
argument_list|,
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing the given elements, minus duplicates, in the order each was    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except    * the first are ignored.    */
DECL|method|of (E e1, E e2, E e3)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|)
block|{
return|return
name|construct
argument_list|(
literal|3
argument_list|,
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing the given elements, minus duplicates, in the order each was    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except    * the first are ignored.    */
DECL|method|of (E e1, E e2, E e3, E e4)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|)
block|{
return|return
name|construct
argument_list|(
literal|4
argument_list|,
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing the given elements, minus duplicates, in the order each was    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except    * the first are ignored.    */
DECL|method|of (E e1, E e2, E e3, E e4, E e5)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|)
block|{
return|return
name|construct
argument_list|(
literal|5
argument_list|,
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing the given elements, minus duplicates, in the order each was    * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except    * the first are ignored.    *    *<p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.    *    * @since 3.0 (source-compatible since 2.0)    */
annotation|@
name|SafeVarargs
comment|// For Eclipse. For internal javac we have disabled this pointless type of warning.
DECL|method|of (E e1, E e2, E e3, E e4, E e5, E e6, E... others)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
modifier|...
name|others
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|others
operator|.
name|length
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|6
argument_list|,
literal|"the total number of elements must fit in an int"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|paramCount
init|=
literal|6
decl_stmt|;
name|Object
index|[]
name|elements
init|=
operator|new
name|Object
index|[
name|paramCount
operator|+
name|others
operator|.
name|length
index|]
decl_stmt|;
name|elements
index|[
literal|0
index|]
operator|=
name|e1
expr_stmt|;
name|elements
index|[
literal|1
index|]
operator|=
name|e2
expr_stmt|;
name|elements
index|[
literal|2
index|]
operator|=
name|e3
expr_stmt|;
name|elements
index|[
literal|3
index|]
operator|=
name|e4
expr_stmt|;
name|elements
index|[
literal|4
index|]
operator|=
name|e5
expr_stmt|;
name|elements
index|[
literal|5
index|]
operator|=
name|e6
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|others
argument_list|,
literal|0
argument_list|,
name|elements
argument_list|,
name|paramCount
argument_list|,
name|others
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|construct
argument_list|(
name|elements
operator|.
name|length
argument_list|,
name|elements
argument_list|)
return|;
block|}
comment|/**    * Constructs an {@code ImmutableSet} from the first {@code n} elements of the specified array. If    * {@code k} is the size of the returned {@code ImmutableSet}, then the unique elements of {@code    * elements} will be in the first {@code k} positions, and {@code elements[i] == null} for {@code    * k<= i< n}.    *    *<p>This may modify {@code elements}. Additionally, if {@code n == elements.length} and {@code    * elements} contains no duplicates, {@code elements} may be used without copying in the returned    * {@code ImmutableSet}, in which case it may no longer be modified.    *    *<p>{@code elements} may contain only values of type {@code E}.    *    * @throws NullPointerException if any of the first {@code n} elements of {@code elements} is null    */
DECL|method|construct (int n, Object... elements)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|construct
parameter_list|(
name|int
name|n
parameter_list|,
name|Object
modifier|...
name|elements
parameter_list|)
block|{
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe; elements contains only E's
name|E
name|elem
init|=
operator|(
name|E
operator|)
name|elements
index|[
literal|0
index|]
decl_stmt|;
return|return
name|of
argument_list|(
name|elem
argument_list|)
return|;
default|default:
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|builder
init|=
operator|new
name|RegularSetBuilderImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|ImmutableCollection
operator|.
name|Builder
operator|.
name|DEFAULT_INITIAL_CAPACITY
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|E
name|e
init|=
operator|(
name|E
operator|)
name|checkNotNull
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|review
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order    * each appears first in the source collection.    *    *<p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation    * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} will copy the data only once.    * This reduces the expense of habitually making defensive copies at API boundaries. However, the    * precise conditions for skipping the copy operation are undefined.    *    * @throws NullPointerException if any of {@code elements} is null    * @since 7.0 (source-compatible since 2.0)    */
DECL|method|copyOf (Collection<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
comment|/*      * TODO(lowasser): consider checking for ImmutableAsList here      * TODO(lowasser): consider checking for Multiset here      */
comment|// Don't refer to ImmutableSortedSet by name so it won't pull in all that code
if|if
condition|(
name|elements
operator|instanceof
name|ImmutableSet
operator|&&
operator|!
operator|(
name|elements
operator|instanceof
name|SortedSet
operator|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// all supported methods are covariant
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|set
init|=
operator|(
name|ImmutableSet
argument_list|<
name|E
argument_list|>
operator|)
name|elements
decl_stmt|;
if|if
condition|(
operator|!
name|set
operator|.
name|isPartialView
argument_list|()
condition|)
block|{
return|return
name|set
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|elements
operator|instanceof
name|EnumSet
condition|)
block|{
return|return
name|copyOfEnumSet
argument_list|(
operator|(
name|EnumSet
operator|)
name|elements
argument_list|)
return|;
block|}
name|Object
index|[]
name|array
init|=
name|elements
operator|.
name|toArray
argument_list|()
decl_stmt|;
return|return
name|construct
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|array
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order    * each appears first in the source iterable. This method iterates over {@code elements} only    * once.    *    *<p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation    * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only    * once. This reduces the expense of habitually making defensive copies at API boundaries.    * However, the precise conditions for skipping the copy operation are undefined.    *    * @throws NullPointerException if any of {@code elements} is null    */
DECL|method|copyOf (Iterable<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
operator|(
name|elements
operator|instanceof
name|Collection
operator|)
condition|?
name|copyOf
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
operator|)
name|elements
argument_list|)
else|:
name|copyOf
argument_list|(
name|elements
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order    * each appears first in the source iterator.    *    * @throws NullPointerException if any of {@code elements} is null    */
DECL|method|copyOf (Iterator<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
comment|// We special-case for 0 or 1 elements, but anything further is madness.
if|if
condition|(
operator|!
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
name|E
name|first
init|=
name|elements
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|(
name|first
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|first
argument_list|)
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns an immutable set containing each of {@code elements}, minus duplicates, in the order    * each appears first in the source array.    *    * @throws NullPointerException if any of {@code elements} is null    * @since 3.0    */
DECL|method|copyOf (E[] elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|E
index|[]
name|elements
parameter_list|)
block|{
switch|switch
condition|(
name|elements
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
return|return
name|construct
argument_list|(
name|elements
operator|.
name|length
argument_list|,
name|elements
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// necessary to compile against Java 8
DECL|method|copyOfEnumSet (EnumSet enumSet)
specifier|private
specifier|static
name|ImmutableSet
name|copyOfEnumSet
parameter_list|(
name|EnumSet
name|enumSet
parameter_list|)
block|{
return|return
name|ImmutableEnumSet
operator|.
name|asImmutable
argument_list|(
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|enumSet
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ImmutableSet ()
name|ImmutableSet
parameter_list|()
block|{}
comment|/** Returns {@code true} if the {@code hashCode()} method runs quickly. */
DECL|method|isHashCodeFast ()
name|boolean
name|isHashCodeFast
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|ImmutableSet
operator|&&
name|isHashCodeFast
argument_list|()
operator|&&
operator|(
operator|(
name|ImmutableSet
argument_list|<
name|?
argument_list|>
operator|)
name|object
operator|)
operator|.
name|isHashCodeFast
argument_list|()
operator|&&
name|hashCode
argument_list|()
operator|!=
name|object
operator|.
name|hashCode
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Sets
operator|.
name|equalsImpl
argument_list|(
name|this
argument_list|,
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|hashCodeImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|// This declaration is needed to make Set.iterator() and
comment|// ImmutableCollection.iterator() consistent.
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
specifier|abstract
name|UnmodifiableIterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
function_decl|;
DECL|field|asList
annotation|@
name|LazyInit
annotation|@
name|RetainedWith
specifier|private
specifier|transient
annotation|@
name|Nullable
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|asList
decl_stmt|;
annotation|@
name|Override
DECL|method|asList ()
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|asList
parameter_list|()
block|{
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|result
init|=
name|asList
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|asList
operator|=
name|createAsList
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|createAsList ()
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|createAsList
parameter_list|()
block|{
return|return
operator|new
name|RegularImmutableAsList
argument_list|<
name|E
argument_list|>
argument_list|(
name|this
argument_list|,
name|toArray
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Indexed
specifier|abstract
specifier|static
class|class
name|Indexed
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableSet
argument_list|<
name|E
argument_list|>
block|{
DECL|method|get (int index)
specifier|abstract
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
name|indexed
argument_list|(
name|size
argument_list|()
argument_list|,
name|SPLITERATOR_CHARACTERISTICS
argument_list|,
name|this
operator|::
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEach (Consumer<? super E> consumer)
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|copyIntoArray (Object[] dst, int offset)
name|int
name|copyIntoArray
parameter_list|(
name|Object
index|[]
name|dst
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|asList
argument_list|()
operator|.
name|copyIntoArray
argument_list|(
name|dst
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createAsList ()
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|createAsList
parameter_list|()
block|{
return|return
operator|new
name|ImmutableAsList
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Indexed
operator|.
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Indexed
argument_list|<
name|E
argument_list|>
name|delegateCollection
parameter_list|()
block|{
return|return
name|Indexed
operator|.
name|this
return|;
block|}
block|}
return|;
block|}
block|}
comment|/*    * This class is used to serialize all ImmutableSet instances, except for    * ImmutableEnumSet/ImmutableSortedSet, regardless of implementation type. It    * captures their "logical contents" and they are reconstructed using public    * static factories. This is necessary to ensure that the existence of a    * particular implementation type is an implementation detail.    */
DECL|class|SerializedForm
specifier|private
specifier|static
class|class
name|SerializedForm
implements|implements
name|Serializable
block|{
DECL|field|elements
specifier|final
name|Object
index|[]
name|elements
decl_stmt|;
DECL|method|SerializedForm (Object[] elements)
name|SerializedForm
parameter_list|(
name|Object
index|[]
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeReplace ()
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerializedForm
argument_list|(
name|toArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a new builder. The generated builder is equivalent to the builder created by the {@link    * Builder} constructor.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a new builder, expecting the specified number of distinct elements to be added.    *    *<p>If {@code expectedSize} is exactly the number of distinct elements added to the builder    * before {@link Builder#build} is called, the builder is likely to perform better than an unsized    * {@link #builder()} would have.    *    *<p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,    * but not exactly, the number of distinct elements added to the builder.    *    * @since 23.1    */
annotation|@
name|Beta
DECL|method|builderWithExpectedSize (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Builder
argument_list|<
name|E
argument_list|>
name|builderWithExpectedSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|expectedSize
argument_list|,
literal|"expectedSize"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
comment|/** Builds a new open-addressed hash table from the first n objects in elements. */
DECL|method|rebuildHashTable (int newTableSize, Object[] elements, int n)
specifier|static
name|Object
index|[]
name|rebuildHashTable
parameter_list|(
name|int
name|newTableSize
parameter_list|,
name|Object
index|[]
name|elements
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|Object
index|[]
name|hashTable
init|=
operator|new
name|Object
index|[
name|newTableSize
index|]
decl_stmt|;
name|int
name|mask
init|=
name|hashTable
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|e
init|=
name|elements
index|[
name|i
index|]
decl_stmt|;
name|int
name|j0
init|=
name|Hashing
operator|.
name|smear
argument_list|(
name|e
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|j0
init|;
condition|;
name|j
operator|++
control|)
block|{
name|int
name|index
init|=
name|j
operator|&
name|mask
decl_stmt|;
if|if
condition|(
name|hashTable
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|hashTable
index|[
name|index
index|]
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|hashTable
return|;
block|}
comment|/**    * A builder for creating {@code ImmutableSet} instances. Example:    *    *<pre>{@code    * static final ImmutableSet<Color> GOOGLE_COLORS =    *     ImmutableSet.<Color>builder()    *         .addAll(WEBSAFE_COLORS)    *         .add(new Color(0, 191, 255))    *         .build();    * }</pre>    *    *<p>Elements appear in the resulting set in the same order they were first added to the builder.    *    *<p>Building does not change the state of the builder, so it is still possible to add more    * elements and to build again.    *    * @since 2.0    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableCollection
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
block|{
DECL|field|impl
specifier|private
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|impl
decl_stmt|;
DECL|field|forceCopy
name|boolean
name|forceCopy
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_INITIAL_CAPACITY
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder (int capacity)
name|Builder
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|impl
operator|=
operator|new
name|RegularSetBuilderImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder (@uppressWarningsR) boolean subclass)
name|Builder
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|boolean
name|subclass
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
literal|null
expr_stmt|;
comment|// unused
block|}
annotation|@
name|VisibleForTesting
DECL|method|forceJdk ()
name|void
name|forceJdk
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|=
operator|new
name|JdkBackedSetBuilderImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
DECL|method|copyIfNecessary ()
specifier|final
name|void
name|copyIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|forceCopy
condition|)
block|{
name|copy
argument_list|()
expr_stmt|;
name|forceCopy
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|copy ()
name|void
name|copy
parameter_list|()
block|{
name|impl
operator|=
name|impl
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|add (E element)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
name|element
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|copyIfNecessary
argument_list|()
expr_stmt|;
name|impl
operator|=
name|impl
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|add (E... elements)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
comment|/**      * Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate      * elements (only the first duplicate element is added).      *      * @param elements the elements to add      * @return this {@code Builder} object      * @throws NullPointerException if {@code elements} is null or contains a null element      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addAll (Iterable<? extends E> elements)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|addAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|super
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addAll (Iterator<? extends E> elements)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|addAll
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|super
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|combine (Builder<E> other)
name|Builder
argument_list|<
name|E
argument_list|>
name|combine
parameter_list|(
name|Builder
argument_list|<
name|E
argument_list|>
name|other
parameter_list|)
block|{
name|copyIfNecessary
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|=
name|this
operator|.
name|impl
operator|.
name|combine
argument_list|(
name|other
operator|.
name|impl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|build
parameter_list|()
block|{
name|forceCopy
operator|=
literal|true
expr_stmt|;
name|impl
operator|=
name|impl
operator|.
name|review
argument_list|()
expr_stmt|;
return|return
name|impl
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/** Swappable internal implementation of an ImmutableSet.Builder. */
DECL|class|SetBuilderImpl
specifier|private
specifier|abstract
specifier|static
class|class
name|SetBuilderImpl
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|dedupedElements
name|E
index|[]
name|dedupedElements
decl_stmt|;
DECL|field|distinct
name|int
name|distinct
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|SetBuilderImpl (int expectedCapacity)
name|SetBuilderImpl
parameter_list|(
name|int
name|expectedCapacity
parameter_list|)
block|{
name|this
operator|.
name|dedupedElements
operator|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|expectedCapacity
index|]
expr_stmt|;
name|this
operator|.
name|distinct
operator|=
literal|0
expr_stmt|;
block|}
comment|/** Initializes this SetBuilderImpl with a copy of the deduped elements array from toCopy. */
DECL|method|SetBuilderImpl (SetBuilderImpl<E> toCopy)
name|SetBuilderImpl
parameter_list|(
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|toCopy
parameter_list|)
block|{
name|this
operator|.
name|dedupedElements
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|toCopy
operator|.
name|dedupedElements
argument_list|,
name|toCopy
operator|.
name|dedupedElements
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|distinct
operator|=
name|toCopy
operator|.
name|distinct
expr_stmt|;
block|}
comment|/**      * Resizes internal data structures if necessary to store the specified number of distinct      * elements.      */
DECL|method|ensureCapacity (int minCapacity)
specifier|private
name|void
name|ensureCapacity
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
if|if
condition|(
name|minCapacity
operator|>
name|dedupedElements
operator|.
name|length
condition|)
block|{
name|int
name|newCapacity
init|=
name|ImmutableCollection
operator|.
name|Builder
operator|.
name|expandedCapacity
argument_list|(
name|dedupedElements
operator|.
name|length
argument_list|,
name|minCapacity
argument_list|)
decl_stmt|;
name|dedupedElements
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dedupedElements
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity. */
DECL|method|addDedupedElement (E e)
specifier|final
name|void
name|addDedupedElement
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|distinct
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dedupedElements
index|[
name|distinct
operator|++
index|]
operator|=
name|e
expr_stmt|;
block|}
comment|/**      * Adds e to this SetBuilderImpl, returning the updated result. Only use the returned      * SetBuilderImpl, since we may switch implementations if e.g. hash flooding is detected.      */
DECL|method|add (E e)
specifier|abstract
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
name|e
parameter_list|)
function_decl|;
comment|/** Adds all the elements from the specified SetBuilderImpl to this SetBuilderImpl. */
DECL|method|combine (SetBuilderImpl<E> other)
specifier|final
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|combine
parameter_list|(
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|other
parameter_list|)
block|{
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|result
init|=
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|distinct
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|result
operator|.
name|add
argument_list|(
name|other
operator|.
name|dedupedElements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Creates a new copy of this SetBuilderImpl. Modifications to that SetBuilderImpl will not      * affect this SetBuilderImpl or sets constructed from this SetBuilderImpl via build().      */
DECL|method|copy ()
specifier|abstract
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|copy
parameter_list|()
function_decl|;
comment|/**      * Call this before build(). Does a final check on the internal data structures, e.g. shrinking      * unnecessarily large structures or detecting previously unnoticed hash flooding.      */
DECL|method|review ()
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|review
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|build
parameter_list|()
function_decl|;
block|}
comment|// We use power-of-2 tables, and this is the highest int that's a power of 2
DECL|field|MAX_TABLE_SIZE
specifier|static
specifier|final
name|int
name|MAX_TABLE_SIZE
init|=
name|Ints
operator|.
name|MAX_POWER_OF_TWO
decl_stmt|;
comment|// Represents how tightly we can pack things, as a maximum.
DECL|field|DESIRED_LOAD_FACTOR
specifier|private
specifier|static
specifier|final
name|double
name|DESIRED_LOAD_FACTOR
init|=
literal|0.7
decl_stmt|;
comment|// If the set has this many elements, it will "max out" the table size
DECL|field|CUTOFF
specifier|private
specifier|static
specifier|final
name|int
name|CUTOFF
init|=
call|(
name|int
call|)
argument_list|(
name|MAX_TABLE_SIZE
operator|*
name|DESIRED_LOAD_FACTOR
argument_list|)
decl_stmt|;
comment|/**    * Returns an array size suitable for the backing array of a hash table that uses open addressing    * with linear probing in its implementation. The returned size is the smallest power of two that    * can hold setSize elements with the desired load factor. Always returns at least setSize + 2.    */
annotation|@
name|VisibleForTesting
DECL|method|chooseTableSize (int setSize)
specifier|static
name|int
name|chooseTableSize
parameter_list|(
name|int
name|setSize
parameter_list|)
block|{
name|setSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|setSize
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Correct the size for open addressing to match desired load factor.
if|if
condition|(
name|setSize
operator|<
name|CUTOFF
condition|)
block|{
comment|// Round up to the next highest power of 2.
name|int
name|tableSize
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|setSize
operator|-
literal|1
argument_list|)
operator|<<
literal|1
decl_stmt|;
while|while
condition|(
name|tableSize
operator|*
name|DESIRED_LOAD_FACTOR
operator|<
name|setSize
condition|)
block|{
name|tableSize
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
name|tableSize
return|;
block|}
comment|// The table can't be completely full or we'll get infinite reprobes
name|checkArgument
argument_list|(
name|setSize
operator|<
name|MAX_TABLE_SIZE
argument_list|,
literal|"collection too large"
argument_list|)
expr_stmt|;
return|return
name|MAX_TABLE_SIZE
return|;
block|}
comment|/**    * We attempt to detect deliberate hash flooding attempts, and if one is detected, fall back to a    * wrapper around j.u.HashSet, which has built in flooding protection. HASH_FLOODING_FPP is the    * maximum allowed probability of falsely detecting a hash flooding attack if the input is    * randomly generated.    *    *<p>MAX_RUN_MULTIPLIER was determined experimentally to match this FPP.    */
DECL|field|HASH_FLOODING_FPP
specifier|static
specifier|final
name|double
name|HASH_FLOODING_FPP
init|=
literal|0.001
decl_stmt|;
comment|// NB: yes, this is surprisingly high, but that's what the experiments said was necessary
DECL|field|MAX_RUN_MULTIPLIER
specifier|static
specifier|final
name|int
name|MAX_RUN_MULTIPLIER
init|=
literal|12
decl_stmt|;
comment|/**    * Checks the whole hash table for poor hash distribution. Takes O(n).    *    *<p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many exactly    * matching hash codes, which would cause construction to take O(n^2), but can't detect e.g. hash    * codes adversarially designed to go into ascending table locations, which keeps construction    * O(n) (as desired) but then can have O(n) queries later.    *    *<p>If this returns false, then no query can take more than O(log n).    *    *<p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains    * operations take expected O(1) time but with high probability take O(log n) for at least some    * element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)    */
DECL|method|hashFloodingDetected (Object[] hashTable)
specifier|static
name|boolean
name|hashFloodingDetected
parameter_list|(
name|Object
index|[]
name|hashTable
parameter_list|)
block|{
name|int
name|maxRunBeforeFallback
init|=
name|maxRunBeforeFallback
argument_list|(
name|hashTable
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Test for a run wrapping around the end of the table, then check for runs in the middle.
name|int
name|endOfStartRun
decl_stmt|;
for|for
control|(
name|endOfStartRun
operator|=
literal|0
init|;
name|endOfStartRun
operator|<
name|hashTable
operator|.
name|length
condition|;
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|endOfStartRun
index|]
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|endOfStartRun
operator|++
expr_stmt|;
if|if
condition|(
name|endOfStartRun
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|int
name|startOfEndRun
decl_stmt|;
for|for
control|(
name|startOfEndRun
operator|=
name|hashTable
operator|.
name|length
operator|-
literal|1
init|;
name|startOfEndRun
operator|>
name|endOfStartRun
condition|;
name|startOfEndRun
operator|--
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|startOfEndRun
index|]
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|endOfStartRun
operator|+
operator|(
name|hashTable
operator|.
name|length
operator|-
literal|1
operator|-
name|startOfEndRun
operator|)
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|endOfStartRun
operator|+
literal|1
init|;
name|i
operator|<
name|startOfEndRun
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|runLength
init|=
literal|0
init|;
name|i
operator|<
name|startOfEndRun
operator|&&
name|hashTable
index|[
name|i
index|]
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|runLength
operator|++
expr_stmt|;
if|if
condition|(
name|runLength
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * If more than this many consecutive positions are filled in a table of the specified size,    * report probable hash flooding.    */
DECL|method|maxRunBeforeFallback (int tableSize)
specifier|static
name|int
name|maxRunBeforeFallback
parameter_list|(
name|int
name|tableSize
parameter_list|)
block|{
return|return
name|MAX_RUN_MULTIPLIER
operator|*
name|IntMath
operator|.
name|log2
argument_list|(
name|tableSize
argument_list|,
name|RoundingMode
operator|.
name|UNNECESSARY
argument_list|)
return|;
block|}
comment|/**    * Default implementation of the guts of ImmutableSet.Builder, creating an open-addressed hash    * table and deduplicating elements as they come, so it only allocates O(max(distinct,    * expectedCapacity)) rather than O(calls to add).    *    *<p>This implementation attempts to detect hash flooding, and if it's identified, falls back to    * JdkBackedSetBuilderImpl.    */
DECL|class|RegularSetBuilderImpl
specifier|private
specifier|static
specifier|final
class|class
name|RegularSetBuilderImpl
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
block|{
DECL|field|hashTable
specifier|private
name|Object
index|[]
name|hashTable
decl_stmt|;
DECL|field|maxRunBeforeFallback
specifier|private
name|int
name|maxRunBeforeFallback
decl_stmt|;
DECL|field|expandTableThreshold
specifier|private
name|int
name|expandTableThreshold
decl_stmt|;
DECL|field|hashCode
specifier|private
name|int
name|hashCode
decl_stmt|;
DECL|method|RegularSetBuilderImpl (int expectedCapacity)
name|RegularSetBuilderImpl
parameter_list|(
name|int
name|expectedCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|expectedCapacity
argument_list|)
expr_stmt|;
name|int
name|tableSize
init|=
name|chooseTableSize
argument_list|(
name|expectedCapacity
argument_list|)
decl_stmt|;
name|this
operator|.
name|hashTable
operator|=
operator|new
name|Object
index|[
name|tableSize
index|]
expr_stmt|;
name|this
operator|.
name|maxRunBeforeFallback
operator|=
name|maxRunBeforeFallback
argument_list|(
name|tableSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|expandTableThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|DESIRED_LOAD_FACTOR
operator|*
name|tableSize
argument_list|)
expr_stmt|;
block|}
DECL|method|RegularSetBuilderImpl (RegularSetBuilderImpl<E> toCopy)
name|RegularSetBuilderImpl
parameter_list|(
name|RegularSetBuilderImpl
argument_list|<
name|E
argument_list|>
name|toCopy
parameter_list|)
block|{
name|super
argument_list|(
name|toCopy
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashTable
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|toCopy
operator|.
name|hashTable
argument_list|,
name|toCopy
operator|.
name|hashTable
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxRunBeforeFallback
operator|=
name|toCopy
operator|.
name|maxRunBeforeFallback
expr_stmt|;
name|this
operator|.
name|expandTableThreshold
operator|=
name|toCopy
operator|.
name|expandTableThreshold
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|toCopy
operator|.
name|hashCode
expr_stmt|;
block|}
DECL|method|ensureTableCapacity (int minCapacity)
name|void
name|ensureTableCapacity
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
if|if
condition|(
name|minCapacity
operator|>
name|expandTableThreshold
operator|&&
name|hashTable
operator|.
name|length
operator|<
name|MAX_TABLE_SIZE
condition|)
block|{
name|int
name|newTableSize
init|=
name|hashTable
operator|.
name|length
operator|*
literal|2
decl_stmt|;
name|hashTable
operator|=
name|rebuildHashTable
argument_list|(
name|newTableSize
argument_list|,
name|dedupedElements
argument_list|,
name|distinct
argument_list|)
expr_stmt|;
name|maxRunBeforeFallback
operator|=
name|maxRunBeforeFallback
argument_list|(
name|newTableSize
argument_list|)
expr_stmt|;
name|expandTableThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|DESIRED_LOAD_FACTOR
operator|*
name|newTableSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|add (E e)
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|int
name|eHash
init|=
name|e
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|int
name|i0
init|=
name|Hashing
operator|.
name|smear
argument_list|(
name|eHash
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTable
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|i0
init|;
name|i
operator|-
name|i0
operator|<
name|maxRunBeforeFallback
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|i
operator|&
name|mask
decl_stmt|;
name|Object
name|tableEntry
init|=
name|hashTable
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|tableEntry
operator|==
literal|null
condition|)
block|{
name|addDedupedElement
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|hashTable
index|[
name|index
index|]
operator|=
name|e
expr_stmt|;
name|hashCode
operator|+=
name|eHash
expr_stmt|;
name|ensureTableCapacity
argument_list|(
name|distinct
argument_list|)
expr_stmt|;
comment|// rebuilds table if necessary
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|tableEntry
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// not a new element, ignore
return|return
name|this
return|;
block|}
block|}
comment|// we fell out of the loop due to a long run; fall back to JDK impl
return|return
operator|new
name|JdkBackedSetBuilderImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy ()
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|copy
parameter_list|()
block|{
return|return
operator|new
name|RegularSetBuilderImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|review ()
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|review
parameter_list|()
block|{
name|int
name|targetTableSize
init|=
name|chooseTableSize
argument_list|(
name|distinct
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetTableSize
operator|*
literal|2
operator|<
name|hashTable
operator|.
name|length
condition|)
block|{
name|hashTable
operator|=
name|rebuildHashTable
argument_list|(
name|targetTableSize
argument_list|,
name|dedupedElements
argument_list|,
name|distinct
argument_list|)
expr_stmt|;
block|}
return|return
name|hashFloodingDetected
argument_list|(
name|hashTable
argument_list|)
condition|?
operator|new
name|JdkBackedSetBuilderImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|this
argument_list|)
else|:
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|build
parameter_list|()
block|{
switch|switch
condition|(
name|distinct
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|dedupedElements
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
name|Object
index|[]
name|elements
init|=
operator|(
name|distinct
operator|==
name|dedupedElements
operator|.
name|length
operator|)
condition|?
name|dedupedElements
else|:
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dedupedElements
argument_list|,
name|distinct
argument_list|)
decl_stmt|;
return|return
operator|new
name|RegularImmutableSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|elements
argument_list|,
name|hashCode
argument_list|,
name|hashTable
argument_list|,
name|hashTable
operator|.
name|length
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * SetBuilderImpl version that uses a JDK HashSet, which has built in hash flooding protection.    */
DECL|class|JdkBackedSetBuilderImpl
specifier|private
specifier|static
specifier|final
class|class
name|JdkBackedSetBuilderImpl
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|delegate
decl_stmt|;
DECL|method|JdkBackedSetBuilderImpl (SetBuilderImpl<E> toCopy)
name|JdkBackedSetBuilderImpl
parameter_list|(
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|toCopy
parameter_list|)
block|{
name|super
argument_list|(
name|toCopy
argument_list|)
expr_stmt|;
comment|// initializes dedupedElements and distinct
name|delegate
operator|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|distinct
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|distinct
condition|;
name|i
operator|++
control|)
block|{
name|delegate
operator|.
name|add
argument_list|(
name|dedupedElements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|add (E e)
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|delegate
operator|.
name|add
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|addDedupedElement
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|copy ()
name|SetBuilderImpl
argument_list|<
name|E
argument_list|>
name|copy
parameter_list|()
block|{
return|return
operator|new
name|JdkBackedSetBuilderImpl
argument_list|<>
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|build
parameter_list|()
block|{
switch|switch
condition|(
name|distinct
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|dedupedElements
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
return|return
operator|new
name|JdkBackedImmutableSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|delegate
argument_list|,
name|ImmutableList
operator|.
name|asImmutableList
argument_list|(
name|dedupedElements
argument_list|,
name|distinct
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

