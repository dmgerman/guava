begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Statistics about the performance of a {@link Cache}. Instances of this class are immutable.  *  *<p>Cache statistics are incremented according to the following rules:  *  *<ul>  *<li>A cache lookup that encounters an existing cache entry will increment {@code hitCount}.  *<li>The first cache lookup that encounters a missing cache entry will create a new entry. After  *     successful creation it will increment {@code missCount} and {@code createCount}, and add the  *     total creation time, in nanoseconds, to {@code totalCreateTime}.  *<li>Cache lookups that encounter a missing cache entry that is pending creation will await  *     successful creation and then increment {@code missCount}.  *<li>No stats are modified when entry creation throws an exception, neither for the creating  *     thread nor for waiting threads.  *<li>When an entry is evicted from the cache, {@code evictionCount} is incremented.  *<li>No stats are modified when a cache entry is invalidated or manually removed.  *<li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of  *     the cache.  *</ul>  *  * @author Charles Fry  * @since Guava release 10  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|CacheStats
specifier|public
specifier|final
class|class
name|CacheStats
block|{
DECL|field|hitCount
specifier|private
specifier|final
name|long
name|hitCount
decl_stmt|;
DECL|field|missCount
specifier|private
specifier|final
name|long
name|missCount
decl_stmt|;
DECL|field|createCount
specifier|private
specifier|final
name|long
name|createCount
decl_stmt|;
DECL|field|totalCreateTime
specifier|private
specifier|final
name|long
name|totalCreateTime
decl_stmt|;
DECL|field|evictionCount
specifier|private
specifier|final
name|long
name|evictionCount
decl_stmt|;
comment|/**    * Constructs a new {@code CacheStats} instance.    *    *<p>Five parameters of the same type in a row is a bad thing, but this class is not constructed    * by end users and is too fine-grained for a builder.    */
DECL|method|CacheStats (long hitCount, long missCount, long createCount, long totalCreateTime, long evictionCount)
specifier|public
name|CacheStats
parameter_list|(
name|long
name|hitCount
parameter_list|,
name|long
name|missCount
parameter_list|,
name|long
name|createCount
parameter_list|,
name|long
name|totalCreateTime
parameter_list|,
name|long
name|evictionCount
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|hitCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|missCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|createCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|totalCreateTime
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|evictionCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|hitCount
operator|=
name|hitCount
expr_stmt|;
name|this
operator|.
name|missCount
operator|=
name|missCount
expr_stmt|;
name|this
operator|.
name|createCount
operator|=
name|createCount
expr_stmt|;
name|this
operator|.
name|totalCreateTime
operator|=
name|totalCreateTime
expr_stmt|;
name|this
operator|.
name|evictionCount
operator|=
name|evictionCount
expr_stmt|;
block|}
comment|/**    * Returns the number of times {@link Cache#get} has returned either a cached or uncached value.    * This is defined as {@code hitCount() + missCount()}.    */
DECL|method|requestCount ()
specifier|public
name|long
name|requestCount
parameter_list|()
block|{
return|return
name|hitCount
operator|+
name|missCount
return|;
block|}
comment|/**    * Returns the number of times {@link Cache#get} has returned a cached value.    */
DECL|method|hitCount ()
specifier|public
name|long
name|hitCount
parameter_list|()
block|{
return|return
name|hitCount
return|;
block|}
comment|/**    * Returns the ratio of cache requests which were hits. This is defined as    * {@code hitCount() / requestCount()}, or {@code 1.0} when {@code requestCount() == 0}.    * Note that {@code hitRate() + missRate() =~ 1.0}.    */
DECL|method|hitRate ()
specifier|public
name|double
name|hitRate
parameter_list|()
block|{
name|long
name|requestCount
init|=
name|requestCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|requestCount
operator|==
literal|0
operator|)
condition|?
literal|1.0
else|:
operator|(
name|double
operator|)
name|hitCount
operator|/
name|requestCount
return|;
block|}
comment|/**    * Returns the number of times {@link Cache#get} has returned an uncached (newly created) value,    * or null. Multiple concurrent calls to {@link Cache#get} on an absent value can result in    * multiple misses, all returning the results of a single creation.    */
DECL|method|missCount ()
specifier|public
name|long
name|missCount
parameter_list|()
block|{
return|return
name|missCount
return|;
block|}
comment|/**    * Returns the ratio of cache requests which were misses. This is defined as    * {@code missCount() / requestCount()}, or {@code 0.0} when {@code requestCount() == 0}.    * Note that {@code hitRate() + missRate() =~ 1.0}.    */
DECL|method|missRate ()
specifier|public
name|double
name|missRate
parameter_list|()
block|{
name|long
name|requestCount
init|=
name|requestCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|requestCount
operator|==
literal|0
operator|)
condition|?
literal|0.0
else|:
operator|(
name|double
operator|)
name|missCount
operator|/
name|requestCount
return|;
block|}
comment|/**    * Returns the number of times {@link Cache#get} has successfully created a new value. This    * differs from {@link #missCount} only in the case of concurrent calls to {@link Cache#get} on an    * absent value, in which case multiple simultaneous misses will result in a single creation.    * Thus, the returned value can never exceed the value of {@code missCount()}.    */
DECL|method|createCount ()
specifier|public
name|long
name|createCount
parameter_list|()
block|{
return|return
name|createCount
return|;
block|}
comment|/**    * Returns the total number of nanoseconds the cache has spent creating new values. This can be    * used to calculate the miss penalty. This value is increased every time {@code createCount()}    * is incremented.    */
DECL|method|totalCreateTime ()
specifier|public
name|long
name|totalCreateTime
parameter_list|()
block|{
return|return
name|totalCreateTime
return|;
block|}
comment|/**    * Returns the average time spent creating new values. This is defined as    * {@code totalCreateTime() / createCount()}.    */
DECL|method|averageCreatePenalty ()
specifier|public
name|double
name|averageCreatePenalty
parameter_list|()
block|{
return|return
operator|(
name|createCount
operator|==
literal|0
operator|)
condition|?
literal|0.0
else|:
operator|(
name|double
operator|)
name|totalCreateTime
operator|/
name|createCount
return|;
block|}
comment|/**    * Returns the number of times an entry has been evicted. This count does not include manual    * {@linkplain Cache#invalidate invalidations}.    */
DECL|method|evictionCount ()
specifier|public
name|long
name|evictionCount
parameter_list|()
block|{
return|return
name|evictionCount
return|;
block|}
comment|/**    * Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}    * and {@code other}.    *    * @throws IllegalArgumentException if any value in {@code other} is greater than the    *     corresponding value in this instance (this will not happen if {@code other} was retrieved    *     from the same cache at an earlier time)    */
DECL|method|minus (CacheStats other)
specifier|public
name|CacheStats
name|minus
parameter_list|(
name|CacheStats
name|other
parameter_list|)
block|{
return|return
operator|new
name|CacheStats
argument_list|(
name|hitCount
operator|-
name|other
operator|.
name|hitCount
argument_list|,
name|missCount
operator|-
name|other
operator|.
name|missCount
argument_list|,
name|createCount
operator|-
name|other
operator|.
name|createCount
argument_list|,
name|totalCreateTime
operator|-
name|other
operator|.
name|totalCreateTime
argument_list|,
name|evictionCount
operator|-
name|other
operator|.
name|evictionCount
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|hitCount
argument_list|,
name|missCount
argument_list|,
name|createCount
argument_list|,
name|totalCreateTime
argument_list|,
name|evictionCount
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|CacheStats
condition|)
block|{
name|CacheStats
name|other
init|=
operator|(
name|CacheStats
operator|)
name|object
decl_stmt|;
return|return
name|hitCount
operator|==
name|other
operator|.
name|hitCount
operator|&&
name|missCount
operator|==
name|other
operator|.
name|missCount
operator|&&
name|createCount
operator|==
name|other
operator|.
name|createCount
operator|&&
name|totalCreateTime
operator|==
name|other
operator|.
name|totalCreateTime
operator|&&
name|evictionCount
operator|==
name|other
operator|.
name|evictionCount
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitCount"
argument_list|,
name|hitCount
argument_list|)
operator|.
name|add
argument_list|(
literal|"missCount"
argument_list|,
name|missCount
argument_list|)
operator|.
name|add
argument_list|(
literal|"createCount"
argument_list|,
name|createCount
argument_list|)
operator|.
name|add
argument_list|(
literal|"totalCreateTime"
argument_list|,
name|totalCreateTime
argument_list|)
operator|.
name|add
argument_list|(
literal|"evictionCount"
argument_list|,
name|evictionCount
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

