begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedLists
operator|.
name|Relation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable sorted multiset with one or more distinct elements.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|RegularImmutableSortedMultiset
specifier|final
class|class
name|RegularImmutableSortedMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
block|{
DECL|class|CumulativeCountEntry
specifier|private
specifier|static
specifier|final
class|class
name|CumulativeCountEntry
parameter_list|<
name|E
parameter_list|>
extends|extends
name|Multisets
operator|.
name|AbstractEntry
argument_list|<
name|E
argument_list|>
block|{
DECL|field|element
specifier|final
name|E
name|element
decl_stmt|;
DECL|field|count
specifier|final
name|int
name|count
decl_stmt|;
DECL|field|cumulativeCount
specifier|final
name|long
name|cumulativeCount
decl_stmt|;
DECL|method|CumulativeCountEntry (E element, int count, @Nullable CumulativeCountEntry<E> previous)
name|CumulativeCountEntry
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|,
annotation|@
name|Nullable
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|previous
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|cumulativeCount
operator|=
name|count
operator|+
operator|(
operator|(
name|previous
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|previous
operator|.
name|cumulativeCount
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getElement ()
specifier|public
name|E
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
annotation|@
name|Override
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
DECL|method|createFromSorted (Comparator<? super E> comparator, List<? extends Multiset.Entry<E>> entries)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|RegularImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
name|createFromSorted
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|List
argument_list|<
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
argument_list|>
name|newEntries
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|newEntries
operator|.
name|add
argument_list|(
name|previous
operator|=
operator|new
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|previous
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegularImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|comparator
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|newEntries
argument_list|)
argument_list|)
return|;
block|}
DECL|field|entries
specifier|final
specifier|transient
name|ImmutableList
argument_list|<
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
decl_stmt|;
DECL|method|RegularImmutableSortedMultiset ( Comparator<? super E> comparator, ImmutableList<CumulativeCountEntry<E>> entries)
name|RegularImmutableSortedMultiset
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|ImmutableList
argument_list|<
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|super
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
assert|assert
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
assert|;
block|}
DECL|method|elementList ()
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|elementList
parameter_list|()
block|{
return|return
operator|new
name|TransformedImmutableList
argument_list|<
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
argument_list|(
name|entries
argument_list|)
block|{
annotation|@
name|Override
name|E
name|transform
parameter_list|(
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createElementSet ()
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|elementList
argument_list|()
argument_list|,
name|comparator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createDescendingElementSet ()
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|createDescendingElementSet
parameter_list|()
block|{
return|return
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|elementList
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|,
name|reverseComparator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|entryIterator ()
name|UnmodifiableIterator
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
return|return
operator|(
name|UnmodifiableIterator
operator|)
name|entries
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|descendingEntryIterator ()
name|UnmodifiableIterator
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|descendingEntryIterator
parameter_list|()
block|{
return|return
operator|(
name|UnmodifiableIterator
operator|)
name|entries
operator|.
name|reverse
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|firstEntry ()
specifier|public
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|firstEntry
parameter_list|()
block|{
return|return
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lastEntry ()
specifier|public
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|lastEntry
parameter_list|()
block|{
return|return
name|entries
operator|.
name|get
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|firstEntry
init|=
name|firstEntry
argument_list|()
decl_stmt|;
name|CumulativeCountEntry
argument_list|<
name|E
argument_list|>
name|lastEntry
init|=
name|lastEntry
argument_list|()
decl_stmt|;
return|return
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|lastEntry
operator|.
name|cumulativeCount
operator|-
name|firstEntry
operator|.
name|cumulativeCount
operator|+
name|firstEntry
operator|.
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|distinctElements ()
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|entries
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|entries
operator|.
name|isPartialView
argument_list|()
return|;
block|}
DECL|method|index (Object key, Relation relation)
name|int
name|index
parameter_list|(
name|Object
name|key
parameter_list|,
name|Relation
name|relation
parameter_list|)
block|{
return|return
name|SortedLists
operator|.
name|binarySearch
argument_list|(
name|elementList
argument_list|()
argument_list|,
name|key
argument_list|,
name|unsafeComparator
argument_list|()
argument_list|,
name|relation
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|count (@ullable Object element)
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
try|try
block|{
name|int
name|index
init|=
name|index
argument_list|(
name|element
argument_list|,
name|Relation
operator|.
name|EQUAL
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|>=
literal|0
operator|)
condition|?
name|entries
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getCount
argument_list|()
else|:
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|headMultiset (E upperBound, BoundType boundType)
specifier|public
name|ImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
name|headMultiset
parameter_list|(
name|E
name|upperBound
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
name|int
name|index
init|=
name|index
argument_list|(
name|checkNotNull
argument_list|(
name|upperBound
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|boundType
argument_list|)
operator|==
name|BoundType
operator|.
name|CLOSED
condition|?
name|Relation
operator|.
name|FLOOR
else|:
name|Relation
operator|.
name|LOWER
argument_list|)
decl_stmt|;
return|return
name|createSubMultiset
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tailMultiset (E lowerBound, BoundType boundType)
specifier|public
name|ImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
name|tailMultiset
parameter_list|(
name|E
name|lowerBound
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
name|int
name|index
init|=
name|index
argument_list|(
name|checkNotNull
argument_list|(
name|lowerBound
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|boundType
argument_list|)
operator|==
name|BoundType
operator|.
name|CLOSED
condition|?
name|Relation
operator|.
name|CEILING
else|:
name|Relation
operator|.
name|HIGHER
argument_list|)
decl_stmt|;
return|return
name|createSubMultiset
argument_list|(
name|index
argument_list|,
name|distinctElements
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createSubMultiset (int newFromIndex, int newToIndex)
specifier|private
name|ImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
name|createSubMultiset
parameter_list|(
name|int
name|newFromIndex
parameter_list|,
name|int
name|newToIndex
parameter_list|)
block|{
if|if
condition|(
name|newFromIndex
operator|==
literal|0
operator|&&
name|newToIndex
operator|==
name|entries
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|newFromIndex
operator|>=
name|newToIndex
condition|)
block|{
return|return
name|emptyMultiset
argument_list|(
name|comparator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RegularImmutableSortedMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|comparator
argument_list|()
argument_list|,
name|entries
operator|.
name|subList
argument_list|(
name|newFromIndex
argument_list|,
name|newToIndex
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

