begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * A navigable set which forwards all its method calls to another navigable set. Subclasses should  * override one or more methods to modify the behavior of the backing set as desired per the<a  * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.  *  *<p><i>Warning:</i> The methods of {@code ForwardingNavigableSet} forward<i>indiscriminately</i>  * to the methods of the delegate. For example, overriding {@link #add} alone<i>will not</i>  * change the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you  * should override {@code addAll} as well, either providing your own implementation, or delegating  * to the provided {@code standardAddAll} method.  *  *<p>Each of the {@code standard} methods uses the set's comparator (or the natural ordering of  * the elements, if there is no comparator) to test element equality. As a result, if the  * comparator is not consistent with equals, some of the standard implementations may violate the  * {@code Set} contract.  *  *<p>The {@code standard} methods and the collection views they return are not guaranteed to be  * thread-safe, even when all of the methods that they depend on are thread-safe.  *  * @author Louis Wasserman  * @since 12.0  */
end_comment

begin_class
DECL|class|ForwardingNavigableSet
specifier|public
specifier|abstract
class|class
name|ForwardingNavigableSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ForwardingSortedSet
argument_list|<
name|E
argument_list|>
implements|implements
name|NavigableSet
argument_list|<
name|E
argument_list|>
block|{
comment|/** Constructor for use by subclasses. */
DECL|method|ForwardingNavigableSet ()
specifier|protected
name|ForwardingNavigableSet
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
specifier|abstract
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|lower (E e)
specifier|public
name|E
name|lower
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lower
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of    * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may    * wish to override {@link #lower} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardLower (E e)
specifier|protected
name|E
name|standardLower
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|getNext
argument_list|(
name|headSet
argument_list|(
name|e
argument_list|,
literal|false
argument_list|)
operator|.
name|descendingIterator
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|floor (E e)
specifier|public
name|E
name|floor
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|floor
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of    * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may    * wish to override {@link #floor} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardFloor (E e)
specifier|protected
name|E
name|standardFloor
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|getNext
argument_list|(
name|headSet
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
operator|.
name|descendingIterator
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ceiling (E e)
specifier|public
name|E
name|ceiling
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|ceiling
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of    * {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may    * wish to override {@link #ceiling} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardCeiling (E e)
specifier|protected
name|E
name|standardCeiling
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|getNext
argument_list|(
name|tailSet
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|higher (E e)
specifier|public
name|E
name|higher
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|higher
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #higher} in terms of the {@code iterator} method of    * {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may    * wish to override {@link #higher} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardHigher (E e)
specifier|protected
name|E
name|standardHigher
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|getNext
argument_list|(
name|tailSet
argument_list|(
name|e
argument_list|,
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|pollFirst ()
specifier|public
name|E
name|pollFirst
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollFirst
argument_list|()
return|;
block|}
comment|/**    * A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you    * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this    * implementation.    */
annotation|@
name|Beta
DECL|method|standardPollFirst ()
specifier|protected
name|E
name|standardPollFirst
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|pollNext
argument_list|(
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|pollLast ()
specifier|public
name|E
name|pollLast
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollLast
argument_list|()
return|;
block|}
comment|/**    * A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.    * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to    * forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardPollLast ()
specifier|protected
name|E
name|standardPollLast
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|pollNext
argument_list|(
name|delegate
argument_list|()
operator|.
name|descendingIterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Beta
DECL|method|standardFirst ()
specifier|protected
name|E
name|standardFirst
parameter_list|()
block|{
return|return
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Beta
DECL|method|standardLast ()
specifier|protected
name|E
name|standardLast
parameter_list|()
block|{
return|return
name|descendingIterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|descendingSet ()
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|descendingSet
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|descendingSet
argument_list|()
return|;
block|}
comment|/**    * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods    * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}.    *    *<p>In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to    * forward to this implementation or a subclass thereof.    *    * @since 12.0    */
annotation|@
name|Beta
DECL|class|StandardDescendingSet
specifier|protected
class|class
name|StandardDescendingSet
extends|extends
name|Sets
operator|.
name|DescendingSet
argument_list|<
name|E
argument_list|>
block|{
comment|/** Constructor for use by subclasses. */
DECL|method|StandardDescendingSet ()
specifier|public
name|StandardDescendingSet
parameter_list|()
block|{
name|super
argument_list|(
name|ForwardingNavigableSet
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|descendingIterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|descendingIterator
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|descendingIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|subSet ( E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|subSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|E
name|toElement
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|subSet
argument_list|(
name|fromElement
argument_list|,
name|fromInclusive
argument_list|,
name|toElement
argument_list|,
name|toInclusive
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the    * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override    * {@link #subSet(Object, boolean, Object, boolean)} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardSubSet ( E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
specifier|protected
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|standardSubSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|E
name|toElement
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
return|return
name|tailSet
argument_list|(
name|fromElement
argument_list|,
name|fromInclusive
argument_list|)
operator|.
name|headSet
argument_list|(
name|toElement
argument_list|,
name|toInclusive
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #subSet(Object, Object)} in terms of the    * {@link #subSet(Object, boolean, Object, boolean)} method. If you override    * {@link #subSet(Object, boolean, Object, boolean)}, you may wish to override    * {@link #subSet(Object, Object)} to forward to this implementation.    */
annotation|@
name|Beta
annotation|@
name|Override
DECL|method|standardSubSet (E fromElement, E toElement)
specifier|protected
name|SortedSet
argument_list|<
name|E
argument_list|>
name|standardSubSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|E
name|toElement
parameter_list|)
block|{
return|return
name|subSet
argument_list|(
name|fromElement
argument_list|,
literal|true
argument_list|,
name|toElement
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|headSet (E toElement, boolean inclusive)
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|headSet
parameter_list|(
name|E
name|toElement
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|headSet
argument_list|(
name|toElement
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #headSet(Object)} in terms of the    * {@link #headSet(Object, boolean)} method. If you override    * {@link #headSet(Object, boolean)}, you may wish to override    * {@link #headSet(Object)} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardHeadSet (E toElement)
specifier|protected
name|SortedSet
argument_list|<
name|E
argument_list|>
name|standardHeadSet
parameter_list|(
name|E
name|toElement
parameter_list|)
block|{
return|return
name|headSet
argument_list|(
name|toElement
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tailSet (E fromElement, boolean inclusive)
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|tailSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|tailSet
argument_list|(
name|fromElement
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
comment|/**    * A sensible definition of {@link #tailSet(Object)} in terms of the    * {@link #tailSet(Object, boolean)} method. If you override    * {@link #tailSet(Object, boolean)}, you may wish to override    * {@link #tailSet(Object)} to forward to this implementation.    */
annotation|@
name|Beta
DECL|method|standardTailSet (E fromElement)
specifier|protected
name|SortedSet
argument_list|<
name|E
argument_list|>
name|standardTailSet
parameter_list|(
name|E
name|fromElement
parameter_list|)
block|{
return|return
name|tailSet
argument_list|(
name|fromElement
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

