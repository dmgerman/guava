begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkEntryNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkNonnegative
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|DoNotCall
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|DoNotMock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|concurrent
operator|.
name|LazyInit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BinaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link Map} whose contents will never change, with many other important properties detailed at  * {@link ImmutableCollection}.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.  *  * @author Jesse Wilson  * @author Kevin Bourrillion  * @since 2.0  */
end_comment

begin_class
annotation|@
name|DoNotMock
argument_list|(
literal|"Use ImmutableMap.of or another implementation"
argument_list|)
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// we're overriding default serialization
DECL|class|ImmutableMap
specifier|public
specifier|abstract
class|class
name|ImmutableMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
comment|/**    * Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys    * and values are the result of applying the provided mapping functions to the input elements.    * Entries appear in the result {@code ImmutableMap} in encounter order.    *    *<p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code    * IllegalArgumentException} is thrown when the collection operation is performed. (This differs    * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which    * throws an {@code IllegalStateException}.)    *    * @since 21.0    */
DECL|method|toImmutableMap ( Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|,
name|V
parameter_list|>
name|Collector
argument_list|<
name|T
argument_list|,
name|?
argument_list|,
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|toImmutableMap
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|K
argument_list|>
name|keyFunction
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|valueFunction
parameter_list|)
block|{
return|return
name|CollectCollectors
operator|.
name|toImmutableMap
argument_list|(
name|keyFunction
argument_list|,
name|valueFunction
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys    * and values are the result of applying the provided mapping functions to the input elements.    *    *<p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the    * values are merged using the specified merging function. Entries will appear in the encounter    * order of the first occurrence of the key.    *    * @since 21.0    */
DECL|method|toImmutableMap ( Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|,
name|V
parameter_list|>
name|Collector
argument_list|<
name|T
argument_list|,
name|?
argument_list|,
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|toImmutableMap
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|K
argument_list|>
name|keyFunction
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|valueFunction
parameter_list|,
name|BinaryOperator
argument_list|<
name|V
argument_list|>
name|mergeFunction
parameter_list|)
block|{
return|return
name|CollectCollectors
operator|.
name|toImmutableMap
argument_list|(
name|keyFunction
argument_list|,
name|valueFunction
argument_list|,
name|mergeFunction
argument_list|)
return|;
block|}
comment|/**    * Returns the empty map. This map behaves and performs comparably to {@link    * Collections#emptyMap}, and is preferable mainly for consistency and maintainability of your    * code.    *    *<p><b>Performance note:</b> the instance returned is a singleton.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|(
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|RegularImmutableMap
operator|.
name|EMPTY
return|;
block|}
comment|/**    * Returns an immutable map containing a single entry. This map behaves and performs comparably to    * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable    * mainly for consistency and maintainability of your code.    */
DECL|method|of (K k1, V v1)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|)
block|{
return|return
name|ImmutableBiMap
operator|.
name|of
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the given entries, in order.    *    * @throws IllegalArgumentException if duplicate keys are provided    */
DECL|method|of (K k1, V v1, K k2, V v2)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|)
block|{
return|return
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the given entries, in order.    *    * @throws IllegalArgumentException if duplicate keys are provided    */
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|)
block|{
return|return
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the given entries, in order.    *    * @throws IllegalArgumentException if duplicate keys are provided    */
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|)
block|{
return|return
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k4
argument_list|,
name|v4
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the given entries, in order.    *    * @throws IllegalArgumentException if duplicate keys are provided    */
DECL|method|of ( K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|,
name|K
name|k5
parameter_list|,
name|V
name|v5
parameter_list|)
block|{
return|return
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k4
argument_list|,
name|v4
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k5
argument_list|,
name|v5
argument_list|)
argument_list|)
return|;
block|}
comment|// looking for of() with> 5 entries? Use the builder instead.
comment|/**    * Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry    * with those values.    *    *<p>A call to {@link Entry#setValue} on the returned entry will always throw {@link    * UnsupportedOperationException}.    */
DECL|method|entryOf (K key, V value)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entryOf
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a new builder. The generated builder is equivalent to the builder created by the {@link    * Builder} constructor.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|()
return|;
block|}
comment|/**    * Returns a new builder, expecting the specified number of entries to be added.    *    *<p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link    * Builder#build} is called, the builder is likely to perform better than an unsized {@link    * #builder()} would have.    *    *<p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,    * but not exactly, the number of entries added to the builder.    *    * @since 23.1    */
annotation|@
name|Beta
DECL|method|builderWithExpectedSize (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builderWithExpectedSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|expectedSize
argument_list|,
literal|"expectedSize"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
DECL|method|checkNoConflict ( boolean safe, String conflictDescription, Entry<?, ?> entry1, Entry<?, ?> entry2)
specifier|static
name|void
name|checkNoConflict
parameter_list|(
name|boolean
name|safe
parameter_list|,
name|String
name|conflictDescription
parameter_list|,
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry1
parameter_list|,
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|safe
condition|)
block|{
throw|throw
name|conflictException
argument_list|(
name|conflictDescription
argument_list|,
name|entry1
argument_list|,
name|entry2
argument_list|)
throw|;
block|}
block|}
DECL|method|conflictException ( String conflictDescription, Object entry1, Object entry2)
specifier|static
name|IllegalArgumentException
name|conflictException
parameter_list|(
name|String
name|conflictDescription
parameter_list|,
name|Object
name|entry1
parameter_list|,
name|Object
name|entry2
parameter_list|)
block|{
return|return
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple entries with same "
operator|+
name|conflictDescription
operator|+
literal|": "
operator|+
name|entry1
operator|+
literal|" and "
operator|+
name|entry2
argument_list|)
return|;
block|}
comment|/**    * A builder for creating immutable map instances, especially {@code public static final} maps    * ("constant maps"). Example:    *    *<pre>{@code    * static final ImmutableMap<String, Integer> WORD_TO_INT =    *     new ImmutableMap.Builder<String, Integer>()    *         .put("one", 1)    *         .put("two", 2)    *         .put("three", 3)    *         .build();    * }</pre>    *    *<p>For<i>small</i> immutable maps, the {@code ImmutableMap.of()} methods are even more    * convenient.    *    *<p>By default, a {@code Builder} will generate maps that iterate over entries in the order they    * were inserted into the builder, equivalently to {@code LinkedHashMap}. For example, in the    * above example, {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the    * order {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect    * the same order. If you want a different order, consider using {@link ImmutableSortedMap} to    * sort by keys, or call {@link #orderEntriesByValue(Comparator)}, which changes this builder to    * sort entries by value.    *    *<p>Builder instances can be reused - it is safe to call {@link #build} multiple times to build    * multiple maps in series. Each map is a superset of the maps created before it.    *    * @since 2.0    */
annotation|@
name|DoNotMock
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|valueComparator
annotation|@
name|Nullable
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
decl_stmt|;
DECL|field|entries
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entries
decl_stmt|;
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|entriesUsed
name|boolean
name|entriesUsed
decl_stmt|;
comment|/**      * Creates a new builder. The returned builder is equivalent to the builder generated by {@link      * ImmutableMap#builder}.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
argument_list|(
name|ImmutableCollection
operator|.
name|Builder
operator|.
name|DEFAULT_INITIAL_CAPACITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|Builder (int initialCapacity)
name|Builder
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
operator|new
name|Entry
index|[
name|initialCapacity
index|]
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|entriesUsed
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|ensureCapacity (int minCapacity)
specifier|private
name|void
name|ensureCapacity
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
if|if
condition|(
name|minCapacity
operator|>
name|entries
operator|.
name|length
condition|)
block|{
name|entries
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|,
name|ImmutableCollection
operator|.
name|Builder
operator|.
name|expandedCapacity
argument_list|(
name|entries
operator|.
name|length
argument_list|,
name|minCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|entriesUsed
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,      * and will cause {@link #build} to fail.      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (K key, V value)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|entryOf
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// don't inline this: we want to fail atomically if key or value is null
name|entries
index|[
name|size
operator|++
index|]
operator|=
name|entry
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys are      * not allowed, and will cause {@link #build} to fail.      *      * @since 11.0      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (Entry<? extends K, ? extends V> entry)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Associates all of the given map's keys and values in the built map. Duplicate keys are not      * allowed, and will cause {@link #build} to fail.      *      * @throws NullPointerException if any key or value in {@code map} is null      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|putAll
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Adds all of the given entries to the built map. Duplicate keys are not allowed, and will      * cause {@link #build} to fail.      *      * @throws NullPointerException if any key, value, or entry is null      * @since 19.0      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Beta
DECL|method|putAll (Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|instanceof
name|Collection
condition|)
block|{
name|ensureCapacity
argument_list|(
name|size
operator|+
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|entries
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configures this {@code Builder} to order entries by value according to the specified      * comparator.      *      *<p>The sort order is stable, that is, if two entries have values that compare as equivalent,      * the entry that was inserted first will be first in the built map's iteration order.      *      * @throws IllegalStateException if this method was already called      * @since 19.0      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Beta
DECL|method|orderEntriesByValue (Comparator<? super V> valueComparator)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|orderEntriesByValue
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|valueComparator
operator|==
literal|null
argument_list|,
literal|"valueComparator was already set"
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueComparator
operator|=
name|checkNotNull
argument_list|(
name|valueComparator
argument_list|,
literal|"valueComparator"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|combine (Builder<K, V> other)
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|combine
parameter_list|(
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|ensureCapacity
argument_list|(
name|this
operator|.
name|size
operator|+
name|other
operator|.
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|other
operator|.
name|entries
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|entries
argument_list|,
name|this
operator|.
name|size
argument_list|,
name|other
operator|.
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|+=
name|other
operator|.
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/*      * TODO(kevinb): Should build() and the ImmutableBiMap& ImmutableSortedMap      * versions throw an IllegalStateException instead?      */
comment|/**      * Returns a newly-created immutable map. The iteration order of the returned map is the order      * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was      * called, in which case entries are sorted by value.      *      * @throws IllegalArgumentException if duplicate keys were added      */
DECL|method|build ()
specifier|public
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
comment|/*        * If entries is full, or if hash flooding is detected, then this implementation may end up        * using the entries array directly and writing over the entry objects with non-terminal        * entries, but this is safe; if this Builder is used further, it will grow the entries array        * (so it can't affect the original array), and future build() calls will always copy any        * entry objects that cannot be safely reused.        */
if|if
condition|(
name|valueComparator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entriesUsed
condition|)
block|{
name|entries
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|Ordering
operator|.
name|from
argument_list|(
name|valueComparator
argument_list|)
operator|.
name|onResultOf
argument_list|(
name|Maps
operator|.
expr|<
name|V
operator|>
name|valueFunction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|entries
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
name|entriesUsed
operator|=
literal|true
expr_stmt|;
return|return
name|RegularImmutableMap
operator|.
name|fromEntryArray
argument_list|(
name|size
argument_list|,
name|entries
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
comment|// only for testing JDK backed implementation
DECL|method|buildJdkBacked ()
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|buildJdkBacked
parameter_list|()
block|{
name|checkState
argument_list|(
name|valueComparator
operator|==
literal|null
argument_list|,
literal|"buildJdkBacked is only for testing; can't use valueComparator"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|entries
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
name|entriesUsed
operator|=
literal|true
expr_stmt|;
return|return
name|JdkBackedImmutableMap
operator|.
name|create
argument_list|(
name|size
argument_list|,
name|entries
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Returns an immutable map containing the same entries as {@code map}. The returned map iterates    * over entries in the same order as the {@code entrySet} of the original map. If {@code map}    * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose    * comparator is not<i>consistent with equals</i>), the results of this method are undefined.    *    *<p>Despite the method name, this method attempts to avoid actually copying the data when it is    * safe to do so. The exact circumstances under which a copy will or will not be performed are    * undocumented and subject to change.    *    * @throws NullPointerException if any key or value in {@code map} is null    */
DECL|method|copyOf (Map<? extends K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
operator|(
name|map
operator|instanceof
name|ImmutableMap
operator|)
operator|&&
operator|!
operator|(
name|map
operator|instanceof
name|SortedMap
operator|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe since map is not writable
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvMap
init|=
operator|(
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
decl_stmt|;
if|if
condition|(
operator|!
name|kvMap
operator|.
name|isPartialView
argument_list|()
condition|)
block|{
return|return
name|kvMap
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|map
operator|instanceof
name|EnumMap
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe since map is not writable
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvMap
init|=
operator|(
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|copyOfEnumMap
argument_list|(
operator|(
name|EnumMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|map
argument_list|)
decl_stmt|;
return|return
name|kvMap
return|;
block|}
return|return
name|copyOf
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the specified entries. The returned map iterates over    * entries in the same order as the original iterable.    *    * @throws NullPointerException if any key, value, or entry is null    * @throws IllegalArgumentException if two entries have the same key    * @since 19.0    */
annotation|@
name|Beta
DECL|method|copyOf ( Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we'll only be using getKey and getValue, which are covariant
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entryArray
init|=
operator|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
operator|)
name|Iterables
operator|.
name|toArray
argument_list|(
name|entries
argument_list|,
name|EMPTY_ENTRY_ARRAY
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|entryArray
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|onlyEntry
init|=
name|entryArray
index|[
literal|0
index|]
decl_stmt|;
return|return
name|of
argument_list|(
name|onlyEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|onlyEntry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
comment|/*          * The current implementation will end up using entryArray directly, though it will write          * over the (arbitrary, potentially mutable) Entry objects actually stored in entryArray.          */
return|return
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|entryArray
argument_list|)
return|;
block|}
block|}
DECL|method|copyOfEnumMap ( EnumMap<K, ? extends V> original)
specifier|private
specifier|static
parameter_list|<
name|K
extends|extends
name|Enum
argument_list|<
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOfEnumMap
parameter_list|(
name|EnumMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|original
parameter_list|)
block|{
name|EnumMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|original
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|copy
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|checkEntryNotNull
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableEnumMap
operator|.
name|asImmutable
argument_list|(
name|copy
argument_list|)
return|;
block|}
DECL|field|EMPTY_ENTRY_ARRAY
specifier|static
specifier|final
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|EMPTY_ENTRY_ARRAY
init|=
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|0
index|]
decl_stmt|;
DECL|class|IteratorBasedImmutableMap
specifier|abstract
specifier|static
class|class
name|IteratorBasedImmutableMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|entryIterator ()
specifier|abstract
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
function_decl|;
DECL|method|entrySpliterator ()
name|Spliterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySpliterator
parameter_list|()
block|{
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
name|entryIterator
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|NONNULL
operator||
name|Spliterator
operator|.
name|IMMUTABLE
operator||
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKeySet ()
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
operator|new
name|ImmutableMapKeySet
argument_list|<>
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
class|class
name|EntrySetImpl
extends|extends
name|ImmutableMapEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|IteratorBasedImmutableMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|entryIterator
argument_list|()
return|;
block|}
block|}
return|return
operator|new
name|EntrySetImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|ImmutableMapValues
argument_list|<>
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|ImmutableMap ()
name|ImmutableMap
parameter_list|()
block|{}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|put (K k, V v)
specifier|public
specifier|final
name|V
name|put
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|putIfAbsent (K key, V value)
specifier|public
specifier|final
name|V
name|putIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|replace (K key, V oldValue, V newValue)
specifier|public
specifier|final
name|boolean
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|oldValue
parameter_list|,
name|V
name|newValue
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|replace (K key, V value)
specifier|public
specifier|final
name|V
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)
specifier|public
specifier|final
name|V
name|computeIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|mappingFunction
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|computeIfPresent ( K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
specifier|public
specifier|final
name|V
name|computeIfPresent
parameter_list|(
name|K
name|key
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
specifier|public
specifier|final
name|V
name|compute
parameter_list|(
name|K
name|key
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|merge ( K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
specifier|public
specifier|final
name|V
name|merge
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|V
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
specifier|final
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|replaceAll (BiFunction<? super K, ? super V, ? extends V> function)
specifier|public
specifier|final
name|void
name|replaceAll
parameter_list|(
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|function
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|remove (Object o)
specifier|public
specifier|final
name|V
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|remove (Object key, Object value)
specifier|public
specifier|final
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
DECL|method|clear ()
specifier|public
specifier|final
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullable Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// Overriding to mark it Nullable
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|get (@ullable Object key)
specifier|public
specifier|abstract
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**    * @since 21.0 (but only since 23.5 in the Android<a    *     href="https://github.com/google/guava#guava-google-core-libraries-for-java">flavor</a>).    *     Note, however, that Java 8 users can call this method with any version and flavor of Guava.    */
annotation|@
name|Override
DECL|method|getOrDefault (@ullable Object key, @Nullable V defaultValue)
specifier|public
specifier|final
name|V
name|getOrDefault
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|defaultValue
parameter_list|)
block|{
name|V
name|result
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|!=
literal|null
operator|)
condition|?
name|result
else|:
name|defaultValue
return|;
block|}
DECL|field|entrySet
annotation|@
name|LazyInit
annotation|@
name|RetainedWith
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
comment|/**    * Returns an immutable set of the mappings in this map. The iteration order is specified by the    * method used to create this map. Typically, this is insertion order.    */
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|entrySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|entrySet
operator|=
name|createEntrySet
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|createEntrySet ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
function_decl|;
DECL|field|keySet
annotation|@
name|LazyInit
annotation|@
name|RetainedWith
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
comment|/**    * Returns an immutable set of the keys in this map, in the same order that they appear in {@link    * #entrySet}.    */
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|result
init|=
name|keySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|keySet
operator|=
name|createKeySet
argument_list|()
else|:
name|result
return|;
block|}
comment|/*    * This could have a good default implementation of return new ImmutableKeySet<K, V>(this),    * but ProGuard can't figure out how to eliminate that default when RegularImmutableMap    * overrides it.    */
DECL|method|createKeySet ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
function_decl|;
DECL|method|keyIterator ()
name|UnmodifiableIterator
argument_list|<
name|K
argument_list|>
name|keyIterator
parameter_list|()
block|{
specifier|final
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|UnmodifiableIterator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|keySpliterator ()
name|Spliterator
argument_list|<
name|K
argument_list|>
name|keySpliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
name|map
argument_list|(
name|entrySet
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
name|Entry
operator|::
name|getKey
argument_list|)
return|;
block|}
DECL|field|values
annotation|@
name|LazyInit
annotation|@
name|RetainedWith
specifier|private
specifier|transient
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
decl_stmt|;
comment|/**    * Returns an immutable collection of the values in this map, in the same order that they appear    * in {@link #entrySet}.    */
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|result
init|=
name|values
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|values
operator|=
name|createValues
argument_list|()
else|:
name|result
return|;
block|}
comment|/*    * This could have a good default implementation of {@code return new    * ImmutableMapValues<K, V>(this)}, but ProGuard can't figure out how to eliminate that default    * when RegularImmutableMap overrides it.    */
DECL|method|createValues ()
specifier|abstract
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
function_decl|;
comment|// cached so that this.multimapView().inverse() only computes inverse once
DECL|field|multimapView
annotation|@
name|LazyInit
specifier|private
specifier|transient
name|ImmutableSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimapView
decl_stmt|;
comment|/**    * Returns a multimap view of the map.    *    * @since 14.0    */
DECL|method|asMultimap ()
specifier|public
name|ImmutableSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asMultimap
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
return|;
block|}
name|ImmutableSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
name|multimapView
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
operator|(
name|multimapView
operator|=
operator|new
name|ImmutableSetMultimap
argument_list|<>
argument_list|(
operator|new
name|MapViewOfValuesAsSingletonSets
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|)
else|:
name|result
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|MapViewOfValuesAsSingletonSets
specifier|private
specifier|final
class|class
name|MapViewOfValuesAsSingletonSets
extends|extends
name|IteratorBasedImmutableMap
argument_list|<
name|K
argument_list|,
name|ImmutableSet
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createKeySet ()
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|this
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|ImmutableMap
operator|.
name|this
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|ImmutableSet
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|V
name|outerValue
init|=
name|ImmutableMap
operator|.
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|outerValue
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ImmutableSet
operator|.
name|of
argument_list|(
name|outerValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|this
operator|.
name|isPartialView
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// ImmutableSet.of(value).hashCode() == value.hashCode(), so the hashes are the same
return|return
name|ImmutableMap
operator|.
name|this
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isHashCodeFast ()
name|boolean
name|isHashCodeFast
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|this
operator|.
name|isHashCodeFast
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|ImmutableSet
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingIterator
init|=
name|ImmutableMap
operator|.
name|this
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|ImmutableSet
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|backingIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|ImmutableSet
argument_list|<
name|V
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backingEntry
init|=
name|backingIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|ImmutableSet
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|backingEntry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|V
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|backingEntry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|equalsImpl
argument_list|(
name|this
argument_list|,
name|object
argument_list|)
return|;
block|}
DECL|method|isPartialView ()
specifier|abstract
name|boolean
name|isPartialView
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|hashCodeImpl
argument_list|(
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isHashCodeFast ()
name|boolean
name|isHashCodeFast
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|toStringImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Serialized type for all ImmutableMap instances. It captures the logical contents and they are    * reconstructed using public factory methods. This ensures that the implementation types remain    * as implementation details.    */
DECL|class|SerializedForm
specifier|static
class|class
name|SerializedForm
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Serializable
block|{
comment|// This object retains references to collections returned by keySet() and value(). This saves
comment|// bytes when the both the map and its keySet or value collection are written to the same
comment|// instance of ObjectOutputStream.
comment|// TODO(b/160980469): remove support for the old serialization format after some time
DECL|field|USE_LEGACY_SERIALIZATION
specifier|private
specifier|static
specifier|final
name|boolean
name|USE_LEGACY_SERIALIZATION
init|=
literal|true
decl_stmt|;
DECL|field|keys
specifier|private
specifier|final
name|Object
name|keys
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|Object
name|values
decl_stmt|;
DECL|method|SerializedForm (ImmutableMap<K, V> map)
name|SerializedForm
parameter_list|(
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|USE_LEGACY_SERIALIZATION
condition|)
block|{
name|Object
index|[]
name|keys
init|=
operator|new
name|Object
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|keys
operator|=
name|map
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|map
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readResolve ()
specifier|final
name|Object
name|readResolve
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|keys
operator|instanceof
name|ImmutableSet
operator|)
condition|)
block|{
return|return
name|legacyReadResolve
argument_list|()
return|;
block|}
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|keySet
init|=
operator|(
name|ImmutableSet
argument_list|<
name|K
argument_list|>
operator|)
name|this
operator|.
name|keys
decl_stmt|;
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|(
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
operator|)
name|this
operator|.
name|values
decl_stmt|;
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
init|=
name|makeBuilder
argument_list|(
name|keySet
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|UnmodifiableIterator
argument_list|<
name|K
argument_list|>
name|keyIter
init|=
name|keySet
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|UnmodifiableIterator
argument_list|<
name|V
argument_list|>
name|valueIter
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|keyIter
operator|.
name|next
argument_list|()
argument_list|,
name|valueIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|legacyReadResolve ()
specifier|final
name|Object
name|legacyReadResolve
parameter_list|()
block|{
name|K
index|[]
name|keys
init|=
operator|(
name|K
index|[]
operator|)
name|this
operator|.
name|keys
decl_stmt|;
name|V
index|[]
name|values
init|=
operator|(
name|V
index|[]
operator|)
name|this
operator|.
name|values
decl_stmt|;
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
init|=
name|makeBuilder
argument_list|(
name|keys
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns a builder that builds the unserialized type. Subclasses should override this method.      */
DECL|method|makeBuilder (int size)
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeBuilder
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns a serializable form of this object. Non-public subclasses should not override this    * method. Publicly-accessible subclasses must override this method and should return a subclass    * of SerializedForm whose readResolve() method returns objects of the subclass type.    */
DECL|method|writeReplace ()
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerializedForm
argument_list|<>
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

