begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Implementation detail for the internal structure of {@link Range} instances.  * Represents a unique way of "cutting" a "number line" (actually of instances  * of type {@code C}, not necessarily "numbers") into two sections; this can be  * done below a certain value, above a certain value, below all values or above  * all values. With this object defined in this way, an interval can always be  * represented by a pair of {@code Cut} instances.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// allow ungenerified Comparable types
annotation|@
name|GwtCompatible
DECL|class|Cut
specifier|abstract
class|class
name|Cut
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
implements|implements
name|Comparable
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
DECL|field|endpoint
specifier|final
name|C
name|endpoint
decl_stmt|;
DECL|method|Cut (C endpoint)
name|Cut
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|isLessThan (C value)
specifier|abstract
name|boolean
name|isLessThan
parameter_list|(
name|C
name|value
parameter_list|)
function_decl|;
DECL|method|typeAsLowerBound ()
specifier|abstract
name|BoundType
name|typeAsLowerBound
parameter_list|()
function_decl|;
DECL|method|typeAsUpperBound ()
specifier|abstract
name|BoundType
name|typeAsUpperBound
parameter_list|()
function_decl|;
DECL|method|describeAsLowerBound (StringBuilder sb)
specifier|abstract
name|void
name|describeAsLowerBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
function_decl|;
DECL|method|describeAsUpperBound (StringBuilder sb)
specifier|abstract
name|void
name|describeAsUpperBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
function_decl|;
DECL|method|leastValueAbove (DiscreteDomain<C> domain)
specifier|abstract
name|C
name|leastValueAbove
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
function_decl|;
DECL|method|greatestValueBelow (DiscreteDomain<C> domain)
specifier|abstract
name|C
name|greatestValueBelow
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
function_decl|;
comment|// the canonical form is a BelowValue cut whenever possible, otherwise
comment|// ABOVE_ALL, and (only in the case of types that are unbounded below)
comment|// BELOW_ALL.
DECL|method|canonical (DiscreteDomain<C> domain)
name|Cut
argument_list|<
name|C
argument_list|>
name|canonical
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|this
return|;
block|}
comment|// note: overriden by {BELOW,ABOVE}_ALL
annotation|@
name|Override
DECL|method|compareTo (Cut<C> that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
name|BELOW_ALL
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|that
operator|==
name|ABOVE_ALL
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|result
init|=
name|compareOrThrow
argument_list|(
name|endpoint
argument_list|,
name|that
operator|.
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// same value. below comes before above
return|return
name|Booleans
operator|.
name|compare
argument_list|(
name|this
operator|instanceof
name|AboveValue
argument_list|,
name|that
operator|instanceof
name|AboveValue
argument_list|)
return|;
block|}
DECL|method|endpoint ()
name|C
name|endpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// catching CCE
DECL|method|equals (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Cut
condition|)
block|{
comment|// It might not really be a Cut<C>, but we'll catch a CCE if it's not
name|Cut
argument_list|<
name|C
argument_list|>
name|that
init|=
operator|(
name|Cut
argument_list|<
name|C
argument_list|>
operator|)
name|obj
decl_stmt|;
try|try
block|{
name|int
name|compareResult
init|=
name|compareTo
argument_list|(
name|that
argument_list|)
decl_stmt|;
return|return
name|compareResult
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ignored
parameter_list|)
block|{       }
block|}
return|return
literal|false
return|;
block|}
DECL|field|BELOW_ALL
specifier|static
specifier|final
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|BELOW_ALL
init|=
operator|new
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
literal|null
argument_list|)
block|{
annotation|@
name|Override
name|Comparable
argument_list|<
name|?
argument_list|>
name|endpoint
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"range unbounded on this side"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|boolean
name|isLessThan
parameter_list|(
name|Comparable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|BoundType
name|typeAsLowerBound
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|BoundType
name|typeAsUpperBound
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"this statement should be unreachable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|describeAsLowerBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(-\u221e"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|describeAsUpperBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|Comparable
argument_list|<
name|?
argument_list|>
name|leastValueAbove
parameter_list|(
name|DiscreteDomain
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|domain
operator|.
name|minValue
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Comparable
argument_list|<
name|?
argument_list|>
name|greatestValueBelow
parameter_list|(
name|DiscreteDomain
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|domain
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|canonical
parameter_list|(
name|DiscreteDomain
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|domain
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|BelowValue
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|domain
operator|.
name|minValue
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|==
name|this
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
block|}
empty_stmt|;
DECL|field|ABOVE_ALL
specifier|static
specifier|final
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|ABOVE_ALL
init|=
operator|new
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
literal|null
argument_list|)
block|{
annotation|@
name|Override
name|Comparable
argument_list|<
name|?
argument_list|>
name|endpoint
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"range unbounded on this side"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|boolean
name|isLessThan
parameter_list|(
name|Comparable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|BoundType
name|typeAsLowerBound
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"this statement should be unreachable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|BoundType
name|typeAsUpperBound
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|void
name|describeAsLowerBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|void
name|describeAsUpperBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"+\u221e)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Comparable
argument_list|<
name|?
argument_list|>
name|leastValueAbove
parameter_list|(
name|DiscreteDomain
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|domain
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|Comparable
argument_list|<
name|?
argument_list|>
name|greatestValueBelow
parameter_list|(
name|DiscreteDomain
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|domain
operator|.
name|maxValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Cut
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|==
name|this
operator|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
empty_stmt|;
DECL|class|BelowValue
specifier|static
specifier|final
class|class
name|BelowValue
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
extends|extends
name|Cut
argument_list|<
name|C
argument_list|>
block|{
DECL|method|BelowValue (C endpoint)
name|BelowValue
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isLessThan (C value)
annotation|@
name|Override
name|boolean
name|isLessThan
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
name|compareOrThrow
argument_list|(
name|endpoint
argument_list|,
name|value
argument_list|)
operator|<=
literal|0
return|;
block|}
DECL|method|typeAsLowerBound ()
annotation|@
name|Override
name|BoundType
name|typeAsLowerBound
parameter_list|()
block|{
return|return
name|BoundType
operator|.
name|CLOSED
return|;
block|}
DECL|method|typeAsUpperBound ()
annotation|@
name|Override
name|BoundType
name|typeAsUpperBound
parameter_list|()
block|{
return|return
name|BoundType
operator|.
name|OPEN
return|;
block|}
DECL|method|describeAsLowerBound (StringBuilder sb)
annotation|@
name|Override
name|void
name|describeAsLowerBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|describeAsUpperBound (StringBuilder sb)
annotation|@
name|Override
name|void
name|describeAsUpperBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|endpoint
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
DECL|method|leastValueAbove (DiscreteDomain<C> domain)
annotation|@
name|Override
name|C
name|leastValueAbove
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|greatestValueBelow (DiscreteDomain<C> domain)
annotation|@
name|Override
name|C
name|greatestValueBelow
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|domain
operator|.
name|previous
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|AboveValue
specifier|static
specifier|final
class|class
name|AboveValue
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
extends|extends
name|Cut
argument_list|<
name|C
argument_list|>
block|{
DECL|method|AboveValue (C endpoint)
name|AboveValue
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isLessThan (C value)
annotation|@
name|Override
name|boolean
name|isLessThan
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
name|compareOrThrow
argument_list|(
name|endpoint
argument_list|,
name|value
argument_list|)
operator|<
literal|0
return|;
block|}
DECL|method|typeAsLowerBound ()
annotation|@
name|Override
name|BoundType
name|typeAsLowerBound
parameter_list|()
block|{
return|return
name|BoundType
operator|.
name|OPEN
return|;
block|}
DECL|method|typeAsUpperBound ()
annotation|@
name|Override
name|BoundType
name|typeAsUpperBound
parameter_list|()
block|{
return|return
name|BoundType
operator|.
name|CLOSED
return|;
block|}
DECL|method|describeAsLowerBound (StringBuilder sb)
annotation|@
name|Override
name|void
name|describeAsLowerBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|describeAsUpperBound (StringBuilder sb)
annotation|@
name|Override
name|void
name|describeAsUpperBound
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|endpoint
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
DECL|method|leastValueAbove (DiscreteDomain<C> domain)
annotation|@
name|Override
name|C
name|leastValueAbove
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|domain
operator|.
name|next
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
DECL|method|greatestValueBelow (DiscreteDomain<C> domain)
annotation|@
name|Override
name|C
name|greatestValueBelow
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|canonical (DiscreteDomain<C> domain)
annotation|@
name|Override
name|Cut
argument_list|<
name|C
argument_list|>
name|canonical
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
name|C
name|next
init|=
name|leastValueAbove
argument_list|(
name|domain
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BelowValue
argument_list|<
name|C
argument_list|>
argument_list|(
name|next
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cut
argument_list|<
name|C
argument_list|>
name|aboveAll
init|=
operator|(
name|Cut
argument_list|<
name|C
argument_list|>
operator|)
name|ABOVE_ALL
decl_stmt|;
return|return
name|aboveAll
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|~
name|endpoint
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// this method may throw CCE
DECL|method|compareOrThrow (Comparable left, Comparable right)
specifier|private
specifier|static
name|int
name|compareOrThrow
parameter_list|(
name|Comparable
name|left
parameter_list|,
name|Comparable
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
return|;
block|}
block|}
end_class

end_unit

