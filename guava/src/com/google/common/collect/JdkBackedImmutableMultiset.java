begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of ImmutableMultiset backed by a JDK Map and a list of entries. Used to protect  * against hash flooding attacks.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|JdkBackedImmutableMultiset
specifier|final
class|class
name|JdkBackedImmutableMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableMultiset
argument_list|<
name|E
argument_list|>
block|{
DECL|field|delegateMap
specifier|private
specifier|final
name|Map
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
name|delegateMap
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
DECL|method|create (Collection<? extends Entry<? extends E>> entries)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableMultiset
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|E
argument_list|>
index|[]
name|entriesArray
init|=
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
name|delegateMap
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|entriesArray
operator|.
name|length
argument_list|)
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entriesArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entriesArray
index|[
name|i
index|]
decl_stmt|;
name|int
name|count
init|=
name|entry
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|size
operator|+=
name|count
expr_stmt|;
name|E
name|element
init|=
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|delegateMap
operator|.
name|put
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|entry
operator|instanceof
name|Multisets
operator|.
name|ImmutableEntry
operator|)
condition|)
block|{
name|entriesArray
index|[
name|i
index|]
operator|=
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JdkBackedImmutableMultiset
argument_list|<>
argument_list|(
name|delegateMap
argument_list|,
name|ImmutableList
operator|.
name|asImmutableList
argument_list|(
name|entriesArray
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
DECL|method|JdkBackedImmutableMultiset ( Map<E, Integer> delegateMap, ImmutableList<Entry<E>> entries, long size)
specifier|private
name|JdkBackedImmutableMultiset
parameter_list|(
name|Map
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
name|delegateMap
parameter_list|,
name|ImmutableList
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|delegateMap
operator|=
name|delegateMap
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|count (@ullable Object element)
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
return|return
name|delegateMap
operator|.
name|getOrDefault
argument_list|(
name|element
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|field|elementSet
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|elementSet
decl_stmt|;
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|result
init|=
name|elementSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|elementSet
operator|=
operator|new
name|ElementSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|entries
argument_list|,
name|this
argument_list|)
else|:
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getEntry (int index)
name|Entry
argument_list|<
name|E
argument_list|>
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|entries
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
end_class

end_unit

