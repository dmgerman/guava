begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLongArray
import|;
end_import

begin_comment
comment|/**  * A thread-safe {@link Counter} implementation for use by {@link Cache} implementors.  *  * @author fry@google.com (Charles Fry)  * @since Guava release 10  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|CacheStatsCounterImpl
specifier|public
class|class
name|CacheStatsCounterImpl
implements|implements
name|CacheStatsCounter
block|{
DECL|field|HIT_INDEX
specifier|private
specifier|static
name|int
name|HIT_INDEX
init|=
literal|0
decl_stmt|;
DECL|field|MISS_INDEX
specifier|private
specifier|static
name|int
name|MISS_INDEX
init|=
literal|1
decl_stmt|;
DECL|field|CREATE_INDEX
specifier|private
specifier|static
name|int
name|CREATE_INDEX
init|=
literal|2
decl_stmt|;
DECL|field|CREATE_TIME_INDEX
specifier|private
specifier|static
name|int
name|CREATE_TIME_INDEX
init|=
literal|3
decl_stmt|;
DECL|field|EVICTION_INDEX
specifier|private
specifier|static
name|int
name|EVICTION_INDEX
init|=
literal|4
decl_stmt|;
DECL|field|SIZE
specifier|private
specifier|static
name|int
name|SIZE
init|=
literal|5
decl_stmt|;
DECL|field|counts
specifier|private
specifier|final
name|AtomicLongArray
name|counts
init|=
operator|new
name|AtomicLongArray
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|recordHit ()
specifier|public
name|void
name|recordHit
parameter_list|()
block|{
name|counts
operator|.
name|incrementAndGet
argument_list|(
name|HIT_INDEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordMiss ()
specifier|public
name|void
name|recordMiss
parameter_list|()
block|{
name|counts
operator|.
name|incrementAndGet
argument_list|(
name|MISS_INDEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordCreate (long createTime)
specifier|public
name|void
name|recordCreate
parameter_list|(
name|long
name|createTime
parameter_list|)
block|{
name|counts
operator|.
name|incrementAndGet
argument_list|(
name|CREATE_INDEX
argument_list|)
expr_stmt|;
name|counts
operator|.
name|addAndGet
argument_list|(
name|CREATE_TIME_INDEX
argument_list|,
name|createTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordEviction ()
specifier|public
name|void
name|recordEviction
parameter_list|()
block|{
name|counts
operator|.
name|incrementAndGet
argument_list|(
name|EVICTION_INDEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshot ()
specifier|public
name|CacheStats
name|snapshot
parameter_list|()
block|{
return|return
operator|new
name|CacheStats
argument_list|(
name|counts
operator|.
name|get
argument_list|(
name|HIT_INDEX
argument_list|)
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|MISS_INDEX
argument_list|)
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|CREATE_INDEX
argument_list|)
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|CREATE_TIME_INDEX
argument_list|)
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|EVICTION_INDEX
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Increments all counters by the values in {@code other}.    */
DECL|method|incrementBy (CacheStatsCounter other)
specifier|public
name|void
name|incrementBy
parameter_list|(
name|CacheStatsCounter
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|CacheStatsCounterImpl
condition|)
block|{
name|CacheStatsCounterImpl
name|otherCounter
init|=
operator|(
name|CacheStatsCounterImpl
operator|)
name|other
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|counts
operator|.
name|addAndGet
argument_list|(
name|i
argument_list|,
name|otherCounter
operator|.
name|counts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CacheStats
name|otherStats
init|=
name|other
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|counts
operator|.
name|addAndGet
argument_list|(
name|HIT_INDEX
argument_list|,
name|otherStats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|addAndGet
argument_list|(
name|MISS_INDEX
argument_list|,
name|otherStats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|addAndGet
argument_list|(
name|CREATE_INDEX
argument_list|,
name|otherStats
operator|.
name|createCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|addAndGet
argument_list|(
name|CREATE_TIME_INDEX
argument_list|,
name|otherStats
operator|.
name|totalCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|.
name|addAndGet
argument_list|(
name|EVICTION_INDEX
argument_list|,
name|otherStats
operator|.
name|evictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

