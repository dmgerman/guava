begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstNode
operator|.
name|countOrZero
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstUtilities
operator|.
name|extractMax
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstUtilities
operator|.
name|extractMin
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstUtilities
operator|.
name|insertMax
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstUtilities
operator|.
name|insertMin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A tree-size-based set of balancing policies, based on<a  * href="http://www.swiss.ai.mit.edu/~adams/BB/"> Stephen Adams, "Efficient sets: a balancing  * act."</a>.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstCountBasedBalancePolicies
specifier|final
class|class
name|BstCountBasedBalancePolicies
block|{
DECL|method|BstCountBasedBalancePolicies ()
specifier|private
name|BstCountBasedBalancePolicies
parameter_list|()
block|{}
DECL|field|SINGLE_ROTATE_RATIO
specifier|private
specifier|static
specifier|final
name|int
name|SINGLE_ROTATE_RATIO
init|=
literal|4
decl_stmt|;
DECL|field|SECOND_ROTATE_RATIO
specifier|private
specifier|static
specifier|final
name|int
name|SECOND_ROTATE_RATIO
init|=
literal|2
decl_stmt|;
comment|/**    * Returns a balance policy that does no balancing or the bare minimum (for {@code combine}).    */
DECL|method|noRebalancePolicy ()
specifier|public
specifier|static
parameter_list|<
name|N
extends|extends
name|BstNode
argument_list|<
name|?
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|noRebalancePolicy
parameter_list|()
block|{
return|return
operator|new
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|N
name|balance
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
operator|.
name|createNode
argument_list|(
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|N
name|combine
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
name|left
return|;
block|}
elseif|else
if|if
condition|(
name|left
operator|.
name|count
argument_list|()
operator|>
name|right
operator|.
name|count
argument_list|()
condition|)
block|{
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|left
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|combine
argument_list|(
name|nodeFactory
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|right
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|right
argument_list|,
name|combine
argument_list|(
name|nodeFactory
argument_list|,
name|left
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * Returns a balance policy that expects the sizes of each side to be at most one node (added or    * removed) away from being balanced. {@code balance} takes {@code O(1)} time, and {@code    * combine} takes {@code O(log n)} time.    */
DECL|method|singleRebalancePolicy ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|singleRebalancePolicy
parameter_list|()
block|{
return|return
operator|new
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|N
name|balance
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
name|int
name|countL
init|=
name|countOrZero
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|int
name|countR
init|=
name|countOrZero
argument_list|(
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|countL
operator|+
name|countR
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|countR
operator|>=
name|SINGLE_ROTATE_RATIO
operator|*
name|countL
condition|)
block|{
return|return
name|rotateL
argument_list|(
name|nodeFactory
argument_list|,
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|countL
operator|>=
name|SINGLE_ROTATE_RATIO
operator|*
name|countR
condition|)
block|{
return|return
name|rotateR
argument_list|(
name|nodeFactory
argument_list|,
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|private
name|N
name|rotateL
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
name|N
name|right
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|N
name|rl
init|=
name|right
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
decl_stmt|;
name|N
name|rr
init|=
name|right
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
decl_stmt|;
if|if
condition|(
name|countOrZero
argument_list|(
name|rl
argument_list|)
operator|>=
name|SECOND_ROTATE_RATIO
operator|*
name|countOrZero
argument_list|(
name|rr
argument_list|)
condition|)
block|{
name|right
operator|=
name|singleR
argument_list|(
name|nodeFactory
argument_list|,
name|right
argument_list|,
name|rl
argument_list|,
name|rr
argument_list|)
expr_stmt|;
block|}
return|return
name|singleL
argument_list|(
name|nodeFactory
argument_list|,
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|private
name|N
name|rotateR
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|N
name|lr
init|=
name|left
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
decl_stmt|;
name|N
name|ll
init|=
name|left
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
decl_stmt|;
if|if
condition|(
name|countOrZero
argument_list|(
name|lr
argument_list|)
operator|>=
name|SECOND_ROTATE_RATIO
operator|*
name|countOrZero
argument_list|(
name|ll
argument_list|)
condition|)
block|{
name|left
operator|=
name|singleL
argument_list|(
name|nodeFactory
argument_list|,
name|left
argument_list|,
name|ll
argument_list|,
name|lr
argument_list|)
expr_stmt|;
block|}
return|return
name|singleR
argument_list|(
name|nodeFactory
argument_list|,
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|private
name|N
name|singleL
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
name|N
name|right
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|right
argument_list|,
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|source
argument_list|,
name|left
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|N
name|singleR
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|left
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|source
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|right
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|N
name|combine
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
name|left
return|;
block|}
name|N
name|newRootSource
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|count
argument_list|()
operator|>
name|right
operator|.
name|count
argument_list|()
condition|)
block|{
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|extractLeftMax
init|=
name|extractMax
argument_list|(
name|left
argument_list|,
name|nodeFactory
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|newRootSource
operator|=
name|extractLeftMax
operator|.
name|getOriginalTarget
argument_list|()
expr_stmt|;
name|left
operator|=
name|extractLeftMax
operator|.
name|getChangedRoot
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|extractRightMin
init|=
name|extractMin
argument_list|(
name|right
argument_list|,
name|nodeFactory
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|newRootSource
operator|=
name|extractRightMin
operator|.
name|getOriginalTarget
argument_list|()
expr_stmt|;
name|right
operator|=
name|extractRightMin
operator|.
name|getChangedRoot
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|newRootSource
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a balance policy that makes no assumptions on the relative balance of the two sides    * and performs a full rebalancing as necessary. Both {@code balance} and {@code combine} take    * {@code O(log n)} time.    */
DECL|method|fullRebalancePolicy ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|fullRebalancePolicy
parameter_list|()
block|{
specifier|final
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|singleBalancePolicy
init|=
name|BstCountBasedBalancePolicies
operator|.
expr|<
name|K
decl_stmt|,
name|N
decl|>
name|singleRebalancePolicy
argument_list|()
decl_stmt|;
return|return
operator|new
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|N
name|balance
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|N
name|source
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|insertMin
argument_list|(
name|right
argument_list|,
name|source
argument_list|,
name|nodeFactory
argument_list|,
name|singleBalancePolicy
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
name|insertMax
argument_list|(
name|left
argument_list|,
name|source
argument_list|,
name|nodeFactory
argument_list|,
name|singleBalancePolicy
argument_list|)
return|;
block|}
name|int
name|countL
init|=
name|left
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|countR
init|=
name|right
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|SINGLE_ROTATE_RATIO
operator|*
name|countL
operator|<=
name|countR
condition|)
block|{
name|N
name|resultLeft
init|=
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|source
argument_list|,
name|left
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|singleBalancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|right
argument_list|,
name|resultLeft
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|SINGLE_ROTATE_RATIO
operator|*
name|countR
operator|<=
name|countL
condition|)
block|{
name|N
name|resultRight
init|=
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|source
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|right
argument_list|)
decl_stmt|;
return|return
name|singleBalancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|left
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|resultRight
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|source
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|N
name|combine
parameter_list|(
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
name|left
return|;
block|}
name|int
name|countL
init|=
name|left
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|countR
init|=
name|right
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|SINGLE_ROTATE_RATIO
operator|*
name|countL
operator|<=
name|countR
condition|)
block|{
name|N
name|resultLeft
init|=
name|combine
argument_list|(
name|nodeFactory
argument_list|,
name|left
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|singleBalancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|right
argument_list|,
name|resultLeft
argument_list|,
name|right
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|SINGLE_ROTATE_RATIO
operator|*
name|countR
operator|<=
name|countL
condition|)
block|{
name|N
name|resultRight
init|=
name|combine
argument_list|(
name|nodeFactory
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|right
argument_list|)
decl_stmt|;
return|return
name|singleBalancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|left
argument_list|,
name|left
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|resultRight
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|singleBalancePolicy
operator|.
name|combine
argument_list|(
name|nodeFactory
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

