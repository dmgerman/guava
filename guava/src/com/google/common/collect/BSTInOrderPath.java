begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BSTSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BSTSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@code BSTPath} supporting inorder traversal operations.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BSTInOrderPath
specifier|final
class|class
name|BSTInOrderPath
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BSTNode
parameter_list|<
name|K
parameter_list|,
name|N
parameter_list|>
parameter_list|>
extends|extends
name|BSTPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|,
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
block|{
comment|/**    * The factory to use to construct {@code BSTInOrderPath} values.    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BSTNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BSTPathFactory
argument_list|<
DECL|method|inOrderFactory ()
name|K
argument_list|,
name|N
argument_list|,
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|inOrderFactory
parameter_list|()
block|{
return|return
operator|new
name|BSTPathFactory
argument_list|<
name|K
argument_list|,
name|N
argument_list|,
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|extension
parameter_list|(
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|path
parameter_list|,
name|BSTSide
name|side
parameter_list|)
block|{
return|return
name|BSTInOrderPath
operator|.
name|extension
argument_list|(
name|path
argument_list|,
name|side
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|initialPath
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
operator|new
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|(
name|root
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|extension ( BSTInOrderPath<K, N> path, BSTSide side)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BSTNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|extension
parameter_list|(
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|path
parameter_list|,
name|BSTSide
name|side
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|N
name|tip
init|=
name|path
operator|.
name|getTip
argument_list|()
decl_stmt|;
return|return
operator|new
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|(
name|tip
operator|.
name|getChild
argument_list|(
name|side
argument_list|)
argument_list|,
name|side
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|field|side
specifier|private
specifier|final
name|BSTSide
name|side
decl_stmt|;
DECL|field|prevInOrder
specifier|private
specifier|transient
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|prevInOrder
decl_stmt|;
DECL|field|nextInOrder
specifier|private
specifier|transient
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|nextInOrder
decl_stmt|;
DECL|method|BSTInOrderPath (N tip, @Nullable BSTSide side, @Nullable BSTInOrderPath<K, N> tail)
specifier|private
name|BSTInOrderPath
parameter_list|(
name|N
name|tip
parameter_list|,
annotation|@
name|Nullable
name|BSTSide
name|side
parameter_list|,
annotation|@
name|Nullable
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|tail
parameter_list|)
block|{
name|super
argument_list|(
name|tip
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|this
operator|.
name|side
operator|=
name|side
expr_stmt|;
assert|assert
operator|(
name|side
operator|==
literal|null
operator|)
operator|==
operator|(
name|tail
operator|==
literal|null
operator|)
assert|;
block|}
DECL|method|computeNextInOrder ()
specifier|private
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|computeNextInOrder
parameter_list|()
block|{
if|if
condition|(
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|RIGHT
argument_list|)
condition|)
block|{
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|this
argument_list|,
name|RIGHT
argument_list|)
decl_stmt|;
while|while
condition|(
name|path
operator|.
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|LEFT
argument_list|)
condition|)
block|{
name|path
operator|=
name|extension
argument_list|(
name|path
argument_list|,
name|LEFT
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|current
init|=
name|this
decl_stmt|;
while|while
condition|(
name|current
operator|.
name|side
operator|==
name|RIGHT
condition|)
block|{
name|current
operator|=
name|current
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
block|}
name|current
operator|=
name|current
operator|.
name|prefixOrNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|prevInOrder
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|fromNullable
argument_list|(
name|current
argument_list|)
return|;
block|}
block|}
DECL|method|computePrevInOrder ()
specifier|private
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|computePrevInOrder
parameter_list|()
block|{
if|if
condition|(
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|LEFT
argument_list|)
condition|)
block|{
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|this
argument_list|,
name|LEFT
argument_list|)
decl_stmt|;
while|while
condition|(
name|path
operator|.
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|RIGHT
argument_list|)
condition|)
block|{
name|path
operator|=
name|extension
argument_list|(
name|path
argument_list|,
name|RIGHT
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|current
init|=
name|this
decl_stmt|;
while|while
condition|(
name|current
operator|.
name|side
operator|==
name|LEFT
condition|)
block|{
name|current
operator|=
name|current
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
block|}
name|current
operator|=
name|current
operator|.
name|prefixOrNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|nextInOrder
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|fromNullable
argument_list|(
name|current
argument_list|)
return|;
block|}
block|}
DECL|method|nextInOrder ()
specifier|private
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|nextInOrder
parameter_list|()
block|{
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|result
init|=
name|nextInOrder
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|nextInOrder
operator|=
name|computeNextInOrder
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|prevInOrder ()
specifier|private
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|prevInOrder
parameter_list|()
block|{
name|Optional
argument_list|<
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|>
name|result
init|=
name|prevInOrder
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|prevInOrder
operator|=
name|computePrevInOrder
argument_list|()
else|:
name|result
return|;
block|}
comment|/**    * Returns {@code true} if there is a next path in an in-order traversal.    */
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextInOrder
argument_list|()
operator|.
name|isPresent
argument_list|()
return|;
block|}
comment|/**    * Returns {@code true} if there is a previous path in an in-order traversal.    */
DECL|method|hasPrev ()
specifier|public
name|boolean
name|hasPrev
parameter_list|()
block|{
return|return
name|prevInOrder
argument_list|()
operator|.
name|isPresent
argument_list|()
return|;
block|}
comment|/**    * Returns the next path in an in-order traversal.    *    * @throws NoSuchElementException if this would be the last path in an in-order traversal    */
DECL|method|next ()
specifier|public
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|nextInOrder
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the previous path in an in-order traversal.    *    * @throws NoSuchElementException if this would be the first path in an in-order traversal    */
DECL|method|prev ()
specifier|public
name|BSTInOrderPath
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|prev
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasPrev
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|prevInOrder
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the direction this path went in relative to its tail path, or {@code null} if this    * path has no tail.    */
DECL|method|getSide ()
specifier|public
name|BSTSide
name|getSide
parameter_list|()
block|{
return|return
name|side
return|;
block|}
block|}
end_class

end_unit

