begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedLists
operator|.
name|KeyAbsentBehavior
operator|.
name|NEXT_LOWER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedLists
operator|.
name|KeyPresentBehavior
operator|.
name|ANY_PRESENT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * An efficient immutable implementation of a {@link RangeSet}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|ImmutableRangeSet
specifier|final
class|class
name|ImmutableRangeSet
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
extends|extends
name|AbstractRangeSet
argument_list|<
name|C
argument_list|>
implements|implements
name|Serializable
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|ImmutableRangeSet
name|EMPTY
init|=
operator|new
name|ImmutableRangeSet
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|ALL
specifier|private
specifier|static
specifier|final
name|ImmutableRangeSet
name|ALL
init|=
operator|new
name|ImmutableRangeSet
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Returns an empty immutable range set.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|of
parameter_list|()
block|{
return|return
name|EMPTY
return|;
block|}
comment|/**    * Returns an immutable range set containing the single range {@link Range#all()}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|all ()
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|all
parameter_list|()
block|{
return|return
name|ALL
return|;
block|}
comment|/**    * Returns an immutable range set containing the specified single range. If {@link Range#isEmpty()    * range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.    */
DECL|method|of (Range<C> range)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|of
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|range
operator|.
name|equals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|all
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|range
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns an immutable copy of the specified {@code RangeSet}.    */
DECL|method|copyOf (RangeSet<C> rangeSet)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|copyOf
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
expr|<
name|C
operator|>
name|all
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|all
argument_list|()
return|;
block|}
if|if
condition|(
name|rangeSet
operator|instanceof
name|ImmutableRangeSet
condition|)
block|{
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|immutableRangeSet
init|=
operator|(
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
operator|)
name|rangeSet
decl_stmt|;
if|if
condition|(
operator|!
name|immutableRangeSet
operator|.
name|isPartialView
argument_list|()
condition|)
block|{
return|return
name|immutableRangeSet
return|;
block|}
block|}
return|return
operator|new
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ImmutableRangeSet (ImmutableList<Range<C>> ranges)
name|ImmutableRangeSet
parameter_list|(
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|ranges
parameter_list|)
block|{
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
block|}
DECL|method|ImmutableRangeSet (ImmutableList<Range<C>> ranges, ImmutableRangeSet<C> complement)
specifier|private
name|ImmutableRangeSet
parameter_list|(
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|ranges
parameter_list|,
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|complement
parameter_list|)
block|{
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
name|this
operator|.
name|complement
operator|=
name|complement
expr_stmt|;
block|}
DECL|field|ranges
specifier|private
specifier|transient
specifier|final
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|ranges
decl_stmt|;
annotation|@
name|Override
DECL|method|encloses (Range<C> otherRange)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|otherRange
parameter_list|)
block|{
name|int
name|index
init|=
name|SortedLists
operator|.
name|binarySearch
argument_list|(
name|ranges
argument_list|,
name|Range
operator|.
expr|<
name|C
operator|>
name|lowerBoundFn
argument_list|()
argument_list|,
name|otherRange
operator|.
name|lowerBound
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|ANY_PRESENT
argument_list|,
name|NEXT_LOWER
argument_list|)
decl_stmt|;
return|return
name|index
operator|!=
operator|-
literal|1
operator|&&
name|ranges
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|encloses
argument_list|(
name|otherRange
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rangeContaining (C value)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|rangeContaining
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|int
name|index
init|=
name|SortedLists
operator|.
name|binarySearch
argument_list|(
name|ranges
argument_list|,
name|Range
operator|.
expr|<
name|C
operator|>
name|lowerBoundFn
argument_list|()
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|value
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|ANY_PRESENT
argument_list|,
name|NEXT_LOWER
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|range
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|?
name|range
else|:
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|ranges
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> range)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addAll (RangeSet<C> other)
specifier|public
name|void
name|addAll
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> range)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|removeAll (RangeSet<C> other)
specifier|public
name|void
name|removeAll
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|asRanges ()
specifier|public
name|ImmutableSet
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asRanges
parameter_list|()
block|{
if|if
condition|(
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
return|return
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|(
name|ranges
argument_list|,
name|Range
operator|.
name|RANGE_LEX_ORDERING
argument_list|)
return|;
block|}
DECL|field|complement
specifier|private
specifier|transient
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|complement
decl_stmt|;
DECL|class|ComplementRanges
specifier|private
specifier|final
class|class
name|ComplementRanges
extends|extends
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
comment|// True if the "positive" range set is empty or bounded below.
DECL|field|positiveBoundedBelow
specifier|private
specifier|final
name|boolean
name|positiveBoundedBelow
decl_stmt|;
comment|// True if the "positive" range set is empty or bounded above.
DECL|field|positiveBoundedAbove
specifier|private
specifier|final
name|boolean
name|positiveBoundedAbove
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|ComplementRanges ()
name|ComplementRanges
parameter_list|()
block|{
name|this
operator|.
name|positiveBoundedBelow
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hasLowerBound
argument_list|()
expr_stmt|;
name|this
operator|.
name|positiveBoundedAbove
operator|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|ranges
argument_list|)
operator|.
name|hasUpperBound
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|ranges
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|positiveBoundedBelow
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|positiveBoundedAbove
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|lowerBound
decl_stmt|;
if|if
condition|(
name|positiveBoundedBelow
condition|)
block|{
name|lowerBound
operator|=
operator|(
name|index
operator|==
literal|0
operator|)
condition|?
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
else|:
name|ranges
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|.
name|upperBound
expr_stmt|;
block|}
else|else
block|{
name|lowerBound
operator|=
name|ranges
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|upperBound
expr_stmt|;
block|}
name|Cut
argument_list|<
name|C
argument_list|>
name|upperBound
decl_stmt|;
if|if
condition|(
name|positiveBoundedAbove
operator|&&
name|index
operator|==
name|size
operator|-
literal|1
condition|)
block|{
name|upperBound
operator|=
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|upperBound
operator|=
name|ranges
operator|.
name|get
argument_list|(
name|index
operator|+
operator|(
name|positiveBoundedBelow
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|)
operator|.
name|lowerBound
expr_stmt|;
block|}
return|return
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|complement ()
specifier|public
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|complement
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|result
init|=
name|complement
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|complement
operator|=
name|all
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ranges
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|complement
operator|=
name|of
argument_list|()
return|;
block|}
else|else
block|{
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|complementRanges
init|=
operator|new
name|ComplementRanges
argument_list|()
decl_stmt|;
name|result
operator|=
name|complement
operator|=
operator|new
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
argument_list|(
name|complementRanges
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|ranges
operator|.
name|isPartialView
argument_list|()
return|;
block|}
comment|/**    * Returns a new builder for an immutable range set.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Builder
argument_list|<
name|C
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|C
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * A builder for immutable range sets.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
DECL|field|rangeSet
specifier|private
specifier|final
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|rangeSet
operator|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add the specified range to this builder.  {@linkplain Range#isConnected Connected} ranges      * will be {@linkplain Range#span(Range) coalesced}.      *      * @throws IllegalArgumentException if {@code range} is empty or overlaps any ranges already      *         added to the builder      */
DECL|method|add (Range<C> range)
specifier|public
name|Builder
argument_list|<
name|C
argument_list|>
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"range must not be empty, but was "
operator|+
name|range
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
condition|)
block|{
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|currentRange
range|:
name|rangeSet
operator|.
name|asRanges
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
operator|!
name|currentRange
operator|.
name|isConnected
argument_list|(
name|range
argument_list|)
operator|||
name|currentRange
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Ranges may not overlap, but received %s and %s"
argument_list|,
name|currentRange
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should have thrown an IAE above"
argument_list|)
throw|;
block|}
name|rangeSet
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add all ranges from the specified range set to this builder. Duplicate or connected ranges      * are permitted, and will be merged in the resulting immutable range set.      */
DECL|method|addAll (RangeSet<C> ranges)
specifier|public
name|Builder
argument_list|<
name|C
argument_list|>
name|addAll
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|ranges
parameter_list|)
block|{
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|ranges
operator|.
name|asRanges
argument_list|()
control|)
block|{
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns an {@code ImmutableRangeSet} containing the ranges added to this builder.      */
DECL|method|build ()
specifier|public
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
name|build
parameter_list|()
block|{
return|return
name|copyOf
argument_list|(
name|rangeSet
argument_list|)
return|;
block|}
block|}
DECL|class|SerializedForm
specifier|private
specifier|static
specifier|final
class|class
name|SerializedForm
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
implements|implements
name|Serializable
block|{
DECL|field|ranges
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|ranges
decl_stmt|;
DECL|method|SerializedForm (ImmutableList<Range<C>> ranges)
name|SerializedForm
parameter_list|(
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|ranges
parameter_list|)
block|{
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
if|if
condition|(
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ranges
operator|.
name|equals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|all
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableRangeSet
argument_list|<
name|C
argument_list|>
argument_list|(
name|ranges
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|writeReplace ()
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerializedForm
argument_list|<
name|C
argument_list|>
argument_list|(
name|ranges
argument_list|)
return|;
block|}
block|}
end_class

end_unit

