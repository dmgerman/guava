begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkNonnegative
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ObjectArrays
operator|.
name|checkElementsNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RegularImmutableList
operator|.
name|EMPTY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link List} whose contents will never change, with many other important properties detailed at  * {@link ImmutableCollection}.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.  *  * @see ImmutableMap  * @see ImmutableSet  * @author Kevin Bourrillion  * @since 2.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// we're overriding default serialization
DECL|class|ImmutableList
specifier|public
specifier|abstract
class|class
name|ImmutableList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|List
argument_list|<
name|E
argument_list|>
implements|,
name|RandomAccess
block|{
comment|/**    * Returns a {@code Collector} that accumulates the input elements into a new {@code    * ImmutableList}, in encounter order.    *    * @since 21.0    */
annotation|@
name|Beta
DECL|method|toImmutableList ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collector
argument_list|<
name|E
argument_list|,
name|?
argument_list|,
name|ImmutableList
argument_list|<
name|E
argument_list|>
argument_list|>
name|toImmutableList
parameter_list|()
block|{
return|return
name|CollectCollectors
operator|.
name|toImmutableList
argument_list|()
return|;
block|}
comment|/**    * Returns the empty immutable list. This list behaves and performs comparably to {@link    * Collections#emptyList}, and is preferable mainly for consistency and maintainability of your    * code.    */
comment|// Casting to any type is safe because the list will never hold any elements.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|(
name|ImmutableList
argument_list|<
name|E
argument_list|>
operator|)
name|EMPTY
return|;
block|}
comment|/**    * Returns an immutable list containing a single element. This list behaves and performs    * comparably to {@link Collections#singleton}, but will not accept a null element. It is    * preferable mainly for consistency and maintainability of your code.    *    * @throws NullPointerException if {@code element} is null    */
DECL|method|of (E element)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|element
parameter_list|)
block|{
return|return
operator|new
name|SingletonImmutableList
argument_list|<
name|E
argument_list|>
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3, E e4)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3, E e4, E e5)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3, E e4, E e5, E e6)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3, E e4, E e5, E e6, E e7)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
name|e7
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|e7
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
name|e7
parameter_list|,
name|E
name|e8
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|e7
argument_list|,
name|e8
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of (E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
name|e7
parameter_list|,
name|E
name|e8
parameter_list|,
name|E
name|e9
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|e7
argument_list|,
name|e8
argument_list|,
name|e9
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of ( E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
name|e7
parameter_list|,
name|E
name|e8
parameter_list|,
name|E
name|e9
parameter_list|,
name|E
name|e10
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|e7
argument_list|,
name|e8
argument_list|,
name|e9
argument_list|,
name|e10
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any element is null    */
DECL|method|of ( E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
name|e7
parameter_list|,
name|E
name|e8
parameter_list|,
name|E
name|e9
parameter_list|,
name|E
name|e10
parameter_list|,
name|E
name|e11
parameter_list|)
block|{
return|return
name|construct
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|e7
argument_list|,
name|e8
argument_list|,
name|e9
argument_list|,
name|e10
argument_list|,
name|e11
argument_list|)
return|;
block|}
comment|// These go up to eleven. After that, you just get the varargs form, and
comment|// whatever warnings might come along with it. :(
comment|/**    * Returns an immutable list containing the given elements, in order.    *    *<p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.    *    * @throws NullPointerException if any element is null    * @since 3.0 (source-compatible since 2.0)    */
annotation|@
name|SafeVarargs
comment|// For Eclipse. For internal javac we have disabled this pointless type of warning.
DECL|method|of ( E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E... others)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
name|e7
parameter_list|,
name|E
name|e8
parameter_list|,
name|E
name|e9
parameter_list|,
name|E
name|e10
parameter_list|,
name|E
name|e11
parameter_list|,
name|E
name|e12
parameter_list|,
name|E
modifier|...
name|others
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|others
operator|.
name|length
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|12
argument_list|,
literal|"the total number of elements must fit in an int"
argument_list|)
expr_stmt|;
name|Object
index|[]
name|array
init|=
operator|new
name|Object
index|[
literal|12
operator|+
name|others
operator|.
name|length
index|]
decl_stmt|;
name|array
index|[
literal|0
index|]
operator|=
name|e1
expr_stmt|;
name|array
index|[
literal|1
index|]
operator|=
name|e2
expr_stmt|;
name|array
index|[
literal|2
index|]
operator|=
name|e3
expr_stmt|;
name|array
index|[
literal|3
index|]
operator|=
name|e4
expr_stmt|;
name|array
index|[
literal|4
index|]
operator|=
name|e5
expr_stmt|;
name|array
index|[
literal|5
index|]
operator|=
name|e6
expr_stmt|;
name|array
index|[
literal|6
index|]
operator|=
name|e7
expr_stmt|;
name|array
index|[
literal|7
index|]
operator|=
name|e8
expr_stmt|;
name|array
index|[
literal|8
index|]
operator|=
name|e9
expr_stmt|;
name|array
index|[
literal|9
index|]
operator|=
name|e10
expr_stmt|;
name|array
index|[
literal|10
index|]
operator|=
name|e11
expr_stmt|;
name|array
index|[
literal|11
index|]
operator|=
name|e12
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|others
argument_list|,
literal|0
argument_list|,
name|array
argument_list|,
literal|12
argument_list|,
name|others
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|construct
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order. If {@code elements} is a    * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it    * behaves exactly as {@code copyOf(elements.iterator()}.    *    * @throws NullPointerException if any of {@code elements} is null    */
DECL|method|copyOf (Iterable<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|elements
argument_list|)
expr_stmt|;
comment|// TODO(kevinb): is this here only for GWT?
return|return
operator|(
name|elements
operator|instanceof
name|Collection
operator|)
condition|?
name|copyOf
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
operator|)
name|elements
argument_list|)
else|:
name|copyOf
argument_list|(
name|elements
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    *<p>Despite the method name, this method attempts to avoid actually copying the data when it is    * safe to do so. The exact circumstances under which a copy will or will not be performed are    * undocumented and subject to change.    *    *<p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}    * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while    * ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one element    * (the given list itself).    *    *<p>This method is safe to use even when {@code elements} is a synchronized or concurrent    * collection that is currently being modified by another thread.    *    * @throws NullPointerException if any of {@code elements} is null    */
DECL|method|copyOf (Collection<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|instanceof
name|ImmutableCollection
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// all supported methods are covariant
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|list
init|=
operator|(
operator|(
name|ImmutableCollection
argument_list|<
name|E
argument_list|>
operator|)
name|elements
operator|)
operator|.
name|asList
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|isPartialView
argument_list|()
condition|?
name|ImmutableList
operator|.
expr|<
name|E
operator|>
name|asImmutableList
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|)
else|:
name|list
return|;
block|}
return|return
name|construct
argument_list|(
name|elements
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any of {@code elements} is null    */
DECL|method|copyOf (Iterator<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
comment|// We special-case for 0 or 1 elements, but going further is madness.
if|if
condition|(
operator|!
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
name|E
name|first
init|=
name|elements
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|of
argument_list|(
name|first
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|first
argument_list|)
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns an immutable list containing the given elements, in order.    *    * @throws NullPointerException if any of {@code elements} is null    * @since 3.0    */
DECL|method|copyOf (E[] elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|E
index|[]
name|elements
parameter_list|)
block|{
switch|switch
condition|(
name|elements
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
return|return
name|construct
argument_list|(
name|elements
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns an immutable list containing the given elements, sorted according to their natural    * order. The sorting algorithm used is stable, so elements that compare as equal will stay in the    * order in which they appear in the input.    *    *<p>If your data has no duplicates, or you wish to deduplicate elements, use {@code    * ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code    * asList()} view.    *    *<p><b>Java 8 users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted    * {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}.    *    * @throws NullPointerException if any element in the input is null    * @since 21.0    */
DECL|method|sortedCopyOf ( Iterable<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|sortedCopyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|Comparable
argument_list|<
name|?
argument_list|>
index|[]
name|array
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|elements
argument_list|,
operator|new
name|Comparable
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|checkElementsNotNull
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|array
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|asImmutableList
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable list containing the given elements, in sorted order relative to the    * specified comparator. The sorting algorithm used is stable, so elements that compare as equal    * will stay in the order in which they appear in the input.    *    *<p>If your data has no duplicates, or you wish to deduplicate elements, use {@code    * ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its    * {@code asList()} view.    *    *<p><b>Java 8 users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted    * {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}.    *    * @throws NullPointerException if any element in the input is null    * @since 21.0    */
DECL|method|sortedCopyOf ( Comparator<? super E> comparator, Iterable<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|sortedCopyOf
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// all supported methods are covariant
name|E
index|[]
name|array
init|=
operator|(
name|E
index|[]
operator|)
name|Iterables
operator|.
name|toArray
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|checkElementsNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|asImmutableList
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/** Views the array as an immutable list. Checks for nulls; does not copy. */
DECL|method|construct (Object... elements)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|construct
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|asImmutableList
argument_list|(
name|checkElementsNotNull
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Views the array as an immutable list. Does not check for nulls; does not copy.    *    *<p>The array must be internally created.    */
DECL|method|asImmutableList (Object[] elements)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|asImmutableList
parameter_list|(
name|Object
index|[]
name|elements
parameter_list|)
block|{
return|return
name|asImmutableList
argument_list|(
name|elements
argument_list|,
name|elements
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Views the array as an immutable list. Copies if the specified range does not cover the complete    * array. Does not check for nulls.    */
DECL|method|asImmutableList (Object[] elements, int length)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|asImmutableList
parameter_list|(
name|Object
index|[]
name|elements
parameter_list|,
name|int
name|length
parameter_list|)
block|{
switch|switch
condition|(
name|length
condition|)
block|{
case|case
literal|0
case|:
return|return
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
operator|(
name|E
operator|)
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
if|if
condition|(
name|length
operator|<
name|elements
operator|.
name|length
condition|)
block|{
name|elements
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegularImmutableList
argument_list|<
name|E
argument_list|>
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
DECL|method|ImmutableList ()
name|ImmutableList
parameter_list|()
block|{}
comment|// This declaration is needed to make List.iterator() and
comment|// ImmutableCollection.iterator() consistent.
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|listIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listIterator ()
specifier|public
name|UnmodifiableListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
name|listIterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listIterator (int index)
specifier|public
name|UnmodifiableListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|AbstractIndexedListIterator
argument_list|<
name|E
argument_list|>
argument_list|(
name|size
argument_list|()
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|forEach (Consumer<? super E> consumer)
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|indexOf (@ullable Object object)
specifier|public
name|int
name|indexOf
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
operator|(
name|object
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|Lists
operator|.
name|indexOfImpl
argument_list|(
name|this
argument_list|,
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lastIndexOf (@ullable Object object)
specifier|public
name|int
name|lastIndexOf
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
operator|(
name|object
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|Lists
operator|.
name|lastIndexOfImpl
argument_list|(
name|this
argument_list|,
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullable Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|object
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|// constrain the return type to ImmutableList<E>
comment|/**    * Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,    * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty    * immutable list is returned.)    */
annotation|@
name|Override
DECL|method|subList (int fromIndex, int toIndex)
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|toIndex
operator|-
name|fromIndex
decl_stmt|;
if|if
condition|(
name|length
operator|==
name|size
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|of
argument_list|(
name|get
argument_list|(
name|fromIndex
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subListUnchecked
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
block|}
comment|/**    * Called by the default implementation of {@link #subList} when {@code toIndex - fromIndex> 1},    * after index validation has already been performed.    */
DECL|method|subListUnchecked (int fromIndex, int toIndex)
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|subListUnchecked
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
return|return
operator|new
name|SubList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
name|fromIndex
argument_list|)
return|;
block|}
DECL|class|SubList
class|class
name|SubList
extends|extends
name|ImmutableList
argument_list|<
name|E
argument_list|>
block|{
DECL|field|offset
specifier|final
specifier|transient
name|int
name|offset
decl_stmt|;
DECL|field|length
specifier|final
specifier|transient
name|int
name|length
decl_stmt|;
DECL|method|SubList (int offset, int length)
name|SubList
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|this
operator|.
name|get
argument_list|(
name|index
operator|+
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|subList (int fromIndex, int toIndex)
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|this
operator|.
name|subList
argument_list|(
name|fromIndex
operator|+
name|offset
argument_list|,
name|toIndex
operator|+
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Guaranteed to throw an exception and leave the list unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|addAll (int index, Collection<? extends E> newElements)
specifier|public
specifier|final
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|newElements
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the list unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|set (int index, E element)
specifier|public
specifier|final
name|E
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the list unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|add (int index, E element)
specifier|public
specifier|final
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the list unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|remove (int index)
specifier|public
specifier|final
name|E
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the list unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|replaceAll (UnaryOperator<E> operator)
specifier|public
specifier|final
name|void
name|replaceAll
parameter_list|(
name|UnaryOperator
argument_list|<
name|E
argument_list|>
name|operator
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the list unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|sort (Comparator<? super E> c)
specifier|public
specifier|final
name|void
name|sort
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Returns this list instance.    *    * @since 2.0    */
annotation|@
name|Override
DECL|method|asList ()
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
name|indexed
argument_list|(
name|size
argument_list|()
argument_list|,
name|SPLITERATOR_CHARACTERISTICS
argument_list|,
name|this
operator|::
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyIntoArray (Object[] dst, int offset)
name|int
name|copyIntoArray
parameter_list|(
name|Object
index|[]
name|dst
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
comment|// this loop is faster for RandomAccess instances, which ImmutableLists are
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|dst
index|[
name|offset
operator|+
name|i
index|]
operator|=
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|offset
operator|+
name|size
return|;
block|}
comment|/**    * Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,    * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.    *    * @return a view of this immutable list in reverse order    * @since 7.0    */
DECL|method|reverse ()
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|reverse
parameter_list|()
block|{
return|return
operator|(
name|size
argument_list|()
operator|<=
literal|1
operator|)
condition|?
name|this
else|:
operator|new
name|ReverseImmutableList
argument_list|<
name|E
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|class|ReverseImmutableList
specifier|private
specifier|static
class|class
name|ReverseImmutableList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableList
argument_list|<
name|E
argument_list|>
block|{
DECL|field|forwardList
specifier|private
specifier|final
specifier|transient
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|forwardList
decl_stmt|;
DECL|method|ReverseImmutableList (ImmutableList<E> backingList)
name|ReverseImmutableList
parameter_list|(
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|backingList
parameter_list|)
block|{
name|this
operator|.
name|forwardList
operator|=
name|backingList
expr_stmt|;
block|}
DECL|method|reverseIndex (int index)
specifier|private
name|int
name|reverseIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|-
name|index
return|;
block|}
DECL|method|reversePosition (int index)
specifier|private
name|int
name|reversePosition
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|-
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|reverse ()
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|reverse
parameter_list|()
block|{
return|return
name|forwardList
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullable Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|forwardList
operator|.
name|contains
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|indexOf (@ullable Object object)
specifier|public
name|int
name|indexOf
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
name|int
name|index
init|=
name|forwardList
operator|.
name|lastIndexOf
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|>=
literal|0
operator|)
condition|?
name|reverseIndex
argument_list|(
name|index
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|lastIndexOf (@ullable Object object)
specifier|public
name|int
name|lastIndexOf
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
name|int
name|index
init|=
name|forwardList
operator|.
name|indexOf
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|>=
literal|0
operator|)
condition|?
name|reverseIndex
argument_list|(
name|index
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|subList (int fromIndex, int toIndex)
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|forwardList
operator|.
name|subList
argument_list|(
name|reversePosition
argument_list|(
name|toIndex
argument_list|)
argument_list|,
name|reversePosition
argument_list|(
name|fromIndex
argument_list|)
argument_list|)
operator|.
name|reverse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|forwardList
operator|.
name|get
argument_list|(
name|reverseIndex
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|forwardList
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|forwardList
operator|.
name|isPartialView
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|equalsImpl
argument_list|(
name|this
argument_list|,
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|int
name|n
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
operator|~
operator|~
name|hashCode
expr_stmt|;
comment|// needed to deal with GWT integer overflow
block|}
return|return
name|hashCode
return|;
block|}
comment|/*    * Serializes ImmutableLists as their logical contents. This ensures that    * implementation types do not leak into the serialized representation.    */
DECL|class|SerializedForm
specifier|static
class|class
name|SerializedForm
implements|implements
name|Serializable
block|{
DECL|field|elements
specifier|final
name|Object
index|[]
name|elements
decl_stmt|;
DECL|method|SerializedForm (Object[] elements)
name|SerializedForm
parameter_list|(
name|Object
index|[]
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|InvalidObjectException
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Use SerializedForm"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|writeReplace ()
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerializedForm
argument_list|(
name|toArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a new builder. The generated builder is equivalent to the builder created by the {@link    * Builder} constructor.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a new builder, expecting the specified number of elements to be added.    *    *<p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link    * Builder#build} is called, the builder is likely to perform better than an unsized {@link    * #builder()} would have.    *    *<p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,    * but not exactly, the number of elements added to the builder.    *    * @since 23.1    */
annotation|@
name|Beta
DECL|method|builderWithExpectedSize (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Builder
argument_list|<
name|E
argument_list|>
name|builderWithExpectedSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|expectedSize
argument_list|,
literal|"expectedSize"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
comment|/**    * A builder for creating immutable list instances, especially {@code public static final} lists    * ("constant lists"). Example:    *    *<pre>{@code    * public static final ImmutableList<Color> GOOGLE_COLORS    *     = new ImmutableList.Builder<Color>()    *         .addAll(WEBSAFE_COLORS)    *         .add(new Color(0, 191, 255))    *         .build();    * }</pre>    *    *<p>Elements appear in the resulting list in the same order they were added to the builder.    *    *<p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build    * multiple lists in series. Each new list contains all the elements of the ones created before    * it.    *    * @since 2.0    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableCollection
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
block|{
DECL|field|contents
annotation|@
name|VisibleForTesting
name|Object
index|[]
name|contents
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|forceCopy
specifier|private
name|boolean
name|forceCopy
decl_stmt|;
comment|/**      * Creates a new builder. The returned builder is equivalent to the builder generated by {@link      * ImmutableList#builder}.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_INITIAL_CAPACITY
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder (int capacity)
name|Builder
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|contents
operator|=
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getReadyToExpandTo (int minCapacity)
specifier|private
name|void
name|getReadyToExpandTo
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
if|if
condition|(
name|contents
operator|.
name|length
operator|<
name|minCapacity
condition|)
block|{
name|this
operator|.
name|contents
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|contents
argument_list|,
name|expandedCapacity
argument_list|(
name|contents
operator|.
name|length
argument_list|,
name|minCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|forceCopy
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|forceCopy
condition|)
block|{
name|contents
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|contents
argument_list|,
name|contents
operator|.
name|length
argument_list|)
expr_stmt|;
name|forceCopy
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Adds {@code element} to the {@code ImmutableList}.      *      * @param element the element to add      * @return this {@code Builder} object      * @throws NullPointerException if {@code element} is null      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|add (E element)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
name|element
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|getReadyToExpandTo
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|contents
index|[
name|size
operator|++
index|]
operator|=
name|element
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds each element of {@code elements} to the {@code ImmutableList}.      *      * @param elements the {@code Iterable} to add to the {@code ImmutableList}      * @return this {@code Builder} object      * @throws NullPointerException if {@code elements} is null or contains a null element      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|add (E... elements)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|checkElementsNotNull
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|elements
argument_list|,
name|elements
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|add (Object[] elements, int n)
specifier|private
name|void
name|add
parameter_list|(
name|Object
index|[]
name|elements
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|getReadyToExpandTo
argument_list|(
name|size
operator|+
name|n
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|,
name|contents
argument_list|,
name|size
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|size
operator|+=
name|n
expr_stmt|;
block|}
comment|/**      * Adds each element of {@code elements} to the {@code ImmutableList}.      *      * @param elements the {@code Iterable} to add to the {@code ImmutableList}      * @return this {@code Builder} object      * @throws NullPointerException if {@code elements} is null or contains a null element      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|addAll (Iterable<? extends E> elements)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|addAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|elements
argument_list|)
expr_stmt|;
if|if
condition|(
name|elements
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|elements
decl_stmt|;
name|getReadyToExpandTo
argument_list|(
name|size
operator|+
name|collection
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|instanceof
name|ImmutableCollection
condition|)
block|{
name|ImmutableCollection
argument_list|<
name|?
argument_list|>
name|immutableCollection
init|=
operator|(
name|ImmutableCollection
argument_list|<
name|?
argument_list|>
operator|)
name|collection
decl_stmt|;
name|size
operator|=
name|immutableCollection
operator|.
name|copyIntoArray
argument_list|(
name|contents
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
name|super
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds each element of {@code elements} to the {@code ImmutableList}.      *      * @param elements the {@code Iterable} to add to the {@code ImmutableList}      * @return this {@code Builder} object      * @throws NullPointerException if {@code elements} is null or contains a null element      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|addAll (Iterator<? extends E> elements)
specifier|public
name|Builder
argument_list|<
name|E
argument_list|>
name|addAll
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|super
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|combine (Builder<E> builder)
name|Builder
argument_list|<
name|E
argument_list|>
name|combine
parameter_list|(
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|builder
operator|.
name|contents
argument_list|,
name|builder
operator|.
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.      */
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|build
parameter_list|()
block|{
name|forceCopy
operator|=
literal|true
expr_stmt|;
return|return
name|asImmutableList
argument_list|(
name|contents
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

