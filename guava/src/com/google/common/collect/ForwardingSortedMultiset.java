begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A sorted multiset which forwards all its method calls to another sorted multiset. Subclasses  * should override one or more methods to modify the behavior of the backing multiset as desired per  * the<a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.  *  *<p><b>Warning:</b> The methods of {@code ForwardingSortedMultiset} forward  *<b>indiscriminately</b> to the methods of the delegate. For example, overriding {@link  * #add(Object, int)} alone<b>will not</b> change the behavior of {@link #add(Object)}, which can  * lead to unexpected behavior. In this case, you should override {@code add(Object)} as well,  * either providing your own implementation, or delegating to the provided {@code standardAdd}  * method.  *  *<p><b>{@code default} method warning:</b> This class does<i>not</i> forward calls to {@code  * default} methods. Instead, it inherits their default implementations. When those implementations  * invoke methods, they invoke methods on the {@code ForwardingSortedMultiset}.  *  *<p>The {@code standard} methods and any collection views they return are not guaranteed to be  * thread-safe, even when all of the methods that they depend on are thread-safe.  *  * @author Louis Wasserman  * @since 15.0  */
end_comment

begin_annotation
annotation|@
name|Beta
end_annotation

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|ForwardingSortedMultiset
specifier|public
specifier|abstract
name|class
name|ForwardingSortedMultiset
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|ForwardingMultiset
argument_list|<
name|E
argument_list|>
expr|implements
name|SortedMultiset
argument_list|<
name|E
argument_list|>
block|{
comment|/** Constructor for use by subclasses. */
DECL|method|ForwardingSortedMultiset ()
specifier|protected
name|ForwardingSortedMultiset
argument_list|()
block|{}
expr|@
name|Override
DECL|method|delegate ()
specifier|protected
specifier|abstract
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|;    @
name|Override
DECL|method|elementSet ()
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|elementSet
argument_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|elementSet
argument_list|()
return|;
block|}
comment|/**    * A sensible implementation of {@link SortedMultiset#elementSet} in terms of the following    * methods: {@link SortedMultiset#clear}, {@link SortedMultiset#comparator}, {@link    * SortedMultiset#contains}, {@link SortedMultiset#containsAll}, {@link SortedMultiset#count},    * {@link SortedMultiset#firstEntry} {@link SortedMultiset#headMultiset}, {@link    * SortedMultiset#isEmpty}, {@link SortedMultiset#lastEntry}, {@link SortedMultiset#subMultiset},    * {@link SortedMultiset#tailMultiset}, the {@code size()} and {@code iterator()} methods of    * {@link SortedMultiset#entrySet}, and {@link SortedMultiset#remove(Object, int)}. In many    * situations, you may wish to override {@link SortedMultiset#elementSet} to forward to this    * implementation or a subclass thereof.    *    * @since 15.0    */
DECL|class|StandardElementSet
specifier|protected
name|class
name|StandardElementSet
expr|extends
name|SortedMultisets
operator|.
name|NavigableElementSet
argument_list|<
name|E
argument_list|>
block|{
comment|/** Constructor for use by subclasses. */
DECL|method|StandardElementSet ()
specifier|public
name|StandardElementSet
argument_list|()
block|{
name|super
argument_list|(
name|ForwardingSortedMultiset
operator|.
name|this
argument_list|)
block|;     }
block|}
expr|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
argument_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|descendingMultiset ()
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|descendingMultiset
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|descendingMultiset
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * A skeleton implementation of a descending multiset view. Normally, {@link    * #descendingMultiset()} will not reflect any changes you make to the behavior of methods such as    * {@link #add(Object)} or {@link #pollFirstEntry}. This skeleton implementation correctly    * delegates each of its operations to the appropriate methods of this {@code    * ForwardingSortedMultiset}.    *    *<p>In many cases, you may wish to override {@link #descendingMultiset()} to return an instance    * of a subclass of {@code StandardDescendingMultiset}.    *    * @since 15.0    */
end_comment

begin_class
DECL|class|StandardDescendingMultiset
specifier|protected
specifier|abstract
class|class
name|StandardDescendingMultiset
extends|extends
name|DescendingMultiset
argument_list|<
name|E
argument_list|>
block|{
comment|/** Constructor for use by subclasses. */
DECL|method|StandardDescendingMultiset ()
specifier|public
name|StandardDescendingMultiset
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|forwardMultiset ()
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|forwardMultiset
parameter_list|()
block|{
return|return
name|ForwardingSortedMultiset
operator|.
name|this
return|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|firstEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|firstEntry
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|firstEntry
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}.    *    *<p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to    * forward to this implementation.    */
end_comment

begin_function
annotation|@
name|CheckForNull
DECL|method|standardFirstEntry ()
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|standardFirstEntry
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
init|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|lastEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|lastEntry
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lastEntry
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * A sensible definition of {@link #lastEntry()} in terms of {@code    * descendingMultiset().entrySet().iterator()}.    *    *<p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override    * {@link #firstEntry()} to forward to this implementation.    */
end_comment

begin_function
annotation|@
name|CheckForNull
DECL|method|standardLastEntry ()
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|standardLastEntry
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
init|=
name|descendingMultiset
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollFirstEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|pollFirstEntry
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollFirstEntry
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}.    *    *<p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to    * forward to this implementation.    */
end_comment

begin_function
annotation|@
name|CheckForNull
DECL|method|standardPollFirstEntry ()
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|standardPollFirstEntry
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
init|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|=
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|entry
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollLastEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|pollLastEntry
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollLastEntry
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * A sensible definition of {@link #pollLastEntry()} in terms of {@code    * descendingMultiset().entrySet().iterator()}.    *    *<p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to    * override {@link #pollLastEntry()} to forward to this implementation.    */
end_comment

begin_function
annotation|@
name|CheckForNull
DECL|method|standardPollLastEntry ()
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|standardPollLastEntry
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
init|=
name|descendingMultiset
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|=
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|entry
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headMultiset (@arametricNullness E upperBound, BoundType boundType)
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|headMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|upperBound
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|headMultiset
argument_list|(
name|upperBound
argument_list|,
name|boundType
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subMultiset ( @arametricNullness E lowerBound, BoundType lowerBoundType, @ParametricNullness E upperBound, BoundType upperBoundType)
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|lowerBound
parameter_list|,
name|BoundType
name|lowerBoundType
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|upperBound
parameter_list|,
name|BoundType
name|upperBoundType
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|subMultiset
argument_list|(
name|lowerBound
argument_list|,
name|lowerBoundType
argument_list|,
name|upperBound
argument_list|,
name|upperBoundType
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of    * {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object,    * BoundType) tailMultiset}.    *    *<p>If you override either of these methods, you may wish to override {@link    * #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.    */
end_comment

begin_function
DECL|method|standardSubMultiset ( @arametricNullness E lowerBound, BoundType lowerBoundType, @ParametricNullness E upperBound, BoundType upperBoundType)
specifier|protected
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|standardSubMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|lowerBound
parameter_list|,
name|BoundType
name|lowerBoundType
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|upperBound
parameter_list|,
name|BoundType
name|upperBoundType
parameter_list|)
block|{
return|return
name|tailMultiset
argument_list|(
name|lowerBound
argument_list|,
name|lowerBoundType
argument_list|)
operator|.
name|headMultiset
argument_list|(
name|upperBound
argument_list|,
name|upperBoundType
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailMultiset (@arametricNullness E lowerBound, BoundType boundType)
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|tailMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|lowerBound
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|tailMultiset
argument_list|(
name|lowerBound
argument_list|,
name|boundType
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

