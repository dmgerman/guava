begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|DoNotCall
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_comment
comment|/**  * "Overrides" the {@link ImmutableSet} static methods that lack {@link ImmutableSortedSet}  * equivalents with deprecated, exception-throwing versions. This prevents accidents like the  * following:  *  *<pre>{@code  * List<Object> objects = ...;  * // Sort them:  * Set<Object> sorted = ImmutableSortedSet.copyOf(objects);  * // BAD CODE! The returned set is actually an unsorted ImmutableSet!  * }</pre>  *  *<p>While we could put the overrides in {@link ImmutableSortedSet} itself, it seems clearer to  * separate these "do not call" methods from those intended for normal use.  *  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|ImmutableSortedSetFauxverideShim
specifier|abstract
class|class
name|ImmutableSortedSetFauxverideShim
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableSet
argument_list|<
name|E
argument_list|>
block|{
comment|/**    * Not supported. Use {@link ImmutableSortedSet#toImmutableSortedSet} instead. This method exists    * only to hide {@link ImmutableSet#toImmutableSet} from consumers of {@code ImmutableSortedSet}.    *    * @throws UnsupportedOperationException always    * @deprecated Use {@link ImmutableSortedSet#toImmutableSortedSet}.    * @since 21.0    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Use toImmutableSortedSet"
argument_list|)
annotation|@
name|Deprecated
DECL|method|toImmutableSet ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collector
argument_list|<
name|E
argument_list|,
name|?
argument_list|,
name|ImmutableSet
argument_list|<
name|E
argument_list|>
argument_list|>
name|toImmutableSet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported. Use {@link ImmutableSortedSet#naturalOrder}, which offers better type-safety,    * instead. This method exists only to hide {@link ImmutableSet#builder} from consumers of {@code    * ImmutableSortedSet}.    *    * @throws UnsupportedOperationException always    * @deprecated Use {@link ImmutableSortedSet#naturalOrder}, which offers better type-safety.    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Use naturalOrder"
argument_list|)
annotation|@
name|Deprecated
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported. This method exists only to hide {@link ImmutableSet#builderWithExpectedSize}    * from consumers of {@code ImmutableSortedSet}.    *    * @throws UnsupportedOperationException always    * @deprecated Not supported by ImmutableSortedSet.    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Use naturalOrder (which does not accept an expected size)"
argument_list|)
annotation|@
name|Deprecated
DECL|method|builderWithExpectedSize (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
name|builderWithExpectedSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain a non-{@code Comparable}    * element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass a parameter of type {@code Comparable} to use {@link    *     ImmutableSortedSet#of(Comparable)}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass a parameter of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|of (E element)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain a non-{@code Comparable}    * element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass the parameters of type {@code Comparable} to use {@link    *     ImmutableSortedSet#of(Comparable, Comparable)}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass parameters of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|of (E e1, E e2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain a non-{@code Comparable}    * element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass the parameters of type {@code Comparable} to use {@link    *     ImmutableSortedSet#of(Comparable, Comparable, Comparable)}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass parameters of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|of (E e1, E e2, E e3)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain a non-{@code Comparable}    * element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass the parameters of type {@code Comparable} to use {@link    *     ImmutableSortedSet#of(Comparable, Comparable, Comparable, Comparable)}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass parameters of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|of (E e1, E e2, E e3, E e4)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain a non-{@code Comparable}    * element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass the parameters of type {@code Comparable} to use {@link    *     ImmutableSortedSet#of( Comparable, Comparable, Comparable, Comparable, Comparable)}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass parameters of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|of (E e1, E e2, E e3, E e4, E e5)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain a non-{@code Comparable}    * element.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass the parameters of type {@code Comparable} to use {@link    *     ImmutableSortedSet#of(Comparable, Comparable, Comparable, Comparable, Comparable,    *     Comparable, Comparable...)}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass parameters of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|of (E e1, E e2, E e3, E e4, E e5, E e6, E... remaining)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
modifier|...
name|remaining
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Not supported.<b>You are attempting to create a set that may contain non-{@code Comparable}    * elements.</b> Proper calls will resolve to the version in {@code ImmutableSortedSet}, not this    * dummy version.    *    * @throws UnsupportedOperationException always    * @deprecated<b>Pass parameters of type {@code Comparable} to use {@link    *     ImmutableSortedSet#copyOf(Comparable[])}.</b>    */
annotation|@
name|DoNotCall
argument_list|(
literal|"Pass parameters of type Comparable"
argument_list|)
annotation|@
name|Deprecated
DECL|method|copyOf (E[] elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|E
index|[]
name|elements
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/*    * We would like to include an unsupported "<E> copyOf(Iterable<E>)" here,    * providing only the properly typed    * "<E extends Comparable<E>> copyOf(Iterable<E>)" in ImmutableSortedSet (and    * likewise for the Iterator equivalent). However, due to a change in Sun's    * interpretation of the JLS (as described at    * http://bugs.sun.com/view_bug.do?bug_id=6182950), the OpenJDK 7 compiler    * available as of this writing rejects our attempts. To maintain    * compatibility with that version and with any other compilers that interpret    * the JLS similarly, there is no definition of copyOf() here, and the    * definition in ImmutableSortedSet matches that in ImmutableSet.    *    * The result is that ImmutableSortedSet.copyOf() may be called on    * non-Comparable elements. We have not discovered a better solution. In    * retrospect, the static factory methods should have gone in a separate class    * so that ImmutableSortedSet wouldn't "inherit" too-permissive factory    * methods from ImmutableSet.    */
block|}
end_class

end_unit

