begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|IteratorBasedAbstractMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|DoNotCall
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Fixed-size {@link Table} implementation backed by a two-dimensional array.  *  *<p><b>Warning:</b> {@code ArrayTable} is rarely the {@link Table} implementation you want. First,  * it requires that the complete universe of rows and columns be specified at construction time.  * Second, it is always backed by an array large enough to hold a value for every possible  * combination of row and column keys. (This is rarely optimal unless the table is extremely dense.)  * Finally, every possible combination of row and column keys is always considered to have a value  * associated with it: It is not possible to "remove" a value, only to replace it with {@code null},  * which will still appear when iterating over the table's contents in a foreach loop or a call to a  * null-hostile method like {@link ImmutableTable#copyOf}. For alternatives, please see<a  * href="https://github.com/google/guava/wiki/NewCollectionTypesExplained#table">the wiki</a>.  *  *<p>The allowed row and column keys must be supplied when the table is created. The table always  * contains a mapping for every row key / column pair. The value corresponding to a given row and  * column is null unless another value is provided.  *  *<p>The table's size is constant: the product of the number of supplied row keys and the number of  * supplied column keys. The {@code remove} and {@code clear} methods are not supported by the table  * or its views. The {@link #erase} and {@link #eraseAll} methods may be used instead.  *  *<p>The ordering of the row and column keys provided when the table is constructed determines the  * iteration ordering across rows and columns in the table's views. None of the view iterators  * support {@link Iterator#remove}. If the table is modified after an iterator is created, the  * iterator remains valid.  *  *<p>This class requires less memory than the {@link HashBasedTable} and {@link TreeBasedTable}  * implementations, except when the table is sparse.  *  *<p>Null row keys or column keys are not permitted.  *  *<p>This class provides methods involving the underlying array structure, where the array indices  * correspond to the position of a row or column in the lists of allowed keys and values. See the  * {@link #at}, {@link #set}, {@link #toArray}, {@link #rowKeyList}, and {@link #columnKeyList}  * methods for more details.  *  *<p>Note that this implementation is not synchronized. If multiple threads access the same cell of  * an {@code ArrayTable} concurrently and one of the threads modifies its value, there is no  * guarantee that the new value will be fully visible to the other threads. To guarantee that  * modifications are visible, synchronize access to the table. Unlike other {@code Table}  * implementations, synchronization is unnecessary between a thread that writes to one cell and a  * thread that reads from another.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"> {@code Table}</a>.  *  * @author Jared Levy  * @since 10.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|ArrayTable
specifier|public
specifier|final
class|class
name|ArrayTable
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
implements|implements
name|Serializable
block|{
comment|/**    * Creates an {@code ArrayTable} filled with {@code null}.    *    * @param rowKeys row keys that may be stored in the generated table    * @param columnKeys column keys that may be stored in the generated table    * @throws NullPointerException if any of the provided keys is null    * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates    *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.    */
DECL|method|create ( Iterable<? extends R> rowKeys, Iterable<? extends C> columnKeys)
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|ArrayTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|R
argument_list|>
name|rowKeys
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|C
argument_list|>
name|columnKeys
parameter_list|)
block|{
return|return
operator|new
name|ArrayTable
argument_list|<>
argument_list|(
name|rowKeys
argument_list|,
name|columnKeys
argument_list|)
return|;
block|}
comment|/*    * TODO(jlevy): Add factory methods taking an Enum class, instead of an    * iterable, to specify the allowed row keys and/or column keys. Note that    * custom serialization logic is needed to support different enum sizes during    * serialization and deserialization.    */
comment|/**    * Creates an {@code ArrayTable} with the mappings in the provided table.    *    *<p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with    * column key {@code c}, the returned table contains a mapping with row key {@code r} and column    * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to    * {@code null} in the generated table.    *    *<p>The returned table allows subsequent {@code put} calls with the row keys in {@code    * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}    * with other keys leads to an {@code IllegalArgumentException}.    *    *<p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the    * row and column iteration ordering of the returned table.    *    * @throws NullPointerException if {@code table} has a null key    */
DECL|method|create (Table<R, C, ? extends @Nullable V> table)
specifier|public
specifier|static
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|ArrayTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|create
argument_list|(
name|Table
operator|<
name|R
argument_list|,
name|C
argument_list|,
operator|?
expr|extends @
name|Nullable
name|V
operator|>
name|table
argument_list|)
block|{
return|return
operator|(
name|table
operator|instanceof
name|ArrayTable
operator|)
condition|?
operator|new
name|ArrayTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|(
operator|(
name|ArrayTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
operator|)
name|table
argument_list|)
else|:
operator|new
name|ArrayTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|(
name|table
argument_list|)
return|;
block|}
DECL|field|rowList
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|R
argument_list|>
name|rowList
decl_stmt|;
DECL|field|columnList
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|C
argument_list|>
name|columnList
decl_stmt|;
comment|// TODO(jlevy): Add getters returning rowKeyToIndex and columnKeyToIndex?
DECL|field|rowKeyToIndex
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Integer
argument_list|>
name|rowKeyToIndex
decl_stmt|;
DECL|field|columnKeyToIndex
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Integer
argument_list|>
name|columnKeyToIndex
decl_stmt|;
DECL|field|array
specifier|private
specifier|final
annotation|@
name|Nullable
name|V
index|[]
index|[]
name|array
decl_stmt|;
DECL|method|ArrayTable (Iterable<? extends R> rowKeys, Iterable<? extends C> columnKeys)
specifier|private
name|ArrayTable
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|R
argument_list|>
name|rowKeys
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|C
argument_list|>
name|columnKeys
parameter_list|)
block|{
name|this
operator|.
name|rowList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rowKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|columnKeys
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|rowList
operator|.
name|isEmpty
argument_list|()
operator|==
name|columnList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * TODO(jlevy): Support only one of rowKey / columnKey being empty? If we      * do, when columnKeys is empty but rowKeys isn't, rowKeyList() can contain      * elements but rowKeySet() will be empty and containsRow() won't      * acknowledge them.      */
name|rowKeyToIndex
operator|=
name|Maps
operator|.
name|indexMap
argument_list|(
name|rowList
argument_list|)
expr_stmt|;
name|columnKeyToIndex
operator|=
name|Maps
operator|.
name|indexMap
argument_list|(
name|columnList
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Nullable
name|V
index|[]
index|[]
name|tmpArray
init|=
operator|(
expr|@
name|Nullable
name|V
index|[]
index|[]
operator|)
operator|new
name|Object
index|[
name|rowList
operator|.
name|size
argument_list|()
index|]
index|[
name|columnList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|array
operator|=
name|tmpArray
expr_stmt|;
comment|// Necessary because in GWT the arrays are initialized with "undefined" instead of null.
name|eraseAll
argument_list|()
expr_stmt|;
block|}
DECL|method|ArrayTable (Table<R, C, ? extends @Nullable V> table)
specifier|private
name|ArrayTable
argument_list|(
name|Table
operator|<
name|R
argument_list|,
name|C
argument_list|,
operator|?
expr|extends @
name|Nullable
name|V
operator|>
name|table
argument_list|)
block|{
name|this
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
argument_list|)
block|;
name|putAll
argument_list|(
name|table
argument_list|)
block|;   }
DECL|method|ArrayTable (ArrayTable<R, C, V> table)
specifier|private
name|ArrayTable
argument_list|(
name|ArrayTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|table
argument_list|)
block|{
name|rowList
operator|=
name|table
operator|.
name|rowList
block|;
name|columnList
operator|=
name|table
operator|.
name|columnList
block|;
name|rowKeyToIndex
operator|=
name|table
operator|.
name|rowKeyToIndex
block|;
name|columnKeyToIndex
operator|=
name|table
operator|.
name|columnKeyToIndex
block|;     @
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Nullable
name|V
index|[]
index|[]
name|copy
operator|=
operator|(
expr|@
name|Nullable
name|V
index|[]
index|[]
operator|)
operator|new
name|Object
index|[
name|rowList
operator|.
name|size
argument_list|()
index|]
index|[
name|columnList
operator|.
name|size
argument_list|()
index|]
block|;
name|array
operator|=
name|copy
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|table
operator|.
name|array
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|copy
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|table
operator|.
name|array
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_expr_stmt
DECL|class|ArrayMap
specifier|private
specifier|abstract
specifier|static
name|class
name|ArrayMap
operator|<
name|K
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|IteratorBasedAbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|keyIndex
specifier|private
name|final
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|Integer
argument_list|>
name|keyIndex
block|;
DECL|method|ArrayMap (ImmutableMap<K, Integer> keyIndex)
specifier|private
name|ArrayMap
argument_list|(
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|Integer
argument_list|>
name|keyIndex
argument_list|)
block|{
name|this
operator|.
name|keyIndex
operator|=
name|keyIndex
block|;     }
expr|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
argument_list|()
block|{
return|return
name|keyIndex
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getKey (int index)
name|K
name|getKey
argument_list|(
name|int
name|index
argument_list|)
block|{
return|return
name|keyIndex
operator|.
name|keySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
end_expr_stmt

begin_function_decl
DECL|method|getKeyRole ()
specifier|abstract
name|String
name|getKeyRole
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
annotation|@
name|ParametricNullness
DECL|method|getValue (int index)
specifier|abstract
name|V
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
annotation|@
name|ParametricNullness
DECL|method|setValue (int index, @ParametricNullness V newValue)
specifier|abstract
name|V
name|setValue
parameter_list|(
name|int
name|index
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|newValue
parameter_list|)
function_decl|;
end_function_decl

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyIndex
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|keyIndex
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getEntry (final int index)
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getEntry
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|ArrayMap
operator|.
name|this
operator|.
name|getKey
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|ParametricNullness
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|ArrayMap
operator|.
name|this
operator|.
name|getValue
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|ParametricNullness
specifier|public
name|V
name|setValue
parameter_list|(
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
return|return
name|ArrayMap
operator|.
name|this
operator|.
name|setValue
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIndexedListIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|getEntry
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entrySpliterator ()
name|Spliterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySpliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
name|indexed
argument_list|(
name|size
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|ORDERED
argument_list|,
name|this
operator|::
name|getEntry
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// TODO(lowasser): consider an optimized values() implementation
end_comment

begin_function
annotation|@
name|Override
DECL|method|containsKey (@heckForNull Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
return|return
name|keyIndex
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|CheckForNull
annotation|@
name|Override
DECL|method|get (@heckForNull Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
name|Integer
name|index
init|=
name|keyIndex
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|getValue
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (K key, @ParametricNullness V value)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
name|Integer
name|index
init|=
name|keyIndex
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|getKeyRole
argument_list|()
operator|+
literal|" "
operator|+
name|key
operator|+
literal|" not in "
operator|+
name|keyIndex
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|setValue
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|remove (@heckForNull Object key)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_comment
unit|}
comment|/**    * Returns, as an immutable list, the row keys provided when the table was constructed, including    * those that are mapped to null values only.    */
end_comment

begin_function
DECL|method|rowKeyList ()
unit|public
name|ImmutableList
argument_list|<
name|R
argument_list|>
name|rowKeyList
parameter_list|()
block|{
return|return
name|rowList
return|;
block|}
end_function

begin_comment
comment|/**    * Returns, as an immutable list, the column keys provided when the table was constructed,    * including those that are mapped to null values only.    */
end_comment

begin_function
DECL|method|columnKeyList ()
specifier|public
name|ImmutableList
argument_list|<
name|C
argument_list|>
name|columnKeyList
parameter_list|()
block|{
return|return
name|columnList
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the value corresponding to the specified row and column indices. The same value is    * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this    * method runs more quickly.    *    * @param rowIndex position of the row key in {@link #rowKeyList()}    * @param columnIndex position of the row key in {@link #columnKeyList()}    * @return the value with the specified row and column    * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than    *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal    *     to the number of allowed column keys    */
end_comment

begin_function
annotation|@
name|CheckForNull
DECL|method|at (int rowIndex, int columnIndex)
specifier|public
name|V
name|at
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
comment|// In GWT array access never throws IndexOutOfBoundsException.
name|checkElementIndex
argument_list|(
name|rowIndex
argument_list|,
name|rowList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkElementIndex
argument_list|(
name|columnIndex
argument_list|,
name|columnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|array
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
return|;
block|}
end_function

begin_comment
comment|/**    * Associates {@code value} with the specified row and column indices. The logic {@code    * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same    * behavior, but this method runs more quickly.    *    * @param rowIndex position of the row key in {@link #rowKeyList()}    * @param columnIndex position of the row key in {@link #columnKeyList()}    * @param value value to store in the table    * @return the previous value with the specified row and column    * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than    *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal    *     to the number of allowed column keys    */
end_comment

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|CheckForNull
DECL|method|set (int rowIndex, int columnIndex, @CheckForNull V value)
specifier|public
name|V
name|set
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|,
annotation|@
name|CheckForNull
name|V
name|value
parameter_list|)
block|{
comment|// In GWT array access never throws IndexOutOfBoundsException.
name|checkElementIndex
argument_list|(
name|rowIndex
argument_list|,
name|rowList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkElementIndex
argument_list|(
name|columnIndex
argument_list|,
name|columnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|V
name|oldValue
init|=
name|array
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
decl_stmt|;
name|array
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a two-dimensional array with the table contents. The row and column indices correspond    * to the positions of the row and column in the iterables provided during table construction. If    * the table lacks a mapping for a given row and column, the corresponding array element is null.    *    *<p>Subsequent table changes will not modify the array, and vice versa.    *    * @param valueClass class of values stored in the returned array    */
end_comment

begin_function
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|toArray (Class<V> valueClass)
specifier|public
annotation|@
name|Nullable
name|V
index|[]
index|[]
name|toArray
parameter_list|(
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// TODO: safe?
annotation|@
name|Nullable
name|V
index|[]
index|[]
name|copy
init|=
operator|(
expr|@
name|Nullable
name|V
index|[]
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|valueClass
argument_list|,
name|rowList
operator|.
name|size
argument_list|()
argument_list|,
name|columnList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|copy
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|array
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
end_function

begin_comment
comment|/**    * Not supported. Use {@link #eraseAll} instead.    *    * @throws UnsupportedOperationException always    * @deprecated Use {@link #eraseAll}    */
end_comment

begin_function
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_comment
comment|/** Associates the value {@code null} with every pair of allowed row and column keys. */
end_comment

begin_function
DECL|method|eraseAll ()
specifier|public
name|void
name|eraseAll
parameter_list|()
block|{
for|for
control|(
annotation|@
name|Nullable
name|V
index|[]
name|row
range|:
name|array
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Returns {@code true} if the provided keys are among the keys provided when the table was    * constructed.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|contains (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|containsRow
argument_list|(
name|rowKey
argument_list|)
operator|&&
name|containsColumn
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns {@code true} if the provided column key is among the column keys provided when the    * table was constructed.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|containsColumn (@heckForNull Object columnKey)
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|columnKeyToIndex
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns {@code true} if the provided row key is among the row keys provided when the table was    * constructed.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|containsRow (@heckForNull Object rowKey)
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|)
block|{
return|return
name|rowKeyToIndex
operator|.
name|containsKey
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
for|for
control|(
annotation|@
name|Nullable
name|V
index|[]
name|row
range|:
name|array
control|)
block|{
for|for
control|(
name|V
name|element
range|:
name|row
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|element
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|get (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
name|Integer
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|Integer
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|rowIndex
operator|==
literal|null
operator|||
name|columnIndex
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|at
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns {@code true} if {@code rowKeyList().size == 0} or {@code columnKeyList().size() == 0}.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|rowList
operator|.
name|isEmpty
argument_list|()
operator|||
name|columnList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * {@inheritDoc}    *    * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code    *     columnKey} is not in {@link #columnKeySet()}.    */
end_comment

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (R rowKey, C columnKey, @CheckForNull V value)
specifier|public
name|V
name|put
parameter_list|(
name|R
name|rowKey
parameter_list|,
name|C
name|columnKey
parameter_list|,
annotation|@
name|CheckForNull
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|Integer
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|rowIndex
operator|!=
literal|null
argument_list|,
literal|"Row %s not in %s"
argument_list|,
name|rowKey
argument_list|,
name|rowList
argument_list|)
expr_stmt|;
name|Integer
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|columnIndex
operator|!=
literal|null
argument_list|,
literal|"Column %s not in %s"
argument_list|,
name|columnKey
argument_list|,
name|columnList
argument_list|)
expr_stmt|;
return|return
name|set
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * TODO(jlevy): Consider creating a merge() method, similar to putAll() but    * copying non-null values only.    */
end_comment

begin_comment
comment|/**    * {@inheritDoc}    *    *<p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,    * possibly replacing values that were previously non-null.    *    * @throws NullPointerException if {@code table} has a null key    * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not    *     in {@link #rowKeySet()} or {@link #columnKeySet()}    */
end_comment

begin_decl_stmt
annotation|@
name|Override
DECL|method|putAll (Table<? extends R, ? extends C, ? extends @Nullable V> table)
specifier|public
name|void
name|putAll
argument_list|(
name|Table
operator|<
condition|?
then|extends
name|R
argument_list|,
operator|?
expr|extends
name|C
argument_list|,
operator|?
expr|extends @
name|Nullable
name|V
operator|>
name|table
argument_list|)
block|{
name|super
operator|.
name|putAll
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/**    * Not supported. Use {@link #erase} instead.    *    * @throws UnsupportedOperationException always    * @deprecated Use {@link #erase}    */
end_comment

begin_function
annotation|@
name|DoNotCall
argument_list|(
literal|"Always throws UnsupportedOperationException"
argument_list|)
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
annotation|@
name|Deprecated
annotation|@
name|CheckForNull
DECL|method|remove (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_comment
comment|/**    * Associates the value {@code null} with the specified keys, assuming both keys are valid. If    * either key is null or isn't among the keys provided during construction, this method has no    * effect.    *    *<p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys    * are valid.    *    * @param rowKey row key of mapping to be erased    * @param columnKey column key of mapping to be erased    * @return the value previously associated with the keys, or {@code null} if no mapping existed    *     for the keys    */
end_comment

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|CheckForNull
DECL|method|erase (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|V
name|erase
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
name|Integer
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|Integer
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowIndex
operator|==
literal|null
operator|||
name|columnIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|set
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// TODO(jlevy): Add eraseRow and eraseColumn methods?
end_comment

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|rowList
operator|.
name|size
argument_list|()
operator|*
name|columnList
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table    * will update the returned set.    *    *<p>The returned set's iterator traverses the mappings with the first row key, the mappings with    * the second row key, and so on.    *    *<p>The value in the returned cells may change if the table subsequently changes.    *    * @return set of table cells consisting of row key / column key / value triplets    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|cellSet ()
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
name|cellSet
parameter_list|()
block|{
return|return
name|super
operator|.
name|cellSet
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|cellIterator ()
name|Iterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
name|cellIterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIndexedListIterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|get
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|getCell
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|cellSpliterator ()
name|Spliterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
name|cellSpliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
expr|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
operator|>
name|indexed
argument_list|(
name|size
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|ORDERED
operator||
name|Spliterator
operator|.
name|NONNULL
operator||
name|Spliterator
operator|.
name|DISTINCT
argument_list|,
name|this
operator|::
name|getCell
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getCell (final int index)
specifier|private
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|getCell
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|Tables
operator|.
name|AbstractCell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|()
block|{
specifier|final
name|int
name|rowIndex
init|=
name|index
operator|/
name|columnList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnIndex
init|=
name|index
operator|%
name|columnList
operator|.
name|size
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|R
name|getRowKey
parameter_list|()
block|{
return|return
name|rowList
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|C
name|getColumnKey
parameter_list|()
block|{
return|return
name|columnList
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|at
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|CheckForNull
DECL|method|getValue (int index)
specifier|private
name|V
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|rowIndex
init|=
name|index
operator|/
name|columnList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|columnIndex
init|=
name|index
operator|%
name|columnList
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|at
argument_list|(
name|rowIndex
argument_list|,
name|columnIndex
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a view of all mappings that have the given column key. If the column key isn't in    * {@link #columnKeySet()}, an empty immutable map is returned.    *    *<p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key    * with the corresponding value in the table. Changes to the returned map will update the    * underlying table, and vice versa.    *    * @param columnKey key of column to search for in the table    * @return the corresponding map from row keys to values    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|column (C columnKey)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|Integer
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|null
condition|)
block|{
return|return
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|Column
argument_list|(
name|columnIndex
argument_list|)
return|;
block|}
block|}
end_function

begin_class
DECL|class|Column
specifier|private
class|class
name|Column
extends|extends
name|ArrayMap
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
block|{
DECL|field|columnIndex
specifier|final
name|int
name|columnIndex
decl_stmt|;
DECL|method|Column (int columnIndex)
name|Column
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|rowKeyToIndex
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnIndex
operator|=
name|columnIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyRole ()
name|String
name|getKeyRole
parameter_list|()
block|{
return|return
literal|"Row"
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getValue (int index)
name|V
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|at
argument_list|(
name|index
argument_list|,
name|columnIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|setValue (int index, @CheckForNull V newValue)
name|V
name|setValue
parameter_list|(
name|int
name|index
parameter_list|,
annotation|@
name|CheckForNull
name|V
name|newValue
parameter_list|)
block|{
return|return
name|set
argument_list|(
name|index
argument_list|,
name|columnIndex
argument_list|,
name|newValue
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Returns an immutable set of the valid column keys, including those that are associated with    * null values only.    *    * @return immutable set of column keys    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|columnKeySet ()
specifier|public
name|ImmutableSet
argument_list|<
name|C
argument_list|>
name|columnKeySet
parameter_list|()
block|{
return|return
name|columnKeyToIndex
operator|.
name|keySet
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
DECL|field|columnMap
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|ColumnMap
name|columnMap
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|columnMap ()
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
name|ColumnMap
name|map
init|=
name|columnMap
decl_stmt|;
return|return
operator|(
name|map
operator|==
literal|null
operator|)
condition|?
name|columnMap
operator|=
operator|new
name|ColumnMap
argument_list|()
else|:
name|map
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|ColumnMap
specifier|private
class|class
name|ColumnMap
extends|extends
name|ArrayMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
block|{
DECL|method|ColumnMap ()
specifier|private
name|ColumnMap
parameter_list|()
block|{
name|super
argument_list|(
name|columnKeyToIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyRole ()
name|String
name|getKeyRole
parameter_list|()
block|{
return|return
literal|"Column"
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (int index)
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|Column
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (int index, Map<R, @Nullable V> newValue)
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|setValue
parameter_list|(
name|int
name|index
parameter_list|,
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|newValue
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (C key, Map<R, @Nullable V> value)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|put
parameter_list|(
name|C
name|key
parameter_list|,
name|Map
argument_list|<
name|R
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

begin_comment
comment|/**    * Returns a view of all mappings that have the given row key. If the row key isn't in {@link    * #rowKeySet()}, an empty immutable map is returned.    *    *<p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the    * column key with the corresponding value in the table. Changes to the returned map will update    * the underlying table, and vice versa.    *    * @param rowKey key of row to search for in the table    * @return the corresponding map from column keys to values    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|row (R rowKey)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|Integer
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowIndex
operator|==
literal|null
condition|)
block|{
return|return
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|Row
argument_list|(
name|rowIndex
argument_list|)
return|;
block|}
block|}
end_function

begin_class
DECL|class|Row
specifier|private
class|class
name|Row
extends|extends
name|ArrayMap
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
block|{
DECL|field|rowIndex
specifier|final
name|int
name|rowIndex
decl_stmt|;
DECL|method|Row (int rowIndex)
name|Row
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnKeyToIndex
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowIndex
operator|=
name|rowIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyRole ()
name|String
name|getKeyRole
parameter_list|()
block|{
return|return
literal|"Column"
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getValue (int index)
name|V
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|at
argument_list|(
name|rowIndex
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|setValue (int index, @CheckForNull V newValue)
name|V
name|setValue
parameter_list|(
name|int
name|index
parameter_list|,
annotation|@
name|CheckForNull
name|V
name|newValue
parameter_list|)
block|{
return|return
name|set
argument_list|(
name|rowIndex
argument_list|,
name|index
argument_list|,
name|newValue
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Returns an immutable set of the valid row keys, including those that are associated with null    * values only.    *    * @return immutable set of row keys    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|rowKeySet ()
specifier|public
name|ImmutableSet
argument_list|<
name|R
argument_list|>
name|rowKeySet
parameter_list|()
block|{
return|return
name|rowKeyToIndex
operator|.
name|keySet
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
DECL|field|rowMap
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|RowMap
name|rowMap
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|rowMap ()
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
name|RowMap
name|map
init|=
name|rowMap
decl_stmt|;
return|return
operator|(
name|map
operator|==
literal|null
operator|)
condition|?
name|rowMap
operator|=
operator|new
name|RowMap
argument_list|()
else|:
name|map
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|RowMap
specifier|private
class|class
name|RowMap
extends|extends
name|ArrayMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
block|{
DECL|method|RowMap ()
specifier|private
name|RowMap
parameter_list|()
block|{
name|super
argument_list|(
name|rowKeyToIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeyRole ()
name|String
name|getKeyRole
parameter_list|()
block|{
return|return
literal|"Row"
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (int index)
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|Row
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (int index, Map<C, @Nullable V> newValue)
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|setValue
parameter_list|(
name|int
name|index
parameter_list|,
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|newValue
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (R key, Map<C, @Nullable V> value)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|put
parameter_list|(
name|R
name|key
parameter_list|,
name|Map
argument_list|<
name|C
argument_list|,
annotation|@
name|Nullable
name|V
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

begin_comment
comment|/**    * Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the    * table will update the returned collection.    *    *<p>The returned collection's iterator traverses the values of the first row key, the values of    * the second row key, and so on.    *    * @return collection of values    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|super
operator|.
name|values
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|valuesIterator ()
name|Iterator
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
name|valuesIterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIndexedListIterator
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|(
name|size
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|protected
name|V
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getValue
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|valuesSpliterator ()
name|Spliterator
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
name|valuesSpliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
expr|<@
name|Nullable
name|V
operator|>
name|indexed
argument_list|(
name|size
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|ORDERED
argument_list|,
name|this
operator|::
name|getValue
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

unit|}
end_unit

