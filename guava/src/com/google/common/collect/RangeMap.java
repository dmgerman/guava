begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A mapping from keys to values that efficiently supports mapping entire ranges at once. This  * implementation does not support null values.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|RangeMap
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NavigableMap"
argument_list|)
specifier|final
class|class
name|RangeMap
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Function
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|map
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|map
decl_stmt|;
comment|/**    * Creates a new, empty {@code RangeMap}.    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|RangeMap (NavigableMap<Cut<K>, RangeValue<K, V>> map)
specifier|private
name|RangeMap
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
comment|/**    * Equivalent to {@link #get(Comparable) get(K)}, provided only to satisfy the {@link Function}    * interface. When using a reference of type {@code RangeMap}, always invoke    * {@link #get(Comparable) get(K)} directly instead.    */
annotation|@
name|Override
DECL|method|apply (K input)
specifier|public
name|V
name|apply
parameter_list|(
name|K
name|input
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|input
argument_list|)
return|;
block|}
comment|/**    * Returns the value associated with {@code key}, or {@code null} if there is no such value.    */
annotation|@
name|Nullable
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lowerEntry
init|=
name|map
operator|.
name|lowerEntry
argument_list|(
name|Cut
operator|.
name|aboveValue
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerEntry
operator|!=
literal|null
operator|&&
name|lowerEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|lowerEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Associates {@code value} with every key {@linkplain Range#contains contained} in {@code    * keyRange}.    *    *<p>This method takes amortized<i>O(log n)</i> time.    */
DECL|method|put (Range<K> keyRange, V value)
specifier|public
name|void
name|put
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|keyRange
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|keyRange
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyRange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|clear
argument_list|(
name|keyRange
argument_list|)
expr_stmt|;
name|putRange
argument_list|(
operator|new
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|keyRange
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Puts all the associations from the specified {@code RangeMap} into this {@code RangeMap}.    */
DECL|method|putAll (RangeMap<K, V> rangeMap)
specifier|public
name|void
name|putAll
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeMap
argument_list|)
expr_stmt|;
for|for
control|(
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeValue
range|:
name|rangeMap
operator|.
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|put
argument_list|(
name|rangeValue
operator|.
name|getKey
argument_list|()
argument_list|,
name|rangeValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Clears all associations from this {@code RangeMap}.    */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Removes all associations to keys {@linkplain Range#contains contained} in {@code    * rangeToClear}.    */
DECL|method|clear (Range<K> rangeToClear)
specifier|public
name|void
name|clear
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|rangeToClear
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeToClear
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeToClear
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lowerThanLB
init|=
name|map
operator|.
name|lowerEntry
argument_list|(
name|rangeToClear
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
comment|// We will use { } to denote the ends of rangeToClear, and<> to denote the ends of
comment|// other ranges currently in the map.  For example,< {> indicates that we know that
comment|// rangeToClear.lowerBound is between the bounds of some range already in the map.
if|if
condition|(
name|lowerThanLB
operator|!=
literal|null
condition|)
block|{
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lowerRangeValue
init|=
name|lowerThanLB
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Cut
argument_list|<
name|K
argument_list|>
name|upperCut
init|=
name|lowerRangeValue
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|upperCut
operator|.
name|compareTo
argument_list|(
name|rangeToClear
operator|.
name|lowerBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//< {>
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|replacement
init|=
name|lowerRangeValue
operator|.
name|withUpperBound
argument_list|(
name|rangeToClear
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|replacement
operator|==
literal|null
condition|)
block|{
name|removeRange
argument_list|(
name|lowerRangeValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|putRange
argument_list|(
name|replacement
argument_list|)
expr_stmt|;
comment|// overwrites old range
block|}
if|if
condition|(
name|upperCut
operator|.
name|compareTo
argument_list|(
name|rangeToClear
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//< { }>
name|putRange
argument_list|(
name|lowerRangeValue
operator|.
name|withLowerBound
argument_list|(
name|rangeToClear
operator|.
name|upperBound
argument_list|)
argument_list|)
expr_stmt|;
return|return;
comment|// we must be done
block|}
block|}
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lowerThanUB
init|=
name|map
operator|.
name|lowerEntry
argument_list|(
name|rangeToClear
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerThanUB
operator|!=
literal|null
condition|)
block|{
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lowerRangeValue
init|=
name|lowerThanUB
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Cut
argument_list|<
name|K
argument_list|>
name|upperCut
init|=
name|lowerRangeValue
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|upperCut
operator|.
name|compareTo
argument_list|(
name|rangeToClear
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//< }>
comment|// we can't have< { }>, we already dealt with that
name|removeRange
argument_list|(
name|lowerRangeValue
argument_list|)
expr_stmt|;
name|putRange
argument_list|(
name|lowerRangeValue
operator|.
name|withLowerBound
argument_list|(
name|rangeToClear
operator|.
name|upperBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// everything left with {< } is a {<> }, so we clear it indiscriminately
name|map
operator|.
name|subMap
argument_list|(
name|rangeToClear
operator|.
name|lowerBound
argument_list|,
name|rangeToClear
operator|.
name|upperBound
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|removeRange (RangeValue<K, V> rangeValue)
specifier|private
name|void
name|removeRange
parameter_list|(
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeValue
parameter_list|)
block|{
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|removed
init|=
name|map
operator|.
name|remove
argument_list|(
name|rangeValue
operator|.
name|getLowerBound
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|removed
operator|==
name|rangeValue
assert|;
block|}
DECL|method|putRange (@ullable RangeValue<K, V> rangeValue)
specifier|private
name|void
name|putRange
parameter_list|(
annotation|@
name|Nullable
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeValue
parameter_list|)
block|{
if|if
condition|(
name|rangeValue
operator|!=
literal|null
operator|&&
operator|!
name|rangeValue
operator|.
name|getKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|rangeValue
operator|.
name|getLowerBound
argument_list|()
argument_list|,
name|rangeValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RangeValue
specifier|private
specifier|static
specifier|final
class|class
name|RangeValue
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
DECL|method|RangeValue (Range<K> key, V value)
name|RangeValue
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|key
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
assert|;
block|}
DECL|method|getLowerBound ()
name|Cut
argument_list|<
name|K
argument_list|>
name|getLowerBound
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|.
name|lowerBound
return|;
block|}
DECL|method|getUpperBound ()
name|Cut
argument_list|<
name|K
argument_list|>
name|getUpperBound
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|.
name|upperBound
return|;
block|}
annotation|@
name|Nullable
DECL|method|withLowerBound (Cut<K> newLowerBound)
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|withLowerBound
parameter_list|(
name|Cut
argument_list|<
name|K
argument_list|>
name|newLowerBound
parameter_list|)
block|{
name|Range
argument_list|<
name|K
argument_list|>
name|newRange
init|=
operator|new
name|Range
argument_list|<
name|K
argument_list|>
argument_list|(
name|newLowerBound
argument_list|,
name|getUpperBound
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newRange
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|newRange
argument_list|,
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|withUpperBound (Cut<K> newUpperBound)
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|withUpperBound
parameter_list|(
name|Cut
argument_list|<
name|K
argument_list|>
name|newUpperBound
parameter_list|)
block|{
name|Range
argument_list|<
name|K
argument_list|>
name|newRange
init|=
operator|new
name|Range
argument_list|<
name|K
argument_list|>
argument_list|(
name|getLowerBound
argument_list|()
argument_list|,
name|newUpperBound
argument_list|)
decl_stmt|;
return|return
name|newRange
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|RangeValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|newRange
argument_list|,
name|getValue
argument_list|()
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
comment|/**    * Compares the specified object with this {@code RangeMap} for equality. It is guaranteed that:    *<ul>    *<li>The relation defined by this method is reflexive, symmetric, and transitive, as required    * by the contract of {@link Object#equals(Object)}.    *<li>Two empty range maps are always equal.    *<li>If two range maps are equal, and the same operation is performed on each, the resulting    * range maps are also equal.    *<li>If {@code rangeMap1.equals(rangeMap2)}, it is guaranteed that {@code rangeMap1.get(k)}    * is equal to {@code rangeMap2.get(k)}.    *</ul>    */
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|RangeMap
operator|&&
name|map
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|map
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|map
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|map
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
end_class

end_unit

