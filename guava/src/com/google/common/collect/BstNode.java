begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A reusable abstraction for a node in a binary search tree. Null keys are disallowed.  *  *<p>The node is considered to be immutable. Any subclass with mutable fields must create a new  * {@code BstNode} object upon any mutation, as the {@code Bst} classes assume that two nodes  * {@code a} and {@code b} represent exactly the same tree if and only if {@code a == b}.  *  *<p>A {@code BstNode} can be considered to be an<i>entry</i>, containing a key and possibly some  * value data, or it can be considered to be a<i>subtree</i>, representative of it and all its  * descendants.  *  * @author Louis Wasserman  * @param<K> The key type associated with this tree.  * @param<N> The type of the nodes in this tree.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstNode
class|class
name|BstNode
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
parameter_list|<
name|K
parameter_list|,
name|N
parameter_list|>
parameter_list|>
block|{
DECL|method|countOrZero (@ullable N node)
specifier|static
parameter_list|<
name|N
extends|extends
name|BstNode
argument_list|<
name|?
argument_list|,
name|N
argument_list|>
parameter_list|>
name|int
name|countOrZero
parameter_list|(
annotation|@
name|Nullable
name|N
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|node
operator|.
name|count
argument_list|()
return|;
block|}
comment|/**    * The key on which this binary search tree is ordered. All descendants of the left subtree of    * this node must have keys strictly less than {@code this.key}.    */
DECL|field|key
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
comment|/**    * The total count of nodes in this subtree.    */
DECL|field|count
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
comment|/**    * The left child of this node. A {@code null} value indicates that this node has no left child.    */
annotation|@
name|Nullable
DECL|field|left
specifier|private
specifier|final
name|N
name|left
decl_stmt|;
comment|/**    * The right child of this node. A {@code null} value indicates that this node has no right    * child.    */
annotation|@
name|Nullable
DECL|field|right
specifier|private
specifier|final
name|N
name|right
decl_stmt|;
DECL|method|BstNode (K key, @Nullable N left, @Nullable N right)
name|BstNode
parameter_list|(
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|N
name|left
parameter_list|,
annotation|@
name|Nullable
name|N
name|right
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|1
operator|+
name|countOrZero
argument_list|(
name|left
argument_list|)
operator|+
name|countOrZero
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
comment|/**    * Returns the ordered key associated with this node.    */
DECL|method|getKey ()
specifier|public
specifier|final
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**    * Returns the total count of nodes in this subtree.    */
DECL|method|count ()
specifier|public
specifier|final
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**    * Returns the child on the specified side, or {@code null} if there is no such child.    */
annotation|@
name|Nullable
DECL|method|childOrNull (BstSide side)
specifier|public
specifier|final
name|N
name|childOrNull
parameter_list|(
name|BstSide
name|side
parameter_list|)
block|{
switch|switch
condition|(
name|side
condition|)
block|{
case|case
name|LEFT
case|:
return|return
name|left
return|;
case|case
name|RIGHT
case|:
return|return
name|right
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Returns {@code true} if this node has a child on the specified side.    */
DECL|method|hasChild (BstSide side)
specifier|public
specifier|final
name|boolean
name|hasChild
parameter_list|(
name|BstSide
name|side
parameter_list|)
block|{
return|return
name|childOrNull
argument_list|(
name|side
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Returns this node's child on the specified side.    *    * @throws IllegalStateException if this node has no such child    */
DECL|method|getChild (BstSide side)
specifier|public
specifier|final
name|N
name|getChild
parameter_list|(
name|BstSide
name|side
parameter_list|)
block|{
name|N
name|child
init|=
name|childOrNull
argument_list|(
name|side
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|child
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
comment|/**    * Returns true if the traditional binary search tree ordering invariant holds with respect to    * the specified {@code comparator}.    */
DECL|method|orderingInvariantHolds (Comparator<? super K> comparator)
specifier|protected
specifier|final
name|boolean
name|orderingInvariantHolds
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|hasChild
argument_list|(
name|LEFT
argument_list|)
condition|)
block|{
name|result
operator|&=
name|comparator
operator|.
name|compare
argument_list|(
name|getChild
argument_list|(
name|LEFT
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|key
argument_list|)
operator|<
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|hasChild
argument_list|(
name|RIGHT
argument_list|)
condition|)
block|{
name|result
operator|&=
name|comparator
operator|.
name|compare
argument_list|(
name|getChild
argument_list|(
name|RIGHT
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|key
argument_list|)
operator|>
literal|0
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

