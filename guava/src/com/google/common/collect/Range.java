begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A range (or "interval") defines the<i>boundaries</i> around a contiguous span of values of some  * {@code Comparable} type; for example, "integers from 1 to 100 inclusive." Note that it is not  * possible to<i>iterate</i> over these contained values. To do so, pass this range instance and  * an appropriate {@link DiscreteDomain} to {@link ContiguousSet#create}.  *  *<h3>Types of ranges</h3>  *  *<p>Each end of the range may be bounded or unbounded. If bounded, there is an associated  *<i>endpoint</i> value, and the range is considered to be either<i>open</i> (does not include the  * endpoint) or<i>closed</i> (includes the endpoint) on that side. With three possibilities on each  * side, this yields nine basic types of ranges, enumerated below. (Notation: a square bracket  * ({@code [ ]}) indicates that the range is closed on that side; a parenthesis ({@code ( )}) means  * it is either open or unbounded. The construct {@code {x | statement}} is read "the set of all  *<i>x</i> such that<i>statement</i>.")  *  *<blockquote><table>  *<tr><td><b>Notation</b><td><b>Definition</b><td><b>Factory method</b>  *<tr><td>{@code (a..b)}<td>{@code {x | a< x< b}}<td>{@link Range#open open}  *<tr><td>{@code [a..b]}<td>{@code {x | a<= x<= b}}<td>{@link Range#closed closed}  *<tr><td>{@code (a..b]}<td>{@code {x | a< x<= b}}<td>{@link Range#openClosed openClosed}  *<tr><td>{@code [a..b)}<td>{@code {x | a<= x< b}}<td>{@link Range#closedOpen closedOpen}  *<tr><td>{@code (a..+â)}<td>{@code {x | x> a}}<td>{@link Range#greaterThan greaterThan}  *<tr><td>{@code [a..+â)}<td>{@code {x | x>= a}}<td>{@link Range#atLeast atLeast}  *<tr><td>{@code (-â..b)}<td>{@code {x | x< b}}<td>{@link Range#lessThan lessThan}  *<tr><td>{@code (-â..b]}<td>{@code {x | x<= b}}<td>{@link Range#atMost atMost}  *<tr><td>{@code (-â..+â)}<td>{@code {x}}<td>{@link Range#all all}  *</table></blockquote>  *  *<p>When both endpoints exist, the upper endpoint may not be less than the lower. The endpoints  * may be equal only if at least one of the bounds is closed:  *  *<ul>  *<li>{@code [a..a]} : a singleton range  *<li>{@code [a..a); (a..a]} : {@linkplain #isEmpty empty} ranges; also valid  *<li>{@code (a..a)} :<b>invalid</b>; an exception will be thrown  *</ul>  *  *<h3>Warnings</h3>  *  *<ul>  *<li>Use immutable value types only, if at all possible. If you must use a mutable type,<b>do  *     not</b> allow the endpoint instances to mutate after the range is created!  *<li>Your value type's comparison method should be {@linkplain Comparable consistent with equals}  *     if at all possible. Otherwise, be aware that concepts used throughout this documentation such  *     as "equal", "same", "unique" and so on actually refer to whether {@link Comparable#compareTo  *     compareTo} returns zero, not whether {@link Object#equals equals} returns {@code true}.  *<li>A class which implements {@code Comparable<UnrelatedType>} is very broken, and will cause  *     undefined horrible things to happen in {@code Range}. For now, the Range API does not prevent  *     its use, because this would also rule out all ungenerified (pre-JDK1.5) data types.<b>This  *     may change in the future.</b>  *</ul>  *  *<h3>Other notes</h3>  *  *<ul>  *<li>Instances of this type are obtained using the static factory methods in this class.  *<li>Ranges are<i>convex</i>: whenever two values are contained, all values in between them must  *     also be contained. More formally, for any {@code c1<= c2<= c3} of type {@code C}, {@code  *     r.contains(c1)&& r.contains(c3)} implies {@code r.contains(c2)}). This means that a {@code  *     Range<Integer>} can never be used to represent, say, "all<i>prime</i> numbers from 1 to  *     100."  *<li>When evaluated as a {@link Predicate}, a range yields the same result as invoking {@link  *     #contains}.  *<li>Terminology note: a range {@code a} is said to be the<i>maximal</i> range having property  *<i>P</i> if, for all ranges {@code b} also having property<i>P</i>, {@code a.encloses(b)}.  *     Likewise, {@code a} is<i>minimal</i> when {@code b.encloses(a)} for all {@code b} having  *     property<i>P</i>. See, for example, the definition of {@link #intersection intersection}.  *</ul>  *  *<h3>Further reading</h3>  *  *<p>See the Guava User Guide article on  *<a href="http://code.google.com/p/guava-libraries/wiki/RangesExplained">{@code Range}</a>.  *  * @author Kevin Bourrillion  * @author Gregory Kick  * @since 10.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|Range
specifier|public
specifier|final
class|class
name|Range
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
implements|implements
name|Predicate
argument_list|<
name|C
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|LOWER_BOUND_FN
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Range
argument_list|,
name|Cut
argument_list|>
name|LOWER_BOUND_FN
init|=
operator|new
name|Function
argument_list|<
name|Range
argument_list|,
name|Cut
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cut
name|apply
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|lowerBound
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|lowerBoundFn ()
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Function
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|lowerBoundFn
parameter_list|()
block|{
return|return
operator|(
name|Function
operator|)
name|LOWER_BOUND_FN
return|;
block|}
DECL|field|UPPER_BOUND_FN
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Range
argument_list|,
name|Cut
argument_list|>
name|UPPER_BOUND_FN
init|=
operator|new
name|Function
argument_list|<
name|Range
argument_list|,
name|Cut
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cut
name|apply
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|upperBound
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|upperBoundFn ()
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Function
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|upperBoundFn
parameter_list|()
block|{
return|return
operator|(
name|Function
operator|)
name|UPPER_BOUND_FN
return|;
block|}
DECL|field|RANGE_LEX_ORDERING
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Range
argument_list|<
name|?
argument_list|>
argument_list|>
name|RANGE_LEX_ORDERING
init|=
operator|new
name|Ordering
argument_list|<
name|Range
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Range
argument_list|<
name|?
argument_list|>
name|left
parameter_list|,
name|Range
argument_list|<
name|?
argument_list|>
name|right
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|left
operator|.
name|lowerBound
argument_list|,
name|right
operator|.
name|lowerBound
argument_list|)
operator|.
name|compare
argument_list|(
name|left
operator|.
name|upperBound
argument_list|,
name|right
operator|.
name|upperBound
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
empty_stmt|;
DECL|method|create ( Cut<C> lowerBound, Cut<C> upperBound)
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|create
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|C
argument_list|>
name|upperBound
parameter_list|)
block|{
return|return
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values strictly greater than {@code    * lower} and strictly less than {@code upper}.    *    * @throws IllegalArgumentException if {@code lower} is greater than<i>or    *     equal to</i> {@code upper}    * @since 14.0    */
DECL|method|open (C lower, C upper)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|open
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
name|aboveValue
argument_list|(
name|lower
argument_list|)
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values greater than or equal to    * {@code lower} and less than or equal to {@code upper}.    *    * @throws IllegalArgumentException if {@code lower} is greater than {@code    *     upper}    * @since 14.0    */
DECL|method|closed (C lower, C upper)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|closed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|lower
argument_list|)
argument_list|,
name|Cut
operator|.
name|aboveValue
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values greater than or equal to    * {@code lower} and strictly less than {@code upper}.    *    * @throws IllegalArgumentException if {@code lower} is greater than {@code    *     upper}    * @since 14.0    */
DECL|method|closedOpen ( C lower, C upper)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|closedOpen
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|lower
argument_list|)
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values strictly greater than {@code    * lower} and less than or equal to {@code upper}.    *    * @throws IllegalArgumentException if {@code lower} is greater than {@code    *     upper}    * @since 14.0    */
DECL|method|openClosed ( C lower, C upper)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|openClosed
parameter_list|(
name|C
name|lower
parameter_list|,
name|C
name|upper
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
name|aboveValue
argument_list|(
name|lower
argument_list|)
argument_list|,
name|Cut
operator|.
name|aboveValue
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains any value from {@code lower} to {@code    * upper}, where each endpoint may be either inclusive (closed) or exclusive    * (open).    *    * @throws IllegalArgumentException if {@code lower} is greater than {@code    *     upper}    * @since 14.0    */
DECL|method|range ( C lower, BoundType lowerType, C upper, BoundType upperType)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|(
name|C
name|lower
parameter_list|,
name|BoundType
name|lowerType
parameter_list|,
name|C
name|upper
parameter_list|,
name|BoundType
name|upperType
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|lowerType
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|upperType
argument_list|)
expr_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|lowerBound
init|=
operator|(
name|lowerType
operator|==
name|BoundType
operator|.
name|OPEN
operator|)
condition|?
name|Cut
operator|.
name|aboveValue
argument_list|(
name|lower
argument_list|)
else|:
name|Cut
operator|.
name|belowValue
argument_list|(
name|lower
argument_list|)
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|upperBound
init|=
operator|(
name|upperType
operator|==
name|BoundType
operator|.
name|OPEN
operator|)
condition|?
name|Cut
operator|.
name|belowValue
argument_list|(
name|upper
argument_list|)
else|:
name|Cut
operator|.
name|aboveValue
argument_list|(
name|upper
argument_list|)
decl_stmt|;
return|return
name|create
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values strictly less than {@code    * endpoint}.    *    * @since 14.0    */
DECL|method|lessThan (C endpoint)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|lessThan
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|endpoint
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values less than or equal to    * {@code endpoint}.    *    * @since 14.0    */
DECL|method|atMost (C endpoint)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|atMost
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|,
name|Cut
operator|.
name|aboveValue
argument_list|(
name|endpoint
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a range with no lower bound up to the given endpoint, which may be    * either inclusive (closed) or exclusive (open).    *    * @since 14.0    */
DECL|method|upTo ( C endpoint, BoundType boundType)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|upTo
parameter_list|(
name|C
name|endpoint
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
switch|switch
condition|(
name|boundType
condition|)
block|{
case|case
name|OPEN
case|:
return|return
name|lessThan
argument_list|(
name|endpoint
argument_list|)
return|;
case|case
name|CLOSED
case|:
return|return
name|atMost
argument_list|(
name|endpoint
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Returns a range that contains all values strictly greater than {@code    * endpoint}.    *    * @since 14.0    */
DECL|method|greaterThan (C endpoint)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|greaterThan
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
name|aboveValue
argument_list|(
name|endpoint
argument_list|)
argument_list|,
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a range that contains all values greater than or equal to    * {@code endpoint}.    *    * @since 14.0    */
DECL|method|atLeast (C endpoint)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|atLeast
parameter_list|(
name|C
name|endpoint
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|endpoint
argument_list|)
argument_list|,
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a range from the given endpoint, which may be either inclusive    * (closed) or exclusive (open), with no upper bound.    *    * @since 14.0    */
DECL|method|downTo ( C endpoint, BoundType boundType)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|downTo
parameter_list|(
name|C
name|endpoint
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
switch|switch
condition|(
name|boundType
condition|)
block|{
case|case
name|OPEN
case|:
return|return
name|greaterThan
argument_list|(
name|endpoint
argument_list|)
return|;
case|case
name|CLOSED
case|:
return|return
name|atLeast
argument_list|(
name|endpoint
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|field|ALL
specifier|private
specifier|static
specifier|final
name|Range
argument_list|<
name|Comparable
argument_list|>
name|ALL
init|=
operator|new
name|Range
argument_list|<
name|Comparable
argument_list|>
argument_list|(
name|Cut
operator|.
name|belowAll
argument_list|()
argument_list|,
name|Cut
operator|.
name|aboveAll
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Returns a range that contains every value of type {@code C}.    *    * @since 14.0    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|all ()
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|all
parameter_list|()
block|{
return|return
operator|(
name|Range
operator|)
name|ALL
return|;
block|}
comment|/**    * Returns a range that {@linkplain Range#contains(Comparable) contains} only    * the given value. The returned range is {@linkplain BoundType#CLOSED closed}    * on both ends.    *    * @since 14.0    */
DECL|method|singleton (C value)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|singleton
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
name|closed
argument_list|(
name|value
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns the minimal range that    * {@linkplain Range#contains(Comparable) contains} all of the given values.    * The returned range is {@linkplain BoundType#CLOSED closed} on both ends.    *    * @throws ClassCastException if the parameters are not<i>mutually    *     comparable</i>    * @throws NoSuchElementException if {@code values} is empty    * @throws NullPointerException if any of {@code values} is null    * @since 14.0    */
DECL|method|encloseAll ( Iterable<C> values)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|encloseAll
parameter_list|(
name|Iterable
argument_list|<
name|C
argument_list|>
name|values
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|instanceof
name|ContiguousSet
condition|)
block|{
return|return
operator|(
operator|(
name|ContiguousSet
argument_list|<
name|C
argument_list|>
operator|)
name|values
operator|)
operator|.
name|range
argument_list|()
return|;
block|}
name|Iterator
argument_list|<
name|C
argument_list|>
name|valueIterator
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|C
name|min
init|=
name|checkNotNull
argument_list|(
name|valueIterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|C
name|max
init|=
name|min
decl_stmt|;
while|while
condition|(
name|valueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|C
name|value
init|=
name|checkNotNull
argument_list|(
name|valueIterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|min
operator|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|max
operator|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|closed
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
DECL|field|lowerBound
specifier|final
name|Cut
argument_list|<
name|C
argument_list|>
name|lowerBound
decl_stmt|;
DECL|field|upperBound
specifier|final
name|Cut
argument_list|<
name|C
argument_list|>
name|upperBound
decl_stmt|;
DECL|method|Range (Cut<C> lowerBound, Cut<C> upperBound)
specifier|private
name|Range
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|C
argument_list|>
name|upperBound
parameter_list|)
block|{
if|if
condition|(
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|upperBound
argument_list|)
operator|>
literal|0
operator|||
name|lowerBound
operator|==
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
operator|||
name|upperBound
operator|==
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid range: "
operator|+
name|toString
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|lowerBound
operator|=
name|checkNotNull
argument_list|(
name|lowerBound
argument_list|)
expr_stmt|;
name|this
operator|.
name|upperBound
operator|=
name|checkNotNull
argument_list|(
name|upperBound
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns {@code true} if this range has a lower endpoint.    */
DECL|method|hasLowerBound ()
specifier|public
name|boolean
name|hasLowerBound
parameter_list|()
block|{
return|return
name|lowerBound
operator|!=
name|Cut
operator|.
name|belowAll
argument_list|()
return|;
block|}
comment|/**    * Returns the lower endpoint of this range.    *    * @throws IllegalStateException if this range is unbounded below (that is, {@link    *     #hasLowerBound()} returns {@code false})    */
DECL|method|lowerEndpoint ()
specifier|public
name|C
name|lowerEndpoint
parameter_list|()
block|{
return|return
name|lowerBound
operator|.
name|endpoint
argument_list|()
return|;
block|}
comment|/**    * Returns the type of this range's lower bound: {@link BoundType#CLOSED} if the range includes    * its lower endpoint, {@link BoundType#OPEN} if it does not.    *    * @throws IllegalStateException if this range is unbounded below (that is, {@link    *     #hasLowerBound()} returns {@code false})    */
DECL|method|lowerBoundType ()
specifier|public
name|BoundType
name|lowerBoundType
parameter_list|()
block|{
return|return
name|lowerBound
operator|.
name|typeAsLowerBound
argument_list|()
return|;
block|}
comment|/**    * Returns {@code true} if this range has an upper endpoint.    */
DECL|method|hasUpperBound ()
specifier|public
name|boolean
name|hasUpperBound
parameter_list|()
block|{
return|return
name|upperBound
operator|!=
name|Cut
operator|.
name|aboveAll
argument_list|()
return|;
block|}
comment|/**    * Returns the upper endpoint of this range.    *    * @throws IllegalStateException if this range is unbounded above (that is, {@link    *     #hasUpperBound()} returns {@code false})    */
DECL|method|upperEndpoint ()
specifier|public
name|C
name|upperEndpoint
parameter_list|()
block|{
return|return
name|upperBound
operator|.
name|endpoint
argument_list|()
return|;
block|}
comment|/**    * Returns the type of this range's upper bound: {@link BoundType#CLOSED} if the range includes    * its upper endpoint, {@link BoundType#OPEN} if it does not.    *    * @throws IllegalStateException if this range is unbounded above (that is, {@link    *     #hasUpperBound()} returns {@code false})    */
DECL|method|upperBoundType ()
specifier|public
name|BoundType
name|upperBoundType
parameter_list|()
block|{
return|return
name|upperBound
operator|.
name|typeAsUpperBound
argument_list|()
return|;
block|}
comment|/**    * Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does    * not encompass ranges of the form {@code (v..v)}, because such ranges are<i>invalid</i> and    * can't be constructed at all.)    *    *<p>Note that certain discrete ranges such as the integer range {@code (3..4)} are<b>not</b>    * considered empty, even though they contain no actual values.  In these cases, it may be    * helpful to preprocess ranges with {@link #canonical(DiscreteDomain)}.    */
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|lowerBound
operator|.
name|equals
argument_list|(
name|upperBound
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if {@code value} is within the bounds of this range. For example, on the    * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}    * returns {@code false}.    */
DECL|method|contains (C value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// let this throw CCE if there is some trickery going on
return|return
name|lowerBound
operator|.
name|isLessThan
argument_list|(
name|value
argument_list|)
operator|&&
operator|!
name|upperBound
operator|.
name|isLessThan
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Equivalent to {@link #contains}; provided only to satisfy the {@link Predicate} interface. When    * using a reference of type {@code Range}, always invoke {@link #contains} directly instead.    */
DECL|method|apply (C input)
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|C
name|input
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|input
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in    * this range.    */
DECL|method|containsAll (Iterable<? extends C> values)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|C
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|values
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// this optimizes testing equality of two range-backed sets
if|if
condition|(
name|values
operator|instanceof
name|SortedSet
condition|)
block|{
name|SortedSet
argument_list|<
name|?
extends|extends
name|C
argument_list|>
name|set
init|=
name|cast
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator
init|=
name|set
operator|.
name|comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|equals
argument_list|(
name|comparator
argument_list|)
operator|||
name|comparator
operator|==
literal|null
condition|)
block|{
return|return
name|contains
argument_list|(
name|set
operator|.
name|first
argument_list|()
argument_list|)
operator|&&
name|contains
argument_list|(
name|set
operator|.
name|last
argument_list|()
argument_list|)
return|;
block|}
block|}
for|for
control|(
name|C
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this    * range. Examples:    *    *<ul>    *<li>{@code [3..6]} encloses {@code [4..5]}    *<li>{@code (3..6)} encloses {@code (3..6)}    *<li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)    *<li>{@code (3..6]} does not enclose {@code [3..6]}    *<li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value    *     contained by the latter range)    *<li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value    *     contained by the latter range)    *</ul>    *    *<p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies    * {@code a.contains(v)}, but as the last two examples illustrate, the converse is not always    * true.    *    *<p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a    *<i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range    * according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure    * also implies {@linkplain #isConnected connectedness}.    */
DECL|method|encloses (Range<C> other)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
return|return
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|lowerBound
argument_list|)
operator|<=
literal|0
operator|&&
name|upperBound
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**    * Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses    * enclosed} by both this range and {@code other}.    *    *<p>For example,    *<ul>    *<li>{@code [2, 4)} and {@code [5, 7)} are not connected    *<li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}    *<li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range    *     {@code [4, 4)}    *</ul>    *    *<p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and    * {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this    * method returns {@code true}.    *    *<p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain    * Equivalence equivalence relation} as it is not transitive.    *    *<p>Note that certain discrete ranges are not considered connected, even though there are no    * elements "between them."  For example, {@code [3, 5]} is not considered connected to {@code    * [6, 10]}.  In these cases, it may be desirable for both input ranges to be preprocessed with    * {@link #canonical(DiscreteDomain)} before testing for connectedness.    */
DECL|method|isConnected (Range<C> other)
specifier|public
name|boolean
name|isConnected
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
return|return
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|upperBound
argument_list|)
operator|<=
literal|0
operator|&&
name|other
operator|.
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|upperBound
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/**    * Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code    * connectedRange}, if such a range exists.    *    *<p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The    * resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}    * yields the empty range {@code [5..5)}.    *    *<p>The intersection exists if and only if the two ranges are {@linkplain #isConnected    * connected}.    *    *<p>The intersection operation is commutative, associative and idempotent, and its identity    * element is {@link Range#all}).    *    * @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}    */
DECL|method|intersection (Range<C> connectedRange)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|intersection
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|connectedRange
parameter_list|)
block|{
name|int
name|lowerCmp
init|=
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|connectedRange
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
name|int
name|upperCmp
init|=
name|upperBound
operator|.
name|compareTo
argument_list|(
name|connectedRange
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerCmp
operator|>=
literal|0
operator|&&
name|upperCmp
operator|<=
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|lowerCmp
operator|<=
literal|0
operator|&&
name|upperCmp
operator|>=
literal|0
condition|)
block|{
return|return
name|connectedRange
return|;
block|}
else|else
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|newLower
init|=
operator|(
name|lowerCmp
operator|>=
literal|0
operator|)
condition|?
name|lowerBound
else|:
name|connectedRange
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|newUpper
init|=
operator|(
name|upperCmp
operator|<=
literal|0
operator|)
condition|?
name|upperBound
else|:
name|connectedRange
operator|.
name|upperBound
decl_stmt|;
return|return
name|create
argument_list|(
name|newLower
argument_list|,
name|newUpper
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code    * other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}.    *    *<p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can    * also be called their<i>union</i>. If they are not, note that the span might contain values    * that are not contained in either input range.    *    *<p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative    * and idempotent. Unlike it, it is always well-defined for any two input ranges.    */
DECL|method|span (Range<C> other)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|span
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
name|int
name|lowerCmp
init|=
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
name|int
name|upperCmp
init|=
name|upperBound
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerCmp
operator|<=
literal|0
operator|&&
name|upperCmp
operator|>=
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|lowerCmp
operator|>=
literal|0
operator|&&
name|upperCmp
operator|<=
literal|0
condition|)
block|{
return|return
name|other
return|;
block|}
else|else
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|newLower
init|=
operator|(
name|lowerCmp
operator|<=
literal|0
operator|)
condition|?
name|lowerBound
else|:
name|other
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|newUpper
init|=
operator|(
name|upperCmp
operator|>=
literal|0
operator|)
condition|?
name|upperBound
else|:
name|other
operator|.
name|upperBound
decl_stmt|;
return|return
name|create
argument_list|(
name|newLower
argument_list|,
name|newUpper
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns an {@link ContiguousSet} containing the same values in the given domain    * {@linkplain Range#contains contained} by this range.    *    *<p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For    * example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty    * ranges {@code [3..3)} and {@code [4..4)}.    *    *<p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large    * range (such as {@code Range.greaterThan(0)}). Certain operations on such a set can be    * performed efficiently, but others (such as {@link Set#hashCode} or {@link    * Collections#frequency}) can cause major performance problems.    *    *<p>The returned set's {@link Object#toString} method returns a short-hand form of the set's    * contents, such as {@code "[1..100]}"}.    *    * @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if    *     neither has an upper bound    * @deprecated Use {@code ContiguousSet.create(range, domain)}. To be removed in Guava 16.0.    */
annotation|@
name|Beta
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|false
argument_list|)
annotation|@
name|Deprecated
DECL|method|asSet (DiscreteDomain<C> domain)
specifier|public
name|ContiguousSet
argument_list|<
name|C
argument_list|>
name|asSet
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
return|return
name|ContiguousSet
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|domain
argument_list|)
return|;
block|}
comment|/**    * Returns the canonical form of this range in the given domain. The canonical form has the    * following properties:    *    *<ul>    *<li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in other    *     words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(    *     ContiguousSet.create(a, domain))}    *<li>uniqueness: unless {@code a.isEmpty()},    *     {@code ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain))} implies    *     {@code a.canonical(domain).equals(b.canonical(domain))}    *<li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}    *</ul>    *    *<p>Furthermore, this method guarantees that the range returned will be one of the following    * canonical forms:    *    *<ul>    *<li>[start..end)    *<li>[start..+â)    *<li>(-â..end) (only if type {@code C} is unbounded below)    *<li>(-â..+â) (only if type {@code C} is unbounded below)    *</ul>    */
DECL|method|canonical (DiscreteDomain<C> domain)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|canonical
parameter_list|(
name|DiscreteDomain
argument_list|<
name|C
argument_list|>
name|domain
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|lower
init|=
name|lowerBound
operator|.
name|canonical
argument_list|(
name|domain
argument_list|)
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|upper
init|=
name|upperBound
operator|.
name|canonical
argument_list|(
name|domain
argument_list|)
decl_stmt|;
return|return
operator|(
name|lower
operator|==
name|lowerBound
operator|&&
name|upper
operator|==
name|upperBound
operator|)
condition|?
name|this
else|:
name|create
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if {@code object} is a range having the same endpoints and bound types as    * this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are<b>not</b>    * equal to one another, despite the fact that they each contain precisely the same set of values.    * Similarly, empty ranges are not equal unless they have exactly the same representation, so    * {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.    */
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Range
condition|)
block|{
name|Range
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Range
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|lowerBound
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lowerBound
argument_list|)
operator|&&
name|upperBound
operator|.
name|equals
argument_list|(
name|other
operator|.
name|upperBound
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns a hash code for this range. */
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|lowerBound
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|upperBound
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns a string representation of this range, such as {@code "[3..5)"} (other examples are    * listed in the class documentation).    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
return|;
block|}
DECL|method|toString (Cut<?> lowerBound, Cut<?> upperBound)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|Cut
argument_list|<
name|?
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|?
argument_list|>
name|upperBound
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|lowerBound
operator|.
name|describeAsLowerBound
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\u2025'
argument_list|)
expr_stmt|;
name|upperBound
operator|.
name|describeAsUpperBound
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557    */
DECL|method|cast (Iterable<T> iterable)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SortedSet
argument_list|<
name|T
argument_list|>
name|cast
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|(
name|SortedSet
argument_list|<
name|T
argument_list|>
operator|)
name|iterable
return|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|ALL
argument_list|)
condition|)
block|{
return|return
name|all
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// this method may throw CCE
DECL|method|compareOrThrow (Comparable left, Comparable right)
specifier|static
name|int
name|compareOrThrow
parameter_list|(
name|Comparable
name|left
parameter_list|,
name|Comparable
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

