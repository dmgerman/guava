begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CompactHashing
operator|.
name|UNSET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Hashing
operator|.
name|smearedHash
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|MonotonicNonNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * CompactHashSet is an implementation of a Set. All optional operations (adding and removing) are  * supported. The elements can be any objects.  *  *<p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)  * constant time operations. Expected in the hashtable sense (depends on the hash function doing a  * good job of distributing the elements to the buckets to a distribution not far from uniform), and  * amortized since some operations can trigger a hash table resize.  *  *<p>Unlike {@code java.util.HashSet}, iteration is only proportional to the actual {@code size()},  * which is optimal, and<i>not</i> the size of the internal hashtable, which could be much larger  * than {@code size()}. Furthermore, this structure only depends on a fixed number of arrays; {@code  * add(x)} operations<i>do not</i> create objects for the garbage collector to deal with, and for  * every element added, the garbage collector will have to traverse {@code 1.5} references on  * average, in the marking phase, not {@code 5.0} as in {@code java.util.HashSet}.  *  *<p>If there are no removals, then {@link #iterator iteration} order is the same as insertion  * order. Any removal invalidates any ordering guarantees.  *  *<p>This class should not be assumed to be universally superior to {@code java.util.HashSet}.  * Generally speaking, this class reduces object allocation and memory consumption at the price of  * moderately increased constant factors of CPU. Only use this class when there is a specific reason  * to prioritize memory over CPU.  *  * @author Dimitris Andreou  * @author Jon Noack  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
comment|// not worth using in GWT for now
DECL|class|CompactHashSet
class|class
name|CompactHashSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|E
argument_list|>
implements|implements
name|Serializable
block|{
comment|// TODO(user): cache all field accesses in local vars
comment|/** Creates an empty {@code CompactHashSet} instance. */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactHashSet
argument_list|<
name|E
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|CompactHashSet
argument_list|<>
argument_list|()
return|;
block|}
comment|/**    * Creates a<i>mutable</i> {@code CompactHashSet} instance containing the elements of the given    * collection in unspecified order.    *    * @param collection the elements that the set should contain    * @return a new {@code CompactHashSet} containing those elements (minus duplicates)    */
DECL|method|create (Collection<? extends E> collection)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactHashSet
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
name|CompactHashSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|createWithExpectedSize
argument_list|(
name|collection
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|collection
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
comment|/**    * Creates a<i>mutable</i> {@code CompactHashSet} instance containing the given elements in    * unspecified order.    *    * @param elements the elements that the set should contain    * @return a new {@code CompactHashSet} containing those elements (minus duplicates)    */
annotation|@
name|SafeVarargs
DECL|method|create (E... elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactHashSet
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|CompactHashSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|createWithExpectedSize
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
comment|/**    * Creates a {@code CompactHashSet} instance, with a high enough "initial capacity" that it    *<i>should</i> hold {@code expectedSize} elements without growth.    *    * @param expectedSize the number of elements you expect to add to the returned set    * @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize}    *     elements without resizing    * @throws IllegalArgumentException if {@code expectedSize} is negative    */
DECL|method|createWithExpectedSize (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactHashSet
argument_list|<
name|E
argument_list|>
name|createWithExpectedSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
return|return
operator|new
name|CompactHashSet
argument_list|<>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
comment|/**    * The hashtable. Its values are indexes to the elements and entries arrays.    *    *<p>Currently, the UNSET value means "null pointer", and any positive value x is the actual    * index + 1.    *    *<p>Its size must be a power of two.    */
DECL|field|table
annotation|@
name|MonotonicNonNull
specifier|private
specifier|transient
name|Object
name|table
decl_stmt|;
comment|/**    * Contains the logical entries, in the range of [0, size()). The high bits of each int are the    * part of the smeared hash of the element not covered by the hashtable mask, whereas the low bits    * are the "next" pointer (pointing to the next entry in the bucket chain), which will always be    * less than or equal to the hashtable mask.    *    *<pre>    * hash  = aaaaaaaa    * mask  = 0000ffff    * next  = 0000bbbb    * entry = aaaabbbb    *</pre>    *    *<p>The pointers in [size(), entries.length) are all "null" (UNSET).    */
DECL|field|entries
specifier|private
specifier|transient
name|int
annotation|@
name|MonotonicNonNull
type|[]
name|entries
decl_stmt|;
comment|/**    * The elements contained in the set, in the range of [0, size()). The elements in [size(),    * elements.length) are all {@code null}.    */
DECL|field|elements
annotation|@
name|VisibleForTesting
specifier|transient
name|Object
annotation|@
name|MonotonicNonNull
type|[]
name|elements
decl_stmt|;
comment|/**    * Keeps track of metadata like the number of hash table bits and modifications of this data    * structure (to make it possible to throw ConcurrentModificationException in the iterator). Note    * that we choose not to make this volatile, so we do less of a "best effort" to track such    * errors, for better performance.    */
DECL|field|metadata
specifier|private
specifier|transient
name|int
name|metadata
decl_stmt|;
comment|/** The number of elements contained in the set. */
DECL|field|size
specifier|private
specifier|transient
name|int
name|size
decl_stmt|;
comment|/** Constructs a new empty instance of {@code CompactHashSet}. */
DECL|method|CompactHashSet ()
name|CompactHashSet
parameter_list|()
block|{
name|init
argument_list|(
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a new instance of {@code CompactHashSet} with the specified capacity.    *    * @param expectedSize the initial capacity of this {@code CompactHashSet}.    */
DECL|method|CompactHashSet (int expectedSize)
name|CompactHashSet
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|init
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
comment|/** Pseudoconstructor for serialization support. */
DECL|method|init (int expectedSize)
name|void
name|init
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expectedSize
operator|>=
literal|0
argument_list|,
literal|"Expected size must be>= 0"
argument_list|)
expr_stmt|;
comment|// Save expectedSize for use in allocArrays()
name|this
operator|.
name|metadata
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|CompactHashing
operator|.
name|MAX_SIZE
argument_list|,
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Returns whether arrays need to be allocated. */
annotation|@
name|VisibleForTesting
DECL|method|needsAllocArrays ()
name|boolean
name|needsAllocArrays
parameter_list|()
block|{
return|return
name|table
operator|==
literal|null
return|;
block|}
comment|/** Handle lazy allocation of arrays. */
annotation|@
name|CanIgnoreReturnValue
DECL|method|allocArrays ()
name|int
name|allocArrays
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|needsAllocArrays
argument_list|()
argument_list|,
literal|"Arrays already allocated"
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
name|metadata
decl_stmt|;
name|int
name|buckets
init|=
name|CompactHashing
operator|.
name|tableSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
name|this
operator|.
name|table
operator|=
name|CompactHashing
operator|.
name|createTable
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
name|setHashTableMask
argument_list|(
name|buckets
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|=
operator|new
name|int
index|[
name|expectedSize
index|]
expr_stmt|;
name|this
operator|.
name|elements
operator|=
operator|new
name|Object
index|[
name|expectedSize
index|]
expr_stmt|;
return|return
name|expectedSize
return|;
block|}
comment|/** Stores the hash table mask as the number of bits needed to represent an index. */
DECL|method|setHashTableMask (int mask)
specifier|private
name|void
name|setHashTableMask
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
name|int
name|hashTableBits
init|=
name|Integer
operator|.
name|SIZE
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|mask
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|metadata
argument_list|,
name|hashTableBits
argument_list|,
name|CompactHashing
operator|.
name|HASH_TABLE_BITS_MASK
argument_list|)
expr_stmt|;
block|}
comment|/** Gets the hash table mask using the stored number of hash table bits. */
DECL|method|hashTableMask ()
specifier|private
name|int
name|hashTableMask
parameter_list|()
block|{
return|return
operator|(
literal|1
operator|<<
operator|(
name|metadata
operator|&
name|CompactHashing
operator|.
name|HASH_TABLE_BITS_MASK
operator|)
operator|)
operator|-
literal|1
return|;
block|}
DECL|method|incrementModCount ()
name|void
name|incrementModCount
parameter_list|()
block|{
name|metadata
operator|+=
name|CompactHashing
operator|.
name|MODIFICATION_COUNT_INCREMENT
expr_stmt|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|add (@ullable E object)
specifier|public
name|boolean
name|add
parameter_list|(
annotation|@
name|Nullable
name|E
name|object
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
name|allocArrays
argument_list|()
expr_stmt|;
block|}
name|int
index|[]
name|entries
init|=
name|this
operator|.
name|entries
decl_stmt|;
name|Object
index|[]
name|elements
init|=
name|this
operator|.
name|elements
decl_stmt|;
name|int
name|newEntryIndex
init|=
name|this
operator|.
name|size
decl_stmt|;
comment|// current size, and pointer to the entry to be appended
name|int
name|newSize
init|=
name|newEntryIndex
operator|+
literal|1
decl_stmt|;
name|int
name|hash
init|=
name|smearedHash
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|tableIndex
init|=
name|hash
operator|&
name|mask
decl_stmt|;
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|UNSET
condition|)
block|{
comment|// uninitialized bucket
if|if
condition|(
name|newSize
operator|>
name|mask
condition|)
block|{
comment|// Resize and add new entry
name|mask
operator|=
name|resizeTable
argument_list|(
name|mask
argument_list|,
name|CompactHashing
operator|.
name|newCapacity
argument_list|(
name|mask
argument_list|)
argument_list|,
name|hash
argument_list|,
name|newEntryIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|,
name|newEntryIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|entryIndex
decl_stmt|;
name|int
name|entry
decl_stmt|;
name|int
name|hashPrefix
init|=
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|hash
argument_list|,
name|mask
argument_list|)
decl_stmt|;
do|do
block|{
name|entryIndex
operator|=
name|next
operator|-
literal|1
expr_stmt|;
name|entry
operator|=
name|entries
index|[
name|entryIndex
index|]
expr_stmt|;
if|if
condition|(
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
operator|==
name|hashPrefix
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|object
argument_list|,
name|elements
index|[
name|entryIndex
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|!=
name|UNSET
condition|)
do|;
if|if
condition|(
name|newSize
operator|>
name|mask
condition|)
block|{
comment|// Resize and add new entry
name|mask
operator|=
name|resizeTable
argument_list|(
name|mask
argument_list|,
name|CompactHashing
operator|.
name|newCapacity
argument_list|(
name|mask
argument_list|)
argument_list|,
name|hash
argument_list|,
name|newEntryIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|entry
argument_list|,
name|newEntryIndex
operator|+
literal|1
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
name|resizeMeMaybe
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|insertEntry
argument_list|(
name|newEntryIndex
argument_list|,
name|object
argument_list|,
name|hash
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
name|incrementModCount
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Creates a fresh entry with the specified object at the specified position in the entry arrays.    */
DECL|method|insertEntry (int entryIndex, @Nullable E object, int hash, int mask)
name|void
name|insertEntry
parameter_list|(
name|int
name|entryIndex
parameter_list|,
annotation|@
name|Nullable
name|E
name|object
parameter_list|,
name|int
name|hash
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|this
operator|.
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|hash
argument_list|,
name|UNSET
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|this
operator|.
name|elements
index|[
name|entryIndex
index|]
operator|=
name|object
expr_stmt|;
block|}
comment|/** Resizes the entries storage if necessary. */
DECL|method|resizeMeMaybe (int newSize)
specifier|private
name|void
name|resizeMeMaybe
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
name|int
name|entriesSize
init|=
name|entries
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|newSize
operator|>
name|entriesSize
condition|)
block|{
comment|// 1.5x but round up to nearest odd (this is optimal for memory consumption on Android)
name|int
name|newCapacity
init|=
name|Math
operator|.
name|min
argument_list|(
name|CompactHashing
operator|.
name|MAX_SIZE
argument_list|,
operator|(
name|entriesSize
operator|+
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|entriesSize
operator|>>>
literal|1
argument_list|)
operator|)
operator||
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|!=
name|entriesSize
condition|)
block|{
name|resizeEntries
argument_list|(
name|newCapacity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Resizes the internal entries array to the specified capacity, which may be greater or less than    * the current capacity.    */
DECL|method|resizeEntries (int newCapacity)
name|void
name|resizeEntries
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|elements
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|resizeTable (int mask, int newCapacity, int targetHash, int targetEntryIndex)
specifier|private
name|int
name|resizeTable
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|newCapacity
parameter_list|,
name|int
name|targetHash
parameter_list|,
name|int
name|targetEntryIndex
parameter_list|)
block|{
name|Object
name|newTable
init|=
name|CompactHashing
operator|.
name|createTable
argument_list|(
name|newCapacity
argument_list|)
decl_stmt|;
name|int
name|newMask
init|=
name|newCapacity
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|targetEntryIndex
operator|!=
name|UNSET
condition|)
block|{
comment|// Add target first; it must be last in the chain because its entry hasn't yet been created
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|newTable
argument_list|,
name|targetHash
operator|&
name|newMask
argument_list|,
name|targetEntryIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Object
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
name|int
index|[]
name|entries
init|=
name|this
operator|.
name|entries
decl_stmt|;
comment|// Loop over current hashtable
for|for
control|(
name|int
name|tableIndex
init|=
literal|0
init|;
name|tableIndex
operator|<=
name|mask
condition|;
name|tableIndex
operator|++
control|)
block|{
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|)
decl_stmt|;
while|while
condition|(
name|next
operator|!=
name|UNSET
condition|)
block|{
name|int
name|entryIndex
init|=
name|next
operator|-
literal|1
decl_stmt|;
name|int
name|entry
init|=
name|entries
index|[
name|entryIndex
index|]
decl_stmt|;
comment|// Rebuild hash using entry hashPrefix and tableIndex ("hashSuffix")
name|int
name|hash
init|=
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
operator||
name|tableIndex
decl_stmt|;
name|int
name|newTableIndex
init|=
name|hash
operator|&
name|newMask
decl_stmt|;
name|int
name|newNext
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|newTable
argument_list|,
name|newTableIndex
argument_list|)
decl_stmt|;
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|newTable
argument_list|,
name|newTableIndex
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|hash
argument_list|,
name|newNext
argument_list|,
name|newMask
argument_list|)
expr_stmt|;
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|table
operator|=
name|newTable
expr_stmt|;
name|setHashTableMask
argument_list|(
name|newMask
argument_list|)
expr_stmt|;
return|return
name|newMask
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullable Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|hash
init|=
name|smearedHash
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|table
argument_list|,
name|hash
operator|&
name|mask
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|UNSET
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|hashPrefix
init|=
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|hash
argument_list|,
name|mask
argument_list|)
decl_stmt|;
do|do
block|{
name|int
name|entryIndex
init|=
name|next
operator|-
literal|1
decl_stmt|;
name|int
name|entry
init|=
name|entries
index|[
name|entryIndex
index|]
decl_stmt|;
if|if
condition|(
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
operator|==
name|hashPrefix
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|object
argument_list|,
name|elements
index|[
name|entryIndex
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|!=
name|UNSET
condition|)
do|;
return|return
literal|false
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|remove (@ullable Object object)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|CompactHashing
operator|.
name|remove
argument_list|(
name|object
argument_list|,
comment|/* value= */
literal|null
argument_list|,
name|mask
argument_list|,
name|table
argument_list|,
name|entries
argument_list|,
name|elements
argument_list|,
comment|/* values= */
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|moveLastEntry
argument_list|(
name|index
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|incrementModCount
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.    */
DECL|method|moveLastEntry (int dstIndex, int mask)
name|void
name|moveLastEntry
parameter_list|(
name|int
name|dstIndex
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|int
name|srcIndex
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|dstIndex
operator|<
name|srcIndex
condition|)
block|{
comment|// move last entry to deleted spot
annotation|@
name|Nullable
name|Object
name|object
init|=
name|elements
index|[
name|srcIndex
index|]
decl_stmt|;
name|elements
index|[
name|dstIndex
index|]
operator|=
name|object
expr_stmt|;
name|elements
index|[
name|srcIndex
index|]
operator|=
literal|null
expr_stmt|;
comment|// move the last entry to the removed spot, just like we moved the element
name|entries
index|[
name|dstIndex
index|]
operator|=
name|entries
index|[
name|srcIndex
index|]
expr_stmt|;
name|entries
index|[
name|srcIndex
index|]
operator|=
literal|0
expr_stmt|;
comment|// also need to update whoever's "next" pointer was pointing to the last entry place
name|int
name|tableIndex
init|=
name|smearedHash
argument_list|(
name|object
argument_list|)
operator|&
name|mask
decl_stmt|;
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|)
decl_stmt|;
name|int
name|srcNext
init|=
name|srcIndex
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|srcNext
condition|)
block|{
comment|// we need to update the root pointer
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|,
name|dstIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need to update a pointer in an entry
name|int
name|entryIndex
decl_stmt|;
name|int
name|entry
decl_stmt|;
do|do
block|{
name|entryIndex
operator|=
name|next
operator|-
literal|1
expr_stmt|;
name|entry
operator|=
name|entries
index|[
name|entryIndex
index|]
expr_stmt|;
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|!=
name|srcNext
condition|)
do|;
comment|// here, entries[entryIndex] points to the old entry location; update it
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|entry
argument_list|,
name|dstIndex
operator|+
literal|1
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|elements
index|[
name|dstIndex
index|]
operator|=
literal|null
expr_stmt|;
name|entries
index|[
name|dstIndex
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|firstEntryIndex ()
name|int
name|firstEntryIndex
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
DECL|method|getSuccessor (int entryIndex)
name|int
name|getSuccessor
parameter_list|(
name|int
name|entryIndex
parameter_list|)
block|{
return|return
operator|(
name|entryIndex
operator|+
literal|1
operator|<
name|size
operator|)
condition|?
name|entryIndex
operator|+
literal|1
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Updates the index an iterator is pointing to after a call to remove: returns the index of the    * entry that should be looked at after a removal on indexRemoved, with indexBeforeRemove as the    * index that *was* the next entry that would be looked at.    */
DECL|method|adjustAfterRemove (int indexBeforeRemove, @SuppressWarnings(R) int indexRemoved)
name|int
name|adjustAfterRemove
parameter_list|(
name|int
name|indexBeforeRemove
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|indexRemoved
parameter_list|)
block|{
return|return
name|indexBeforeRemove
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
name|int
name|expectedMetadata
init|=
name|metadata
decl_stmt|;
name|int
name|currentIndex
init|=
name|firstEntryIndex
argument_list|()
decl_stmt|;
name|int
name|indexToRemove
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentIndex
operator|>=
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// known to be Es
annotation|@
name|Override
specifier|public
name|E
name|next
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|indexToRemove
operator|=
name|currentIndex
expr_stmt|;
name|E
name|result
init|=
operator|(
name|E
operator|)
name|elements
index|[
name|currentIndex
index|]
decl_stmt|;
name|currentIndex
operator|=
name|getSuccessor
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
name|checkRemove
argument_list|(
name|indexToRemove
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|incrementExpectedModCount
argument_list|()
expr_stmt|;
name|CompactHashSet
operator|.
name|this
operator|.
name|remove
argument_list|(
name|elements
index|[
name|indexToRemove
index|]
argument_list|)
expr_stmt|;
name|currentIndex
operator|=
name|adjustAfterRemove
argument_list|(
name|currentIndex
argument_list|,
name|indexToRemove
argument_list|)
expr_stmt|;
name|indexToRemove
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|void
name|incrementExpectedModCount
parameter_list|()
block|{
name|expectedMetadata
operator|+=
name|CompactHashing
operator|.
name|MODIFICATION_COUNT_INCREMENT
expr_stmt|;
block|}
specifier|private
name|void
name|checkForConcurrentModification
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|!=
name|expectedMetadata
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// known to be Es
annotation|@
name|Override
DECL|method|forEach (Consumer<? super E> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|action
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstEntryIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|getSuccessor
argument_list|(
name|i
argument_list|)
control|)
block|{
name|action
operator|.
name|accept
argument_list|(
operator|(
name|E
operator|)
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|toArray (T[] a)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|a
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its    * current size.    */
DECL|method|trimToSize ()
specifier|public
name|void
name|trimToSize
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|size
operator|<
name|entries
operator|.
name|length
condition|)
block|{
name|resizeEntries
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|int
name|minimumTableSize
init|=
name|CompactHashing
operator|.
name|tableSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimumTableSize
operator|<
name|mask
condition|)
block|{
comment|// smaller table size will always be less than current mask
name|resizeTable
argument_list|(
name|mask
argument_list|,
name|minimumTableSize
argument_list|,
name|UNSET
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return;
block|}
name|incrementModCount
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CompactHashing
operator|.
name|tableClear
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|entries
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstEntryIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|getSuccessor
argument_list|(
name|i
argument_list|)
control|)
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|int
name|elementCount
init|=
name|stream
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid size: "
operator|+
name|elementCount
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|elementCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementCount
condition|;
name|i
operator|++
control|)
block|{
name|E
name|element
init|=
operator|(
name|E
operator|)
name|stream
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

