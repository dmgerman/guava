begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkEntryNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|keyOrNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BinaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link NavigableMap} whose contents will never change, with many other important properties  * detailed at {@link ImmutableCollection}.  *  *<p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a {@link  * Comparator} or {@link Comparable} type whose comparison behavior is<i>inconsistent with  * equals</i>. That is, {@code a.compareTo(b)} or {@code comparator.compare(a, b)} should equal zero  *<i>if and only if</i> {@code a.equals(b)}. If this advice is not followed, the resulting map will  * not correctly obey its specification.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained">  * immutable collections</a>.  *  * @author Jared Levy  * @author Louis Wasserman  * @since 2.0 (implements {@code NavigableMap} since 12.0)  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableSortedMap
specifier|public
specifier|final
class|class
name|ImmutableSortedMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableSortedMapFauxverideShim
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap}    * whose keys and values are the result of applying the provided mapping functions to the input    * elements.  The generated map is sorted by the specified comparator.    *    *<p>If the mapped keys contain duplicates (according to the specified comparator), an    * {@code IllegalArgumentException} is thrown when the collection operation is performed.    * (This differs from the {@code Collector} returned by    * {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)    *    * @since 21.0    */
annotation|@
name|Beta
DECL|method|toImmutableSortedMap ( Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|,
name|V
parameter_list|>
name|Collector
argument_list|<
name|T
argument_list|,
name|?
argument_list|,
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|toImmutableSortedMap
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|K
argument_list|>
name|keyFunction
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|valueFunction
parameter_list|)
block|{
return|return
name|CollectCollectors
operator|.
name|toImmutableSortedMap
argument_list|(
name|comparator
argument_list|,
name|keyFunction
argument_list|,
name|valueFunction
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose    * keys and values are the result of applying the provided mapping functions to the input    * elements.    *    *<p>If the mapped keys contain duplicates (according to the comparator), the the values are    * merged using the specified merging function. Entries will appear in the encounter order of the    * first occurrence of the key.    *    * @since 21.0    */
annotation|@
name|Beta
DECL|method|toImmutableSortedMap ( Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|,
name|V
parameter_list|>
name|Collector
argument_list|<
name|T
argument_list|,
name|?
argument_list|,
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|toImmutableSortedMap
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|K
argument_list|>
name|keyFunction
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|valueFunction
parameter_list|,
name|BinaryOperator
argument_list|<
name|V
argument_list|>
name|mergeFunction
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|keyFunction
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|valueFunction
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|mergeFunction
argument_list|)
expr_stmt|;
return|return
name|Collectors
operator|.
name|collectingAndThen
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|keyFunction
argument_list|,
name|valueFunction
argument_list|,
name|mergeFunction
argument_list|,
parameter_list|()
lambda|->
operator|new
name|TreeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|comparator
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSortedMap
operator|::
name|copyOfSorted
argument_list|)
return|;
block|}
comment|/*    * TODO(kevinb): Confirm that ImmutableSortedMap is faster to construct and    * uses less memory than TreeMap; then say so in the class Javadoc.    */
DECL|field|NATURAL_ORDER
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Comparable
argument_list|>
name|NATURAL_ORDER
init|=
name|Ordering
operator|.
name|natural
argument_list|()
decl_stmt|;
DECL|field|NATURAL_EMPTY_MAP
specifier|private
specifier|static
specifier|final
name|ImmutableSortedMap
argument_list|<
name|Comparable
argument_list|,
name|Object
argument_list|>
name|NATURAL_EMPTY_MAP
init|=
operator|new
name|ImmutableSortedMap
argument_list|<>
argument_list|(
name|ImmutableSortedSet
operator|.
name|emptySet
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|Object
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|emptyMap (Comparator<? super K> comparator)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|emptyMap
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|equals
argument_list|(
name|comparator
argument_list|)
condition|)
block|{
return|return
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableSortedMap
argument_list|<>
argument_list|(
name|ImmutableSortedSet
operator|.
name|emptySet
argument_list|(
name|comparator
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|V
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the empty sorted map.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// unsafe, comparator() returns a comparator on the specified type
comment|// TODO(kevinb): evaluate whether or not of().comparator() should return null
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|NATURAL_EMPTY_MAP
return|;
block|}
comment|/**    * Returns an immutable map containing a single entry.    */
DECL|method|of (K k1, V v1)
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|k1
argument_list|,
name|v1
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing a single entry.    */
DECL|method|of (Comparator<? super K> comparator, K k1, V v1)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|,
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|)
block|{
return|return
operator|new
name|ImmutableSortedMap
argument_list|<>
argument_list|(
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|k1
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|v1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ofEntries ( Entry<K, V>.... entries)
specifier|private
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ofEntries
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
modifier|...
name|entries
parameter_list|)
block|{
return|return
name|fromEntries
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entries
argument_list|,
name|entries
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if the two keys are equal according to    *     their natural ordering    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ( K k1, V v1, K k2, V v2)
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|)
block|{
return|return
name|ofEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ( K k1, V v1, K k2, V v2, K k3, V v3)
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|)
block|{
return|return
name|ofEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ( K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|)
block|{
return|return
name|ofEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k4
argument_list|,
name|v4
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ( K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|,
name|K
name|k5
parameter_list|,
name|V
name|v5
parameter_list|)
block|{
return|return
name|ofEntries
argument_list|(
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k4
argument_list|,
name|v4
argument_list|)
argument_list|,
name|entryOf
argument_list|(
name|k5
argument_list|,
name|v5
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the same entries as {@code map}, sorted    * by the natural ordering of the keys.    *    *<p>Despite the method name, this method attempts to avoid actually copying    * the data when it is safe to do so. The exact circumstances under which a    * copy will or will not be performed are undocumented and subject to change.    *    *<p>This method is not type-safe, as it may be called on a map with keys    * that are not mutually comparable.    *    * @throws ClassCastException if the keys in {@code map} are not mutually    *         comparable    * @throws NullPointerException if any key or value in {@code map} is null    * @throws IllegalArgumentException if any two keys are equal according to    *         their natural ordering    */
DECL|method|copyOf (Map<? extends K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
comment|// Hack around K not being a subtype of Comparable.
comment|// Unsafe, see ImmutableSortedSetFauxverideShim.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Ordering
argument_list|<
name|K
argument_list|>
name|naturalOrder
init|=
operator|(
name|Ordering
argument_list|<
name|K
argument_list|>
operator|)
name|NATURAL_ORDER
decl_stmt|;
return|return
name|copyOfInternal
argument_list|(
name|map
argument_list|,
name|naturalOrder
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the same entries as {@code map}, with    * keys sorted by the provided comparator.    *    *<p>Despite the method name, this method attempts to avoid actually copying    * the data when it is safe to do so. The exact circumstances under which a    * copy will or will not be performed are undocumented and subject to change.    *    * @throws NullPointerException if any key or value in {@code map} is null    * @throws IllegalArgumentException if any two keys are equal according to the    *         comparator    */
DECL|method|copyOf ( Map<? extends K, ? extends V> map, Comparator<? super K> comparator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|copyOfInternal
argument_list|(
name|map
argument_list|,
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the given entries, with keys sorted    * by the provided comparator.    *    *<p>This method is not type-safe, as it may be called on a map with keys    * that are not mutually comparable.    *    * @throws NullPointerException if any key or value in {@code map} is null    * @throws IllegalArgumentException if any two keys are equal according to the    *         comparator    * @since 19.0    */
annotation|@
name|Beta
DECL|method|copyOf ( Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
comment|// Hack around K not being a subtype of Comparable.
comment|// Unsafe, see ImmutableSortedSetFauxverideShim.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Ordering
argument_list|<
name|K
argument_list|>
name|naturalOrder
init|=
operator|(
name|Ordering
argument_list|<
name|K
argument_list|>
operator|)
name|NATURAL_ORDER
decl_stmt|;
return|return
name|copyOf
argument_list|(
name|entries
argument_list|,
name|naturalOrder
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the given entries, with keys sorted    * by the provided comparator.    *    * @throws NullPointerException if any key or value in {@code map} is null    * @throws IllegalArgumentException if any two keys are equal according to the    *         comparator    * @since 19.0    */
annotation|@
name|Beta
DECL|method|copyOf ( Iterable<? extends Entry<? extends K, ? extends V>> entries, Comparator<? super K> comparator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|fromEntries
argument_list|(
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
argument_list|,
literal|false
argument_list|,
name|entries
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the same entries as the provided sorted    * map, with the same ordering.    *    *<p>Despite the method name, this method attempts to avoid actually copying    * the data when it is safe to do so. The exact circumstances under which a    * copy will or will not be performed are undocumented and subject to change.    *    * @throws NullPointerException if any key or value in {@code map} is null    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|copyOfSorted (SortedMap<K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOfSorted
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
init|=
name|map
operator|.
name|comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
comment|// If map has a null comparator, the keys should have a natural ordering,
comment|// even though K doesn't explicitly implement Comparable.
name|comparator
operator|=
operator|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
operator|)
name|NATURAL_ORDER
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|instanceof
name|ImmutableSortedMap
condition|)
block|{
comment|// TODO(kevinb): Prove that this cast is safe, even though
comment|// Collections.unmodifiableSortedMap requires the same key type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvMap
init|=
operator|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
decl_stmt|;
if|if
condition|(
operator|!
name|kvMap
operator|.
name|isPartialView
argument_list|()
condition|)
block|{
return|return
name|kvMap
return|;
block|}
block|}
return|return
name|fromEntries
argument_list|(
name|comparator
argument_list|,
literal|true
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|copyOfInternal ( Map<? extends K, ? extends V> map, Comparator<? super K> comparator)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOfInternal
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|boolean
name|sameComparator
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|map
operator|instanceof
name|SortedMap
condition|)
block|{
name|SortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|sortedMap
init|=
operator|(
name|SortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|map
decl_stmt|;
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator2
init|=
name|sortedMap
operator|.
name|comparator
argument_list|()
decl_stmt|;
name|sameComparator
operator|=
operator|(
name|comparator2
operator|==
literal|null
operator|)
condition|?
name|comparator
operator|==
name|NATURAL_ORDER
else|:
name|comparator
operator|.
name|equals
argument_list|(
name|comparator2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sameComparator
operator|&&
operator|(
name|map
operator|instanceof
name|ImmutableSortedMap
operator|)
condition|)
block|{
comment|// TODO(kevinb): Prove that this cast is safe, even though
comment|// Collections.unmodifiableSortedMap requires the same key type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvMap
init|=
operator|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
decl_stmt|;
if|if
condition|(
operator|!
name|kvMap
operator|.
name|isPartialView
argument_list|()
condition|)
block|{
return|return
name|kvMap
return|;
block|}
block|}
return|return
name|fromEntries
argument_list|(
name|comparator
argument_list|,
name|sameComparator
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Accepts a collection of possibly-null entries.  If {@code sameComparator}, then it is assumed    * that they do not need to be sorted or checked for dupes.    */
DECL|method|fromEntries ( Comparator<? super K> comparator, boolean sameComparator, Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|fromEntries
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|,
name|boolean
name|sameComparator
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
comment|// "adding" type params to an array of a raw type should be safe as
comment|// long as no one can ever cast that same array instance back to a
comment|// raw type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entryArray
init|=
operator|(
name|Entry
index|[]
operator|)
name|Iterables
operator|.
name|toArray
argument_list|(
name|entries
argument_list|,
name|EMPTY_ENTRY_ARRAY
argument_list|)
decl_stmt|;
return|return
name|fromEntries
argument_list|(
name|comparator
argument_list|,
name|sameComparator
argument_list|,
name|entryArray
argument_list|,
name|entryArray
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|fromEntries ( final Comparator<? super K> comparator, boolean sameComparator, Entry<K, V>[] entryArray, int size)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|fromEntries
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|,
name|boolean
name|sameComparator
parameter_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entryArray
parameter_list|,
name|int
name|size
parameter_list|)
block|{
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|0
case|:
return|return
name|emptyMap
argument_list|(
name|comparator
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|ImmutableSortedMap
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|of
argument_list|(
name|comparator
argument_list|,
name|entryArray
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
argument_list|,
name|entryArray
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
name|Object
index|[]
name|keys
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
if|if
condition|(
name|sameComparator
condition|)
block|{
comment|// Need to check for nulls, but don't need to sort or validate.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
name|entryArray
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entryArray
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keys
index|[
name|i
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Need to sort and check for nulls and dupes.
comment|// Inline the Comparator implementation rather than transforming with a Function
comment|// to save code size.
name|Arrays
operator|.
name|sort
argument_list|(
name|entryArray
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e1
parameter_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e2
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|,
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|K
name|prevKey
init|=
name|entryArray
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|keys
index|[
literal|0
index|]
operator|=
name|prevKey
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|entryArray
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|checkEntryNotNull
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|K
name|key
init|=
name|entryArray
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|entryArray
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keys
index|[
name|i
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
name|checkNoConflict
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|prevKey
argument_list|,
name|key
argument_list|)
operator|!=
literal|0
argument_list|,
literal|"key"
argument_list|,
name|entryArray
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|entryArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|prevKey
operator|=
name|key
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ImmutableSortedMap
argument_list|<>
argument_list|(
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
argument_list|(
operator|new
name|RegularImmutableList
argument_list|<
name|K
argument_list|>
argument_list|(
name|keys
argument_list|)
argument_list|,
name|comparator
argument_list|)
argument_list|,
operator|new
name|RegularImmutableList
argument_list|<
name|V
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns a builder that creates immutable sorted maps whose keys are    * ordered by their natural ordering. The sorted maps use {@link    * Ordering#natural()} as the comparator.    */
DECL|method|naturalOrder ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|naturalOrder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a builder that creates immutable sorted maps with an explicit    * comparator. If the comparator has a more general type than the map's keys,    * such as creating a {@code SortedMap<Integer, String>} with a {@code    * Comparator<Number>}, use the {@link Builder} constructor instead.    *    * @throws NullPointerException if {@code comparator} is null    */
DECL|method|orderedBy (Comparator<K> comparator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|orderedBy
parameter_list|(
name|Comparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|comparator
argument_list|)
return|;
block|}
comment|/**    * Returns a builder that creates immutable sorted maps whose keys are    * ordered by the reverse of their natural ordering.    */
DECL|method|reverseOrder ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reverseOrder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * A builder for creating immutable sorted map instances, especially {@code    * public static final} maps ("constant maps"). Example:<pre>   {@code    *    *   static final ImmutableSortedMap<Integer, String> INT_TO_WORD =    *       new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())    *           .put(1, "one")    *           .put(2, "two")    *           .put(3, "three")    *           .build();}</pre>    *    *<p>For<i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()}    * methods are even more convenient.    *    *<p>Builder instances can be reused - it is safe to call {@link #build}    * multiple times to build multiple maps in series. Each map is a superset of    * the maps created before it.    *    * @since 2.0    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
decl_stmt|;
comment|/**      * Creates a new builder. The returned builder is equivalent to the builder      * generated by {@link ImmutableSortedMap#orderedBy}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|Builder (Comparator<? super K> comparator)
specifier|public
name|Builder
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Associates {@code key} with {@code value} in the built map. Duplicate      * keys, according to the comparator (which might be the keys' natural      * order), are not allowed, and will cause {@link #build} to fail.      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds the given {@code entry} to the map, making it immutable if      * necessary. Duplicate keys, according to the comparator (which might be      * the keys' natural order), are not allowed, and will cause {@link #build}      * to fail.      *      * @since 11.0      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|put (Entry<? extends K, ? extends V> entry)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|super
operator|.
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates all of the given map's keys and values in the built map.      * Duplicate keys, according to the comparator (which might be the keys'      * natural order), are not allowed, and will cause {@link #build} to fail.      *      * @throws NullPointerException if any key or value in {@code map} is null      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|super
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds all the given entries to the built map.  Duplicate keys, according      * to the comparator (which might be the keys' natural order), are not      * allowed, and will cause {@link #build} to fail.      *      * @throws NullPointerException if any key, value, or entry is null      * @since 19.0      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Beta
annotation|@
name|Override
DECL|method|putAll (Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|super
operator|.
name|putAll
argument_list|(
name|entries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Throws an {@code UnsupportedOperationException}.      *      * @since 19.0      * @deprecated Unsupported by ImmutableSortedMap.Builder.      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Beta
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|orderEntriesByValue (Comparator<? super V> valueComparator)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|orderEntriesByValue
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not available on ImmutableSortedMap.Builder"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|combine (ImmutableMap.Builder<K, V> other)
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|combine
parameter_list|(
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
name|super
operator|.
name|combine
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns a newly-created immutable sorted map.      *      * @throws IllegalArgumentException if any two keys are equal according to      *     the comparator (which might be the keys' natural order)      */
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|0
case|:
return|return
name|emptyMap
argument_list|(
name|comparator
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|of
argument_list|(
name|comparator
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|fromEntries
argument_list|(
name|comparator
argument_list|,
literal|false
argument_list|,
name|entries
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|keySet
specifier|private
specifier|final
specifier|transient
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
DECL|field|valueList
specifier|private
specifier|final
specifier|transient
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|valueList
decl_stmt|;
DECL|field|descendingMap
specifier|private
specifier|transient
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
decl_stmt|;
DECL|method|ImmutableSortedMap (RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList)
name|ImmutableSortedMap
parameter_list|(
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|,
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|valueList
parameter_list|)
block|{
name|this
argument_list|(
name|keySet
argument_list|,
name|valueList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableSortedMap ( RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList, ImmutableSortedMap<K, V> descendingMap)
name|ImmutableSortedMap
parameter_list|(
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|,
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|valueList
parameter_list|,
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
parameter_list|)
block|{
name|this
operator|.
name|keySet
operator|=
name|keySet
expr_stmt|;
name|this
operator|.
name|valueList
operator|=
name|valueList
expr_stmt|;
name|this
operator|.
name|descendingMap
operator|=
name|descendingMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|valueList
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|forEach (BiConsumer<? super K, ? super V> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|BiConsumer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|keyList
init|=
name|keySet
operator|.
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|keyList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|valueList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|int
name|index
init|=
name|keySet
operator|.
name|indexOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|==
operator|-
literal|1
operator|)
condition|?
literal|null
else|:
name|valueList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|keySet
operator|.
name|isPartialView
argument_list|()
operator|||
name|valueList
operator|.
name|isPartialView
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable set of the mappings in this map, sorted by the key    * ordering.    */
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|super
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
annotation|@
name|WeakOuter
class|class
name|EntrySet
extends|extends
name|ImmutableMapEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Spliterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|spliterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|spliterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|action
parameter_list|)
block|{
name|asList
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|ImmutableList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createAsList
parameter_list|()
block|{
return|return
operator|new
name|ImmutableAsList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|keySet
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|valueList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Spliterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|spliterator
parameter_list|()
block|{
return|return
name|CollectSpliterators
operator|.
name|indexed
argument_list|(
name|size
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|SPLITERATOR_CHARACTERISTICS
argument_list|,
name|this
operator|::
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
name|ImmutableCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|delegateCollection
parameter_list|()
block|{
return|return
name|EntrySet
operator|.
name|this
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|this
return|;
block|}
block|}
return|return
name|isEmpty
argument_list|()
condition|?
name|ImmutableSet
operator|.
expr|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|>
name|of
argument_list|()
else|:
operator|new
name|EntrySet
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable sorted set of the keys in this map.    */
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|keySet
return|;
block|}
annotation|@
name|Override
DECL|method|createKeySet ()
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should never be called"
argument_list|)
throw|;
block|}
comment|/**    * Returns an immutable collection of the values in this map, sorted by the    * ordering of the corresponding keys.    */
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|valueList
return|;
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should never be called"
argument_list|)
throw|;
block|}
comment|/**    * Returns the comparator that orders the keys, which is    * {@link Ordering#natural()} when the natural ordering of the keys is used.    * Note that its behavior is not consistent with {@link TreeMap#comparator()},    * which returns {@code null} to indicate natural ordering.    */
annotation|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|keySet
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|firstKey ()
specifier|public
name|K
name|firstKey
parameter_list|()
block|{
return|return
name|keySet
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lastKey ()
specifier|public
name|K
name|lastKey
parameter_list|()
block|{
return|return
name|keySet
argument_list|()
operator|.
name|last
argument_list|()
return|;
block|}
DECL|method|getSubMap (int fromIndex, int toIndex)
specifier|private
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getSubMap
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|fromIndex
operator|==
literal|0
operator|&&
name|toIndex
operator|==
name|size
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|fromIndex
operator|==
name|toIndex
condition|)
block|{
return|return
name|emptyMap
argument_list|(
name|comparator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableSortedMap
argument_list|<>
argument_list|(
name|keySet
operator|.
name|getSubSet
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|,
name|valueList
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys are less than {@code toKey}.    *    *<p>The {@link SortedMap#headMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}    * greater than an earlier {@code toKey}. However, this method doesn't throw    * an exception in that situation, but instead keeps the original {@code    * toKey}.    */
annotation|@
name|Override
DECL|method|headMap (K toKey)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|)
block|{
return|return
name|headMap
argument_list|(
name|toKey
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys are less than (or equal to, if {@code inclusive}) {@code toKey}.    *    *<p>The {@link SortedMap#headMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}    * greater than an earlier {@code toKey}. However, this method doesn't throw    * an exception in that situation, but instead keeps the original {@code    * toKey}.    *    * @since 12.0    */
annotation|@
name|Override
DECL|method|headMap (K toKey, boolean inclusive)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|getSubMap
argument_list|(
literal|0
argument_list|,
name|keySet
operator|.
name|headIndex
argument_list|(
name|checkNotNull
argument_list|(
name|toKey
argument_list|)
argument_list|,
name|inclusive
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys ranges from {@code fromKey}, inclusive, to {@code toKey},    * exclusive.    *    *<p>The {@link SortedMap#subMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code    * fromKey} less than an earlier {@code fromKey}. However, this method doesn't    * throw an exception in that situation, but instead keeps the original {@code    * fromKey}. Similarly, this method keeps the original {@code toKey}, instead    * of throwing an exception, if passed a {@code toKey} greater than an earlier    * {@code toKey}.    */
annotation|@
name|Override
DECL|method|subMap (K fromKey, K toKey)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|K
name|toKey
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|fromKey
argument_list|,
literal|true
argument_list|,
name|toKey
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys ranges from {@code fromKey} to {@code toKey}, inclusive or    * exclusive as indicated by the boolean flags.    *    *<p>The {@link SortedMap#subMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code    * fromKey} less than an earlier {@code fromKey}. However, this method doesn't    * throw an exception in that situation, but instead keeps the original {@code    * fromKey}. Similarly, this method keeps the original {@code toKey}, instead    * of throwing an exception, if passed a {@code toKey} greater than an earlier    * {@code toKey}.    *    * @since 12.0    */
annotation|@
name|Override
DECL|method|subMap ( K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|K
name|toKey
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|fromKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|toKey
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|comparator
argument_list|()
operator|.
name|compare
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|)
operator|<=
literal|0
argument_list|,
literal|"expected fromKey<= toKey but %s> %s"
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|)
expr_stmt|;
return|return
name|headMap
argument_list|(
name|toKey
argument_list|,
name|toInclusive
argument_list|)
operator|.
name|tailMap
argument_list|(
name|fromKey
argument_list|,
name|fromInclusive
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys are greater than or equals to {@code fromKey}.    *    *<p>The {@link SortedMap#tailMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code    * fromKey} less than an earlier {@code fromKey}. However, this method doesn't    * throw an exception in that situation, but instead keeps the original {@code    * fromKey}.    */
annotation|@
name|Override
DECL|method|tailMap (K fromKey)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|)
block|{
return|return
name|tailMap
argument_list|(
name|fromKey
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys are greater than (or equal to, if {@code inclusive})    * {@code fromKey}.    *    *<p>The {@link SortedMap#tailMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code    * fromKey} less than an earlier {@code fromKey}. However, this method doesn't    * throw an exception in that situation, but instead keeps the original {@code    * fromKey}.    *    * @since 12.0    */
annotation|@
name|Override
DECL|method|tailMap (K fromKey, boolean inclusive)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|getSubMap
argument_list|(
name|keySet
operator|.
name|tailIndex
argument_list|(
name|checkNotNull
argument_list|(
name|fromKey
argument_list|)
argument_list|,
name|inclusive
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lowerEntry (K key)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lowerEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|headMap
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
operator|.
name|lastEntry
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lowerKey (K key)
specifier|public
name|K
name|lowerKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|keyOrNull
argument_list|(
name|lowerEntry
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|floorEntry (K key)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|floorEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|headMap
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
operator|.
name|lastEntry
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|floorKey (K key)
specifier|public
name|K
name|floorKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|keyOrNull
argument_list|(
name|floorEntry
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ceilingEntry (K key)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ceilingEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|tailMap
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
operator|.
name|firstEntry
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ceilingKey (K key)
specifier|public
name|K
name|ceilingKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|keyOrNull
argument_list|(
name|ceilingEntry
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|higherEntry (K key)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|higherEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|tailMap
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
operator|.
name|firstEntry
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|higherKey (K key)
specifier|public
name|K
name|higherKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|keyOrNull
argument_list|(
name|higherEntry
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|firstEntry ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|firstEntry
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lastEntry ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lastEntry
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|pollFirstEntry ()
specifier|public
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|pollFirstEntry
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the map unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|pollLastEntry ()
specifier|public
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|pollLastEntry
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|descendingMap ()
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
parameter_list|()
block|{
comment|// TODO(kevinb): the descendingMap is never actually cached at all. Either it should be or the
comment|// code below simplified.
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
name|descendingMap
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|result
operator|=
name|emptyMap
argument_list|(
name|Ordering
operator|.
name|from
argument_list|(
name|comparator
argument_list|()
argument_list|)
operator|.
name|reverse
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|result
operator|=
operator|new
name|ImmutableSortedMap
argument_list|<>
argument_list|(
operator|(
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
operator|)
name|keySet
operator|.
name|descendingSet
argument_list|()
argument_list|,
name|valueList
operator|.
name|reverse
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|navigableKeySet ()
specifier|public
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|navigableKeySet
parameter_list|()
block|{
return|return
name|keySet
return|;
block|}
annotation|@
name|Override
DECL|method|descendingKeySet ()
specifier|public
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|descendingKeySet
parameter_list|()
block|{
return|return
name|keySet
operator|.
name|descendingSet
argument_list|()
return|;
block|}
comment|/**    * Serialized type for all ImmutableSortedMap instances. It captures the    * logical contents and they are reconstructed using public factory methods.    * This ensures that the implementation types remain as implementation    * details.    */
DECL|class|SerializedForm
specifier|private
specifier|static
class|class
name|SerializedForm
extends|extends
name|ImmutableMap
operator|.
name|SerializedForm
block|{
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Object
argument_list|>
name|comparator
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|SerializedForm (ImmutableSortedMap<?, ?> sortedMap)
name|SerializedForm
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|sortedMap
parameter_list|)
block|{
name|super
argument_list|(
name|sortedMap
argument_list|)
expr_stmt|;
name|comparator
operator|=
operator|(
name|Comparator
argument_list|<
name|Object
argument_list|>
operator|)
name|sortedMap
operator|.
name|comparator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
return|return
name|createMap
argument_list|(
name|builder
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeReplace ()
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerializedForm
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|// This class is never actually serialized directly, but we have to make the
comment|// warning go away (and suppressing would suppress for all nested classes too)
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

