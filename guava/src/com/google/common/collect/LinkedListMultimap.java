begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multisets
operator|.
name|setCountImpl
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSequentialList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@code ListMultimap} that supports deterministic  * iteration order for both keys and values. The iteration order is preserved  * across non-distinct key values. For example, for the following multimap  * definition:<pre>   {@code  *  *   Multimap<K, V> multimap = LinkedListMultimap.create();  *   multimap.put(key1, foo);  *   multimap.put(key2, bar);  *   multimap.put(key1, baz);}</pre>  *  * ... the iteration order for {@link #keys()} is {@code [key1, key2, key1]},  * and similarly for {@link #entries()}. Unlike {@link LinkedHashMultimap}, the  * iteration order is kept consistent between keys, entries and values. For  * example, calling:<pre>   {@code  *  *   map.remove(key1, foo);}</pre>  *  * changes the entries iteration order to {@code [key2=bar, key1=baz]} and the  * key iteration order to {@code [key2, key1]}. The {@link #entries()} iterator  * returns mutable map entries, and {@link #replaceValues} attempts to preserve  * iteration order as much as possible.  *  *<p>The collections returned by {@link #keySet()} and {@link #asMap} iterate  * through the keys in the order they were first added to the multimap.  * Similarly, {@link #get}, {@link #removeAll}, and {@link #replaceValues}  * return collections that iterate through the values in the order they were  * added. The collections generated by {@link #entries()}, {@link #keys()}, and  * {@link #values} iterate across the key-value mappings in the order they were  * added to the multimap.  *  *<p>The {@link #values()} and {@link #entries()} methods both return a  * {@code List}, instead of the {@code Collection} specified by the {@link  * ListMultimap} interface.  *  *<p>The methods {@link #get}, {@link #keySet()}, {@link #keys()},  * {@link #values}, {@link #entries()}, and {@link #asMap} return collections  * that are views of the multimap. If the multimap is modified while an  * iteration over any of those collections is in progress, except through the  * iterator's methods, the results of the iteration are undefined.  *  *<p>Keys and values may be null. All optional multimap methods are supported,  * and all returned views are modifiable.  *  *<p>This class is not threadsafe when any concurrent operations update the  * multimap. Concurrent read operations will work correctly. To allow concurrent  * update operations, wrap your multimap with a call to {@link  * Multimaps#synchronizedListMultimap}.  *  * @author Mike Bostock  * @since Guava release 02 (imported from Google Collections Library)  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|LinkedListMultimap
specifier|public
specifier|final
class|class
name|LinkedListMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
comment|/*    * Order is maintained using a linked list containing all key-value pairs. In    * addition, a series of disjoint linked lists of "siblings", each containing    * the values for a specific key, is used to implement {@link    * ValueForKeyIterator} in constant time.    */
DECL|class|Node
specifier|private
specifier|static
specifier|final
class|class
name|Node
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|key
specifier|final
name|K
name|key
decl_stmt|;
DECL|field|value
name|V
name|value
decl_stmt|;
DECL|field|next
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
decl_stmt|;
comment|// the next node (with any key)
DECL|field|previous
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
decl_stmt|;
comment|// the previous node (with any key)
DECL|field|nextSibling
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextSibling
decl_stmt|;
comment|// the next node with the same key
DECL|field|previousSibling
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previousSibling
decl_stmt|;
comment|// the previous node with the same key
DECL|method|Node (@ullable K key, @Nullable V value)
name|Node
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|key
operator|+
literal|"="
operator|+
name|value
return|;
block|}
block|}
DECL|field|head
specifier|private
specifier|transient
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|head
decl_stmt|;
comment|// the head for all keys
DECL|field|tail
specifier|private
specifier|transient
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tail
decl_stmt|;
comment|// the tail for all keys
DECL|field|keyCount
specifier|private
specifier|transient
name|Multiset
argument_list|<
name|K
argument_list|>
name|keyCount
decl_stmt|;
comment|// the number of values for each key
DECL|field|keyToKeyHead
specifier|private
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|keyToKeyHead
decl_stmt|;
comment|// the head for a given key
DECL|field|keyToKeyTail
specifier|private
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|keyToKeyTail
decl_stmt|;
comment|// the tail for a given key
comment|/**    * Creates a new, empty {@code LinkedListMultimap} with the default initial    * capacity.    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|LinkedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|LinkedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Constructs an empty {@code LinkedListMultimap} with enough capacity to hold    * the specified number of keys without rehashing.    *    * @param expectedKeys the expected number of distinct keys    * @throws IllegalArgumentException if {@code expectedKeys} is negative    */
DECL|method|create (int expectedKeys)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|LinkedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|int
name|expectedKeys
parameter_list|)
block|{
return|return
operator|new
name|LinkedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|expectedKeys
argument_list|)
return|;
block|}
comment|/**    * Constructs a {@code LinkedListMultimap} with the same mappings as the    * specified {@code Multimap}. The new multimap has the same    * {@link Multimap#entries()} iteration order as the input multimap.    *    * @param multimap the multimap whose contents are copied to this multimap    */
DECL|method|create ( Multimap<? extends K, ? extends V> multimap)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|LinkedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
return|return
operator|new
name|LinkedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|)
return|;
block|}
DECL|method|LinkedListMultimap ()
specifier|private
name|LinkedListMultimap
parameter_list|()
block|{
name|keyCount
operator|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
expr_stmt|;
name|keyToKeyHead
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|keyToKeyTail
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|LinkedListMultimap (int expectedKeys)
specifier|private
name|LinkedListMultimap
parameter_list|(
name|int
name|expectedKeys
parameter_list|)
block|{
name|keyCount
operator|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|(
name|expectedKeys
argument_list|)
expr_stmt|;
name|keyToKeyHead
operator|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|expectedKeys
argument_list|)
expr_stmt|;
name|keyToKeyTail
operator|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
DECL|method|LinkedListMultimap (Multimap<? extends K, ? extends V> multimap)
specifier|private
name|LinkedListMultimap
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
name|this
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a new node for the specified key-value pair before the specified    * {@code nextSibling} element, or at the end of the list if {@code    * nextSibling} is null. Note: if {@code nextSibling} is specified, it MUST be    * for an node for the same {@code key}!    */
DECL|method|addNode ( @ullable K key, @Nullable V value, @Nullable Node<K, V> nextSibling)
specifier|private
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|addNode
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|,
annotation|@
name|Nullable
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextSibling
parameter_list|)
block|{
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|node
init|=
operator|new
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
comment|// empty list
name|head
operator|=
name|tail
operator|=
name|node
expr_stmt|;
name|keyToKeyHead
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|keyToKeyTail
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextSibling
operator|==
literal|null
condition|)
block|{
comment|// non-empty list, add to tail
name|tail
operator|.
name|next
operator|=
name|node
expr_stmt|;
name|node
operator|.
name|previous
operator|=
name|tail
expr_stmt|;
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyTail
init|=
name|keyToKeyTail
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyTail
operator|==
literal|null
condition|)
block|{
comment|// first for this key
name|keyToKeyHead
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyTail
operator|.
name|nextSibling
operator|=
name|node
expr_stmt|;
name|node
operator|.
name|previousSibling
operator|=
name|keyTail
expr_stmt|;
block|}
name|keyToKeyTail
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|tail
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
comment|// non-empty list, insert before nextSibling
name|node
operator|.
name|previous
operator|=
name|nextSibling
operator|.
name|previous
expr_stmt|;
name|node
operator|.
name|previousSibling
operator|=
name|nextSibling
operator|.
name|previousSibling
expr_stmt|;
name|node
operator|.
name|next
operator|=
name|nextSibling
expr_stmt|;
name|node
operator|.
name|nextSibling
operator|=
name|nextSibling
expr_stmt|;
if|if
condition|(
name|nextSibling
operator|.
name|previousSibling
operator|==
literal|null
condition|)
block|{
comment|// nextSibling was key head
name|keyToKeyHead
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextSibling
operator|.
name|previousSibling
operator|.
name|nextSibling
operator|=
name|node
expr_stmt|;
block|}
if|if
condition|(
name|nextSibling
operator|.
name|previous
operator|==
literal|null
condition|)
block|{
comment|// nextSibling was head
name|head
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
name|nextSibling
operator|.
name|previous
operator|.
name|next
operator|=
name|node
expr_stmt|;
block|}
name|nextSibling
operator|.
name|previous
operator|=
name|node
expr_stmt|;
name|nextSibling
operator|.
name|previousSibling
operator|=
name|node
expr_stmt|;
block|}
name|keyCount
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**    * Removes the specified node from the linked list. This method is only    * intended to be used from the {@code Iterator} classes. See also {@link    * LinkedListMultimap#removeAllNodes(Object)}.    */
DECL|method|removeNode (Node<K, V> node)
specifier|private
name|void
name|removeNode
parameter_list|(
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|previous
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|previous
operator|.
name|next
operator|=
name|node
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
comment|// node was head
name|head
operator|=
name|node
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|next
operator|.
name|previous
operator|=
name|node
operator|.
name|previous
expr_stmt|;
block|}
else|else
block|{
comment|// node was tail
name|tail
operator|=
name|node
operator|.
name|previous
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|previousSibling
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|previousSibling
operator|.
name|nextSibling
operator|=
name|node
operator|.
name|nextSibling
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|nextSibling
operator|!=
literal|null
condition|)
block|{
comment|// node was key head
name|keyToKeyHead
operator|.
name|put
argument_list|(
name|node
operator|.
name|key
argument_list|,
name|node
operator|.
name|nextSibling
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyToKeyHead
operator|.
name|remove
argument_list|(
name|node
operator|.
name|key
argument_list|)
expr_stmt|;
comment|// don't leak a key-null entry
block|}
if|if
condition|(
name|node
operator|.
name|nextSibling
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|nextSibling
operator|.
name|previousSibling
operator|=
name|node
operator|.
name|previousSibling
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|previousSibling
operator|!=
literal|null
condition|)
block|{
comment|// node was key tail
name|keyToKeyTail
operator|.
name|put
argument_list|(
name|node
operator|.
name|key
argument_list|,
name|node
operator|.
name|previousSibling
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyToKeyTail
operator|.
name|remove
argument_list|(
name|node
operator|.
name|key
argument_list|)
expr_stmt|;
comment|// don't leak a key-null entry
block|}
name|keyCount
operator|.
name|remove
argument_list|(
name|node
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
comment|/** Removes all nodes for the specified key. */
DECL|method|removeAllNodes (@ullable Object key)
specifier|private
name|void
name|removeAllNodes
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|V
argument_list|>
name|i
init|=
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Helper method for verifying that an iterator element is present. */
DECL|method|checkElement (@ullable Object node)
specifier|private
specifier|static
name|void
name|checkElement
parameter_list|(
annotation|@
name|Nullable
name|Object
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
comment|/** An {@code Iterator} over all nodes. */
DECL|class|NodeIterator
specifier|private
class|class
name|NodeIterator
implements|implements
name|ListIterator
argument_list|<
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|nextIndex
name|int
name|nextIndex
decl_stmt|;
DECL|field|next
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
decl_stmt|;
DECL|field|current
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
decl_stmt|;
DECL|field|previous
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
decl_stmt|;
DECL|method|NodeIterator ()
name|NodeIterator
parameter_list|()
block|{
name|next
operator|=
name|head
expr_stmt|;
block|}
DECL|method|NodeIterator (int index)
name|NodeIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
operator|(
name|size
operator|/
literal|2
operator|)
condition|)
block|{
name|previous
operator|=
name|tail
expr_stmt|;
name|nextIndex
operator|=
name|size
expr_stmt|;
while|while
condition|(
name|index
operator|++
operator|<
name|size
condition|)
block|{
name|previous
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|next
operator|=
name|head
expr_stmt|;
while|while
condition|(
name|index
operator|--
operator|>
literal|0
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|current
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|checkElement
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|previous
operator|=
name|current
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
name|nextIndex
operator|++
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkState
argument_list|(
name|current
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
name|next
condition|)
block|{
comment|// after call to next()
name|previous
operator|=
name|current
operator|.
name|previous
expr_stmt|;
name|nextIndex
operator|--
expr_stmt|;
block|}
else|else
block|{
comment|// after call to previous()
name|next
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
name|removeNode
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasPrevious ()
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
name|previous
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|previous ()
specifier|public
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
parameter_list|()
block|{
name|checkElement
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|next
operator|=
name|current
operator|=
name|previous
expr_stmt|;
name|previous
operator|=
name|previous
operator|.
name|previous
expr_stmt|;
name|nextIndex
operator|--
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
DECL|method|nextIndex ()
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|nextIndex
return|;
block|}
annotation|@
name|Override
DECL|method|previousIndex ()
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
name|nextIndex
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|set (Node<K, V> e)
specifier|public
name|void
name|set
parameter_list|(
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|add (Node<K, V> e)
specifier|public
name|void
name|add
parameter_list|(
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|setValue (V value)
name|void
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|current
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|current
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
comment|/** An {@code Iterator} over distinct keys in key head order. */
DECL|class|DistinctKeyIterator
specifier|private
class|class
name|DistinctKeyIterator
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
DECL|field|seenKeys
specifier|final
name|Set
argument_list|<
name|K
argument_list|>
name|seenKeys
init|=
name|Sets
operator|.
expr|<
name|K
operator|>
name|newHashSetWithExpectedSize
argument_list|(
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|next
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
init|=
name|head
decl_stmt|;
DECL|field|current
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|K
name|next
parameter_list|()
block|{
name|checkElement
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|current
operator|=
name|next
expr_stmt|;
name|seenKeys
operator|.
name|add
argument_list|(
name|current
operator|.
name|key
argument_list|)
expr_stmt|;
do|do
block|{
comment|// skip ahead to next unseen key
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|next
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|seenKeys
operator|.
name|add
argument_list|(
name|next
operator|.
name|key
argument_list|)
condition|)
do|;
return|return
name|current
operator|.
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkState
argument_list|(
name|current
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeAllNodes
argument_list|(
name|current
operator|.
name|key
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** A {@code ListIterator} over values for a specified key. */
DECL|class|ValueForKeyIterator
specifier|private
class|class
name|ValueForKeyIterator
implements|implements
name|ListIterator
argument_list|<
name|V
argument_list|>
block|{
DECL|field|key
specifier|final
name|Object
name|key
decl_stmt|;
DECL|field|nextIndex
name|int
name|nextIndex
decl_stmt|;
DECL|field|next
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
decl_stmt|;
DECL|field|current
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
decl_stmt|;
DECL|field|previous
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
decl_stmt|;
comment|/** Constructs a new iterator over all values for the specified key. */
DECL|method|ValueForKeyIterator (@ullable Object key)
name|ValueForKeyIterator
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|next
operator|=
name|keyToKeyHead
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new iterator over all values for the specified key starting      * at the specified index. This constructor is optimized so that it starts      * at either the head or the tail, depending on which is closer to the      * specified index. This allows adds to the tail to be done in constant      * time.      *      * @throws IndexOutOfBoundsException if index is invalid      */
DECL|method|ValueForKeyIterator (@ullable Object key, int index)
specifier|public
name|ValueForKeyIterator
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|size
init|=
name|keyCount
operator|.
name|count
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
operator|(
name|size
operator|/
literal|2
operator|)
condition|)
block|{
name|previous
operator|=
name|keyToKeyTail
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|nextIndex
operator|=
name|size
expr_stmt|;
while|while
condition|(
name|index
operator|++
operator|<
name|size
condition|)
block|{
name|previous
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|next
operator|=
name|keyToKeyHead
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|index
operator|--
operator|>
literal|0
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|V
name|next
parameter_list|()
block|{
name|checkElement
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|previous
operator|=
name|current
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|nextSibling
expr_stmt|;
name|nextIndex
operator|++
expr_stmt|;
return|return
name|current
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hasPrevious ()
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
name|previous
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|previous ()
specifier|public
name|V
name|previous
parameter_list|()
block|{
name|checkElement
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|next
operator|=
name|current
operator|=
name|previous
expr_stmt|;
name|previous
operator|=
name|previous
operator|.
name|previousSibling
expr_stmt|;
name|nextIndex
operator|--
expr_stmt|;
return|return
name|current
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|nextIndex ()
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|nextIndex
return|;
block|}
annotation|@
name|Override
DECL|method|previousIndex ()
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
name|nextIndex
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkState
argument_list|(
name|current
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
name|next
condition|)
block|{
comment|// after call to next()
name|previous
operator|=
name|current
operator|.
name|previousSibling
expr_stmt|;
name|nextIndex
operator|--
expr_stmt|;
block|}
else|else
block|{
comment|// after call to previous()
name|next
operator|=
name|current
operator|.
name|nextSibling
expr_stmt|;
block|}
name|removeNode
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|set (V value)
specifier|public
name|void
name|set
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|current
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|current
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|add (V value)
specifier|public
name|void
name|add
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|previous
operator|=
name|addNode
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|,
name|value
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|nextIndex
operator|++
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Query Operations
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|head
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|keyToKeyHead
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullable Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|i
init|=
operator|new
name|NodeIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|value
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|containsEntry (@ullable Object key, @Nullable Object value)
specifier|public
name|boolean
name|containsEntry
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|V
argument_list|>
name|i
init|=
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// Modification Operations
comment|/**    * Stores a key-value pair in the multimap.    *    * @param key key to store in the multimap    * @param value value to store in the multimap    * @return {@code true} always    */
annotation|@
name|Override
DECL|method|put (@ullable K key, @Nullable V value)
specifier|public
name|boolean
name|put
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|addNode
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object key, @Nullable Object value)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
name|Iterator
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|values
operator|.
name|next
argument_list|()
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|values
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// Bulk Operations
annotation|@
name|Override
DECL|method|putAll (@ullable K key, Iterable<? extends V> values)
specifier|public
name|boolean
name|putAll
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|V
name|value
range|:
name|values
control|)
block|{
name|changed
operator||=
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (Multimap<? extends K, ? extends V> multimap)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|multimap
operator|.
name|entries
argument_list|()
control|)
block|{
name|changed
operator||=
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
comment|/**    * {@inheritDoc}    *    *<p>If any entries for the specified {@code key} already exist in the    * multimap, their values are changed in-place without affecting the iteration    * order.    *    *<p>The returned list is immutable and implements    * {@link java.util.RandomAccess}.    */
annotation|@
name|Override
DECL|method|replaceValues (@ullable K key, Iterable<? extends V> values)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|oldValues
init|=
name|getCopy
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|V
argument_list|>
name|keyValues
init|=
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|newValues
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Replace existing values, if any.
while|while
condition|(
name|keyValues
operator|.
name|hasNext
argument_list|()
operator|&&
name|newValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|keyValues
operator|.
name|next
argument_list|()
expr_stmt|;
name|keyValues
operator|.
name|set
argument_list|(
name|newValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove remaining old values, if any.
while|while
condition|(
name|keyValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|keyValues
operator|.
name|next
argument_list|()
expr_stmt|;
name|keyValues
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Add remaining new values, if any.
while|while
condition|(
name|newValues
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|keyValues
operator|.
name|add
argument_list|(
name|newValues
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValues
return|;
block|}
DECL|method|getCopy (@ullable Object key)
specifier|private
name|List
argument_list|<
name|V
argument_list|>
name|getCopy
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|unmodifiableList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    *    *<p>The returned list is immutable and implements    * {@link java.util.RandomAccess}.    */
annotation|@
name|Override
DECL|method|removeAll (@ullable Object key)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|oldValues
init|=
name|getCopy
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|removeAllNodes
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|oldValues
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|head
operator|=
literal|null
expr_stmt|;
name|tail
operator|=
literal|null
expr_stmt|;
name|keyCount
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyToKeyHead
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyToKeyTail
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Views
comment|/**    * {@inheritDoc}    *    *<p>If the multimap is modified while an iteration over the list is in    * progress (except through the iterator's own {@code add}, {@code set} or    * {@code remove} operations) the results of the iteration are undefined.    *    *<p>The returned list is not serializable and does not have random access.    */
annotation|@
name|Override
DECL|method|get (final @Nullable K key)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
specifier|final
annotation|@
name|Nullable
name|K
name|key
parameter_list|)
block|{
return|return
operator|new
name|AbstractSequentialList
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|count
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|V
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|removeAll
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|retainAll
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|field|keySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|result
init|=
name|keySet
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|keySet
operator|=
name|result
operator|=
operator|new
name|AbstractSet
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|DistinctKeyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
comment|// for performance
return|return
name|keyCount
operator|.
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// eager for GWT
return|return
name|super
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|field|keys
specifier|private
specifier|transient
name|Multiset
argument_list|<
name|K
argument_list|>
name|keys
decl_stmt|;
annotation|@
name|Override
DECL|method|keys ()
specifier|public
name|Multiset
argument_list|<
name|K
argument_list|>
name|keys
parameter_list|()
block|{
name|Multiset
argument_list|<
name|K
argument_list|>
name|result
init|=
name|keys
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|keys
operator|=
name|result
operator|=
operator|new
name|MultisetView
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|class|MultisetView
specifier|private
class|class
name|MultisetView
extends|extends
name|AbstractCollection
argument_list|<
name|K
argument_list|>
implements|implements
name|Multiset
argument_list|<
name|K
argument_list|>
block|{
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|nodes
init|=
operator|new
name|NodeIterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|next
argument_list|()
operator|.
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|nodes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|count (@ullable Object key)
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|keyCount
operator|.
name|count
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|add (@ullable K key, int occurrences)
specifier|public
name|int
name|add
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object key, int occurrences)
specifier|public
name|int
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|occurrences
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|int
name|oldCount
init|=
name|count
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|new
name|ValueForKeyIterator
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|occurrences
operator|--
operator|>
literal|0
operator|)
operator|&&
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|values
operator|.
name|next
argument_list|()
expr_stmt|;
name|values
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|oldCount
return|;
block|}
annotation|@
name|Override
DECL|method|setCount (K element, int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|K
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|setCountImpl
argument_list|(
name|this
argument_list|,
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setCount (K element, int oldCount, int newCount)
specifier|public
name|boolean
name|setCount
parameter_list|(
name|K
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
return|return
name|setCountImpl
argument_list|(
name|this
argument_list|,
name|element
argument_list|,
name|oldCount
argument_list|,
name|newCount
argument_list|)
return|;
block|}
DECL|method|removeAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|removeAll
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
DECL|method|retainAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|retainAll
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|elementSet
parameter_list|()
block|{
return|return
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
comment|// TODO(jlevy): lazy init?
return|return
operator|new
name|AbstractSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|K
argument_list|>
name|keyIterator
init|=
operator|new
name|DistinctKeyIterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|keyIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|>
name|next
parameter_list|()
block|{
specifier|final
name|K
name|key
init|=
name|keyIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|Multisets
operator|.
name|AbstractEntry
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getElement
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|count
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|keyIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|keyCount
operator|.
name|equals
argument_list|(
name|object
argument_list|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|toString
argument_list|()
return|;
comment|// XXX observe order?
block|}
block|}
DECL|field|valuesList
specifier|private
specifier|transient
name|List
argument_list|<
name|V
argument_list|>
name|valuesList
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<p>The iterator generated by the returned collection traverses the values    * in the order they were added to the multimap. Because the values may have    * duplicates and follow the insertion ordering, this method returns a {@link    * List}, instead of the {@link Collection} specified in the {@link    * ListMultimap} interface.    */
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|List
argument_list|<
name|V
argument_list|>
name|result
init|=
name|valuesList
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|valuesList
operator|=
name|result
operator|=
operator|new
name|AbstractSequentialList
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|V
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|NodeIterator
name|nodes
init|=
operator|new
name|NodeIterator
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|new
name|ListIterator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|next
argument_list|()
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|hasPrevious
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|previous
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|previous
argument_list|()
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|nextIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|previousIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|nodes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|V
name|e
parameter_list|)
block|{
name|nodes
operator|.
name|setValue
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|V
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createEntry (final Node<K, V> node)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createEntry
parameter_list|(
specifier|final
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|node
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|node
operator|.
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|node
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|V
name|oldValue
init|=
name|node
operator|.
name|value
decl_stmt|;
name|node
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
return|;
block|}
DECL|field|entries
specifier|private
specifier|transient
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<p>The iterator generated by the returned collection traverses the entries    * in the order they were added to the multimap. Because the entries may have    * duplicates and follow the insertion ordering, this method returns a {@link    * List}, instead of the {@link Collection} specified in the {@link    * ListMultimap} interface.    *    *<p>An entry's {@link Entry#getKey} method always returns the same key,    * regardless of what happens subsequently. As long as the corresponding    * key-value mapping is not removed from the multimap, {@link Entry#getValue}    * returns the value from the multimap, which may change over time, and {@link    * Entry#setValue} modifies that value. Removing the mapping from the    * multimap does not alter the value returned by {@code getValue()}, though a    * subsequent {@code setValue()} call won't update the multimap but will lead    * to a revised value being returned by {@code getValue()}.    */
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|entries
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|entries
operator|=
name|result
operator|=
operator|new
name|AbstractSequentialList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|ListIterator
argument_list|<
name|Node
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|nodes
init|=
operator|new
name|NodeIterator
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|new
name|ListIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|createEntry
argument_list|(
name|nodes
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|nodes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|hasPrevious
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
parameter_list|()
block|{
return|return
name|createEntry
argument_list|(
name|nodes
operator|.
name|previous
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|nextIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|previousIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|class|AsMapEntries
specifier|private
class|class
name|AsMapEntries
extends|extends
name|AbstractSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keyCount
operator|.
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|K
argument_list|>
name|keyIterator
init|=
operator|new
name|DistinctKeyIterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|keyIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
specifier|final
name|K
name|key
init|=
name|keyIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|LinkedListMultimap
operator|.
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|keyIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// TODO(jlevy): Override contains() and remove() for better performance.
block|}
DECL|field|map
specifier|private
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
decl_stmt|;
annotation|@
name|Override
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|result
init|=
name|map
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|result
operator|=
operator|new
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|entrySet
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|result
operator|=
operator|new
name|AsMapEntries
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// The following methods are included for performance.
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|LinkedListMultimap
operator|.
name|this
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|LinkedListMultimap
operator|.
name|this
operator|.
name|get
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
return|return
name|collection
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|collection
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|removeAll
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|collection
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|collection
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Comparison and hashing
comment|/**    * Compares the specified object to this multimap for equality.    *    *<p>Two {@code ListMultimap} instances are equal if, for each key, they    * contain the same values in the same order. If the value orderings disagree,    * the multimaps will not be considered equal.    */
DECL|method|equals (@ullable Object other)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|Multimap
condition|)
block|{
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|that
init|=
operator|(
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|asMap
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|asMap
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns the hash code for this multimap.    *    *<p>The hash code of a multimap is defined as the hash code of the map view,    * as returned by {@link Multimap#asMap}.    */
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|asMap
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns a string representation of the multimap, generated by calling    * {@code toString} on the map returned by {@link Multimap#asMap}.    *    * @return a string representation of the multimap    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asMap
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @serialData the number of distinct keys, and then for each distinct key:    *     the first key, the number of values for that key, and the key's values,    *     followed by successive keys and values from the entries() ordering    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.io.ObjectOutputStream"
argument_list|)
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entries
argument_list|()
control|)
block|{
name|stream
operator|.
name|writeObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.io.ObjectInputStream"
argument_list|)
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|keyCount
operator|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
expr_stmt|;
name|keyToKeyHead
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|keyToKeyTail
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|stream
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// reading data stored by writeObject
name|K
name|key
init|=
operator|(
name|K
operator|)
name|stream
operator|.
name|readObject
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// reading data stored by writeObject
name|V
name|value
init|=
operator|(
name|V
operator|)
name|stream
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java serialization not supported"
argument_list|)
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

