begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * The result of a mutation operation performed at a single location in a binary search tree.  *  * @author Louis Wasserman  * @param<K> The key type of the nodes in the modified binary search tree.  * @param<N> The type of the nodes in the modified binary search tree.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstMutationResult
specifier|final
class|class
name|BstMutationResult
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
parameter_list|<
name|K
parameter_list|,
name|N
parameter_list|>
parameter_list|>
block|{
comment|/**    * Creates a {@code BstMutationResult}.    *    * @param targetKey The key targeted for modification. If {@code originalTarget} or {@code    *        changedTarget} are non-null, their keys must compare as equal to {@code targetKey}.    * @param originalRoot The root of the subtree that was modified.    * @param changedRoot The root of the subtree, after the modification and any rebalancing.    * @param originalTarget The node in the original subtree with key {@code targetKey}, if any.    * @param changedTarget The node with key {@code targetKey} after the modification.    */
DECL|method|mutationResult (K targetKey, @Nullable N originalRoot, @Nullable N changedRoot, @Nullable N originalTarget, @Nullable N changedTarget)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|mutationResult
parameter_list|(
name|K
name|targetKey
parameter_list|,
annotation|@
name|Nullable
name|N
name|originalRoot
parameter_list|,
annotation|@
name|Nullable
name|N
name|changedRoot
parameter_list|,
annotation|@
name|Nullable
name|N
name|originalTarget
parameter_list|,
annotation|@
name|Nullable
name|N
name|changedTarget
parameter_list|)
block|{
return|return
operator|new
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|(
name|targetKey
argument_list|,
name|originalRoot
argument_list|,
name|changedRoot
argument_list|,
name|originalTarget
argument_list|,
name|changedTarget
argument_list|)
return|;
block|}
comment|/**    * Returns the identity mutation.    *    * @param targetKey The key targeted for modification.    * @param root The subtree that was to be modified.    * @param target The node in the subtree with key {@code targetKey}, if any.    */
DECL|method|identity ( K targetKey, @Nullable N root, @Nullable N target)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|identity
parameter_list|(
name|K
name|targetKey
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|,
annotation|@
name|Nullable
name|N
name|target
parameter_list|)
block|{
return|return
name|mutationResult
argument_list|(
name|targetKey
argument_list|,
name|root
argument_list|,
name|root
argument_list|,
name|target
argument_list|,
name|target
argument_list|)
return|;
block|}
DECL|field|targetKey
specifier|private
specifier|final
name|K
name|targetKey
decl_stmt|;
annotation|@
name|Nullable
DECL|field|originalRoot
specifier|private
specifier|final
name|N
name|originalRoot
decl_stmt|;
annotation|@
name|Nullable
DECL|field|changedRoot
specifier|private
specifier|final
name|N
name|changedRoot
decl_stmt|;
annotation|@
name|Nullable
DECL|field|originalTarget
specifier|private
specifier|final
name|N
name|originalTarget
decl_stmt|;
annotation|@
name|Nullable
DECL|field|changedTarget
specifier|private
specifier|final
name|N
name|changedTarget
decl_stmt|;
DECL|method|BstMutationResult (K targetKey, @Nullable N originalRoot, @Nullable N changedRoot, @Nullable N originalTarget, @Nullable N changedTarget)
specifier|private
name|BstMutationResult
parameter_list|(
name|K
name|targetKey
parameter_list|,
annotation|@
name|Nullable
name|N
name|originalRoot
parameter_list|,
annotation|@
name|Nullable
name|N
name|changedRoot
parameter_list|,
annotation|@
name|Nullable
name|N
name|originalTarget
parameter_list|,
annotation|@
name|Nullable
name|N
name|changedTarget
parameter_list|)
block|{
assert|assert
operator|(
name|originalTarget
operator|==
literal|null
operator||
name|originalRoot
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|changedTarget
operator|==
literal|null
operator||
name|changedRoot
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
operator|(
name|originalRoot
operator|==
name|changedRoot
operator|)
operator|==
operator|(
name|originalTarget
operator|==
name|changedTarget
operator|)
operator|)
assert|;
name|this
operator|.
name|targetKey
operator|=
name|checkNotNull
argument_list|(
name|targetKey
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalRoot
operator|=
name|originalRoot
expr_stmt|;
name|this
operator|.
name|changedRoot
operator|=
name|changedRoot
expr_stmt|;
name|this
operator|.
name|originalTarget
operator|=
name|originalTarget
expr_stmt|;
name|this
operator|.
name|changedTarget
operator|=
name|changedTarget
expr_stmt|;
block|}
comment|/**    * Returns the key which was the target of this modification.    */
DECL|method|getTargetKey ()
specifier|public
name|K
name|getTargetKey
parameter_list|()
block|{
return|return
name|targetKey
return|;
block|}
comment|/**    * Returns the root of the subtree that was modified.    */
annotation|@
name|Nullable
DECL|method|getOriginalRoot ()
specifier|public
name|N
name|getOriginalRoot
parameter_list|()
block|{
return|return
name|originalRoot
return|;
block|}
comment|/**    * Returns the root of the subtree, after the modification and any rebalancing was performed.    */
annotation|@
name|Nullable
DECL|method|getChangedRoot ()
specifier|public
name|N
name|getChangedRoot
parameter_list|()
block|{
return|return
name|changedRoot
return|;
block|}
comment|/**    * Returns the entry in the original subtree with key {@code targetKey}, if any. This should not    * be treated as a subtree, but only as an entry, and no guarantees are made about its children    * when viewed as a subtree.    */
annotation|@
name|Nullable
DECL|method|getOriginalTarget ()
specifier|public
name|N
name|getOriginalTarget
parameter_list|()
block|{
return|return
name|originalTarget
return|;
block|}
comment|/**    * Returns the result of the modification to {@link #getOriginalTarget()}. This should not be    * treated as a subtree, but only as an entry, and no guarantees are made about its children when    * viewed as a subtree.    */
annotation|@
name|Nullable
DECL|method|getChangedTarget ()
specifier|public
name|N
name|getChangedTarget
parameter_list|()
block|{
return|return
name|changedTarget
return|;
block|}
comment|/**    * Returns {@code true} if this mutation represents an identity operation, which is to say, no    * changes were made at all.    */
DECL|method|isIdentity ()
specifier|public
name|boolean
name|isIdentity
parameter_list|()
block|{
return|return
name|originalTarget
operator|==
name|changedTarget
return|;
block|}
comment|/**    * If this mutation was to an immediate child subtree of the specified root on the specified    * side, returns the {@code BstMutationResult} of applying the mutation to the appropriate child    * of the specified root and rebalancing using the specified mutation rule.    */
DECL|method|lift (N liftOriginalRoot, BstSide side, BstNodeFactory<N> nodeFactory, BstBalancePolicy<N> balancePolicy)
specifier|public
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|lift
parameter_list|(
name|N
name|liftOriginalRoot
parameter_list|,
name|BstSide
name|side
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|liftOriginalRoot
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|side
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|identity
argument_list|(
name|targetKey
argument_list|,
name|liftOriginalRoot
argument_list|,
name|originalTarget
argument_list|)
return|;
block|}
name|N
name|resultLeft
init|=
name|liftOriginalRoot
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
decl_stmt|;
name|N
name|resultRight
init|=
name|liftOriginalRoot
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|side
condition|)
block|{
case|case
name|LEFT
case|:
assert|assert
name|originalRoot
operator|==
name|resultLeft
assert|;
name|resultLeft
operator|=
name|changedRoot
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
assert|assert
name|originalRoot
operator|==
name|resultRight
assert|;
name|resultRight
operator|=
name|changedRoot
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
name|N
name|liftChangedRoot
init|=
name|balancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|liftOriginalRoot
argument_list|,
name|resultLeft
argument_list|,
name|resultRight
argument_list|)
decl_stmt|;
return|return
name|mutationResult
argument_list|(
name|targetKey
argument_list|,
name|liftOriginalRoot
argument_list|,
name|liftChangedRoot
argument_list|,
name|originalTarget
argument_list|,
name|changedTarget
argument_list|)
return|;
block|}
block|}
end_class

end_unit

