begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Internal utilities on binary search trees.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstUtilities
specifier|final
class|class
name|BstUtilities
block|{
comment|/**    * Returns the result of removing the minimum element from the specified subtree.    */
DECL|method|extractMin ( N root, BstNodeFactory<N> nodeFactory, BstBalancePolicy<N> balancePolicy)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|extractMin
parameter_list|(
name|N
name|root
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|hasChild
argument_list|(
name|LEFT
argument_list|)
condition|)
block|{
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|subResult
init|=
name|extractMin
argument_list|(
name|root
operator|.
name|getChild
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
return|return
name|subResult
operator|.
name|lift
argument_list|(
name|root
argument_list|,
name|LEFT
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
return|;
block|}
return|return
name|BstMutationResult
operator|.
name|mutationResult
argument_list|(
name|root
operator|.
name|getKey
argument_list|()
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns the result of removing the maximum element from the specified subtree.    */
DECL|method|extractMax ( N root, BstNodeFactory<N> nodeFactory, BstBalancePolicy<N> balancePolicy)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|extractMax
parameter_list|(
name|N
name|root
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|hasChild
argument_list|(
name|RIGHT
argument_list|)
condition|)
block|{
name|BstMutationResult
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|subResult
init|=
name|extractMax
argument_list|(
name|root
operator|.
name|getChild
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
return|return
name|subResult
operator|.
name|lift
argument_list|(
name|root
argument_list|,
name|RIGHT
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
return|;
block|}
return|return
name|BstMutationResult
operator|.
name|mutationResult
argument_list|(
name|root
operator|.
name|getKey
argument_list|()
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Inserts the specified entry into the tree as the minimum entry. Assumes that {@code    * entry.getKey()} is less than the key of all nodes in the subtree {@code root}.    */
DECL|method|insertMin (@ullable N root, N entry, BstNodeFactory<N> nodeFactory, BstBalancePolicy<N> balancePolicy)
specifier|public
specifier|static
parameter_list|<
name|N
extends|extends
name|BstNode
argument_list|<
name|?
argument_list|,
name|N
argument_list|>
parameter_list|>
name|N
name|insertMin
parameter_list|(
annotation|@
name|Nullable
name|N
name|root
parameter_list|,
name|N
name|entry
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
name|nodeFactory
operator|.
name|createLeaf
argument_list|(
name|entry
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|balancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|root
argument_list|,
name|insertMin
argument_list|(
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|entry
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Inserts the specified entry into the tree as the maximum entry. Assumes that {@code    * entry.getKey()} is greater than the key of all nodes in the subtree {@code root}.    */
DECL|method|insertMax (@ullable N root, N entry, BstNodeFactory<N> nodeFactory, BstBalancePolicy<N> balancePolicy)
specifier|public
specifier|static
parameter_list|<
name|N
extends|extends
name|BstNode
argument_list|<
name|?
argument_list|,
name|N
argument_list|>
parameter_list|>
name|N
name|insertMax
parameter_list|(
annotation|@
name|Nullable
name|N
name|root
parameter_list|,
name|N
name|entry
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
name|nodeFactory
operator|.
name|createLeaf
argument_list|(
name|entry
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|balancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|insertMax
argument_list|(
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|,
name|entry
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

