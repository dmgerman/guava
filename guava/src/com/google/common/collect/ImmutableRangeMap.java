begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedLists
operator|.
name|KeyAbsentBehavior
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedLists
operator|.
name|KeyPresentBehavior
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable implementation of {@code IRangeMap}, supporting all query operations efficiently.  *  *<p>Like all {@code IRangeMap} implementations, this supports neither null keys nor null values.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NavigableMap"
argument_list|)
DECL|class|ImmutableRangeMap
specifier|public
specifier|final
class|class
name|ImmutableRangeMap
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|ImmutableRangeMap
name|EMPTY
init|=
operator|new
name|ImmutableRangeMap
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Returns an empty immutable range map.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ()
specifier|public
specifier|static
specifier|final
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
return|return
name|EMPTY
return|;
block|}
comment|/**    * Returns an immutable range map mapping a single range to a single value.    */
DECL|method|of ( Range<K> range, V value)
specifier|public
specifier|static
specifier|final
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|range
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|copyOf ( RangeMap<K, ? extends V> rangeMap)
specifier|public
specifier|static
specifier|final
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
if|if
condition|(
name|rangeMap
operator|instanceof
name|ImmutableRangeMap
condition|)
block|{
return|return
operator|(
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|rangeMap
return|;
block|}
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
init|=
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|rangesBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|V
argument_list|>
name|valuesBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|V
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rangesBuilder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|valuesBuilder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|rangesBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|valuesBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a new builder for an immutable range map.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * A builder for immutable range maps. Overlapping ranges are prohibited.    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|keyRanges
specifier|private
specifier|final
name|RangeSet
argument_list|<
name|K
argument_list|>
name|keyRanges
decl_stmt|;
DECL|field|rangeMap
specifier|private
specifier|final
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMap
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|keyRanges
operator|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
expr_stmt|;
name|this
operator|.
name|rangeMap
operator|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|/**      * Associates the specified range with the specified value.      *      * @throws IllegalArgumentException if {@code range} overlaps with any other ranges inserted      *         into this builder      */
DECL|method|put (Range<K> range, V value)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyRanges
operator|.
name|complement
argument_list|()
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
condition|)
block|{
comment|// it's an error case; we can afford an expensive lookup
for|for
control|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Range
argument_list|<
name|K
argument_list|>
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|isConnected
argument_list|(
name|range
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Overlapping ranges: range "
operator|+
name|range
operator|+
literal|" overlaps with entry "
operator|+
name|entry
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|keyRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|range
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Copies all associations from the specified range map into this builder.      *      * @throws IllegalArgumentException if any of the ranges in {@code rangeMap} overlap with ranges      *         already in this builder      */
DECL|method|putAll (RangeMap<K, ? extends V> rangeMap)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns an {@code ImmutableRangeMap} containing the associations previously added to this      * builder.      */
DECL|method|build ()
specifier|public
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|map
init|=
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|rangesBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|V
argument_list|>
name|valuesBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|V
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rangesBuilder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|valuesBuilder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ImmutableRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|rangesBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|valuesBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|field|ranges
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|ranges
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|values
decl_stmt|;
DECL|method|ImmutableRangeMap (ImmutableList<Range<K>> ranges, ImmutableList<V> values)
name|ImmutableRangeMap
parameter_list|(
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|ranges
parameter_list|,
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|int
name|index
init|=
name|SortedLists
operator|.
name|binarySearch
argument_list|(
name|ranges
argument_list|,
operator|new
name|Function
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Cut
argument_list|<
name|K
argument_list|>
name|apply
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|lowerBound
return|;
block|}
block|}
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|key
argument_list|)
argument_list|,
name|KeyPresentBehavior
operator|.
name|ANY_PRESENT
argument_list|,
name|KeyAbsentBehavior
operator|.
name|NEXT_LOWER
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Range
argument_list|<
name|K
argument_list|>
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|range
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|?
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (Range<K> range, V value)
specifier|public
name|void
name|put
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|putAll (RangeMap<K, V> rangeMap)
specifier|public
name|void
name|putAll
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<K> range)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|asMapOfRanges ()
specifier|public
name|ImmutableMap
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|asMapOfRanges
parameter_list|()
block|{
if|if
condition|(
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
name|Comparator
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|rangeComparator
init|=
operator|new
name|Ordering
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|left
parameter_list|,
name|Range
argument_list|<
name|K
argument_list|>
name|right
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|left
operator|.
name|lowerBound
argument_list|,
name|right
operator|.
name|lowerBound
argument_list|)
operator|.
name|compare
argument_list|(
name|left
operator|.
name|upperBound
argument_list|,
name|right
operator|.
name|upperBound
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|RegularImmutableSortedSet
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|rangeSet
init|=
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|(
name|ranges
argument_list|,
name|rangeComparator
argument_list|)
decl_stmt|;
return|return
operator|new
name|RegularImmutableSortedMap
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|(
name|rangeSet
argument_list|,
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RangeMap
condition|)
block|{
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rangeMap
init|=
operator|(
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|equals
argument_list|(
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

