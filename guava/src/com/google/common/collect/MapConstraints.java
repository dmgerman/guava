begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Factory and utilities pertaining to the {@code MapConstraint} interface.  *  * @see Constraints  * @author Mike Bostock  * @since 3.0  * @deprecated Use {@link Preconditions} for basic checks. In place of  *     constrained maps, we encourage you to check your preconditions  *     explicitly instead of leaving that work to the map implementation.  *     For the specific case of rejecting null, consider {@link ImmutableMap}.  *     This class is scheduled for removal in Guava 20.0.  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
annotation|@
name|Deprecated
DECL|class|MapConstraints
specifier|public
specifier|final
class|class
name|MapConstraints
block|{
DECL|method|MapConstraints ()
specifier|private
name|MapConstraints
parameter_list|()
block|{}
comment|/**    * Returns a constraint that verifies that neither the key nor the value is    * null. If either is null, a {@link NullPointerException} is thrown.    */
DECL|method|notNull ()
specifier|public
specifier|static
name|MapConstraint
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|notNull
parameter_list|()
block|{
return|return
name|NotNullMapConstraint
operator|.
name|INSTANCE
return|;
block|}
comment|// enum singleton pattern
DECL|enum|NotNullMapConstraint
specifier|private
enum|enum
name|NotNullMapConstraint
implements|implements
name|MapConstraint
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|checkKeyValue (Object key, Object value)
specifier|public
name|void
name|checkKeyValue
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Not null"
return|;
block|}
block|}
comment|/**    * Returns a constrained view of the specified map, using the specified    * constraint. Any operations that add new mappings will call the provided    * constraint. However, this method does not verify that existing mappings    * satisfy the constraint.    *    *<p>The returned map is not serializable.    *    * @param map the map to constrain    * @param constraint the constraint that validates added entries    * @return a constrained view of the specified map    */
DECL|method|constrainedMap ( Map<K, V> map, MapConstraint<? super K, ? super V> constraint)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|map
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified multimap, using the specified    * constraint. Any operations that add new mappings will call the provided    * constraint. However, this method does not verify that existing mappings    * satisfy the constraint.    *    *<p>Note that the generated multimap's {@link Multimap#removeAll} and    * {@link Multimap#replaceValues} methods return collections that are not    * constrained.    *    *<p>The returned multimap is not serializable.    *    * @param multimap the multimap to constrain    * @param constraint the constraint that validates added entries    * @return a constrained view of the multimap    */
DECL|method|constrainedMultimap ( Multimap<K, V> multimap, MapConstraint<? super K, ? super V> constraint)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedMultimap
parameter_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified list multimap, using the    * specified constraint. Any operations that add new mappings will call the    * provided constraint. However, this method does not verify that existing    * mappings satisfy the constraint.    *    *<p>Note that the generated multimap's {@link Multimap#removeAll} and    * {@link Multimap#replaceValues} methods return collections that are not    * constrained.    *    *<p>The returned multimap is not serializable.    *    * @param multimap the multimap to constrain    * @param constraint the constraint that validates added entries    * @return a constrained view of the specified multimap    */
DECL|method|constrainedListMultimap ( ListMultimap<K, V> multimap, MapConstraint<? super K, ? super V> constraint)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedListMultimap
parameter_list|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified set multimap, using the    * specified constraint. Any operations that add new mappings will call the    * provided constraint. However, this method does not verify that existing    * mappings satisfy the constraint.    *    *<p>Note that the generated multimap's {@link Multimap#removeAll} and    * {@link Multimap#replaceValues} methods return collections that are not    * constrained.    *<p>The returned multimap is not serializable.    *    * @param multimap the multimap to constrain    * @param constraint the constraint that validates added entries    * @return a constrained view of the specified multimap    */
DECL|method|constrainedSetMultimap ( SetMultimap<K, V> multimap, MapConstraint<? super K, ? super V> constraint)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedSetMultimap
parameter_list|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified sorted-set multimap, using the    * specified constraint. Any operations that add new mappings will call the    * provided constraint. However, this method does not verify that existing    * mappings satisfy the constraint.    *    *<p>Note that the generated multimap's {@link Multimap#removeAll} and    * {@link Multimap#replaceValues} methods return collections that are not    * constrained.    *<p>The returned multimap is not serializable.    *    * @param multimap the multimap to constrain    * @param constraint the constraint that validates added entries    * @return a constrained view of the specified multimap    */
DECL|method|constrainedSortedSetMultimap ( SortedSetMultimap<K, V> multimap, MapConstraint<? super K, ? super V> constraint)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedSortedSetMultimap
parameter_list|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedSortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified entry, using the specified    * constraint. The {@link Entry#setValue} operation will be verified with the    * constraint.    *    * @param entry the entry to constrain    * @param constraint the constraint for the entry    * @return a constrained view of the specified entry    */
DECL|method|constrainedEntry ( final Entry<K, V> entry, final MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedEntry
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|,
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
return|return
operator|new
name|ForwardingMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a constrained view of the specified {@code asMap} entry, using the    * specified constraint. The {@link Entry#setValue} operation will be verified    * with the constraint, and the collection returned by {@link Entry#getValue}    * will be similarly constrained.    *    * @param entry the {@code asMap} entry to constrain    * @param constraint the constraint for the entry    * @return a constrained view of the specified entry    */
DECL|method|constrainedAsMapEntry ( final Entry<K, Collection<V>> entry, final MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|constrainedAsMapEntry
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
parameter_list|,
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
return|return
operator|new
name|ForwardingMapEntry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|Constraints
operator|.
name|constrainedTypePreservingCollection
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|Constraint
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|checkElement
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a constrained view of the specified set of {@code asMap} entries,    * using the specified constraint. The {@link Entry#setValue} operation will    * be verified with the constraint, and the collection returned by {@link    * Entry#getValue} will be similarly constrained. The {@code add} and {@code    * addAll} operations simply forward to the underlying set, which throws an    * {@link UnsupportedOperationException} per the multimap specification.    *    * @param entries the entries to constrain    * @param constraint the constraint for the entries    * @return a constrained view of the entries    */
DECL|method|constrainedAsMapEntries ( Set<Entry<K, Collection<V>>> entries, MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|constrainedAsMapEntries
parameter_list|(
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedAsMapEntries
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entries
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified collection (or set) of entries,    * using the specified constraint. The {@link Entry#setValue} operation will    * be verified with the constraint, along with add operations on the returned    * collection. The {@code add} and {@code addAll} operations simply forward to    * the underlying collection, which throws an {@link    * UnsupportedOperationException} per the map and multimap specification.    *    * @param entries the entries to constrain    * @param constraint the constraint for the entries    * @return a constrained view of the specified entries    */
DECL|method|constrainedEntries ( Collection<Entry<K, V>> entries, MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|constrainedEntries
parameter_list|(
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|instanceof
name|Set
condition|)
block|{
return|return
name|constrainedEntrySet
argument_list|(
operator|(
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
operator|)
name|entries
argument_list|,
name|constraint
argument_list|)
return|;
block|}
return|return
operator|new
name|ConstrainedEntries
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entries
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/**    * Returns a constrained view of the specified set of entries, using the    * specified constraint. The {@link Entry#setValue} operation will be verified    * with the constraint, along with add operations on the returned set. The    * {@code add} and {@code addAll} operations simply forward to the underlying    * set, which throws an {@link UnsupportedOperationException} per the map and    * multimap specification.    *    *<p>The returned multimap is not serializable.    *    * @param entries the entries to constrain    * @param constraint the constraint for the entries    * @return a constrained view of the specified entries    */
DECL|method|constrainedEntrySet ( Set<Entry<K, V>> entries, MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|constrainedEntrySet
parameter_list|(
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entries
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/** @see MapConstraints#constrainedMap */
DECL|class|ConstrainedMap
specifier|static
class|class
name|ConstrainedMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
DECL|field|constraint
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
decl_stmt|;
DECL|field|entrySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
DECL|method|ConstrainedMap (Map<K, V> delegate, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|checkNotNull
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|entrySet
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|result
operator|=
name|constrainedEntrySet
argument_list|(
name|delegate
operator|.
name|entrySet
argument_list|()
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
comment|// TODO(kak): Remove this?
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|delegate
operator|.
name|putAll
argument_list|(
name|checkMap
argument_list|(
name|map
argument_list|,
name|constraint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns a constrained view of the specified bimap, using the specified    * constraint. Any operations that modify the bimap will have the associated    * keys and values verified with the constraint.    *    *<p>The returned bimap is not serializable.    *    * @param map the bimap to constrain    * @param constraint the constraint that validates added entries    * @return a constrained view of the specified bimap    */
DECL|method|constrainedBiMap ( BiMap<K, V> map, MapConstraint<? super K, ? super V> constraint)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constrainedBiMap
parameter_list|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
return|return
operator|new
name|ConstrainedBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|map
argument_list|,
literal|null
argument_list|,
name|constraint
argument_list|)
return|;
block|}
comment|/** @see MapConstraints#constrainedBiMap */
DECL|class|ConstrainedBiMap
specifier|private
specifier|static
class|class
name|ConstrainedBiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ConstrainedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/*      * We could switch to racy single-check lazy init and remove volatile, but      * there's a downside. That's because this field is also written in the      * constructor. Without volatile, the constructor's write of the existing      * inverse BiMap could occur after inverse()'s read of the field's initial      * null value, leading inverse() to overwrite the existing inverse with a      * doubly indirect version. This wouldn't be catastrophic, but it's      * something to keep in mind if we make the change.      *      * Note that UnmodifiableBiMap *does* use racy single-check lazy init.      * TODO(cpovirk): pick one and standardize      */
annotation|@
name|RetainedWith
DECL|field|inverse
specifier|volatile
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
decl_stmt|;
DECL|method|ConstrainedBiMap ( BiMap<K, V> delegate, @Nullable BiMap<V, K> inverse, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedBiMap
parameter_list|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
name|inverse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|forcePut (K key, V value)
specifier|public
name|V
name|forcePut
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|delegate
argument_list|()
operator|.
name|forcePut
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
if|if
condition|(
name|inverse
operator|==
literal|null
condition|)
block|{
name|inverse
operator|=
operator|new
name|ConstrainedBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|,
name|this
argument_list|,
operator|new
name|InverseConstraint
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|(
name|constraint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|inverse
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
block|}
comment|/** @see MapConstraints#constrainedBiMap */
DECL|class|InverseConstraint
specifier|private
specifier|static
class|class
name|InverseConstraint
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|MapConstraint
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|constraint
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|V
argument_list|,
name|?
super|super
name|K
argument_list|>
name|constraint
decl_stmt|;
DECL|method|InverseConstraint (MapConstraint<? super V, ? super K> constraint)
specifier|public
name|InverseConstraint
parameter_list|(
name|MapConstraint
argument_list|<
name|?
super|super
name|V
argument_list|,
name|?
super|super
name|K
argument_list|>
name|constraint
parameter_list|)
block|{
name|this
operator|.
name|constraint
operator|=
name|checkNotNull
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkKeyValue (K key, V value)
specifier|public
name|void
name|checkKeyValue
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|value
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @see MapConstraints#constrainedMultimap */
DECL|class|ConstrainedMultimap
specifier|private
specifier|static
class|class
name|ConstrainedMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|constraint
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
decl_stmt|;
DECL|field|delegate
specifier|final
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
DECL|field|entries
specifier|transient
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
decl_stmt|;
DECL|field|asMap
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
decl_stmt|;
DECL|method|ConstrainedMultimap ( Multimap<K, V> delegate, MapConstraint<? super K, ? super V> constraint)
specifier|public
name|ConstrainedMultimap
parameter_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|checkNotNull
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|result
init|=
name|asMap
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMapDelegate
init|=
name|delegate
operator|.
name|asMap
argument_list|()
decl_stmt|;
annotation|@
name|WeakOuter
class|class
name|AsMap
extends|extends
name|ForwardingMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|asMapDelegate
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|entrySet
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|result
operator|=
name|constrainedAsMapEntries
argument_list|(
name|asMapDelegate
operator|.
name|entrySet
argument_list|()
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
try|try
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|ConstrainedMultimap
operator|.
name|this
operator|.
name|get
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
return|return
name|collection
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|collection
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// key wasn't a K
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|()
block|{
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|result
init|=
name|values
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|result
operator|=
operator|new
name|ConstrainedAsMapValues
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
name|asMap
operator|=
name|result
operator|=
operator|new
name|AsMap
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|entries
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|entries
operator|=
name|result
operator|=
name|constrainedEntries
argument_list|(
name|delegate
operator|.
name|entries
argument_list|()
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|get (final K key)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
return|return
name|Constraints
operator|.
name|constrainedTypePreservingCollection
argument_list|(
name|delegate
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|Constraint
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|checkElement
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|boolean
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (K key, Iterable<? extends V> values)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|putAll
argument_list|(
name|key
argument_list|,
name|checkValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|,
name|constraint
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (Multimap<? extends K, ? extends V> multimap)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|multimap
operator|.
name|entries
argument_list|()
control|)
block|{
name|changed
operator||=
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|checkValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|,
name|constraint
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** @see ConstrainedMultimap#asMap */
DECL|class|ConstrainedAsMapValues
specifier|private
specifier|static
class|class
name|ConstrainedAsMapValues
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingCollection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|field|delegate
specifier|final
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
decl_stmt|;
DECL|field|entrySet
specifier|final
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
comment|/**      * @param entrySet map entries, linking each key with its corresponding      *     values, that already enforce the constraint      */
DECL|method|ConstrainedAsMapValues ( Collection<Collection<V>> delegate, Set<Entry<K, Collection<V>>> entrySet)
name|ConstrainedAsMapValues
parameter_list|(
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|,
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|entrySet
operator|=
name|entrySet
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|entrySet
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|standardToArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toArray (T[] array)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
return|return
name|standardToArray
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|standardContains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardContainsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|standardRemove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRemoveAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRetainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
comment|/** @see MapConstraints#constrainedEntries */
DECL|class|ConstrainedEntries
specifier|private
specifier|static
class|class
name|ConstrainedEntries
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|constraint
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
decl_stmt|;
DECL|field|entries
specifier|final
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
decl_stmt|;
DECL|method|ConstrainedEntries ( Collection<Entry<K, V>> entries, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedEntries
parameter_list|(
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TransformedIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|entries
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|transform
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|from
parameter_list|)
block|{
return|return
name|constrainedEntry
argument_list|(
name|from
argument_list|,
name|constraint
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// See Collections.CheckedMap.CheckedEntrySet for details on attacks.
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|standardToArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toArray (T[] array)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
return|return
name|standardToArray
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|containsEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardContainsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|removeEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRemoveAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRetainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
comment|/** @see MapConstraints#constrainedEntrySet */
DECL|class|ConstrainedEntrySet
specifier|static
class|class
name|ConstrainedEntrySet
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ConstrainedEntries
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|ConstrainedEntrySet (Set<Entry<K, V>> entries, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedEntrySet
parameter_list|(
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|super
argument_list|(
name|entries
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
comment|// See Collections.CheckedMap.CheckedEntrySet for details on attacks.
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|equalsImpl
argument_list|(
name|this
argument_list|,
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|hashCodeImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/** @see MapConstraints#constrainedAsMapEntries */
DECL|class|ConstrainedAsMapEntries
specifier|static
class|class
name|ConstrainedAsMapEntries
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|field|constraint
specifier|private
specifier|final
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entries
decl_stmt|;
DECL|method|ConstrainedAsMapEntries ( Set<Entry<K, Collection<V>>> entries, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedAsMapEntries
parameter_list|(
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TransformedIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|entries
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|transform
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|from
parameter_list|)
block|{
return|return
name|constrainedAsMapEntry
argument_list|(
name|from
argument_list|,
name|constraint
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// See Collections.CheckedMap.CheckedEntrySet for details on attacks.
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|standardToArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toArray (T[] array)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
return|return
name|standardToArray
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|containsEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardContainsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|standardEquals
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|standardHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|removeEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRemoveAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRetainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
DECL|class|ConstrainedListMultimap
specifier|private
specifier|static
class|class
name|ConstrainedListMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ConstrainedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ConstrainedListMultimap ( ListMultimap<K, V> delegate, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedListMultimap
parameter_list|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Object key)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
DECL|class|ConstrainedSetMultimap
specifier|private
specifier|static
class|class
name|ConstrainedSetMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ConstrainedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ConstrainedSetMultimap ( SetMultimap<K, V> delegate, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedSetMultimap
parameter_list|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
operator|(
name|Set
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
return|return
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
operator|)
name|super
operator|.
name|entries
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Object key)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|Set
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|(
name|Set
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
DECL|class|ConstrainedSortedSetMultimap
specifier|private
specifier|static
class|class
name|ConstrainedSortedSetMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ConstrainedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ConstrainedSortedSetMultimap ( SortedSetMultimap<K, V> delegate, MapConstraint<? super K, ? super V> constraint)
name|ConstrainedSortedSetMultimap
parameter_list|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|constraint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
operator|(
name|SortedSet
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Object key)
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|SortedSet
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|(
name|SortedSet
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|valueComparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|()
block|{
return|return
operator|(
operator|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|delegate
argument_list|()
operator|)
operator|.
name|valueComparator
argument_list|()
return|;
block|}
block|}
DECL|method|checkValues ( K key, Iterable<? extends V> values, MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Collection
argument_list|<
name|V
argument_list|>
name|checkValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|copy
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|V
name|value
range|:
name|copy
control|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
DECL|method|checkMap ( Map<? extends K, ? extends V> map, MapConstraint<? super K, ? super V> constraint)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|checkMap
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|,
name|MapConstraint
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|constraint
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|map
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|copy
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|constraint
operator|.
name|checkKeyValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
block|}
end_class

end_unit

