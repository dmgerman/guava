begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkEntryNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_comment
comment|/**  * Implementation of {@code Entry} for {@link ImmutableMap} that adds extra methods to traverse hash  * buckets for the key and the value. This allows reuse in {@link RegularImmutableMap} and {@link  * RegularImmutableBiMap}, which don't have to recopy the entries created by their {@code Builder}  * implementations.  *  *<p>This base implementation has no key or value pointers, so instances of ImmutableMapEntry (but  * not its subclasses) can be reused when copied from one ImmutableMap to another.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
comment|// unnecessary
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|ImmutableMapEntry
class|class
name|ImmutableMapEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Creates an {@code ImmutableMapEntry} array to hold parameterized entries. The result must never    * be upcast back to ImmutableMapEntry[] (or Object[], etc.), or allowed to escape the class.    *    *<p>The returned array has all its elements set to their initial null values. However, we don't    * declare it as {@code @Nullable ImmutableMapEntry[]} because our checker doesn't require newly    * created arrays to have a {@code @Nullable} element type even when they're created directly with    * {@code new ImmutableMapEntry[...]}, so it seems silly to insist on that only here.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Safe as long as the javadocs are followed
DECL|method|createEntryArray (int size)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createEntryArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|ImmutableMapEntry
index|[
name|size
index|]
return|;
block|}
DECL|method|ImmutableMapEntry (K key, V value)
name|ImmutableMapEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableMapEntry (ImmutableMapEntry<K, V> contents)
name|ImmutableMapEntry
parameter_list|(
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|contents
parameter_list|)
block|{
name|super
argument_list|(
name|contents
operator|.
name|getKey
argument_list|()
argument_list|,
name|contents
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// null check would be redundant
block|}
annotation|@
name|CheckForNull
DECL|method|getNextInKeyBucket ()
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInKeyBucket
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
DECL|method|getNextInValueBucket ()
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInValueBucket
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Returns true if this entry has no bucket links and can safely be reused as a terminal entry in    * a bucket in another map.    */
DECL|method|isReusable ()
name|boolean
name|isReusable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|NonTerminalImmutableMapEntry
specifier|static
class|class
name|NonTerminalImmutableMapEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/*      * Yes, we sometimes set nextInKeyBucket to null, even for this "non-terminal" entry. We don't      * do that with a plain NonTerminalImmutableMapEntry, but we do do it with the BiMap-specific      * subclass below. That's because the Entry might be non-terminal in the key bucket but terminal      * in the value bucket (or vice versa).      */
DECL|field|nextInKeyBucket
annotation|@
name|CheckForNull
specifier|private
specifier|final
specifier|transient
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInKeyBucket
decl_stmt|;
DECL|method|NonTerminalImmutableMapEntry ( K key, V value, @CheckForNull ImmutableMapEntry<K, V> nextInKeyBucket)
name|NonTerminalImmutableMapEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
annotation|@
name|CheckForNull
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInKeyBucket
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextInKeyBucket
operator|=
name|nextInKeyBucket
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getNextInKeyBucket ()
specifier|final
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInKeyBucket
parameter_list|()
block|{
return|return
name|nextInKeyBucket
return|;
block|}
annotation|@
name|Override
DECL|method|isReusable ()
specifier|final
name|boolean
name|isReusable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|NonTerminalImmutableBiMapEntry
specifier|static
specifier|final
class|class
name|NonTerminalImmutableBiMapEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|NonTerminalImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|nextInValueBucket
annotation|@
name|CheckForNull
specifier|private
specifier|final
specifier|transient
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInValueBucket
decl_stmt|;
DECL|method|NonTerminalImmutableBiMapEntry ( K key, V value, @CheckForNull ImmutableMapEntry<K, V> nextInKeyBucket, @CheckForNull ImmutableMapEntry<K, V> nextInValueBucket)
name|NonTerminalImmutableBiMapEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
annotation|@
name|CheckForNull
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInKeyBucket
parameter_list|,
annotation|@
name|CheckForNull
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextInValueBucket
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|nextInKeyBucket
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextInValueBucket
operator|=
name|nextInValueBucket
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getNextInValueBucket ()
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInValueBucket
parameter_list|()
block|{
return|return
name|nextInValueBucket
return|;
block|}
block|}
block|}
end_class

end_unit

