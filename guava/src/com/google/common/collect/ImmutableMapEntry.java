begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkEntryNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Implementation of {@code Map.Entry} for {@link ImmutableMap} that adds extra methods to traverse  * hash buckets for the key and the value. This allows reuse in {@link RegularImmutableMap} and  * {@link RegularImmutableBiMap}, which don't have to recopy the entries created by their  * {@code Builder} implementations.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unnecessary"
argument_list|)
DECL|class|ImmutableMapEntry
specifier|abstract
class|class
name|ImmutableMapEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ImmutableMapEntry (K key, V value)
name|ImmutableMapEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableMapEntry (ImmutableMapEntry<K, V> contents)
name|ImmutableMapEntry
parameter_list|(
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|contents
parameter_list|)
block|{
name|super
argument_list|(
name|contents
operator|.
name|getKey
argument_list|()
argument_list|,
name|contents
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// null check would be redundant
block|}
annotation|@
name|Nullable
DECL|method|getNextInKeyBucket ()
specifier|abstract
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInKeyBucket
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|getNextInValueBucket ()
specifier|abstract
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInValueBucket
parameter_list|()
function_decl|;
DECL|class|TerminalEntry
specifier|static
specifier|final
class|class
name|TerminalEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|TerminalEntry (ImmutableMapEntry<K, V> contents)
name|TerminalEntry
parameter_list|(
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|contents
parameter_list|)
block|{
name|super
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
DECL|method|TerminalEntry (K key, V value)
name|TerminalEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getNextInKeyBucket ()
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInKeyBucket
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getNextInValueBucket ()
name|ImmutableMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextInValueBucket
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

