begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_comment
comment|/**  * A rule for a local mutation to a binary search tree, that changes at most one entry. In addition  * to specifying how it modifies a particular entry via a {@code BstModifier}, it specifies a  * {@link BstBalancePolicy} for rebalancing the tree after the modification is performed and a  * {@link BstNodeFactory} for constructing newly rebalanced nodes.  *  * @author Louis Wasserman  * @param<K> The key type of the nodes in binary search trees that this rule can modify.  * @param<N> The type of the nodes in binary search trees that this rule can modify.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstMutationRule
specifier|final
class|class
name|BstMutationRule
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
parameter_list|<
name|K
parameter_list|,
name|N
parameter_list|>
parameter_list|>
block|{
comment|/**    * Constructs a {@code BstMutationRule} with the specified modifier, balance policy, and node    * factory.    */
DECL|method|createRule ( BstModifier<K, N> modifier, BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|BstMutationRule
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|createRule
parameter_list|(
name|BstModifier
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|modifier
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|)
block|{
return|return
operator|new
name|BstMutationRule
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
return|;
block|}
DECL|field|modifier
specifier|private
specifier|final
name|BstModifier
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|modifier
decl_stmt|;
DECL|field|balancePolicy
specifier|private
specifier|final
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
decl_stmt|;
DECL|field|nodeFactory
specifier|private
specifier|final
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
decl_stmt|;
DECL|method|BstMutationRule (BstModifier<K, N> modifier, BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory)
specifier|private
name|BstMutationRule
parameter_list|(
name|BstModifier
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|modifier
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|)
block|{
name|this
operator|.
name|balancePolicy
operator|=
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeFactory
operator|=
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|checkNotNull
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the {@link BstModifier} that specifies the change to a targeted entry in a binary    * search tree.    */
DECL|method|getModifier ()
specifier|public
name|BstModifier
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
name|getModifier
parameter_list|()
block|{
return|return
name|modifier
return|;
block|}
comment|/**    * Returns the policy used to rebalance nodes in the tree after this modification has been    * performed.    */
DECL|method|getBalancePolicy ()
specifier|public
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|getBalancePolicy
parameter_list|()
block|{
return|return
name|balancePolicy
return|;
block|}
comment|/**    * Returns the node factory used to create new nodes in the tree after this modification has been    * performed.    */
DECL|method|getNodeFactory ()
specifier|public
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|getNodeFactory
parameter_list|()
block|{
return|return
name|nodeFactory
return|;
block|}
block|}
end_class

end_unit

