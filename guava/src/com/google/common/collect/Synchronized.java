begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Synchronized collection views. The returned synchronized collection views are serializable if the  * backing collection and the mutex are serializable.  *  *<p>If {@code null} is passed as the {@code mutex} parameter to any of this class's top-level  * methods or inner class constructors, the created object uses itself as the synchronization mutex.  *  *<p>This class should be used by other collection classes only.  *  * @author Mike Bostock  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|ElementTypesAreNonnullByDefault
comment|/*  * I have decided not to bother adding @ParametricNullness annotations in this class. Adding them is  * a lot of busy work, and the annotation matters only when the APIs to be annotated are visible to  * Kotlin code. In this class, nothing is publicly visible (nor exposed indirectly through a  * publicly visible subclass), and I doubt any of our current or future Kotlin extensions for the  * package will refer to the class. Plus, @ParametricNullness is only a temporary workaround,  * anyway, so we just need to get by without the annotations here until Kotlin better understands  * our other nullness annotations.  */
DECL|class|Synchronized
specifier|final
class|class
name|Synchronized
block|{
DECL|method|Synchronized ()
specifier|private
name|Synchronized
parameter_list|()
block|{}
DECL|class|SynchronizedObject
specifier|static
class|class
name|SynchronizedObject
implements|implements
name|Serializable
block|{
DECL|field|delegate
specifier|final
name|Object
name|delegate
decl_stmt|;
DECL|field|mutex
specifier|final
name|Object
name|mutex
decl_stmt|;
DECL|method|SynchronizedObject (Object delegate, @CheckForNull Object mutex)
name|SynchronizedObject
parameter_list|(
name|Object
name|delegate
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutex
operator|=
operator|(
name|mutex
operator|==
literal|null
operator|)
condition|?
name|this
else|:
name|mutex
expr_stmt|;
block|}
DECL|method|delegate ()
name|Object
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
comment|// No equals and hashCode; see ForwardingObject for details.
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|// Serialization invokes writeObject only when it's private.
comment|// The SynchronizedObject subclasses don't need a writeObject method since
comment|// they don't contain any non-transient member variables, while the
comment|// following writeObject() handles the SynchronizedObject members.
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectOutputStream
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// not needed in emulated source
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|collection ( Collection<E> collection, @CheckForNull Object mutex)
specifier|private
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
argument_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
argument_list|(
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|class|SynchronizedCollection
specifier|static
name|class
name|SynchronizedCollection
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedObject
expr|implements
name|Collection
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedCollection (Collection<E> delegate, @CheckForNull Object mutex)
specifier|private
name|SynchronizedCollection
argument_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
DECL|method|delegate ()
name|Collection
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|add (E e)
specifier|public
name|boolean
name|add
argument_list|(
name|E
name|e
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|addAll (Collection<? extends E> c)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|contains (@heckForNull Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
comment|// manually synchronized
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|spliterator
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|stream ()
specifier|public
name|Stream
argument_list|<
name|E
argument_list|>
name|stream
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|stream
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|parallelStream ()
specifier|public
name|Stream
argument_list|<
name|E
argument_list|>
name|parallelStream
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|parallelStream
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|forEach (Consumer<? super E> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|action
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (@heckForNull Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeIf (Predicate<? super E> filter)
specifier|public
name|boolean
name|removeIf
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|E
argument_list|>
name|filter
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeIf
argument_list|(
name|filter
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|toArray
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
block|}
end_function

begin_annotation
annotation|@
name|Override
end_annotation

begin_annotation
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
end_annotation

begin_comment
comment|// b/192354773 in our checker affects toArray declarations
end_comment

begin_expr_stmt
DECL|method|toArray (T[] a)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|a
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|}      private
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    @
name|VisibleForTesting
DECL|method|set (Set<E> set, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Set
argument_list|<
name|E
argument_list|>
name|set
argument_list|(
name|Set
argument_list|<
name|E
argument_list|>
name|set
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedSet
specifier|static
name|class
name|SynchronizedSet
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
expr|implements
name|Set
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedSet (Set<E> delegate, @CheckForNull Object mutex)
name|SynchronizedSet
argument_list|(
name|Set
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|Set
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Set
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|equals (@heckForNull Object o)
specifier|public
name|boolean
name|equals
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|o
argument_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    private
DECL|method|sortedSet ( SortedSet<E> set, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|sortedSet
argument_list|(
name|SortedSet
argument_list|<
name|E
argument_list|>
name|set
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedSortedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedSortedSet
specifier|static
name|class
name|SynchronizedSortedSet
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedSet
argument_list|<
name|E
argument_list|>
expr|implements
name|SortedSet
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedSortedSet (SortedSet<E> delegate, @CheckForNull Object mutex)
name|SynchronizedSortedSet
argument_list|(
name|SortedSet
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|SortedSet
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|SortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
expr|@
name|CheckForNull
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|subSet (E fromElement, E toElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|subSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|E
name|toElement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|subSet
argument_list|(
name|fromElement
argument_list|,
name|toElement
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headSet (E toElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|headSet
parameter_list|(
name|E
name|toElement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|headSet
argument_list|(
name|toElement
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailSet (E fromElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|tailSet
parameter_list|(
name|E
name|fromElement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailSet
argument_list|(
name|fromElement
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|first ()
specifier|public
name|E
name|first
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|last ()
specifier|public
name|E
name|last
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|last
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    private
DECL|method|list ( List<E> list, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|List
argument_list|<
name|E
argument_list|>
name|list
argument_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|(
name|list
operator|instanceof
name|RandomAccess
operator|)
operator|?
operator|new
name|SynchronizedRandomAccessList
argument_list|<
name|E
argument_list|>
argument_list|(
name|list
argument_list|,
name|mutex
argument_list|)
operator|:
operator|new
name|SynchronizedList
argument_list|<
name|E
argument_list|>
argument_list|(
name|list
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedList
specifier|private
specifier|static
name|class
name|SynchronizedList
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
expr|implements
name|List
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedList (List<E> delegate, @CheckForNull Object mutex)
name|SynchronizedList
argument_list|(
name|List
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|List
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|List
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|add (int index, E element)
specifier|public
name|void
name|add
argument_list|(
name|int
name|index
argument_list|,
name|E
name|element
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|addAll (int index, Collection<? extends E> c)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|indexOf (@heckForNull Object o)
specifier|public
name|int
name|indexOf
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|lastIndexOf (@heckForNull Object o)
specifier|public
name|int
name|lastIndexOf
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listIterator ()
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|listIterator
argument_list|()
return|;
comment|// manually synchronized
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|listIterator (int index)
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
return|;
comment|// manually synchronized
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (int index)
specifier|public
name|E
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|set (int index, E element)
specifier|public
name|E
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceAll (UnaryOperator<E> operator)
specifier|public
name|void
name|replaceAll
parameter_list|(
name|UnaryOperator
argument_list|<
name|E
argument_list|>
name|operator
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|sort (Comparator<? super E> c)
specifier|public
name|void
name|sort
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|sort
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subList (int fromIndex, int toIndex)
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|list
argument_list|(
name|delegate
argument_list|()
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedRandomAccessList
specifier|static
name|class
name|SynchronizedRandomAccessList
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedList
argument_list|<
name|E
argument_list|>
expr|implements
name|RandomAccess
block|{
DECL|method|SynchronizedRandomAccessList (List<E> list, @CheckForNull Object mutex)
name|SynchronizedRandomAccessList
argument_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|list
argument_list|,
name|mutex
argument_list|)
block|;     }
DECL|field|serialVersionUID
specifier|private
specifier|static
name|final
name|long
name|serialVersionUID
operator|=
literal|0
block|;   }
DECL|method|multiset ( Multiset<E> multiset, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
argument_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|multiset
operator|instanceof
name|SynchronizedMultiset
operator|||
name|multiset
operator|instanceof
name|ImmutableMultiset
condition|)
block|{
return|return
name|multiset
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|multiset
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedMultiset
specifier|static
name|class
name|SynchronizedMultiset
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
expr|implements
name|Multiset
argument_list|<
name|E
argument_list|>
block|{     @
DECL|field|elementSet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
block|;     @
DECL|field|entrySet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
block|;
DECL|method|SynchronizedMultiset (Multiset<E> delegate, @CheckForNull Object mutex)
name|SynchronizedMultiset
argument_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|Multiset
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|count (@heckForNull Object o)
specifier|public
name|int
name|count
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|o
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|count
argument_list|(
name|o
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|add (E e, int n)
specifier|public
name|int
name|add
parameter_list|(
name|E
name|e
parameter_list|,
name|int
name|n
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|add
argument_list|(
name|e
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (@heckForNull Object o, int n)
specifier|public
name|int
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|,
name|int
name|n
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setCount (E element, int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|setCount
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setCount (E element, int oldCount, int newCount)
specifier|public
name|boolean
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|setCount
argument_list|(
name|element
argument_list|,
name|oldCount
argument_list|,
name|newCount
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|elementSet
operator|==
literal|null
condition|)
block|{
name|elementSet
operator|=
name|typePreservingSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|elementSet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|typePreservingSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|multimap ( Multimap<K, V> multimap, @CheckForNull Object mutex)
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
argument_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedMultimap
operator|||
name|multimap
operator|instanceof
name|BaseImmutableMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedMultimap
argument_list|<>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedMultimap
specifier|static
name|class
name|SynchronizedMultimap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedObject
expr|implements
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{     @
DECL|field|keySet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
block|;     @
DECL|field|valuesCollection
name|CheckForNull
specifier|transient
name|Collection
argument_list|<
name|V
argument_list|>
name|valuesCollection
block|;     @
DECL|field|entries
name|CheckForNull
specifier|transient
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
block|;     @
DECL|field|asMap
name|CheckForNull
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
block|;     @
DECL|field|keys
name|CheckForNull
specifier|transient
name|Multiset
argument_list|<
name|K
argument_list|>
name|keys
block|;      @
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
DECL|method|delegate ()
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|SynchronizedMultimap (Multimap<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedMultimap
argument_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsKey (@heckForNull Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsEntry (@heckForNull Object key, @CheckForNull Object value)
specifier|public
name|boolean
name|containsEntry
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsEntry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|typePreservingCollection
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|boolean
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|putAll (K key, Iterable<? extends V> values)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|putAll (Multimap<? extends K, ? extends V> multimap)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|multimap
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (@heckForNull Object key, @CheckForNull Object value)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeAll (@heckForNull Object key)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|keySet
operator|==
literal|null
condition|)
block|{
name|keySet
operator|=
name|typePreservingSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|keySet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|valuesCollection
operator|==
literal|null
condition|)
block|{
name|valuesCollection
operator|=
name|collection
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|valuesCollection
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|entries
operator|=
name|typePreservingCollection
argument_list|(
name|delegate
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|forEach (BiConsumer<? super K, ? super V> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|BiConsumer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|asMap
operator|==
literal|null
condition|)
block|{
name|asMap
operator|=
operator|new
name|SynchronizedAsMap
argument_list|<>
argument_list|(
name|delegate
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|asMap
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|keys ()
specifier|public
name|Multiset
argument_list|<
name|K
argument_list|>
name|keys
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|keys
operator|==
literal|null
condition|)
block|{
name|keys
operator|=
name|multiset
argument_list|(
name|delegate
argument_list|()
operator|.
name|keys
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|listMultimap ( ListMultimap<K, V> multimap, @CheckForNull Object mutex)
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|listMultimap
argument_list|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedListMultimap
operator|||
name|multimap
operator|instanceof
name|BaseImmutableMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedListMultimap
argument_list|<>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedListMultimap
specifier|static
name|class
name|SynchronizedListMultimap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedListMultimap (ListMultimap<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedListMultimap
argument_list|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|get (K key)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|get
argument_list|(
name|K
name|key
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|list
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|removeAll (@heckForNull Object key)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|setMultimap ( SetMultimap<K, V> multimap, @CheckForNull Object mutex)
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setMultimap
argument_list|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedSetMultimap
operator|||
name|multimap
operator|instanceof
name|BaseImmutableMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedSetMultimap
argument_list|<>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedSetMultimap
specifier|static
name|class
name|SynchronizedSetMultimap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{     @
DECL|field|entrySet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
block|;
DECL|method|SynchronizedSetMultimap (SetMultimap<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedSetMultimap
argument_list|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|get (K key)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|get
argument_list|(
name|K
name|key
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|removeAll (@heckForNull Object key)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
DECL|method|sortedSetMultimap ( SortedSetMultimap<K, V> multimap, @CheckForNull Object mutex)
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedSetMultimap
argument_list|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedSortedSetMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedSortedSetMultimap
argument_list|<>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedSortedSetMultimap
specifier|static
name|class
name|SynchronizedSortedSetMultimap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedSortedSetMultimap (SortedSetMultimap<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedSortedSetMultimap
argument_list|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|get (K key)
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|get
argument_list|(
name|K
name|key
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|removeAll (@heckForNull Object key)
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|valueComparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|valueComparator
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    private
DECL|method|typePreservingCollection ( Collection<E> collection, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Collection
argument_list|<
name|E
argument_list|>
name|typePreservingCollection
argument_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|collection
operator|instanceof
name|SortedSet
condition|)
block|{
return|return
name|sortedSet
argument_list|(
operator|(
name|SortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|collection
operator|instanceof
name|Set
condition|)
block|{
return|return
name|set
argument_list|(
operator|(
name|Set
argument_list|<
name|E
argument_list|>
operator|)
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_if

begin_if
if|if
condition|(
name|collection
operator|instanceof
name|List
condition|)
block|{
return|return
name|list
argument_list|(
operator|(
name|List
argument_list|<
name|E
argument_list|>
operator|)
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_if

begin_return
return|return
name|collection
argument_list|(
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    private
DECL|method|typePreservingSet ( Set<E> set, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Set
argument_list|<
name|E
argument_list|>
name|typePreservingSet
argument_list|(
name|Set
argument_list|<
name|E
argument_list|>
name|set
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|set
operator|instanceof
name|SortedSet
condition|)
block|{
return|return
name|sortedSet
argument_list|(
operator|(
name|SortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
return|return
name|set
argument_list|(
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_else

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedAsMapEntries
specifier|static
name|class
name|SynchronizedAsMapEntries
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|method|SynchronizedAsMapEntries ( Set<Map.Entry<K, Collection<V>>> delegate, @CheckForNull Object mutex)
name|SynchronizedAsMapEntries
argument_list|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
argument_list|()
block|{
comment|// Must be manually synchronized.
return|return
operator|new
name|TransformedIterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|super
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|transform
parameter_list|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|ForwardingMapEntry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
expr|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|getValue
argument_list|()
block|{
return|return
name|typePreservingCollection
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|};         }       }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// See Collections.CheckedMap.CheckedEntrySet for details on attacks.
end_comment

begin_function
unit|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
comment|/*          * toArrayImpl returns `@Nullable Object[]` rather than `Object[]` but only because it can          * be used with collections that may contain null. This collection never contains nulls, so          * we can treat it as a plain `Object[]`.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
name|Object
index|[]
name|result
init|=
operator|(
name|Object
index|[]
operator|)
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|delegate
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
end_function

begin_annotation
annotation|@
name|Override
end_annotation

begin_annotation
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
end_annotation

begin_comment
comment|// b/192354773 in our checker affects toArray declarations
end_comment

begin_expr_stmt
DECL|method|toArray (T[] array)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|array
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|array
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|contains (@heckForNull Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Maps
operator|.
name|containsEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Collections2
operator|.
name|containsAllImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Sets
operator|.
name|equalsImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (@heckForNull Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Maps
operator|.
name|removeEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Iterators
operator|.
name|removeAll
argument_list|(
name|delegate
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Iterators
operator|.
name|retainAll
argument_list|(
name|delegate
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    @
name|VisibleForTesting
DECL|method|map ( Map<K, V> map, @CheckForNull Object mutex)
specifier|static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
argument_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedMap
argument_list|<>
argument_list|(
name|map
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedMap
specifier|private
specifier|static
name|class
name|SynchronizedMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedObject
expr|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{     @
DECL|field|keySet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
block|;     @
DECL|field|values
name|CheckForNull
specifier|transient
name|Collection
argument_list|<
name|V
argument_list|>
name|values
block|;     @
DECL|field|entrySet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
block|;
DECL|method|SynchronizedMap (Map<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedMap
argument_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
DECL|method|delegate ()
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|containsKey (@heckForNull Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|forEach (BiConsumer<? super K, ? super V> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|BiConsumer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|get (@heckForNull Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|getOrDefault (@heckForNull Object key, @CheckForNull V defaultValue)
specifier|public
name|V
name|getOrDefault
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|,
annotation|@
name|CheckForNull
name|V
name|defaultValue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|keySet
operator|==
literal|null
condition|)
block|{
name|keySet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|keySet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (K key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|putIfAbsent (K key, V value)
specifier|public
name|V
name|putIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replace (K key, V oldValue, V newValue)
specifier|public
name|boolean
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|oldValue
parameter_list|,
name|V
name|newValue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|replace (K key, V value)
specifier|public
name|V
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)
specifier|public
name|V
name|computeIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|mappingFunction
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|mappingFunction
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|computeIfPresent ( K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
specifier|public
name|V
name|computeIfPresent
parameter_list|(
name|K
name|key
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|computeIfPresent
argument_list|(
name|key
argument_list|,
name|remappingFunction
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
specifier|public
name|V
name|compute
parameter_list|(
name|K
name|key
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|compute
argument_list|(
name|key
argument_list|,
name|remappingFunction
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|merge ( K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
specifier|public
name|V
name|merge
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|V
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|merge
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|remappingFunction
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceAll (BiFunction<? super K, ? super V, ? extends V> function)
specifier|public
name|void
name|replaceAll
parameter_list|(
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|function
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|remove (@heckForNull Object key)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (@heckForNull Object key, @CheckForNull Object value)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|collection
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|sortedMap ( SortedMap<K, V> sortedMap, @CheckForNull Object mutex)
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
argument_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedSortedMap
argument_list|<>
argument_list|(
name|sortedMap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedSortedMap
specifier|static
name|class
name|SynchronizedSortedMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedSortedMap (SortedMap<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedSortedMap
argument_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
expr|@
name|CheckForNull
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|firstKey ()
specifier|public
name|K
name|firstKey
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|firstKey
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headMap (K toKey)
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|headMap
argument_list|(
name|toKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|lastKey ()
specifier|public
name|K
name|lastKey
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lastKey
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subMap (K fromKey, K toKey)
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|K
name|toKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|subMap
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailMap (K fromKey)
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailMap
argument_list|(
name|fromKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|biMap ( BiMap<K, V> bimap, @CheckForNull Object mutex)
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
argument_list|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|bimap
operator|instanceof
name|SynchronizedBiMap
operator|||
name|bimap
operator|instanceof
name|ImmutableBiMap
condition|)
block|{
return|return
name|bimap
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedBiMap
argument_list|<>
argument_list|(
name|bimap
argument_list|,
name|mutex
argument_list|,
literal|null
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    @
name|VisibleForTesting
DECL|class|SynchronizedBiMap
specifier|static
name|class
name|SynchronizedBiMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|,
name|Serializable
block|{     @
DECL|field|valueSet
name|CheckForNull
specifier|private
specifier|transient
name|Set
argument_list|<
name|V
argument_list|>
name|valueSet
block|;     @
DECL|field|inverse
name|RetainedWith
expr|@
name|CheckForNull
specifier|private
specifier|transient
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
block|;
DECL|method|SynchronizedBiMap ( BiMap<K, V> delegate, @CheckForNull Object mutex, @CheckForNull BiMap<V, K> inverse)
specifier|private
name|SynchronizedBiMap
argument_list|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|,
annotation|@
name|CheckForNull
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;
name|this
operator|.
name|inverse
operator|=
name|inverse
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|valueSet
operator|==
literal|null
condition|)
block|{
name|valueSet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|valueSet
return|;
end_return

begin_function
unit|}     }
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|forcePut (K key, V value)
specifier|public
name|V
name|forcePut
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|forcePut
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|inverse
operator|==
literal|null
condition|)
block|{
name|inverse
operator|=
operator|new
name|SynchronizedBiMap
argument_list|<>
argument_list|(
name|delegate
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|,
name|mutex
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|inverse
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedAsMap
specifier|static
name|class
name|SynchronizedAsMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
block|{     @
DECL|field|asMapEntrySet
name|CheckForNull
specifier|transient
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|asMapEntrySet
block|;     @
DECL|field|asMapValues
name|CheckForNull
specifier|transient
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMapValues
block|;
DECL|method|SynchronizedAsMap (Map<K, Collection<V>> delegate, @CheckForNull Object mutex)
name|SynchronizedAsMap
argument_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
expr|@
name|CheckForNull
DECL|method|get (@heckForNull Object key)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|key
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|collection
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|typePreservingCollection
argument_list|(
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
expr|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|asMapEntrySet
operator|==
literal|null
condition|)
block|{
name|asMapEntrySet
operator|=
operator|new
name|SynchronizedAsMapEntries
argument_list|<>
argument_list|(
name|delegate
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|asMapEntrySet
return|;
end_return

begin_function
unit|}     }
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|asMapValues
operator|==
literal|null
condition|)
block|{
name|asMapValues
operator|=
operator|new
name|SynchronizedAsMapValues
argument_list|<
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|asMapValues
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object o)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
comment|// values() and its contains() method are both synchronized.
return|return
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    private
DECL|class|SynchronizedAsMapValues
specifier|static
name|class
name|SynchronizedAsMapValues
operator|<
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedCollection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|method|SynchronizedAsMapValues (Collection<Collection<V>> delegate, @CheckForNull Object mutex)
name|SynchronizedAsMapValues
argument_list|(
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|iterator
argument_list|()
block|{
comment|// Must be manually synchronized.
return|return
operator|new
name|TransformedIterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|(
name|super
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|Collection
argument_list|<
name|V
argument_list|>
name|transform
parameter_list|(
name|Collection
argument_list|<
name|V
argument_list|>
name|from
parameter_list|)
block|{
return|return
name|typePreservingCollection
argument_list|(
name|from
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|}      private
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    @
name|GwtIncompatible
comment|// NavigableSet
expr|@
name|VisibleForTesting
DECL|class|SynchronizedNavigableSet
specifier|static
name|class
name|SynchronizedNavigableSet
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedSortedSet
argument_list|<
name|E
argument_list|>
expr|implements
name|NavigableSet
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedNavigableSet (NavigableSet<E> delegate, @CheckForNull Object mutex)
name|SynchronizedNavigableSet
argument_list|(
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|NavigableSet
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
expr|@
name|CheckForNull
DECL|method|ceiling (E e)
specifier|public
name|E
name|ceiling
argument_list|(
name|E
name|e
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|ceiling
argument_list|(
name|e
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|descendingIterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|descendingIterator
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|descendingIterator
argument_list|()
return|;
comment|// manually synchronized
block|}
end_function

begin_decl_stmt
DECL|field|descendingSet
annotation|@
name|CheckForNull
specifier|transient
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|descendingSet
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|descendingSet ()
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|descendingSet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|descendingSet
operator|==
literal|null
condition|)
block|{
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|dS
init|=
name|Synchronized
operator|.
name|navigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|descendingSet
argument_list|()
argument_list|,
name|mutex
argument_list|)
decl_stmt|;
name|descendingSet
operator|=
name|dS
expr_stmt|;
return|return
name|dS
return|;
block|}
return|return
name|descendingSet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|floor (E e)
specifier|public
name|E
name|floor
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|floor
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headSet (E toElement, boolean inclusive)
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|headSet
parameter_list|(
name|E
name|toElement
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Synchronized
operator|.
name|navigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|headSet
argument_list|(
name|toElement
argument_list|,
name|inclusive
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headSet (E toElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|headSet
parameter_list|(
name|E
name|toElement
parameter_list|)
block|{
return|return
name|headSet
argument_list|(
name|toElement
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|higher (E e)
specifier|public
name|E
name|higher
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|higher
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|lower (E e)
specifier|public
name|E
name|lower
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lower
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollFirst ()
specifier|public
name|E
name|pollFirst
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollFirst
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollLast ()
specifier|public
name|E
name|pollLast
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollLast
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subSet ( E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|subSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|E
name|toElement
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Synchronized
operator|.
name|navigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|subSet
argument_list|(
name|fromElement
argument_list|,
name|fromInclusive
argument_list|,
name|toElement
argument_list|,
name|toInclusive
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subSet (E fromElement, E toElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|subSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|E
name|toElement
parameter_list|)
block|{
return|return
name|subSet
argument_list|(
name|fromElement
argument_list|,
literal|true
argument_list|,
name|toElement
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailSet (E fromElement, boolean inclusive)
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|tailSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Synchronized
operator|.
name|navigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailSet
argument_list|(
name|fromElement
argument_list|,
name|inclusive
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailSet (E fromElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|tailSet
parameter_list|(
name|E
name|fromElement
parameter_list|)
block|{
return|return
name|tailSet
argument_list|(
name|fromElement
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    @
name|GwtIncompatible
comment|// NavigableSet
DECL|method|navigableSet ( NavigableSet<E> navigableSet, @CheckForNull Object mutex)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|navigableSet
argument_list|(
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|navigableSet
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedNavigableSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|navigableSet
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_annotation
annotation|@
name|GwtIncompatible
end_annotation

begin_comment
comment|// NavigableSet
end_comment

begin_expr_stmt
DECL|method|navigableSet (NavigableSet<E> navigableSet)
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|navigableSet
argument_list|(
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|navigableSet
argument_list|)
block|{
return|return
name|navigableSet
argument_list|(
name|navigableSet
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_expr_stmt

begin_annotation
annotation|@
name|GwtIncompatible
end_annotation

begin_comment
comment|// NavigableMap
end_comment

begin_expr_stmt
DECL|method|navigableMap ( NavigableMap<K, V> navigableMap)
specifier|static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigableMap
argument_list|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigableMap
argument_list|)
block|{
return|return
name|navigableMap
argument_list|(
name|navigableMap
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_expr_stmt

begin_annotation
annotation|@
name|GwtIncompatible
end_annotation

begin_comment
comment|// NavigableMap
end_comment

begin_expr_stmt
DECL|method|navigableMap ( NavigableMap<K, V> navigableMap, @CheckForNull Object mutex)
specifier|static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigableMap
argument_list|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigableMap
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedNavigableMap
argument_list|<>
argument_list|(
name|navigableMap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_annotation
annotation|@
name|GwtIncompatible
end_annotation

begin_comment
comment|// NavigableMap
end_comment

begin_annotation
annotation|@
name|VisibleForTesting
end_annotation

begin_expr_stmt
DECL|class|SynchronizedNavigableMap
specifier|static
name|class
name|SynchronizedNavigableMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedNavigableMap (NavigableMap<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedNavigableMap
argument_list|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
expr|@
name|CheckForNull
DECL|method|ceilingEntry (K key)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ceilingEntry
argument_list|(
name|K
name|key
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|ceilingEntry
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
annotation|@
name|CheckForNull
DECL|method|ceilingKey (K key)
specifier|public
name|K
name|ceilingKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|ceilingKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|descendingKeySet
annotation|@
name|CheckForNull
specifier|transient
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|descendingKeySet
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|descendingKeySet ()
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|descendingKeySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|descendingKeySet
operator|==
literal|null
condition|)
block|{
return|return
name|descendingKeySet
operator|=
name|Synchronized
operator|.
name|navigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|descendingKeySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
return|return
name|descendingKeySet
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|descendingMap
annotation|@
name|CheckForNull
specifier|transient
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|descendingMap ()
specifier|public
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|descendingMap
operator|==
literal|null
condition|)
block|{
return|return
name|descendingMap
operator|=
name|navigableMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|descendingMap
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
return|return
name|descendingMap
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|firstEntry ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|firstEntry
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|firstEntry
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|floorEntry (K key)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|floorEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|floorEntry
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|floorKey (K key)
specifier|public
name|K
name|floorKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|floorKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headMap (K toKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|navigableMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|headMap
argument_list|(
name|toKey
argument_list|,
name|inclusive
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headMap (K toKey)
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|)
block|{
return|return
name|headMap
argument_list|(
name|toKey
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|higherEntry (K key)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|higherEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|higherEntry
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|higherKey (K key)
specifier|public
name|K
name|higherKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|higherKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|lastEntry ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lastEntry
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|lastEntry
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|lowerEntry (K key)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lowerEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|lowerEntry
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|lowerKey (K key)
specifier|public
name|K
name|lowerKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lowerKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|navigableKeySet
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
DECL|field|navigableKeySet
annotation|@
name|CheckForNull
specifier|transient
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|navigableKeySet
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|navigableKeySet ()
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|navigableKeySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|navigableKeySet
operator|==
literal|null
condition|)
block|{
return|return
name|navigableKeySet
operator|=
name|Synchronized
operator|.
name|navigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|navigableKeySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
return|return
name|navigableKeySet
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollFirstEntry ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|pollFirstEntry
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|pollFirstEntry
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollLastEntry ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|pollLastEntry
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|nullableSynchronizedEntry
argument_list|(
name|delegate
argument_list|()
operator|.
name|pollLastEntry
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subMap ( K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
specifier|public
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|K
name|toKey
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|navigableMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|subMap
argument_list|(
name|fromKey
argument_list|,
name|fromInclusive
argument_list|,
name|toKey
argument_list|,
name|toInclusive
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subMap (K fromKey, K toKey)
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|K
name|toKey
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|fromKey
argument_list|,
literal|true
argument_list|,
name|toKey
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailMap (K fromKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|navigableMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailMap
argument_list|(
name|fromKey
argument_list|,
name|inclusive
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailMap (K fromKey)
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|)
block|{
return|return
name|tailMap
argument_list|(
name|fromKey
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    @
name|GwtIncompatible
comment|// works but is needed only for NavigableMap
expr|@
name|CheckForNull
specifier|private
specifier|static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
DECL|method|nullableSynchronizedEntry ( @heckForNull Map.Entry<K, V> entry, @CheckForNull Object mutex)
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nullableSynchronizedEntry
argument_list|(
annotation|@
name|CheckForNull
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|new
name|SynchronizedEntry
argument_list|<>
argument_list|(
name|entry
argument_list|,
name|mutex
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    @
name|GwtIncompatible
comment|// works but is needed only for NavigableMap
DECL|class|SynchronizedEntry
specifier|private
specifier|static
name|class
name|SynchronizedEntry
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedObject
expr|implements
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedEntry (Map.Entry<K, V> delegate, @CheckForNull Object mutex)
name|SynchronizedEntry
argument_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// guaranteed by the constructor
expr|@
name|Override
DECL|method|delegate ()
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|equals (@heckForNull Object obj)
specifier|public
name|boolean
name|equals
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|obj
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|K
name|getKey
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setValue (V value)
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|queue (Queue<E> queue, @CheckForNull Object mutex)
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Queue
argument_list|<
name|E
argument_list|>
name|queue
argument_list|(
name|Queue
argument_list|<
name|E
argument_list|>
name|queue
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|(
name|queue
operator|instanceof
name|SynchronizedQueue
operator|)
operator|?
name|queue
operator|:
operator|new
name|SynchronizedQueue
argument_list|<
name|E
argument_list|>
argument_list|(
name|queue
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedQueue
specifier|private
specifier|static
name|class
name|SynchronizedQueue
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
expr|implements
name|Queue
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedQueue (Queue<E> delegate, @CheckForNull Object mutex)
name|SynchronizedQueue
argument_list|(
name|Queue
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|Queue
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Queue
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|element ()
specifier|public
name|E
name|element
argument_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|element
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|offer (E e)
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|offer
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|peek ()
specifier|public
name|E
name|peek
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|peek
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|poll ()
specifier|public
name|E
name|poll
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|poll
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|E
name|remove
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
DECL|method|deque (Deque<E> deque, @CheckForNull Object mutex)
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Deque
argument_list|<
name|E
argument_list|>
name|deque
argument_list|(
name|Deque
argument_list|<
name|E
argument_list|>
name|deque
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedDeque
argument_list|<
name|E
argument_list|>
argument_list|(
name|deque
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedDeque
specifier|private
specifier|static
name|final
name|class
name|SynchronizedDeque
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedQueue
argument_list|<
name|E
argument_list|>
expr|implements
name|Deque
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedDeque (Deque<E> delegate, @CheckForNull Object mutex)
name|SynchronizedDeque
argument_list|(
name|Deque
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|Override
DECL|method|delegate ()
name|Deque
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Deque
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|addFirst (E e)
specifier|public
name|void
name|addFirst
argument_list|(
name|E
name|e
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|addFirst
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|addLast (E e)
specifier|public
name|void
name|addLast
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|addLast
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|offerFirst (E e)
specifier|public
name|boolean
name|offerFirst
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|offerFirst
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|offerLast (E e)
specifier|public
name|boolean
name|offerLast
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|offerLast
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeFirst ()
specifier|public
name|E
name|removeFirst
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeFirst
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeLast ()
specifier|public
name|E
name|removeLast
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeLast
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollFirst ()
specifier|public
name|E
name|pollFirst
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollFirst
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollLast ()
specifier|public
name|E
name|pollLast
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pollLast
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getFirst ()
specifier|public
name|E
name|getFirst
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|getFirst
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getLast ()
specifier|public
name|E
name|getLast
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|getLast
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|peekFirst ()
specifier|public
name|E
name|peekFirst
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|peekFirst
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|peekLast ()
specifier|public
name|E
name|peekLast
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|peekLast
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeFirstOccurrence (@heckForNull Object o)
specifier|public
name|boolean
name|removeFirstOccurrence
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeFirstOccurrence
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeLastOccurrence (@heckForNull Object o)
specifier|public
name|boolean
name|removeLastOccurrence
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeLastOccurrence
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|push (E e)
specifier|public
name|void
name|push
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|push
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|pop ()
specifier|public
name|E
name|pop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|pop
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|descendingIterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|descendingIterator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|descendingIterator
argument_list|()
return|;
block|}
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|}    static
operator|<
name|R
expr|extends @
name|Nullable
name|Object
operator|,
name|C
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
DECL|method|table (Table<R, C, V> table, @CheckForNull Object mutex)
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|table
argument_list|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|table
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
return|return
operator|new
name|SynchronizedTable
argument_list|<>
argument_list|(
name|table
argument_list|,
name|mutex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
DECL|class|SynchronizedTable
specifier|private
specifier|static
name|final
name|class
name|SynchronizedTable
operator|<
name|R
expr|extends @
name|Nullable
name|Object
operator|,
name|C
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|SynchronizedObject
expr|implements
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedTable (Table<R, C, V> delegate, @CheckForNull Object mutex)
name|SynchronizedTable
argument_list|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|mutex
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
block|;     }
expr|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
expr|@
name|Override
DECL|method|delegate ()
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|contains (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|boolean
name|contains
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
argument_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
argument_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|contains
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|containsRow (@heckForNull Object rowKey)
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsRow
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsColumn (@heckForNull Object columnKey)
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsColumn
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|get (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (R rowKey, C columnKey, V value)
specifier|public
name|V
name|put
parameter_list|(
name|R
name|rowKey
parameter_list|,
name|C
name|columnKey
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|putAll (Table<? extends R, ? extends C, ? extends V> table)
specifier|public
name|void
name|putAll
parameter_list|(
name|Table
argument_list|<
name|?
extends|extends
name|R
argument_list|,
name|?
extends|extends
name|C
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|table
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|remove (@heckForNull Object rowKey, @CheckForNull Object columnKey)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|rowKey
parameter_list|,
annotation|@
name|CheckForNull
name|Object
name|columnKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|row (R rowKey)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|map
argument_list|(
name|delegate
argument_list|()
operator|.
name|row
argument_list|(
name|rowKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|column (C columnKey)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|map
argument_list|(
name|delegate
argument_list|()
operator|.
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|cellSet ()
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellSet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|cellSet
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|rowKeySet ()
specifier|public
name|Set
argument_list|<
name|R
argument_list|>
name|rowKeySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|rowKeySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|columnKeySet ()
specifier|public
name|Set
argument_list|<
name|C
argument_list|>
name|columnKeySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|columnKeySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|collection
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|rowMap ()
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|map
argument_list|(
name|Maps
operator|.
name|transformValues
argument_list|(
name|delegate
argument_list|()
operator|.
name|rowMap
argument_list|()
argument_list|,
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|apply
parameter_list|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|t
parameter_list|)
block|{
return|return
name|map
argument_list|(
name|t
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|columnMap ()
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|map
argument_list|(
name|Maps
operator|.
name|transformValues
argument_list|(
name|delegate
argument_list|()
operator|.
name|columnMap
argument_list|()
argument_list|,
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|apply
parameter_list|(
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|t
parameter_list|)
block|{
return|return
name|map
argument_list|(
name|t
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
end_function

unit|} }
end_unit

