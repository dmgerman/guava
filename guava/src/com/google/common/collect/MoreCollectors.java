begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Collectors not present in {@code java.util.stream.Collectors} that are not otherwise associated  * with a {@code com.google.common} type.  *  * @author Louis Wasserman  * @since 21.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|MoreCollectors
specifier|public
specifier|final
class|class
name|MoreCollectors
block|{
comment|/*    * TODO(lowasser): figure out if we can convert this to a concurrent AtomicReference-based    * collector without breaking j2cl?    */
DECL|field|TO_OPTIONAL
specifier|private
specifier|static
specifier|final
name|Collector
argument_list|<
name|Object
argument_list|,
name|?
argument_list|,
name|Optional
argument_list|<
name|Object
argument_list|>
argument_list|>
name|TO_OPTIONAL
init|=
name|Collector
operator|.
name|of
argument_list|(
name|ToOptionalState
operator|::
operator|new
argument_list|,
name|ToOptionalState
operator|::
name|add
argument_list|,
name|ToOptionalState
operator|::
name|combine
argument_list|,
name|ToOptionalState
operator|::
name|getOptional
argument_list|,
name|Collector
operator|.
name|Characteristics
operator|.
name|UNORDERED
argument_list|)
decl_stmt|;
comment|/**    * A collector that converts a stream of zero or one elements to an {@code Optional}. The returned    * collector throws an {@code IllegalArgumentException} if the stream consists of two or more    * elements, and a {@code NullPointerException} if the stream consists of exactly one element,    * which is null.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toOptional ()
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Collector
argument_list|<
name|T
argument_list|,
name|?
argument_list|,
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
name|toOptional
parameter_list|()
block|{
return|return
operator|(
name|Collector
operator|)
name|TO_OPTIONAL
return|;
block|}
DECL|field|NULL_PLACEHOLDER
specifier|private
specifier|static
specifier|final
name|Object
name|NULL_PLACEHOLDER
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|ONLY_ELEMENT
specifier|private
specifier|static
specifier|final
name|Collector
argument_list|<
name|Object
argument_list|,
name|?
argument_list|,
name|Object
argument_list|>
name|ONLY_ELEMENT
init|=
name|Collector
operator|.
name|of
argument_list|(
name|ToOptionalState
operator|::
operator|new
argument_list|,
parameter_list|(
name|state
parameter_list|,
name|o
parameter_list|)
lambda|->
name|state
operator|.
name|add
argument_list|(
operator|(
name|o
operator|==
literal|null
operator|)
condition|?
name|NULL_PLACEHOLDER
else|:
name|o
argument_list|)
argument_list|,
name|ToOptionalState
operator|::
name|combine
argument_list|,
name|state
lambda|->
block|{
name|Object
name|result
operator|=
name|state
operator|.
name|getElement
argument_list|()
argument_list|;             return
operator|(
name|result
operator|==
name|NULL_PLACEHOLDER
operator|)
condition|?
literal|null
else|:
name|result
argument_list|;
block|}
end_class

begin_operator
operator|,
end_operator

begin_expr_stmt
name|Collector
operator|.
name|Characteristics
operator|.
name|UNORDERED
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
comment|/**    * A collector that takes a stream containing exactly one element and returns that element. The    * returned collector throws an {@code IllegalArgumentException} if the stream consists of two or    * more elements, and a {@code NoSuchElementException} if the stream is empty.    */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|onlyElement ()
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Collector
argument_list|<
name|T
argument_list|,
name|?
argument_list|,
name|T
argument_list|>
name|onlyElement
parameter_list|()
block|{
return|return
operator|(
name|Collector
operator|)
name|ONLY_ELEMENT
return|;
block|}
end_function

begin_comment
comment|/**    * This atrocity is here to let us report several of the elements in the stream if there were more    * than one, not just two.    */
end_comment

begin_class
DECL|class|ToOptionalState
specifier|private
specifier|static
specifier|final
class|class
name|ToOptionalState
block|{
DECL|field|MAX_EXTRAS
specifier|static
specifier|final
name|int
name|MAX_EXTRAS
init|=
literal|4
decl_stmt|;
DECL|field|element
annotation|@
name|Nullable
name|Object
name|element
decl_stmt|;
DECL|field|extras
annotation|@
name|Nullable
name|List
argument_list|<
name|Object
argument_list|>
name|extras
decl_stmt|;
DECL|method|ToOptionalState ()
name|ToOptionalState
parameter_list|()
block|{
name|element
operator|=
literal|null
expr_stmt|;
name|extras
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|multiples (boolean overflow)
name|IllegalArgumentException
name|multiples
parameter_list|(
name|boolean
name|overflow
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"expected one element but was:<"
argument_list|)
operator|.
name|append
argument_list|(
name|element
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|extras
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overflow
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", ..."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|add (Object o)
name|void
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|element
operator|=
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extras
operator|==
literal|null
condition|)
block|{
name|extras
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|MAX_EXTRAS
argument_list|)
expr_stmt|;
name|extras
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extras
operator|.
name|size
argument_list|()
operator|<
name|MAX_EXTRAS
condition|)
block|{
name|extras
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|multiples
argument_list|(
literal|true
argument_list|)
throw|;
block|}
block|}
DECL|method|combine (ToOptionalState other)
name|ToOptionalState
name|combine
parameter_list|(
name|ToOptionalState
name|other
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
return|return
name|other
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|element
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
if|if
condition|(
name|extras
operator|==
literal|null
condition|)
block|{
name|extras
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|extras
operator|.
name|add
argument_list|(
name|other
operator|.
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|extras
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|extras
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|extras
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extras
operator|.
name|size
argument_list|()
operator|>
name|MAX_EXTRAS
condition|)
block|{
name|extras
operator|.
name|subList
argument_list|(
name|MAX_EXTRAS
argument_list|,
name|extras
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
throw|throw
name|multiples
argument_list|(
literal|true
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
block|}
DECL|method|getOptional ()
name|Optional
argument_list|<
name|Object
argument_list|>
name|getOptional
parameter_list|()
block|{
if|if
condition|(
name|extras
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|element
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|multiples
argument_list|(
literal|false
argument_list|)
throw|;
block|}
block|}
DECL|method|getElement ()
name|Object
name|getElement
parameter_list|()
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|extras
operator|==
literal|null
condition|)
block|{
return|return
name|element
return|;
block|}
else|else
block|{
throw|throw
name|multiples
argument_list|(
literal|false
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_constructor
DECL|method|MoreCollectors ()
specifier|private
name|MoreCollectors
parameter_list|()
block|{}
end_constructor

unit|}
end_unit

