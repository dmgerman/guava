begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CompactHashing
operator|.
name|UNSET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Hashing
operator|.
name|smearedHash
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|NullnessCasts
operator|.
name|uncheckedCastNullableTToT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|NullnessCasts
operator|.
name|unsafeNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * CompactHashMap is an implementation of a Map. All optional operations (put and remove) are  * supported. Null keys and values are supported.  *  *<p>{@code containsKey(k)}, {@code put(k, v)} and {@code remove(k)} are all (expected and  * amortized) constant time operations. Expected in the hashtable sense (depends on the hash  * function doing a good job of distributing the elements to the buckets to a distribution not far  * from uniform), and amortized since some operations can trigger a hash table resize.  *  *<p>Unlike {@code java.util.HashMap}, iteration is only proportional to the actual {@code size()},  * which is optimal, and<i>not</i> the size of the internal hashtable, which could be much larger  * than {@code size()}. Furthermore, this structure places significantly reduced load on the garbage  * collector by only using a constant number of internal objects.  *  *<p>If there are no removals, then iteration order for the {@link #entrySet}, {@link #keySet}, and  * {@link #values} views is the same as insertion order. Any removal invalidates any ordering  * guarantees.  *  *<p>This class should not be assumed to be universally superior to {@code java.util.HashMap}.  * Generally speaking, this class reduces object allocation and memory consumption at the price of  * moderately increased constant factors of CPU. Only use this class when there is a specific reason  * to prioritize memory over CPU.  *  * @author Louis Wasserman  * @author Jon Noack  */
end_comment

begin_annotation
annotation|@
name|GwtIncompatible
end_annotation

begin_comment
comment|// not worth using in GWT for now
end_comment

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|CompactHashMap
name|class
name|CompactHashMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|Serializable
block|{
comment|/*    * TODO: Make this a drop-in replacement for j.u. versions, actually drop them in, and test the    * world. Figure out what sort of space-time tradeoff we're actually going to get here with the    * *Map variants. This class is particularly hard to benchmark, because the benefit is not only in    * less allocation, but also having the GC do less work to scan the heap because of fewer    * references, which is particularly hard to quantify.    */
comment|/** Creates an empty {@code CompactHashMap} instance. */
specifier|public
specifier|static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
block|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
DECL|method|create ()
name|CompactHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
argument_list|()
block|{
return|return
operator|new
name|CompactHashMap
argument_list|<>
argument_list|()
return|;
block|}
comment|/**    * Creates a {@code CompactHashMap} instance, with a high enough "initial capacity" that it    *<i>should</i> hold {@code expectedSize} elements without growth.    *    * @param expectedSize the number of elements you expect to add to the returned set    * @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize}    *     elements without resizing    * @throws IllegalArgumentException if {@code expectedSize} is negative    */
specifier|public
specifier|static
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
DECL|method|createWithExpectedSize (int expectedSize)
name|CompactHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createWithExpectedSize
argument_list|(
name|int
name|expectedSize
argument_list|)
block|{
return|return
operator|new
name|CompactHashMap
argument_list|<>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
DECL|field|NOT_FOUND
specifier|private
specifier|static
specifier|final
name|Object
name|NOT_FOUND
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Maximum allowed false positive probability of detecting a hash flooding attack given random    * input.    */
end_comment

begin_decl_stmt
annotation|@
name|VisibleForTesting
argument_list|(       )
DECL|field|HASH_FLOODING_FPP
specifier|static
specifier|final
name|double
name|HASH_FLOODING_FPP
init|=
literal|0.001
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Maximum allowed length of a hash table bucket before falling back to a j.u.LinkedHashMap-based    * implementation. Experimentally determined.    */
end_comment

begin_decl_stmt
DECL|field|MAX_HASH_BUCKET_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_HASH_BUCKET_LENGTH
init|=
literal|9
decl_stmt|;
end_decl_stmt

begin_comment
comment|// The way the `table`, `entries`, `keys`, and `values` arrays work together is as follows.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The `table` array always has a size that is a power of 2. The hashcode of a key in the map
end_comment

begin_comment
comment|// is masked in order to correspond to the current table size. For example, if the table size
end_comment

begin_comment
comment|// is 128 then the mask is 127 == 0x7f, keeping the bottom 7 bits of the hash value.
end_comment

begin_comment
comment|// If a key hashes to 0x89abcdef the mask reduces it to 0x89abcdef& 0x7f == 0x6f. We'll call this
end_comment

begin_comment
comment|// the "short hash".
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The `keys`, `values`, and `entries` arrays always have the same size as each other. They can be
end_comment

begin_comment
comment|// seen as fields of an imaginary `Entry` object like this:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// class Entry {
end_comment

begin_comment
comment|//    int hash;
end_comment

begin_comment
comment|//    Entry next;
end_comment

begin_comment
comment|//    K key;
end_comment

begin_comment
comment|//    V value;
end_comment

begin_comment
comment|// }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The imaginary `hash` and `next` values are combined into a single `int` value in the `entries`
end_comment

begin_comment
comment|// array. The top bits of this value are the remaining bits of the hash value that were not used
end_comment

begin_comment
comment|// in the short hash. We saw that a mask of 0x7f would keep the 7-bit value 0x6f from a full
end_comment

begin_comment
comment|// hashcode of 0x89abcdef. The imaginary `hash` value would then be the remaining top 25 bits,
end_comment

begin_comment
comment|// 0x89abcd80. To this is added (or'd) the `next` value, which is an index within `entries`
end_comment

begin_comment
comment|// (and therefore within `keys` and `values`) of another entry that has the same short hash
end_comment

begin_comment
comment|// value. In our example, it would be another entry for a key whose short hash is also 0x6f.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Essentially, then, `table[h]` gives us the start of a linked list in `entries`, where every
end_comment

begin_comment
comment|// element of the list has the short hash value h.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// A wrinkle here is that the value 0 (called UNSET in the code) is used as the equivalent of a
end_comment

begin_comment
comment|// null pointer. If `table[h] == 0` that means there are no keys in the map whose short hash is h.
end_comment

begin_comment
comment|// If the `next` bits in `entries[i]` are 0 that means there are no further entries for the given
end_comment

begin_comment
comment|// short hash. But 0 is also a valid index in `entries`, so we add 1 to these indices before
end_comment

begin_comment
comment|// putting them in `table` or in `next` bits, and subtract 1 again when we need an index value.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The elements of `keys`, `values`, and `entries` are added sequentially, so that elements 0 to
end_comment

begin_comment
comment|// `size() - 1` are used and remaining elements are not. This makes iteration straightforward.
end_comment

begin_comment
comment|// Removing an entry generally involves moving the last element of each array to where the removed
end_comment

begin_comment
comment|// entry was, and adjusting index links accordingly.
end_comment

begin_comment
comment|/**    * The hashtable object. This can be either:    *    *<ul>    *<li>a byte[], short[], or int[], with size a power of two, created by    *       CompactHashing.createTable, whose values are either    *<ul>    *<li>UNSET, meaning "null pointer"    *<li>one plus an index into the keys, values, and entries arrays    *</ul>    *<li>another java.util.Map delegate implementation. In most modern JDKs, normal java.util hash    *       collections intelligently fall back to a binary search tree if hash table collisions are    *       detected. Rather than going to all the trouble of reimplementing this ourselves, we    *       simply switch over to use the JDK implementation wholesale if probable hash flooding is    *       detected, sacrificing the compactness guarantee in very rare cases in exchange for much    *       more reliable worst-case behavior.    *<li>null, if no entries have yet been added to the map    *</ul>    */
end_comment

begin_decl_stmt
DECL|field|table
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Object
name|table
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Contains the logical entries, in the range of [0, size()). The high bits of each int are the    * part of the smeared hash of the key not covered by the hashtable mask, whereas the low bits are    * the "next" pointer (pointing to the next entry in the bucket chain), which will always be less    * than or equal to the hashtable mask.    *    *<pre>    * hash  = aaaaaaaa    * mask  = 00000fff    * next  = 00000bbb    * entry = aaaaabbb    *</pre>    *    *<p>The pointers in [size(), entries.length) are all "null" (UNSET).    */
end_comment

begin_decl_stmt
DECL|field|entries
annotation|@
name|VisibleForTesting
annotation|@
name|CheckForNull
specifier|transient
name|int
index|[]
name|entries
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * The keys of the entries in the map, in the range of [0, size()). The keys in [size(),    * keys.length) are all {@code null}.    */
end_comment

begin_decl_stmt
DECL|field|keys
annotation|@
name|VisibleForTesting
annotation|@
name|CheckForNull
specifier|transient
annotation|@
name|Nullable
name|Object
index|[]
name|keys
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * The values of the entries in the map, in the range of [0, size()). The values in [size(),    * values.length) are all {@code null}.    */
end_comment

begin_decl_stmt
DECL|field|values
annotation|@
name|VisibleForTesting
annotation|@
name|CheckForNull
specifier|transient
annotation|@
name|Nullable
name|Object
index|[]
name|values
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Keeps track of metadata like the number of hash table bits and modifications of this data    * structure (to make it possible to throw ConcurrentModificationException in the iterator). Note    * that we choose not to make this volatile, so we do less of a "best effort" to track such    * errors, for better performance.    *    *<p>For a new instance, where the arrays above have not yet been allocated, the value of {@code    * metadata} is the size that the arrays should be allocated with. Once the arrays have been    * allocated, the value of {@code metadata} combines the number of bits in the "short hash", in    * its bottom {@value CompactHashing#HASH_TABLE_BITS_MAX_BITS} bits, with a modification count in    * the remaining bits that is used to detect concurrent modification during iteration.    */
end_comment

begin_decl_stmt
DECL|field|metadata
specifier|private
specifier|transient
name|int
name|metadata
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** The number of elements contained in the set. */
end_comment

begin_decl_stmt
DECL|field|size
specifier|private
specifier|transient
name|int
name|size
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Constructs a new empty instance of {@code CompactHashMap}. */
end_comment

begin_expr_stmt
DECL|method|CompactHashMap ()
name|CompactHashMap
argument_list|()
block|{
name|init
argument_list|(
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|)
block|;   }
comment|/**    * Constructs a new instance of {@code CompactHashMap} with the specified capacity.    *    * @param expectedSize the initial capacity of this {@code CompactHashMap}.    */
DECL|method|CompactHashMap (int expectedSize)
name|CompactHashMap
argument_list|(
name|int
name|expectedSize
argument_list|)
block|{
name|init
argument_list|(
name|expectedSize
argument_list|)
block|;   }
comment|/** Pseudoconstructor for serialization support. */
DECL|method|init (int expectedSize)
name|void
name|init
argument_list|(
name|int
name|expectedSize
argument_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expectedSize
operator|>=
literal|0
argument_list|,
literal|"Expected size must be>= 0"
argument_list|)
block|;
comment|// Save expectedSize for use in allocArrays()
name|this
operator|.
name|metadata
operator|=
name|Ints
operator|.
name|constrainToRange
argument_list|(
name|expectedSize
argument_list|,
literal|1
argument_list|,
name|CompactHashing
operator|.
name|MAX_SIZE
argument_list|)
block|;   }
comment|/** Returns whether arrays need to be allocated. */
expr|@
name|VisibleForTesting
DECL|method|needsAllocArrays ()
name|boolean
name|needsAllocArrays
argument_list|()
block|{
return|return
name|table
operator|==
literal|null
return|;
block|}
end_expr_stmt

begin_comment
comment|/** Handle lazy allocation of arrays. */
end_comment

begin_function
annotation|@
name|CanIgnoreReturnValue
DECL|method|allocArrays ()
name|int
name|allocArrays
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|needsAllocArrays
argument_list|()
argument_list|,
literal|"Arrays already allocated"
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
name|metadata
decl_stmt|;
name|int
name|buckets
init|=
name|CompactHashing
operator|.
name|tableSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
name|this
operator|.
name|table
operator|=
name|CompactHashing
operator|.
name|createTable
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
name|setHashTableMask
argument_list|(
name|buckets
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|=
operator|new
name|int
index|[
name|expectedSize
index|]
expr_stmt|;
name|this
operator|.
name|keys
operator|=
operator|new
name|Object
index|[
name|expectedSize
index|]
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|Object
index|[
name|expectedSize
index|]
expr_stmt|;
return|return
name|expectedSize
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|VisibleForTesting
annotation|@
name|CheckForNull
DECL|method|delegateOrNull ()
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegateOrNull
parameter_list|()
block|{
if|if
condition|(
name|table
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|table
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|createHashFloodingResistantDelegate (int tableSize)
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createHashFloodingResistantDelegate
parameter_list|(
name|int
name|tableSize
parameter_list|)
block|{
return|return
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|tableSize
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
annotation|@
name|CanIgnoreReturnValue
DECL|method|convertToHashFloodingResistantImplementation ()
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|convertToHashFloodingResistantImplementation
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newDelegate
init|=
name|createHashFloodingResistantDelegate
argument_list|(
name|hashTableMask
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstEntryIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|getSuccessor
argument_list|(
name|i
argument_list|)
control|)
block|{
name|newDelegate
operator|.
name|put
argument_list|(
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|table
operator|=
name|newDelegate
expr_stmt|;
name|this
operator|.
name|entries
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keys
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
name|incrementModCount
argument_list|()
expr_stmt|;
return|return
name|newDelegate
return|;
block|}
end_function

begin_comment
comment|/** Stores the hash table mask as the number of bits needed to represent an index. */
end_comment

begin_function
DECL|method|setHashTableMask (int mask)
specifier|private
name|void
name|setHashTableMask
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
name|int
name|hashTableBits
init|=
name|Integer
operator|.
name|SIZE
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|mask
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|metadata
argument_list|,
name|hashTableBits
argument_list|,
name|CompactHashing
operator|.
name|HASH_TABLE_BITS_MASK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Gets the hash table mask using the stored number of hash table bits. */
end_comment

begin_function
DECL|method|hashTableMask ()
specifier|private
name|int
name|hashTableMask
parameter_list|()
block|{
return|return
operator|(
literal|1
operator|<<
operator|(
name|metadata
operator|&
name|CompactHashing
operator|.
name|HASH_TABLE_BITS_MASK
operator|)
operator|)
operator|-
literal|1
return|;
block|}
end_function

begin_function
DECL|method|incrementModCount ()
name|void
name|incrementModCount
parameter_list|()
block|{
name|metadata
operator|+=
name|CompactHashing
operator|.
name|MODIFICATION_COUNT_INCREMENT
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Mark an access of the specified entry. Used only in {@code CompactLinkedHashMap} for LRU    * ordering.    */
end_comment

begin_function
DECL|method|accessEntry (int index)
name|void
name|accessEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// no-op by default
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (@arametricNullness K key, @ParametricNullness V value)
specifier|public
name|V
name|put
parameter_list|(
annotation|@
name|ParametricNullness
name|K
name|key
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
name|allocArrays
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
name|int
index|[]
name|entries
init|=
name|requireEntries
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
name|Object
index|[]
name|keys
init|=
name|requireKeys
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
name|Object
index|[]
name|values
init|=
name|requireValues
argument_list|()
decl_stmt|;
name|int
name|newEntryIndex
init|=
name|this
operator|.
name|size
decl_stmt|;
comment|// current size, and pointer to the entry to be appended
name|int
name|newSize
init|=
name|newEntryIndex
operator|+
literal|1
decl_stmt|;
name|int
name|hash
init|=
name|smearedHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|tableIndex
init|=
name|hash
operator|&
name|mask
decl_stmt|;
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|requireTable
argument_list|()
argument_list|,
name|tableIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|UNSET
condition|)
block|{
comment|// uninitialized bucket
if|if
condition|(
name|newSize
operator|>
name|mask
condition|)
block|{
comment|// Resize and add new entry
name|mask
operator|=
name|resizeTable
argument_list|(
name|mask
argument_list|,
name|CompactHashing
operator|.
name|newCapacity
argument_list|(
name|mask
argument_list|)
argument_list|,
name|hash
argument_list|,
name|newEntryIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|requireTable
argument_list|()
argument_list|,
name|tableIndex
argument_list|,
name|newEntryIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|entryIndex
decl_stmt|;
name|int
name|entry
decl_stmt|;
name|int
name|hashPrefix
init|=
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|hash
argument_list|,
name|mask
argument_list|)
decl_stmt|;
name|int
name|bucketLength
init|=
literal|0
decl_stmt|;
do|do
block|{
name|entryIndex
operator|=
name|next
operator|-
literal|1
expr_stmt|;
name|entry
operator|=
name|entries
index|[
name|entryIndex
index|]
expr_stmt|;
if|if
condition|(
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
operator|==
name|hashPrefix
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|keys
index|[
name|entryIndex
index|]
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// known to be a V
name|V
name|oldValue
init|=
operator|(
name|V
operator|)
name|values
index|[
name|entryIndex
index|]
decl_stmt|;
name|values
index|[
name|entryIndex
index|]
operator|=
name|value
expr_stmt|;
name|accessEntry
argument_list|(
name|entryIndex
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|bucketLength
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|!=
name|UNSET
condition|)
do|;
if|if
condition|(
name|bucketLength
operator|>=
name|MAX_HASH_BUCKET_LENGTH
condition|)
block|{
return|return
name|convertToHashFloodingResistantImplementation
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
if|if
condition|(
name|newSize
operator|>
name|mask
condition|)
block|{
comment|// Resize and add new entry
name|mask
operator|=
name|resizeTable
argument_list|(
name|mask
argument_list|,
name|CompactHashing
operator|.
name|newCapacity
argument_list|(
name|mask
argument_list|)
argument_list|,
name|hash
argument_list|,
name|newEntryIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|entry
argument_list|,
name|newEntryIndex
operator|+
literal|1
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
name|resizeMeMaybe
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|insertEntry
argument_list|(
name|newEntryIndex
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|hash
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
name|incrementModCount
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Creates a fresh entry with the specified object at the specified position in the entry arrays.    */
end_comment

begin_function
DECL|method|insertEntry ( int entryIndex, @ParametricNullness K key, @ParametricNullness V value, int hash, int mask)
name|void
name|insertEntry
parameter_list|(
name|int
name|entryIndex
parameter_list|,
annotation|@
name|ParametricNullness
name|K
name|key
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|,
name|int
name|hash
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|this
operator|.
name|setEntry
argument_list|(
name|entryIndex
argument_list|,
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|hash
argument_list|,
name|UNSET
argument_list|,
name|mask
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setKey
argument_list|(
name|entryIndex
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|setValue
argument_list|(
name|entryIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Resizes the entries storage if necessary. */
end_comment

begin_function
DECL|method|resizeMeMaybe (int newSize)
specifier|private
name|void
name|resizeMeMaybe
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
name|int
name|entriesSize
init|=
name|requireEntries
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|newSize
operator|>
name|entriesSize
condition|)
block|{
comment|// 1.5x but round up to nearest odd (this is optimal for memory consumption on Android)
name|int
name|newCapacity
init|=
name|Math
operator|.
name|min
argument_list|(
name|CompactHashing
operator|.
name|MAX_SIZE
argument_list|,
operator|(
name|entriesSize
operator|+
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|entriesSize
operator|>>>
literal|1
argument_list|)
operator|)
operator||
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|!=
name|entriesSize
condition|)
block|{
name|resizeEntries
argument_list|(
name|newCapacity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Resizes the internal entries array to the specified capacity, which may be greater or less than    * the current capacity.    */
end_comment

begin_function
DECL|method|resizeEntries (int newCapacity)
name|void
name|resizeEntries
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|requireEntries
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|requireKeys
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|requireValues
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
DECL|method|resizeTable (int oldMask, int newCapacity, int targetHash, int targetEntryIndex)
specifier|private
name|int
name|resizeTable
parameter_list|(
name|int
name|oldMask
parameter_list|,
name|int
name|newCapacity
parameter_list|,
name|int
name|targetHash
parameter_list|,
name|int
name|targetEntryIndex
parameter_list|)
block|{
name|Object
name|newTable
init|=
name|CompactHashing
operator|.
name|createTable
argument_list|(
name|newCapacity
argument_list|)
decl_stmt|;
name|int
name|newMask
init|=
name|newCapacity
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|targetEntryIndex
operator|!=
name|UNSET
condition|)
block|{
comment|// Add target first; it must be last in the chain because its entry hasn't yet been created
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|newTable
argument_list|,
name|targetHash
operator|&
name|newMask
argument_list|,
name|targetEntryIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldTable
init|=
name|requireTable
argument_list|()
decl_stmt|;
name|int
index|[]
name|entries
init|=
name|requireEntries
argument_list|()
decl_stmt|;
comment|// Loop over `oldTable` to construct its replacement, ``newTable`. The entries do not move, so
comment|// the `keys` and `values` arrays do not need to change. But because the "short hash" now has a
comment|// different number of bits, we must rewrite each element of `entries` so that its contribution
comment|// to the full hashcode reflects the change, and so that its `next` link corresponds to the new
comment|// linked list of entries with the new short hash.
for|for
control|(
name|int
name|oldTableIndex
init|=
literal|0
init|;
name|oldTableIndex
operator|<=
name|oldMask
condition|;
name|oldTableIndex
operator|++
control|)
block|{
name|int
name|oldNext
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|oldTable
argument_list|,
name|oldTableIndex
argument_list|)
decl_stmt|;
comment|// Each element of `oldTable` is the head of a (possibly empty) linked list of elements in
comment|// `entries`. The `oldNext` loop is going to traverse that linked list.
comment|// We need to rewrite the `next` link of each of the elements so that it is in the appropriate
comment|// linked list starting from `newTable`. In general, each element from the old linked list
comment|// belongs to a different linked list from `newTable`. We insert each element in turn at the
comment|// head of its appropriate `newTable` linked list.
while|while
condition|(
name|oldNext
operator|!=
name|UNSET
condition|)
block|{
name|int
name|entryIndex
init|=
name|oldNext
operator|-
literal|1
decl_stmt|;
name|int
name|oldEntry
init|=
name|entries
index|[
name|entryIndex
index|]
decl_stmt|;
comment|// Rebuild the full 32-bit hash using entry hashPrefix and oldTableIndex ("hashSuffix").
name|int
name|hash
init|=
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|oldEntry
argument_list|,
name|oldMask
argument_list|)
operator||
name|oldTableIndex
decl_stmt|;
name|int
name|newTableIndex
init|=
name|hash
operator|&
name|newMask
decl_stmt|;
name|int
name|newNext
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|newTable
argument_list|,
name|newTableIndex
argument_list|)
decl_stmt|;
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|newTable
argument_list|,
name|newTableIndex
argument_list|,
name|oldNext
argument_list|)
expr_stmt|;
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|hash
argument_list|,
name|newNext
argument_list|,
name|newMask
argument_list|)
expr_stmt|;
name|oldNext
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|oldEntry
argument_list|,
name|oldMask
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|table
operator|=
name|newTable
expr_stmt|;
name|setHashTableMask
argument_list|(
name|newMask
argument_list|)
expr_stmt|;
return|return
name|newMask
return|;
block|}
end_function

begin_function
DECL|method|indexOf (@heckForNull Object key)
specifier|private
name|int
name|indexOf
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|hash
init|=
name|smearedHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|requireTable
argument_list|()
argument_list|,
name|hash
operator|&
name|mask
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|UNSET
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|hashPrefix
init|=
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|hash
argument_list|,
name|mask
argument_list|)
decl_stmt|;
do|do
block|{
name|int
name|entryIndex
init|=
name|next
operator|-
literal|1
decl_stmt|;
name|int
name|entry
init|=
name|entry
argument_list|(
name|entryIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|CompactHashing
operator|.
name|getHashPrefix
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
operator|==
name|hashPrefix
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|key
argument_list|(
name|entryIndex
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|entryIndex
return|;
block|}
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|!=
name|UNSET
condition|)
do|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsKey (@heckForNull Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
else|:
name|indexOf
argument_list|(
name|key
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|get (@heckForNull Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
name|int
name|index
init|=
name|indexOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|accessEntry
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|value
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// known to be a V
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|remove (@heckForNull Object key)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
name|Object
name|oldValue
init|=
name|removeHelper
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|oldValue
operator|==
name|NOT_FOUND
operator|)
condition|?
literal|null
else|:
operator|(
name|V
operator|)
name|oldValue
return|;
block|}
end_function

begin_function
DECL|method|removeHelper (@heckForNull Object key)
specifier|private
annotation|@
name|Nullable
name|Object
name|removeHelper
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
name|NOT_FOUND
return|;
block|}
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|CompactHashing
operator|.
name|remove
argument_list|(
name|key
argument_list|,
comment|/* value= */
literal|null
argument_list|,
name|mask
argument_list|,
name|requireTable
argument_list|()
argument_list|,
name|requireEntries
argument_list|()
argument_list|,
name|requireKeys
argument_list|()
argument_list|,
comment|/* values= */
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|NOT_FOUND
return|;
block|}
name|Object
name|oldValue
init|=
name|value
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|moveLastEntry
argument_list|(
name|index
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|incrementModCount
argument_list|()
expr_stmt|;
return|return
name|oldValue
return|;
block|}
end_function

begin_comment
comment|/**    * Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.    */
end_comment

begin_function
DECL|method|moveLastEntry (int dstIndex, int mask)
name|void
name|moveLastEntry
parameter_list|(
name|int
name|dstIndex
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|Object
name|table
init|=
name|requireTable
argument_list|()
decl_stmt|;
name|int
index|[]
name|entries
init|=
name|requireEntries
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
name|Object
index|[]
name|keys
init|=
name|requireKeys
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
name|Object
index|[]
name|values
init|=
name|requireValues
argument_list|()
decl_stmt|;
name|int
name|srcIndex
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|dstIndex
operator|<
name|srcIndex
condition|)
block|{
comment|// move last entry to deleted spot
name|Object
name|key
init|=
name|keys
index|[
name|srcIndex
index|]
decl_stmt|;
name|keys
index|[
name|dstIndex
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|dstIndex
index|]
operator|=
name|values
index|[
name|srcIndex
index|]
expr_stmt|;
name|keys
index|[
name|srcIndex
index|]
operator|=
literal|null
expr_stmt|;
name|values
index|[
name|srcIndex
index|]
operator|=
literal|null
expr_stmt|;
comment|// move the last entry to the removed spot, just like we moved the element
name|entries
index|[
name|dstIndex
index|]
operator|=
name|entries
index|[
name|srcIndex
index|]
expr_stmt|;
name|entries
index|[
name|srcIndex
index|]
operator|=
literal|0
expr_stmt|;
comment|// also need to update whoever's "next" pointer was pointing to the last entry place
name|int
name|tableIndex
init|=
name|smearedHash
argument_list|(
name|key
argument_list|)
operator|&
name|mask
decl_stmt|;
name|int
name|next
init|=
name|CompactHashing
operator|.
name|tableGet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|)
decl_stmt|;
name|int
name|srcNext
init|=
name|srcIndex
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|srcNext
condition|)
block|{
comment|// we need to update the root pointer
name|CompactHashing
operator|.
name|tableSet
argument_list|(
name|table
argument_list|,
name|tableIndex
argument_list|,
name|dstIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need to update a pointer in an entry
name|int
name|entryIndex
decl_stmt|;
name|int
name|entry
decl_stmt|;
do|do
block|{
name|entryIndex
operator|=
name|next
operator|-
literal|1
expr_stmt|;
name|entry
operator|=
name|entries
index|[
name|entryIndex
index|]
expr_stmt|;
name|next
operator|=
name|CompactHashing
operator|.
name|getNext
argument_list|(
name|entry
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|next
operator|!=
name|srcNext
condition|)
do|;
comment|// here, entries[entryIndex] points to the old entry location; update it
name|entries
index|[
name|entryIndex
index|]
operator|=
name|CompactHashing
operator|.
name|maskCombine
argument_list|(
name|entry
argument_list|,
name|dstIndex
operator|+
literal|1
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|keys
index|[
name|dstIndex
index|]
operator|=
literal|null
expr_stmt|;
name|values
index|[
name|dstIndex
index|]
operator|=
literal|null
expr_stmt|;
name|entries
index|[
name|dstIndex
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|firstEntryIndex ()
name|int
name|firstEntryIndex
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
DECL|method|getSuccessor (int entryIndex)
name|int
name|getSuccessor
parameter_list|(
name|int
name|entryIndex
parameter_list|)
block|{
return|return
operator|(
name|entryIndex
operator|+
literal|1
operator|<
name|size
operator|)
condition|?
name|entryIndex
operator|+
literal|1
else|:
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/**    * Updates the index an iterator is pointing to after a call to remove: returns the index of the    * entry that should be looked at after a removal on indexRemoved, with indexBeforeRemove as the    * index that *was* the next entry that would be looked at.    */
end_comment

begin_function
DECL|method|adjustAfterRemove (int indexBeforeRemove, @SuppressWarnings(R) int indexRemoved)
name|int
name|adjustAfterRemove
parameter_list|(
name|int
name|indexBeforeRemove
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|indexRemoved
parameter_list|)
block|{
return|return
name|indexBeforeRemove
operator|-
literal|1
return|;
block|}
end_function

begin_expr_stmt
DECL|class|Itr
specifier|private
specifier|abstract
name|class
name|Itr
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
expr|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|expectedMetadata
name|int
name|expectedMetadata
operator|=
name|metadata
block|;
DECL|field|currentIndex
name|int
name|currentIndex
operator|=
name|firstEntryIndex
argument_list|()
block|;
DECL|field|indexToRemove
name|int
name|indexToRemove
operator|=
operator|-
literal|1
block|;      @
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
argument_list|()
block|{
return|return
name|currentIndex
operator|>=
literal|0
return|;
block|}
expr|@
name|ParametricNullness
DECL|method|getOutput (int entry)
specifier|abstract
name|T
name|getOutput
argument_list|(
name|int
name|entry
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
annotation|@
name|Override
annotation|@
name|ParametricNullness
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|indexToRemove
operator|=
name|currentIndex
expr_stmt|;
name|T
name|result
init|=
name|getOutput
argument_list|(
name|currentIndex
argument_list|)
decl_stmt|;
name|currentIndex
operator|=
name|getSuccessor
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
name|checkRemove
argument_list|(
name|indexToRemove
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|incrementExpectedModCount
argument_list|()
expr_stmt|;
name|CompactHashMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|key
argument_list|(
name|indexToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|currentIndex
operator|=
name|adjustAfterRemove
argument_list|(
name|currentIndex
argument_list|,
name|indexToRemove
argument_list|)
expr_stmt|;
name|indexToRemove
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function

begin_function
DECL|method|incrementExpectedModCount ()
name|void
name|incrementExpectedModCount
parameter_list|()
block|{
name|expectedMetadata
operator|+=
name|CompactHashing
operator|.
name|MODIFICATION_COUNT_INCREMENT
expr_stmt|;
block|}
end_function

begin_function
DECL|method|checkForConcurrentModification ()
specifier|private
name|void
name|checkForConcurrentModification
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|!=
name|expectedMetadata
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
end_function

begin_function
unit|}    @
name|Override
DECL|method|replaceAll (BiFunction<? super K, ? super V, ? extends V> function)
specifier|public
name|void
name|replaceAll
parameter_list|(
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|function
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|replaceAll
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|setValue
argument_list|(
name|i
argument_list|,
name|function
operator|.
name|apply
argument_list|(
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_decl_stmt
DECL|field|keySetView
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySetView
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|(
name|keySetView
operator|==
literal|null
operator|)
condition|?
name|keySetView
operator|=
name|createKeySet
argument_list|()
else|:
name|keySetView
return|;
block|}
end_function

begin_function
DECL|method|createKeySet ()
name|Set
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
operator|new
name|KeySetView
argument_list|()
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|KeySetView
class|class
name|KeySetView
extends|extends
name|Maps
operator|.
name|KeySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|KeySetView ()
name|KeySetView
parameter_list|()
block|{
name|super
argument_list|(
name|CompactHashMap
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|toArray
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
else|:
name|ObjectArrays
operator|.
name|copyAsObjectArray
argument_list|(
name|requireKeys
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
comment|// b/192354773 in our checker affects toArray declarations
DECL|method|toArray (T[] a)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|a
argument_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|>
literal|0
condition|)
block|{
annotation|@
name|Nullable
name|Object
index|[]
name|unsoundlyCovariantArray
init|=
name|a
decl_stmt|;
name|unsoundlyCovariantArray
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
end_class

begin_decl_stmt
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
end_decl_stmt

begin_return
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
else|:
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|requireKeys
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|a
argument_list|)
return|;
end_return

begin_function
unit|}      @
name|Override
DECL|method|remove (@heckForNull Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|keySet
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
else|:
name|CompactHashMap
operator|.
name|this
operator|.
name|removeHelper
argument_list|(
name|o
argument_list|)
operator|!=
name|NOT_FOUND
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|keySetIterator
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|K
argument_list|>
name|spliterator
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|keySet
argument_list|()
operator|.
name|spliterator
argument_list|()
else|:
name|Spliterators
operator|.
name|spliterator
argument_list|(
name|requireKeys
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|forEach (Consumer<? super K> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|K
argument_list|>
name|action
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|firstEntryIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|getSuccessor
argument_list|(
name|i
argument_list|)
control|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_constructor
unit|}    Iterator
DECL|method|keySetIterator ()
parameter_list|<
name|K
parameter_list|>
name|keySetIterator
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
return|return
operator|new
name|Itr
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|ParametricNullness
name|K
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
name|key
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_constructor

begin_function
annotation|@
name|Override
DECL|method|forEach (BiConsumer<? super K, ? super V> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|BiConsumer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|firstEntryIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|getSuccessor
argument_list|(
name|i
argument_list|)
control|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_decl_stmt
DECL|field|entrySetView
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySetView
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|(
name|entrySetView
operator|==
literal|null
operator|)
condition|?
name|entrySetView
operator|=
name|createEntrySet
argument_list|()
else|:
name|entrySetView
return|;
block|}
end_function

begin_function
DECL|method|createEntrySet ()
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySetView
argument_list|()
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|EntrySetView
class|class
name|EntrySetView
extends|extends
name|Maps
operator|.
name|EntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|map ()
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|CompactHashMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|entrySetIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|spliterator
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|entrySet
argument_list|()
operator|.
name|spliterator
argument_list|()
else|:
name|CollectSpliterators
operator|.
name|indexed
argument_list|(
name|size
argument_list|,
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|ORDERED
argument_list|,
name|MapEntry
operator|::
operator|new
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@heckForNull Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|entrySet
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|int
name|index
init|=
name|indexOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|index
operator|!=
operator|-
literal|1
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|(
name|index
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@heckForNull Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|entrySet
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|CompactHashing
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mask
argument_list|,
name|requireTable
argument_list|()
argument_list|,
name|requireEntries
argument_list|()
argument_list|,
name|requireKeys
argument_list|()
argument_list|,
name|requireValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|moveLastEntry
argument_list|(
name|index
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|incrementModCount
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_function
DECL|method|entrySetIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySetIterator
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
return|return
operator|new
name|Itr
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
operator|new
name|MapEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_class
DECL|class|MapEntry
specifier|final
class|class
name|MapEntry
extends|extends
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|key
annotation|@
name|ParametricNullness
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
DECL|field|lastKnownIndex
specifier|private
name|int
name|lastKnownIndex
decl_stmt|;
DECL|method|MapEntry (int index)
name|MapEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastKnownIndex
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|ParametricNullness
DECL|method|getKey ()
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|updateLastKnownIndex ()
specifier|private
name|void
name|updateLastKnownIndex
parameter_list|()
block|{
if|if
condition|(
name|lastKnownIndex
operator|==
operator|-
literal|1
operator|||
name|lastKnownIndex
operator|>=
name|size
argument_list|()
operator|||
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|key
argument_list|(
name|lastKnownIndex
argument_list|)
argument_list|)
condition|)
block|{
name|lastKnownIndex
operator|=
name|indexOf
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|ParametricNullness
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
comment|/*          * The cast is safe because the entry is present in the map. Or, if it has been removed by a          * concurrent modification, behavior is undefined.          */
return|return
name|uncheckedCastNullableTToT
argument_list|(
name|delegate
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
name|updateLastKnownIndex
argument_list|()
expr_stmt|;
comment|/*        * If the entry has been removed from the map, we return null, even though that might not be a        * valid value. That's the best we can do, short of holding a reference to the most recently        * seen value. And while we *could* do that, we aren't required to: Map.Entry explicitly says        * that behavior is undefined when the backing map is modified through another API. (It even        * permits us to throw IllegalStateException. Maybe we should have done that, but we probably        * shouldn't change now for fear of breaking people.)        */
return|return
operator|(
name|lastKnownIndex
operator|==
operator|-
literal|1
operator|)
condition|?
name|unsafeNull
argument_list|()
else|:
name|value
argument_list|(
name|lastKnownIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|ParametricNullness
DECL|method|setValue (@arametricNullness V value)
specifier|public
name|V
name|setValue
parameter_list|(
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|uncheckedCastNullableTToT
argument_list|(
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
comment|// See discussion in getValue().
block|}
name|updateLastKnownIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastKnownIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|unsafeNull
argument_list|()
return|;
comment|// See discussion in getValue().
block|}
else|else
block|{
name|V
name|old
init|=
name|value
argument_list|(
name|lastKnownIndex
argument_list|)
decl_stmt|;
name|CompactHashMap
operator|.
name|this
operator|.
name|setValue
argument_list|(
name|lastKnownIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
block|}
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|size
argument_list|()
else|:
name|size
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_decl_stmt
DECL|field|valuesView
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Collection
argument_list|<
name|V
argument_list|>
name|valuesView
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|(
name|valuesView
operator|==
literal|null
operator|)
condition|?
name|valuesView
operator|=
name|createValues
argument_list|()
else|:
name|valuesView
return|;
block|}
end_function

begin_function
DECL|method|createValues ()
name|Collection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|ValuesView
argument_list|()
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|ValuesView
class|class
name|ValuesView
extends|extends
name|Maps
operator|.
name|Values
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ValuesView ()
name|ValuesView
parameter_list|()
block|{
name|super
argument_list|(
name|CompactHashMap
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|valuesIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|forEach (Consumer<? super V> action)
specifier|public
name|void
name|forEach
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|firstEntryIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|getSuccessor
argument_list|(
name|i
argument_list|)
control|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|V
argument_list|>
name|spliterator
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|values
argument_list|()
operator|.
name|spliterator
argument_list|()
else|:
name|Spliterators
operator|.
name|spliterator
argument_list|(
name|requireValues
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|Spliterator
operator|.
name|ORDERED
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|toArray
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|()
else|:
name|ObjectArrays
operator|.
name|copyAsObjectArray
argument_list|(
name|requireValues
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
comment|// b/192354773 in our checker affects toArray declarations
DECL|method|toArray (T[] a)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|a
argument_list|)
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|>
literal|0
condition|)
block|{
annotation|@
name|Nullable
name|Object
index|[]
name|unsoundlyCovariantArray
init|=
name|a
decl_stmt|;
name|unsoundlyCovariantArray
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
end_class

begin_decl_stmt
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
end_decl_stmt

begin_return
return|return
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|delegate
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
else|:
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|requireValues
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|a
argument_list|)
return|;
end_return

begin_function
unit|}   }
DECL|method|valuesIterator ()
name|Iterator
argument_list|<
name|V
argument_list|>
name|valuesIterator
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
return|return
operator|new
name|Itr
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|ParametricNullness
name|V
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
name|value
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**    * Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its    * current size.    */
end_comment

begin_function
DECL|method|trimToSize ()
specifier|public
name|void
name|trimToSize
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newDelegate
init|=
name|createHashFloodingResistantDelegate
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|newDelegate
operator|.
name|putAll
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|newDelegate
expr_stmt|;
return|return;
block|}
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|size
operator|<
name|requireEntries
argument_list|()
operator|.
name|length
condition|)
block|{
name|resizeEntries
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|int
name|minimumTableSize
init|=
name|CompactHashing
operator|.
name|tableSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|hashTableMask
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimumTableSize
operator|<
name|mask
condition|)
block|{
comment|// smaller table size will always be less than current mask
name|resizeTable
argument_list|(
name|mask
argument_list|,
name|minimumTableSize
argument_list|,
name|UNSET
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return;
block|}
name|incrementModCount
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
name|delegateOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|=
name|Ints
operator|.
name|constrainToRange
argument_list|(
name|size
argument_list|()
argument_list|,
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|,
name|CompactHashing
operator|.
name|MAX_SIZE
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// invalidate any iterators left over!
name|table
operator|=
literal|null
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|requireKeys
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|requireValues
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CompactHashing
operator|.
name|tableClear
argument_list|(
name|requireTable
argument_list|()
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|requireEntries
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|stream
operator|.
name|writeInt
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|entrySetIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|int
name|elementCount
init|=
name|stream
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid size: "
operator|+
name|elementCount
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|elementCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elementCount
condition|;
name|i
operator|++
control|)
block|{
name|K
name|key
init|=
operator|(
name|K
operator|)
name|stream
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|V
name|value
init|=
operator|(
name|V
operator|)
name|stream
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*    * The following methods are safe to call as long as both of the following hold:    *    * - allocArrays() has been called. Callers can confirm this by checking needsAllocArrays().    *    * - The map has not switched to delegating to a java.util implementation to mitigate hash    *   flooding. Callers can confirm this by null-checking delegateOrNull().    *    * In an ideal world, we would document why we know those things are true every time we call these    * methods. But that is a bit too painful....    */
end_comment

begin_function
DECL|method|requireTable ()
specifier|private
name|Object
name|requireTable
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|table
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|requireEntries ()
specifier|private
name|int
index|[]
name|requireEntries
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|entries
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|requireKeys ()
specifier|private
annotation|@
name|Nullable
name|Object
index|[]
name|requireKeys
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|keys
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|requireValues ()
specifier|private
annotation|@
name|Nullable
name|Object
index|[]
name|requireValues
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|values
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * The following methods are safe to call as long as the conditions in the *previous* comment are    * met *and* the index is less than size().    *    * (The above explains when these methods are safe from a `nullness` perspective. From an    * `unchecked` perspective, they're safe because we put only K/V elements into each array.)    */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|key (int i)
specifier|private
name|K
name|key
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|K
operator|)
name|requireKeys
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|value (int i)
specifier|private
name|V
name|value
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|V
operator|)
name|requireValues
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_function

begin_function
DECL|method|entry (int i)
specifier|private
name|int
name|entry
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|requireEntries
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_function

begin_function
DECL|method|setKey (int i, K key)
specifier|private
name|void
name|setKey
parameter_list|(
name|int
name|i
parameter_list|,
name|K
name|key
parameter_list|)
block|{
name|requireKeys
argument_list|()
index|[
name|i
index|]
operator|=
name|key
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setValue (int i, V value)
specifier|private
name|void
name|setValue
parameter_list|(
name|int
name|i
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|requireValues
argument_list|()
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setEntry (int i, int value)
specifier|private
name|void
name|setEntry
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|requireEntries
argument_list|()
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
end_function

unit|}
end_unit

