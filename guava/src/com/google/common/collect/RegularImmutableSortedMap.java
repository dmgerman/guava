begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of an immutable sorted map with one or more entries.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// uses writeReplace, not default serialization
DECL|class|RegularImmutableSortedMap
specifier|final
class|class
name|RegularImmutableSortedMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|keySet
specifier|private
specifier|final
specifier|transient
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
DECL|field|valueList
specifier|private
specifier|final
specifier|transient
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|valueList
decl_stmt|;
DECL|method|RegularImmutableSortedMap (RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList)
name|RegularImmutableSortedMap
parameter_list|(
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|,
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|valueList
parameter_list|)
block|{
name|this
operator|.
name|keySet
operator|=
name|keySet
expr_stmt|;
name|this
operator|.
name|valueList
operator|=
name|valueList
expr_stmt|;
block|}
DECL|method|RegularImmutableSortedMap ( RegularImmutableSortedSet<K> keySet, ImmutableList<V> valueList, ImmutableSortedMap<K, V> descendingMap)
name|RegularImmutableSortedMap
parameter_list|(
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|,
name|ImmutableList
argument_list|<
name|V
argument_list|>
name|valueList
parameter_list|,
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
parameter_list|)
block|{
name|super
argument_list|(
name|descendingMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|keySet
operator|=
name|keySet
expr_stmt|;
name|this
operator|.
name|valueList
operator|=
name|valueList
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
DECL|class|EntrySet
specifier|private
class|class
name|EntrySet
extends|extends
name|ImmutableMapEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createAsList ()
name|ImmutableList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createAsList
parameter_list|()
block|{
return|return
operator|new
name|ImmutableAsList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
comment|// avoid additional indirection
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|keyList
init|=
name|keySet
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|keyList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|valueList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
name|ImmutableCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|delegateCollection
parameter_list|()
block|{
return|return
name|EntrySet
operator|.
name|this
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|map ()
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|RegularImmutableSortedMap
operator|.
name|this
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|keySet
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|valueList
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|int
name|index
init|=
name|keySet
operator|.
name|indexOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|==
operator|-
literal|1
operator|)
condition|?
literal|null
else|:
name|valueList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|getSubMap (int fromIndex, int toIndex)
specifier|private
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getSubMap
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|fromIndex
operator|==
literal|0
operator|&&
name|toIndex
operator|==
name|size
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|fromIndex
operator|==
name|toIndex
condition|)
block|{
return|return
name|emptyMap
argument_list|(
name|comparator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|from
argument_list|(
name|keySet
operator|.
name|getSubSet
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|,
name|valueList
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|headMap (K toKey, boolean inclusive)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|getSubMap
argument_list|(
literal|0
argument_list|,
name|keySet
operator|.
name|headIndex
argument_list|(
name|checkNotNull
argument_list|(
name|toKey
argument_list|)
argument_list|,
name|inclusive
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tailMap (K fromKey, boolean inclusive)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|getSubMap
argument_list|(
name|keySet
operator|.
name|tailIndex
argument_list|(
name|checkNotNull
argument_list|(
name|fromKey
argument_list|)
argument_list|,
name|inclusive
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createDescendingMap ()
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createDescendingMap
parameter_list|()
block|{
return|return
operator|new
name|RegularImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
operator|(
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
operator|)
name|keySet
operator|.
name|descendingSet
argument_list|()
argument_list|,
name|valueList
operator|.
name|reverse
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

