begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * A descriptor for a<i>discrete</i> {@code Comparable} domain such as all  * {@link Integer} instances. A discrete domain is one that supports the three basic  * operations: {@link #next}, {@link #previous} and {@link #distance}, according  * to their specifications. The methods {@link #minValue} and {@link #maxValue}  * should also be overridden for bounded types.  *  *<p>A discrete domain always represents the<i>entire</i> set of values of its  * type; it cannot represent partial domains such as "prime integers" or  * "strings of length 5."  *  *<p>See the Guava User Guide section on<a href=  * "http://code.google.com/p/guava-libraries/wiki/RangesExplained#Discrete_Domains">  * {@code DiscreteDomain}</a>.  *  * @author Kevin Bourrillion  * @since 10.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|Beta
DECL|class|DiscreteDomain
specifier|public
specifier|abstract
class|class
name|DiscreteDomain
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
block|{
comment|/**    * Returns the discrete domain for values of type {@code Integer}.    *     * @since 14.0 (since 10.0 as {@code DiscreteDomains.integers()})    */
DECL|method|integers ()
specifier|public
specifier|static
name|DiscreteDomain
argument_list|<
name|Integer
argument_list|>
name|integers
parameter_list|()
block|{
return|return
name|IntegerDomain
operator|.
name|INSTANCE
return|;
block|}
DECL|class|IntegerDomain
specifier|private
specifier|static
specifier|final
class|class
name|IntegerDomain
extends|extends
name|DiscreteDomain
argument_list|<
name|Integer
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|IntegerDomain
name|INSTANCE
init|=
operator|new
name|IntegerDomain
argument_list|()
decl_stmt|;
DECL|method|next (Integer value)
annotation|@
name|Override
specifier|public
name|Integer
name|next
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|value
decl_stmt|;
return|return
operator|(
name|i
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|?
literal|null
else|:
name|i
operator|+
literal|1
return|;
block|}
DECL|method|previous (Integer value)
annotation|@
name|Override
specifier|public
name|Integer
name|previous
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|value
decl_stmt|;
return|return
operator|(
name|i
operator|==
name|Integer
operator|.
name|MIN_VALUE
operator|)
condition|?
literal|null
else|:
name|i
operator|-
literal|1
return|;
block|}
DECL|method|distance (Integer start, Integer end)
annotation|@
name|Override
specifier|public
name|long
name|distance
parameter_list|(
name|Integer
name|start
parameter_list|,
name|Integer
name|end
parameter_list|)
block|{
return|return
operator|(
name|long
operator|)
name|end
operator|-
name|start
return|;
block|}
DECL|method|minValue ()
annotation|@
name|Override
specifier|public
name|Integer
name|minValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
block|}
DECL|method|maxValue ()
annotation|@
name|Override
specifier|public
name|Integer
name|maxValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DiscreteDomains.integers()"
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns the discrete domain for values of type {@code Long}.    *     * @since 14.0 (since 10.0 as {@code DiscreteDomains.longs()})    */
DECL|method|longs ()
specifier|public
specifier|static
name|DiscreteDomain
argument_list|<
name|Long
argument_list|>
name|longs
parameter_list|()
block|{
return|return
name|LongDomain
operator|.
name|INSTANCE
return|;
block|}
DECL|class|LongDomain
specifier|private
specifier|static
specifier|final
class|class
name|LongDomain
extends|extends
name|DiscreteDomain
argument_list|<
name|Long
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|LongDomain
name|INSTANCE
init|=
operator|new
name|LongDomain
argument_list|()
decl_stmt|;
DECL|method|next (Long value)
annotation|@
name|Override
specifier|public
name|Long
name|next
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
name|long
name|l
init|=
name|value
decl_stmt|;
return|return
operator|(
name|l
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|)
condition|?
literal|null
else|:
name|l
operator|+
literal|1
return|;
block|}
DECL|method|previous (Long value)
annotation|@
name|Override
specifier|public
name|Long
name|previous
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
name|long
name|l
init|=
name|value
decl_stmt|;
return|return
operator|(
name|l
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|)
condition|?
literal|null
else|:
name|l
operator|-
literal|1
return|;
block|}
DECL|method|distance (Long start, Long end)
annotation|@
name|Override
specifier|public
name|long
name|distance
parameter_list|(
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
name|long
name|result
init|=
name|end
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|start
operator|&&
name|result
operator|<
literal|0
condition|)
block|{
comment|// overflow
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
if|if
condition|(
name|end
argument_list|<
name|start
operator|&&
name|result
argument_list|>
literal|0
condition|)
block|{
comment|// underflow
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|minValue ()
annotation|@
name|Override
specifier|public
name|Long
name|minValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
DECL|method|maxValue ()
annotation|@
name|Override
specifier|public
name|Long
name|maxValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DiscreteDomains.longs()"
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns the discrete domain for values of type {@code BigInteger}.    */
comment|// TODO(kevinb): make sure it's tested, and make it public
DECL|method|bigIntegers ()
specifier|static
name|DiscreteDomain
argument_list|<
name|BigInteger
argument_list|>
name|bigIntegers
parameter_list|()
block|{
return|return
name|BigIntegerDomain
operator|.
name|INSTANCE
return|;
block|}
DECL|class|BigIntegerDomain
specifier|private
specifier|static
specifier|final
class|class
name|BigIntegerDomain
extends|extends
name|DiscreteDomain
argument_list|<
name|BigInteger
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|BigIntegerDomain
name|INSTANCE
init|=
operator|new
name|BigIntegerDomain
argument_list|()
decl_stmt|;
DECL|field|MIN_LONG
specifier|private
specifier|static
specifier|final
name|BigInteger
name|MIN_LONG
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
DECL|field|MAX_LONG
specifier|private
specifier|static
specifier|final
name|BigInteger
name|MAX_LONG
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|method|next (BigInteger value)
annotation|@
name|Override
specifier|public
name|BigInteger
name|next
parameter_list|(
name|BigInteger
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
return|;
block|}
DECL|method|previous (BigInteger value)
annotation|@
name|Override
specifier|public
name|BigInteger
name|previous
parameter_list|(
name|BigInteger
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
return|;
block|}
DECL|method|distance (BigInteger start, BigInteger end)
annotation|@
name|Override
specifier|public
name|long
name|distance
parameter_list|(
name|BigInteger
name|start
parameter_list|,
name|BigInteger
name|end
parameter_list|)
block|{
return|return
name|end
operator|.
name|subtract
argument_list|(
name|start
argument_list|)
operator|.
name|max
argument_list|(
name|MIN_LONG
argument_list|)
operator|.
name|min
argument_list|(
name|MAX_LONG
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DiscreteDomains.bigIntegers()"
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/** Constructor for use by subclasses. */
DECL|method|DiscreteDomain ()
specifier|protected
name|DiscreteDomain
parameter_list|()
block|{}
comment|/**    * Returns the unique least value of type {@code C} that is greater than    * {@code value}, or {@code null} if none exists. Inverse operation to {@link    * #previous}.    *    * @param value any value of type {@code C}    * @return the least value greater than {@code value}, or {@code null} if    *     {@code value} is {@code maxValue()}    */
DECL|method|next (C value)
specifier|public
specifier|abstract
name|C
name|next
parameter_list|(
name|C
name|value
parameter_list|)
function_decl|;
comment|/**    * Returns the unique greatest value of type {@code C} that is less than    * {@code value}, or {@code null} if none exists. Inverse operation to {@link    * #next}.    *    * @param value any value of type {@code C}    * @return the greatest value less than {@code value}, or {@code null} if    *     {@code value} is {@code minValue()}    */
DECL|method|previous (C value)
specifier|public
specifier|abstract
name|C
name|previous
parameter_list|(
name|C
name|value
parameter_list|)
function_decl|;
comment|/**    * Returns a signed value indicating how many nested invocations of {@link    * #next} (if positive) or {@link #previous} (if negative) are needed to reach    * {@code end} starting from {@code start}. For example, if {@code end =    * next(next(next(start)))}, then {@code distance(start, end) == 3} and {@code    * distance(end, start) == -3}. As well, {@code distance(a, a)} is always    * zero.    *    *<p>Note that this function is necessarily well-defined for any discrete    * type.    *    * @return the distance as described above, or {@link Long#MIN_VALUE} or    *     {@link Long#MAX_VALUE} if the distance is too small or too large,    *     respectively.    */
DECL|method|distance (C start, C end)
specifier|public
specifier|abstract
name|long
name|distance
parameter_list|(
name|C
name|start
parameter_list|,
name|C
name|end
parameter_list|)
function_decl|;
comment|/**    * Returns the minimum value of type {@code C}, if it has one. The minimum    * value is the unique value for which {@link Comparable#compareTo(Object)}    * never returns a positive value for any input of type {@code C}.    *    *<p>The default implementation throws {@code NoSuchElementException}.    *    * @return the minimum value of type {@code C}; never null    * @throws NoSuchElementException if the type has no (practical) minimum    *     value; for example, {@link java.math.BigInteger}    */
DECL|method|minValue ()
specifier|public
name|C
name|minValue
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
comment|/**    * Returns the maximum value of type {@code C}, if it has one. The maximum    * value is the unique value for which {@link Comparable#compareTo(Object)}    * never returns a negative value for any input of type {@code C}.    *    *<p>The default implementation throws {@code NoSuchElementException}.    *    * @return the maximum value of type {@code C}; never null    * @throws NoSuchElementException if the type has no (practical) maximum    *     value; for example, {@link java.math.BigInteger}    */
DECL|method|maxValue ()
specifier|public
name|C
name|maxValue
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

