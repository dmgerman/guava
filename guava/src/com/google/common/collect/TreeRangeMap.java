begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@code RangeMap} based on a {@code TreeMap}, supporting  * all optional operations.  *  *<p>Like all {@code RangeMap} implementations, this supports neither null  * keys nor null values.  *  * @author Louis Wasserman  * @since 14.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NavigableMap"
argument_list|)
DECL|class|TreeRangeMap
specifier|public
specifier|final
class|class
name|TreeRangeMap
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|entriesByLowerBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entriesByLowerBound
decl_stmt|;
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
name|TreeRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|TreeRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
DECL|method|TreeRangeMap ()
specifier|private
name|TreeRangeMap
parameter_list|()
block|{
name|this
operator|.
name|entriesByLowerBound
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
block|}
DECL|class|RangeMapEntry
specifier|private
specifier|static
specifier|final
class|class
name|RangeMapEntry
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapEntry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
DECL|field|range
specifier|private
specifier|final
name|Range
argument_list|<
name|K
argument_list|>
name|range
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|RangeMapEntry (Cut<K> lowerBound, Cut<K> upperBound, V value)
name|RangeMapEntry
parameter_list|(
name|Cut
argument_list|<
name|K
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|K
argument_list|>
name|upperBound
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Range
argument_list|<
name|K
argument_list|>
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|RangeMapEntry (Range<K> range, V value)
name|RangeMapEntry
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|Range
argument_list|<
name|K
argument_list|>
name|getKey
parameter_list|()
block|{
return|return
name|range
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|contains (K value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|K
name|value
parameter_list|)
block|{
return|return
name|range
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|getLowerBound ()
name|Cut
argument_list|<
name|K
argument_list|>
name|getLowerBound
parameter_list|()
block|{
return|return
name|range
operator|.
name|lowerBound
return|;
block|}
DECL|method|getUpperBound ()
name|Cut
argument_list|<
name|K
argument_list|>
name|getUpperBound
parameter_list|()
block|{
return|return
name|range
operator|.
name|upperBound
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|getEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getEntry (K key)
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|getEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapEntry
init|=
name|entriesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntry
operator|!=
literal|null
operator|&&
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|mapEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (Range<K> range, V value)
specifier|public
name|void
name|put
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|entriesByLowerBound
operator|.
name|put
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|,
operator|new
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|range
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|putAll (RangeMap<K, V> rangeMap)
specifier|public
name|void
name|putAll
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entriesByLowerBound
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|span ()
specifier|public
name|Range
argument_list|<
name|K
argument_list|>
name|span
parameter_list|()
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|firstEntry
init|=
name|entriesByLowerBound
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lastEntry
init|=
name|entriesByLowerBound
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|Range
operator|.
name|create
argument_list|(
name|firstEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|lowerBound
argument_list|,
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|upperBound
argument_list|)
return|;
block|}
DECL|method|putRangeMapEntry (Cut<K> lowerBound, Cut<K> upperBound, V value)
specifier|private
name|void
name|putRangeMapEntry
parameter_list|(
name|Cut
argument_list|<
name|K
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|K
argument_list|>
name|upperBound
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|entriesByLowerBound
operator|.
name|put
argument_list|(
name|lowerBound
argument_list|,
operator|new
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<K> rangeToRemove)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|rangeToRemove
parameter_list|)
block|{
if|if
condition|(
name|rangeToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|/*      * The comments for this method will use [ ] to indicate the bounds of rangeToRemove and ( ) to      * indicate the bounds of ranges in the range map.      */
name|Map
operator|.
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapEntryBelowToTruncate
init|=
name|entriesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntryBelowToTruncate
operator|!=
literal|null
condition|)
block|{
comment|// we know ( [
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMapEntry
init|=
name|mapEntryBelowToTruncate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// we know ( [ )
if|if
condition|(
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// we know ( [ ] ), so insert the range ] ) back into the map --
comment|// it's being split apart
name|putRangeMapEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
argument_list|,
name|mapEntryBelowToTruncate
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// overwrite mapEntryToTruncateBelow with a truncated range
name|putRangeMapEntry
argument_list|(
name|rangeMapEntry
operator|.
name|getLowerBound
argument_list|()
argument_list|,
name|rangeToRemove
operator|.
name|lowerBound
argument_list|,
name|mapEntryBelowToTruncate
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapEntryAboveToTruncate
init|=
name|entriesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntryAboveToTruncate
operator|!=
literal|null
condition|)
block|{
comment|// we know ( ]
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMapEntry
init|=
name|mapEntryAboveToTruncate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// we know ( ] ), and since we dealt with truncating below already,
comment|// we know [ ( ] )
name|putRangeMapEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
argument_list|,
name|mapEntryAboveToTruncate
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entriesByLowerBound
operator|.
name|remove
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
expr_stmt|;
block|}
block|}
name|entriesByLowerBound
operator|.
name|subMap
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|,
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asMapOfRanges ()
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|asMapOfRanges
parameter_list|()
block|{
return|return
operator|new
name|AsMapOfRanges
argument_list|()
return|;
block|}
DECL|class|AsMapOfRanges
specifier|private
specifier|final
class|class
name|AsMapOfRanges
extends|extends
name|AbstractMap
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|Range
condition|)
block|{
name|Range
argument_list|<
name|?
argument_list|>
name|range
init|=
operator|(
name|Range
argument_list|<
name|?
argument_list|>
operator|)
name|key
decl_stmt|;
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMapEntry
init|=
name|entriesByLowerBound
operator|.
name|get
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeMapEntry
operator|!=
literal|null
operator|&&
name|rangeMapEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|range
argument_list|)
condition|)
block|{
return|return
name|rangeMapEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|AbstractSet
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// it's safe to upcast iterators
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|(
name|Iterator
operator|)
name|Iterators
operator|.
name|unmodifiableIterator
argument_list|(
name|entriesByLowerBound
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entriesByLowerBound
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RangeMap
condition|)
block|{
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rangeMap
init|=
operator|(
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|equals
argument_list|(
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|entriesByLowerBound
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

