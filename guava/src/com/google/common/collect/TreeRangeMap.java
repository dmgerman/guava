begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|compose
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|not
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|IteratorBasedAbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@code RangeMap} based on a {@code TreeMap}, supporting all optional  * operations.  *  *<p>Like all {@code RangeMap} implementations, this supports neither null keys nor null values.  *  * @author Louis Wasserman  * @since 14.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
comment|// NavigableMap
DECL|class|TreeRangeMap
specifier|public
specifier|final
class|class
name|TreeRangeMap
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|entriesByLowerBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entriesByLowerBound
decl_stmt|;
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
name|TreeRangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|TreeRangeMap
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|TreeRangeMap ()
specifier|private
name|TreeRangeMap
parameter_list|()
block|{
name|this
operator|.
name|entriesByLowerBound
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
block|}
DECL|class|RangeMapEntry
specifier|private
specifier|static
specifier|final
class|class
name|RangeMapEntry
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapEntry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
DECL|field|range
specifier|private
specifier|final
name|Range
argument_list|<
name|K
argument_list|>
name|range
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|RangeMapEntry (Cut<K> lowerBound, Cut<K> upperBound, V value)
name|RangeMapEntry
parameter_list|(
name|Cut
argument_list|<
name|K
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|K
argument_list|>
name|upperBound
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|Range
operator|.
name|create
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|RangeMapEntry (Range<K> range, V value)
name|RangeMapEntry
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|Range
argument_list|<
name|K
argument_list|>
name|getKey
parameter_list|()
block|{
return|return
name|range
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|contains (K value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|K
name|value
parameter_list|)
block|{
return|return
name|range
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|getLowerBound ()
name|Cut
argument_list|<
name|K
argument_list|>
name|getLowerBound
parameter_list|()
block|{
return|return
name|range
operator|.
name|lowerBound
return|;
block|}
DECL|method|getUpperBound ()
name|Cut
argument_list|<
name|K
argument_list|>
name|getUpperBound
parameter_list|()
block|{
return|return
name|range
operator|.
name|upperBound
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|getEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getEntry (K key)
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|getEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapEntry
init|=
name|entriesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntry
operator|!=
literal|null
operator|&&
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|mapEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (Range<K> range, V value)
specifier|public
name|void
name|put
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
comment|// don't short-circuit if the range is empty - it may be between two ranges we can coalesce.
if|if
condition|(
operator|!
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|entriesByLowerBound
operator|.
name|put
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|,
operator|new
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|range
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|putCoalescing (Range<K> range, V value)
specifier|public
name|void
name|putCoalescing
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|entriesByLowerBound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|put
argument_list|(
name|range
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
name|Range
argument_list|<
name|K
argument_list|>
name|coalescedRange
init|=
name|coalescedRange
argument_list|(
name|range
argument_list|,
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|coalescedRange
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** Computes the coalesced range for the given range+value - does not mutate the map. */
DECL|method|coalescedRange (Range<K> range, V value)
specifier|private
name|Range
argument_list|<
name|K
argument_list|>
name|coalescedRange
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|Range
argument_list|<
name|K
argument_list|>
name|coalescedRange
init|=
name|range
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lowerEntry
init|=
name|entriesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
name|coalescedRange
operator|=
name|coalesce
argument_list|(
name|coalescedRange
argument_list|,
name|value
argument_list|,
name|lowerEntry
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|higherEntry
init|=
name|entriesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|range
operator|.
name|upperBound
argument_list|)
decl_stmt|;
name|coalescedRange
operator|=
name|coalesce
argument_list|(
name|coalescedRange
argument_list|,
name|value
argument_list|,
name|higherEntry
argument_list|)
expr_stmt|;
return|return
name|coalescedRange
return|;
block|}
comment|/** Returns the range that spans the given range and entry, if the entry can be coalesced. */
DECL|method|coalesce ( Range<K> range, V value, @Nullable Entry<Cut<K>, RangeMapEntry<K, V>> entry)
specifier|private
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|,
name|V
parameter_list|>
name|Range
argument_list|<
name|K
argument_list|>
name|coalesce
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|,
annotation|@
name|Nullable
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|isConnected
argument_list|(
name|range
argument_list|)
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|range
operator|.
name|span
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
return|return
name|range
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (RangeMap<K, V> rangeMap)
specifier|public
name|void
name|putAll
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entriesByLowerBound
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|span ()
specifier|public
name|Range
argument_list|<
name|K
argument_list|>
name|span
parameter_list|()
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|firstEntry
init|=
name|entriesByLowerBound
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lastEntry
init|=
name|entriesByLowerBound
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|Range
operator|.
name|create
argument_list|(
name|firstEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|lowerBound
argument_list|,
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|upperBound
argument_list|)
return|;
block|}
DECL|method|putRangeMapEntry (Cut<K> lowerBound, Cut<K> upperBound, V value)
specifier|private
name|void
name|putRangeMapEntry
parameter_list|(
name|Cut
argument_list|<
name|K
argument_list|>
name|lowerBound
parameter_list|,
name|Cut
argument_list|<
name|K
argument_list|>
name|upperBound
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|entriesByLowerBound
operator|.
name|put
argument_list|(
name|lowerBound
argument_list|,
operator|new
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<K> rangeToRemove)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|rangeToRemove
parameter_list|)
block|{
if|if
condition|(
name|rangeToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|/*      * The comments for this method will use [ ] to indicate the bounds of rangeToRemove and ( ) to      * indicate the bounds of ranges in the range map.      */
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapEntryBelowToTruncate
init|=
name|entriesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntryBelowToTruncate
operator|!=
literal|null
condition|)
block|{
comment|// we know ( [
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMapEntry
init|=
name|mapEntryBelowToTruncate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// we know ( [ )
if|if
condition|(
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// we know ( [ ] ), so insert the range ] ) back into the map --
comment|// it's being split apart
name|putRangeMapEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
argument_list|,
name|mapEntryBelowToTruncate
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// overwrite mapEntryToTruncateBelow with a truncated range
name|putRangeMapEntry
argument_list|(
name|rangeMapEntry
operator|.
name|getLowerBound
argument_list|()
argument_list|,
name|rangeToRemove
operator|.
name|lowerBound
argument_list|,
name|mapEntryBelowToTruncate
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapEntryAboveToTruncate
init|=
name|entriesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapEntryAboveToTruncate
operator|!=
literal|null
condition|)
block|{
comment|// we know ( ]
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMapEntry
init|=
name|mapEntryAboveToTruncate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// we know ( ] ), and since we dealt with truncating below already,
comment|// we know [ ( ] )
name|putRangeMapEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeMapEntry
operator|.
name|getUpperBound
argument_list|()
argument_list|,
name|mapEntryAboveToTruncate
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|entriesByLowerBound
operator|.
name|subMap
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|,
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asMapOfRanges ()
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|asMapOfRanges
parameter_list|()
block|{
return|return
operator|new
name|AsMapOfRanges
argument_list|(
name|entriesByLowerBound
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asDescendingMapOfRanges ()
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|asDescendingMapOfRanges
parameter_list|()
block|{
return|return
operator|new
name|AsMapOfRanges
argument_list|(
name|entriesByLowerBound
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|class|AsMapOfRanges
specifier|private
specifier|final
class|class
name|AsMapOfRanges
extends|extends
name|IteratorBasedAbstractMap
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
DECL|field|entryIterable
specifier|final
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterable
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// it's safe to upcast iterables
DECL|method|AsMapOfRanges (Iterable<RangeMapEntry<K, V>> entryIterable)
name|AsMapOfRanges
parameter_list|(
name|Iterable
argument_list|<
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterable
parameter_list|)
block|{
name|this
operator|.
name|entryIterable
operator|=
operator|(
name|Iterable
operator|)
name|entryIterable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|Range
condition|)
block|{
name|Range
argument_list|<
name|?
argument_list|>
name|range
init|=
operator|(
name|Range
argument_list|<
name|?
argument_list|>
operator|)
name|key
decl_stmt|;
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMapEntry
init|=
name|entriesByLowerBound
operator|.
name|get
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeMapEntry
operator|!=
literal|null
operator|&&
name|rangeMapEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|range
argument_list|)
condition|)
block|{
return|return
name|rangeMapEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entriesByLowerBound
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
return|return
name|entryIterable
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subRangeMap (Range<K> subRange)
specifier|public
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subRangeMap
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|subRange
parameter_list|)
block|{
if|if
condition|(
name|subRange
operator|.
name|equals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
return|return
operator|new
name|SubRangeMap
argument_list|(
name|subRange
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|emptySubRangeMap ()
specifier|private
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|emptySubRangeMap
parameter_list|()
block|{
return|return
name|EMPTY_SUB_RANGE_MAP
return|;
block|}
DECL|field|EMPTY_SUB_RANGE_MAP
specifier|private
specifier|static
specifier|final
name|RangeMap
name|EMPTY_SUB_RANGE_MAP
init|=
operator|new
name|RangeMap
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Object
name|get
parameter_list|(
name|Comparable
name|key
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|,
name|Object
argument_list|>
name|getEntry
parameter_list|(
name|Comparable
name|key
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Range
name|span
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Range
name|range
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot insert range "
operator|+
name|range
operator|+
literal|" into an empty subRangeMap"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putCoalescing
parameter_list|(
name|Range
name|range
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot insert range "
operator|+
name|range
operator|+
literal|" into an empty subRangeMap"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|RangeMap
name|rangeMap
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot putAll(nonEmptyRangeMap) into an empty subRangeMap"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Range
argument_list|,
name|Object
argument_list|>
name|asMapOfRanges
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Range
argument_list|,
name|Object
argument_list|>
name|asDescendingMapOfRanges
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RangeMap
name|subRangeMap
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
decl_stmt|;
DECL|class|SubRangeMap
specifier|private
class|class
name|SubRangeMap
implements|implements
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|subRange
specifier|private
specifier|final
name|Range
argument_list|<
name|K
argument_list|>
name|subRange
decl_stmt|;
DECL|method|SubRangeMap (Range<K> subRange)
name|SubRangeMap
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|subRange
parameter_list|)
block|{
name|this
operator|.
name|subRange
operator|=
name|subRange
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|subRange
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|?
name|TreeRangeMap
operator|.
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getEntry (K key)
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|getEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|subRange
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|TreeRangeMap
operator|.
name|this
operator|.
name|getEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|span ()
specifier|public
name|Range
argument_list|<
name|K
argument_list|>
name|span
parameter_list|()
block|{
name|Cut
argument_list|<
name|K
argument_list|>
name|lowerBound
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lowerEntry
init|=
name|entriesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerEntry
operator|!=
literal|null
operator|&&
name|lowerEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
operator|>
literal|0
condition|)
block|{
name|lowerBound
operator|=
name|subRange
operator|.
name|lowerBound
expr_stmt|;
block|}
else|else
block|{
name|lowerBound
operator|=
name|entriesByLowerBound
operator|.
name|ceilingKey
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowerBound
operator|==
literal|null
operator|||
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
name|Cut
argument_list|<
name|K
argument_list|>
name|upperBound
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|upperEntry
init|=
name|entriesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|subRange
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|upperEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|upperEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|upperBound
operator|=
name|subRange
operator|.
name|upperBound
expr_stmt|;
block|}
else|else
block|{
name|upperBound
operator|=
name|upperEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getUpperBound
argument_list|()
expr_stmt|;
block|}
return|return
name|Range
operator|.
name|create
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|put (Range<K> range, V value)
specifier|public
name|void
name|put
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|subRange
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
argument_list|,
literal|"Cannot put range %s into a subRangeMap(%s)"
argument_list|,
name|range
argument_list|,
name|subRange
argument_list|)
expr_stmt|;
name|TreeRangeMap
operator|.
name|this
operator|.
name|put
argument_list|(
name|range
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|putCoalescing (Range<K> range, V value)
specifier|public
name|void
name|putCoalescing
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|entriesByLowerBound
operator|.
name|isEmpty
argument_list|()
operator|||
name|range
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|subRange
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
condition|)
block|{
name|put
argument_list|(
name|range
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
name|Range
argument_list|<
name|K
argument_list|>
name|coalescedRange
init|=
name|coalescedRange
argument_list|(
name|range
argument_list|,
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
comment|// only coalesce ranges within the subRange
name|put
argument_list|(
name|coalescedRange
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|putAll (RangeMap<K, V> rangeMap)
specifier|public
name|void
name|putAll
parameter_list|(
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rangeMap
parameter_list|)
block|{
if|if
condition|(
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Range
argument_list|<
name|K
argument_list|>
name|span
init|=
name|rangeMap
operator|.
name|span
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|subRange
operator|.
name|encloses
argument_list|(
name|span
argument_list|)
argument_list|,
literal|"Cannot putAll rangeMap with span %s into a subRangeMap(%s)"
argument_list|,
name|span
argument_list|,
name|subRange
argument_list|)
expr_stmt|;
name|TreeRangeMap
operator|.
name|this
operator|.
name|putAll
argument_list|(
name|rangeMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|TreeRangeMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|subRange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<K> range)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|isConnected
argument_list|(
name|subRange
argument_list|)
condition|)
block|{
name|TreeRangeMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|range
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|subRangeMap (Range<K> range)
specifier|public
name|RangeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subRangeMap
parameter_list|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
operator|!
name|range
operator|.
name|isConnected
argument_list|(
name|subRange
argument_list|)
condition|)
block|{
return|return
name|emptySubRangeMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|TreeRangeMap
operator|.
name|this
operator|.
name|subRangeMap
argument_list|(
name|range
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|asMapOfRanges ()
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|asMapOfRanges
parameter_list|()
block|{
return|return
operator|new
name|SubRangeMapAsMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asDescendingMapOfRanges ()
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|asDescendingMapOfRanges
parameter_list|()
block|{
return|return
operator|new
name|SubRangeMapAsMap
argument_list|()
block|{
annotation|@
name|Override
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
if|if
condition|(
name|subRange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingItr
init|=
name|entriesByLowerBound
operator|.
name|headMap
argument_list|(
name|subRange
operator|.
name|upperBound
argument_list|,
literal|false
argument_list|)
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|backingItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|backingItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RangeMap
condition|)
block|{
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rangeMap
init|=
operator|(
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|equals
argument_list|(
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|SubRangeMapAsMap
class|class
name|SubRangeMapAsMap
extends|extends
name|AbstractMap
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|key
operator|instanceof
name|Range
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we catch ClassCastExceptions
name|Range
argument_list|<
name|K
argument_list|>
name|r
init|=
operator|(
name|Range
argument_list|<
name|K
argument_list|>
operator|)
name|key
decl_stmt|;
if|if
condition|(
operator|!
name|subRange
operator|.
name|encloses
argument_list|(
name|r
argument_list|)
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|candidate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// r could be truncated on the left
name|Entry
argument_list|<
name|Cut
argument_list|<
name|K
argument_list|>
argument_list|,
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|entriesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|r
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|candidate
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|candidate
operator|=
name|entriesByLowerBound
operator|.
name|get
argument_list|(
name|r
operator|.
name|lowerBound
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|candidate
operator|!=
literal|null
operator|&&
name|candidate
operator|.
name|getKey
argument_list|()
operator|.
name|isConnected
argument_list|(
name|subRange
argument_list|)
operator|&&
name|candidate
operator|.
name|getKey
argument_list|()
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
operator|.
name|equals
argument_list|(
name|r
argument_list|)
condition|)
block|{
return|return
name|candidate
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|V
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// it's definitely in the map, so safe
name|Range
argument_list|<
name|K
argument_list|>
name|range
init|=
operator|(
name|Range
argument_list|<
name|K
argument_list|>
operator|)
name|key
decl_stmt|;
name|TreeRangeMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|SubRangeMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|removeEntryIf (Predicate<? super Entry<Range<K>, V>> predicate)
specifier|private
name|boolean
name|removeEntryIf
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|toRemove
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Range
argument_list|<
name|K
argument_list|>
name|range
range|:
name|toRemove
control|)
block|{
name|TreeRangeMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|toRemove
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|Maps
operator|.
name|KeySet
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|(
name|SubRangeMapAsMap
operator|.
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|SubRangeMapAsMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|o
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeEntryIf
argument_list|(
name|compose
argument_list|(
name|not
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|Maps
operator|.
expr|<
name|Range
argument_list|<
name|K
argument_list|>
operator|>
name|keyFunction
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|Maps
operator|.
name|EntrySet
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|SubRangeMapAsMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|entryIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeEntryIf
argument_list|(
name|not
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
if|if
condition|(
name|subRange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
name|Cut
argument_list|<
name|K
argument_list|>
name|cutToStart
init|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|entriesByLowerBound
operator|.
name|floorKey
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
argument_list|,
name|subRange
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingItr
init|=
name|entriesByLowerBound
operator|.
name|tailMap
argument_list|(
name|cutToStart
argument_list|,
literal|true
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|backingItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RangeMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|backingItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getLowerBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getUpperBound
argument_list|()
operator|.
name|compareTo
argument_list|(
name|subRange
operator|.
name|lowerBound
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// this might not be true e.g. at the start of the iteration
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|new
name|Maps
operator|.
name|Values
argument_list|<
name|Range
argument_list|<
name|K
argument_list|>
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeEntryIf
argument_list|(
name|compose
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|,
name|Maps
operator|.
expr|<
name|V
operator|>
name|valueFunction
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeEntryIf
argument_list|(
name|compose
argument_list|(
name|not
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|Maps
operator|.
expr|<
name|V
operator|>
name|valueFunction
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RangeMap
condition|)
block|{
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rangeMap
init|=
operator|(
name|RangeMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|equals
argument_list|(
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|asMapOfRanges
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|entriesByLowerBound
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

