begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterators
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * CompactLinkedHashSet is an implementation of a Set, which a predictable iteration order that  * matches the insertion order. All optional operations (adding and removing) are supported. All  * elements, including {@code null}, are permitted.  *  *<p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)  * constant time operations. Expected in the hashtable sense (depends on the hash function doing a  * good job of distributing the elements to the buckets to a distribution not far from uniform), and  * amortized since some operations can trigger a hash table resize.  *  *<p>This implementation consumes significantly less memory than {@code java.util.LinkedHashSet} or  * even {@code java.util.HashSet}, and places considerably less load on the garbage collector. Like  * {@code java.util.LinkedHashSet}, it offers insertion-order iteration, with identical behavior.  *  *<p>This class should not be assumed to be universally superior to {@code  * java.util.LinkedHashSet}. Generally speaking, this class reduces object allocation and memory  * consumption at the price of moderately increased constant factors of CPU. Only use this class  * when there is a specific reason to prioritize memory over CPU.  *  * @author Louis Wasserman  */
end_comment

begin_annotation
annotation|@
name|GwtIncompatible
end_annotation

begin_comment
comment|// not worth using in GWT for now
end_comment

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|CompactLinkedHashSet
name|class
name|CompactLinkedHashSet
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|CompactHashSet
argument_list|<
name|E
argument_list|>
block|{
comment|/** Creates an empty {@code CompactLinkedHashSet} instance. */
DECL|method|create ()
specifier|public
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|create
argument_list|()
block|{
return|return
operator|new
name|CompactLinkedHashSet
argument_list|<>
argument_list|()
return|;
block|}
comment|/**    * Creates a<i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the    * given collection in the order returned by the collection's iterator.    *    * @param collection the elements that the set should contain    * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)    */
DECL|method|create ( Collection<? extends E> collection)
specifier|public
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|create
argument_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
argument_list|)
block|{
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|set
operator|=
name|createWithExpectedSize
argument_list|(
name|collection
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|set
operator|.
name|addAll
argument_list|(
name|collection
argument_list|)
block|;
return|return
name|set
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    * Creates a {@code CompactLinkedHashSet} instance containing the given elements in unspecified    * order.    *    * @param elements the elements that the set should contain    * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)    */
end_comment

begin_annotation
annotation|@
name|SafeVarargs
end_annotation

begin_expr_stmt
DECL|method|create (E... elements)
specifier|public
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|create
argument_list|(
name|E
operator|...
name|elements
argument_list|)
block|{
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|set
operator|=
name|createWithExpectedSize
argument_list|(
name|elements
operator|.
name|length
argument_list|)
block|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|elements
argument_list|)
block|;
return|return
name|set
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    * Creates a {@code CompactLinkedHashSet} instance, with a high enough "initial capacity" that it    *<i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.    *    * @param expectedSize the number of elements you expect to add to the returned set    * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code    *     expectedSize} elements without resizing    * @throws IllegalArgumentException if {@code expectedSize} is negative    */
end_comment

begin_expr_stmt
DECL|method|createWithExpectedSize ( int expectedSize)
specifier|public
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|createWithExpectedSize
argument_list|(
name|int
name|expectedSize
argument_list|)
block|{
return|return
operator|new
name|CompactLinkedHashSet
argument_list|<>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
DECL|field|ENDPOINT
specifier|private
specifier|static
specifier|final
name|int
name|ENDPOINT
init|=
operator|-
literal|2
decl_stmt|;
end_decl_stmt

begin_comment
comment|// TODO(user): predecessors and successors should be collocated (reducing cache misses).
end_comment

begin_comment
comment|// Might also explore collocating all of [hash, next, predecessor, successor] fields of an
end_comment

begin_comment
comment|// entry in a *single* long[], though that reduces the maximum size of the set by a factor of 2
end_comment

begin_comment
comment|/**    * Pointer to the predecessor of an entry in insertion order. ENDPOINT indicates a node is the    * first node in insertion order; all values at indices â¥ {@link #size()} are UNSET.    */
end_comment

begin_decl_stmt
DECL|field|predecessor
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|int
index|[]
name|predecessor
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Pointer to the successor of an entry in insertion order. ENDPOINT indicates a node is the last    * node in insertion order; all values at indices â¥ {@link #size()} are UNSET.    */
end_comment

begin_decl_stmt
DECL|field|successor
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|int
index|[]
name|successor
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Pointer to the first node in the linked list, or {@code ENDPOINT} if there are no entries. */
end_comment

begin_decl_stmt
DECL|field|firstEntry
specifier|private
specifier|transient
name|int
name|firstEntry
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Pointer to the last node in the linked list, or {@code ENDPOINT} if there are no entries. */
end_comment

begin_decl_stmt
DECL|field|lastEntry
specifier|private
specifier|transient
name|int
name|lastEntry
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|CompactLinkedHashSet ()
name|CompactLinkedHashSet
argument_list|()
block|{
name|super
argument_list|()
block|;   }
DECL|method|CompactLinkedHashSet (int expectedSize)
name|CompactLinkedHashSet
argument_list|(
name|int
name|expectedSize
argument_list|)
block|{
name|super
argument_list|(
name|expectedSize
argument_list|)
block|;   }
expr|@
name|Override
DECL|method|init (int expectedSize)
name|void
name|init
argument_list|(
name|int
name|expectedSize
argument_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|expectedSize
argument_list|)
block|;
name|this
operator|.
name|firstEntry
operator|=
name|ENDPOINT
block|;
name|this
operator|.
name|lastEntry
operator|=
name|ENDPOINT
block|;   }
expr|@
name|Override
DECL|method|allocArrays ()
name|int
name|allocArrays
argument_list|()
block|{
name|int
name|expectedSize
operator|=
name|super
operator|.
name|allocArrays
argument_list|()
block|;
name|this
operator|.
name|predecessor
operator|=
operator|new
name|int
index|[
name|expectedSize
index|]
block|;
name|this
operator|.
name|successor
operator|=
operator|new
name|int
index|[
name|expectedSize
index|]
block|;
return|return
name|expectedSize
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|convertToHashFloodingResistantImplementation ()
name|Set
argument_list|<
name|E
argument_list|>
name|convertToHashFloodingResistantImplementation
parameter_list|()
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|result
init|=
name|super
operator|.
name|convertToHashFloodingResistantImplementation
argument_list|()
decl_stmt|;
name|this
operator|.
name|predecessor
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|successor
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/*    * For discussion of the safety of the following methods for operating on predecessors and    * successors, see the comments near the end of CompactHashMap, noting that the methods here call    * requirePredecessors() and requireSuccessors(), which are defined at the end of this file.    */
end_comment

begin_function
DECL|method|getPredecessor (int entry)
specifier|private
name|int
name|getPredecessor
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
name|requirePredecessors
argument_list|()
index|[
name|entry
index|]
operator|-
literal|1
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSuccessor (int entry)
name|int
name|getSuccessor
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
name|requireSuccessors
argument_list|()
index|[
name|entry
index|]
operator|-
literal|1
return|;
block|}
end_function

begin_function
DECL|method|setSuccessor (int entry, int succ)
specifier|private
name|void
name|setSuccessor
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|succ
parameter_list|)
block|{
name|requireSuccessors
argument_list|()
index|[
name|entry
index|]
operator|=
name|succ
operator|+
literal|1
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setPredecessor (int entry, int pred)
specifier|private
name|void
name|setPredecessor
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|pred
parameter_list|)
block|{
name|requirePredecessors
argument_list|()
index|[
name|entry
index|]
operator|=
name|pred
operator|+
literal|1
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setSucceeds (int pred, int succ)
specifier|private
name|void
name|setSucceeds
parameter_list|(
name|int
name|pred
parameter_list|,
name|int
name|succ
parameter_list|)
block|{
if|if
condition|(
name|pred
operator|==
name|ENDPOINT
condition|)
block|{
name|firstEntry
operator|=
name|succ
expr_stmt|;
block|}
else|else
block|{
name|setSuccessor
argument_list|(
name|pred
argument_list|,
name|succ
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|succ
operator|==
name|ENDPOINT
condition|)
block|{
name|lastEntry
operator|=
name|pred
expr_stmt|;
block|}
else|else
block|{
name|setPredecessor
argument_list|(
name|succ
argument_list|,
name|pred
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|insertEntry (int entryIndex, @ParametricNullness E object, int hash, int mask)
name|void
name|insertEntry
parameter_list|(
name|int
name|entryIndex
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|object
parameter_list|,
name|int
name|hash
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|super
operator|.
name|insertEntry
argument_list|(
name|entryIndex
argument_list|,
name|object
argument_list|,
name|hash
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|lastEntry
argument_list|,
name|entryIndex
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|entryIndex
argument_list|,
name|ENDPOINT
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|moveLastEntry (int dstIndex, int mask)
name|void
name|moveLastEntry
parameter_list|(
name|int
name|dstIndex
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|int
name|srcIndex
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|super
operator|.
name|moveLastEntry
argument_list|(
name|dstIndex
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|getPredecessor
argument_list|(
name|dstIndex
argument_list|)
argument_list|,
name|getSuccessor
argument_list|(
name|dstIndex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstIndex
operator|<
name|srcIndex
condition|)
block|{
name|setSucceeds
argument_list|(
name|getPredecessor
argument_list|(
name|srcIndex
argument_list|)
argument_list|,
name|dstIndex
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|dstIndex
argument_list|,
name|getSuccessor
argument_list|(
name|srcIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|requirePredecessors
argument_list|()
index|[
name|srcIndex
index|]
operator|=
literal|0
expr_stmt|;
name|requireSuccessors
argument_list|()
index|[
name|srcIndex
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|resizeEntries (int newCapacity)
name|void
name|resizeEntries
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|super
operator|.
name|resizeEntries
argument_list|(
name|newCapacity
argument_list|)
expr_stmt|;
name|predecessor
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|requirePredecessors
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|successor
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|requireSuccessors
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|firstEntryIndex ()
name|int
name|firstEntryIndex
parameter_list|()
block|{
return|return
name|firstEntry
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|adjustAfterRemove (int indexBeforeRemove, int indexRemoved)
name|int
name|adjustAfterRemove
parameter_list|(
name|int
name|indexBeforeRemove
parameter_list|,
name|int
name|indexRemoved
parameter_list|)
block|{
return|return
operator|(
name|indexBeforeRemove
operator|>=
name|size
argument_list|()
operator|)
condition|?
name|indexRemoved
else|:
name|indexBeforeRemove
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_annotation
annotation|@
name|Override
end_annotation

begin_annotation
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
end_annotation

begin_comment
comment|// b/192354773 in our checker affects toArray declarations
end_comment

begin_expr_stmt
DECL|method|toArray (T[] a)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|a
argument_list|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|()
block|{
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
name|this
argument_list|,
name|Spliterator
operator|.
name|ORDERED
operator||
name|Spliterator
operator|.
name|DISTINCT
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|needsAllocArrays
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|firstEntry
operator|=
name|ENDPOINT
expr_stmt|;
name|this
operator|.
name|lastEntry
operator|=
name|ENDPOINT
expr_stmt|;
comment|// Either both arrays are null or neither is, but we check both to satisfy the nullness checker.
if|if
condition|(
name|predecessor
operator|!=
literal|null
operator|&&
name|successor
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|predecessor
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|successor
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    * For discussion of the safety of the following methods, see the comments near the end of    * CompactHashMap.    */
end_comment

begin_function
DECL|method|requirePredecessors ()
specifier|private
name|int
index|[]
name|requirePredecessors
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|predecessor
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|requireSuccessors ()
specifier|private
name|int
index|[]
name|requireSuccessors
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|successor
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*    * We don't define getPredecessor+getSuccessor and setPredecessor+setSuccessor here because    * they're defined above -- including logic to add and subtract 1 to map between the values stored    * in the predecessor/successor arrays and the indexes in the elements array that they identify.    */
end_comment

unit|}
end_unit

