begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|NullnessCasts
operator|.
name|uncheckedCastNullableTToT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A general-purpose bimap implementation using any two backing {@code Map} instances.  *  *<p>Note that this class contains {@code equals()} calls that keep it from supporting {@code  * IdentityHashMap} backing maps.  *  * @author Kevin Bourrillion  * @author Mike Bostock  */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|AbstractBiMap
specifier|abstract
name|class
name|AbstractBiMap
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|ForwardingMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
expr|implements
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|,
name|Serializable
block|{
DECL|field|delegate
specifier|private
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
block|;   @
DECL|field|inverse
name|RetainedWith
specifier|transient
name|AbstractBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
block|;
comment|/** Package-private constructor for creating a map-backed bimap. */
DECL|method|AbstractBiMap (Map<K, V> forward, Map<V, K> backward)
name|AbstractBiMap
argument_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|forward
argument_list|,
name|Map
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|backward
argument_list|)
block|{
name|setDelegates
argument_list|(
name|forward
argument_list|,
name|backward
argument_list|)
block|;   }
comment|/** Private constructor for inverse bimap. */
DECL|method|AbstractBiMap (Map<K, V> backward, AbstractBiMap<V, K> forward)
specifier|private
name|AbstractBiMap
argument_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backward
argument_list|,
name|AbstractBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|forward
argument_list|)
block|{
name|delegate
operator|=
name|backward
block|;
name|inverse
operator|=
name|forward
block|;   }
expr|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
argument_list|()
block|{
return|return
name|delegate
return|;
block|}
comment|/** Returns its input, or throws an exception if this is not a valid key. */
expr|@
name|CanIgnoreReturnValue
expr|@
name|ParametricNullness
DECL|method|checkKey (@arametricNullness K key)
name|K
name|checkKey
argument_list|(
annotation|@
name|ParametricNullness
name|K
name|key
argument_list|)
block|{
return|return
name|key
return|;
block|}
end_expr_stmt

begin_comment
comment|/** Returns its input, or throws an exception if this is not a valid value. */
end_comment

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|ParametricNullness
DECL|method|checkValue (@arametricNullness V value)
name|V
name|checkValue
parameter_list|(
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
end_function

begin_comment
comment|/**    * Specifies the delegate maps going in each direction. Called by the constructor and by    * subclasses during deserialization.    */
end_comment

begin_function
DECL|method|setDelegates (Map<K, V> forward, Map<V, K> backward)
name|void
name|setDelegates
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|forward
parameter_list|,
name|Map
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|backward
parameter_list|)
block|{
name|checkState
argument_list|(
name|delegate
operator|==
literal|null
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|inverse
operator|==
literal|null
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|forward
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|backward
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|forward
operator|!=
name|backward
argument_list|)
expr_stmt|;
name|delegate
operator|=
name|forward
expr_stmt|;
name|inverse
operator|=
name|makeInverse
argument_list|(
name|backward
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|makeInverse (Map<V, K> backward)
name|AbstractBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|makeInverse
parameter_list|(
name|Map
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|backward
parameter_list|)
block|{
return|return
operator|new
name|Inverse
argument_list|<>
argument_list|(
name|backward
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|setInverse (AbstractBiMap<V, K> inverse)
name|void
name|setInverse
parameter_list|(
name|AbstractBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|)
block|{
name|this
operator|.
name|inverse
operator|=
name|inverse
expr_stmt|;
block|}
end_function

begin_comment
comment|// Query Operations (optimizations)
end_comment

begin_function
annotation|@
name|Override
DECL|method|containsValue (@heckForNull Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|value
parameter_list|)
block|{
return|return
name|inverse
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// Modification Operations
end_comment

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|put (@arametricNullness K key, @ParametricNullness V value)
specifier|public
name|V
name|put
parameter_list|(
annotation|@
name|ParametricNullness
name|K
name|key
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
return|return
name|putInBothMaps
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|forcePut (@arametricNullness K key, @ParametricNullness V value)
specifier|public
name|V
name|forcePut
parameter_list|(
annotation|@
name|ParametricNullness
name|K
name|key
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|)
block|{
return|return
name|putInBothMaps
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|CheckForNull
DECL|method|putInBothMaps (@arametricNullness K key, @ParametricNullness V value, boolean force)
specifier|private
name|V
name|putInBothMaps
parameter_list|(
annotation|@
name|ParametricNullness
name|K
name|key
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|value
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|checkKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|boolean
name|containedKey
init|=
name|containsKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|containedKey
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
if|if
condition|(
name|force
condition|)
block|{
name|inverse
argument_list|()
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkArgument
argument_list|(
operator|!
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"value already present: %s"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|V
name|oldValue
init|=
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|updateInverseMap
argument_list|(
name|key
argument_list|,
name|containedKey
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
end_function

begin_function
DECL|method|updateInverseMap ( @arametricNullness K key, boolean containedKey, @CheckForNull V oldValue, @ParametricNullness V newValue)
specifier|private
name|void
name|updateInverseMap
parameter_list|(
annotation|@
name|ParametricNullness
name|K
name|key
parameter_list|,
name|boolean
name|containedKey
parameter_list|,
annotation|@
name|CheckForNull
name|V
name|oldValue
parameter_list|,
annotation|@
name|ParametricNullness
name|V
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|containedKey
condition|)
block|{
comment|// The cast is safe because of the containedKey check.
name|removeFromInverseMap
argument_list|(
name|uncheckedCastNullableTToT
argument_list|(
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inverse
operator|.
name|delegate
operator|.
name|put
argument_list|(
name|newValue
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|remove (@heckForNull Object key)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsKey
argument_list|(
name|key
argument_list|)
condition|?
name|removeFromBothMaps
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|ParametricNullness
DECL|method|removeFromBothMaps (@heckForNull Object key)
specifier|private
name|V
name|removeFromBothMaps
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
comment|// The cast is safe because the callers of this method first check that the key is present.
name|V
name|oldValue
init|=
name|uncheckedCastNullableTToT
argument_list|(
name|delegate
operator|.
name|remove
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|removeFromInverseMap
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
end_function

begin_function
DECL|method|removeFromInverseMap (@arametricNullness V oldValue)
specifier|private
name|void
name|removeFromInverseMap
parameter_list|(
annotation|@
name|ParametricNullness
name|V
name|oldValue
parameter_list|)
block|{
name|inverse
operator|.
name|delegate
operator|.
name|remove
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Bulk Operations
end_comment

begin_function
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|replaceAll (BiFunction<? super K, ? super V, ? extends V> function)
specifier|public
name|void
name|replaceAll
parameter_list|(
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|function
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|.
name|replaceAll
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|inverse
operator|.
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|broken
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|itr
init|=
name|this
operator|.
name|delegate
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|K
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|K
name|conflict
init|=
name|inverse
operator|.
name|delegate
operator|.
name|putIfAbsent
argument_list|(
name|v
argument_list|,
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflict
operator|!=
literal|null
condition|)
block|{
name|broken
operator|=
name|entry
expr_stmt|;
comment|// We're definitely going to throw, but we'll try to keep the BiMap in an internally
comment|// consistent state by removing the bad entry.
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|broken
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value already present: "
operator|+
name|broken
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inverse
operator|.
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|// Views
end_comment

begin_function
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
return|return
name|inverse
return|;
block|}
end_function

begin_decl_stmt
DECL|field|keySet
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|result
init|=
name|keySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|keySet
operator|=
operator|new
name|KeySet
argument_list|()
else|:
name|result
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|KeySet
specifier|private
class|class
name|KeySet
extends|extends
name|ForwardingSet
argument_list|<
name|K
argument_list|>
block|{
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Set
argument_list|<
name|K
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|AbstractBiMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (@heckForNull Object key)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|removeFromBothMaps
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> keysToRemove)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|keysToRemove
parameter_list|)
block|{
return|return
name|standardRemoveAll
argument_list|(
name|keysToRemove
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> keysToRetain)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|keysToRetain
parameter_list|)
block|{
return|return
name|standardRetainAll
argument_list|(
name|keysToRetain
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|keyIterator
argument_list|(
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_decl_stmt
DECL|field|valueSet
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Set
argument_list|<
name|V
argument_list|>
name|valueSet
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
comment|/*      * We can almost reuse the inverse's keySet, except we have to fix the      * iteration order so that it is consistent with the forward map.      */
name|Set
argument_list|<
name|V
argument_list|>
name|result
init|=
name|valueSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|valueSet
operator|=
operator|new
name|ValueSet
argument_list|()
else|:
name|result
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|ValueSet
specifier|private
class|class
name|ValueSet
extends|extends
name|ForwardingSet
argument_list|<
name|V
argument_list|>
block|{
DECL|field|valuesDelegate
specifier|final
name|Set
argument_list|<
name|V
argument_list|>
name|valuesDelegate
init|=
name|inverse
operator|.
name|keySet
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Set
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|valuesDelegate
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|valueIterator
argument_list|(
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|standardToArray
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
comment|// bug in our checker's handling of toArray signatures
DECL|method|toArray (T[] array)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|array
argument_list|)
block|{
return|return
name|standardToArray
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|standardToString
argument_list|()
return|;
block|}
block|}
end_class

begin_decl_stmt
DECL|field|entrySet
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|entrySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|entrySet
operator|=
operator|new
name|EntrySet
argument_list|()
else|:
name|result
return|;
block|}
end_function

begin_class
DECL|class|BiMapEntry
class|class
name|BiMapEntry
extends|extends
name|ForwardingMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
DECL|method|BiMapEntry (Entry<K, V> delegate)
name|BiMapEntry
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (V value)
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|checkValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Preconditions keep the map and inverse consistent.
name|checkState
argument_list|(
name|entrySet
argument_list|()
operator|.
name|contains
argument_list|(
name|this
argument_list|)
argument_list|,
literal|"entry no longer in map"
argument_list|)
expr_stmt|;
comment|// similar to putInBothMaps, but set via entry
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
name|checkArgument
argument_list|(
operator|!
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"value already present: %s"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|V
name|oldValue
init|=
name|delegate
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|get
argument_list|(
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"entry no longer in map"
argument_list|)
expr_stmt|;
name|updateInverseMap
argument_list|(
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
end_class

begin_function
DECL|method|entrySetIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySetIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|delegate
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|CheckForNull
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
operator|new
name|BiMapEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no calls to next() since the last call to remove()"
argument_list|)
throw|;
block|}
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|removeFromInverseMap
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|entry
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|;
block|}
end_function

begin_class
annotation|@
name|WeakOuter
DECL|class|EntrySet
specifier|private
class|class
name|EntrySet
extends|extends
name|ForwardingSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|esDelegate
specifier|final
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|esDelegate
init|=
name|delegate
operator|.
name|entrySet
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|esDelegate
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|AbstractBiMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (@heckForNull Object object)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|object
parameter_list|)
block|{
comment|/*        * The instanceof check is redundant because esDelegate.contains(object), but we include it to        * satisfy our nullness checker.        */
if|if
condition|(
operator|!
name|esDelegate
operator|.
name|contains
argument_list|(
name|object
argument_list|)
operator|||
operator|!
operator|(
name|object
operator|instanceof
name|Entry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|inverse
operator|.
name|delegate
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        * Remove the mapping in inverse before removing from esDelegate because        * if entry is part of esDelegate, entry might be invalidated after the        * mapping is removed from esDelegate.        */
name|esDelegate
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|entrySetIterator
argument_list|()
return|;
block|}
comment|// See java.util.Collections.CheckedEntrySet for details on attacks.
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
comment|/*        * standardToArray returns `@Nullable Object[]` rather than `Object[]` but only because it can        * be used with collections that may contain null. This collection never contains nulls, so we        * can treat it as a plain `Object[]`.        */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
name|Object
index|[]
name|result
init|=
name|standardToArray
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
comment|// bug in our checker's handling of toArray signatures
DECL|method|toArray (T[] array)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
index|[]
name|toArray
argument_list|(
name|T
index|[]
name|array
argument_list|)
block|{
return|return
name|standardToArray
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@heckForNull Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|containsEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardContainsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRemoveAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|standardRetainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/** The inverse of any other {@code AbstractBiMap} subclass. */
end_comment

begin_expr_stmt
DECL|class|Inverse
specifier|static
name|class
name|Inverse
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|AbstractBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|Inverse (Map<K, V> backward, AbstractBiMap<V, K> forward)
name|Inverse
argument_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|backward
argument_list|,
name|AbstractBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|forward
argument_list|)
block|{
name|super
argument_list|(
name|backward
argument_list|,
name|forward
argument_list|)
block|;     }
comment|/*      * Serialization stores the forward bimap, the inverse of this inverse.      * Deserialization calls inverse() on the forward bimap and returns that      * inverse.      *      * If a bimap and its inverse are serialized together, the deserialized      * instances have inverse() methods that return the other.      */
expr|@
name|Override
expr|@
name|ParametricNullness
DECL|method|checkKey (@arametricNullness K key)
name|K
name|checkKey
argument_list|(
annotation|@
name|ParametricNullness
name|K
name|key
argument_list|)
block|{
return|return
name|inverse
operator|.
name|checkValue
argument_list|(
name|key
argument_list|)
return|;
block|}
expr|@
name|Override
expr|@
name|ParametricNullness
DECL|method|checkValue (@arametricNullness V value)
name|V
name|checkValue
argument_list|(
annotation|@
name|ParametricNullness
name|V
name|value
argument_list|)
block|{
return|return
name|inverse
operator|.
name|checkKey
argument_list|(
name|value
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/** @serialData the forward bimap */
end_comment

begin_function
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectOutputStream
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|stream
operator|.
name|writeObject
argument_list|(
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectInputStream
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// reading data stored by writeObject
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|setInverse
argument_list|(
operator|(
name|AbstractBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
operator|)
name|stream
operator|.
name|readObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|GwtIncompatible
comment|// Not needed in the emulated source.
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|inverse
argument_list|()
operator|.
name|inverse
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
annotation|@
name|GwtIncompatible
comment|// Not needed in emulated source.
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|}    @
name|GwtIncompatible
comment|// Not needed in emulated source.
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

unit|}
end_unit

