begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|Immutable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link ImmutableTable} holding an arbitrary number of  * cells.  *  * @author Gregory Kick  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|RegularImmutableTable
specifier|abstract
class|class
name|RegularImmutableTable
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
block|{
DECL|method|RegularImmutableTable ()
specifier|private
name|RegularImmutableTable
parameter_list|()
block|{}
DECL|field|values
specifier|private
specifier|transient
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
decl_stmt|;
DECL|method|values ()
annotation|@
name|Override
specifier|public
specifier|final
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|result
init|=
name|values
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|values
operator|=
name|createValues
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|createValues ()
specifier|abstract
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
function_decl|;
DECL|method|size ()
annotation|@
name|Override
specifier|public
specifier|abstract
name|int
name|size
parameter_list|()
function_decl|;
DECL|method|containsValue (@ullable Object value)
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|field|cellSet
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellSet
decl_stmt|;
annotation|@
name|Override
DECL|method|cellSet ()
specifier|public
specifier|final
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellSet
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|cellSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|cellSet
operator|=
name|createCellSet
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|createCellSet ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createCellSet
parameter_list|()
function_decl|;
DECL|class|CellSet
specifier|abstract
class|class
name|CellSet
extends|extends
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|RegularImmutableTable
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullable Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Cell
condition|)
block|{
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|Object
name|value
init|=
name|get
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|forCells ( List<Cell<R, C, V>> cells, @Nullable final Comparator<? super R> rowComparator, @Nullable final Comparator<? super C> columnComparator)
specifier|static
specifier|final
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|RegularImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|forCells
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cells
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|R
argument_list|>
name|rowComparator
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|C
argument_list|>
name|columnComparator
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|cells
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowComparator
operator|!=
literal|null
operator|||
name|columnComparator
operator|!=
literal|null
condition|)
block|{
comment|/*        * This sorting logic leads to a cellSet() ordering that may not be        * expected and that isn't documented in the Javadoc. If a row Comparator        * is provided, cellSet() iterates across the columns in the first row,        * the columns in the second row, etc. If a column Comparator is provided        * but a row Comparator isn't, cellSet() iterates across the rows in the        * first column, the rows in the second column, etc.        */
name|Comparator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|cell1
parameter_list|,
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|cell2
parameter_list|)
block|{
name|int
name|rowCompare
init|=
operator|(
name|rowComparator
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|rowComparator
operator|.
name|compare
argument_list|(
name|cell1
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell2
operator|.
name|getRowKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowCompare
operator|!=
literal|0
condition|)
block|{
return|return
name|rowCompare
return|;
block|}
return|return
operator|(
name|columnComparator
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|columnComparator
operator|.
name|compare
argument_list|(
name|cell1
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell2
operator|.
name|getColumnKey
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cells
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
return|return
name|forCellsInternal
argument_list|(
name|cells
argument_list|,
name|rowComparator
argument_list|,
name|columnComparator
argument_list|)
return|;
block|}
DECL|method|forCells ( Iterable<Cell<R, C, V>> cells)
specifier|static
specifier|final
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|RegularImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|forCells
parameter_list|(
name|Iterable
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cells
parameter_list|)
block|{
return|return
name|forCellsInternal
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * A factory that chooses the most space-efficient representation of the    * table.    */
specifier|private
specifier|static
specifier|final
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|RegularImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
DECL|method|forCellsInternal (Iterable<Cell<R, C, V>> cells, @Nullable Comparator<? super R> rowComparator, @Nullable Comparator<? super C> columnComparator)
name|forCellsInternal
parameter_list|(
name|Iterable
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cells
parameter_list|,
annotation|@
name|Nullable
name|Comparator
argument_list|<
name|?
super|super
name|R
argument_list|>
name|rowComparator
parameter_list|,
annotation|@
name|Nullable
name|Comparator
argument_list|<
name|?
super|super
name|C
argument_list|>
name|columnComparator
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|R
argument_list|>
name|rowSpaceBuilder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|C
argument_list|>
name|columnSpaceBuilder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|cells
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|cell
range|:
name|cellList
control|)
block|{
name|rowSpaceBuilder
operator|.
name|add
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|columnSpaceBuilder
operator|.
name|add
argument_list|(
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ImmutableSet
argument_list|<
name|R
argument_list|>
name|rowSpace
init|=
name|rowSpaceBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowComparator
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|R
argument_list|>
name|rowList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rowSpace
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|rowList
argument_list|,
name|rowComparator
argument_list|)
expr_stmt|;
name|rowSpace
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|rowList
argument_list|)
expr_stmt|;
block|}
name|ImmutableSet
argument_list|<
name|C
argument_list|>
name|columnSpace
init|=
name|columnSpaceBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnComparator
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|C
argument_list|>
name|columnList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnSpace
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|columnList
argument_list|,
name|columnComparator
argument_list|)
expr_stmt|;
name|columnSpace
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|columnList
argument_list|)
expr_stmt|;
block|}
comment|// use a dense table if more than half of the cells have values
comment|// TODO(gak): tune this condition based on empirical evidence
return|return
operator|(
name|cellList
operator|.
name|size
argument_list|()
operator|>
operator|(
operator|(
name|rowSpace
operator|.
name|size
argument_list|()
operator|*
name|columnSpace
operator|.
name|size
argument_list|()
operator|)
operator|/
literal|2
operator|)
operator|)
condition|?
operator|new
name|DenseImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|(
name|cellList
argument_list|,
name|rowSpace
argument_list|,
name|columnSpace
argument_list|)
else|:
operator|new
name|SparseImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|(
name|cellList
argument_list|,
name|rowSpace
argument_list|,
name|columnSpace
argument_list|)
return|;
block|}
comment|/**    * A {@code RegularImmutableTable} optimized for sparse data.    */
annotation|@
name|Immutable
annotation|@
name|VisibleForTesting
DECL|class|SparseImmutableTable
specifier|static
specifier|final
class|class
name|SparseImmutableTable
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
extends|extends
name|RegularImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
block|{
DECL|field|rowMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
decl_stmt|;
DECL|field|columnMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
decl_stmt|;
DECL|field|iterationOrderRow
specifier|private
specifier|final
name|int
index|[]
name|iterationOrderRow
decl_stmt|;
DECL|field|iterationOrderColumn
specifier|private
specifier|final
name|int
index|[]
name|iterationOrderColumn
decl_stmt|;
DECL|method|SparseImmutableTable (ImmutableList<Cell<R, C, V>> cellList, ImmutableSet<R> rowSpace, ImmutableSet<C> columnSpace)
name|SparseImmutableTable
parameter_list|(
name|ImmutableList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellList
parameter_list|,
name|ImmutableSet
argument_list|<
name|R
argument_list|>
name|rowSpace
parameter_list|,
name|ImmutableSet
argument_list|<
name|C
argument_list|>
name|columnSpace
parameter_list|)
block|{
name|Map
argument_list|<
name|R
argument_list|,
name|Integer
argument_list|>
name|rowIndex
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rows
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|R
name|row
range|:
name|rowSpace
control|)
block|{
name|rowIndex
operator|.
name|put
argument_list|(
name|row
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|.
name|put
argument_list|(
name|row
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columns
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|C
name|col
range|:
name|columnSpace
control|)
block|{
name|columns
operator|.
name|put
argument_list|(
name|col
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|iterationOrderRow
init|=
operator|new
name|int
index|[
name|cellList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|iterationOrderColumn
init|=
operator|new
name|int
index|[
name|cellList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|cell
init|=
name|cellList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|R
name|rowKey
init|=
name|cell
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|C
name|columnKey
init|=
name|cell
operator|.
name|getColumnKey
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|cell
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|iterationOrderRow
index|[
name|i
index|]
operator|=
name|rowIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|thisRow
init|=
name|rows
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|iterationOrderColumn
index|[
name|i
index|]
operator|=
name|thisRow
operator|.
name|size
argument_list|()
expr_stmt|;
name|V
name|oldValue
init|=
name|thisRow
operator|.
name|put
argument_list|(
name|columnKey
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate value for row="
operator|+
name|rowKey
operator|+
literal|", column="
operator|+
name|columnKey
operator|+
literal|": "
operator|+
name|value
operator|+
literal|", "
operator|+
name|oldValue
argument_list|)
throw|;
block|}
name|columns
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|iterationOrderRow
operator|=
name|iterationOrderRow
expr_stmt|;
name|this
operator|.
name|iterationOrderColumn
operator|=
name|iterationOrderColumn
expr_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|row
range|:
name|rows
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rowBuilder
operator|.
name|put
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|row
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rowMap
operator|=
name|rowBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|col
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|put
argument_list|(
name|col
operator|.
name|getKey
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|col
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columnMap
operator|=
name|columnBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|column (C columnKey)
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
comment|// value maps are guaranteed to be immutable maps
return|return
name|Objects
operator|.
name|firstNonNull
argument_list|(
operator|(
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
operator|)
name|columnMap
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|R
argument_list|,
name|V
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|columnKeySet ()
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|C
argument_list|>
name|columnKeySet
parameter_list|()
block|{
return|return
name|columnMap
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|columnMap ()
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
return|return
name|columnMap
return|;
block|}
DECL|method|row (R rowKey)
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
comment|// value maps are guaranteed to be immutable maps
return|return
name|Objects
operator|.
name|firstNonNull
argument_list|(
operator|(
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
operator|)
name|rowMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|C
argument_list|,
name|V
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|rowKeySet ()
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|R
argument_list|>
name|rowKeySet
parameter_list|()
block|{
return|return
name|rowMap
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|rowMap ()
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
return|return
name|rowMap
return|;
block|}
DECL|method|contains (@ullable Object rowKey, @Nullable Object columnKey)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
init|=
name|rowMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|row
operator|!=
literal|null
operator|)
operator|&&
name|row
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|method|containsColumn (@ullable Object columnKey)
annotation|@
name|Override
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|columnMap
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|method|containsRow (@ullable Object rowKey)
annotation|@
name|Override
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|)
block|{
return|return
name|rowMap
operator|.
name|containsKey
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
DECL|method|get (@ullable Object rowKey, @Nullable Object columnKey)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
init|=
name|rowMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|row
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|row
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|ImmutableList
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|iterationOrderRow
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|rowIndex
init|=
name|iterationOrderRow
index|[
name|index
index|]
decl_stmt|;
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
init|=
operator|(
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
operator|)
name|rowMap
operator|.
name|values
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
name|int
name|columnIndex
init|=
name|iterationOrderColumn
index|[
name|index
index|]
decl_stmt|;
return|return
name|row
operator|.
name|values
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|iterationOrderRow
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|createCellSet ()
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createCellSet
parameter_list|()
block|{
return|return
operator|new
name|SparseCellSet
argument_list|()
return|;
block|}
DECL|class|SparseCellSet
class|class
name|SparseCellSet
extends|extends
name|CellSet
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createAsList ()
name|ImmutableList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createAsList
parameter_list|()
block|{
return|return
operator|new
name|ImmutableAsList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|rowIndex
init|=
name|iterationOrderRow
index|[
name|index
index|]
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowEntry
init|=
name|rowMap
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
init|=
operator|(
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
operator|)
name|rowEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|columnIndex
init|=
name|iterationOrderColumn
index|[
name|index
index|]
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|colEntry
init|=
name|row
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
return|return
name|Tables
operator|.
name|immutableCell
argument_list|(
name|rowEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|colEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|colEntry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|ImmutableCollection
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|delegateCollection
parameter_list|()
block|{
return|return
name|SparseCellSet
operator|.
name|this
return|;
block|}
block|}
return|;
block|}
block|}
block|}
comment|/**    * An immutable map implementation backed by an indexed nullable array, used in    * DenseImmutableTable.    */
DECL|class|ImmutableArrayMap
specifier|private
specifier|abstract
specifier|static
class|class
name|ImmutableArrayMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|ImmutableArrayMap (int size)
name|ImmutableArrayMap
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
DECL|method|keyToIndex ()
specifier|abstract
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|Integer
argument_list|>
name|keyToIndex
parameter_list|()
function_decl|;
comment|// True if getValue never returns null.
DECL|method|isFull ()
specifier|private
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|size
operator|==
name|keyToIndex
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getKey (int index)
name|K
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|keyToIndex
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|getValue (int keyIndex)
annotation|@
name|Nullable
specifier|abstract
name|V
name|getValue
parameter_list|(
name|int
name|keyIndex
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createKeySet ()
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
name|isFull
argument_list|()
condition|?
name|keyToIndex
argument_list|()
operator|.
name|keySet
argument_list|()
else|:
name|super
operator|.
name|createKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
name|Integer
name|keyIndex
init|=
name|keyToIndex
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|keyIndex
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getValue
argument_list|(
name|keyIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
if|if
condition|(
name|isFull
argument_list|()
condition|)
block|{
return|return
operator|new
name|ImmutableMapEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|ImmutableArrayMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIndexedListIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|getKey
argument_list|(
name|index
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableMapEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|ImmutableArrayMap
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxIndex
init|=
name|keyToIndex
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|computeNext
parameter_list|()
block|{
for|for
control|(
name|index
operator|++
init|;
name|index
operator|<
name|maxIndex
condition|;
name|index
operator|++
control|)
block|{
name|V
name|value
init|=
name|getValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|getKey
argument_list|(
name|index
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
block|}
comment|/**    * A {@code RegularImmutableTable} optimized for dense data.    */
annotation|@
name|Immutable
annotation|@
name|VisibleForTesting
DECL|class|DenseImmutableTable
specifier|static
specifier|final
class|class
name|DenseImmutableTable
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
extends|extends
name|RegularImmutableTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
block|{
DECL|field|rowKeyToIndex
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Integer
argument_list|>
name|rowKeyToIndex
decl_stmt|;
DECL|field|columnKeyToIndex
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Integer
argument_list|>
name|columnKeyToIndex
decl_stmt|;
DECL|field|rowMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
decl_stmt|;
DECL|field|columnMap
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
decl_stmt|;
DECL|field|rowCounts
specifier|private
specifier|final
name|int
index|[]
name|rowCounts
decl_stmt|;
DECL|field|columnCounts
specifier|private
specifier|final
name|int
index|[]
name|columnCounts
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|V
index|[]
index|[]
name|values
decl_stmt|;
DECL|field|iterationOrderRow
specifier|private
specifier|final
name|int
index|[]
name|iterationOrderRow
decl_stmt|;
DECL|field|iterationOrderColumn
specifier|private
specifier|final
name|int
index|[]
name|iterationOrderColumn
decl_stmt|;
DECL|method|makeIndex ( ImmutableSet<E> set)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableMap
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
name|makeIndex
parameter_list|(
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|set
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
name|indexBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|E
name|key
range|:
name|set
control|)
block|{
name|indexBuilder
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|indexBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|DenseImmutableTable (ImmutableList<Cell<R, C, V>> cellList, ImmutableSet<R> rowSpace, ImmutableSet<C> columnSpace)
name|DenseImmutableTable
parameter_list|(
name|ImmutableList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellList
parameter_list|,
name|ImmutableSet
argument_list|<
name|R
argument_list|>
name|rowSpace
parameter_list|,
name|ImmutableSet
argument_list|<
name|C
argument_list|>
name|columnSpace
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
index|[]
index|[]
name|array
init|=
operator|(
name|V
index|[]
index|[]
operator|)
operator|new
name|Object
index|[
name|rowSpace
operator|.
name|size
argument_list|()
index|]
index|[
name|columnSpace
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|this
operator|.
name|values
operator|=
name|array
expr_stmt|;
name|this
operator|.
name|rowKeyToIndex
operator|=
name|makeIndex
argument_list|(
name|rowSpace
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnKeyToIndex
operator|=
name|makeIndex
argument_list|(
name|columnSpace
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[
name|rowKeyToIndex
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|columnCounts
operator|=
operator|new
name|int
index|[
name|columnKeyToIndex
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
index|[]
name|iterationOrderRow
init|=
operator|new
name|int
index|[
name|cellList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|iterationOrderColumn
init|=
operator|new
name|int
index|[
name|cellList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|cell
init|=
name|cellList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|R
name|rowKey
init|=
name|cell
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|C
name|columnKey
init|=
name|cell
operator|.
name|getColumnKey
argument_list|()
decl_stmt|;
name|int
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|int
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
name|V
name|existingValue
init|=
name|values
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
decl_stmt|;
name|checkArgument
argument_list|(
name|existingValue
operator|==
literal|null
argument_list|,
literal|"duplicate key: (%s, %s)"
argument_list|,
name|rowKey
argument_list|,
name|columnKey
argument_list|)
expr_stmt|;
name|values
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
operator|=
name|cell
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|rowCounts
index|[
name|rowIndex
index|]
operator|++
expr_stmt|;
name|columnCounts
index|[
name|columnIndex
index|]
operator|++
expr_stmt|;
name|iterationOrderRow
index|[
name|i
index|]
operator|=
name|rowIndex
expr_stmt|;
name|iterationOrderColumn
index|[
name|i
index|]
operator|=
name|columnIndex
expr_stmt|;
block|}
name|this
operator|.
name|iterationOrderRow
operator|=
name|iterationOrderRow
expr_stmt|;
name|this
operator|.
name|iterationOrderColumn
operator|=
name|iterationOrderColumn
expr_stmt|;
name|this
operator|.
name|rowMap
operator|=
operator|new
name|RowMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|columnMap
operator|=
operator|new
name|ColumnMap
argument_list|()
expr_stmt|;
block|}
DECL|class|Row
specifier|private
specifier|final
class|class
name|Row
extends|extends
name|ImmutableArrayMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
block|{
DECL|field|rowIndex
specifier|private
specifier|final
name|int
name|rowIndex
decl_stmt|;
DECL|method|Row (int rowIndex)
name|Row
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
name|super
argument_list|(
name|rowCounts
index|[
name|rowIndex
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowIndex
operator|=
name|rowIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keyToIndex ()
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Integer
argument_list|>
name|keyToIndex
parameter_list|()
block|{
return|return
name|columnKeyToIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (int keyIndex)
name|V
name|getValue
parameter_list|(
name|int
name|keyIndex
parameter_list|)
block|{
return|return
name|values
index|[
name|rowIndex
index|]
index|[
name|keyIndex
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|Column
specifier|private
specifier|final
class|class
name|Column
extends|extends
name|ImmutableArrayMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
block|{
DECL|field|columnIndex
specifier|private
specifier|final
name|int
name|columnIndex
decl_stmt|;
DECL|method|Column (int columnIndex)
name|Column
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnCounts
index|[
name|columnIndex
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnIndex
operator|=
name|columnIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keyToIndex ()
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Integer
argument_list|>
name|keyToIndex
parameter_list|()
block|{
return|return
name|rowKeyToIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (int keyIndex)
name|V
name|getValue
parameter_list|(
name|int
name|keyIndex
parameter_list|)
block|{
return|return
name|values
index|[
name|keyIndex
index|]
index|[
name|columnIndex
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|RowMap
specifier|private
specifier|final
class|class
name|RowMap
extends|extends
name|ImmutableArrayMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|RowMap ()
specifier|private
name|RowMap
parameter_list|()
block|{
name|super
argument_list|(
name|rowCounts
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keyToIndex ()
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Integer
argument_list|>
name|keyToIndex
parameter_list|()
block|{
return|return
name|rowKeyToIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (int keyIndex)
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|getValue
parameter_list|(
name|int
name|keyIndex
parameter_list|)
block|{
return|return
operator|new
name|Row
argument_list|(
name|keyIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ColumnMap
specifier|private
specifier|final
class|class
name|ColumnMap
extends|extends
name|ImmutableArrayMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|ColumnMap ()
specifier|private
name|ColumnMap
parameter_list|()
block|{
name|super
argument_list|(
name|columnCounts
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keyToIndex ()
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Integer
argument_list|>
name|keyToIndex
parameter_list|()
block|{
return|return
name|columnKeyToIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getValue (int keyIndex)
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|getValue
parameter_list|(
name|int
name|keyIndex
parameter_list|)
block|{
return|return
operator|new
name|Column
argument_list|(
name|keyIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|column (C columnKey)
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
name|Integer
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|Column
argument_list|(
name|columnIndex
argument_list|)
return|;
block|}
block|}
DECL|method|columnKeySet ()
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|C
argument_list|>
name|columnKeySet
parameter_list|()
block|{
return|return
name|columnKeyToIndex
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|columnMap ()
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
return|return
name|columnMap
return|;
block|}
DECL|method|contains (@ullable Object rowKey, @Nullable Object columnKey)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
operator|(
name|get
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
DECL|method|containsColumn (@ullable Object columnKey)
annotation|@
name|Override
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|columnKeyToIndex
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|method|containsRow (@ullable Object rowKey)
annotation|@
name|Override
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|)
block|{
return|return
name|rowKeyToIndex
operator|.
name|containsKey
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
DECL|method|get (@ullable Object rowKey, @Nullable Object columnKey)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
name|Integer
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|Integer
name|columnIndex
init|=
name|columnKeyToIndex
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|rowIndex
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnIndex
operator|==
literal|null
operator|)
operator|)
condition|?
literal|null
else|:
name|values
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
return|;
block|}
DECL|method|row (R rowKey)
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|Integer
name|rowIndex
init|=
name|rowKeyToIndex
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowIndex
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|Row
argument_list|(
name|rowIndex
argument_list|)
return|;
block|}
block|}
DECL|method|rowKeySet ()
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|R
argument_list|>
name|rowKeySet
parameter_list|()
block|{
return|return
name|rowKeyToIndex
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|rowMap ()
specifier|public
name|ImmutableMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
return|return
name|rowMap
return|;
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|ImmutableList
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|iterationOrderRow
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
index|[
name|iterationOrderRow
index|[
name|index
index|]
index|]
index|[
name|iterationOrderColumn
index|[
name|index
index|]
index|]
return|;
block|}
annotation|@
name|Override
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|iterationOrderRow
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|createCellSet ()
name|ImmutableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createCellSet
parameter_list|()
block|{
return|return
operator|new
name|DenseCellSet
argument_list|()
return|;
block|}
DECL|class|DenseCellSet
class|class
name|DenseCellSet
extends|extends
name|CellSet
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createAsList ()
name|ImmutableList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createAsList
parameter_list|()
block|{
return|return
operator|new
name|ImmutableAsList
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|rowIndex
init|=
name|iterationOrderRow
index|[
name|index
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|iterationOrderColumn
index|[
name|index
index|]
decl_stmt|;
name|R
name|rowKey
init|=
name|rowKeySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
name|C
name|columnKey
init|=
name|columnKeySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
name|V
name|value
init|=
name|values
index|[
name|rowIndex
index|]
index|[
name|columnIndex
index|]
decl_stmt|;
return|return
name|Tables
operator|.
name|immutableCell
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
name|ImmutableCollection
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|delegateCollection
parameter_list|()
block|{
return|return
name|DenseCellSet
operator|.
name|this
return|;
block|}
block|}
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

