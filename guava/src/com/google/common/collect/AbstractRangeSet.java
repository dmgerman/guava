begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A skeletal implementation of {@code RangeSet}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|AbstractRangeSet
specifier|abstract
class|class
name|AbstractRangeSet
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|>
implements|implements
name|RangeSet
argument_list|<
name|C
argument_list|>
block|{
DECL|method|AbstractRangeSet ()
name|AbstractRangeSet
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|contains (C value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
name|rangeContaining
argument_list|(
name|value
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rangeContaining (C value)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|rangeContaining
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|asRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|range
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|asRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * An implementation for {@code complement().asRanges().iterator()}.    */
DECL|method|standardComplementIterator ()
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|standardComplementIterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveIterator
init|=
name|AbstractRangeSet
operator|.
name|this
operator|.
name|asRanges
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|prevCut
init|=
name|Cut
operator|.
name|belowAll
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Range
argument_list|<
name|C
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|positiveIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|oldCut
init|=
name|prevCut
decl_stmt|;
name|Range
argument_list|<
name|C
argument_list|>
name|positiveRange
init|=
name|positiveIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|prevCut
operator|=
name|positiveRange
operator|.
name|upperBound
expr_stmt|;
if|if
condition|(
name|oldCut
operator|.
name|compareTo
argument_list|(
name|positiveRange
operator|.
name|lowerBound
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|oldCut
argument_list|,
name|positiveRange
operator|.
name|lowerBound
argument_list|)
return|;
block|}
block|}
name|Cut
argument_list|<
name|C
argument_list|>
name|posInfinity
init|=
name|Cut
operator|.
name|aboveAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevCut
operator|.
name|compareTo
argument_list|(
name|posInfinity
argument_list|)
operator|<
literal|0
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|result
init|=
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|prevCut
argument_list|,
name|posInfinity
argument_list|)
decl_stmt|;
name|prevCut
operator|=
name|posInfinity
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> range)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> range)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|enclosesAll (RangeSet<C> other)
specifier|public
name|boolean
name|enclosesAll
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|other
operator|.
name|asRanges
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|encloses
argument_list|(
name|range
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|addAll (RangeSet<C> other)
specifier|public
name|void
name|addAll
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|other
operator|.
name|asRanges
argument_list|()
control|)
block|{
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeAll (RangeSet<C> other)
specifier|public
name|void
name|removeAll
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|other
parameter_list|)
block|{
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|other
operator|.
name|asRanges
argument_list|()
control|)
block|{
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|encloses (Range<C> otherRange)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|otherRange
parameter_list|)
block|{
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|asRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|encloses
argument_list|(
name|otherRange
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|RangeSet
condition|)
block|{
name|RangeSet
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|RangeSet
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|asRanges
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|asRanges
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|asRanges
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
for|for
control|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
range|:
name|asRanges
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

