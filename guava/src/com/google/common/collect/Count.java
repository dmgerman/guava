begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * A mutable value of type {@code int}, for multisets to use in tracking counts of values.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|Count
specifier|final
class|class
name|Count
implements|implements
name|Serializable
block|{
DECL|field|value
specifier|private
name|int
name|value
decl_stmt|;
DECL|method|Count (int value)
name|Count
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|add (int delta)
specifier|public
name|void
name|add
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|value
operator|+=
name|delta
expr_stmt|;
block|}
DECL|method|addAndGet (int delta)
specifier|public
name|int
name|addAndGet
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
return|return
name|value
operator|+=
name|delta
return|;
block|}
DECL|method|set (int newValue)
specifier|public
name|void
name|set
parameter_list|(
name|int
name|newValue
parameter_list|)
block|{
name|value
operator|=
name|newValue
expr_stmt|;
block|}
DECL|method|getAndSet (int newValue)
specifier|public
name|int
name|getAndSet
parameter_list|(
name|int
name|newValue
parameter_list|)
block|{
name|int
name|result
init|=
name|value
decl_stmt|;
name|value
operator|=
name|newValue
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|Count
operator|&&
operator|(
operator|(
name|Count
operator|)
name|obj
operator|)
operator|.
name|value
operator|==
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

