begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstNode
operator|.
name|countOrZero
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A utility class with operations on binary search trees that operate on some interval.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstRangeOps
specifier|final
class|class
name|BstRangeOps
block|{
comment|/**    * Returns the number of nodes in the specified tree in the specified range. Assumes that the    * tree satisfies the binary search ordering property relative to {@code range.comparator()}.    */
DECL|method|countInRange ( GeneralRange<K> range, @Nullable N root)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|int
name|countInRange
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
operator|||
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|totalCount
init|=
name|root
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|totalCount
operator|-=
name|countTooLow
argument_list|(
name|range
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|totalCount
operator|-=
name|countTooHigh
argument_list|(
name|range
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
return|return
name|totalCount
return|;
block|}
comment|// Returns the number of nodes strictly below the specified range.
DECL|method|countTooLow ( GeneralRange<K> range, @Nullable N root)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|int
name|countTooLow
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|range
operator|.
name|tooLow
argument_list|(
name|root
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|1
operator|+
name|countOrZero
argument_list|(
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
operator|+
name|countTooLow
argument_list|(
name|range
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|countTooLow
argument_list|(
name|range
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Returns the number of nodes strictly above the specified range.
annotation|@
name|Nullable
DECL|method|countTooHigh ( GeneralRange<K> range, @Nullable N root)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|int
name|countTooHigh
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|range
operator|.
name|tooHigh
argument_list|(
name|root
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|1
operator|+
name|countOrZero
argument_list|(
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
operator|+
name|countTooHigh
argument_list|(
name|range
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|countTooHigh
argument_list|(
name|range
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns a balanced tree containing all nodes from the specified tree that were<i>not</i> in    * the specified range, using the specified balance policy. Assumes that the tree satisfies the    * binary search ordering property relative to {@code range.comparator()}.    */
annotation|@
name|Nullable
DECL|method|minusRange (GeneralRange<K> range, BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory, @Nullable N root)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|N
name|minusRange
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|balancePolicy
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|nodeFactory
argument_list|)
expr_stmt|;
name|N
name|higher
init|=
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|?
name|subTreeTooHigh
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|root
argument_list|)
else|:
literal|null
decl_stmt|;
name|N
name|lower
init|=
name|range
operator|.
name|hasLowerBound
argument_list|()
condition|?
name|subTreeTooLow
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|root
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|balancePolicy
operator|.
name|combine
argument_list|(
name|nodeFactory
argument_list|,
name|lower
argument_list|,
name|higher
argument_list|)
return|;
block|}
comment|/*    * Returns a balanced tree containing all nodes in the specified tree that are strictly below the    * specified range.    */
annotation|@
name|Nullable
DECL|method|subTreeTooLow (GeneralRange<K> range, BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory, @Nullable N root)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|N
name|subTreeTooLow
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|range
operator|.
name|tooLow
argument_list|(
name|root
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|N
name|right
init|=
name|subTreeTooLow
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|balancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|,
name|right
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subTreeTooLow
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/*    * Returns a balanced tree containing all nodes in the specified tree that are strictly above the    * specified range.    */
annotation|@
name|Nullable
DECL|method|subTreeTooHigh (GeneralRange<K> range, BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory, @Nullable N root)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|>
name|N
name|subTreeTooHigh
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstBalancePolicy
argument_list|<
name|N
argument_list|>
name|balancePolicy
parameter_list|,
name|BstNodeFactory
argument_list|<
name|N
argument_list|>
name|nodeFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|range
operator|.
name|tooHigh
argument_list|(
name|root
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|N
name|left
init|=
name|subTreeTooHigh
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|LEFT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|balancePolicy
operator|.
name|balance
argument_list|(
name|nodeFactory
argument_list|,
name|root
argument_list|,
name|left
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subTreeTooHigh
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|root
operator|.
name|childOrNull
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the leftmost path in the specified tree that is within the specified range.    */
annotation|@
name|Nullable
DECL|method|firstPath ( GeneralRange<K> range, BstPathFactory<N, P> pathFactory, @Nullable N root)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|,
name|P
extends|extends
name|BstPath
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
parameter_list|>
name|P
name|firstPath
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstPathFactory
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
name|pathFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|pathFactory
argument_list|)
expr_stmt|;
return|return
operator|(
name|root
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|firstPath
argument_list|(
name|pathFactory
operator|.
name|initialPath
argument_list|(
name|root
argument_list|)
argument_list|,
name|range
argument_list|,
name|pathFactory
argument_list|)
return|;
block|}
comment|/**    * Returns the rightmost path in the specified tree that is within the specified range.    */
annotation|@
name|Nullable
DECL|method|lastPath ( GeneralRange<K> range, BstPathFactory<N, P> pathFactory, @Nullable N root)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|,
name|P
extends|extends
name|BstPath
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
parameter_list|>
name|P
name|lastPath
parameter_list|(
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstPathFactory
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
name|pathFactory
parameter_list|,
annotation|@
name|Nullable
name|N
name|root
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|pathFactory
argument_list|)
expr_stmt|;
return|return
operator|(
name|root
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|lastPath
argument_list|(
name|pathFactory
operator|.
name|initialPath
argument_list|(
name|root
argument_list|)
argument_list|,
name|range
argument_list|,
name|pathFactory
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|firstPath ( P currentPath, GeneralRange<K> range, BstPathFactory<N, P> pathFactory)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|,
name|P
extends|extends
name|BstPath
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
parameter_list|>
name|P
name|firstPath
parameter_list|(
name|P
name|currentPath
parameter_list|,
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstPathFactory
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
name|pathFactory
parameter_list|)
block|{
name|K
name|tipKey
init|=
name|currentPath
operator|.
name|getTip
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|tooLow
argument_list|(
name|tipKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentPath
operator|.
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|RIGHT
argument_list|)
condition|)
block|{
return|return
name|firstPath
argument_list|(
name|pathFactory
operator|.
name|extension
argument_list|(
name|currentPath
argument_list|,
name|RIGHT
argument_list|)
argument_list|,
name|range
argument_list|,
name|pathFactory
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|P
name|leftPath
init|=
name|currentPath
operator|.
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|LEFT
argument_list|)
condition|?
name|firstPath
argument_list|(
name|pathFactory
operator|.
name|extension
argument_list|(
name|currentPath
argument_list|,
name|LEFT
argument_list|)
argument_list|,
name|range
argument_list|,
name|pathFactory
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|leftPath
operator|!=
literal|null
condition|)
block|{
return|return
name|leftPath
return|;
block|}
else|else
block|{
return|return
name|range
operator|.
name|tooHigh
argument_list|(
name|tipKey
argument_list|)
condition|?
literal|null
else|:
name|currentPath
return|;
block|}
block|}
block|}
annotation|@
name|Nullable
DECL|method|lastPath ( P currentPath, GeneralRange<K> range, BstPathFactory<N, P> pathFactory)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|N
extends|extends
name|BstNode
argument_list|<
name|K
argument_list|,
name|N
argument_list|>
parameter_list|,
name|P
extends|extends
name|BstPath
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
parameter_list|>
name|P
name|lastPath
parameter_list|(
name|P
name|currentPath
parameter_list|,
name|GeneralRange
argument_list|<
name|K
argument_list|>
name|range
parameter_list|,
name|BstPathFactory
argument_list|<
name|N
argument_list|,
name|P
argument_list|>
name|pathFactory
parameter_list|)
block|{
name|K
name|tipKey
init|=
name|currentPath
operator|.
name|getTip
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|tooHigh
argument_list|(
name|tipKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentPath
operator|.
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|LEFT
argument_list|)
condition|)
block|{
return|return
name|lastPath
argument_list|(
name|pathFactory
operator|.
name|extension
argument_list|(
name|currentPath
argument_list|,
name|LEFT
argument_list|)
argument_list|,
name|range
argument_list|,
name|pathFactory
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|P
name|rightPath
init|=
name|currentPath
operator|.
name|getTip
argument_list|()
operator|.
name|hasChild
argument_list|(
name|RIGHT
argument_list|)
condition|?
name|lastPath
argument_list|(
name|pathFactory
operator|.
name|extension
argument_list|(
name|currentPath
argument_list|,
name|RIGHT
argument_list|)
argument_list|,
name|range
argument_list|,
name|pathFactory
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|rightPath
operator|!=
literal|null
condition|)
block|{
return|return
name|rightPath
return|;
block|}
else|else
block|{
return|return
name|range
operator|.
name|tooLow
argument_list|(
name|tipKey
argument_list|)
condition|?
literal|null
else|:
name|currentPath
return|;
block|}
block|}
block|}
DECL|method|BstRangeOps ()
specifier|private
name|BstRangeOps
parameter_list|()
block|{}
block|}
end_class

end_unit

