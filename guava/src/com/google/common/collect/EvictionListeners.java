begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A collection of common eviction listeners.  *  * @author Charles Fry  * @since Guava release 07  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|EvictionListeners
specifier|public
specifier|final
class|class
name|EvictionListeners
block|{
DECL|method|EvictionListeners ()
specifier|private
name|EvictionListeners
parameter_list|()
block|{}
comment|/**    * Returns an asynchronous {@code MapEvictionListener} which processes all    * eviction notifications asynchronously, using {@code executor}.    *    * @param listener the backing listener    * @param executor the executor with which eviciton notifications are    *     asynchronously executed    */
DECL|method|asynchronous ( final MapEvictionListener<K, V> listener, final Executor executor)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapEvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asynchronous
parameter_list|(
specifier|final
name|MapEvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|listener
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
block|{
return|return
operator|new
name|MapEvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEviction
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|K
name|key
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|V
name|value
parameter_list|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|onEviction
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

