begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Utilities for dealing with sorted collections of all types.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|SortedIterables
specifier|final
class|class
name|SortedIterables
block|{
DECL|method|SortedIterables ()
specifier|private
name|SortedIterables
parameter_list|()
block|{}
comment|/**    * Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to    * {@code comparator}.    */
DECL|method|hasSameComparator (Comparator<?> comparator, Iterable<?> elements)
specifier|public
specifier|static
name|boolean
name|hasSameComparator
parameter_list|(
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator2
decl_stmt|;
if|if
condition|(
name|elements
operator|instanceof
name|SortedSet
condition|)
block|{
name|comparator2
operator|=
name|comparator
argument_list|(
operator|(
name|SortedSet
argument_list|<
name|?
argument_list|>
operator|)
name|elements
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|elements
operator|instanceof
name|SortedIterable
condition|)
block|{
name|comparator2
operator|=
operator|(
operator|(
name|SortedIterable
argument_list|<
name|?
argument_list|>
operator|)
name|elements
operator|)
operator|.
name|comparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
name|comparator
operator|.
name|equals
argument_list|(
name|comparator2
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// if sortedSet.comparator() is null, the set must be naturally ordered
DECL|method|comparator ( SortedSet<E> sortedSet)
specifier|public
specifier|static
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
argument_list|(
name|SortedSet
argument_list|<
name|E
argument_list|>
name|sortedSet
argument_list|)
block|{
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|result
init|=
name|sortedSet
operator|.
name|comparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
operator|)
name|Ordering
operator|.
name|natural
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

