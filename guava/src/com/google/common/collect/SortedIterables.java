begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Utilities for dealing with sorted collections of all types.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|SortedIterables
specifier|final
class|class
name|SortedIterables
block|{
DECL|method|SortedIterables ()
specifier|private
name|SortedIterables
parameter_list|()
block|{}
comment|/**    * Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent    * to {@code comparator}.    */
DECL|method|hasSameComparator (Comparator<?> comparator, Iterable<?> elements)
specifier|public
specifier|static
name|boolean
name|hasSameComparator
parameter_list|(
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator2
decl_stmt|;
if|if
condition|(
name|elements
operator|instanceof
name|SortedSet
condition|)
block|{
name|SortedSet
argument_list|<
name|?
argument_list|>
name|sortedSet
init|=
operator|(
name|SortedSet
argument_list|<
name|?
argument_list|>
operator|)
name|elements
decl_stmt|;
name|comparator2
operator|=
name|sortedSet
operator|.
name|comparator
argument_list|()
expr_stmt|;
if|if
condition|(
name|comparator2
operator|==
literal|null
condition|)
block|{
name|comparator2
operator|=
operator|(
name|Comparator
operator|)
name|Ordering
operator|.
name|natural
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|elements
operator|instanceof
name|SortedIterable
condition|)
block|{
name|comparator2
operator|=
operator|(
operator|(
name|SortedIterable
argument_list|<
name|?
argument_list|>
operator|)
name|elements
operator|)
operator|.
name|comparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|comparator2
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|comparator
operator|.
name|equals
argument_list|(
name|comparator2
argument_list|)
return|;
block|}
comment|/**    * Returns a sorted collection of the unique elements according to the specified comparator.  Does    * not check for null.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sortedUnique ( Comparator<? super E> comparator, Iterator<E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|sortedUnique
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|Iterator
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|E
argument_list|>
name|sortedSet
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|Iterators
operator|.
name|addAll
argument_list|(
name|sortedSet
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|sortedSet
return|;
block|}
comment|/**    * Returns a sorted collection of the unique elements according to the specified comparator. Does    * not check for null.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sortedUnique ( Comparator<? super E> comparator, Iterable<E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|sortedUnique
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|Iterable
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|instanceof
name|Multiset
condition|)
block|{
name|elements
operator|=
operator|(
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|elements
operator|)
operator|.
name|elementSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|elements
operator|instanceof
name|Set
condition|)
block|{
if|if
condition|(
name|hasSameComparator
argument_list|(
name|comparator
argument_list|,
name|elements
argument_list|)
condition|)
block|{
return|return
operator|(
name|Set
argument_list|<
name|E
argument_list|>
operator|)
name|elements
return|;
block|}
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
name|E
index|[]
name|array
init|=
operator|(
name|E
index|[]
operator|)
name|Iterables
operator|.
name|toArray
argument_list|(
name|elements
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasSameComparator
argument_list|(
name|comparator
argument_list|,
name|elements
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
return|return
name|uniquifySortedArray
argument_list|(
name|comparator
argument_list|,
name|array
argument_list|)
return|;
block|}
DECL|method|uniquifySortedArray ( Comparator<? super E> comparator, E[] array)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|uniquifySortedArray
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|E
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|int
name|length
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cmp
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|array
index|[
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
name|array
index|[
name|length
operator|++
index|]
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|length
operator|<
name|array
operator|.
name|length
condition|)
block|{
name|array
operator|=
name|ObjectArrays
operator|.
name|arraysCopyOf
argument_list|(
name|array
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**    * Returns a collection of multiset entries representing the counts of the distinct elements, in    * sorted order. Does not check for null.    */
DECL|method|sortedCounts ( Comparator<? super E> comparator, Iterator<E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|sortedCounts
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|Iterator
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|TreeMultiset
argument_list|<
name|E
argument_list|>
name|multiset
init|=
name|TreeMultiset
operator|.
name|create
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|Iterators
operator|.
name|addAll
argument_list|(
name|multiset
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|multiset
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**    * Returns a collection of multiset entries representing the counts of the distinct elements, in    * sorted order. Does not check for null.    */
DECL|method|sortedCounts ( Comparator<? super E> comparator, Iterable<E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|sortedCounts
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|,
name|Iterable
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|instanceof
name|Multiset
condition|)
block|{
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
init|=
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|elements
decl_stmt|;
if|if
condition|(
name|hasSameComparator
argument_list|(
name|comparator
argument_list|,
name|elements
argument_list|)
condition|)
block|{
return|return
name|multiset
operator|.
name|entrySet
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|multiset
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
name|Ordering
operator|.
name|from
argument_list|(
name|comparator
argument_list|)
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|E
name|apply
parameter_list|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
elseif|else
if|if
condition|(
name|elements
operator|instanceof
name|Set
condition|)
block|{
comment|// known distinct
name|Collection
argument_list|<
name|E
argument_list|>
name|sortedElements
decl_stmt|;
if|if
condition|(
name|hasSameComparator
argument_list|(
name|comparator
argument_list|,
name|elements
argument_list|)
condition|)
block|{
name|sortedElements
operator|=
operator|(
name|Collection
argument_list|<
name|E
argument_list|>
operator|)
name|elements
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|sortedElements
operator|=
name|list
expr_stmt|;
block|}
return|return
name|singletonEntries
argument_list|(
name|sortedElements
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasSameComparator
argument_list|(
name|comparator
argument_list|,
name|elements
argument_list|)
condition|)
block|{
name|E
name|current
init|=
literal|null
decl_stmt|;
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|sortedEntries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|elements
control|)
block|{
if|if
condition|(
name|currentCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|current
argument_list|,
name|e
argument_list|)
operator|==
literal|0
condition|)
block|{
name|currentCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sortedEntries
operator|.
name|add
argument_list|(
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|current
argument_list|,
name|currentCount
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|e
expr_stmt|;
name|currentCount
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|current
operator|=
name|e
expr_stmt|;
name|currentCount
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentCount
operator|>
literal|0
condition|)
block|{
name|sortedEntries
operator|.
name|add
argument_list|(
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|current
argument_list|,
name|currentCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sortedEntries
return|;
block|}
name|TreeMultiset
argument_list|<
name|E
argument_list|>
name|multiset
init|=
name|TreeMultiset
operator|.
name|create
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|multiset
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|multiset
operator|.
name|entrySet
argument_list|()
return|;
block|}
DECL|method|singletonEntries (Collection<E> set)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|singletonEntries
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|set
parameter_list|)
block|{
return|return
name|Collections2
operator|.
name|transform
argument_list|(
name|set
argument_list|,
operator|new
name|Function
argument_list|<
name|E
argument_list|,
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|apply
parameter_list|(
name|E
name|elem
parameter_list|)
block|{
return|return
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|elem
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

