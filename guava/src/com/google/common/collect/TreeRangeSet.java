begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link RangeSet} backed by a {@link TreeMap}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|TreeRangeSet
annotation|@
name|GwtIncompatible
argument_list|(
literal|"uses NavigableMap"
argument_list|)
specifier|final
class|class
name|TreeRangeSet
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractRangeSet
argument_list|<
name|C
argument_list|>
block|{
DECL|field|rangesByLowerCut
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerCut
decl_stmt|;
comment|/**    * Creates an empty {@code TreeRangeSet} instance.    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.    */
DECL|method|create (RangeSet<C> rangeSet)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|create
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|)
block|{
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|result
init|=
name|create
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|TreeRangeSet (NavigableMap<Cut<C>, Range<C>> rangesByLowerCut)
specifier|private
name|TreeRangeSet
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerCut
parameter_list|)
block|{
name|this
operator|.
name|rangesByLowerCut
operator|=
name|rangesByLowerCut
expr_stmt|;
block|}
DECL|field|asRanges
specifier|private
specifier|transient
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asRanges
decl_stmt|;
annotation|@
name|Override
DECL|method|asRanges ()
specifier|public
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asRanges
parameter_list|()
block|{
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|result
init|=
name|asRanges
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|asRanges
operator|=
operator|new
name|AsRanges
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|AsRanges
specifier|final
class|class
name|AsRanges
extends|extends
name|ForwardingCollection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
implements|implements
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Collection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|rangesByLowerCut
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|hashCodeImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|equalsImpl
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|rangeContaining (C value)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|rangeContaining
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|floorEntry
init|=
name|rangesByLowerCut
operator|.
name|floorEntry
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|floorEntry
operator|!=
literal|null
operator|&&
name|floorEntry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|floorEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO(kevinb): revisit this design choice
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|encloses (Range<C> range)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|floorEntry
init|=
name|rangesByLowerCut
operator|.
name|floorEntry
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
return|return
name|floorEntry
operator|!=
literal|null
operator|&&
name|floorEntry
operator|.
name|getValue
argument_list|()
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|span ()
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|span
parameter_list|()
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|firstEntry
init|=
name|rangesByLowerCut
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|lastEntry
init|=
name|rangesByLowerCut
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|Range
operator|.
name|create
argument_list|(
name|firstEntry
operator|.
name|getValue
argument_list|()
operator|.
name|lowerBound
argument_list|,
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|upperBound
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> rangeToAdd)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToAdd
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeToAdd
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// We will use { } to illustrate ranges currently in the range set, and<>
comment|// to illustrate rangeToAdd.
name|Cut
argument_list|<
name|C
argument_list|>
name|lbToAdd
init|=
name|rangeToAdd
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|ubToAdd
init|=
name|rangeToAdd
operator|.
name|upperBound
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowLB
init|=
name|rangesByLowerCut
operator|.
name|lowerEntry
argument_list|(
name|lbToAdd
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowLB
operator|!=
literal|null
condition|)
block|{
comment|// {<
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowLB
init|=
name|entryBelowLB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|lbToAdd
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {< }, and we will need to coalesce
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|ubToAdd
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {<> }
name|ubToAdd
operator|=
name|rangeBelowLB
operator|.
name|upperBound
expr_stmt|;
comment|/*            * TODO(cpovirk): can we just "return;" here? Or, can we remove this if() entirely? If            * not, add tests to demonstrate the problem with each approach            */
block|}
name|lbToAdd
operator|=
name|rangeBelowLB
operator|.
name|lowerBound
expr_stmt|;
block|}
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowUB
init|=
name|rangesByLowerCut
operator|.
name|floorEntry
argument_list|(
name|ubToAdd
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowUB
operator|!=
literal|null
condition|)
block|{
comment|// {>
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowUB
init|=
name|entryBelowUB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowUB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|ubToAdd
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {> }, and we need to coalesce
name|ubToAdd
operator|=
name|rangeBelowUB
operator|.
name|upperBound
expr_stmt|;
block|}
block|}
comment|// Remove ranges which are strictly enclosed.
name|rangesByLowerCut
operator|.
name|subMap
argument_list|(
name|lbToAdd
argument_list|,
name|ubToAdd
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|replaceRangeWithSameLowerBound
argument_list|(
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|lbToAdd
argument_list|,
name|ubToAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> rangeToRemove)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToRemove
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeToRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// We will use { } to illustrate ranges currently in the range set, and<>
comment|// to illustrate rangeToRemove.
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowLB
init|=
name|rangesByLowerCut
operator|.
name|lowerEntry
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowLB
operator|!=
literal|null
condition|)
block|{
comment|// {<
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowLB
init|=
name|entryBelowLB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {< }, and we will need to subdivide
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {<> }
name|replaceRangeWithSameLowerBound
argument_list|(
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeBelowLB
operator|.
name|upperBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|replaceRangeWithSameLowerBound
argument_list|(
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|rangeBelowLB
operator|.
name|lowerBound
argument_list|,
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowUB
init|=
name|rangesByLowerCut
operator|.
name|floorEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowUB
operator|!=
literal|null
condition|)
block|{
comment|// {>
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowUB
init|=
name|entryBelowUB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowUB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {> }
name|replaceRangeWithSameLowerBound
argument_list|(
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeBelowUB
operator|.
name|upperBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rangesByLowerCut
operator|.
name|subMap
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|,
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|replaceRangeWithSameLowerBound (Range<C> range)
specifier|private
name|void
name|replaceRangeWithSameLowerBound
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rangesByLowerCut
operator|.
name|remove
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangesByLowerCut
operator|.
name|put
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|complement
specifier|private
specifier|transient
name|RangeSet
argument_list|<
name|C
argument_list|>
name|complement
decl_stmt|;
annotation|@
name|Override
DECL|method|complement ()
specifier|public
name|RangeSet
argument_list|<
name|C
argument_list|>
name|complement
parameter_list|()
block|{
name|RangeSet
argument_list|<
name|C
argument_list|>
name|result
init|=
name|complement
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|complement
operator|=
operator|new
name|Complement
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|Complement
specifier|private
specifier|final
class|class
name|Complement
extends|extends
name|AbstractRangeSet
argument_list|<
name|C
argument_list|>
block|{
DECL|method|positive ()
specifier|private
name|RangeSet
argument_list|<
name|C
argument_list|>
name|positive
parameter_list|()
block|{
return|return
name|TreeRangeSet
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|contains (C value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
operator|!
name|positive
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rangeContaining (C value)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|rangeContaining
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|valueCut
init|=
name|Cut
operator|.
name|belowValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelow
init|=
name|rangesByLowerCut
operator|.
name|floorEntry
argument_list|(
name|valueCut
argument_list|)
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|lowerBound
decl_stmt|;
if|if
condition|(
name|entryBelow
operator|==
literal|null
condition|)
block|{
name|lowerBound
operator|=
name|Cut
operator|.
name|belowAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelow
init|=
name|entryBelow
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelow
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|lowerBound
operator|=
name|rangeBelow
operator|.
name|upperBound
expr_stmt|;
block|}
block|}
name|Cut
argument_list|<
name|C
argument_list|>
name|upperBound
init|=
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|rangesByLowerCut
operator|.
name|higherKey
argument_list|(
name|valueCut
argument_list|)
argument_list|,
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Range
argument_list|<
name|C
argument_list|>
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asRanges ()
specifier|public
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asRanges
parameter_list|()
block|{
return|return
operator|new
name|AbstractSet
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|TreeRangeSet
operator|.
name|this
operator|.
name|standardComplementIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|boolean
name|positiveBoundedBelow
init|=
operator|!
name|rangesByLowerCut
operator|.
name|containsKey
argument_list|(
name|Cut
operator|.
name|belowAll
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|lastEntry
init|=
name|rangesByLowerCut
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
name|boolean
name|positiveBoundedAbove
init|=
name|lastEntry
operator|==
literal|null
operator|||
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|hasUpperBound
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|rangesByLowerCut
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|positiveBoundedBelow
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|positiveBoundedAbove
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|span ()
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|span
parameter_list|()
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|spanLowerBound
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|firstEntry
init|=
name|rangesByLowerCut
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|==
literal|null
condition|)
block|{
return|return
name|Range
operator|.
name|all
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|firstEntry
operator|.
name|getValue
argument_list|()
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|spanLowerBound
operator|=
name|Cut
operator|.
name|belowAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|spanLowerBound
operator|=
name|firstEntry
operator|.
name|getValue
argument_list|()
operator|.
name|upperBound
expr_stmt|;
if|if
condition|(
name|Cut
operator|.
name|aboveAll
argument_list|()
operator|.
name|equals
argument_list|(
name|spanLowerBound
argument_list|)
condition|)
block|{
comment|// TreeRangeSet.this contains the single range Range.all(), so the complement is empty
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
name|Cut
argument_list|<
name|C
argument_list|>
name|spanUpperBound
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|lastEntry
init|=
name|rangesByLowerCut
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|spanUpperBound
operator|=
name|Cut
operator|.
name|aboveAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|spanUpperBound
operator|=
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|lowerBound
expr_stmt|;
block|}
return|return
name|Range
operator|.
name|create
argument_list|(
name|spanLowerBound
argument_list|,
name|spanUpperBound
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|positive
argument_list|()
operator|.
name|equals
argument_list|(
name|ImmutableRangeSet
operator|.
expr|<
name|C
operator|>
name|all
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|complement ()
specifier|public
name|RangeSet
argument_list|<
name|C
argument_list|>
name|complement
parameter_list|()
block|{
return|return
name|positive
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> range)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|positive
argument_list|()
operator|.
name|remove
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> range)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|positive
argument_list|()
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|floorRange (Cut<C> cut)
name|Range
argument_list|<
name|C
argument_list|>
name|floorRange
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|cut
parameter_list|)
block|{
comment|// Ranges from the positive set that might border the complement range being requested.
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|candidatePositiveRanges
init|=
name|rangesByLowerCut
operator|.
name|headMap
argument_list|(
name|cut
argument_list|,
literal|false
argument_list|)
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|candidatePositiveRanges
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|firstCandidate
init|=
name|candidatePositiveRanges
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// If cut is |, and firstRange is { }, then we only know { |
if|if
condition|(
name|firstCandidate
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|cut
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// { } |
name|Cut
argument_list|<
name|C
argument_list|>
name|resultLowerBound
init|=
name|firstCandidate
operator|.
name|upperBound
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|resultUpperBound
init|=
name|Objects
operator|.
name|firstNonNull
argument_list|(
name|rangesByLowerCut
operator|.
name|higherKey
argument_list|(
name|resultLowerBound
argument_list|)
argument_list|,
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Range
operator|.
name|create
argument_list|(
name|resultLowerBound
argument_list|,
name|resultUpperBound
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|candidatePositiveRanges
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// } { | }
return|return
name|Range
operator|.
name|create
argument_list|(
name|candidatePositiveRanges
operator|.
name|next
argument_list|()
operator|.
name|upperBound
argument_list|,
name|firstCandidate
operator|.
name|lowerBound
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Cut
operator|.
name|belowAll
argument_list|()
operator|.
name|equals
argument_list|(
name|firstCandidate
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|Range
operator|.
name|create
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|,
name|firstCandidate
operator|.
name|lowerBound
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|rangesByLowerCut
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Range
operator|.
name|all
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Range
operator|.
name|create
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|,
name|rangesByLowerCut
operator|.
name|firstKey
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|encloses (Range<C> range)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|Range
argument_list|<
name|C
argument_list|>
name|floorRange
init|=
name|floorRange
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
return|return
name|floorRange
operator|!=
literal|null
operator|&&
name|floorRange
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

