begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link RangeSet} backed by a {@link TreeMap}.  *  * @author Louis Wasserman  * @since 14.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
argument_list|(
literal|"uses NavigableMap"
argument_list|)
DECL|class|TreeRangeSet
specifier|public
class|class
name|TreeRangeSet
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractRangeSet
argument_list|<
name|C
argument_list|>
block|{
DECL|field|rangesByLowerBound
annotation|@
name|VisibleForTesting
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerBound
decl_stmt|;
comment|/**    * Creates an empty {@code TreeRangeSet} instance.    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.    */
DECL|method|create (RangeSet<C> rangeSet)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
argument_list|>
parameter_list|>
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|create
parameter_list|(
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|)
block|{
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
name|result
init|=
name|create
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|TreeRangeSet (NavigableMap<Cut<C>, Range<C>> rangesByLowerCut)
specifier|private
name|TreeRangeSet
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerCut
parameter_list|)
block|{
name|this
operator|.
name|rangesByLowerBound
operator|=
name|rangesByLowerCut
expr_stmt|;
block|}
DECL|field|asRanges
specifier|private
specifier|transient
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asRanges
decl_stmt|;
DECL|field|asDescendingSetOfRanges
specifier|private
specifier|transient
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asDescendingSetOfRanges
decl_stmt|;
annotation|@
name|Override
DECL|method|asRanges ()
specifier|public
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asRanges
parameter_list|()
block|{
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|result
init|=
name|asRanges
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|asRanges
operator|=
operator|new
name|AsRanges
argument_list|(
name|rangesByLowerBound
operator|.
name|values
argument_list|()
argument_list|)
else|:
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|asDescendingSetOfRanges ()
specifier|public
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|asDescendingSetOfRanges
parameter_list|()
block|{
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|result
init|=
name|asDescendingSetOfRanges
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|asDescendingSetOfRanges
operator|=
operator|new
name|AsRanges
argument_list|(
name|rangesByLowerBound
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
else|:
name|result
return|;
block|}
DECL|class|AsRanges
specifier|final
class|class
name|AsRanges
extends|extends
name|ForwardingCollection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
implements|implements
name|Set
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
DECL|field|delegate
specifier|final
name|Collection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|delegate
decl_stmt|;
DECL|method|AsRanges (Collection<Range<C>> delegate)
name|AsRanges
parameter_list|(
name|Collection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Collection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|hashCodeImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|equalsImpl
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|rangeContaining (C value)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|rangeContaining
parameter_list|(
name|C
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|floorEntry
init|=
name|rangesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|Cut
operator|.
name|belowValue
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|floorEntry
operator|!=
literal|null
operator|&&
name|floorEntry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|floorEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
comment|// TODO(kevinb): revisit this design choice
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|encloses (Range<C> range)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|floorEntry
init|=
name|rangesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
return|return
name|floorEntry
operator|!=
literal|null
operator|&&
name|floorEntry
operator|.
name|getValue
argument_list|()
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|rangeEnclosing (Range<C> range)
specifier|private
name|Range
argument_list|<
name|C
argument_list|>
name|rangeEnclosing
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|floorEntry
init|=
name|rangesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
return|return
operator|(
name|floorEntry
operator|!=
literal|null
operator|&&
name|floorEntry
operator|.
name|getValue
argument_list|()
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
operator|)
condition|?
name|floorEntry
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|span ()
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|span
parameter_list|()
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|firstEntry
init|=
name|rangesByLowerBound
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|lastEntry
init|=
name|rangesByLowerBound
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|Range
operator|.
name|create
argument_list|(
name|firstEntry
operator|.
name|getValue
argument_list|()
operator|.
name|lowerBound
argument_list|,
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|upperBound
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> rangeToAdd)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToAdd
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeToAdd
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// We will use { } to illustrate ranges currently in the range set, and<>
comment|// to illustrate rangeToAdd.
name|Cut
argument_list|<
name|C
argument_list|>
name|lbToAdd
init|=
name|rangeToAdd
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|ubToAdd
init|=
name|rangeToAdd
operator|.
name|upperBound
decl_stmt|;
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowLB
init|=
name|rangesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|lbToAdd
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowLB
operator|!=
literal|null
condition|)
block|{
comment|// {<
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowLB
init|=
name|entryBelowLB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|lbToAdd
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {< }, and we will need to coalesce
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|ubToAdd
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {<> }
name|ubToAdd
operator|=
name|rangeBelowLB
operator|.
name|upperBound
expr_stmt|;
comment|/*            * TODO(cpovirk): can we just "return;" here? Or, can we remove this if() entirely? If            * not, add tests to demonstrate the problem with each approach            */
block|}
name|lbToAdd
operator|=
name|rangeBelowLB
operator|.
name|lowerBound
expr_stmt|;
block|}
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowUB
init|=
name|rangesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|ubToAdd
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowUB
operator|!=
literal|null
condition|)
block|{
comment|// {>
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowUB
init|=
name|entryBelowUB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowUB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|ubToAdd
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {> }, and we need to coalesce
name|ubToAdd
operator|=
name|rangeBelowUB
operator|.
name|upperBound
expr_stmt|;
block|}
block|}
comment|// Remove ranges which are strictly enclosed.
name|rangesByLowerBound
operator|.
name|subMap
argument_list|(
name|lbToAdd
argument_list|,
name|ubToAdd
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|replaceRangeWithSameLowerBound
argument_list|(
name|Range
operator|.
name|create
argument_list|(
name|lbToAdd
argument_list|,
name|ubToAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> rangeToRemove)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToRemove
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rangeToRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|rangeToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// We will use { } to illustrate ranges currently in the range set, and<>
comment|// to illustrate rangeToRemove.
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowLB
init|=
name|rangesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowLB
operator|!=
literal|null
condition|)
block|{
comment|// {<
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowLB
init|=
name|entryBelowLB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {< }, and we will need to subdivide
if|if
condition|(
name|rangeToRemove
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|rangeBelowLB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {<> }
name|replaceRangeWithSameLowerBound
argument_list|(
name|Range
operator|.
name|create
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeBelowLB
operator|.
name|upperBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|replaceRangeWithSameLowerBound
argument_list|(
name|Range
operator|.
name|create
argument_list|(
name|rangeBelowLB
operator|.
name|lowerBound
argument_list|,
name|rangeToRemove
operator|.
name|lowerBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|entryBelowUB
init|=
name|rangesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBelowUB
operator|!=
literal|null
condition|)
block|{
comment|// {>
name|Range
argument_list|<
name|C
argument_list|>
name|rangeBelowUB
init|=
name|entryBelowUB
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeToRemove
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|rangeBelowUB
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// {> }
name|replaceRangeWithSameLowerBound
argument_list|(
name|Range
operator|.
name|create
argument_list|(
name|rangeToRemove
operator|.
name|upperBound
argument_list|,
name|rangeBelowUB
operator|.
name|upperBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rangesByLowerBound
operator|.
name|subMap
argument_list|(
name|rangeToRemove
operator|.
name|lowerBound
argument_list|,
name|rangeToRemove
operator|.
name|upperBound
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|replaceRangeWithSameLowerBound (Range<C> range)
specifier|private
name|void
name|replaceRangeWithSameLowerBound
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rangesByLowerBound
operator|.
name|remove
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangesByLowerBound
operator|.
name|put
argument_list|(
name|range
operator|.
name|lowerBound
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|complement
specifier|private
specifier|transient
name|RangeSet
argument_list|<
name|C
argument_list|>
name|complement
decl_stmt|;
annotation|@
name|Override
DECL|method|complement ()
specifier|public
name|RangeSet
argument_list|<
name|C
argument_list|>
name|complement
parameter_list|()
block|{
name|RangeSet
argument_list|<
name|C
argument_list|>
name|result
init|=
name|complement
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|complement
operator|=
operator|new
name|Complement
argument_list|()
else|:
name|result
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|class|RangesByUpperBound
specifier|static
specifier|final
class|class
name|RangesByUpperBound
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractNavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
DECL|field|rangesByLowerBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerBound
decl_stmt|;
comment|/**      * upperBoundWindow represents the headMap/subMap/tailMap view of the entire "ranges by upper      * bound" map; it's a constraint on the *keys*, and does not affect the values.      */
DECL|field|upperBoundWindow
specifier|private
specifier|final
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|upperBoundWindow
decl_stmt|;
DECL|method|RangesByUpperBound (NavigableMap<Cut<C>, Range<C>> rangesByLowerBound)
name|RangesByUpperBound
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerBound
parameter_list|)
block|{
name|this
operator|.
name|rangesByLowerBound
operator|=
name|rangesByLowerBound
expr_stmt|;
name|this
operator|.
name|upperBoundWindow
operator|=
name|Range
operator|.
name|all
argument_list|()
expr_stmt|;
block|}
DECL|method|RangesByUpperBound ( NavigableMap<Cut<C>, Range<C>> rangesByLowerBound, Range<Cut<C>> upperBoundWindow)
specifier|private
name|RangesByUpperBound
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerBound
parameter_list|,
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|upperBoundWindow
parameter_list|)
block|{
name|this
operator|.
name|rangesByLowerBound
operator|=
name|rangesByLowerBound
expr_stmt|;
name|this
operator|.
name|upperBoundWindow
operator|=
name|upperBoundWindow
expr_stmt|;
block|}
DECL|method|subMap (Range<Cut<C>> window)
specifier|private
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|subMap
parameter_list|(
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|.
name|isConnected
argument_list|(
name|upperBoundWindow
argument_list|)
condition|)
block|{
return|return
operator|new
name|RangesByUpperBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|rangesByLowerBound
argument_list|,
name|window
operator|.
name|intersection
argument_list|(
name|upperBoundWindow
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subMap ( Cut<C> fromKey, boolean fromInclusive, Cut<C> toKey, boolean toInclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|subMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|fromKey
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|Cut
argument_list|<
name|C
argument_list|>
name|toKey
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|range
argument_list|(
name|fromKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|fromInclusive
argument_list|)
argument_list|,
name|toKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|toInclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|headMap (Cut<C> toKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|headMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|upTo
argument_list|(
name|toKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|inclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tailMap (Cut<C> fromKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|tailMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|downTo
argument_list|(
name|fromKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|inclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|Ordering
operator|.
expr|<
name|Cut
argument_list|<
name|C
argument_list|>
operator|>
name|natural
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|Cut
condition|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we catch CCEs
name|Cut
argument_list|<
name|C
argument_list|>
name|cut
init|=
operator|(
name|Cut
argument_list|<
name|C
argument_list|>
operator|)
name|key
decl_stmt|;
if|if
condition|(
operator|!
name|upperBoundWindow
operator|.
name|contains
argument_list|(
name|cut
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|candidate
init|=
name|rangesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|cut
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
operator|&&
name|candidate
operator|.
name|getValue
argument_list|()
operator|.
name|upperBound
operator|.
name|equals
argument_list|(
name|cut
argument_list|)
condition|)
block|{
return|return
name|candidate
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
comment|/*        * We want to start the iteration at the first range where the upper bound is in        * upperBoundWindow.        */
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|backingItr
decl_stmt|;
if|if
condition|(
operator|!
name|upperBoundWindow
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|backingItr
operator|=
name|rangesByLowerBound
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|lowerEntry
init|=
name|rangesByLowerBound
operator|.
name|lowerEntry
argument_list|(
name|upperBoundWindow
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerEntry
operator|==
literal|null
condition|)
block|{
name|backingItr
operator|=
name|rangesByLowerBound
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upperBoundWindow
operator|.
name|lowerBound
operator|.
name|isLessThan
argument_list|(
name|lowerEntry
operator|.
name|getValue
argument_list|()
operator|.
name|upperBound
argument_list|)
condition|)
block|{
name|backingItr
operator|=
name|rangesByLowerBound
operator|.
name|tailMap
argument_list|(
name|lowerEntry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|backingItr
operator|=
name|rangesByLowerBound
operator|.
name|tailMap
argument_list|(
name|upperBoundWindow
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|backingItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
name|Range
argument_list|<
name|C
argument_list|>
name|range
init|=
name|backingItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|upperBoundWindow
operator|.
name|upperBound
operator|.
name|isLessThan
argument_list|(
name|range
operator|.
name|upperBound
argument_list|)
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|range
operator|.
name|upperBound
argument_list|,
name|range
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|descendingEntryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
name|descendingEntryIterator
parameter_list|()
block|{
name|Collection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|candidates
decl_stmt|;
if|if
condition|(
name|upperBoundWindow
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|candidates
operator|=
name|rangesByLowerBound
operator|.
name|headMap
argument_list|(
name|upperBoundWindow
operator|.
name|upperEndpoint
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|candidates
operator|=
name|rangesByLowerBound
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
specifier|final
name|PeekingIterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|backingItr
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|candidates
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|backingItr
operator|.
name|hasNext
argument_list|()
operator|&&
name|upperBoundWindow
operator|.
name|upperBound
operator|.
name|isLessThan
argument_list|(
name|backingItr
operator|.
name|peek
argument_list|()
operator|.
name|upperBound
argument_list|)
condition|)
block|{
name|backingItr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|backingItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
name|Range
argument_list|<
name|C
argument_list|>
name|range
init|=
name|backingItr
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|upperBoundWindow
operator|.
name|lowerBound
operator|.
name|isLessThan
argument_list|(
name|range
operator|.
name|upperBound
argument_list|)
condition|?
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|range
operator|.
name|upperBound
argument_list|,
name|range
argument_list|)
else|:
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|upperBoundWindow
operator|.
name|equals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rangesByLowerBound
operator|.
name|size
argument_list|()
return|;
block|}
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|entryIterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|upperBoundWindow
operator|.
name|equals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
condition|?
name|rangesByLowerBound
operator|.
name|isEmpty
argument_list|()
else|:
operator|!
name|entryIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
DECL|class|ComplementRangesByLowerBound
specifier|private
specifier|static
specifier|final
class|class
name|ComplementRangesByLowerBound
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractNavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
DECL|field|positiveRangesByLowerBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveRangesByLowerBound
decl_stmt|;
DECL|field|positiveRangesByUpperBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveRangesByUpperBound
decl_stmt|;
comment|/**      * complementLowerBoundWindow represents the headMap/subMap/tailMap view of the entire      * "complement ranges by lower bound" map; it's a constraint on the *keys*, and does not affect      * the values.      */
DECL|field|complementLowerBoundWindow
specifier|private
specifier|final
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|complementLowerBoundWindow
decl_stmt|;
DECL|method|ComplementRangesByLowerBound (NavigableMap<Cut<C>, Range<C>> positiveRangesByLowerBound)
name|ComplementRangesByLowerBound
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveRangesByLowerBound
parameter_list|)
block|{
name|this
argument_list|(
name|positiveRangesByLowerBound
argument_list|,
name|Range
operator|.
expr|<
name|Cut
argument_list|<
name|C
argument_list|>
operator|>
name|all
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ComplementRangesByLowerBound ( NavigableMap<Cut<C>, Range<C>> positiveRangesByLowerBound, Range<Cut<C>> window)
specifier|private
name|ComplementRangesByLowerBound
parameter_list|(
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveRangesByLowerBound
parameter_list|,
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|window
parameter_list|)
block|{
name|this
operator|.
name|positiveRangesByLowerBound
operator|=
name|positiveRangesByLowerBound
expr_stmt|;
name|this
operator|.
name|positiveRangesByUpperBound
operator|=
operator|new
name|RangesByUpperBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|positiveRangesByLowerBound
argument_list|)
expr_stmt|;
name|this
operator|.
name|complementLowerBoundWindow
operator|=
name|window
expr_stmt|;
block|}
DECL|method|subMap (Range<Cut<C>> subWindow)
specifier|private
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|subMap
parameter_list|(
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|subWindow
parameter_list|)
block|{
if|if
condition|(
operator|!
name|complementLowerBoundWindow
operator|.
name|isConnected
argument_list|(
name|subWindow
argument_list|)
condition|)
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
name|subWindow
operator|=
name|subWindow
operator|.
name|intersection
argument_list|(
name|complementLowerBoundWindow
argument_list|)
expr_stmt|;
return|return
operator|new
name|ComplementRangesByLowerBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|positiveRangesByLowerBound
argument_list|,
name|subWindow
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subMap ( Cut<C> fromKey, boolean fromInclusive, Cut<C> toKey, boolean toInclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|subMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|fromKey
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|Cut
argument_list|<
name|C
argument_list|>
name|toKey
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|range
argument_list|(
name|fromKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|fromInclusive
argument_list|)
argument_list|,
name|toKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|toInclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|headMap (Cut<C> toKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|headMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|upTo
argument_list|(
name|toKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|inclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tailMap (Cut<C> fromKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|tailMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|downTo
argument_list|(
name|fromKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|inclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|Ordering
operator|.
expr|<
name|Cut
argument_list|<
name|C
argument_list|>
operator|>
name|natural
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
comment|/*        * firstComplementRangeLowerBound is the first complement range lower bound inside        * complementLowerBoundWindow. Complement range lower bounds are either positive range upper        * bounds, or Cut.belowAll().        *        * positiveItr starts at the first positive range with lower bound greater than        * firstComplementRangeLowerBound. (Positive range lower bounds correspond to complement range        * upper bounds.)        */
name|Collection
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveRanges
decl_stmt|;
if|if
condition|(
name|complementLowerBoundWindow
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|positiveRanges
operator|=
name|positiveRangesByUpperBound
operator|.
name|tailMap
argument_list|(
name|complementLowerBoundWindow
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|complementLowerBoundWindow
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
argument_list|)
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|positiveRanges
operator|=
name|positiveRangesByUpperBound
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
specifier|final
name|PeekingIterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveItr
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|positiveRanges
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Cut
argument_list|<
name|C
argument_list|>
name|firstComplementRangeLowerBound
decl_stmt|;
if|if
condition|(
name|complementLowerBoundWindow
operator|.
name|contains
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|positiveItr
operator|.
name|hasNext
argument_list|()
operator|||
name|positiveItr
operator|.
name|peek
argument_list|()
operator|.
name|lowerBound
operator|!=
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
operator|)
condition|)
block|{
name|firstComplementRangeLowerBound
operator|=
name|Cut
operator|.
name|belowAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|positiveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|firstComplementRangeLowerBound
operator|=
name|positiveItr
operator|.
name|next
argument_list|()
operator|.
name|upperBound
expr_stmt|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|nextComplementRangeLowerBound
init|=
name|firstComplementRangeLowerBound
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|complementLowerBoundWindow
operator|.
name|upperBound
operator|.
name|isLessThan
argument_list|(
name|nextComplementRangeLowerBound
argument_list|)
operator|||
name|nextComplementRangeLowerBound
operator|==
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
name|Range
argument_list|<
name|C
argument_list|>
name|negativeRange
decl_stmt|;
if|if
condition|(
name|positiveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|positiveRange
init|=
name|positiveItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|negativeRange
operator|=
name|Range
operator|.
name|create
argument_list|(
name|nextComplementRangeLowerBound
argument_list|,
name|positiveRange
operator|.
name|lowerBound
argument_list|)
expr_stmt|;
name|nextComplementRangeLowerBound
operator|=
name|positiveRange
operator|.
name|upperBound
expr_stmt|;
block|}
else|else
block|{
name|negativeRange
operator|=
name|Range
operator|.
name|create
argument_list|(
name|nextComplementRangeLowerBound
argument_list|,
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
argument_list|)
expr_stmt|;
name|nextComplementRangeLowerBound
operator|=
name|Cut
operator|.
name|aboveAll
argument_list|()
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|negativeRange
operator|.
name|lowerBound
argument_list|,
name|negativeRange
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|descendingEntryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
name|descendingEntryIterator
parameter_list|()
block|{
comment|/*        * firstComplementRangeUpperBound is the upper bound of the last complement range with lower        * bound inside complementLowerBoundWindow.        *        * positiveItr starts at the first positive range with upper bound less than        * firstComplementRangeUpperBound. (Positive range upper bounds correspond to complement range        * lower bounds.)        */
name|Cut
argument_list|<
name|C
argument_list|>
name|startingPoint
init|=
name|complementLowerBoundWindow
operator|.
name|hasUpperBound
argument_list|()
condition|?
name|complementLowerBoundWindow
operator|.
name|upperEndpoint
argument_list|()
else|:
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
decl_stmt|;
name|boolean
name|inclusive
init|=
name|complementLowerBoundWindow
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|complementLowerBoundWindow
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
decl_stmt|;
specifier|final
name|PeekingIterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|positiveItr
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|positiveRangesByUpperBound
operator|.
name|headMap
argument_list|(
name|startingPoint
argument_list|,
name|inclusive
argument_list|)
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Cut
argument_list|<
name|C
argument_list|>
name|cut
decl_stmt|;
if|if
condition|(
name|positiveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cut
operator|=
operator|(
name|positiveItr
operator|.
name|peek
argument_list|()
operator|.
name|upperBound
operator|==
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
operator|)
condition|?
name|positiveItr
operator|.
name|next
argument_list|()
operator|.
name|lowerBound
else|:
name|positiveRangesByLowerBound
operator|.
name|higherKey
argument_list|(
name|positiveItr
operator|.
name|peek
argument_list|()
operator|.
name|upperBound
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|complementLowerBoundWindow
operator|.
name|contains
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|)
operator|||
name|positiveRangesByLowerBound
operator|.
name|containsKey
argument_list|(
name|Cut
operator|.
name|belowAll
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
else|else
block|{
name|cut
operator|=
name|positiveRangesByLowerBound
operator|.
name|higherKey
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Cut
argument_list|<
name|C
argument_list|>
name|firstComplementRangeUpperBound
init|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|cut
argument_list|,
name|Cut
operator|.
expr|<
name|C
operator|>
name|aboveAll
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
name|Cut
argument_list|<
name|C
argument_list|>
name|nextComplementRangeUpperBound
init|=
name|firstComplementRangeUpperBound
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|nextComplementRangeUpperBound
operator|==
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|positiveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|positiveRange
init|=
name|positiveItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Range
argument_list|<
name|C
argument_list|>
name|negativeRange
init|=
name|Range
operator|.
name|create
argument_list|(
name|positiveRange
operator|.
name|upperBound
argument_list|,
name|nextComplementRangeUpperBound
argument_list|)
decl_stmt|;
name|nextComplementRangeUpperBound
operator|=
name|positiveRange
operator|.
name|lowerBound
expr_stmt|;
if|if
condition|(
name|complementLowerBoundWindow
operator|.
name|lowerBound
operator|.
name|isLessThan
argument_list|(
name|negativeRange
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|negativeRange
operator|.
name|lowerBound
argument_list|,
name|negativeRange
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|complementLowerBoundWindow
operator|.
name|lowerBound
operator|.
name|isLessThan
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|)
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|negativeRange
init|=
name|Range
operator|.
name|create
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|,
name|nextComplementRangeUpperBound
argument_list|)
decl_stmt|;
name|nextComplementRangeUpperBound
operator|=
name|Cut
operator|.
name|belowAll
argument_list|()
expr_stmt|;
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|Cut
operator|.
expr|<
name|C
operator|>
name|belowAll
argument_list|()
argument_list|,
name|negativeRange
argument_list|)
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|entryIterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|get (Object key)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|Cut
condition|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cut
argument_list|<
name|C
argument_list|>
name|cut
init|=
operator|(
name|Cut
argument_list|<
name|C
argument_list|>
operator|)
name|key
decl_stmt|;
comment|// tailMap respects the current window
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|firstEntry
init|=
name|tailMap
argument_list|(
name|cut
argument_list|,
literal|true
argument_list|)
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|!=
literal|null
operator|&&
name|firstEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|cut
argument_list|)
condition|)
block|{
return|return
name|firstEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
DECL|class|Complement
specifier|private
specifier|final
class|class
name|Complement
extends|extends
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
block|{
DECL|method|Complement ()
name|Complement
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|ComplementRangesByLowerBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|TreeRangeSet
operator|.
name|this
operator|.
name|rangesByLowerBound
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> rangeToAdd)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToAdd
parameter_list|)
block|{
name|TreeRangeSet
operator|.
name|this
operator|.
name|remove
argument_list|(
name|rangeToAdd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> rangeToRemove)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToRemove
parameter_list|)
block|{
name|TreeRangeSet
operator|.
name|this
operator|.
name|add
argument_list|(
name|rangeToRemove
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (C value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
operator|!
name|TreeRangeSet
operator|.
name|this
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|complement ()
specifier|public
name|RangeSet
argument_list|<
name|C
argument_list|>
name|complement
parameter_list|()
block|{
return|return
name|TreeRangeSet
operator|.
name|this
return|;
block|}
block|}
DECL|class|SubRangeSetRangesByLowerBound
specifier|private
specifier|static
specifier|final
class|class
name|SubRangeSetRangesByLowerBound
parameter_list|<
name|C
extends|extends
name|Comparable
parameter_list|<
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractNavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
block|{
comment|/**      * lowerBoundWindow is the headMap/subMap/tailMap view; it only restricts the keys, and does not      * affect the values.      */
DECL|field|lowerBoundWindow
specifier|private
specifier|final
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|lowerBoundWindow
decl_stmt|;
comment|/**      * restriction is the subRangeSet view; ranges are truncated to their intersection with      * restriction.      */
DECL|field|restriction
specifier|private
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|restriction
decl_stmt|;
DECL|field|rangesByLowerBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerBound
decl_stmt|;
DECL|field|rangesByUpperBound
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByUpperBound
decl_stmt|;
DECL|method|SubRangeSetRangesByLowerBound ( Range<Cut<C>> lowerBoundWindow, Range<C> restriction, NavigableMap<Cut<C>, Range<C>> rangesByLowerBound)
specifier|private
name|SubRangeSetRangesByLowerBound
parameter_list|(
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|lowerBoundWindow
parameter_list|,
name|Range
argument_list|<
name|C
argument_list|>
name|restriction
parameter_list|,
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|rangesByLowerBound
parameter_list|)
block|{
name|this
operator|.
name|lowerBoundWindow
operator|=
name|checkNotNull
argument_list|(
name|lowerBoundWindow
argument_list|)
expr_stmt|;
name|this
operator|.
name|restriction
operator|=
name|checkNotNull
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangesByLowerBound
operator|=
name|checkNotNull
argument_list|(
name|rangesByLowerBound
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangesByUpperBound
operator|=
operator|new
name|RangesByUpperBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|rangesByLowerBound
argument_list|)
expr_stmt|;
block|}
DECL|method|subMap (Range<Cut<C>> window)
specifier|private
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|subMap
parameter_list|(
name|Range
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|window
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
operator|.
name|isConnected
argument_list|(
name|lowerBoundWindow
argument_list|)
condition|)
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|SubRangeSetRangesByLowerBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|lowerBoundWindow
operator|.
name|intersection
argument_list|(
name|window
argument_list|)
argument_list|,
name|restriction
argument_list|,
name|rangesByLowerBound
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subMap ( Cut<C> fromKey, boolean fromInclusive, Cut<C> toKey, boolean toInclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|subMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|fromKey
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|Cut
argument_list|<
name|C
argument_list|>
name|toKey
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|range
argument_list|(
name|fromKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|fromInclusive
argument_list|)
argument_list|,
name|toKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|toInclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|headMap (Cut<C> toKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|headMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|upTo
argument_list|(
name|toKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|inclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tailMap (Cut<C> fromKey, boolean inclusive)
specifier|public
name|NavigableMap
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|tailMap
parameter_list|(
name|Cut
argument_list|<
name|C
argument_list|>
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
return|return
name|subMap
argument_list|(
name|Range
operator|.
name|downTo
argument_list|(
name|fromKey
argument_list|,
name|BoundType
operator|.
name|forBoolean
argument_list|(
name|inclusive
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|Ordering
operator|.
expr|<
name|Cut
argument_list|<
name|C
argument_list|>
operator|>
name|natural
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|get (@ullable Object key)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|Cut
condition|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we catch CCE's
name|Cut
argument_list|<
name|C
argument_list|>
name|cut
init|=
operator|(
name|Cut
argument_list|<
name|C
argument_list|>
operator|)
name|key
decl_stmt|;
if|if
condition|(
operator|!
name|lowerBoundWindow
operator|.
name|contains
argument_list|(
name|cut
argument_list|)
operator|||
name|cut
operator|.
name|compareTo
argument_list|(
name|restriction
operator|.
name|lowerBound
argument_list|)
operator|<
literal|0
operator|||
name|cut
operator|.
name|compareTo
argument_list|(
name|restriction
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|cut
operator|.
name|equals
argument_list|(
name|restriction
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
comment|// it might be present, truncated on the left
name|Range
argument_list|<
name|C
argument_list|>
name|candidate
init|=
name|Maps
operator|.
name|valueOrNull
argument_list|(
name|rangesByLowerBound
operator|.
name|floorEntry
argument_list|(
name|cut
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
operator|&&
name|candidate
operator|.
name|upperBound
operator|.
name|compareTo
argument_list|(
name|restriction
operator|.
name|lowerBound
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|candidate
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|result
init|=
name|rangesByLowerBound
operator|.
name|get
argument_list|(
name|cut
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
if|if
condition|(
name|restriction
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|completeRangeItr
decl_stmt|;
if|if
condition|(
name|lowerBoundWindow
operator|.
name|upperBound
operator|.
name|isLessThan
argument_list|(
name|restriction
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|lowerBoundWindow
operator|.
name|lowerBound
operator|.
name|isLessThan
argument_list|(
name|restriction
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
comment|// starts at the first range with upper bound strictly greater than restriction.lowerBound
name|completeRangeItr
operator|=
name|rangesByUpperBound
operator|.
name|tailMap
argument_list|(
name|restriction
operator|.
name|lowerBound
argument_list|,
literal|false
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// starts at the first range with lower bound above lowerBoundWindow.lowerBound
name|completeRangeItr
operator|=
name|rangesByLowerBound
operator|.
name|tailMap
argument_list|(
name|lowerBoundWindow
operator|.
name|lowerBound
operator|.
name|endpoint
argument_list|()
argument_list|,
name|lowerBoundWindow
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Cut
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|upperBoundOnLowerBounds
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|min
argument_list|(
name|lowerBoundWindow
operator|.
name|upperBound
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|restriction
operator|.
name|upperBound
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|completeRangeItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
name|Range
argument_list|<
name|C
argument_list|>
name|nextRange
init|=
name|completeRangeItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|upperBoundOnLowerBounds
operator|.
name|isLessThan
argument_list|(
name|nextRange
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
else|else
block|{
name|nextRange
operator|=
name|nextRange
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|nextRange
operator|.
name|lowerBound
argument_list|,
name|nextRange
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|descendingEntryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
name|descendingEntryIterator
parameter_list|()
block|{
if|if
condition|(
name|restriction
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
name|Cut
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|>
name|upperBoundOnLowerBounds
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|min
argument_list|(
name|lowerBoundWindow
operator|.
name|upperBound
argument_list|,
name|Cut
operator|.
name|belowValue
argument_list|(
name|restriction
operator|.
name|upperBound
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|completeRangeItr
init|=
name|rangesByLowerBound
operator|.
name|headMap
argument_list|(
name|upperBoundOnLowerBounds
operator|.
name|endpoint
argument_list|()
argument_list|,
name|upperBoundOnLowerBounds
operator|.
name|typeAsUpperBound
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
argument_list|)
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|Cut
argument_list|<
name|C
argument_list|>
argument_list|,
name|Range
argument_list|<
name|C
argument_list|>
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|completeRangeItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
name|Range
argument_list|<
name|C
argument_list|>
name|nextRange
init|=
name|completeRangeItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|restriction
operator|.
name|lowerBound
operator|.
name|compareTo
argument_list|(
name|nextRange
operator|.
name|upperBound
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
name|nextRange
operator|=
name|nextRange
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowerBoundWindow
operator|.
name|contains
argument_list|(
name|nextRange
operator|.
name|lowerBound
argument_list|)
condition|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|nextRange
operator|.
name|lowerBound
argument_list|,
name|nextRange
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|entryIterator
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subRangeSet (Range<C> view)
specifier|public
name|RangeSet
argument_list|<
name|C
argument_list|>
name|subRangeSet
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|view
parameter_list|)
block|{
return|return
name|view
operator|.
name|equals
argument_list|(
name|Range
operator|.
expr|<
name|C
operator|>
name|all
argument_list|()
argument_list|)
condition|?
name|this
else|:
operator|new
name|SubRangeSet
argument_list|(
name|view
argument_list|)
return|;
block|}
DECL|class|SubRangeSet
specifier|private
specifier|final
class|class
name|SubRangeSet
extends|extends
name|TreeRangeSet
argument_list|<
name|C
argument_list|>
block|{
DECL|field|restriction
specifier|private
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|restriction
decl_stmt|;
DECL|method|SubRangeSet (Range<C> restriction)
name|SubRangeSet
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|restriction
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|SubRangeSetRangesByLowerBound
argument_list|<
name|C
argument_list|>
argument_list|(
name|Range
operator|.
expr|<
name|Cut
argument_list|<
name|C
argument_list|>
operator|>
name|all
argument_list|()
argument_list|,
name|restriction
argument_list|,
name|TreeRangeSet
operator|.
name|this
operator|.
name|rangesByLowerBound
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|restriction
operator|=
name|restriction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encloses (Range<C> range)
specifier|public
name|boolean
name|encloses
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|)
block|{
if|if
condition|(
operator|!
name|restriction
operator|.
name|isEmpty
argument_list|()
operator|&&
name|restriction
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
condition|)
block|{
name|Range
argument_list|<
name|C
argument_list|>
name|enclosing
init|=
name|TreeRangeSet
operator|.
name|this
operator|.
name|rangeEnclosing
argument_list|(
name|range
argument_list|)
decl_stmt|;
return|return
name|enclosing
operator|!=
literal|null
operator|&&
operator|!
name|enclosing
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|rangeContaining (C value)
specifier|public
name|Range
argument_list|<
name|C
argument_list|>
name|rangeContaining
parameter_list|(
name|C
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|restriction
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Range
argument_list|<
name|C
argument_list|>
name|result
init|=
name|TreeRangeSet
operator|.
name|this
operator|.
name|rangeContaining
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|result
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|add (Range<C> rangeToAdd)
specifier|public
name|void
name|add
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToAdd
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|restriction
operator|.
name|encloses
argument_list|(
name|rangeToAdd
argument_list|)
argument_list|,
literal|"Cannot add range %s to subRangeSet(%s)"
argument_list|,
name|rangeToAdd
argument_list|,
name|restriction
argument_list|)
expr_stmt|;
name|super
operator|.
name|add
argument_list|(
name|rangeToAdd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Range<C> rangeToRemove)
specifier|public
name|void
name|remove
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|rangeToRemove
parameter_list|)
block|{
if|if
condition|(
name|rangeToRemove
operator|.
name|isConnected
argument_list|(
name|restriction
argument_list|)
condition|)
block|{
name|TreeRangeSet
operator|.
name|this
operator|.
name|remove
argument_list|(
name|rangeToRemove
operator|.
name|intersection
argument_list|(
name|restriction
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|contains (C value)
specifier|public
name|boolean
name|contains
parameter_list|(
name|C
name|value
parameter_list|)
block|{
return|return
name|restriction
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|&&
name|TreeRangeSet
operator|.
name|this
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|TreeRangeSet
operator|.
name|this
operator|.
name|remove
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subRangeSet (Range<C> view)
specifier|public
name|RangeSet
argument_list|<
name|C
argument_list|>
name|subRangeSet
parameter_list|(
name|Range
argument_list|<
name|C
argument_list|>
name|view
parameter_list|)
block|{
if|if
condition|(
name|view
operator|.
name|encloses
argument_list|(
name|restriction
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|view
operator|.
name|isConnected
argument_list|(
name|restriction
argument_list|)
condition|)
block|{
return|return
operator|new
name|SubRangeSet
argument_list|(
name|restriction
operator|.
name|intersection
argument_list|(
name|view
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableRangeSet
operator|.
name|of
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

