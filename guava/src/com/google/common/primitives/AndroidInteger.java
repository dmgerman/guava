begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_comment
comment|/**  * Static utility methods derived from Android's {@code Integer.java}.  */
end_comment

begin_class
DECL|class|AndroidInteger
specifier|final
class|class
name|AndroidInteger
block|{
comment|/**    * See {@link Ints#tryParse(String)} for the public interface.    */
annotation|@
name|CheckForNull
DECL|method|tryParse (String string)
specifier|static
name|Integer
name|tryParse
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|tryParse
argument_list|(
name|string
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * See {@link Ints#tryParse(String, int)} for the public interface.    */
annotation|@
name|CheckForNull
DECL|method|tryParse (String string, int radix)
specifier|static
name|Integer
name|tryParse
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|radix
operator|>=
name|Character
operator|.
name|MIN_RADIX
argument_list|,
literal|"Invalid radix %s, min radix is %s"
argument_list|,
name|radix
argument_list|,
name|Character
operator|.
name|MIN_RADIX
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|radix
operator|<=
name|Character
operator|.
name|MAX_RADIX
argument_list|,
literal|"Invalid radix %s, max radix is %s"
argument_list|,
name|radix
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|,
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|negative
init|=
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
decl_stmt|;
if|if
condition|(
name|negative
operator|&&
operator|++
name|i
operator|==
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|tryParse
argument_list|(
name|string
argument_list|,
name|i
argument_list|,
name|radix
argument_list|,
name|negative
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
DECL|method|tryParse (String string, int offset, int radix, boolean negative)
specifier|private
specifier|static
name|Integer
name|tryParse
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|radix
parameter_list|,
name|boolean
name|negative
parameter_list|)
block|{
name|int
name|max
init|=
name|Integer
operator|.
name|MIN_VALUE
operator|/
name|radix
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|,
name|length
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|length
condition|)
block|{
name|int
name|digit
init|=
name|Character
operator|.
name|digit
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
argument_list|,
name|radix
argument_list|)
decl_stmt|;
if|if
condition|(
name|digit
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|max
operator|>
name|result
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|next
init|=
name|result
operator|*
name|radix
operator|-
name|digit
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|result
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
name|next
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|negative
condition|)
block|{
name|result
operator|=
operator|-
name|result
expr_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// For GWT where ints do not overflow
if|if
condition|(
name|result
operator|>
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|result
operator|<
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|AndroidInteger ()
specifier|private
name|AndroidInteger
parameter_list|()
block|{}
block|}
end_class

end_unit

