begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Unsafe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckReturnValue
import|;
end_import

begin_comment
comment|/**  * Static utility methods pertaining to {@code byte} primitives that interpret  * values as<i>unsigned</i> (that is, any negative value {@code b} is treated  * as the positive value {@code 256 + b}). The corresponding methods that treat  * the values as signed are found in {@link SignedBytes}, and the methods for  * which signedness is not an issue are in {@link Bytes}.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/PrimitivesExplained">  * primitive utilities</a>.  *  * @author Kevin Bourrillion  * @author Martin Buchholz  * @author Hiroshi Yamauchi  * @author Louis Wasserman  * @since 1.0  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|UnsignedBytes
specifier|public
specifier|final
class|class
name|UnsignedBytes
block|{
DECL|method|UnsignedBytes ()
specifier|private
name|UnsignedBytes
parameter_list|()
block|{}
comment|/**    * The largest power of two that can be represented as an unsigned {@code    * byte}.    *    * @since 10.0    */
DECL|field|MAX_POWER_OF_TWO
specifier|public
specifier|static
specifier|final
name|byte
name|MAX_POWER_OF_TWO
init|=
operator|(
name|byte
operator|)
literal|0x80
decl_stmt|;
comment|/**    * The largest value that fits into an unsigned byte.    *    * @since 13.0    */
DECL|field|MAX_VALUE
specifier|public
specifier|static
specifier|final
name|byte
name|MAX_VALUE
init|=
operator|(
name|byte
operator|)
literal|0xFF
decl_stmt|;
DECL|field|UNSIGNED_MASK
specifier|private
specifier|static
specifier|final
name|int
name|UNSIGNED_MASK
init|=
literal|0xFF
decl_stmt|;
comment|/**    * Returns the value of the given byte as an integer, when treated as    * unsigned. That is, returns {@code value + 256} if {@code value} is    * negative; {@code value} itself otherwise.    *    * @since 6.0    */
annotation|@
name|CheckReturnValue
DECL|method|toInt (byte value)
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
return|return
name|value
operator|&
name|UNSIGNED_MASK
return|;
block|}
comment|/**    * Returns the {@code byte} value that, when treated as unsigned, is equal to    * {@code value}, if possible.    *    * @param value a value between 0 and 255 inclusive    * @return the {@code byte} value that, when treated as unsigned, equals    *     {@code value}    * @throws IllegalArgumentException if {@code value} is negative or greater    *     than 255    */
DECL|method|checkedCast (long value)
specifier|public
specifier|static
name|byte
name|checkedCast
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>>
name|Byte
operator|.
name|SIZE
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// don't use checkArgument here, to avoid boxing
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Out of range: "
operator|+
name|value
argument_list|)
throw|;
block|}
return|return
operator|(
name|byte
operator|)
name|value
return|;
block|}
comment|/**    * Returns the {@code byte} value that, when treated as unsigned, is nearest    * in value to {@code value}.    *    * @param value any {@code long} value    * @return {@code (byte) 255} if {@code value>= 255}, {@code (byte) 0} if    *     {@code value<= 0}, and {@code value} cast to {@code byte} otherwise    */
DECL|method|saturatedCast (long value)
specifier|public
specifier|static
name|byte
name|saturatedCast
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>
name|toInt
argument_list|(
name|MAX_VALUE
argument_list|)
condition|)
block|{
return|return
name|MAX_VALUE
return|;
comment|// -1
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|byte
operator|)
literal|0
return|;
block|}
return|return
operator|(
name|byte
operator|)
name|value
return|;
block|}
comment|/**    * Compares the two specified {@code byte} values, treating them as unsigned    * values between 0 and 255 inclusive. For example, {@code (byte) -127} is    * considered greater than {@code (byte) 127} because it is seen as having    * the value of positive {@code 129}.    *    * @param a the first {@code byte} to compare    * @param b the second {@code byte} to compare    * @return a negative value if {@code a} is less than {@code b}; a positive    *     value if {@code a} is greater than {@code b}; or zero if they are equal    */
annotation|@
name|CheckReturnValue
DECL|method|compare (byte a, byte b)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|byte
name|a
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|a
argument_list|)
operator|-
name|toInt
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * Returns the least value present in {@code array}.    *    * @param array a<i>nonempty</i> array of {@code byte} values    * @return the value present in {@code array} that is less than or equal to    *     every other value in the array    * @throws IllegalArgumentException if {@code array} is empty    */
annotation|@
name|CheckReturnValue
DECL|method|min (byte... array)
specifier|public
specifier|static
name|byte
name|min
parameter_list|(
name|byte
modifier|...
name|array
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|array
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|toInt
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|next
init|=
name|toInt
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|next
expr_stmt|;
block|}
block|}
return|return
operator|(
name|byte
operator|)
name|min
return|;
block|}
comment|/**    * Returns the greatest value present in {@code array}.    *    * @param array a<i>nonempty</i> array of {@code byte} values    * @return the value present in {@code array} that is greater than or equal    *     to every other value in the array    * @throws IllegalArgumentException if {@code array} is empty    */
annotation|@
name|CheckReturnValue
DECL|method|max (byte... array)
specifier|public
specifier|static
name|byte
name|max
parameter_list|(
name|byte
modifier|...
name|array
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|array
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|max
init|=
name|toInt
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|next
init|=
name|toInt
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|next
expr_stmt|;
block|}
block|}
return|return
operator|(
name|byte
operator|)
name|max
return|;
block|}
comment|/**    * Returns a string representation of x, where x is treated as unsigned.    *    * @since 13.0    */
annotation|@
name|Beta
annotation|@
name|CheckReturnValue
DECL|method|toString (byte x)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
name|x
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|x
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Returns a string representation of {@code x} for the given radix, where {@code x} is treated    * as unsigned.    *    * @param x the value to convert to a string.    * @param radix the radix to use while working with {@code x}    * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}    *         and {@link Character#MAX_RADIX}.    * @since 13.0    */
annotation|@
name|Beta
annotation|@
name|CheckReturnValue
DECL|method|toString (byte x, int radix)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
name|x
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|radix
operator|>=
name|Character
operator|.
name|MIN_RADIX
operator|&&
name|radix
operator|<=
name|Character
operator|.
name|MAX_RADIX
argument_list|,
literal|"radix (%s) must be between Character.MIN_RADIX and Character.MAX_RADIX"
argument_list|,
name|radix
argument_list|)
expr_stmt|;
comment|// Benchmarks indicate this is probably not worth optimizing.
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|toInt
argument_list|(
name|x
argument_list|)
argument_list|,
name|radix
argument_list|)
return|;
block|}
comment|/**    * Returns the unsigned {@code byte} value represented by the given decimal string.    *    * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}    *         value    * @throws NullPointerException if {@code s} is null    *         (in contrast to {@link Byte#parseByte(String)})    * @since 13.0    */
annotation|@
name|Beta
DECL|method|parseUnsignedByte (String string)
specifier|public
specifier|static
name|byte
name|parseUnsignedByte
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|parseUnsignedByte
argument_list|(
name|string
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Returns the unsigned {@code byte} value represented by a string with the given radix.    *    * @param string the string containing the unsigned {@code byte} representation to be parsed.    * @param radix the radix to use while parsing {@code string}    * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}    *         with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}    *         and {@link Character#MAX_RADIX}.    * @throws NullPointerException if {@code s} is null    *         (in contrast to {@link Byte#parseByte(String)})    * @since 13.0    */
annotation|@
name|Beta
DECL|method|parseUnsignedByte (String string, int radix)
specifier|public
specifier|static
name|byte
name|parseUnsignedByte
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|int
name|parse
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|checkNotNull
argument_list|(
name|string
argument_list|)
argument_list|,
name|radix
argument_list|)
decl_stmt|;
comment|// We need to throw a NumberFormatException, so we have to duplicate checkedCast. =(
if|if
condition|(
name|parse
operator|>>
name|Byte
operator|.
name|SIZE
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|byte
operator|)
name|parse
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"out of range: "
operator|+
name|parse
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a string containing the supplied {@code byte} values separated by    * {@code separator}. For example, {@code join(":", (byte) 1, (byte) 2,    * (byte) 255)} returns the string {@code "1:2:255"}.    *    * @param separator the text that should appear between consecutive values in    *     the resulting string (but not at the start or end)    * @param array an array of {@code byte} values, possibly empty    */
annotation|@
name|CheckReturnValue
DECL|method|join (String separator, byte... array)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
name|separator
parameter_list|,
name|byte
modifier|...
name|array
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// For pre-sizing a builder, just get the right order of magnitude
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|array
operator|.
name|length
operator|*
operator|(
literal|3
operator|+
name|separator
operator|.
name|length
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|toInt
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns a comparator that compares two {@code byte} arrays    * lexicographically. That is, it compares, using {@link    * #compare(byte, byte)}), the first pair of values that follow any common    * prefix, or when one array is a prefix of the other, treats the shorter    * array as the lesser. For example, {@code []< [0x01]< [0x01, 0x7F]<    * [0x01, 0x80]< [0x02]}. Values are treated as unsigned.    *    *<p>The returned comparator is inconsistent with {@link    * Object#equals(Object)} (since arrays support only identity equality), but    * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.    *    * @see<a href="http://en.wikipedia.org/wiki/Lexicographical_order">    *     Lexicographical order article at Wikipedia</a>    * @since 2.0    */
annotation|@
name|CheckReturnValue
DECL|method|lexicographicalComparator ()
specifier|public
specifier|static
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|lexicographicalComparator
parameter_list|()
block|{
return|return
name|LexicographicalComparatorHolder
operator|.
name|BEST_COMPARATOR
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|lexicographicalComparatorJavaImpl ()
specifier|static
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|lexicographicalComparatorJavaImpl
parameter_list|()
block|{
return|return
name|LexicographicalComparatorHolder
operator|.
name|PureJavaComparator
operator|.
name|INSTANCE
return|;
block|}
comment|/**    * Provides a lexicographical comparator implementation; either a Java    * implementation or a faster implementation based on {@link Unsafe}.    *    *<p>Uses reflection to gracefully fall back to the Java implementation if    * {@code Unsafe} isn't available.    */
annotation|@
name|VisibleForTesting
DECL|class|LexicographicalComparatorHolder
specifier|static
class|class
name|LexicographicalComparatorHolder
block|{
DECL|field|UNSAFE_COMPARATOR_NAME
specifier|static
specifier|final
name|String
name|UNSAFE_COMPARATOR_NAME
init|=
name|LexicographicalComparatorHolder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$UnsafeComparator"
decl_stmt|;
DECL|field|BEST_COMPARATOR
specifier|static
specifier|final
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|BEST_COMPARATOR
init|=
name|getBestComparator
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|enum|UnsafeComparator
enum|enum
name|UnsafeComparator
implements|implements
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|BIG_ENDIAN
specifier|static
specifier|final
name|boolean
name|BIG_ENDIAN
init|=
name|ByteOrder
operator|.
name|nativeOrder
argument_list|()
operator|.
name|equals
argument_list|(
name|ByteOrder
operator|.
name|BIG_ENDIAN
argument_list|)
decl_stmt|;
comment|/*        * The following static final fields exist for performance reasons.        *        * In UnsignedBytesBenchmark, accessing the following objects via static        * final fields is the fastest (more than twice as fast as the Java        * implementation, vs ~1.5x with non-final static fields, on x86_32)        * under the Hotspot server compiler. The reason is obviously that the        * non-final fields need to be reloaded inside the loop.        *        * And, no, defining (final or not) local variables out of the loop still        * isn't as good because the null check on the theUnsafe object remains        * inside the loop and BYTE_ARRAY_BASE_OFFSET doesn't get        * constant-folded.        *        * The compiler can treat static final fields as compile-time constants        * and can constant-fold them while (final or not) local variables are        * run time values.        */
DECL|field|theUnsafe
specifier|static
specifier|final
name|Unsafe
name|theUnsafe
decl_stmt|;
comment|/** The offset to the first element in a byte array. */
DECL|field|BYTE_ARRAY_BASE_OFFSET
specifier|static
specifier|final
name|int
name|BYTE_ARRAY_BASE_OFFSET
decl_stmt|;
static|static
block|{
name|theUnsafe
operator|=
name|getUnsafe
argument_list|()
expr_stmt|;
name|BYTE_ARRAY_BASE_OFFSET
operator|=
name|theUnsafe
operator|.
name|arrayBaseOffset
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
comment|// sanity check - this should never fail
if|if
condition|(
name|theUnsafe
operator|.
name|arrayIndexScale
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**        * Returns a sun.misc.Unsafe.  Suitable for use in a 3rd party package.        * Replace with a simple call to Unsafe.getUnsafe when integrating        * into a jdk.        *        * @return a sun.misc.Unsafe        */
DECL|method|getUnsafe ()
specifier|private
specifier|static
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|getUnsafe
parameter_list|()
block|{
try|try
block|{
return|return
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|getUnsafe
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|// that's okay; try reflection instead
block|}
try|try
block|{
return|return
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
argument_list|()
block|{
specifier|public
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
name|k
init|=
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|class
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|f
range|:
name|k
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|x
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|isInstance
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
name|k
operator|.
name|cast
argument_list|(
name|x
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchFieldError
argument_list|(
literal|"the Unsafe"
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not initialize intrinsics"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|compare (byte[] left, byte[] right)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|left
operator|.
name|length
argument_list|,
name|right
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|minWords
init|=
name|minLength
operator|/
name|Longs
operator|.
name|BYTES
decl_stmt|;
comment|/*          * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a          * time is no slower than comparing 4 bytes at a time even on 32-bit.          * On the other hand, it is substantially faster on 64-bit.          */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minWords
operator|*
name|Longs
operator|.
name|BYTES
condition|;
name|i
operator|+=
name|Longs
operator|.
name|BYTES
control|)
block|{
name|long
name|lw
init|=
name|theUnsafe
operator|.
name|getLong
argument_list|(
name|left
argument_list|,
name|BYTE_ARRAY_BASE_OFFSET
operator|+
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
name|long
name|rw
init|=
name|theUnsafe
operator|.
name|getLong
argument_list|(
name|right
argument_list|,
name|BYTE_ARRAY_BASE_OFFSET
operator|+
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lw
operator|!=
name|rw
condition|)
block|{
if|if
condition|(
name|BIG_ENDIAN
condition|)
block|{
return|return
name|UnsignedLongs
operator|.
name|compare
argument_list|(
name|lw
argument_list|,
name|rw
argument_list|)
return|;
block|}
comment|/*              * We want to compare only the first index where left[index] != right[index].              * This corresponds to the least significant nonzero byte in lw ^ rw, since lw              * and rw are little-endian.  Long.numberOfTrailingZeros(diff) tells us the least              * significant nonzero bit, and zeroing out the first three bits of L.nTZ gives us the              * shift to get that least significant nonzero byte.              */
name|int
name|n
init|=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|lw
operator|^
name|rw
argument_list|)
operator|&
operator|~
literal|0x7
decl_stmt|;
return|return
operator|(
call|(
name|int
call|)
argument_list|(
operator|(
name|lw
operator|>>>
name|n
operator|)
operator|&
name|UNSIGNED_MASK
argument_list|)
operator|)
operator|-
operator|(
call|(
name|int
call|)
argument_list|(
operator|(
name|rw
operator|>>>
name|n
operator|)
operator|&
name|UNSIGNED_MASK
argument_list|)
operator|)
return|;
block|}
block|}
comment|// The epilogue to cover the last (minLength % 8) elements.
for|for
control|(
name|int
name|i
init|=
name|minWords
operator|*
name|Longs
operator|.
name|BYTES
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|UnsignedBytes
operator|.
name|compare
argument_list|(
name|left
index|[
name|i
index|]
argument_list|,
name|right
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|left
operator|.
name|length
operator|-
name|right
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"UnsignedBytes.lexicographicalComparator() (sun.misc.Unsafe version)"
return|;
block|}
block|}
DECL|enum|PureJavaComparator
enum|enum
name|PureJavaComparator
implements|implements
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|compare (byte[] left, byte[] right)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|left
operator|.
name|length
argument_list|,
name|right
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|UnsignedBytes
operator|.
name|compare
argument_list|(
name|left
index|[
name|i
index|]
argument_list|,
name|right
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|left
operator|.
name|length
operator|-
name|right
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"UnsignedBytes.lexicographicalComparator() (pure Java version)"
return|;
block|}
block|}
comment|/**      * Returns the Unsafe-using Comparator, or falls back to the pure-Java      * implementation if unable to do so.      */
DECL|method|getBestComparator ()
specifier|static
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|getBestComparator
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|UNSAFE_COMPARATOR_NAME
argument_list|)
decl_stmt|;
comment|// yes, UnsafeComparator does implement Comparator<byte[]>
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|comparator
init|=
operator|(
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|theClass
operator|.
name|getEnumConstants
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
return|return
name|comparator
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ensure we really catch *everything*
return|return
name|lexicographicalComparatorJavaImpl
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

