begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterators
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Static utility methods pertaining to {@code long} primitives, that are not already found in  * either {@link Long} or {@link Arrays}.  *  *<p>See the Guava User Guide article on<a  * href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>.  *  * @author Kevin Bourrillion  * @since 1.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|Longs
specifier|public
specifier|final
class|class
name|Longs
block|{
DECL|method|Longs ()
specifier|private
name|Longs
parameter_list|()
block|{}
comment|/**    * The number of bytes required to represent a primitive {@code long} value.    *    *<p><b>Java 8 users:</b> use {@link Long#BYTES} instead.    */
DECL|field|BYTES
specifier|public
specifier|static
specifier|final
name|int
name|BYTES
init|=
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * The largest power of two that can be represented as a {@code long}.    *    * @since 10.0    */
DECL|field|MAX_POWER_OF_TWO
specifier|public
specifier|static
specifier|final
name|long
name|MAX_POWER_OF_TWO
init|=
literal|1L
operator|<<
operator|(
name|Long
operator|.
name|SIZE
operator|-
literal|2
operator|)
decl_stmt|;
comment|/**    * Returns a hash code for {@code value}; equal to the result of invoking {@code ((Long)    * value).hashCode()}.    *    *<p>This method always return the value specified by {@link Long#hashCode()} in java, which    * might be different from {@code ((Long) value).hashCode()} in GWT because {@link    * Long#hashCode()} in GWT does not obey the JRE contract.    *    *<p><b>Java 8 users:</b> use {@link Long#hashCode(long)} instead.    *    * @param value a primitive {@code long} value    * @return a hash code for the value    */
DECL|method|hashCode (long value)
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|value
operator|^
operator|(
name|value
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
comment|/**    * Compares the two specified {@code long} values. The sign of the value returned is the same as    * that of {@code ((Long) a).compareTo(b)}.    *    *<p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the    * equivalent {@link Long#compare} method instead.    *    * @param a the first {@code long} to compare    * @param b the second {@code long} to compare    * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is    *     greater than {@code b}; or zero if they are equal    */
DECL|method|compare (long a, long b)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
comment|/**    * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.    *    * @param array an array of {@code long} values, possibly empty    * @param target a primitive {@code long} value    * @return {@code true} if {@code array[i] == target} for some value of {@code i}    */
DECL|method|contains (long[] array, long target)
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|long
name|target
parameter_list|)
block|{
for|for
control|(
name|long
name|value
range|:
name|array
control|)
block|{
if|if
condition|(
name|value
operator|==
name|target
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns the index of the first appearance of the value {@code target} in {@code array}.    *    * @param array an array of {@code long} values, possibly empty    * @param target a primitive {@code long} value    * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no    *     such index exists.    */
DECL|method|indexOf (long[] array, long target)
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|long
name|target
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|array
argument_list|,
name|target
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
return|;
block|}
comment|// TODO(kevinb): consider making this public
DECL|method|indexOf (long[] array, long target, int start, int end)
specifier|private
specifier|static
name|int
name|indexOf
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|long
name|target
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
index|]
operator|==
name|target
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the start position of the first occurrence of the specified {@code target} within    * {@code array}, or {@code -1} if there is no such occurrence.    *    *<p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,    * i, i + target.length)} contains exactly the same elements as {@code target}.    *    * @param array the array to search for the sequence {@code target}    * @param target the array to search for as a sub-sequence of {@code array}    */
DECL|method|indexOf (long[] array, long[] target)
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|long
index|[]
name|target
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|array
argument_list|,
literal|"array"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|outer
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
operator|-
name|target
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|target
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|target
index|[
name|j
index|]
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
block|}
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the index of the last appearance of the value {@code target} in {@code array}.    *    * @param array an array of {@code long} values, possibly empty    * @param target a primitive {@code long} value    * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no    *     such index exists.    */
DECL|method|lastIndexOf (long[] array, long target)
specifier|public
specifier|static
name|int
name|lastIndexOf
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|long
name|target
parameter_list|)
block|{
return|return
name|lastIndexOf
argument_list|(
name|array
argument_list|,
name|target
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
return|;
block|}
comment|// TODO(kevinb): consider making this public
DECL|method|lastIndexOf (long[] array, long target, int start, int end)
specifier|private
specifier|static
name|int
name|lastIndexOf
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|long
name|target
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>=
name|start
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
index|]
operator|==
name|target
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the least value present in {@code array}.    *    * @param array a<i>nonempty</i> array of {@code long} values    * @return the value present in {@code array} that is less than or equal to every other value in    *     the array    * @throws IllegalArgumentException if {@code array} is empty    */
DECL|method|min (long... array)
specifier|public
specifier|static
name|long
name|min
parameter_list|(
name|long
modifier|...
name|array
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|array
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|min
init|=
name|array
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
index|]
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|min
return|;
block|}
comment|/**    * Returns the greatest value present in {@code array}.    *    * @param array a<i>nonempty</i> array of {@code long} values    * @return the value present in {@code array} that is greater than or equal to every other value    *     in the array    * @throws IllegalArgumentException if {@code array} is empty    */
DECL|method|max (long... array)
specifier|public
specifier|static
name|long
name|max
parameter_list|(
name|long
modifier|...
name|array
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|array
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|max
init|=
name|array
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
index|]
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|max
return|;
block|}
comment|/**    * Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.    *    *<p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned    * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code    * value} is greater than {@code max}, {@code max} is returned.    *    * @param value the {@code long} value to constrain    * @param min the lower bound (inclusive) of the range to constrain {@code value} to    * @param max the upper bound (inclusive) of the range to constrain {@code value} to    * @throws IllegalArgumentException if {@code min> max}    * @since 21.0    */
annotation|@
name|Beta
DECL|method|constrainToRange (long value, long min, long max)
specifier|public
specifier|static
name|long
name|constrainToRange
parameter_list|(
name|long
name|value
parameter_list|,
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|min
operator|<=
name|max
argument_list|,
literal|"min (%s) must be less than or equal to max (%s)"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|value
argument_list|,
name|min
argument_list|)
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * Returns the values from each provided array combined into a single array. For example, {@code    * concat(new long[] {a, b}, new long[] {}, new long[] {c}} returns the array {@code {a, b, c}}.    *    * @param arrays zero or more {@code long} arrays    * @return a single array containing all the values from the source arrays, in order    */
DECL|method|concat (long[]... arrays)
specifier|public
specifier|static
name|long
index|[]
name|concat
parameter_list|(
name|long
index|[]
modifier|...
name|arrays
parameter_list|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|length
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|length
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|pos
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|array
operator|.
name|length
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns a big-endian representation of {@code value} in an 8-element byte array; equivalent to    * {@code ByteBuffer.allocate(8).putLong(value).array()}. For example, the input value {@code    * 0x1213141516171819L} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17,    * 0x18, 0x19}}.    *    *<p>If you need to convert and concatenate several values (possibly even of different types),    * use a shared {@link java.nio.ByteBuffer} instance, or use {@link    * com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.    */
DECL|method|toByteArray (long value)
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|long
name|value
parameter_list|)
block|{
comment|// Note that this code needs to stay compatible with GWT, which has known
comment|// bugs when narrowing byte casts of long values occur.
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|7
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0xffL
argument_list|)
expr_stmt|;
name|value
operator|>>=
literal|8
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes    * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the    * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the    * {@code long} value {@code 0x1213141516171819L}.    *    *<p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more    * flexibility at little cost in readability.    *    * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements    */
DECL|method|fromByteArray (byte[] bytes)
specifier|public
specifier|static
name|long
name|fromByteArray
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|bytes
operator|.
name|length
operator|>=
name|BYTES
argument_list|,
literal|"array too small: %s< %s"
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
return|return
name|fromBytes
argument_list|(
name|bytes
index|[
literal|0
index|]
argument_list|,
name|bytes
index|[
literal|1
index|]
argument_list|,
name|bytes
index|[
literal|2
index|]
argument_list|,
name|bytes
index|[
literal|3
index|]
argument_list|,
name|bytes
index|[
literal|4
index|]
argument_list|,
name|bytes
index|[
literal|5
index|]
argument_list|,
name|bytes
index|[
literal|6
index|]
argument_list|,
name|bytes
index|[
literal|7
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns the {@code long} value whose byte representation is the given 8 bytes, in big-endian    * order; equivalent to {@code Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8})}.    *    * @since 7.0    */
DECL|method|fromBytes ( byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)
specifier|public
specifier|static
name|long
name|fromBytes
parameter_list|(
name|byte
name|b1
parameter_list|,
name|byte
name|b2
parameter_list|,
name|byte
name|b3
parameter_list|,
name|byte
name|b4
parameter_list|,
name|byte
name|b5
parameter_list|,
name|byte
name|b6
parameter_list|,
name|byte
name|b7
parameter_list|,
name|byte
name|b8
parameter_list|)
block|{
return|return
operator|(
name|b1
operator|&
literal|0xFFL
operator|)
operator|<<
literal|56
operator||
operator|(
name|b2
operator|&
literal|0xFFL
operator|)
operator|<<
literal|48
operator||
operator|(
name|b3
operator|&
literal|0xFFL
operator|)
operator|<<
literal|40
operator||
operator|(
name|b4
operator|&
literal|0xFFL
operator|)
operator|<<
literal|32
operator||
operator|(
name|b5
operator|&
literal|0xFFL
operator|)
operator|<<
literal|24
operator||
operator|(
name|b6
operator|&
literal|0xFFL
operator|)
operator|<<
literal|16
operator||
operator|(
name|b7
operator|&
literal|0xFFL
operator|)
operator|<<
literal|8
operator||
operator|(
name|b8
operator|&
literal|0xFFL
operator|)
return|;
block|}
comment|/*    * Moving asciiDigits into this static holder class lets ProGuard eliminate and inline the Longs    * class.    */
DECL|class|AsciiDigits
specifier|static
specifier|final
class|class
name|AsciiDigits
block|{
DECL|method|AsciiDigits ()
specifier|private
name|AsciiDigits
parameter_list|()
block|{}
DECL|field|asciiDigits
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|asciiDigits
decl_stmt|;
static|static
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|result
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
literal|'0'
operator|+
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|26
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
literal|'A'
operator|+
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|10
operator|+
name|i
argument_list|)
expr_stmt|;
name|result
index|[
literal|'a'
operator|+
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|10
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|asciiDigits
operator|=
name|result
expr_stmt|;
block|}
DECL|method|digit (char c)
specifier|static
name|int
name|digit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|<
literal|128
operator|)
condition|?
name|asciiDigits
index|[
name|c
index|]
else|:
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (    *<code>'&#92;u002D'</code>) is recognized as the minus sign.    *    *<p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing    * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns    * {@code null} if non-ASCII digits are present in the string.    *    *<p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite    * the change to {@link Long#parseLong(String)} for that version.    *    * @param string the string representation of a long value    * @return the long value represented by {@code string}, or {@code null} if {@code string} has a    *     length of zero or cannot be parsed as a long value    * @since 14.0    */
annotation|@
name|Beta
annotation|@
name|Nullable
annotation|@
name|CheckForNull
DECL|method|tryParse (String string)
specifier|public
specifier|static
name|Long
name|tryParse
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|tryParse
argument_list|(
name|string
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Parses the specified string as a signed long value using the specified radix. The ASCII    * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.    *    *<p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of    * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,    * and returns {@code null} if non-ASCII digits are present in the string.    *    *<p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite    * the change to {@link Long#parseLong(String, int)} for that version.    *    * @param string the string representation of an long value    * @param radix the radix to use when parsing    * @return the long value represented by {@code string} using {@code radix}, or {@code null} if    *     {@code string} has a length of zero or cannot be parsed as a long value    * @throws IllegalArgumentException if {@code radix< Character.MIN_RADIX} or {@code radix>    *     Character.MAX_RADIX}    * @since 19.0    */
annotation|@
name|Beta
annotation|@
name|Nullable
annotation|@
name|CheckForNull
DECL|method|tryParse (String string, int radix)
specifier|public
specifier|static
name|Long
name|tryParse
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
if|if
condition|(
name|checkNotNull
argument_list|(
name|string
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|radix
argument_list|<
name|Character
operator|.
name|MIN_RADIX
operator|||
name|radix
argument_list|>
name|Character
operator|.
name|MAX_RADIX
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"radix must be between MIN_RADIX and MAX_RADIX but was "
operator|+
name|radix
argument_list|)
throw|;
block|}
name|boolean
name|negative
init|=
name|string
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
decl_stmt|;
name|int
name|index
init|=
name|negative
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|string
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|digit
init|=
name|AsciiDigits
operator|.
name|digit
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|digit
operator|<
literal|0
operator|||
name|digit
operator|>=
name|radix
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|accum
init|=
operator|-
name|digit
decl_stmt|;
name|long
name|cap
init|=
name|Long
operator|.
name|MIN_VALUE
operator|/
name|radix
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|string
operator|.
name|length
argument_list|()
condition|)
block|{
name|digit
operator|=
name|AsciiDigits
operator|.
name|digit
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|digit
operator|<
literal|0
operator|||
name|digit
operator|>=
name|radix
operator|||
name|accum
operator|<
name|cap
condition|)
block|{
return|return
literal|null
return|;
block|}
name|accum
operator|*=
name|radix
expr_stmt|;
if|if
condition|(
name|accum
operator|<
name|Long
operator|.
name|MIN_VALUE
operator|+
name|digit
condition|)
block|{
return|return
literal|null
return|;
block|}
name|accum
operator|-=
name|digit
expr_stmt|;
block|}
if|if
condition|(
name|negative
condition|)
block|{
return|return
name|accum
return|;
block|}
elseif|else
if|if
condition|(
name|accum
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|-
name|accum
return|;
block|}
block|}
DECL|class|LongConverter
specifier|private
specifier|static
specifier|final
class|class
name|LongConverter
extends|extends
name|Converter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|LongConverter
name|INSTANCE
init|=
operator|new
name|LongConverter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|doForward (String value)
specifier|protected
name|Long
name|doForward
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|decode
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doBackward (Long value)
specifier|protected
name|String
name|doBackward
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Longs.stringConverter()"
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
block|}
comment|/**    * Returns a serializable converter object that converts between strings and longs using {@link    * Long#decode} and {@link Long#toString()}. The returned converter throws {@link    * NumberFormatException} if the input string is invalid.    *    *<p><b>Warning:</b> please see {@link Long#decode} to understand exactly how strings are parsed.    * For example, the string {@code "0123"} is treated as<i>octal</i> and converted to the value    * {@code 83L}.    *    * @since 16.0    */
annotation|@
name|Beta
DECL|method|stringConverter ()
specifier|public
specifier|static
name|Converter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|stringConverter
parameter_list|()
block|{
return|return
name|LongConverter
operator|.
name|INSTANCE
return|;
block|}
comment|/**    * Returns an array containing the same values as {@code array}, but guaranteed to be of a    * specified minimum length. If {@code array} already has a length of at least {@code minLength},    * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is    * returned, containing the values of {@code array}, and zeroes in the remaining places.    *    * @param array the source array    * @param minLength the minimum length the returned array must guarantee    * @param padding an extra amount to "grow" the array by if growth is necessary    * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative    * @return an array containing the values of {@code array}, with guaranteed minimum length {@code    *     minLength}    */
DECL|method|ensureCapacity (long[] array, int minLength, int padding)
specifier|public
specifier|static
name|long
index|[]
name|ensureCapacity
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|minLength
parameter_list|,
name|int
name|padding
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|minLength
operator|>=
literal|0
argument_list|,
literal|"Invalid minLength: %s"
argument_list|,
name|minLength
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|padding
operator|>=
literal|0
argument_list|,
literal|"Invalid padding: %s"
argument_list|,
name|padding
argument_list|)
expr_stmt|;
return|return
operator|(
name|array
operator|.
name|length
operator|<
name|minLength
operator|)
condition|?
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|minLength
operator|+
name|padding
argument_list|)
else|:
name|array
return|;
block|}
comment|/**    * Returns a string containing the supplied {@code long} values separated by {@code separator}.    * For example, {@code join("-", 1L, 2L, 3L)} returns the string {@code "1-2-3"}.    *    * @param separator the text that should appear between consecutive values in the resulting string    *     (but not at the start or end)    * @param array an array of {@code long} values, possibly empty    */
DECL|method|join (String separator, long... array)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
name|separator
parameter_list|,
name|long
modifier|...
name|array
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// For pre-sizing a builder, just get the right order of magnitude
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|array
operator|.
name|length
operator|*
literal|10
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns a comparator that compares two {@code long} arrays<a    * href="http://en.wikipedia.org/wiki/Lexicographical_order">lexicographically</a>. That is, it    * compares, using {@link #compare(long, long)}), the first pair of values that follow any common    * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For    * example, {@code []< [1L]< [1L, 2L]< [2L]}.    *    *<p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays    * support only identity equality), but it is consistent with {@link Arrays#equals(long[],    * long[])}.    *    * @since 2.0    */
DECL|method|lexicographicalComparator ()
specifier|public
specifier|static
name|Comparator
argument_list|<
name|long
index|[]
argument_list|>
name|lexicographicalComparator
parameter_list|()
block|{
return|return
name|LexicographicalComparator
operator|.
name|INSTANCE
return|;
block|}
DECL|enum|LexicographicalComparator
specifier|private
enum|enum
name|LexicographicalComparator
implements|implements
name|Comparator
argument_list|<
name|long
index|[]
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|compare (long[] left, long[] right)
specifier|public
name|int
name|compare
parameter_list|(
name|long
index|[]
name|left
parameter_list|,
name|long
index|[]
name|right
parameter_list|)
block|{
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|left
operator|.
name|length
argument_list|,
name|right
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|Longs
operator|.
name|compare
argument_list|(
name|left
index|[
name|i
index|]
argument_list|,
name|right
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|left
operator|.
name|length
operator|-
name|right
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Longs.lexicographicalComparator()"
return|;
block|}
block|}
comment|/**    * Sorts the elements of {@code array} in descending order.    *    * @since 23.1    */
DECL|method|sortDescending (long[] array)
specifier|public
specifier|static
name|void
name|sortDescending
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|sortDescending
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}    * exclusive in descending order.    *    * @since 23.1    */
DECL|method|sortDescending (long[] array, int fromIndex, int toIndex)
specifier|public
specifier|static
name|void
name|sortDescending
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|array
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reverses the elements of {@code array}. This is equivalent to {@code    * Collections.reverse(Longs.asList(array))}, but is likely to be more efficient.    *    * @since 23.1    */
DECL|method|reverse (long[] array)
specifier|public
specifier|static
name|void
name|reverse
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}    * exclusive. This is equivalent to {@code    * Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more    * efficient.    *    * @throws IndexOutOfBoundsException if {@code fromIndex< 0}, {@code toIndex> array.length}, or    *     {@code toIndex> fromIndex}    * @since 23.1    */
DECL|method|reverse (long[] array, int fromIndex, int toIndex)
specifier|public
specifier|static
name|void
name|reverse
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fromIndex
init|,
name|j
init|=
name|toIndex
operator|-
literal|1
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
operator|,
name|j
operator|--
control|)
block|{
name|long
name|tmp
init|=
name|array
index|[
name|i
index|]
decl_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|array
index|[
name|j
index|]
expr_stmt|;
name|array
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
comment|/**    * Returns an array containing each value of {@code collection}, converted to a {@code long} value    * in the manner of {@link Number#longValue}.    *    *<p>Elements are copied from the argument collection as if by {@code collection.toArray()}.    * Calling this method is as thread-safe as calling that method.    *    * @param collection a collection of {@code Number} instances    * @return an array containing the same values as {@code collection}, in the same order, converted    *     to primitives    * @throws NullPointerException if {@code collection} or any of its elements is null    * @since 1.0 (parameter was {@code Collection<Long>} before 12.0)    */
DECL|method|toArray (Collection<? extends Number> collection)
specifier|public
specifier|static
name|long
index|[]
name|toArray
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|instanceof
name|LongArrayAsList
condition|)
block|{
return|return
operator|(
operator|(
name|LongArrayAsList
operator|)
name|collection
operator|)
operator|.
name|toLongArray
argument_list|()
return|;
block|}
name|Object
index|[]
name|boxedArray
init|=
name|collection
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|boxedArray
operator|.
name|length
decl_stmt|;
name|long
index|[]
name|array
init|=
operator|new
name|long
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// checkNotNull for GWT (do not optimize)
name|array
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|Number
operator|)
name|checkNotNull
argument_list|(
name|boxedArray
index|[
name|i
index|]
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
comment|/**    * Returns a fixed-size list backed by the specified array, similar to {@link    * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any attempt to    * set a value to {@code null} will result in a {@link NullPointerException}.    *    *<p>The returned list maintains the values, but not the identities, of {@code Long} objects    * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for    * the returned list is unspecified.    *    *<p><b>Note:</b> when possible, you should represent your data as an {@link ImmutableLongArray}    * instead, which has an {@link ImmutableLongArray#asList asList} view.    *    * @param backingArray the array to back the list    * @return a list view of the array    */
DECL|method|asList (long... backingArray)
specifier|public
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|asList
parameter_list|(
name|long
modifier|...
name|backingArray
parameter_list|)
block|{
if|if
condition|(
name|backingArray
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
operator|new
name|LongArrayAsList
argument_list|(
name|backingArray
argument_list|)
return|;
block|}
annotation|@
name|GwtCompatible
DECL|class|LongArrayAsList
specifier|private
specifier|static
class|class
name|LongArrayAsList
extends|extends
name|AbstractList
argument_list|<
name|Long
argument_list|>
implements|implements
name|RandomAccess
implements|,
name|Serializable
block|{
DECL|field|array
specifier|final
name|long
index|[]
name|array
decl_stmt|;
DECL|field|start
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|end
specifier|final
name|int
name|end
decl_stmt|;
DECL|method|LongArrayAsList (long[] array)
name|LongArrayAsList
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
name|this
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|LongArrayAsList (long[] array, int start, int end)
name|LongArrayAsList
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|Long
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|array
index|[
name|start
operator|+
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|spliterator ()
specifier|public
name|Spliterator
operator|.
name|OfLong
name|spliterator
parameter_list|()
block|{
return|return
name|Spliterators
operator|.
name|spliterator
argument_list|(
name|array
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object target)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
comment|// Overridden to prevent a ton of boxing
return|return
operator|(
name|target
operator|instanceof
name|Long
operator|)
operator|&&
name|Longs
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
operator|(
name|Long
operator|)
name|target
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|indexOf (Object target)
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
comment|// Overridden to prevent a ton of boxing
if|if
condition|(
name|target
operator|instanceof
name|Long
condition|)
block|{
name|int
name|i
init|=
name|Longs
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
operator|(
name|Long
operator|)
name|target
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|i
operator|-
name|start
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|lastIndexOf (Object target)
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
comment|// Overridden to prevent a ton of boxing
if|if
condition|(
name|target
operator|instanceof
name|Long
condition|)
block|{
name|int
name|i
init|=
name|Longs
operator|.
name|lastIndexOf
argument_list|(
name|array
argument_list|,
operator|(
name|Long
operator|)
name|target
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|i
operator|-
name|start
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|set (int index, Long element)
specifier|public
name|Long
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Long
name|element
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|oldValue
init|=
name|array
index|[
name|start
operator|+
name|index
index|]
decl_stmt|;
comment|// checkNotNull for GWT (do not optimize)
name|array
index|[
name|start
operator|+
name|index
index|]
operator|=
name|checkNotNull
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
DECL|method|subList (int fromIndex, int toIndex)
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromIndex
operator|==
name|toIndex
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
operator|new
name|LongArrayAsList
argument_list|(
name|array
argument_list|,
name|start
operator|+
name|fromIndex
argument_list|,
name|start
operator|+
name|toIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|LongArrayAsList
condition|)
block|{
name|LongArrayAsList
name|that
init|=
operator|(
name|LongArrayAsList
operator|)
name|object
decl_stmt|;
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|that
operator|.
name|size
argument_list|()
operator|!=
name|size
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|start
operator|+
name|i
index|]
operator|!=
name|that
operator|.
name|array
index|[
name|that
operator|.
name|start
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
name|super
operator|.
name|equals
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Longs
operator|.
name|hashCode
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|size
argument_list|()
operator|*
literal|10
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|array
index|[
name|start
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toLongArray ()
name|long
index|[]
name|toLongArray
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|array
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
block|}
end_class

end_unit

