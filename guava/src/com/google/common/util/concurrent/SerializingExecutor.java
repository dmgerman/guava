begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_comment
comment|/**  * Executor ensuring that all Runnables submitted are executed in order,  * using the provided Executor, and serially such that no two will ever  * be running at the same time.  *  * TODO(user): The tasks are given to the underlying executor as a single  * task, which means the semantics of the executor may be changed, e.g. the  * executor may have an afterExecute method that runs after every task  *  * TODO(user): What happens in case of shutdown or shutdownNow?  Should  * TaskRunner check for interruption?  *  * TODO(user): It would be nice to provide a handle to individual task  * results using Future.  Maybe SerializingExecutorService?  *  * @author JJ Furman  */
end_comment

begin_class
DECL|class|SerializingExecutor
specifier|final
class|class
name|SerializingExecutor
implements|implements
name|Executor
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SerializingExecutor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Underlying executor that all submitted Runnable objects are run on. */
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
comment|/** A list of Runnables to be run in order. */
annotation|@
name|GuardedBy
argument_list|(
literal|"internalLock"
argument_list|)
DECL|field|waitQueue
specifier|private
specifier|final
name|Queue
argument_list|<
name|Runnable
argument_list|>
name|waitQueue
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * We explicitly keep track of if the TaskRunner is currently scheduled to    * run.  If it isn't, we start it.  We can't just use    * waitQueue.isEmpty() as a proxy because we need to ensure that only one    * Runnable submitted is running at a time so even if waitQueue is empty    * the isThreadScheduled isn't set to false until after the Runnable is    * finished.    */
annotation|@
name|GuardedBy
argument_list|(
literal|"internalLock"
argument_list|)
DECL|field|isThreadScheduled
specifier|private
name|boolean
name|isThreadScheduled
init|=
literal|false
decl_stmt|;
comment|/** The object that actually runs the Runnables submitted, reused. */
DECL|field|taskRunner
specifier|private
specifier|final
name|TaskRunner
name|taskRunner
init|=
operator|new
name|TaskRunner
argument_list|()
decl_stmt|;
comment|/**    * Creates a SerializingExecutor, running tasks using {@code executor}.    *    * @param executor Executor in which tasks should be run. Must not be null.    */
DECL|method|SerializingExecutor (Executor executor)
specifier|public
name|SerializingExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"'executor' must not be null."
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
DECL|field|internalLock
specifier|private
specifier|final
name|Object
name|internalLock
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SerializingExecutor lock: "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Runs the given runnable strictly after all Runnables that were submitted    * before it, and using the {@code executor} passed to the constructor.     .    */
annotation|@
name|Override
DECL|method|execute (Runnable r)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|r
argument_list|,
literal|"'r' must not be null."
argument_list|)
expr_stmt|;
name|boolean
name|scheduleTaskRunner
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|internalLock
init|)
block|{
name|waitQueue
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isThreadScheduled
condition|)
block|{
name|isThreadScheduled
operator|=
literal|true
expr_stmt|;
name|scheduleTaskRunner
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scheduleTaskRunner
condition|)
block|{
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|taskRunner
argument_list|)
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|threw
condition|)
block|{
synchronized|synchronized
init|(
name|internalLock
init|)
block|{
comment|// It is possible that at this point that there are still tasks in
comment|// the queue, it would be nice to keep trying but the error may not
comment|// be recoverable.  So we update our state and propogate so that if
comment|// our caller deems it recoverable we won't be stuck.
name|isThreadScheduled
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Task that actually runs the Runnables.  It takes the Runnables off of the    * queue one by one and runs them.  After it is done with all Runnables and    * there are no more to run, puts the SerializingExecutor in the state where    * isThreadScheduled = false and returns.  This allows the current worker    * thread to return to the original pool.    */
DECL|class|TaskRunner
specifier|private
class|class
name|TaskRunner
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|stillRunning
init|=
literal|true
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isThreadScheduled
argument_list|)
expr_stmt|;
name|Runnable
name|nextToRun
decl_stmt|;
synchronized|synchronized
init|(
name|internalLock
init|)
block|{
name|nextToRun
operator|=
name|waitQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextToRun
operator|==
literal|null
condition|)
block|{
name|isThreadScheduled
operator|=
literal|false
expr_stmt|;
name|stillRunning
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// Always run while not holding the lock, to avoid deadlocks.
try|try
block|{
name|nextToRun
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// Log it and keep going.
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exception while executing runnable "
operator|+
name|nextToRun
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|stillRunning
condition|)
block|{
comment|// An Error is bubbling up, we should mark ourselves as no longer
comment|// running, that way if anyone tries to keep using us we won't be
comment|// corrupted.
synchronized|synchronized
init|(
name|internalLock
init|)
block|{
name|isThreadScheduled
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

