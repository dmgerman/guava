begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An executor service which forwards all its method calls to another executor service. Subclasses  * should override one or more methods to modify the behavior of the backing executor service as  * desired per the<a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.  *  * @author Kurt Alfred Kluever  * @since 10.0  */
end_comment

begin_class
annotation|@
name|CanIgnoreReturnValue
comment|// TODO(cpovirk): Consider being more strict.
annotation|@
name|GwtIncompatible
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|ForwardingExecutorService
specifier|public
specifier|abstract
class|class
name|ForwardingExecutorService
extends|extends
name|ForwardingObject
implements|implements
name|ExecutorService
block|{
comment|/** Constructor for use by subclasses. */
DECL|method|ForwardingExecutorService ()
specifier|protected
name|ForwardingExecutorService
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
specifier|abstract
name|ExecutorService
name|delegate
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
argument_list|()
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|invokeAll ( Collection<? extends Callable<T>> tasks)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
argument_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
argument_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
argument_list|()
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
return|;
block|}
end_class

begin_annotation
annotation|@
name|Override
end_annotation

begin_expr_stmt
DECL|method|invokeAll ( Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
argument_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
operator|,
name|long
name|timeout
operator|,
name|TimeUnit
name|unit
argument_list|)
throws|throws
name|InterruptedException
block|{
end_expr_stmt

begin_return
return|return
name|delegate
argument_list|()
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    @
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
name|invokeAny
argument_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
argument_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
end_expr_stmt

begin_return
return|return
name|delegate
argument_list|()
operator|.
name|invokeAny
argument_list|(
name|tasks
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    @
name|Override
DECL|method|invokeAny ( Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
name|invokeAny
argument_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
operator|,
name|long
name|timeout
operator|,
name|TimeUnit
name|unit
argument_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
end_expr_stmt

begin_return
return|return
name|delegate
argument_list|()
operator|.
name|invokeAny
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isShutdown
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isTerminated
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|delegate
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|shutdownNow
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|execute (Runnable command)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|delegate
argument_list|()
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
end_function

begin_annotation
annotation|@
name|Override
end_annotation

begin_expr_stmt
DECL|method|submit (Callable<T> task)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|Future
argument_list|<
name|T
argument_list|>
name|submit
argument_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
argument_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|submit (Runnable task)
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
end_function

begin_annotation
annotation|@
name|Override
end_annotation

begin_expr_stmt
DECL|method|submit ( Runnable task, @ParametricNullness T result)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|Future
argument_list|<
name|T
argument_list|>
name|submit
argument_list|(
name|Runnable
name|task
argument_list|,
annotation|@
name|ParametricNullness
name|T
name|result
argument_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|submit
argument_list|(
name|task
argument_list|,
name|result
argument_list|)
return|;
block|}
end_expr_stmt

unit|}
end_unit

