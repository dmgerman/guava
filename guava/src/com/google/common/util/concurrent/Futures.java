begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
operator|.
name|getUninterruptibly
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CollectionFuture
operator|.
name|ListFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ImmediateFuture
operator|.
name|ImmediateCancelledFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ImmediateFuture
operator|.
name|ImmediateFailedCheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ImmediateFuture
operator|.
name|ImmediateFailedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ImmediateFuture
operator|.
name|ImmediateSuccessfulCheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ImmediateFuture
operator|.
name|ImmediateSuccessfulFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckReturnValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Static utility methods pertaining to the {@link Future} interface.  *  *<p>Many of these methods use the {@link ListenableFuture} API; consult the  * Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/ListenableFutureExplained">  * {@code ListenableFuture}</a>.  *  * @author Kevin Bourrillion  * @author Nishant Thakkar  * @author Sven Mawson  * @since 1.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|Futures
specifier|public
specifier|final
class|class
name|Futures
extends|extends
name|GwtFuturesCatchingSpecialization
block|{
comment|// A note on memory visibility.
comment|// Many of the utilities in this class (transform, withFallback, withTimeout, asList, combine)
comment|// have two requirements that significantly complicate their design.
comment|// 1. Cancellation should propagate from the returned future to the input future(s).
comment|// 2. The returned futures shouldn't unnecessarily 'pin' their inputs after completion.
comment|//
comment|// A consequence of these requirements is that the delegate futures cannot be stored in
comment|// final fields.
comment|//
comment|// For simplicity the rest of this description will discuss Futures.catching since it is the
comment|// simplest instance, though very similar descriptions apply to many other classes in this file.
comment|//
comment|// In the constructor of AbstractCatchingFuture, the delegate future is assigned to a field
comment|// 'inputFuture'. That field is non-final and non-volatile.  There are 2 places where the
comment|// 'inputFuture' field is read and where we will have to consider visibility of the write
comment|// operation in the constructor.
comment|//
comment|// 1. In the listener that performs the callback.  In this case it is fine since inputFuture is
comment|//    assigned prior to calling addListener, and addListener happens-before any invocation of the
comment|//    listener. Notably, this means that 'volatile' is unnecessary to make 'inputFuture' visible
comment|//    to the listener.
comment|//
comment|// 2. In done() where we may propagate cancellation to the input.  In this case it is _not_ fine.
comment|//    There is currently nothing that enforces that the write to inputFuture in the constructor is
comment|//    visible to done().  This is because there is no happens before edge between the write and a
comment|//    (hypothetical) unsafe read by our caller. Note: adding 'volatile' does not fix this issue,
comment|//    it would just add an edge such that if done() observed non-null, then it would also
comment|//    definitely observe all earlier writes, but we still have no guarantee that done() would see
comment|//    the inital write (just stronger guarantees if it does).
comment|//
comment|// See: http://cs.oswego.edu/pipermail/concurrency-interest/2015-January/013800.html
comment|// For a (long) discussion about this specific issue and the general futility of life.
comment|//
comment|// For the time being we are OK with the problem discussed above since it requires a caller to
comment|// introduce a very specific kind of data-race.  And given the other operations performed by these
comment|// methods that involve volatile read/write operations, in practice there is no issue.  Also, the
comment|// way in such a visibility issue would surface is most likely as a failure of cancel() to
comment|// propagate to the input.  Cancellation propagation is fundamentally racy so this is fine.
comment|//
comment|// Future versions of the JMM may revise safe construction semantics in such a way that we can
comment|// safely publish these objects and we won't need this whole discussion.
comment|// TODO(user,lukes): consider adding volatile to all these fields since in current known JVMs
comment|// that should resolve the issue.  This comes at the cost of adding more write barriers to the
comment|// implementations.
DECL|method|Futures ()
specifier|private
name|Futures
parameter_list|()
block|{}
comment|/**    * Creates a {@link CheckedFuture} out of a normal {@link ListenableFuture} and a {@link Function}    * that maps from {@link Exception} instances into the appropriate checked type.    *    *<p><b>Warning:</b> We recommend against using {@code CheckedFuture} in new projects. {@code    * CheckedFuture} is difficult to build libraries atop. {@code CheckedFuture} ports of methods    * like {@link Futures#transformAsync} have historically had bugs, and some of these bugs are    * necessary, unavoidable consequences of the {@code CheckedFuture} API. Additionally, {@code    * CheckedFuture} encourages users to take exceptions from one thread and rethrow them in another,    * producing confusing stack traces.    *    *<p>The given mapping function will be applied to an {@link InterruptedException}, a {@link    * CancellationException}, or an {@link ExecutionException}. See {@link Future#get()} for details    * on the exceptions thrown.    *    * @since 9.0 (source-compatible since 1.0)    */
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|makeChecked ( ListenableFuture<V> future, Function<? super Exception, X> mapper)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
name|makeChecked
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|MappingCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|future
argument_list|)
argument_list|,
name|mapper
argument_list|)
return|;
block|}
comment|/**    * Creates a {@code ListenableFuture} which has its value set immediately upon construction. The    * getters just return the value. This {@code Future} can't be canceled or timed out and its    * {@code isDone()} method always returns {@code true}.    */
annotation|@
name|CheckReturnValue
DECL|method|immediateFuture (@ullable V value)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// This cast is safe because null is assignable to V for all V (i.e. it is covariant)
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|typedNull
init|=
operator|(
name|ListenableFuture
operator|)
name|ImmediateSuccessfulFuture
operator|.
name|NULL
decl_stmt|;
return|return
name|typedNull
return|;
block|}
return|return
operator|new
name|ImmediateSuccessfulFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code CheckedFuture} which has its value set immediately upon construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always    * returns {@code true}. Calling {@code get()} or {@code checkedGet()} will immediately return the    * provided value.    */
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|immediateCheckedFuture ( @ullable V value)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
name|immediateCheckedFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmediateSuccessfulCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code ListenableFuture} which has an exception set immediately upon construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always    * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code    * Throwable} wrapped in an {@code ExecutionException}.    */
annotation|@
name|CheckReturnValue
DECL|method|immediateFailedFuture (Throwable throwable)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateFailedFuture
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmediateFailedFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|throwable
argument_list|)
return|;
block|}
comment|/**    * Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that    * {@code isCancelled()} always returns {@code true}.    *    * @since 14.0    */
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|immediateCancelledFuture ()
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateCancelledFuture
parameter_list|()
block|{
return|return
operator|new
name|ImmediateCancelledFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a {@code CheckedFuture} which has an exception set immediately upon construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always    * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code    * Exception} wrapped in an {@code ExecutionException}, and calling {@code checkedGet()} will    * throw the provided exception itself.    */
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|immediateFailedCheckedFuture ( X exception)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
name|immediateFailedCheckedFuture
parameter_list|(
name|X
name|exception
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmediateFailedCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|exception
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails, from the {@code Future} provided by the {@code fallback}. {@link    * FutureFallback#create} is not invoked until the primary input has failed, so if the primary    * input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an    * exception is thrown, this exception is used as the result of the output {@code Future}.    *    *<p>Below is an example of a fallback that returns a default value if an exception occurs:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           // Returning "0" as the default for the counter when the    *           // exception happens.    *           return immediateFuture(0);    *         }    *       });}</pre>    *    *<p>The fallback can also choose to propagate the original exception when desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           if (t instanceof TimeoutException) {    *             return immediateFuture(0);    *           }    *           return immediateFailedFuture(t);    *         }    *       });}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight    * listeners" refer here to the work done during {@code FutureFallback.create}, not to any work    * done to complete the returned {@code Future}.    *    * @param input the primary input {@code Future}    * @param fallback the {@link FutureFallback} implementation to be called if {@code input} fails    * @since 14.0    * @deprecated Use {@link #catchingAsync(ListenableFuture, Class, AsyncFunction)    *     catchingAsync(input, Throwable.class, fallbackImplementedAsAnAsyncFunction)}, usually    *     replacing {@code Throwable.class} with the specific type you want to handle. This method    *     will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
annotation|@
name|CheckReturnValue
DECL|method|withFallback ( ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withFallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|withFallback
argument_list|(
name|input
argument_list|,
name|fallback
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails, from the {@code Future} provided by the {@code fallback}. {@link    * FutureFallback#create} is not invoked until the primary input has failed, so if the primary    * input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an    * exception is thrown, this exception is used as the result of the output {@code Future}.    *    *<p>Below is an example of a fallback that returns a default value if an exception occurs:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           // Returning "0" as the default for the counter when the    *           // exception happens.    *           return immediateFuture(0);    *         }    *       }, directExecutor());}</pre>    *    *<p>The fallback can also choose to propagate the original exception when desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           if (t instanceof TimeoutException) {    *             return immediateFuture(0);    *           }    *           return immediateFailedFuture(t);    *         }    *       }, directExecutor());}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation. The documentation's warnings about "lightweight listeners" refer here to the    * work done during {@code FutureFallback.create}, not to any work done to complete the returned    * {@code Future}.    *    * @param input the primary input {@code Future}    * @param fallback the {@link FutureFallback} implementation to be called if {@code input} fails    * @param executor the executor that runs {@code fallback} if {@code input} fails    * @since 14.0    * @deprecated Use {@link #catchingAsync(ListenableFuture, Class, AsyncFunction, Executor)    *     catchingAsync(input, Throwable.class, fallbackImplementedAsAnAsyncFunction, executor)},    *     usually replacing {@code Throwable.class} with the specific type you want to handle. This    *     method will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
annotation|@
name|CheckReturnValue
DECL|method|withFallback ( ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withFallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|catchingAsync
argument_list|(
name|input
argument_list|,
name|Throwable
operator|.
name|class
argument_list|,
name|asAsyncFunction
argument_list|(
name|fallback
argument_list|)
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so    * if the primary input succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of the output {@code    * Future}.    *    *<p>Usage example:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(    *       fetchCounterFuture, FetchException.class,    *       new Function<FetchException, Integer>() {    *         public Integer apply(FetchException e) {    *           return 0;    *         }    *       });}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight    * listeners" refer here to the work done during {@code Function.apply}.    *    * @param input the primary input {@code Future}    * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding    *     bugs and other unrecoverable errors, callers should prefer more specific types, avoiding    *     {@code Throwable.class} in particular.    * @param fallback the {@link Function} implementation to be called if {@code input} fails with    *     the expected exception type    * @since 19.0    */
annotation|@
name|GwtIncompatible
comment|// AVAILABLE but requires exceptionType to be Throwable.class
annotation|@
name|CheckReturnValue
DECL|method|catching ( ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catching
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|AbstractCatchingFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so    * if the primary input succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of the output {@code    * Future}.    *    *<p>Usage example:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(    *       fetchCounterFuture, FetchException.class,    *       new Function<FetchException, Integer>() {    *         public Integer apply(FetchException e) {    *           return 0;    *         }    *       }, directExecutor());}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation. The documentation's warnings about "lightweight listeners" refer here to the    * work done during {@code Function.apply}.    *    * @param input the primary input {@code Future}    * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding    *     bugs and other unrecoverable errors, callers should prefer more specific types, avoiding    *     {@code Throwable.class} in particular.    * @param fallback the {@link Function} implementation to be called if {@code input} fails with    *     the expected exception type    * @param executor the executor that runs {@code fallback} if {@code input} fails    * @since 19.0    */
annotation|@
name|GwtIncompatible
comment|// AVAILABLE but requires exceptionType to be Throwable.class
annotation|@
name|CheckReturnValue
DECL|method|catching ( ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catching
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|AbstractCatchingFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has    * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of    * {@code fallback}, an exception is thrown, this exception is used as the result of the output    * {@code Future}.    *    *<p>Usage examples:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e) {    *           return immediateFuture(0);    *         }    *       });}</pre>    *    *<p>The fallback can also choose to propagate the original exception when desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e)    *             throws FetchException {    *           if (omitDataOnFetchFailure) {    *             return immediateFuture(0);    *           }    *           throw e;    *         }    *       });}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight    * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done    * to complete the returned {@code Future}.    *    * @param input the primary input {@code Future}    * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding    *     bugs and other unrecoverable errors, callers should prefer more specific types, avoiding    *     {@code Throwable.class} in particular.    * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails    *     with the expected exception type    * @since 19.0 (similar functionality in 14.0 as {@code withFallback})    */
annotation|@
name|GwtIncompatible
comment|// AVAILABLE but requires exceptionType to be Throwable.class
comment|// TODO(kak): @CheckReturnValue
DECL|method|catchingAsync ( ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catchingAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|AbstractCatchingFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has    * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of    * {@code fallback}, an exception is thrown, this exception is used as the result of the output    * {@code Future}.    *    *<p>Usage examples:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e) {    *           return immediateFuture(0);    *         }    *       }, directExecutor());}</pre>    *    *<p>The fallback can also choose to propagate the original exception when desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e)    *             throws FetchException {    *           if (omitDataOnFetchFailure) {    *             return immediateFuture(0);    *           }    *           throw e;    *         }    *       }, directExecutor());}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation. The documentation's warnings about "lightweight listeners" refer here to the    * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned    * {@code Future}.    *    * @param input the primary input {@code Future}    * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding    *     bugs and other unrecoverable errors, callers should prefer more specific types, avoiding    *     {@code Throwable.class} in particular.    * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails    *     with the expected exception type    * @param executor the executor that runs {@code fallback} if {@code input} fails    * @since 19.0 (similar functionality in 14.0 as {@code withFallback})    */
annotation|@
name|GwtIncompatible
comment|// AVAILABLE but requires exceptionType to be Throwable.class
comment|// TODO(kak): @CheckReturnValue
DECL|method|catchingAsync ( ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catchingAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|AbstractCatchingFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|,
name|executor
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|asAsyncFunction (final FutureFallback<V> fallback)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|AsyncFunction
argument_list|<
name|Throwable
argument_list|,
name|V
argument_list|>
name|asAsyncFunction
parameter_list|(
specifier|final
name|FutureFallback
argument_list|<
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|fallback
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncFunction
argument_list|<
name|Throwable
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|apply
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|checkNotNull
argument_list|(
name|fallback
operator|.
name|create
argument_list|(
name|t
argument_list|)
argument_list|,
literal|"FutureFallback.create returned null instead of a "
operator|+
literal|"Future. Did you mean to return immediateFuture(null)?"
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a future that delegates to another but will finish early (via a {@link    * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.    *    *<p>The delegate future is interrupted and cancelled if it times out.    *    * @param delegate The future to delegate to.    * @param time when to timeout the future    * @param unit the time unit of the time parameter    * @param scheduledExecutor The executor service to enforce the timeout.    *    * @since 19.0    */
annotation|@
name|GwtIncompatible
comment|// java.util.concurrent.ScheduledExecutorService
annotation|@
name|CheckReturnValue
DECL|method|withTimeout ( ListenableFuture<V> delegate, long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withTimeout
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|ScheduledExecutorService
name|scheduledExecutor
parameter_list|)
block|{
return|return
name|TimeoutFuture
operator|.
name|create
argument_list|(
name|delegate
argument_list|,
name|time
argument_list|,
name|unit
argument_list|,
name|scheduledExecutor
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously derived from the result    * of the given {@code Future}. More precisely, the returned {@code Future} takes its result from    * a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the    * original {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transform(rowKeyFuture, queryFunction);}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight    * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done    * to complete the returned {@code Future}.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future and that of the future returned by the function. That is, if the returned {@code    * Future} is cancelled, it will attempt to cancel the other two, and if either of the other two    * is cancelled, the returned {@code Future} will receive a callback in which it will attempt to    * cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future to the result of the    *     output future    * @return A future that holds result of the function (if the input succeeded) or the original    *     input's failure (if not)    * @since 11.0    * @deprecated These {@code AsyncFunction} overloads of {@code transform} are being renamed to    *     {@code transformAsync}. (The {@code Function} overloads are keeping the "transform" name.)    *     This method will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
DECL|method|transform ( ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|transformAsync
argument_list|(
name|input
argument_list|,
name|function
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously derived from the result    * of the given {@code Future}. More precisely, the returned {@code Future} takes its result from    * a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the    * original {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transform(rowKeyFuture, queryFunction, executor);}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation. The documentation's warnings about "lightweight listeners" refer here to the    * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned    * {@code Future}.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future and that of the future returned by the chain function. That is, if the returned    * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the    * other two is cancelled, the returned {@code Future} will receive a callback in which it will    * attempt to cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future to the result of the    *     output future    * @param executor Executor to run the function in.    * @return A future that holds result of the function (if the input succeeded) or the original    *     input's failure (if not)    * @since 11.0    * @deprecated These {@code AsyncFunction} overloads of {@code transform} are being renamed to    *     {@code transformAsync}. (The {@code Function} overloads are keeping the "transform" name.)    *     This method will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
DECL|method|transform ( ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|transformAsync
argument_list|(
name|input
argument_list|,
name|function
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code Future} whose result is asynchronously derived from the result of the    * given {@code Future}. If the given {@code Future} fails, the returned {@code Future} fails with    * the same exception (and the function is not invoked).    *    *<p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced    * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.    * Example usage:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transformAsync(rowKeyFuture, queryFunction);}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight    * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done    * to complete the returned {@code Future}.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future and that of the future returned by the function. That is, if the returned {@code    * Future} is cancelled, it will attempt to cancel the other two, and if either of the other two    * is cancelled, the returned {@code Future} will receive a callback in which it will attempt to    * cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future to the result of the    *     output future    * @return A future that holds result of the function (if the input succeeded) or the original    *     input's failure (if not)    * @since 19.0 (in 11.0 as {@code transform})    */
DECL|method|transformAsync ( ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transformAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|AbstractTransformFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|function
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code Future} whose result is asynchronously derived from the result of the    * given {@code Future}. If the given {@code Future} fails, the returned {@code Future} fails with    * the same exception (and the function is not invoked).    *    *<p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced    * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.    * Example usage:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation. The documentation's warnings about "lightweight listeners" refer here to the    * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned    * {@code Future}.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future and that of the future returned by the chain function. That is, if the returned    * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the    * other two is cancelled, the returned {@code Future} will receive a callback in which it will    * attempt to cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future to the result of the    *     output future    * @param executor Executor to run the function in.    * @return A future that holds result of the function (if the input succeeded) or the original    *     input's failure (if not)    * @since 19.0 (in 11.0 as {@code transform})    */
DECL|method|transformAsync ( ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transformAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|AbstractTransformFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|function
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code Future} whose result is derived from the result of the given {@code    * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and    * the function is not invoked). Example usage:    *    *<pre>   {@code    *   ListenableFuture<QueryResult> queryFuture = ...;    *   Function<QueryResult, List<Row>> rowsFunction =    *       new Function<QueryResult, List<Row>>() {    *         public List<Row> apply(QueryResult queryResult) {    *           return queryResult.getRows();    *         }    *       };    *   ListenableFuture<List<Row>> rowsFuture =    *       transform(queryFuture, rowsFunction);}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight    * listeners" refer here to the work done during {@code Function.apply}.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel    * the input, and if the input is cancelled, the returned {@code Future} will receive a callback    * in which it will attempt to cancel itself.    *    *<p>An example use of this method is to convert a serializable object returned from an RPC into    * a POJO.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future to the results of    *     the returned future.  This will be run in the thread that notifies input it is complete.    * @return A future that holds result of the transformation.    * @since 9.0 (in 1.0 as {@code compose})    */
DECL|method|transform ( ListenableFuture<I> input, Function<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|AbstractTransformFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|function
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code Future} whose result is derived from the result of the given {@code    * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and    * the function is not invoked). Example usage:    *    *<pre>   {@code    *   ListenableFuture<QueryResult> queryFuture = ...;    *   Function<QueryResult, List<Row>> rowsFunction =    *       new Function<QueryResult, List<Row>>() {    *         public List<Row> apply(QueryResult queryResult) {    *           return queryResult.getRows();    *         }    *       };    *   ListenableFuture<List<Row>> rowsFuture =    *       transform(queryFuture, rowsFunction, executor);}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation. The documentation's warnings about "lightweight listeners" refer here to the    * work done during {@code Function.apply}.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel    * the input, and if the input is cancelled, the returned {@code Future} will receive a callback    * in which it will attempt to cancel itself.    *    *<p>An example use of this method is to convert a serializable object returned from an RPC into    * a POJO.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future to the results of    *     the returned future.    * @param executor Executor to run the function in.    * @return A future that holds result of the transformation.    * @since 9.0 (in 2.0 as {@code compose})    */
DECL|method|transform ( ListenableFuture<I> input, Function<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|AbstractTransformFuture
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|function
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Like {@link #transform(ListenableFuture, Function)} except that the transformation {@code    * function} is invoked on each call to {@link Future#get() get()} on the returned future.    *    *<p>The returned {@code Future} reflects the input's cancellation state directly, and any    * attempt to cancel the returned Future is likewise passed through to the input Future.    *    *<p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout    * to the execution of the underlying {@code Future},<em>not</em> to the execution of the    * transformation function.    *    *<p>The primary audience of this method is callers of {@code transform} who don't have a {@code    * ListenableFuture} available and do not mind repeated, lazy function evaluation.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future to the results of    *     the returned future.    * @return A future that returns the result of the transformation.    * @since 10.0    */
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|lazyTransform ( final Future<I> input, final Function<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|Future
argument_list|<
name|O
argument_list|>
name|lazyTransform
parameter_list|(
specifier|final
name|Future
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
operator|new
name|Future
argument_list|<
name|O
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|input
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|input
operator|.
name|isCancelled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|input
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|O
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|applyTransformation
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|O
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|applyTransformation
argument_list|(
name|input
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|O
name|applyTransformation
parameter_list|(
name|I
name|input
parameter_list|)
throws|throws
name|ExecutionException
block|{
try|try
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of calling {@code get()} on    * the {@code Future} nested within the given {@code Future}, effectively chaining the futures one    * after the other.  Example:    *    *<pre>   {@code    *   SettableFuture<ListenableFuture<String>> nested = SettableFuture.create();    *   ListenableFuture<String> dereferenced = dereference(nested);}</pre>    *    *<p>This call has the same cancellation and execution semantics as {@link    * #transform(ListenableFuture, AsyncFunction)}, in that the returned {@code Future} attempts to    * keep its cancellation state in sync with both the input {@code Future} and the nested {@code    * Future}.  The transformation is very lightweight and therefore takes place in the same thread    * (either the thread that called {@code dereference}, or the thread in which the dereferenced    * future completes).    *    * @param nested The nested future to transform.    * @return A future that holds result of the inner future.    * @since 13.0    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|CheckReturnValue
DECL|method|dereference ( ListenableFuture<? extends ListenableFuture<? extends V>> nested)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|dereference
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|nested
parameter_list|)
block|{
return|return
name|transformAsync
argument_list|(
operator|(
name|ListenableFuture
operator|)
name|nested
argument_list|,
operator|(
name|AsyncFunction
operator|)
name|DEREFERENCER
argument_list|)
return|;
block|}
comment|/**    * Helper {@code Function} for {@link #dereference}.    */
DECL|field|DEREFERENCER
specifier|private
specifier|static
specifier|final
name|AsyncFunction
argument_list|<
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|DEREFERENCER
init|=
operator|new
name|AsyncFunction
argument_list|<
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the values of all its    * input futures, if all succeed. If any input fails, the returned future fails immediately.    *    *<p>The list of results is in the same order as the input list.    *    *<p>Canceling this future will attempt to cancel all the component futures, and if any of the    * provided futures fails or is canceled, this one is, too.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component futures    * @since 10.0    */
annotation|@
name|Beta
annotation|@
name|SafeVarargs
annotation|@
name|CheckReturnValue
DECL|method|allAsList (ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|allAsList
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
operator|new
name|ListFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the values of all its    * input futures, if all succeed. If any input fails, the returned future fails immediately.    *    *<p>The list of results is in the same order as the input list.    *    *<p>Canceling this future will attempt to cancel all the component futures, and if any of the    * provided futures fails or is canceled, this one is, too.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component futures    * @since 10.0    */
annotation|@
name|Beta
annotation|@
name|CheckReturnValue
DECL|method|allAsList ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|allAsList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
operator|new
name|ListFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Creates a {@link FutureCombiner} that processes the completed futures whether or not they're    * successful.    *    * @since 20.0    */
annotation|@
name|SafeVarargs
annotation|@
name|CheckReturnValue
DECL|method|whenAllComplete (ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|FutureCombiner
argument_list|<
name|V
argument_list|>
name|whenAllComplete
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
operator|new
name|FutureCombiner
argument_list|<
name|V
argument_list|>
argument_list|(
literal|false
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates a {@link FutureCombiner} that processes the completed futures whether or not they're    * successful.    *    * @since 20.0    */
annotation|@
name|CheckReturnValue
DECL|method|whenAllComplete ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|FutureCombiner
argument_list|<
name|V
argument_list|>
name|whenAllComplete
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
operator|new
name|FutureCombiner
argument_list|<
name|V
argument_list|>
argument_list|(
literal|false
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates a {@link FutureCombiner} requiring that all passed in futures are successful.    *    *<p>If any input fails, the returned future fails immediately.    *    * @since 20.0    */
annotation|@
name|SafeVarargs
annotation|@
name|CheckReturnValue
DECL|method|whenAllSucceed (ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|FutureCombiner
argument_list|<
name|V
argument_list|>
name|whenAllSucceed
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
operator|new
name|FutureCombiner
argument_list|<
name|V
argument_list|>
argument_list|(
literal|true
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates a {@link FutureCombiner} requiring that all passed in futures are successful.    *    *<p>If any input fails, the returned future fails immediately.    *    * @since 20.0    */
annotation|@
name|CheckReturnValue
DECL|method|whenAllSucceed ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|FutureCombiner
argument_list|<
name|V
argument_list|>
name|whenAllSucceed
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
operator|new
name|FutureCombiner
argument_list|<
name|V
argument_list|>
argument_list|(
literal|true
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * A helper to create a new {@code ListenableFuture} whose result is generated from a combination    * of input futures.    *    *<p>See {@link #whenAllComplete} and {@link #whenAllSucceed} for how to instantiate this class.    *    *<p>Example:    *    *<pre>   {@code    *   final ListenableFuture<Instant> loginDateFuture =    *       loginService.findLastLoginDate(username);    *   final ListenableFuture<List<String>> recentCommandsFuture =    *       recentCommandsService.findRecentCommands(username);    *   Callable<UsageHistory> usageComputation =    *       new Callable<UsageHistory>() {    *         public UsageHistory call() throws Exception {    *           return new UsageHistory(    *               username, loginDateFuture.get(), recentCommandsFuture.get());    *         }    *       };    *   ListenableFuture<UsageHistory> usageFuture =    *       Futures.whenAllSucceed(loginDateFuture, recentCommandsFuture)    *           .call(usageComputation, executor);}</pre>    *    * @since 20.0    */
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|FutureCombiner
specifier|public
specifier|static
specifier|final
class|class
name|FutureCombiner
parameter_list|<
name|V
parameter_list|>
block|{
DECL|field|allMustSucceed
specifier|private
specifier|final
name|boolean
name|allMustSucceed
decl_stmt|;
DECL|field|futures
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
decl_stmt|;
DECL|method|FutureCombiner ( boolean allMustSucceed, ImmutableList<ListenableFuture<? extends V>> futures)
specifier|private
name|FutureCombiner
parameter_list|(
name|boolean
name|allMustSucceed
parameter_list|,
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
name|this
operator|.
name|allMustSucceed
operator|=
name|allMustSucceed
expr_stmt|;
name|this
operator|.
name|futures
operator|=
name|futures
expr_stmt|;
block|}
comment|/**      * Creates the {@link ListenableFuture} which will return the result of calling {@link      * AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code      * executor}.      *      *<p>If the combiner throws a {@code CancellationException}, the returned future will be      * cancelled.      *      *<p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code      * ExecutionException} will be extracted and returned as the cause of the new {@code      * ExecutionException} that gets thrown by the returned combined future.      *      *<p>Canceling this future will attempt to cancel all the component futures.      */
DECL|method|callAsync (AsyncCallable<C> combiner, Executor executor)
specifier|public
parameter_list|<
name|C
parameter_list|>
name|ListenableFuture
argument_list|<
name|C
argument_list|>
name|callAsync
parameter_list|(
name|AsyncCallable
argument_list|<
name|C
argument_list|>
name|combiner
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
operator|new
name|CombinedFuture
argument_list|<
name|C
argument_list|>
argument_list|(
name|futures
argument_list|,
name|allMustSucceed
argument_list|,
name|executor
argument_list|,
name|combiner
argument_list|)
return|;
block|}
comment|/**      * Like {@link #callAsync(AsyncCallable, Executor)} but using {@linkplain      * MoreExecutors#directExecutor direct executor}.      */
DECL|method|callAsync (AsyncCallable<C> combiner)
specifier|public
parameter_list|<
name|C
parameter_list|>
name|ListenableFuture
argument_list|<
name|C
argument_list|>
name|callAsync
parameter_list|(
name|AsyncCallable
argument_list|<
name|C
argument_list|>
name|combiner
parameter_list|)
block|{
return|return
name|callAsync
argument_list|(
name|combiner
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates the {@link ListenableFuture} which will return the result of calling {@link      * Callable#call} in {@code combiner} when all futures complete, using the specified {@code      * executor}.      *      *<p>If the combiner throws a {@code CancellationException}, the returned future will be      * cancelled.      *      *<p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code      * ExecutionException} will be extracted and returned as the cause of the new {@code      * ExecutionException} that gets thrown by the returned combined future.      *      *<p>Canceling this future will attempt to cancel all the component futures.      */
DECL|method|call (Callable<C> combiner, Executor executor)
specifier|public
parameter_list|<
name|C
parameter_list|>
name|ListenableFuture
argument_list|<
name|C
argument_list|>
name|call
parameter_list|(
name|Callable
argument_list|<
name|C
argument_list|>
name|combiner
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
operator|new
name|CombinedFuture
argument_list|<
name|C
argument_list|>
argument_list|(
name|futures
argument_list|,
name|allMustSucceed
argument_list|,
name|executor
argument_list|,
name|combiner
argument_list|)
return|;
block|}
comment|/**      * Like {@link #call(Callable, Executor)} but using {@linkplain MoreExecutors#directExecutor      * direct executor}.      */
DECL|method|call (Callable<C> combiner)
specifier|public
parameter_list|<
name|C
parameter_list|>
name|ListenableFuture
argument_list|<
name|C
argument_list|>
name|call
parameter_list|(
name|Callable
argument_list|<
name|C
argument_list|>
name|combiner
parameter_list|)
block|{
return|return
name|call
argument_list|(
name|combiner
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose result is set from the supplied future when it    * completes.  Cancelling the supplied future will also cancel the returned future, but cancelling    * the returned future will have no effect on the supplied future.    *    * @since 15.0    */
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|nonCancellationPropagating (ListenableFuture<V> future)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|nonCancellationPropagating
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|)
block|{
return|return
operator|new
name|NonCancellationPropagatingFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|future
argument_list|)
return|;
block|}
comment|/**    * A wrapped future that does not propagate cancellation to its delegate.    */
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|class|NonCancellationPropagatingFuture
specifier|private
specifier|static
specifier|final
class|class
name|NonCancellationPropagatingFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|NonCancellationPropagatingFuture (final ListenableFuture<V> delegate)
name|NonCancellationPropagatingFuture
parameter_list|(
specifier|final
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|delegate
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// This prevents cancellation from propagating because we don't assign delegate until
comment|// delegate is already done, so calling cancel() on it is a no-op.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the values of all its    * successful input futures. The list of results is in the same order as the input list, and if    * any of the provided futures fails or is canceled, its corresponding position will contain    * {@code null} (which is indistinguishable from the future having a successful value of {@code    * null}).    *    *<p>Canceling this future will attempt to cancel all the component futures.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component futures    * @since 10.0    */
annotation|@
name|Beta
annotation|@
name|SafeVarargs
annotation|@
name|CheckReturnValue
DECL|method|successfulAsList ( ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|successfulAsList
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
operator|new
name|ListFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the values of all its    * successful input futures. The list of results is in the same order as the input list, and if    * any of the provided futures fails or is canceled, its corresponding position will contain    * {@code null} (which is indistinguishable from the future having a successful value of {@code    * null}).    *    *<p>Canceling this future will attempt to cancel all the component futures.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component futures    * @since 10.0    */
annotation|@
name|Beta
annotation|@
name|CheckReturnValue
DECL|method|successfulAsList ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|successfulAsList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
operator|new
name|ListFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Returns a list of delegate futures that correspond to the futures received in the order    * that they complete. Delegate futures return the same value or throw the same exception    * as the corresponding input future returns/throws.    *    *<p>Cancelling a delegate future has no effect on any input future, since the delegate future    * does not correspond to a specific input future until the appropriate number of input    * futures have completed. At that point, it is too late to cancel the input future.    * The input future's result, which cannot be stored into the cancelled delegate future,    * is ignored.    *    * @since 17.0    */
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|CheckReturnValue
DECL|method|inCompletionOrder ( Iterable<? extends ListenableFuture<? extends T>> futures)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|inCompletionOrder
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
comment|// A CLQ may be overkill here.  We could save some pointers/memory by synchronizing on an
comment|// ArrayDeque
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|SettableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|delegates
init|=
name|Queues
operator|.
name|newConcurrentLinkedQueue
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ListenableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|listBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Using SerializingExecutor here will ensure that each CompletionOrderListener executes
comment|// atomically and therefore that each returned future is guaranteed to be in completion order.
comment|// N.B. there are some cases where the use of this executor could have possibly surprising
comment|// effects when input futures finish at approximately the same time _and_ the output futures
comment|// have directExecutor listeners. In this situation, the listeners may end up running on a
comment|// different thread than if they were attached to the corresponding input future.  We believe
comment|// this to be a negligible cost since:
comment|// 1. Using the directExecutor implies that your callback is safe to run on any thread.
comment|// 2. This would likely only be noticeable if you were doing something expensive or blocking on
comment|//    a directExecutor listener on one of the output futures which is an antipattern anyway.
name|SerializingExecutor
name|executor
init|=
operator|new
name|SerializingExecutor
argument_list|(
name|directExecutor
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|SettableFuture
argument_list|<
name|T
argument_list|>
name|delegate
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Must make sure to add the delegate to the queue first in case the future is already done
name|delegates
operator|.
name|add
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|delegates
operator|.
name|remove
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|listBuilder
operator|.
name|add
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
return|return
name|listBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Registers separate success and failure callbacks to be run when the {@code Future}'s    * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the    * computation is already complete, immediately.    *    *<p>There is no guaranteed ordering of execution of callbacks, but any callback added through    * this method is guaranteed to be called once the computation is complete.    *    * Example:<pre> {@code    * ListenableFuture<QueryResult> future = ...;    * addCallback(future,    *     new FutureCallback<QueryResult>() {    *       public void onSuccess(QueryResult result) {    *         storeInCache(result);    *       }    *       public void onFailure(Throwable t) {    *         reportError(t);    *       }    *     });}</pre>    *    *<p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous    * choice in some cases. See the discussion in the {@link ListenableFuture#addListener    * ListenableFuture.addListener} documentation.    *    *<p>For a more general interface to attach a completion listener to a {@code Future}, see {@link    * ListenableFuture#addListener addListener}.    *    * @param future The future attach the callback to.    * @param callback The callback to invoke when {@code future} is completed.    * @since 10.0    */
DECL|method|addCallback ( ListenableFuture<V> future, FutureCallback<? super V> callback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|addCallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|FutureCallback
argument_list|<
name|?
super|super
name|V
argument_list|>
name|callback
parameter_list|)
block|{
name|addCallback
argument_list|(
name|future
argument_list|,
name|callback
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers separate success and failure callbacks to be run when the {@code Future}'s    * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the    * computation is already complete, immediately.    *    *<p>The callback is run in {@code executor}. There is no guaranteed ordering of execution of    * callbacks, but any callback added through this method is guaranteed to be called once the    * computation is complete.    *    * Example:<pre> {@code    * ListenableFuture<QueryResult> future = ...;    * Executor e = ...    * addCallback(future,    *     new FutureCallback<QueryResult>() {    *       public void onSuccess(QueryResult result) {    *         storeInCache(result);    *       }    *       public void onFailure(Throwable t) {    *         reportError(t);    *       }    *     }, e);}</pre>    *    *<p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See    * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}    * documentation.    *    *<p>For a more general interface to attach a completion listener to a {@code Future}, see {@link    * ListenableFuture#addListener addListener}.    *    * @param future The future attach the callback to.    * @param callback The callback to invoke when {@code future} is completed.    * @param executor The executor to run {@code callback} when the future completes.    * @since 10.0    */
DECL|method|addCallback ( final ListenableFuture<V> future, final FutureCallback<? super V> callback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|addCallback
parameter_list|(
specifier|final
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
specifier|final
name|FutureCallback
argument_list|<
name|?
super|super
name|V
argument_list|>
name|callback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|callback
argument_list|)
expr_stmt|;
name|Runnable
name|callbackListener
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|V
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|callbackListener
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the    * given checked exception type. This reduces boilerplate for a common use of {@code Future} in    * which it is unnecessary to programmatically distinguish between exception types or to extract    * other information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an {@code X} if the cause is    *     a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the    *     interrupt).    *<li>Any {@link CancellationException} is propagated untouched, as is any other {@link    *     RuntimeException} (though {@code get} implementations are discouraged from throwing such    *     exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a checked    * exception, every unchecked exception as an unchecked exception, and every error as an error. In    * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the    * new stack trace matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor    * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}    * (preferring constructors with at least one {@code String}) and calling the constructor via    * reflection. If the exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code    * IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}    *     whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a    *     {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code    *     Error} as its cause    * @throws CancellationException if {@code get} throws a {@code CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or    *     does not have a suitable constructor    * @since 10.0    * @deprecated Use {@link #getChecked(Future, Class)}. This method will be removed in Guava    *     release 20.0.    */
annotation|@
name|Deprecated
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|get (Future<V> future, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|get
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
return|return
name|getChecked
argument_list|(
name|future
argument_list|,
name|exceptionClass
argument_list|)
return|;
block|}
comment|/**    * Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new    * instance of the given checked exception type. This reduces boilerplate for a common use of    * {@code Future} in which it is unnecessary to programmatically distinguish between exception    * types or to extract other information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an {@code X} if the cause is    *     a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the    *     interrupt).    *<li>Any {@link TimeoutException} is wrapped in an {@code X}.    *<li>Any {@link CancellationException} is propagated untouched, as is any other {@link    *     RuntimeException} (though {@code get} implementations are discouraged from throwing such    *     exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a checked    * exception, every unchecked exception as an unchecked exception, and every error as an error. In    * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the    * new stack trace matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor    * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}    * (preferring constructors with at least one {@code String}) and calling the constructor via    * reflection. If the exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code    * IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}    *     whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a    *     {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code    *     Error} as its cause    * @throws CancellationException if {@code get} throws a {@code CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or    *     does not have a suitable constructor    * @since 10.0    * @deprecated Use {@link #getChecked(Future, Class, long, TimeUnit)}, noting the change in    *     parameter order. This method will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|get ( Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|get
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
return|return
name|getChecked
argument_list|(
name|future
argument_list|,
name|exceptionClass
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
comment|/**    * Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the    * given checked exception type. This reduces boilerplate for a common use of {@code Future} in    * which it is unnecessary to programmatically distinguish between exception types or to extract    * other information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an {@code X} if the cause is    *     a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the    *     interrupt).    *<li>Any {@link CancellationException} is propagated untouched, as is any other {@link    *     RuntimeException} (though {@code get} implementations are discouraged from throwing such    *     exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a checked    * exception, every unchecked exception as an unchecked exception, and every error as an error. In    * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the    * new stack trace matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor    * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}    * (preferring constructors with at least one {@code String}) and calling the constructor via    * reflection. If the exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code    * IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}    *     whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a    *     {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code    *     Error} as its cause    * @throws CancellationException if {@code get} throws a {@code CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or    *     does not have a suitable constructor    * @since 19.0 (in 10.0 as {@code get})    */
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|getChecked (Future<V> future, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|getChecked
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
return|return
name|FuturesGetChecked
operator|.
name|getChecked
argument_list|(
name|future
argument_list|,
name|exceptionClass
argument_list|)
return|;
block|}
comment|/**    * Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new    * instance of the given checked exception type. This reduces boilerplate for a common use of    * {@code Future} in which it is unnecessary to programmatically distinguish between exception    * types or to extract other information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an {@code X} if the cause is    *     a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the    *     interrupt).    *<li>Any {@link TimeoutException} is wrapped in an {@code X}.    *<li>Any {@link CancellationException} is propagated untouched, as is any other {@link    *     RuntimeException} (though {@code get} implementations are discouraged from throwing such    *     exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a checked    * exception, every unchecked exception as an unchecked exception, and every error as an error. In    * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the    * new stack trace matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor    * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}    * (preferring constructors with at least one {@code String}) and calling the constructor via    * reflection. If the exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code    * IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}    *     whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a    *     {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code    *     Error} as its cause    * @throws CancellationException if {@code get} throws a {@code CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or    *     does not have a suitable constructor    * @since 19.0 (in 10.0 as {@code get} and with different parameter order)    */
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|getChecked ( Future<V> future, Class<X> exceptionClass, long timeout, TimeUnit unit)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|getChecked
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|X
block|{
return|return
name|FuturesGetChecked
operator|.
name|getChecked
argument_list|(
name|future
argument_list|,
name|exceptionClass
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
comment|/**    * Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw    * a checked exception. This makes {@code Future} more suitable for lightweight, fast-running    * tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior    * similar to that of {@code ForkJoinTask.join}.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an {@link    *     UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link    *     ExecutionError} (if the cause is an {@code Error}).    *<li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is    *     restored before {@code getUnchecked} returns.    *<li>Any {@link CancellationException} is propagated untouched. So is any other {@link    *     RuntimeException} ({@code get} implementations are discouraged from throwing such    *     exceptions).    *</ul>    *    *<p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code    * InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception    * from the underlying computation in an {@code UncheckedExecutionException} or {@code    * ExecutionError}.    *    *<p>For an uninterruptible {@code get} that preserves other exceptions, see {@link    * Uninterruptibles#getUninterruptibly(Future)}.    *    * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an    *     {@code Exception} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code    *     Error} as its cause    * @throws CancellationException if {@code get} throws a {@code CancellationException}    * @since 10.0    */
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|getUnchecked (Future<V> future)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|getUnchecked
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|wrapAndThrowUnchecked (Throwable cause)
specifier|private
specifier|static
name|void
name|wrapAndThrowUnchecked
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
operator|(
name|Error
operator|)
name|cause
argument_list|)
throw|;
block|}
comment|/*      * It's a non-Error, non-Exception Throwable. From my survey of such classes, I believe that      * most users intended to extend Exception, so we'll treat it like an Exception.      */
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
comment|/*    * Arguably we don't need a timed getUnchecked because any operation slow enough to require a    * timeout is heavyweight enough to throw a checked exception and therefore be inappropriate to    * use with getUnchecked. Further, it's not clear that converting the checked TimeoutException to    * a RuntimeException -- especially to an UncheckedExecutionException, since it wasn't thrown by    * the computation -- makes sense, and if we don't convert it, the user still has to write a    * try-catch block.    *    * If you think you would use this method, let us know. You might also also look into the    * Fork-Join framework: http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html    */
comment|/**    * A checked future that uses a function to map from exceptions to the appropriate checked type.    */
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|class|MappingCheckedFuture
specifier|private
specifier|static
class|class
name|MappingCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|AbstractCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|mapper
specifier|final
name|Function
argument_list|<
name|?
super|super
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
decl_stmt|;
DECL|method|MappingCheckedFuture (ListenableFuture<V> delegate, Function<? super Exception, X> mapper)
name|MappingCheckedFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|checkNotNull
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mapException (Exception e)
specifier|protected
name|X
name|mapException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|mapper
operator|.
name|apply
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

