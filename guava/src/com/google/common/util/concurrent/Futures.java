begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
operator|.
name|getUninterruptibly
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Static utility methods pertaining to the {@link Future} interface.  *  *<p>Many of these methods use the {@link ListenableFuture} API; consult the  * Guava User Guide article on<a href=  * "http://code.google.com/p/guava-libraries/wiki/ListenableFutureExplained">  * {@code ListenableFuture}</a>.  *  * @author Kevin Bourrillion  * @author Nishant Thakkar  * @author Sven Mawson  * @since 1.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|Futures
specifier|public
specifier|final
class|class
name|Futures
block|{
DECL|method|Futures ()
specifier|private
name|Futures
parameter_list|()
block|{}
comment|/**    * Creates a {@link CheckedFuture} out of a normal {@link ListenableFuture}    * and a {@link Function} that maps from {@link Exception} instances into the    * appropriate checked type.    *    *<p>The given mapping function will be applied to an    * {@link InterruptedException}, a {@link CancellationException}, or an    * {@link ExecutionException}.    * See {@link Future#get()} for details on the exceptions thrown.    *    * @since 9.0 (source-compatible since 1.0)    */
DECL|method|makeChecked ( ListenableFuture<V> future, Function<Exception, X> mapper)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
name|makeChecked
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Function
argument_list|<
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|MappingCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|future
argument_list|)
argument_list|,
name|mapper
argument_list|)
return|;
block|}
DECL|class|ImmediateFuture
specifier|private
specifier|abstract
specifier|static
class|class
name|ImmediateFuture
parameter_list|<
name|V
parameter_list|>
implements|implements
name|ListenableFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ImmediateFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|addListener (Runnable listener, Executor executor)
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|listener
argument_list|,
literal|"Runnable was null."
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"Executor was null."
argument_list|)
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// ListenableFuture's contract is that it will not throw unchecked
comment|// exceptions, so log the bad runnable and/or executor and swallow it.
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RuntimeException while executing runnable "
operator|+
name|listener
operator|+
literal|" with executor "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
specifier|abstract
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
function_decl|;
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ImmediateSuccessfulFuture
specifier|private
specifier|static
class|class
name|ImmediateSuccessfulFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|value
annotation|@
name|Nullable
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|ImmediateSuccessfulFuture (@ullable V value)
name|ImmediateSuccessfulFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|class|ImmediateSuccessfulCheckedFuture
specifier|private
specifier|static
class|class
name|ImmediateSuccessfulCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|value
annotation|@
name|Nullable
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|ImmediateSuccessfulCheckedFuture (@ullable V value)
name|ImmediateSuccessfulCheckedFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|checkedGet ()
specifier|public
name|V
name|checkedGet
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|checkedGet (long timeout, TimeUnit unit)
specifier|public
name|V
name|checkedGet
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
DECL|class|ImmediateFailedFuture
specifier|private
specifier|static
class|class
name|ImmediateFailedFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|thrown
specifier|private
specifier|final
name|Throwable
name|thrown
decl_stmt|;
DECL|method|ImmediateFailedFuture (Throwable thrown)
name|ImmediateFailedFuture
parameter_list|(
name|Throwable
name|thrown
parameter_list|)
block|{
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
DECL|class|ImmediateCancelledFuture
specifier|private
specifier|static
class|class
name|ImmediateCancelledFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|thrown
specifier|private
specifier|final
name|CancellationException
name|thrown
decl_stmt|;
DECL|method|ImmediateCancelledFuture ()
name|ImmediateCancelledFuture
parameter_list|()
block|{
name|this
operator|.
name|thrown
operator|=
operator|new
name|CancellationException
argument_list|(
literal|"Immediate cancelled future."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
throw|throw
name|AbstractFuture
operator|.
name|cancellationExceptionWithCause
argument_list|(
literal|"Task was cancelled."
argument_list|,
name|thrown
argument_list|)
throw|;
block|}
block|}
DECL|class|ImmediateFailedCheckedFuture
specifier|private
specifier|static
class|class
name|ImmediateFailedCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|thrown
specifier|private
specifier|final
name|X
name|thrown
decl_stmt|;
DECL|method|ImmediateFailedCheckedFuture (X thrown)
name|ImmediateFailedCheckedFuture
parameter_list|(
name|X
name|thrown
parameter_list|)
block|{
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|checkedGet ()
specifier|public
name|V
name|checkedGet
parameter_list|()
throws|throws
name|X
block|{
throw|throw
name|thrown
throw|;
block|}
annotation|@
name|Override
DECL|method|checkedGet (long timeout, TimeUnit unit)
specifier|public
name|V
name|checkedGet
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|X
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
throw|throw
name|thrown
throw|;
block|}
block|}
comment|/**    * Creates a {@code ListenableFuture} which has its value set immediately upon    * construction. The getters just return the value. This {@code Future} can't    * be canceled or timed out and its {@code isDone()} method always returns    * {@code true}.    */
DECL|method|immediateFuture (@ullable V value)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmediateSuccessfulFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code CheckedFuture} which has its value set immediately upon    * construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()}    * method always returns {@code true}. Calling {@code get()} or {@code    * checkedGet()} will immediately return the provided value.    */
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
DECL|method|immediateCheckedFuture (@ullable V value)
name|immediateCheckedFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmediateSuccessfulCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code ListenableFuture} which has an exception set immediately    * upon construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()}    * method always returns {@code true}. Calling {@code get()} will immediately    * throw the provided {@code Throwable} wrapped in an {@code    * ExecutionException}.    */
DECL|method|immediateFailedFuture ( Throwable throwable)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateFailedFuture
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmediateFailedFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|throwable
argument_list|)
return|;
block|}
comment|/**    * Creates a {@code ListenableFuture} which is cancelled immediately upon    * construction, so that {@code isCancelled()} always returns {@code true}.    *    * @since 14.0    */
DECL|method|immediateCancelledFuture ()
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateCancelledFuture
parameter_list|()
block|{
return|return
operator|new
name|ImmediateCancelledFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a {@code CheckedFuture} which has an exception set immediately upon    * construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()}    * method always returns {@code true}. Calling {@code get()} will immediately    * throw the provided {@code Exception} wrapped in an {@code    * ExecutionException}, and calling {@code checkedGet()} will throw the    * provided exception itself.    */
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
DECL|method|immediateFailedCheckedFuture (X exception)
name|immediateFailedCheckedFuture
parameter_list|(
name|X
name|exception
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmediateFailedCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|exception
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary    * {@code input} or, if the primary input fails, from the {@code Future}    * provided by the {@code fallback}. {@link FutureFallback#create} is not    * invoked until the primary input has failed, so if the primary input    * succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of    * the output {@code Future}.    *    *<p>Below is an example of a fallback that returns a default value if an    * exception occurs:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           // Returning "0" as the default for the counter when the    *           // exception happens.    *           return immediateFuture(0);    *         }    *       });}</pre>    *    *<p>The fallback can also choose to propagate the original exception when    * desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           if (t instanceof TimeoutException) {    *             return immediateFuture(0);    *           }    *           return immediateFailedFuture(t);    *         }    *       });}</pre>    *    *<p>Note: If the derived {@code Future} is slow or heavyweight to create    * (whether the {@code Future} itself is slow or heavyweight to complete is    * irrelevant), consider {@linkplain #withFallback(ListenableFuture,    * FutureFallback, Executor) supplying an executor}. If you do not supply an    * executor, {@code withFallback} will use {@link    * MoreExecutors#sameThreadExecutor sameThreadExecutor}, which carries some    * caveats for heavier operations. For example, the call to {@code    * fallback.create} may run on an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code withFallback}    * is called, {@code withFallback} will call {@code fallback.create} inline.    *<li>If the input {@code Future} is not yet done, {@code withFallback} will    * schedule {@code fallback.create} to be run by the thread that completes    * the input {@code Future}, which may be an internal system thread such as    * an RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes the {@code    * sameThreadExecutor} {@code fallback.create}, all other registered but    * unexecuted listeners are prevented from running during its execution, even    * if those listeners are to run in other executors.    *    * @param input the primary input {@code Future}    * @param fallback the {@link FutureFallback} implementation to be called if    *     {@code input} fails    * @since 14.0    */
DECL|method|withFallback ( ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withFallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|withFallback
argument_list|(
name|input
argument_list|,
name|fallback
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary    * {@code input} or, if the primary input fails, from the {@code Future}    * provided by the {@code fallback}. {@link FutureFallback#create} is not    * invoked until the primary input has failed, so if the primary input    * succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of    * the output {@code Future}.    *    *<p>Below is an example of a fallback that returns a default value if an    * exception occurs:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           // Returning "0" as the default for the counter when the    *           // exception happens.    *           return immediateFuture(0);    *         }    *       }, sameThreadExecutor());}</pre>    *    *<p>The fallback can also choose to propagate the original exception when    * desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           if (t instanceof TimeoutException) {    *             return immediateFuture(0);    *           }    *           return immediateFailedFuture(t);    *         }    *       }, sameThreadExecutor());}</pre>    *    *<p>When the execution of {@code fallback.create} is fast and lightweight    * (though the {@code Future} it returns need not meet these criteria),    * consider {@linkplain #withFallback(ListenableFuture, FutureFallback)    * omitting the executor} or explicitly specifying {@code    * sameThreadExecutor}. However, be aware of the caveats documented in the    * link above.    *    * @param input the primary input {@code Future}    * @param fallback the {@link FutureFallback} implementation to be called if    *     {@code input} fails    * @param executor the executor that runs {@code fallback} if {@code input}    *     fails    * @since 14.0    */
DECL|method|withFallback ( ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withFallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|fallback
argument_list|)
expr_stmt|;
return|return
operator|new
name|FallbackFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|input
argument_list|,
name|fallback
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * A future that falls back on a second, generated future, in case its    * original future fails.    */
DECL|class|FallbackFuture
specifier|private
specifier|static
class|class
name|FallbackFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|running
specifier|private
specifier|volatile
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|running
decl_stmt|;
DECL|method|FallbackFuture (ListenableFuture<? extends V> input, final FutureFallback<? extends V> fallback, final Executor executor)
name|FallbackFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
specifier|final
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
block|{
name|running
operator|=
name|input
expr_stmt|;
name|addCallback
argument_list|(
name|running
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|running
operator|=
name|fallback
operator|.
name|create
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
comment|// in case cancel called in the meantime
name|running
operator|.
name|cancel
argument_list|(
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|addCallback
argument_list|(
name|running
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|running
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
condition|)
block|{
name|running
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously    * derived from the result of the given {@code Future}. More precisely, the    * returned {@code Future} takes its result from a {@code Future} produced by    * applying the given {@code AsyncFunction} to the result of the original    * {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transform(rowKeyFuture, queryFunction);}</pre>    *    *<p>Note: If the derived {@code Future} is slow or heavyweight to create    * (whether the {@code Future} itself is slow or heavyweight to complete is    * irrelevant), consider {@linkplain #transform(ListenableFuture,    * AsyncFunction, Executor) supplying an executor}. If you do not supply an    * executor, {@code transform} will use {@link    * MoreExecutors#sameThreadExecutor sameThreadExecutor}, which carries some    * caveats for heavier operations. For example, the call to {@code    * function.apply} may run on an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code transform} is    * called, {@code transform} will call {@code function.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code transform} will    * schedule {@code function.apply} to be run by the thread that completes the    * input {@code Future}, which may be an internal system thread such as an    * RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes the {@code    * sameThreadExecutor} {@code function.apply}, all other registered but    * unexecuted listeners are prevented from running during its execution, even    * if those listeners are to run in other executors.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future and that of the future returned by the    * function. That is, if the returned {@code Future} is cancelled, it will    * attempt to cancel the other two, and if either of the other two is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future    *     to the result of the output future    * @return A future that holds result of the function (if the input succeeded)    *     or the original input's failure (if not)    * @since 11.0    */
DECL|method|transform (ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|transform
argument_list|(
name|input
argument_list|,
name|function
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously    * derived from the result of the given {@code Future}. More precisely, the    * returned {@code Future} takes its result from a {@code Future} produced by    * applying the given {@code AsyncFunction} to the result of the original    * {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transform(rowKeyFuture, queryFunction, executor);}</pre>    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future and that of the future returned by the    * chain function. That is, if the returned {@code Future} is cancelled, it    * will attempt to cancel the other two, and if either of the other two is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    *<p>When the execution of {@code function.apply} is fast and lightweight    * (though the {@code Future} it returns need not meet these criteria),    * consider {@linkplain #transform(ListenableFuture, AsyncFunction) omitting    * the executor} or explicitly specifying {@code sameThreadExecutor}.    * However, be aware of the caveats documented in the link above.    *    * @param input The future to transform    * @param function A function to transform the result of the input future    *     to the result of the output future    * @param executor Executor to run the function in.    * @return A future that holds result of the function (if the input succeeded)    *     or the original input's failure (if not)    * @since 11.0    */
DECL|method|transform (ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
name|output
init|=
operator|new
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
argument_list|(
name|function
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|addListener
argument_list|(
name|output
argument_list|,
name|executor
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of    * applying the given {@code Function} to the result of the given {@code    * Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<QueryResult> queryFuture = ...;    *   Function<QueryResult, List<Row>> rowsFunction =    *       new Function<QueryResult, List<Row>>() {    *         public List<Row> apply(QueryResult queryResult) {    *           return queryResult.getRows();    *         }    *       };    *   ListenableFuture<List<Row>> rowsFuture =    *       transform(queryFuture, rowsFunction);}</pre>    *    *<p>Note: If the transformation is slow or heavyweight, consider {@linkplain    * #transform(ListenableFuture, Function, Executor) supplying an executor}.    * If you do not supply an executor, {@code transform} will use {@link    * MoreExecutors#sameThreadExecutor sameThreadExecutor}, which carries some    * caveats for heavier operations.  For example, the call to {@code    * function.apply} may run on an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code transform} is    * called, {@code transform} will call {@code function.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code transform} will    * schedule {@code function.apply} to be run by the thread that completes the    * input {@code Future}, which may be an internal system thread such as an    * RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes the {@code    * sameThreadExecutor} {@code function.apply}, all other registered but    * unexecuted listeners are prevented from running during its execution, even    * if those listeners are to run in other executors.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future. That is, if the returned {@code Future}    * is cancelled, it will attempt to cancel the input, and if the input is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    *<p>An example use of this method is to convert a serializable object    * returned from an RPC into a POJO.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future    *     to the results of the returned future.  This will be run in the thread    *     that notifies input it is complete.    * @return A future that holds result of the transformation.    * @since 9.0 (in 1.0 as {@code compose})    */
DECL|method|transform (ListenableFuture<I> input, final Function<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|transform
argument_list|(
name|input
argument_list|,
name|function
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of    * applying the given {@code Function} to the result of the given {@code    * Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<QueryResult> queryFuture = ...;    *   Function<QueryResult, List<Row>> rowsFunction =    *       new Function<QueryResult, List<Row>>() {    *         public List<Row> apply(QueryResult queryResult) {    *           return queryResult.getRows();    *         }    *       };    *   ListenableFuture<List<Row>> rowsFuture =    *       transform(queryFuture, rowsFunction, executor);}</pre>    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future. That is, if the returned {@code Future}    * is cancelled, it will attempt to cancel the input, and if the input is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    *<p>An example use of this method is to convert a serializable object    * returned from an RPC into a POJO.    *    *<p>When the transformation is fast and lightweight, consider {@linkplain    * #transform(ListenableFuture, Function) omitting the executor} or    * explicitly specifying {@code sameThreadExecutor}. However, be aware of the    * caveats documented in the link above.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future    *     to the results of the returned future.    * @param executor Executor to run the function in.    * @return A future that holds result of the transformation.    * @since 9.0 (in 2.0 as {@code compose})    */
DECL|method|transform (ListenableFuture<I> input, final Function<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|AsyncFunction
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
name|wrapperFunction
init|=
operator|new
name|AsyncFunction
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|apply
parameter_list|(
name|I
name|input
parameter_list|)
block|{
name|O
name|output
init|=
name|function
operator|.
name|apply
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|immediateFuture
argument_list|(
name|output
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|transform
argument_list|(
name|input
argument_list|,
name|wrapperFunction
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Like {@link #transform(ListenableFuture, Function)} except that the    * transformation {@code function} is invoked on each call to    * {@link Future#get() get()} on the returned future.    *    *<p>The returned {@code Future} reflects the input's cancellation    * state directly, and any attempt to cancel the returned Future is likewise    * passed through to the input Future.    *    *<p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get}    * only apply the timeout to the execution of the underlying {@code Future},    *<em>not</em> to the execution of the transformation function.    *    *<p>The primary audience of this method is callers of {@code transform}    * who don't have a {@code ListenableFuture} available and    * do not mind repeated, lazy function evaluation.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future    *     to the results of the returned future.    * @return A future that returns the result of the transformation.    * @since 10.0    */
DECL|method|lazyTransform (final Future<I> input, final Function<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|Future
argument_list|<
name|O
argument_list|>
name|lazyTransform
parameter_list|(
specifier|final
name|Future
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
operator|new
name|Future
argument_list|<
name|O
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|input
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|input
operator|.
name|isCancelled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|input
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|O
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|applyTransformation
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|O
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|applyTransformation
argument_list|(
name|input
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|O
name|applyTransformation
parameter_list|(
name|I
name|input
parameter_list|)
throws|throws
name|ExecutionException
block|{
try|try
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * An implementation of {@code ListenableFuture} that also implements    * {@code Runnable} so that it can be used to nest ListenableFutures.    * Once the passed-in {@code ListenableFuture} is complete, it calls the    * passed-in {@code Function} to generate the result.    *    *<p>If the function throws any checked exceptions, they should be wrapped    * in a {@code UndeclaredThrowableException} so that this class can get    * access to the cause.    */
DECL|class|ChainingListenableFuture
specifier|private
specifier|static
class|class
name|ChainingListenableFuture
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|O
argument_list|>
implements|implements
name|Runnable
block|{
DECL|field|function
specifier|private
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
decl_stmt|;
DECL|field|inputFuture
specifier|private
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|I
argument_list|>
name|inputFuture
decl_stmt|;
DECL|field|outputFuture
specifier|private
specifier|volatile
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|O
argument_list|>
name|outputFuture
decl_stmt|;
DECL|field|outputCreated
specifier|private
specifier|final
name|CountDownLatch
name|outputCreated
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|ChainingListenableFuture ( AsyncFunction<? super I, ? extends O> function, ListenableFuture<? extends I> inputFuture)
specifier|private
name|ChainingListenableFuture
parameter_list|(
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|I
argument_list|>
name|inputFuture
parameter_list|)
block|{
name|this
operator|.
name|function
operator|=
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputFuture
operator|=
name|checkNotNull
argument_list|(
name|inputFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
comment|/*        * Our additional cancellation work needs to occur even if        * !mayInterruptIfRunning, so we can't move it into interruptTask().        */
if|if
condition|(
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
condition|)
block|{
comment|// This should never block since only one thread is allowed to cancel
comment|// this Future.
name|cancel
argument_list|(
name|inputFuture
argument_list|,
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
name|cancel
argument_list|(
name|outputFuture
argument_list|,
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|cancel (@ullable Future<?> future, boolean mayInterruptIfRunning)
specifier|private
name|void
name|cancel
parameter_list|(
annotation|@
name|Nullable
name|Future
argument_list|<
name|?
argument_list|>
name|future
parameter_list|,
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|I
name|sourceResult
decl_stmt|;
try|try
block|{
name|sourceResult
operator|=
name|getUninterruptibly
argument_list|(
name|inputFuture
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// Cancel this future and return.
comment|// At this point, inputFuture is cancelled and outputFuture doesn't
comment|// exist, so the value of mayInterruptIfRunning is irrelevant.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// Set the cause of the exception as this future's exception
name|setException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|O
argument_list|>
name|outputFuture
init|=
name|this
operator|.
name|outputFuture
operator|=
name|function
operator|.
name|apply
argument_list|(
name|sourceResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
name|outputFuture
operator|.
name|cancel
argument_list|(
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputFuture
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|outputFuture
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|set
argument_list|(
name|getUninterruptibly
argument_list|(
name|outputFuture
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// Cancel this future and return.
comment|// At this point, inputFuture and outputFuture are done, so the
comment|// value of mayInterruptIfRunning is irrelevant.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// Set the cause of the exception as this future's exception
name|setException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Don't pin inputs beyond completion
name|ChainingListenableFuture
operator|.
name|this
operator|.
name|outputFuture
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
comment|// Set the cause of the exception as this future's exception
name|setException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// This exception is irrelevant in this thread, but useful for the
comment|// client
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Don't pin inputs beyond completion
name|function
operator|=
literal|null
expr_stmt|;
name|inputFuture
operator|=
literal|null
expr_stmt|;
comment|// Allow our get routines to examine outputFuture now.
name|outputCreated
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of    * calling {@code get()} on the {@code Future} nested within the given {@code    * Future}, effectively chaining the futures one after the other.  Example:    *    *<pre>   {@code    *   SettableFuture<ListenableFuture<String>> nested = SettableFuture.create();    *   ListenableFuture<String> dereferenced = dereference(nested);}</pre>    *    *<p>This call has the same cancellation and execution semantics as {@link    * #transform(ListenableFuture, AsyncFunction)}, in that the returned {@code    * Future} attempts to keep its cancellation state in sync with both the    * input {@code Future} and the nested {@code Future}.  The transformation    * is very lightweight and therefore takes place in the thread that called    * {@code dereference}.    *    * @param nested The nested future to transform.    * @return A future that holds result of the inner future.    * @since 13.0    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|dereference ( ListenableFuture<? extends ListenableFuture<? extends V>> nested)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|dereference
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|nested
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|transform
argument_list|(
operator|(
name|ListenableFuture
operator|)
name|nested
argument_list|,
operator|(
name|AsyncFunction
operator|)
name|DEREFERENCER
argument_list|)
return|;
block|}
comment|/**    * Helper {@code Function} for {@link #dereference}.    */
DECL|field|DEREFERENCER
specifier|private
specifier|static
specifier|final
name|AsyncFunction
argument_list|<
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|DEREFERENCER
init|=
operator|new
name|AsyncFunction
argument_list|<
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its input futures, if all succeed. If any input fails, the    * returned future fails.    *    *<p>The list of results is in the same order as the input list.    *    *<p>Canceling this future will attempt to cancel all the component futures,    * and if any of the provided futures fails or is canceled, this one is,    * too.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
DECL|method|allAsList ( ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|allAsList
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|true
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its input futures, if all succeed. If any input fails, the    * returned future fails.    *    *<p>The list of results is in the same order as the input list.    *    *<p>Canceling this future will attempt to cancel all the component futures,    * and if any of the provided futures fails or is canceled, this one is,    * too.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
DECL|method|allAsList ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|allAsList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|true
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose result is set from the    * supplied future when it completes.  Cancelling the supplied future    * will also cancel the returned future, but cancelling the returned    * future will have no effect on the supplied future.    *    * @since 15.0    */
DECL|method|nonCancellationPropagating ( ListenableFuture<V> future)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|nonCancellationPropagating
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|)
block|{
return|return
operator|new
name|NonCancellationPropagatingFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|future
argument_list|)
return|;
block|}
comment|/**    * A wrapped future that does not propagate cancellation to its delegate.    */
DECL|class|NonCancellationPropagatingFuture
specifier|private
specifier|static
class|class
name|NonCancellationPropagatingFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|NonCancellationPropagatingFuture (final ListenableFuture<V> delegate)
name|NonCancellationPropagatingFuture
parameter_list|(
specifier|final
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|addCallback
argument_list|(
name|delegate
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|V
name|result
parameter_list|)
block|{
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|delegate
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its successful input futures. The list of results is in the    * same order as the input list, and if any of the provided futures fails or    * is canceled, its corresponding position will contain {@code null} (which is    * indistinguishable from the future having a successful value of    * {@code null}).    *    *<p>Canceling this future will attempt to cancel all the component futures.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
DECL|method|successfulAsList ( ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|successfulAsList
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|false
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its successful input futures. The list of results is in the    * same order as the input list, and if any of the provided futures fails or    * is canceled, its corresponding position will contain {@code null} (which is    * indistinguishable from the future having a successful value of    * {@code null}).    *    *<p>Canceling this future will attempt to cancel all the component futures.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
DECL|method|successfulAsList ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|successfulAsList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|false
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Registers separate success and failure callbacks to be run when the {@code    * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone()    * complete} or, if the computation is already complete, immediately.    *    *<p>There is no guaranteed ordering of execution of callbacks, but any    * callback added through this method is guaranteed to be called once the    * computation is complete.    *    * Example:<pre> {@code    * ListenableFuture<QueryResult> future = ...;    * addCallback(future,    *     new FutureCallback<QueryResult> {    *       public void onSuccess(QueryResult result) {    *         storeInCache(result);    *       }    *       public void onFailure(Throwable t) {    *         reportError(t);    *       }    *     });}</pre>    *    *<p>Note: If the callback is slow or heavyweight, consider {@linkplain    * #addCallback(ListenableFuture, FutureCallback, Executor) supplying an    * executor}. If you do not supply an executor, {@code addCallback} will use    * {@link MoreExecutors#sameThreadExecutor sameThreadExecutor}, which carries    * some caveats for heavier operations. For example, the callback may run on    * an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code addCallback} is    * called, {@code addCallback} will execute the callback inline.    *<li>If the input {@code Future} is not yet done, {@code addCallback} will    * schedule the callback to be run by the thread that completes the input    * {@code Future}, which may be an internal system thread such as an RPC    * network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes the {@code    * sameThreadExecutor} callback, all other registered but unexecuted listeners    * are prevented from running during its execution, even if those listeners    * are to run in other executors.    *    *<p>For a more general interface to attach a completion listener to a    * {@code Future}, see {@link ListenableFuture#addListener addListener}.    *    * @param future The future attach the callback to.    * @param callback The callback to invoke when {@code future} is completed.    * @since 10.0    */
DECL|method|addCallback (ListenableFuture<V> future, FutureCallback<? super V> callback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|addCallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|FutureCallback
argument_list|<
name|?
super|super
name|V
argument_list|>
name|callback
parameter_list|)
block|{
name|addCallback
argument_list|(
name|future
argument_list|,
name|callback
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers separate success and failure callbacks to be run when the {@code    * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone()    * complete} or, if the computation is already complete, immediately.    *    *<p>The callback is run in {@code executor}.    * There is no guaranteed ordering of execution of callbacks, but any    * callback added through this method is guaranteed to be called once the    * computation is complete.    *    * Example:<pre> {@code    * ListenableFuture<QueryResult> future = ...;    * Executor e = ...    * addCallback(future, e,    *     new FutureCallback<QueryResult> {    *       public void onSuccess(QueryResult result) {    *         storeInCache(result);    *       }    *       public void onFailure(Throwable t) {    *         reportError(t);    *       }    *     });}</pre>    *    *<p>When the callback is fast and lightweight, consider {@linkplain    * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or    * explicitly specifying {@code sameThreadExecutor}. However, be aware of the    * caveats documented in the link above.    *    *<p>For a more general interface to attach a completion listener to a    * {@code Future}, see {@link ListenableFuture#addListener addListener}.    *    * @param future The future attach the callback to.    * @param callback The callback to invoke when {@code future} is completed.    * @param executor The executor to run {@code callback} when the future    *    completes.    * @since 10.0    */
DECL|method|addCallback (final ListenableFuture<V> future, final FutureCallback<? super V> callback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|addCallback
parameter_list|(
specifier|final
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
specifier|final
name|FutureCallback
argument_list|<
name|?
super|super
name|V
argument_list|>
name|callback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|callback
argument_list|)
expr_stmt|;
name|Runnable
name|callbackListener
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|V
name|value
decl_stmt|;
try|try
block|{
comment|// TODO(user): (Before Guava release), validate that this
comment|// is the thing for IE.
name|value
operator|=
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|callbackListener
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the result of {@link Future#get()}, converting most exceptions to a    * new instance of the given checked exception type. This reduces boilerplate    * for a common use of {@code Future} in which it is unnecessary to    * programmatically distinguish between exception types or to extract other    * information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an    *     {@code X} if the cause is a checked exception, an {@link    *     UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an    *     {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after    *     restoring the interrupt).    *<li>Any {@link CancellationException} is propagated untouched, as is any    *     other {@link RuntimeException} (though {@code get} implementations are    *     discouraged from throwing such exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a    * checked exception, every unchecked exception as an unchecked exception, and    * every error as an error. In addition, the cause of any {@code    * ExecutionException} is wrapped in order to ensure that the new stack trace    * matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary    * public constructor that accepts zero or more arguments, all of type {@code    * String} or {@code Throwable} (preferring constructors with at least one    * {@code String}) and calling the constructor via reflection. If the    * exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an    * {@code IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code    *         ExecutionException} whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code    *         ExecutionException} with a {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException}    *         with an {@code Error} as its cause    * @throws CancellationException if {@code get} throws a {@code    *         CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code    *         RuntimeException} or does not have a suitable constructor    * @since 10.0    */
DECL|method|get ( Future<V> future, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|get
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|RuntimeException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exceptionClass
argument_list|)
argument_list|,
literal|"Futures.get exception type (%s) must not be a RuntimeException"
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowExceptionOrError
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Returns the result of {@link Future#get(long, TimeUnit)}, converting most    * exceptions to a new instance of the given checked exception type. This    * reduces boilerplate for a common use of {@code Future} in which it is    * unnecessary to programmatically distinguish between exception types or to    * extract other information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an    *     {@code X} if the cause is a checked exception, an {@link    *     UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an    *     {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after    *     restoring the interrupt).    *<li>Any {@link TimeoutException} is wrapped in an {@code X}.    *<li>Any {@link CancellationException} is propagated untouched, as is any    *     other {@link RuntimeException} (though {@code get} implementations are    *     discouraged from throwing such exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a    * checked exception, every unchecked exception as an unchecked exception, and    * every error as an error. In addition, the cause of any {@code    * ExecutionException} is wrapped in order to ensure that the new stack trace    * matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary    * public constructor that accepts zero or more arguments, all of type {@code    * String} or {@code Throwable} (preferring constructors with at least one    * {@code String}) and calling the constructor via reflection. If the    * exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an    * {@code IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code    *         ExecutionException} whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code    *         ExecutionException} with a {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException}    *         with an {@code Error} as its cause    * @throws CancellationException if {@code get} throws a {@code    *         CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code    *         RuntimeException} or does not have a suitable constructor    * @since 10.0    */
DECL|method|get ( Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|get
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|RuntimeException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exceptionClass
argument_list|)
argument_list|,
literal|"Futures.get exception type (%s) must not be a RuntimeException"
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowExceptionOrError
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|wrapAndThrowExceptionOrError ( Throwable cause, Class<X> exceptionClass)
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Exception
parameter_list|>
name|void
name|wrapAndThrowExceptionOrError
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
operator|(
name|Error
operator|)
name|cause
argument_list|)
throw|;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|cause
argument_list|)
throw|;
block|}
comment|/**    * Returns the result of calling {@link Future#get()} uninterruptibly on a    * task known not to throw a checked exception. This makes {@code Future} more    * suitable for lightweight, fast-running tasks that, barring bugs in the    * code, will not fail. This gives it exception-handling behavior similar to    * that of {@code ForkJoinTask.join}.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an    *     {@link UncheckedExecutionException} (if the cause is an {@code    *     Exception}) or {@link ExecutionError} (if the cause is an {@code    *     Error}).    *<li>Any {@link InterruptedException} causes a retry of the {@code get}    *     call. The interrupt is restored before {@code getUnchecked} returns.    *<li>Any {@link CancellationException} is propagated untouched. So is any    *     other {@link RuntimeException} ({@code get} implementations are    *     discouraged from throwing such exceptions).    *</ul>    *    *<p>The overall principle is to eliminate all checked exceptions: to loop to    * avoid {@code InterruptedException}, to pass through {@code    * CancellationException}, and to wrap any exception from the underlying    * computation in an {@code UncheckedExecutionException} or {@code    * ExecutionError}.    *    *<p>For an uninterruptible {@code get} that preserves other exceptions, see    * {@link Uninterruptibles#getUninterruptibly(Future)}.    *    * @throws UncheckedExecutionException if {@code get} throws an {@code    *         ExecutionException} with an {@code Exception} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException}    *         with an {@code Error} as its cause    * @throws CancellationException if {@code get} throws a {@code    *         CancellationException}    * @since 10.0    */
DECL|method|getUnchecked (Future<V> future)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|getUnchecked
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|wrapAndThrowUnchecked (Throwable cause)
specifier|private
specifier|static
name|void
name|wrapAndThrowUnchecked
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
operator|(
name|Error
operator|)
name|cause
argument_list|)
throw|;
block|}
comment|/*      * It's a non-Error, non-Exception Throwable. From my survey of such      * classes, I believe that most users intended to extend Exception, so we'll      * treat it like an Exception.      */
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
comment|/*    * TODO(user): FutureChecker interface for these to be static methods on? If    * so, refer to it in the (static-method) Futures.get documentation    */
comment|/*    * Arguably we don't need a timed getUnchecked because any operation slow    * enough to require a timeout is heavyweight enough to throw a checked    * exception and therefore be inappropriate to use with getUnchecked. Further,    * it's not clear that converting the checked TimeoutException to a    * RuntimeException -- especially to an UncheckedExecutionException, since it    * wasn't thrown by the computation -- makes sense, and if we don't convert    * it, the user still has to write a try-catch block.    *    * If you think you would use this method, let us know.    */
DECL|method|newWithCause ( Class<X> exceptionClass, Throwable cause)
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Exception
parameter_list|>
name|X
name|newWithCause
parameter_list|(
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
comment|// getConstructors() guarantees this as long as we don't modify the array.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Constructor
argument_list|<
name|X
argument_list|>
argument_list|>
name|constructors
init|=
operator|(
name|List
operator|)
name|Arrays
operator|.
name|asList
argument_list|(
name|exceptionClass
operator|.
name|getConstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|X
argument_list|>
name|constructor
range|:
name|preferringStrings
argument_list|(
name|constructors
argument_list|)
control|)
block|{
annotation|@
name|Nullable
name|X
name|instance
init|=
name|newFromConstructor
argument_list|(
name|constructor
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|instance
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|instance
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No appropriate constructor for exception of type "
operator|+
name|exceptionClass
operator|+
literal|" in response to chained exception"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Exception
parameter_list|>
name|List
argument_list|<
name|Constructor
argument_list|<
name|X
argument_list|>
argument_list|>
DECL|method|preferringStrings (List<Constructor<X>> constructors)
name|preferringStrings
parameter_list|(
name|List
argument_list|<
name|Constructor
argument_list|<
name|X
argument_list|>
argument_list|>
name|constructors
parameter_list|)
block|{
return|return
name|WITH_STRING_PARAM_FIRST
operator|.
name|sortedCopy
argument_list|(
name|constructors
argument_list|)
return|;
block|}
DECL|field|WITH_STRING_PARAM_FIRST
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|>
name|WITH_STRING_PARAM_FIRST
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|asList
argument_list|(
name|input
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|)
operator|.
name|reverse
argument_list|()
expr_stmt|;
end_class

begin_function
DECL|method|newFromConstructor ( Constructor<X> constructor, Throwable cause)
annotation|@
name|Nullable
specifier|private
specifier|static
parameter_list|<
name|X
parameter_list|>
name|X
name|newFromConstructor
parameter_list|(
name|Constructor
argument_list|<
name|X
argument_list|>
name|constructor
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramTypes
init|=
name|constructor
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|paramTypes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
init|=
name|paramTypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|paramType
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|cause
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paramType
operator|.
name|equals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
condition|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|cause
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_interface
DECL|interface|FutureCombiner
specifier|private
interface|interface
name|FutureCombiner
parameter_list|<
name|V
parameter_list|,
name|C
parameter_list|>
block|{
DECL|method|combine (List<Optional<V>> values)
name|C
name|combine
parameter_list|(
name|List
argument_list|<
name|Optional
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
function_decl|;
block|}
end_interface

begin_class
DECL|class|CombinedFuture
specifier|private
specifier|static
class|class
name|CombinedFuture
parameter_list|<
name|V
parameter_list|,
name|C
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|C
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CombinedFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|futures
name|ImmutableCollection
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
decl_stmt|;
DECL|field|allMustSucceed
specifier|final
name|boolean
name|allMustSucceed
decl_stmt|;
DECL|field|remaining
specifier|final
name|AtomicInteger
name|remaining
decl_stmt|;
DECL|field|combiner
name|FutureCombiner
argument_list|<
name|V
argument_list|,
name|C
argument_list|>
name|combiner
decl_stmt|;
DECL|field|values
name|List
argument_list|<
name|Optional
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
decl_stmt|;
DECL|method|CombinedFuture ( ImmutableCollection<? extends ListenableFuture<? extends V>> futures, boolean allMustSucceed, Executor listenerExecutor, FutureCombiner<V, C> combiner)
name|CombinedFuture
parameter_list|(
name|ImmutableCollection
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|,
name|boolean
name|allMustSucceed
parameter_list|,
name|Executor
name|listenerExecutor
parameter_list|,
name|FutureCombiner
argument_list|<
name|V
argument_list|,
name|C
argument_list|>
name|combiner
parameter_list|)
block|{
name|this
operator|.
name|futures
operator|=
name|futures
expr_stmt|;
name|this
operator|.
name|allMustSucceed
operator|=
name|allMustSucceed
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|combiner
operator|=
name|combiner
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|listenerExecutor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Must be called at the end of the constructor.      */
DECL|method|init (final Executor listenerExecutor)
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|Executor
name|listenerExecutor
parameter_list|)
block|{
comment|// First, schedule cleanup to execute when the Future is done.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Cancel all the component futures.
if|if
condition|(
name|CombinedFuture
operator|.
name|this
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
for|for
control|(
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
range|:
name|CombinedFuture
operator|.
name|this
operator|.
name|futures
control|)
block|{
name|future
operator|.
name|cancel
argument_list|(
name|CombinedFuture
operator|.
name|this
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let go of the memory held by other futures
name|CombinedFuture
operator|.
name|this
operator|.
name|futures
operator|=
literal|null
expr_stmt|;
comment|// By now the values array has either been set as the Future's value,
comment|// or (in case of failure) is no longer useful.
name|CombinedFuture
operator|.
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
comment|// The combiner may also hold state, so free that as well
name|CombinedFuture
operator|.
name|this
operator|.
name|combiner
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now begin the "real" initialization.
comment|// Corner case: List is empty.
if|if
condition|(
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|set
argument_list|(
name|combiner
operator|.
name|combine
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Optional
argument_list|<
name|V
argument_list|>
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Populate the results list with null initially.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|futures
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Register a listener on each Future in the list to update
comment|// the state of this future.
comment|// Note that if all the futures on the list are done prior to completing
comment|// this loop, the last call to addListener() will callback to
comment|// setOneValue(), transitively call our cleanup listener, and set
comment|// this.futures to null.
comment|// This is not actually a problem, since the foreach only needs
comment|// this.futures to be non-null at the beginning of the loop.
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|listenable
range|:
name|futures
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
operator|++
decl_stmt|;
name|listenable
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setOneValue
argument_list|(
name|index
argument_list|,
name|listenable
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|listenerExecutor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fails this future with the given Throwable if {@link #allMustSucceed} is      * true. Also, logs the throwable if it is an {@link Error} or if      * {@link #allMustSucceed} is {@code true} and the throwable did not cause      * this future to fail.      */
DECL|method|setExceptionAndMaybeLog (Throwable throwable)
specifier|private
name|void
name|setExceptionAndMaybeLog
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|allMustSucceed
condition|)
block|{
comment|// As soon as the first one fails, throw the exception up.
comment|// The result of all other inputs is then ignored.
name|result
operator|=
name|super
operator|.
name|setException
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throwable
operator|instanceof
name|Error
operator|||
operator|(
name|allMustSucceed
operator|&&
operator|!
name|result
operator|)
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"input future failed."
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the value at the given index to that of the given future.      */
DECL|method|setOneValue (int index, Future<? extends V> future)
specifier|private
name|void
name|setOneValue
parameter_list|(
name|int
name|index
parameter_list|,
name|Future
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|future
parameter_list|)
block|{
name|List
argument_list|<
name|Optional
argument_list|<
name|V
argument_list|>
argument_list|>
name|localValues
init|=
name|values
decl_stmt|;
comment|// TODO(user): This check appears to be redundant since values is
comment|// assigned null only after the future completes.  However, values
comment|// is not volatile so it may be possible for us to observe the changes
comment|// to these two values in a different order... which I think is why
comment|// we need to check both.  Clear up this craziness either by making
comment|// values volatile or proving that it doesn't need to be for some other
comment|// reason.
if|if
condition|(
name|isDone
argument_list|()
operator|||
name|localValues
operator|==
literal|null
condition|)
block|{
comment|// Some other future failed or has been cancelled, causing this one to
comment|// also be cancelled or have an exception set. This should only happen
comment|// if allMustSucceed is true or if the output itself has been
comment|// cancelled.
name|checkState
argument_list|(
name|allMustSucceed
operator|||
name|isCancelled
argument_list|()
argument_list|,
literal|"Future was done before all dependencies completed"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|checkState
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|,
literal|"Tried to set value from future which is not done"
argument_list|)
expr_stmt|;
name|V
name|returnValue
init|=
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
decl_stmt|;
if|if
condition|(
name|localValues
operator|!=
literal|null
condition|)
block|{
name|localValues
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|Optional
operator|.
name|fromNullable
argument_list|(
name|returnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
if|if
condition|(
name|allMustSucceed
condition|)
block|{
comment|// Set ourselves as cancelled. Let the input futures keep running
comment|// as some of them may be used elsewhere.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|setExceptionAndMaybeLog
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|setExceptionAndMaybeLog
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|int
name|newRemaining
init|=
name|remaining
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|newRemaining
operator|>=
literal|0
argument_list|,
literal|"Less than 0 remaining futures"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRemaining
operator|==
literal|0
condition|)
block|{
name|FutureCombiner
argument_list|<
name|V
argument_list|,
name|C
argument_list|>
name|localCombiner
init|=
name|combiner
decl_stmt|;
if|if
condition|(
name|localCombiner
operator|!=
literal|null
operator|&&
name|localValues
operator|!=
literal|null
condition|)
block|{
name|set
argument_list|(
name|localCombiner
operator|.
name|combine
argument_list|(
name|localValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkState
argument_list|(
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/** Used for {@link #allAsList} and {@link #successfulAsList}. */
end_comment

begin_function
DECL|method|listFuture ( ImmutableList<ListenableFuture<? extends V>> futures, boolean allMustSucceed, Executor listenerExecutor)
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|listFuture
parameter_list|(
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|,
name|boolean
name|allMustSucceed
parameter_list|,
name|Executor
name|listenerExecutor
parameter_list|)
block|{
return|return
operator|new
name|CombinedFuture
argument_list|<
name|V
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|(
name|futures
argument_list|,
name|allMustSucceed
argument_list|,
name|listenerExecutor
argument_list|,
operator|new
name|FutureCombiner
argument_list|<
name|V
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|combine
parameter_list|(
name|List
argument_list|<
name|Optional
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Optional
argument_list|<
name|V
argument_list|>
name|element
range|:
name|values
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|element
operator|!=
literal|null
condition|?
name|element
operator|.
name|orNull
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * A checked future that uses a function to map from exceptions to the    * appropriate checked type.    */
end_comment

begin_class
DECL|class|MappingCheckedFuture
specifier|private
specifier|static
class|class
name|MappingCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|AbstractCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|mapper
specifier|final
name|Function
argument_list|<
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
decl_stmt|;
DECL|method|MappingCheckedFuture (ListenableFuture<V> delegate, Function<Exception, X> mapper)
name|MappingCheckedFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|,
name|Function
argument_list|<
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|checkNotNull
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mapException (Exception e)
specifier|protected
name|X
name|mapException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|mapper
operator|.
name|apply
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

