begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Platform
operator|.
name|isInstanceOfThrowableClass
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
operator|.
name|getUninterruptibly
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckReturnValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Static utility methods pertaining to the {@link Future} interface.  *  *<p>Many of these methods use the {@link ListenableFuture} API; consult the  * Guava User Guide article on<a href=  * "http://code.google.com/p/guava-libraries/wiki/ListenableFutureExplained">  * {@code ListenableFuture}</a>.  *  * @author Kevin Bourrillion  * @author Nishant Thakkar  * @author Sven Mawson  * @since 1.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|Futures
specifier|public
specifier|final
class|class
name|Futures
extends|extends
name|GwtFuturesCatchingSpecialization
block|{
comment|// A note on memory visibility.
comment|// Many of the utilities in this class (transform, withFallback, withTimeout, asList, combine)
comment|// have two requirements that significantly complicate their design.
comment|// 1. Cancellation should propagate from the returned future to the input future(s).
comment|// 2. The returned futures shouldn't unnecessarily 'pin' their inputs after completion.
comment|//
comment|// A consequence of these these requirements is that the delegate futures cannot be stored in
comment|// final fields.
comment|//
comment|// For simplicity the rest of this description will discuss Futures.withFallback since it is the
comment|// simplest instance, though very similar descriptions apply to many other classes in this file.
comment|//
comment|// In the constructor of FutureFallback, the delegate future is assigned to a field 'running'.
comment|// That field is non-final and non-volatile.  There are 2 places where the 'running' field is read
comment|// and where we will have to consider visibility of the write operation in the constructor.
comment|//
comment|// 1. In the listener that performs the callback.  In this case it is fine since running is
comment|//    assigned prior to calling addListener, and addListener happens-before any invocation of the
comment|//    listener. Notably, this means that 'volatile' is unnecessary to make 'running' visible to
comment|//    the listener.
comment|//
comment|// 2. In cancel() where we propagate cancellation to the input.  In this case it is _not_ fine.
comment|//    There is currently nothing that enforces that the write to running in the constructor is
comment|//    visible to cancel().  This is because there is no happens before edge between the write and
comment|//    a (hypothetical) unsafe read by our caller. Note: adding 'volatile' does not fix this issue,
comment|//    it would just add an edge such that if cancel() observed non-null, then it would also
comment|//    definitely observe all earlier writes, but we still have no guarantee that cancel() would
comment|//    see the inital write (just stronger guarantees if it does).
comment|//
comment|// See: http://cs.oswego.edu/pipermail/concurrency-interest/2015-January/013800.html
comment|// For a (long) discussion about this specific issue and the general futility of life.
comment|//
comment|// For the time being we are OK with the problem discussed above since it requires a caller to
comment|// introduce a very specific kind of data-race.  And given the other operations performed by these
comment|// methods that involve volatile read/write operations, in practice there is no issue.  Also, the
comment|// way in such a visibility issue would surface is most likely as a failure of cancel() to
comment|// propagate to the input.  Cancellation propagation is fundamentally racy so this is fine.
comment|//
comment|// Future versions of the JMM may revise safe construction semantics in such a way that we can
comment|// safely publish these objects and we won't need this whole discussion.
comment|// TODO(user,lukes): consider adding volatile to all these fields since in current known JVMs
comment|// that should resolve the issue.  This comes at the cost of adding more write barriers to the
comment|// implementations.
DECL|method|Futures ()
specifier|private
name|Futures
parameter_list|()
block|{}
comment|/**    * Creates a {@link CheckedFuture} out of a normal {@link ListenableFuture}    * and a {@link Function} that maps from {@link Exception} instances into the    * appropriate checked type.    *    *<p>The given mapping function will be applied to an    * {@link InterruptedException}, a {@link CancellationException}, or an    * {@link ExecutionException}.    * See {@link Future#get()} for details on the exceptions thrown.    *    * @since 9.0 (source-compatible since 1.0)    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|makeChecked ( ListenableFuture<V> future, Function<? super Exception, X> mapper)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
name|makeChecked
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|MappingCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|future
argument_list|)
argument_list|,
name|mapper
argument_list|)
return|;
block|}
DECL|class|ImmediateFuture
specifier|private
specifier|abstract
specifier|static
class|class
name|ImmediateFuture
parameter_list|<
name|V
parameter_list|>
implements|implements
name|ListenableFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ImmediateFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|addListener (Runnable listener, Executor executor)
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|listener
argument_list|,
literal|"Runnable was null."
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"Executor was null."
argument_list|)
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// ListenableFuture's contract is that it will not throw unchecked
comment|// exceptions, so log the bad runnable and/or executor and swallow it.
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RuntimeException while executing runnable "
operator|+
name|listener
operator|+
literal|" with executor "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
specifier|abstract
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
function_decl|;
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ImmediateSuccessfulFuture
specifier|private
specifier|static
class|class
name|ImmediateSuccessfulFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|value
annotation|@
name|Nullable
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|ImmediateSuccessfulFuture (@ullable V value)
name|ImmediateSuccessfulFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|class|ImmediateSuccessfulCheckedFuture
specifier|private
specifier|static
class|class
name|ImmediateSuccessfulCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|value
annotation|@
name|Nullable
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|method|ImmediateSuccessfulCheckedFuture (@ullable V value)
name|ImmediateSuccessfulCheckedFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|checkedGet ()
specifier|public
name|V
name|checkedGet
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|checkedGet (long timeout, TimeUnit unit)
specifier|public
name|V
name|checkedGet
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
DECL|class|ImmediateFailedFuture
specifier|private
specifier|static
class|class
name|ImmediateFailedFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|thrown
specifier|private
specifier|final
name|Throwable
name|thrown
decl_stmt|;
DECL|method|ImmediateFailedFuture (Throwable thrown)
name|ImmediateFailedFuture
parameter_list|(
name|Throwable
name|thrown
parameter_list|)
block|{
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|class|ImmediateCancelledFuture
specifier|private
specifier|static
class|class
name|ImmediateCancelledFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|thrown
specifier|private
specifier|final
name|CancellationException
name|thrown
decl_stmt|;
DECL|method|ImmediateCancelledFuture ()
name|ImmediateCancelledFuture
parameter_list|()
block|{
name|this
operator|.
name|thrown
operator|=
operator|new
name|CancellationException
argument_list|(
literal|"Immediate cancelled future."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
throw|throw
name|AbstractFuture
operator|.
name|cancellationExceptionWithCause
argument_list|(
literal|"Task was cancelled."
argument_list|,
name|thrown
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|class|ImmediateFailedCheckedFuture
specifier|private
specifier|static
class|class
name|ImmediateFailedCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ImmediateFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|thrown
specifier|private
specifier|final
name|X
name|thrown
decl_stmt|;
DECL|method|ImmediateFailedCheckedFuture (X thrown)
name|ImmediateFailedCheckedFuture
parameter_list|(
name|X
name|thrown
parameter_list|)
block|{
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|checkedGet ()
specifier|public
name|V
name|checkedGet
parameter_list|()
throws|throws
name|X
block|{
throw|throw
name|thrown
throw|;
block|}
annotation|@
name|Override
DECL|method|checkedGet (long timeout, TimeUnit unit)
specifier|public
name|V
name|checkedGet
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|X
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
throw|throw
name|thrown
throw|;
block|}
block|}
comment|/**    * Creates a {@code ListenableFuture} which has its value set immediately upon    * construction. The getters just return the value. This {@code Future} can't    * be canceled or timed out and its {@code isDone()} method always returns    * {@code true}.    */
annotation|@
name|CheckReturnValue
DECL|method|immediateFuture (@ullable V value)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmediateSuccessfulFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code CheckedFuture} which has its value set immediately upon    * construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()}    * method always returns {@code true}. Calling {@code get()} or {@code    * checkedGet()} will immediately return the provided value.    */
annotation|@
name|CheckReturnValue
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
DECL|method|immediateCheckedFuture (@ullable V value)
name|immediateCheckedFuture
parameter_list|(
annotation|@
name|Nullable
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmediateSuccessfulCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code ListenableFuture} which has an exception set immediately    * upon construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()}    * method always returns {@code true}. Calling {@code get()} will immediately    * throw the provided {@code Throwable} wrapped in an {@code    * ExecutionException}.    */
annotation|@
name|CheckReturnValue
DECL|method|immediateFailedFuture ( Throwable throwable)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateFailedFuture
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmediateFailedFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|throwable
argument_list|)
return|;
block|}
comment|/**    * Creates a {@code ListenableFuture} which is cancelled immediately upon    * construction, so that {@code isCancelled()} always returns {@code true}.    *    * @since 14.0    */
annotation|@
name|CheckReturnValue
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|immediateCancelledFuture ()
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|immediateCancelledFuture
parameter_list|()
block|{
return|return
operator|new
name|ImmediateCancelledFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a {@code CheckedFuture} which has an exception set immediately upon    * construction.    *    *<p>The returned {@code Future} can't be cancelled, and its {@code isDone()}    * method always returns {@code true}. Calling {@code get()} will immediately    * throw the provided {@code Exception} wrapped in an {@code    * ExecutionException}, and calling {@code checkedGet()} will throw the    * provided exception itself.    */
annotation|@
name|CheckReturnValue
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
DECL|method|immediateFailedCheckedFuture (X exception)
name|immediateFailedCheckedFuture
parameter_list|(
name|X
name|exception
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmediateFailedCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|exception
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary    * {@code input} or, if the primary input fails, from the {@code Future}    * provided by the {@code fallback}. {@link FutureFallback#create} is not    * invoked until the primary input has failed, so if the primary input    * succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of    * the output {@code Future}.    *    *<p>Below is an example of a fallback that returns a default value if an    * exception occurs:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           // Returning "0" as the default for the counter when the    *           // exception happens.    *           return immediateFuture(0);    *         }    *       });}</pre>    *    *<p>The fallback can also choose to propagate the original exception when    * desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           if (t instanceof TimeoutException) {    *             return immediateFuture(0);    *           }    *           return immediateFailedFuture(t);    *         }    *       });}</pre>    *    *<p>Note: If the derived {@code Future} is slow or heavyweight to create    * (whether the {@code Future} itself is slow or heavyweight to complete is    * irrelevant), consider {@linkplain #withFallback(ListenableFuture,    * FutureFallback, Executor) supplying an executor}. If you do not supply an    * executor, {@code withFallback} will use a    * {@linkplain MoreExecutors#directExecutor direct executor}, which carries    * some caveats for heavier operations. For example, the call to {@code    * fallback.create} may run on an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code withFallback}    * is called, {@code withFallback} will call {@code fallback.create} inline.    *<li>If the input {@code Future} is not yet done, {@code withFallback} will    * schedule {@code fallback.create} to be run by the thread that completes    * the input {@code Future}, which may be an internal system thread such as    * an RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes {@code    * fallback.create}, all other registered but unexecuted listeners are    * prevented from running during its execution, even if those listeners are    * to run in other executors.    *    * @param input the primary input {@code Future}    * @param fallback the {@link FutureFallback} implementation to be called if    *     {@code input} fails    * @since 14.0    * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,    *     AsyncFunction) catchingAsync(input, Throwable.class,    *     fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code    *     Throwable.class} with the specific type you want to handle. This method    *     will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
DECL|method|withFallback ( ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withFallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|withFallback
argument_list|(
name|input
argument_list|,
name|fallback
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary    * {@code input} or, if the primary input fails, from the {@code Future}    * provided by the {@code fallback}. {@link FutureFallback#create} is not    * invoked until the primary input has failed, so if the primary input    * succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of    * the output {@code Future}.    *    *<p>Below is an example of a fallback that returns a default value if an    * exception occurs:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           // Returning "0" as the default for the counter when the    *           // exception happens.    *           return immediateFuture(0);    *         }    *       }, directExecutor());}</pre>    *    *<p>The fallback can also choose to propagate the original exception when    * desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.withFallback(    *       fetchCounterFuture, new FutureFallback<Integer>() {    *         public ListenableFuture<Integer> create(Throwable t) {    *           if (t instanceof TimeoutException) {    *             return immediateFuture(0);    *           }    *           return immediateFailedFuture(t);    *         }    *       }, directExecutor());}</pre>    *    *<p>When the execution of {@code fallback.create} is fast and lightweight    * (though the {@code Future} it returns need not meet these criteria),    * consider {@linkplain #withFallback(ListenableFuture, FutureFallback)    * omitting the executor} or explicitly specifying {@code    * directExecutor}. However, be aware of the caveats documented in the    * link above.    *    * @param input the primary input {@code Future}    * @param fallback the {@link FutureFallback} implementation to be called if    *     {@code input} fails    * @param executor the executor that runs {@code fallback} if {@code input}    *     fails    * @since 14.0    * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,    *     AsyncFunction, Executor) catchingAsync(input, Throwable.class,    *     fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing    *     {@code Throwable.class} with the specific type you want to handle. This method    *     will be removed in Guava release 20.0.    */
annotation|@
name|Deprecated
DECL|method|withFallback ( ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withFallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|FutureFallback
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|catchingAsync
argument_list|(
name|input
argument_list|,
name|Throwable
operator|.
name|class
argument_list|,
name|asAsyncFunction
argument_list|(
name|fallback
argument_list|)
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so    * if the primary input succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of the output {@code    * Future}.    *    *<p>Usage example:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(    *       fetchCounterFuture, FetchException.class,    *       new Function<FetchException, Integer>() {    *         public Integer apply(FetchException e) {    *           return 0;    *         }    *       });}</pre>    *    *<p>Note: If the derived {@code fallback} is slow or heavyweight, consider {@linkplain    * #catching(ListenableFuture, Class, Function, Executor) supplying an executor}. If you do not    * supply an executor, {@code catching} will use a {@linkplain MoreExecutors#directExecutor direct    * executor}, which carries some caveats for heavier operations. For example, the call to {@code    * fallback.apply} may run on an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code catching} is called, {@code    * catching} will call {@code fallback.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code catching} will schedule {@code    * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be    * an internal system thread such as an RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes {@code fallback.apply}, all other    * registered but unexecuted listeners are prevented from running during its execution, even if    * those listeners are to run in other executors.    *    * @param input the primary input {@code Future}    * @param fallback the {@link Function} implementation to be called if {@code input} fails with    *     the expected exception type    * @param exceptionType the exception type that triggers use of {@code fallback}    * @since 19.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"AVAILABLE but requires exceptionType to be Throwable.class"
argument_list|)
DECL|method|catching ( ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catching
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|catching
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so    * if the primary input succeeds, it is never invoked. If, during the invocation of {@code    * fallback}, an exception is thrown, this exception is used as the result of the output {@code    * Future}.    *    *<p>Usage example:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catching(    *       fetchCounterFuture, FetchException.class,    *       new Function<FetchException, Integer>() {    *         public Integer apply(FetchException e) {    *           return 0;    *         }    *       }, directExecutor());}</pre>    *    *<p>When the execution of {@code fallback.apply} is fast and lightweight, consider {@linkplain    * #catching(ListenableFuture, Class, Function) omitting the executor} or explicitly specifying    * {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the caveats    * documented in the link above.    *    * @param input the primary input {@code Future}    * @param fallback the {@link Function} implementation to be called if {@code input} fails with    *     the expected exception type    * @param exceptionType the exception type that triggers use of {@code fallback}    * @param executor the executor that runs {@code fallback} if {@code input} fails    * @since 19.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"AVAILABLE but requires exceptionType to be Throwable.class"
argument_list|)
DECL|method|catching ( ListenableFuture<? extends V> input, Class<X> exceptionType, Function<? super X, ? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catching
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|catchingAsync
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|asAsyncFunction
argument_list|(
name|fallback
argument_list|)
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has    * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of    * {@code fallback}, an exception is thrown, this exception is used as the result of the output    * {@code Future}.    *    *<p>Usage examples:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e) {    *           return immediateFuture(0);    *         }    *       });}</pre>    *    *<p>The fallback can also choose to propagate the original exception when desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e)    *             throws FetchException {    *           if (omitDataOnFetchFailure) {    *             return immediateFuture(0);    *           }    *           throw e;    *         }    *       });}</pre>    *    *<p>Note: If the derived {@code fallback} is slow or heavyweight in<i>creating</i> its {@code    * Future} (whether that derived {@code Future} itself is slow or heavyweight in<i>completing</i>    * is irrelevant), consider {@linkplain #catchingAsync(ListenableFuture, Class, AsyncFunction,    * Executor) supplying an executor}. If you do not supply an executor, {@code catchingAsync} will    * use a {@linkplain MoreExecutors#directExecutor direct executor}, which carries some caveats for    * heavier operations. For example, the call to {@code fallback.apply} may run on an unpredictable    * or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code catchingAsync} is called, {@code    * catchingAsync} will call {@code fallback.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code catchingAsync} will schedule {@code    * fallback.apply} to be run by the thread that completes the input {@code Future}, which may be    * an internal system thread such as an RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes {@code fallback.apply}, all other    * registered but unexecuted listeners are prevented from running during its execution, even if    * those listeners are to run in other executors.    *    * @param input the primary input {@code Future}    * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails    *     with the expected exception type    * @param exceptionType the exception type that triggers use of {@code fallback}    * @since 19.0 (similar functionality in 14.0 as {@code withFallback})    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"AVAILABLE but requires exceptionType to be Throwable.class"
argument_list|)
DECL|method|catchingAsync ( ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catchingAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
return|return
name|catchingAsync
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the    * primary input fails with the given {@code exceptionType}, from the result provided by the    * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has    * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of    * {@code fallback}, an exception is thrown, this exception is used as the result of the output    * {@code Future}.    *    *<p>Usage examples:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter in case an exception happens when    *   // processing the RPC to fetch counters.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e) {    *           return immediateFuture(0);    *         }    *       }, directExecutor());}</pre>    *    *<p>The fallback can also choose to propagate the original exception when desired:    *    *<pre>   {@code    *   ListenableFuture<Integer> fetchCounterFuture = ...;    *    *   // Falling back to a zero counter only in case the exception was a    *   // TimeoutException.    *   ListenableFuture<Integer> faultTolerantFuture = Futures.catchingAsync(    *       fetchCounterFuture, FetchException.class,    *       new AsyncFunction<FetchException, Integer>() {    *         public ListenableFuture<Integer> apply(FetchException e)    *             throws FetchException {    *           if (omitDataOnFetchFailure) {    *             return immediateFuture(0);    *           }    *           throw e;    *         }    *       }, directExecutor());}</pre>    *    *<p>When the execution of {@code fallback.apply} is fast and lightweight (though the {@code    * Future} it returns need not meet these criteria), consider {@linkplain    * #catchingAsync(ListenableFuture, Class, AsyncFunction) omitting the executor} or explicitly    * specifying {@link MoreExecutors#directExecutor() directExecutor()}. However, be aware of the    * caveats documented in the link above.    *    * @param input the primary input {@code Future}    * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails    *     with the expected exception type    * @param exceptionType the exception type that triggers use of {@code fallback}    * @param executor the executor that runs {@code fallback} if {@code input} fails    * @since 19.0 (similar functionality in 14.0 as {@code withFallback})    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"AVAILABLE but requires exceptionType to be Throwable.class"
argument_list|)
DECL|method|catchingAsync ( ListenableFuture<? extends V> input, Class<X> exceptionType, AsyncFunction<? super X, ? extends V> fallback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|catchingAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
operator|new
name|CatchingFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
argument_list|(
name|input
argument_list|,
name|exceptionType
argument_list|,
name|fallback
argument_list|,
name|executor
argument_list|)
return|;
block|}
DECL|method|asAsyncFunction (final FutureFallback<V> fallback)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|AsyncFunction
argument_list|<
name|Throwable
argument_list|,
name|V
argument_list|>
name|asAsyncFunction
parameter_list|(
specifier|final
name|FutureFallback
argument_list|<
name|V
argument_list|>
name|fallback
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|fallback
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncFunction
argument_list|<
name|Throwable
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|apply
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|checkNotNull
argument_list|(
name|fallback
operator|.
name|create
argument_list|(
name|t
argument_list|)
argument_list|,
literal|"FutureFallback.create returned null instead of a "
operator|+
literal|"Future. Did you mean to return immediateFuture(null)?"
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|class|CatchingFuture
specifier|static
class|class
name|CatchingFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Throwable
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|running
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|running
decl_stmt|;
DECL|method|CatchingFuture (ListenableFuture<? extends V> input, final Class<X> exceptionType, final AsyncFunction<? super X, ? extends V> fallback, final Executor executor)
name|CatchingFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|input
parameter_list|,
specifier|final
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionType
parameter_list|,
specifier|final
name|AsyncFunction
argument_list|<
name|?
super|super
name|X
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|fallback
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|exceptionType
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|fallback
argument_list|)
expr_stmt|;
name|running
operator|=
name|input
expr_stmt|;
name|input
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|localRunning
init|=
name|running
decl_stmt|;
name|running
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|localRunning
operator|==
literal|null
operator||
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
name|Throwable
name|throwable
decl_stmt|;
try|try
block|{
name|set
argument_list|(
name|getUninterruptibly
argument_list|(
name|localRunning
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|throwable
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// this includes cancellation exception
name|throwable
operator|=
name|e
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|isInstanceOfThrowableClass
argument_list|(
name|throwable
argument_list|,
name|exceptionType
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// verified safe by isInstance
name|X
name|castThrowable
init|=
operator|(
name|X
operator|)
name|throwable
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|replacement
init|=
name|fallback
operator|.
name|apply
argument_list|(
name|castThrowable
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|replacement
argument_list|,
literal|"AsyncFunction.apply returned null instead of a Future. "
operator|+
literal|"Did you mean to return immediateFuture(null)?"
argument_list|)
expr_stmt|;
name|setFuture
argument_list|(
name|replacement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setException
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|current
init|=
name|this
operator|.
name|running
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
condition|)
block|{
comment|// May be null if the original future completed, but we were cancelled while the fallback
comment|// is still pending.  This is fine because if the original future completed, then there is
comment|// nothing to cancel and if the fallback is pending, cancellation would be handled by
comment|// super.cancel().
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns a future that delegates to another but will finish early (via a    * {@link TimeoutException} wrapped in an {@link ExecutionException}) if the    * specified duration expires.    *    *<p>The delegate future is interrupted and cancelled if it times out.    *    * @param delegate The future to delegate to.    * @param time when to timeout the future    * @param unit the time unit of the time parameter    * @param scheduledExecutor The executor service to enforce the timeout.    *    * @since 19.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.concurrent.ScheduledExecutorService"
argument_list|)
DECL|method|withTimeout (ListenableFuture<V> delegate, long time, TimeUnit unit, ScheduledExecutorService scheduledExecutor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|withTimeout
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|ScheduledExecutorService
name|scheduledExecutor
parameter_list|)
block|{
name|TimeoutFuture
argument_list|<
name|V
argument_list|>
name|result
init|=
operator|new
name|TimeoutFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|TimeoutFuture
operator|.
name|Fire
argument_list|<
name|V
argument_list|>
name|fire
init|=
operator|new
name|TimeoutFuture
operator|.
name|Fire
argument_list|<
name|V
argument_list|>
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|result
operator|.
name|timer
operator|=
name|scheduledExecutor
operator|.
name|schedule
argument_list|(
name|fire
argument_list|,
name|time
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|addListener
argument_list|(
name|fire
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Future that delegates to another but will finish early (via a {@link    * TimeoutException} wrapped in an {@link ExecutionException}) if the    * specified duration expires.    * The delegate future is interrupted and cancelled if it times out.    */
DECL|class|TimeoutFuture
specifier|private
specifier|static
specifier|final
class|class
name|TimeoutFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|V
argument_list|>
block|{
comment|// Memory visibility of these fields.
comment|// There are two cases to consider.
comment|// 1. visibility of the writes to these fields to Fire.run
comment|//    The initial write to delegateRef is made definitely visible via the semantics of
comment|//    addListener/SES.schedule.  The later racy write in cancel() is not guaranteed to be
comment|//    observed, however that is fine since the correctness is based on the atomic state in
comment|//    our base class.
comment|//    The initial write to timer is never definitely visible to Fire.run since it is assigned
comment|//    after SES.schedule is called. Therefore Fire.run has to check for null.  However, it
comment|//    should be visible if Fire.run is called by delegate.addListener since addListener is
comment|//    called after the assignment to timer, and importantly this is the main situation in which
comment|//    we need to be able to see the write.
comment|// 2. visibility of the writes to cancel
comment|//    Since these fields are non-final that means that TimeoutFuture is not being 'safely
comment|//    published', thus a motivated caller may be able to expose the reference to another thread
comment|//    that would then call cancel() and be unable to cancel the delegate.
comment|//    There are a number of ways to solve this, none of which are very pretty, and it is
comment|//    currently believed to be a purely theoretical problem (since the other actions should
comment|//    supply sufficient write-barriers).
DECL|field|delegateRef
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegateRef
decl_stmt|;
DECL|field|timer
name|Future
argument_list|<
name|?
argument_list|>
name|timer
decl_stmt|;
DECL|method|TimeoutFuture (ListenableFuture<V> delegate)
name|TimeoutFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegateRef
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
comment|/** A runnable that is called when the delegate or the timer completes. */
DECL|class|Fire
specifier|private
specifier|static
specifier|final
class|class
name|Fire
parameter_list|<
name|V
parameter_list|>
implements|implements
name|Runnable
block|{
comment|// Holding a strong reference to the enclosing class (as we would do if
comment|// this weren't a static nested class) could cause retention of the
comment|// delegate's return value (in AbstractFuture) for the duration of the
comment|// timeout in the case of successful completion. We clear this on run.
DECL|field|timeoutFutureRef
name|TimeoutFuture
argument_list|<
name|V
argument_list|>
name|timeoutFutureRef
decl_stmt|;
DECL|method|Fire (TimeoutFuture<V> timeoutFuture)
name|Fire
parameter_list|(
name|TimeoutFuture
argument_list|<
name|V
argument_list|>
name|timeoutFuture
parameter_list|)
block|{
name|this
operator|.
name|timeoutFutureRef
operator|=
name|timeoutFuture
expr_stmt|;
block|}
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// If either of these reads return null then we must be after a successful cancel
comment|// or another call to this method.
name|TimeoutFuture
argument_list|<
name|V
argument_list|>
name|timeoutFuture
init|=
name|timeoutFutureRef
decl_stmt|;
if|if
condition|(
name|timeoutFuture
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
init|=
name|timeoutFuture
operator|.
name|delegateRef
decl_stmt|;
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Unpin all the memory before attempting to complete.  Not only does this save us from
comment|// wrapping everything in a finally block, it also ensures that if delegate.cancel() (in the
comment|// else block), causes delegate to complete, then it won't reentrantly call back in and
comment|// cause TimeoutFuture to finish with cancellation.
name|timeoutFutureRef
operator|=
literal|null
expr_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|timer
init|=
name|timeoutFuture
operator|.
name|timer
decl_stmt|;
name|timeoutFuture
operator|.
name|delegateRef
operator|=
literal|null
expr_stmt|;
name|timeoutFuture
operator|.
name|timer
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|delegate
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|timeoutFuture
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
comment|// Try to cancel the timer as an optimization
comment|// timer may be null if this call to run was by the timer task since there is no
comment|// happens-before edge between the assignment to timer and an execution of the timer
comment|// task.
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Some users, for better or worse, rely on the delegate definitely being cancelled prior
comment|// to the timeout future completing.  We wrap in a try...finally... for the off chance
comment|// that cancelling the delegate causes an Error to be thrown from a listener on the
comment|// delegate.
try|try
block|{
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// TODO(lukes): this stack trace is particularly useless (all it does is point at the
comment|// scheduledexecutorservice thread), consider eliminating it altogether?
name|timeoutFuture
operator|.
name|setException
argument_list|(
operator|new
name|TimeoutException
argument_list|(
literal|"Future timed out: "
operator|+
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|cancel (boolean mayInterruptIfRunning)
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|localTimer
init|=
name|timer
decl_stmt|;
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
init|=
name|delegateRef
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
condition|)
block|{
comment|// Either can be null if super.cancel() races with an execution of Fire.run, but it doesn't
comment|// matter because either 1. the delegate is already done (so there is no point in
comment|// propagating cancellation and Fire.run will cancel the timer. or 2. the timeout occurred
comment|// and Fire.run will cancel the delegate
comment|// Technically this is also possible in the 'unsafe publishing' case described above.
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
comment|// Unpin and prevent Fire from doing anything if delegate.cancel finishes the delegate.
name|delegateRef
operator|=
literal|null
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localTimer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|=
literal|null
expr_stmt|;
name|localTimer
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously    * derived from the result of the given {@code Future}. More precisely, the    * returned {@code Future} takes its result from a {@code Future} produced by    * applying the given {@code AsyncFunction} to the result of the original    * {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transform(rowKeyFuture, queryFunction);}</pre>    *    *<p>Note: If the derived {@code Future} is slow or heavyweight to create    * (whether the {@code Future} itself is slow or heavyweight to complete is    * irrelevant), consider {@linkplain #transform(ListenableFuture,    * AsyncFunction, Executor) supplying an executor}. If you do not supply an    * executor, {@code transform} will use a    * {@linkplain MoreExecutors#directExecutor direct executor}, which carries    * some caveats for heavier operations. For example, the call to {@code    * function.apply} may run on an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code transform} is    * called, {@code transform} will call {@code function.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code transform} will    * schedule {@code function.apply} to be run by the thread that completes the    * input {@code Future}, which may be an internal system thread such as an    * RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes {@code    * function.apply}, all other registered but unexecuted listeners are    * prevented from running during its execution, even if those listeners are    * to run in other executors.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future and that of the future returned by the    * function. That is, if the returned {@code Future} is cancelled, it will    * attempt to cancel the other two, and if either of the other two is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future    *     to the result of the output future    * @return A future that holds result of the function (if the input succeeded)    *     or the original input's failure (if not)    * @since 11.0    * @deprecated These {@code AsyncFunction} overloads of {@code transform} are    *     being renamed to {@code transformAsync}. (The {@code Function}    *     overloads are keeping the "transform" name.) This method will be removed in Guava release    *     20.0.    */
annotation|@
name|Deprecated
DECL|method|transform (ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|transformAsync
argument_list|(
name|input
argument_list|,
name|function
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously    * derived from the result of the given {@code Future}. More precisely, the    * returned {@code Future} takes its result from a {@code Future} produced by    * applying the given {@code AsyncFunction} to the result of the original    * {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transform(rowKeyFuture, queryFunction, executor);}</pre>    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future and that of the future returned by the    * chain function. That is, if the returned {@code Future} is cancelled, it    * will attempt to cancel the other two, and if either of the other two is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    *<p>When the execution of {@code function.apply} is fast and lightweight    * (though the {@code Future} it returns need not meet these criteria),    * consider {@linkplain #transform(ListenableFuture, AsyncFunction) omitting    * the executor} or explicitly specifying {@code directExecutor}.    * However, be aware of the caveats documented in the link above.    *    * @param input The future to transform    * @param function A function to transform the result of the input future    *     to the result of the output future    * @param executor Executor to run the function in.    * @return A future that holds result of the function (if the input succeeded)    *     or the original input's failure (if not)    * @since 11.0    * @deprecated These {@code AsyncFunction} overloads of {@code transform} are    *     being renamed to {@code transformAsync}. (The {@code Function}    *     overloads are keeping the "transform" name.) This method will be removed in Guava release    *     20.0.    */
annotation|@
name|Deprecated
DECL|method|transform (ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|transformAsync
argument_list|(
name|input
argument_list|,
name|function
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously derived from the result    * of the given {@code Future}. More precisely, the returned {@code Future} takes its result from    * a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the    * original {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transformAsync(rowKeyFuture, queryFunction);}</pre>    *    *<p>Note: If the derived {@code Future} is slow or heavyweight to create (whether the {@code    * Future} itself is slow or heavyweight to complete is irrelevant), consider {@linkplain    * #transformAsync(ListenableFuture, AsyncFunction, Executor) supplying an executor}. If you do    * not supply an executor, {@code transformAsync} will use a {@linkplain    * MoreExecutors#directExecutor direct executor}, which carries some caveats for heavier    * operations. For example, the call to {@code function.apply} may run on an unpredictable or    * undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code transformAsync} is called, {@code    * transformAsync} will call {@code function.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code transformAsync} will schedule {@code    * function.apply} to be run by the thread that completes the input {@code Future}, which may be    * an internal system thread such as an RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes {@code function.apply}, all other    * registered but unexecuted listeners are prevented from running during its execution, even if    * those listeners are to run in other executors.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future and that of the future returned by the function. That is, if the returned {@code    * Future} is cancelled, it will attempt to cancel the other two, and if either of the other two    * is cancelled, the returned {@code Future} will receive a callback in which it will attempt to    * cancel itself.    *    * @param input The future to transform    * @param function A function to transform the result of the input future to the result of the    *     output future    * @return A future that holds result of the function (if the input succeeded) or the original    *     input's failure (if not)    * @since 19.0 (in 11.0 as {@code transform})    */
DECL|method|transformAsync ( ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transformAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
name|output
init|=
operator|new
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
argument_list|(
name|function
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|addListener
argument_list|(
name|output
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is asynchronously derived from the result    * of the given {@code Future}. More precisely, the returned {@code Future} takes its result from    * a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the    * original {@code Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<RowKey> rowKeyFuture = indexService.lookUp(query);    *   AsyncFunction<RowKey, QueryResult> queryFunction =    *       new AsyncFunction<RowKey, QueryResult>() {    *         public ListenableFuture<QueryResult> apply(RowKey rowKey) {    *           return dataService.read(rowKey);    *         }    *       };    *   ListenableFuture<QueryResult> queryFuture =    *       transformAsync(rowKeyFuture, queryFunction, executor);}</pre>    *    *<p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the    * input future and that of the future returned by the chain function. That is, if the returned    * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the    * other two is cancelled, the returned {@code Future} will receive a callback in which it will    * attempt to cancel itself.    *    *<p>When the execution of {@code function.apply} is fast and lightweight (though the {@code    * Future} it returns need not meet these criteria), consider {@linkplain    * #transformAsync(ListenableFuture, AsyncFunction) omitting the executor} or explicitly    * specifying {@code directExecutor}. However, be aware of the caveats documented in the link    * above.    *    * @param input The future to transform    * @param function A function to transform the result of the input future to the result of the    *     output future    * @param executor Executor to run the function in.    * @return A future that holds result of the function (if the input succeeded) or the original    *     input's failure (if not)    * @since 19.0 (in 11.0 as {@code transform})    */
DECL|method|transformAsync (ListenableFuture<I> input, AsyncFunction<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transformAsync
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
name|output
init|=
operator|new
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
argument_list|(
name|function
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|addListener
argument_list|(
name|rejectionPropagatingRunnable
argument_list|(
name|output
argument_list|,
name|output
argument_list|,
name|executor
argument_list|)
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Returns a Runnable that will invoke the delegate Runnable on the delegate executor, but if the    * task is rejected, it will propagate that rejection to the output future.    */
DECL|method|rejectionPropagatingRunnable ( final AbstractFuture<?> outputFuture, final Runnable delegateTask, final Executor delegateExecutor)
specifier|private
specifier|static
name|Runnable
name|rejectionPropagatingRunnable
parameter_list|(
specifier|final
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|outputFuture
parameter_list|,
specifier|final
name|Runnable
name|delegateTask
parameter_list|,
specifier|final
name|Executor
name|delegateExecutor
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|AtomicBoolean
name|thrownFromDelegate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|delegateExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|thrownFromDelegate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|delegateTask
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|thrownFromDelegate
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// wrap exception?
name|outputFuture
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// otherwise it must have been thrown from a transitive call and the delegate runnable
comment|// should have handled it.
block|}
block|}
block|}
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of    * applying the given {@code Function} to the result of the given {@code    * Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<QueryResult> queryFuture = ...;    *   Function<QueryResult, List<Row>> rowsFunction =    *       new Function<QueryResult, List<Row>>() {    *         public List<Row> apply(QueryResult queryResult) {    *           return queryResult.getRows();    *         }    *       };    *   ListenableFuture<List<Row>> rowsFuture =    *       transform(queryFuture, rowsFunction);}</pre>    *    *<p>Note: If the transformation is slow or heavyweight, consider {@linkplain    * #transform(ListenableFuture, Function, Executor) supplying an executor}.    * If you do not supply an executor, {@code transform} will use an inline    * executor, which carries some caveats for heavier operations.  For example,    * the call to {@code function.apply} may run on an unpredictable or    * undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code transform} is    * called, {@code transform} will call {@code function.apply} inline.    *<li>If the input {@code Future} is not yet done, {@code transform} will    * schedule {@code function.apply} to be run by the thread that completes the    * input {@code Future}, which may be an internal system thread such as an    * RPC network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes {@code    * function.apply}, all other registered but unexecuted listeners are    * prevented from running during its execution, even if those listeners are    * to run in other executors.    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future. That is, if the returned {@code Future}    * is cancelled, it will attempt to cancel the input, and if the input is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    *<p>An example use of this method is to convert a serializable object    * returned from an RPC into a POJO.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future    *     to the results of the returned future.  This will be run in the thread    *     that notifies input it is complete.    * @return A future that holds result of the transformation.    * @since 9.0 (in 1.0 as {@code compose})    */
DECL|method|transform (ListenableFuture<I> input, final Function<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
name|output
init|=
operator|new
name|ChainingListenableFuture
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
argument_list|(
name|asAsyncFunction
argument_list|(
name|function
argument_list|)
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|addListener
argument_list|(
name|output
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of    * applying the given {@code Function} to the result of the given {@code    * Future}. Example:    *    *<pre>   {@code    *   ListenableFuture<QueryResult> queryFuture = ...;    *   Function<QueryResult, List<Row>> rowsFunction =    *       new Function<QueryResult, List<Row>>() {    *         public List<Row> apply(QueryResult queryResult) {    *           return queryResult.getRows();    *         }    *       };    *   ListenableFuture<List<Row>> rowsFuture =    *       transform(queryFuture, rowsFunction, executor);}</pre>    *    *<p>The returned {@code Future} attempts to keep its cancellation state in    * sync with that of the input future. That is, if the returned {@code Future}    * is cancelled, it will attempt to cancel the input, and if the input is    * cancelled, the returned {@code Future} will receive a callback in which it    * will attempt to cancel itself.    *    *<p>An example use of this method is to convert a serializable object    * returned from an RPC into a POJO.    *    *<p>When the transformation is fast and lightweight, consider {@linkplain    * #transform(ListenableFuture, Function) omitting the executor} or    * explicitly specifying {@code directExecutor}. However, be aware of the    * caveats documented in the link above.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future    *     to the results of the returned future.    * @param executor Executor to run the function in.    * @return A future that holds result of the transformation.    * @since 9.0 (in 2.0 as {@code compose})    */
DECL|method|transform (ListenableFuture<I> input, final Function<? super I, ? extends O> function, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|transform
parameter_list|(
name|ListenableFuture
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
name|transformAsync
argument_list|(
name|input
argument_list|,
name|asAsyncFunction
argument_list|(
name|function
argument_list|)
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Wraps the given function as an AsyncFunction. */
DECL|method|asAsyncFunction ( final Function<? super I, ? extends O> function)
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|AsyncFunction
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
name|asAsyncFunction
parameter_list|(
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncFunction
argument_list|<
name|I
argument_list|,
name|O
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|O
argument_list|>
name|apply
parameter_list|(
name|I
name|input
parameter_list|)
block|{
name|O
name|output
init|=
name|function
operator|.
name|apply
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|immediateFuture
argument_list|(
name|output
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Like {@link #transform(ListenableFuture, Function)} except that the    * transformation {@code function} is invoked on each call to    * {@link Future#get() get()} on the returned future.    *    *<p>The returned {@code Future} reflects the input's cancellation    * state directly, and any attempt to cancel the returned Future is likewise    * passed through to the input Future.    *    *<p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get}    * only apply the timeout to the execution of the underlying {@code Future},    *<em>not</em> to the execution of the transformation function.    *    *<p>The primary audience of this method is callers of {@code transform}    * who don't have a {@code ListenableFuture} available and    * do not mind repeated, lazy function evaluation.    *    * @param input The future to transform    * @param function A Function to transform the results of the provided future    *     to the results of the returned future.    * @return A future that returns the result of the transformation.    * @since 10.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|lazyTransform (final Future<I> input, final Function<? super I, ? extends O> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
name|Future
argument_list|<
name|O
argument_list|>
name|lazyTransform
parameter_list|(
specifier|final
name|Future
argument_list|<
name|I
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
operator|new
name|Future
argument_list|<
name|O
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|input
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|input
operator|.
name|isCancelled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|input
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|O
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|applyTransformation
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|O
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|applyTransformation
argument_list|(
name|input
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|O
name|applyTransformation
parameter_list|(
name|I
name|input
parameter_list|)
throws|throws
name|ExecutionException
block|{
try|try
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * An implementation of {@code ListenableFuture} that also implements    * {@code Runnable} so that it can be used to nest ListenableFutures.    * Once the passed-in {@code ListenableFuture} is complete, it calls the    * passed-in {@code Function} to generate the result.    *    *<p>For historical reasons, this class has a special case in its exception    * handling: If the given {@code AsyncFunction} throws an {@code    * UndeclaredThrowableException}, {@code ChainingListenableFuture} unwraps it    * and uses its<i>cause</i> as the output future's exception, rather than    * using the {@code UndeclaredThrowableException} itself as it would for other    * exception types. The reason for this is that {@code Futures.transform} used    * to require a {@code Function}, whose {@code apply} method is not allowed to    * throw checked exceptions. Nowadays, {@code Futures.transform} has an    * overload that accepts an {@code AsyncFunction}, whose {@code apply} method    *<i>is</i> allowed to throw checked exception. Users who wish to throw    * checked exceptions should use that overload instead, and<a    * href="http://code.google.com/p/guava-libraries/issues/detail?id=1548">we    * should remove the {@code UndeclaredThrowableException} special case</a>.    */
DECL|class|ChainingListenableFuture
specifier|private
specifier|static
specifier|final
class|class
name|ChainingListenableFuture
parameter_list|<
name|I
parameter_list|,
name|O
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|O
argument_list|>
implements|implements
name|Runnable
block|{
DECL|field|function
specifier|private
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
decl_stmt|;
comment|// In theory, this field might not be visible to a cancel() call in certain circumstances. For
comment|// details, see the comments on the fields of TimeoutFuture.
DECL|field|inputFuture
specifier|private
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|I
argument_list|>
name|inputFuture
decl_stmt|;
DECL|method|ChainingListenableFuture ( AsyncFunction<? super I, ? extends O> function, ListenableFuture<? extends I> inputFuture)
specifier|private
name|ChainingListenableFuture
parameter_list|(
name|AsyncFunction
argument_list|<
name|?
super|super
name|I
argument_list|,
name|?
extends|extends
name|O
argument_list|>
name|function
parameter_list|,
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|I
argument_list|>
name|inputFuture
parameter_list|)
block|{
name|this
operator|.
name|function
operator|=
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputFuture
operator|=
name|checkNotNull
argument_list|(
name|inputFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
comment|/*        * Our additional cancellation work needs to occur even if        * !mayInterruptIfRunning, so we can't move it into interruptTask().        */
if|if
condition|(
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
condition|)
block|{
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|I
argument_list|>
name|localInputFuture
init|=
name|inputFuture
decl_stmt|;
if|if
condition|(
name|localInputFuture
operator|!=
literal|null
condition|)
block|{
name|localInputFuture
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|I
name|sourceResult
decl_stmt|;
try|try
block|{
name|sourceResult
operator|=
name|getUninterruptibly
argument_list|(
name|inputFuture
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// Cancel this future and return.
comment|// At this point, inputFuture is cancelled and outputFuture doesn't
comment|// exist, so the value of mayInterruptIfRunning is irrelevant.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// Set the cause of the exception as this future's exception
name|setException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|O
argument_list|>
name|outputFuture
init|=
name|function
operator|.
name|apply
argument_list|(
name|sourceResult
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|outputFuture
argument_list|,
literal|"AsyncFunction.apply returned null instead of a Future. "
operator|+
literal|"Did you mean to return immediateFuture(null)?"
argument_list|)
expr_stmt|;
name|setFuture
argument_list|(
name|outputFuture
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
comment|// Set the cause of the exception as this future's exception
name|setException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// This exception is irrelevant in this thread, but useful for the
comment|// client
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Don't pin inputs beyond completion
name|function
operator|=
literal|null
expr_stmt|;
name|inputFuture
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a new {@code ListenableFuture} whose result is the product of    * calling {@code get()} on the {@code Future} nested within the given {@code    * Future}, effectively chaining the futures one after the other.  Example:    *    *<pre>   {@code    *   SettableFuture<ListenableFuture<String>> nested = SettableFuture.create();    *   ListenableFuture<String> dereferenced = dereference(nested);}</pre>    *    *<p>This call has the same cancellation and execution semantics as {@link    * #transform(ListenableFuture, AsyncFunction)}, in that the returned {@code    * Future} attempts to keep its cancellation state in sync with both the    * input {@code Future} and the nested {@code Future}.  The transformation    * is very lightweight and therefore takes place in the same thread (either    * the thread that called {@code dereference}, or the thread in which the    * dereferenced future completes).    *    * @param nested The nested future to transform.    * @return A future that holds result of the inner future.    * @since 13.0    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|dereference ( ListenableFuture<? extends ListenableFuture<? extends V>> nested)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|dereference
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|nested
parameter_list|)
block|{
return|return
name|transformAsync
argument_list|(
operator|(
name|ListenableFuture
operator|)
name|nested
argument_list|,
operator|(
name|AsyncFunction
operator|)
name|DEREFERENCER
argument_list|)
return|;
block|}
comment|/**    * Helper {@code Function} for {@link #dereference}.    */
DECL|field|DEREFERENCER
specifier|private
specifier|static
specifier|final
name|AsyncFunction
argument_list|<
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|DEREFERENCER
init|=
operator|new
name|AsyncFunction
argument_list|<
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its input futures, if all succeed. If any input fails, the    * returned future fails immediately.    *    *<p>The list of results is in the same order as the input list.    *    *<p>Canceling this future will attempt to cancel all the component futures,    * and if any of the provided futures fails or is canceled, this one is,    * too.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
annotation|@
name|Beta
DECL|method|allAsList ( ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|allAsList
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|true
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its input futures, if all succeed. If any input fails, the    * returned future fails immediately.    *    *<p>The list of results is in the same order as the input list.    *    *<p>Canceling this future will attempt to cancel all the component futures,    * and if any of the provided futures fails or is canceled, this one is,    * too.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
annotation|@
name|Beta
DECL|method|allAsList ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|allAsList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|true
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose result is set from the    * supplied future when it completes.  Cancelling the supplied future    * will also cancel the returned future, but cancelling the returned    * future will have no effect on the supplied future.    *    * @since 15.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|nonCancellationPropagating ( ListenableFuture<V> future)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|nonCancellationPropagating
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|)
block|{
return|return
operator|new
name|NonCancellationPropagatingFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|future
argument_list|)
return|;
block|}
comment|/**    * A wrapped future that does not propagate cancellation to its delegate.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|class|NonCancellationPropagatingFuture
specifier|private
specifier|static
specifier|final
class|class
name|NonCancellationPropagatingFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|NonCancellationPropagatingFuture (final ListenableFuture<V> delegate)
name|NonCancellationPropagatingFuture
parameter_list|(
specifier|final
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|delegate
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// This prevents cancellation from propagating because we don't assign delegate until
comment|// delegate is already done, so calling cancel() on it is a no-op.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its successful input futures. The list of results is in the    * same order as the input list, and if any of the provided futures fails or    * is canceled, its corresponding position will contain {@code null} (which is    * indistinguishable from the future having a successful value of    * {@code null}).    *    *<p>Canceling this future will attempt to cancel all the component futures.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
annotation|@
name|Beta
annotation|@
name|CheckReturnValue
DECL|method|successfulAsList ( ListenableFuture<? extends V>.... futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|successfulAsList
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
modifier|...
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|false
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code ListenableFuture} whose value is a list containing the    * values of all its successful input futures. The list of results is in the    * same order as the input list, and if any of the provided futures fails or    * is canceled, its corresponding position will contain {@code null} (which is    * indistinguishable from the future having a successful value of    * {@code null}).    *    *<p>Canceling this future will attempt to cancel all the component futures.    *    * @param futures futures to combine    * @return a future that provides a list of the results of the component    *         futures    * @since 10.0    */
annotation|@
name|Beta
annotation|@
name|CheckReturnValue
DECL|method|successfulAsList ( Iterable<? extends ListenableFuture<? extends V>> futures)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|successfulAsList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
name|listFuture
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|futures
argument_list|)
argument_list|,
literal|false
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a list of delegate futures that correspond to the futures received in the order    * that they complete. Delegate futures return the same value or throw the same exception    * as the corresponding input future returns/throws.    *    *<p>Cancelling a delegate future has no effect on any input future, since the delegate future    * does not correspond to a specific input future until the appropriate number of input    * futures have completed. At that point, it is too late to cancel the input future.    * The input future's result, which cannot be stored into the cancelled delegate future,    * is ignored.    *    * @since 17.0    */
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|inCompletionOrder ( Iterable<? extends ListenableFuture<? extends T>> futures)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|inCompletionOrder
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
comment|// A CLQ may be overkill here.  We could save some pointers/memory by synchronizing on an
comment|// ArrayDeque
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|SettableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|delegates
init|=
name|Queues
operator|.
name|newConcurrentLinkedQueue
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ListenableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|listBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Using SerializingExecutor here will ensure that each CompletionOrderListener executes
comment|// atomically and therefore that each returned future is guaranteed to be in completion order.
comment|// N.B. there are some cases where the use of this executor could have possibly surprising
comment|// effects when input futures finish at approximately the same time _and_ the output futures
comment|// have directExecutor listeners. In this situation, the listeners may end up running on a
comment|// different thread than if they were attached to the corresponding input future.  We believe
comment|// this to be a negligible cost since:
comment|// 1. Using the directExecutor implies that your callback is safe to run on any thread.
comment|// 2. This would likely only be noticeable if you were doing something expensive or blocking on
comment|//    a directExecutor listener on one of the output futures which is an antipattern anyway.
name|SerializingExecutor
name|executor
init|=
operator|new
name|SerializingExecutor
argument_list|(
name|directExecutor
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|SettableFuture
argument_list|<
name|T
argument_list|>
name|delegate
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Must make sure to add the delegate to the queue first in case the future is already done
name|delegates
operator|.
name|add
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|delegates
operator|.
name|remove
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|listBuilder
operator|.
name|add
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
return|return
name|listBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Registers separate success and failure callbacks to be run when the {@code    * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone()    * complete} or, if the computation is already complete, immediately.    *    *<p>There is no guaranteed ordering of execution of callbacks, but any    * callback added through this method is guaranteed to be called once the    * computation is complete.    *    * Example:<pre> {@code    * ListenableFuture<QueryResult> future = ...;    * addCallback(future,    *     new FutureCallback<QueryResult> {    *       public void onSuccess(QueryResult result) {    *         storeInCache(result);    *       }    *       public void onFailure(Throwable t) {    *         reportError(t);    *       }    *     });}</pre>    *    *<p>Note: If the callback is slow or heavyweight, consider {@linkplain    * #addCallback(ListenableFuture, FutureCallback, Executor) supplying an    * executor}. If you do not supply an executor, {@code addCallback} will use    * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries    * some caveats for heavier operations. For example, the callback may run on    * an unpredictable or undesirable thread:    *    *<ul>    *<li>If the input {@code Future} is done at the time {@code addCallback} is    * called, {@code addCallback} will execute the callback inline.    *<li>If the input {@code Future} is not yet done, {@code addCallback} will    * schedule the callback to be run by the thread that completes the input    * {@code Future}, which may be an internal system thread such as an RPC    * network thread.    *</ul>    *    *<p>Also note that, regardless of which thread executes the callback, all    * other registered but unexecuted listeners are prevented from running    * during its execution, even if those listeners are to run in other    * executors.    *    *<p>For a more general interface to attach a completion listener to a    * {@code Future}, see {@link ListenableFuture#addListener addListener}.    *    * @param future The future attach the callback to.    * @param callback The callback to invoke when {@code future} is completed.    * @since 10.0    */
DECL|method|addCallback (ListenableFuture<V> future, FutureCallback<? super V> callback)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|addCallback
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|FutureCallback
argument_list|<
name|?
super|super
name|V
argument_list|>
name|callback
parameter_list|)
block|{
name|addCallback
argument_list|(
name|future
argument_list|,
name|callback
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers separate success and failure callbacks to be run when the {@code    * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone()    * complete} or, if the computation is already complete, immediately.    *    *<p>The callback is run in {@code executor}.    * There is no guaranteed ordering of execution of callbacks, but any    * callback added through this method is guaranteed to be called once the    * computation is complete.    *    * Example:<pre> {@code    * ListenableFuture<QueryResult> future = ...;    * Executor e = ...    * addCallback(future,    *     new FutureCallback<QueryResult> {    *       public void onSuccess(QueryResult result) {    *         storeInCache(result);    *       }    *       public void onFailure(Throwable t) {    *         reportError(t);    *       }    *     }, e);}</pre>    *    *<p>When the callback is fast and lightweight, consider {@linkplain    * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or    * explicitly specifying {@code directExecutor}. However, be aware of the    * caveats documented in the link above.    *    *<p>For a more general interface to attach a completion listener to a    * {@code Future}, see {@link ListenableFuture#addListener addListener}.    *    * @param future The future attach the callback to.    * @param callback The callback to invoke when {@code future} is completed.    * @param executor The executor to run {@code callback} when the future    *    completes.    * @since 10.0    */
DECL|method|addCallback (final ListenableFuture<V> future, final FutureCallback<? super V> callback, Executor executor)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|void
name|addCallback
parameter_list|(
specifier|final
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
specifier|final
name|FutureCallback
argument_list|<
name|?
super|super
name|V
argument_list|>
name|callback
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|callback
argument_list|)
expr_stmt|;
name|Runnable
name|callbackListener
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|V
name|value
decl_stmt|;
try|try
block|{
comment|// TODO(user): (Before Guava release), validate that this
comment|// is the thing for IE.
name|value
operator|=
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|callbackListener
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the result of {@link Future#get()}, converting most exceptions to a    * new instance of the given checked exception type. This reduces boilerplate    * for a common use of {@code Future} in which it is unnecessary to    * programmatically distinguish between exception types or to extract other    * information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an    *     {@code X} if the cause is a checked exception, an {@link    *     UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an    *     {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after    *     restoring the interrupt).    *<li>Any {@link CancellationException} is propagated untouched, as is any    *     other {@link RuntimeException} (though {@code get} implementations are    *     discouraged from throwing such exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a    * checked exception, every unchecked exception as an unchecked exception, and    * every error as an error. In addition, the cause of any {@code    * ExecutionException} is wrapped in order to ensure that the new stack trace    * matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary    * public constructor that accepts zero or more arguments, all of type {@code    * String} or {@code Throwable} (preferring constructors with at least one    * {@code String}) and calling the constructor via reflection. If the    * exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an    * {@code IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code    *         ExecutionException} whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code    *         ExecutionException} with a {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException}    *         with an {@code Error} as its cause    * @throws CancellationException if {@code get} throws a {@code    *         CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code    *         RuntimeException} or does not have a suitable constructor    * @since 10.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|get ( Future<V> future, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|get
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|RuntimeException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exceptionClass
argument_list|)
argument_list|,
literal|"Futures.get exception type (%s) must not be a RuntimeException"
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowExceptionOrError
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Returns the result of {@link Future#get(long, TimeUnit)}, converting most    * exceptions to a new instance of the given checked exception type. This    * reduces boilerplate for a common use of {@code Future} in which it is    * unnecessary to programmatically distinguish between exception types or to    * extract other information from the exception instance.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an    *     {@code X} if the cause is a checked exception, an {@link    *     UncheckedExecutionException} if the cause is a {@code    *     RuntimeException}, or an {@link ExecutionError} if the cause is an    *     {@code Error}.    *<li>Any {@link InterruptedException} is wrapped in an {@code X} (after    *     restoring the interrupt).    *<li>Any {@link TimeoutException} is wrapped in an {@code X}.    *<li>Any {@link CancellationException} is propagated untouched, as is any    *     other {@link RuntimeException} (though {@code get} implementations are    *     discouraged from throwing such exceptions).    *</ul>    *    *<p>The overall principle is to continue to treat every checked exception as a    * checked exception, every unchecked exception as an unchecked exception, and    * every error as an error. In addition, the cause of any {@code    * ExecutionException} is wrapped in order to ensure that the new stack trace    * matches that of the current thread.    *    *<p>Instances of {@code exceptionClass} are created by choosing an arbitrary    * public constructor that accepts zero or more arguments, all of type {@code    * String} or {@code Throwable} (preferring constructors with at least one    * {@code String}) and calling the constructor via reflection. If the    * exception did not already have a cause, one is set by calling {@link    * Throwable#initCause(Throwable)} on it. If no such constructor exists, an    * {@code IllegalArgumentException} is thrown.    *    * @throws X if {@code get} throws any checked exception except for an {@code    *         ExecutionException} whose cause is not itself a checked exception    * @throws UncheckedExecutionException if {@code get} throws an {@code    *         ExecutionException} with a {@code RuntimeException} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException}    *         with an {@code Error} as its cause    * @throws CancellationException if {@code get} throws a {@code    *         CancellationException}    * @throws IllegalArgumentException if {@code exceptionClass} extends {@code    *         RuntimeException} or does not have a suitable constructor    * @since 10.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|get ( Future<V> future, long timeout, TimeUnit unit, Class<X> exceptionClass)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
name|V
name|get
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|RuntimeException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exceptionClass
argument_list|)
argument_list|,
literal|"Futures.get exception type (%s) must not be a RuntimeException"
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowExceptionOrError
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|wrapAndThrowExceptionOrError ( Throwable cause, Class<X> exceptionClass)
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Exception
parameter_list|>
name|void
name|wrapAndThrowExceptionOrError
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|)
throws|throws
name|X
block|{
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
operator|(
name|Error
operator|)
name|cause
argument_list|)
throw|;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
throw|throw
name|newWithCause
argument_list|(
name|exceptionClass
argument_list|,
name|cause
argument_list|)
throw|;
block|}
comment|/**    * Returns the result of calling {@link Future#get()} uninterruptibly on a    * task known not to throw a checked exception. This makes {@code Future} more    * suitable for lightweight, fast-running tasks that, barring bugs in the    * code, will not fail. This gives it exception-handling behavior similar to    * that of {@code ForkJoinTask.join}.    *    *<p>Exceptions from {@code Future.get} are treated as follows:    *<ul>    *<li>Any {@link ExecutionException} has its<i>cause</i> wrapped in an    *     {@link UncheckedExecutionException} (if the cause is an {@code    *     Exception}) or {@link ExecutionError} (if the cause is an {@code    *     Error}).    *<li>Any {@link InterruptedException} causes a retry of the {@code get}    *     call. The interrupt is restored before {@code getUnchecked} returns.    *<li>Any {@link CancellationException} is propagated untouched. So is any    *     other {@link RuntimeException} ({@code get} implementations are    *     discouraged from throwing such exceptions).    *</ul>    *    *<p>The overall principle is to eliminate all checked exceptions: to loop to    * avoid {@code InterruptedException}, to pass through {@code    * CancellationException}, and to wrap any exception from the underlying    * computation in an {@code UncheckedExecutionException} or {@code    * ExecutionError}.    *    *<p>For an uninterruptible {@code get} that preserves other exceptions, see    * {@link Uninterruptibles#getUninterruptibly(Future)}.    *    * @throws UncheckedExecutionException if {@code get} throws an {@code    *         ExecutionException} with an {@code Exception} as its cause    * @throws ExecutionError if {@code get} throws an {@code ExecutionException}    *         with an {@code Error} as its cause    * @throws CancellationException if {@code get} throws a {@code    *         CancellationException}    * @since 10.0    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|getUnchecked (Future<V> future)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|getUnchecked
parameter_list|(
name|Future
argument_list|<
name|V
argument_list|>
name|future
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|future
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|wrapAndThrowUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|wrapAndThrowUnchecked (Throwable cause)
specifier|private
specifier|static
name|void
name|wrapAndThrowUnchecked
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
operator|(
name|Error
operator|)
name|cause
argument_list|)
throw|;
block|}
comment|/*      * It's a non-Error, non-Exception Throwable. From my survey of such      * classes, I believe that most users intended to extend Exception, so we'll      * treat it like an Exception.      */
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
comment|/*    * TODO(user): FutureChecker interface for these to be static methods on? If    * so, refer to it in the (static-method) Futures.get documentation    */
comment|/*    * Arguably we don't need a timed getUnchecked because any operation slow    * enough to require a timeout is heavyweight enough to throw a checked    * exception and therefore be inappropriate to use with getUnchecked. Further,    * it's not clear that converting the checked TimeoutException to a    * RuntimeException -- especially to an UncheckedExecutionException, since it    * wasn't thrown by the computation -- makes sense, and if we don't convert    * it, the user still has to write a try-catch block.    *    * If you think you would use this method, let us know.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|newWithCause ( Class<X> exceptionClass, Throwable cause)
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Exception
parameter_list|>
name|X
name|newWithCause
parameter_list|(
name|Class
argument_list|<
name|X
argument_list|>
name|exceptionClass
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
comment|// getConstructors() guarantees this as long as we don't modify the array.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|List
argument_list|<
name|Constructor
argument_list|<
name|X
argument_list|>
argument_list|>
name|constructors
init|=
operator|(
name|List
operator|)
name|Arrays
operator|.
name|asList
argument_list|(
name|exceptionClass
operator|.
name|getConstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|X
argument_list|>
name|constructor
range|:
name|preferringStrings
argument_list|(
name|constructors
argument_list|)
control|)
block|{
annotation|@
name|Nullable
name|X
name|instance
init|=
name|newFromConstructor
argument_list|(
name|constructor
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|instance
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|instance
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No appropriate constructor for exception of type "
operator|+
name|exceptionClass
operator|+
literal|" in response to chained exception"
argument_list|,
name|cause
argument_list|)
throw|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Exception
parameter_list|>
name|List
argument_list|<
name|Constructor
argument_list|<
name|X
argument_list|>
argument_list|>
DECL|method|preferringStrings (List<Constructor<X>> constructors)
name|preferringStrings
parameter_list|(
name|List
argument_list|<
name|Constructor
argument_list|<
name|X
argument_list|>
argument_list|>
name|constructors
parameter_list|)
block|{
return|return
name|WITH_STRING_PARAM_FIRST
operator|.
name|sortedCopy
argument_list|(
name|constructors
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|field|WITH_STRING_PARAM_FIRST
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|>
name|WITH_STRING_PARAM_FIRST
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|asList
argument_list|(
name|input
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|)
operator|.
name|reverse
argument_list|()
expr_stmt|;
end_class

begin_function
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|newFromConstructor ( Constructor<X> constructor, Throwable cause)
annotation|@
name|Nullable
specifier|private
specifier|static
parameter_list|<
name|X
parameter_list|>
name|X
name|newFromConstructor
parameter_list|(
name|Constructor
argument_list|<
name|X
argument_list|>
name|constructor
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramTypes
init|=
name|constructor
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|paramTypes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
init|=
name|paramTypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|paramType
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|cause
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paramType
operator|.
name|equals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
condition|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|cause
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_comment
comment|/** Used for {@link #allAsList} and {@link #successfulAsList}. */
end_comment

begin_function
DECL|method|listFuture ( ImmutableList<ListenableFuture<? extends V>> futures, boolean allMustSucceed, Executor listenerExecutor)
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|listFuture
parameter_list|(
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
parameter_list|,
name|boolean
name|allMustSucceed
parameter_list|,
name|Executor
name|listenerExecutor
parameter_list|)
block|{
return|return
operator|new
name|CollectionFuture
argument_list|<
name|V
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|(
name|futures
argument_list|,
name|allMustSucceed
argument_list|,
name|listenerExecutor
argument_list|,
operator|new
name|CollectionFuture
operator|.
name|FutureCollector
argument_list|<
name|V
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|combine
parameter_list|(
name|List
argument_list|<
name|Optional
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Optional
argument_list|<
name|V
argument_list|>
name|element
range|:
name|values
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|element
operator|!=
literal|null
condition|?
name|element
operator|.
name|orNull
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * A checked future that uses a function to map from exceptions to the    * appropriate checked type.    */
end_comment

begin_class
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|class|MappingCheckedFuture
specifier|private
specifier|static
class|class
name|MappingCheckedFuture
parameter_list|<
name|V
parameter_list|,
name|X
extends|extends
name|Exception
parameter_list|>
extends|extends
name|AbstractCheckedFuture
argument_list|<
name|V
argument_list|,
name|X
argument_list|>
block|{
DECL|field|mapper
specifier|final
name|Function
argument_list|<
name|?
super|super
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
decl_stmt|;
DECL|method|MappingCheckedFuture (ListenableFuture<V> delegate, Function<? super Exception, X> mapper)
name|MappingCheckedFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|Exception
argument_list|,
name|X
argument_list|>
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|checkNotNull
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mapException (Exception e)
specifier|protected
name|X
name|mapException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|mapper
operator|.
name|apply
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

