begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RunnableFuture
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@link RunnableFuture} that also implements the {@link ListenableFuture} interface.  *  *<p>This should be used in preference to {@link ListenableFutureTask} when possible for  * performance reasons.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|TrustedListenableFutureTask
class|class
name|TrustedListenableFutureTask
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|RunnableFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|create (AsyncCallable<V> callable)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|AsyncCallable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
argument_list|(
name|callable
argument_list|)
return|;
block|}
DECL|method|create (Callable<V> callable)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
argument_list|(
name|callable
argument_list|)
return|;
block|}
comment|/**    * Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code    * Runnable}, and arrange that {@code get} will return the given result on successful completion.    *    * @param runnable the runnable task    * @param result the result to return on successful completion. If you don't need a particular    *     result, consider using constructions of the form: {@code ListenableFuture<?> f =    *     ListenableFutureTask.create(runnable, null)}    */
DECL|method|create (Runnable runnable, @Nullable V result)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
annotation|@
name|Nullable
name|V
name|result
parameter_list|)
block|{
return|return
operator|new
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|runnable
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * In certain circumstances, this field might theoretically not be visible to an afterDone() call    * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture.    *    *<p>{@code volatile} is required for j2objc transpiling:    * https://developers.google.com/j2objc/guides/j2objc-memory-model#atomicity    */
DECL|field|task
specifier|private
specifier|volatile
name|InterruptibleTask
argument_list|<
name|?
argument_list|>
name|task
decl_stmt|;
DECL|method|TrustedListenableFutureTask (Callable<V> callable)
name|TrustedListenableFutureTask
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
operator|new
name|TrustedFutureInterruptibleTask
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
DECL|method|TrustedListenableFutureTask (AsyncCallable<V> callable)
name|TrustedListenableFutureTask
parameter_list|(
name|AsyncCallable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
operator|new
name|TrustedFutureInterruptibleAsyncTask
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|InterruptibleTask
name|localTask
init|=
name|task
decl_stmt|;
if|if
condition|(
name|localTask
operator|!=
literal|null
condition|)
block|{
name|localTask
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/*      * In the Async case, we may have called setFuture(pendingFuture), in which case afterDone()      * won't have been called yet.      */
name|this
operator|.
name|task
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterDone ()
specifier|protected
name|void
name|afterDone
parameter_list|()
block|{
name|super
operator|.
name|afterDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|wasInterrupted
argument_list|()
condition|)
block|{
name|InterruptibleTask
name|localTask
init|=
name|task
decl_stmt|;
if|if
condition|(
name|localTask
operator|!=
literal|null
condition|)
block|{
name|localTask
operator|.
name|interruptTask
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|task
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|pendingToString ()
specifier|protected
name|String
name|pendingToString
parameter_list|()
block|{
name|InterruptibleTask
name|localTask
init|=
name|task
decl_stmt|;
if|if
condition|(
name|localTask
operator|!=
literal|null
condition|)
block|{
return|return
literal|"task=["
operator|+
name|localTask
operator|+
literal|"]"
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|TrustedFutureInterruptibleTask
specifier|private
specifier|final
class|class
name|TrustedFutureInterruptibleTask
extends|extends
name|InterruptibleTask
argument_list|<
name|V
argument_list|>
block|{
DECL|field|callable
specifier|private
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
decl_stmt|;
DECL|method|TrustedFutureInterruptibleTask (Callable<V> callable)
name|TrustedFutureInterruptibleTask
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|callable
operator|=
name|checkNotNull
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|final
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|TrustedListenableFutureTask
operator|.
name|this
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runInterruptibly ()
name|V
name|runInterruptibly
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|afterRanInterruptibly (V result, Throwable error)
name|void
name|afterRanInterruptibly
parameter_list|(
name|V
name|result
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|TrustedListenableFutureTask
operator|.
name|this
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|callable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|WeakOuter
DECL|class|TrustedFutureInterruptibleAsyncTask
specifier|private
specifier|final
class|class
name|TrustedFutureInterruptibleAsyncTask
extends|extends
name|InterruptibleTask
argument_list|<
name|ListenableFuture
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|field|callable
specifier|private
specifier|final
name|AsyncCallable
argument_list|<
name|V
argument_list|>
name|callable
decl_stmt|;
DECL|method|TrustedFutureInterruptibleAsyncTask (AsyncCallable<V> callable)
name|TrustedFutureInterruptibleAsyncTask
parameter_list|(
name|AsyncCallable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|callable
operator|=
name|checkNotNull
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|final
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|TrustedListenableFutureTask
operator|.
name|this
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runInterruptibly ()
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|runInterruptibly
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|checkNotNull
argument_list|(
name|callable
operator|.
name|call
argument_list|()
argument_list|,
literal|"AsyncCallable.call returned null instead of a Future. "
operator|+
literal|"Did you mean to return immediateFuture(null)?"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|afterRanInterruptibly (ListenableFuture<V> result, Throwable error)
name|void
name|afterRanInterruptibly
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|result
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|setFuture
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|callable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

