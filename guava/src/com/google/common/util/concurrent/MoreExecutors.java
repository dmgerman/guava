begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link  * ExecutorService}, and {@link ThreadFactory}.  *  * @author Eric Fellheimer  * @author Kyle Littlefield  * @author Justin Mahoney  * @since 3.0  */
end_comment

begin_class
DECL|class|MoreExecutors
specifier|public
specifier|final
class|class
name|MoreExecutors
block|{
DECL|method|MoreExecutors ()
specifier|private
name|MoreExecutors
parameter_list|()
block|{}
comment|/**    * Converts the given ThreadPoolExecutor into an ExecutorService that exits    * when the application is complete.  It does so by using daemon threads and    * adding a shutdown hook to wait for their completion.    *    *<p>This is mainly for fixed thread pools.    * See {@link Executors#newFixedThreadPool(int)}.    *    * @param executor the executor to modify to make sure it exits when the    *        application is finished    * @param terminationTimeout how long to wait for the executor to    *        finish before terminating the JVM    * @param timeUnit unit of time for the time parameter    * @return an unmodifiable version of the input which will not hang the JVM    */
annotation|@
name|Beta
DECL|method|getExitingExecutorService ( ThreadPoolExecutor executor, long terminationTimeout, TimeUnit timeUnit)
specifier|public
specifier|static
name|ExecutorService
name|getExitingExecutorService
parameter_list|(
name|ThreadPoolExecutor
name|executor
parameter_list|,
name|long
name|terminationTimeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|executor
operator|.
name|setThreadFactory
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setThreadFactory
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|unconfigurableExecutorService
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|addDelayedShutdownHook
argument_list|(
name|service
argument_list|,
name|terminationTimeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
comment|/**    * Converts the given ScheduledThreadPoolExecutor into a    * ScheduledExecutorService that exits when the application is complete.  It    * does so by using daemon threads and adding a shutdown hook to wait for    * their completion.    *    *<p>This is mainly for fixed thread pools.    * See {@link Executors#newScheduledThreadPool(int)}.    *    * @param executor the executor to modify to make sure it exits when the    *        application is finished    * @param terminationTimeout how long to wait for the executor to    *        finish before terminating the JVM    * @param timeUnit unit of time for the time parameter    * @return an unmodifiable version of the input which will not hang the JVM    */
annotation|@
name|Beta
DECL|method|getExitingScheduledExecutorService ( ScheduledThreadPoolExecutor executor, long terminationTimeout, TimeUnit timeUnit)
specifier|public
specifier|static
name|ScheduledExecutorService
name|getExitingScheduledExecutorService
parameter_list|(
name|ScheduledThreadPoolExecutor
name|executor
parameter_list|,
name|long
name|terminationTimeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|executor
operator|.
name|setThreadFactory
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setThreadFactory
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ScheduledExecutorService
name|service
init|=
name|Executors
operator|.
name|unconfigurableScheduledExecutorService
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|addDelayedShutdownHook
argument_list|(
name|service
argument_list|,
name|terminationTimeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
comment|/**    * Add a shutdown hook to wait for thread completion in the given    * {@link ExecutorService service}.  This is useful if the given service uses    * daemon threads, and we want to keep the JVM from exiting immediately on    * shutdown, instead giving these daemon threads a chance to terminate    * normally.    * @param service ExecutorService which uses daemon threads    * @param terminationTimeout how long to wait for the executor to finish    *        before terminating the JVM    * @param timeUnit unit of time for the time parameter    */
annotation|@
name|Beta
DECL|method|addDelayedShutdownHook ( final ExecutorService service, final long terminationTimeout, final TimeUnit timeUnit)
specifier|public
specifier|static
name|void
name|addDelayedShutdownHook
parameter_list|(
specifier|final
name|ExecutorService
name|service
parameter_list|,
specifier|final
name|long
name|terminationTimeout
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// We'd like to log progress and failures that may arise in the
comment|// following code, but unfortunately the behavior of logging
comment|// is undefined in shutdown hooks.
comment|// This is because the logging code installs a shutdown hook of its
comment|// own. See Cleaner class inside {@link LogManager}.
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
name|terminationTimeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// We're shutting down anyway, so just ignore.
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts the given ThreadPoolExecutor into an ExecutorService that exits    * when the application is complete.  It does so by using daemon threads and    * adding a shutdown hook to wait for their completion.    *    *<p>This method waits 120 seconds before continuing with JVM termination,    * even if the executor has not finished its work.    *    *<p>This is mainly for fixed thread pools.    * See {@link Executors#newFixedThreadPool(int)}.    *    * @param executor the executor to modify to make sure it exits when the    *        application is finished    * @return an unmodifiable version of the input which will not hang the JVM    */
annotation|@
name|Beta
DECL|method|getExitingExecutorService ( ThreadPoolExecutor executor)
specifier|public
specifier|static
name|ExecutorService
name|getExitingExecutorService
parameter_list|(
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
return|return
name|getExitingExecutorService
argument_list|(
name|executor
argument_list|,
literal|120
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**    * Converts the given ThreadPoolExecutor into a ScheduledExecutorService that    * exits when the application is complete.  It does so by using daemon threads    * and adding a shutdown hook to wait for their completion.    *    *<p>This method waits 120 seconds before continuing with JVM termination,    * even if the executor has not finished its work.    *    *<p>This is mainly for fixed thread pools.    * See {@link Executors#newScheduledThreadPool(int)}.    *    * @param executor the executor to modify to make sure it exits when the    *        application is finished    * @return an unmodifiable version of the input which will not hang the JVM    */
annotation|@
name|Beta
DECL|method|getExitingScheduledExecutorService ( ScheduledThreadPoolExecutor executor)
specifier|public
specifier|static
name|ScheduledExecutorService
name|getExitingScheduledExecutorService
parameter_list|(
name|ScheduledThreadPoolExecutor
name|executor
parameter_list|)
block|{
return|return
name|getExitingScheduledExecutorService
argument_list|(
name|executor
argument_list|,
literal|120
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**    * Creates an executor service that runs each task in the thread    * that invokes {@code execute/submit}, as in {@link CallerRunsPolicy}  This    * applies both to individually submitted tasks and to collections of tasks    * submitted via {@code invokeAll} or {@code invokeAny}.  In the latter case,    * tasks will run serially on the calling thread.  Tasks are run to    * completion before a {@code Future} is returned to the caller (unless the    * executor has been shutdown).    *    *<p>Although all tasks are immediately executed in the thread that    * submitted the task, this {@code ExecutorService} imposes a small    * locking overhead on each task submission in order to implement shutdown    * and termination behavior.    *    *<p>The implementation deviates from the {@code ExecutorService}    * specification with regards to the {@code shutdownNow} method.  First,    * "best-effort" with regards to canceling running tasks is implemented    * as "no-effort".  No interrupts or other attempts are made to stop    * threads executing tasks.  Second, the returned list will always be empty,    * as any submitted task is considered to have started execution.    * This applies also to tasks given to {@code invokeAll} or {@code invokeAny}    * which are pending serial execution, even the subset of the tasks that    * have not yet started execution.  It is unclear from the    * {@code ExecutorService} specification if these should be included, and    * it's much easier to implement the interpretation that they not be.    * Finally, a call to {@code shutdown} or {@code shutdownNow} may result    * in concurrent calls to {@code invokeAll/invokeAny} throwing    * RejectedExecutionException, although a subset of the tasks may already    * have been executed.    *    * @since 10.0 (<a href="http://code.google.com/p/guava-libraries/wiki/Compatibility"    *>mostly source-compatible</a> since 3.0)    */
DECL|method|sameThreadExecutor ()
specifier|public
specifier|static
name|ListeningExecutorService
name|sameThreadExecutor
parameter_list|()
block|{
return|return
operator|new
name|SameThreadExecutorService
argument_list|()
return|;
block|}
comment|// See sameThreadExecutor javadoc for behavioral notes.
DECL|class|SameThreadExecutorService
specifier|private
specifier|static
class|class
name|SameThreadExecutorService
extends|extends
name|AbstractListeningExecutorService
block|{
comment|/**      * Lock used whenever accessing the state variables      * (runningTasks, shutdown, terminationCondition) of the executor      */
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/** Signaled after the executor is shutdown and running tasks are done */
DECL|field|termination
specifier|private
specifier|final
name|Condition
name|termination
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
comment|/*      * Conceptually, these two variables describe the executor being in      * one of three states:      *   - Active: shutdown == false      *   - Shutdown: runningTasks> 0 and shutdown == true      *   - Terminated: runningTasks == 0 and shutdown == true      */
DECL|field|runningTasks
specifier|private
name|int
name|runningTasks
init|=
literal|0
decl_stmt|;
DECL|field|shutdown
specifier|private
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|execute (Runnable command)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|startTask
argument_list|()
expr_stmt|;
try|try
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|endTask
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|shutdown
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// See sameThreadExecutor javadoc for unusual behavior of this method.
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|shutdown
operator|&&
name|runningTasks
operator|==
literal|0
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|nanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|isTerminated
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|nanos
operator|=
name|termination
operator|.
name|awaitNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Checks if the executor has been shut down and increments the running      * task count.      *      * @throws RejectedExecutionException if the executor has been previously      *         shutdown      */
DECL|method|startTask ()
specifier|private
name|void
name|startTask
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|isShutdown
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Executor already shutdown"
argument_list|)
throw|;
block|}
name|runningTasks
operator|++
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Decrements the running task count.      */
DECL|method|endTask ()
specifier|private
name|void
name|endTask
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|runningTasks
operator|--
expr_stmt|;
if|if
condition|(
name|isTerminated
argument_list|()
condition|)
block|{
name|termination
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates an {@link ExecutorService} whose {@code submit} and {@code    * invokeAll} methods submit {@link ListenableFutureTask} instances to the    * given delegate executor. Those methods, as well as {@code execute} and    * {@code invokeAny}, are implemented in terms of calls to {@code    * delegate.execute}. All other methods are forwarded unchanged to the    * delegate. This implies that the returned {@code ListeningExecutorService}    * never calls the delegate's {@code submit}, {@code invokeAll}, and {@code    * invokeAny} methods, so any special handling of tasks must be implemented in    * the delegate's {@code execute} method or by wrapping the returned {@code    * ListeningExecutorService}.    *    *<p>If the delegate executor was already an instance of {@code    * ListeningExecutorService}, it is returned untouched, and the rest of this    * documentation does not apply.    *    * @since 10.0    */
DECL|method|listeningDecorator ( ExecutorService delegate)
specifier|public
specifier|static
name|ListeningExecutorService
name|listeningDecorator
parameter_list|(
name|ExecutorService
name|delegate
parameter_list|)
block|{
return|return
operator|(
name|delegate
operator|instanceof
name|ListeningExecutorService
operator|)
condition|?
operator|(
name|ListeningExecutorService
operator|)
name|delegate
else|:
operator|(
name|delegate
operator|instanceof
name|ScheduledExecutorService
operator|)
condition|?
operator|new
name|ScheduledListeningDecorator
argument_list|(
operator|(
name|ScheduledExecutorService
operator|)
name|delegate
argument_list|)
else|:
operator|new
name|ListeningDecorator
argument_list|(
name|delegate
argument_list|)
return|;
block|}
comment|/**    * Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code    * invokeAll} methods submit {@link ListenableFutureTask} instances to the    * given delegate executor. Those methods, as well as {@code execute} and    * {@code invokeAny}, are implemented in terms of calls to {@code    * delegate.execute}. All other methods are forwarded unchanged to the    * delegate. This implies that the returned {@code    * SchedulingListeningExecutorService} never calls the delegate's {@code    * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special    * handling of tasks must be implemented in the delegate's {@code execute}    * method or by wrapping the returned {@code    * SchedulingListeningExecutorService}.    *    *<p>If the delegate executor was already an instance of {@code    * ListeningScheduledExecutorService}, it is returned untouched, and the rest    * of this documentation does not apply.    *    * @since 10.0    */
DECL|method|listeningDecorator ( ScheduledExecutorService delegate)
specifier|public
specifier|static
name|ListeningScheduledExecutorService
name|listeningDecorator
parameter_list|(
name|ScheduledExecutorService
name|delegate
parameter_list|)
block|{
return|return
operator|(
name|delegate
operator|instanceof
name|ListeningScheduledExecutorService
operator|)
condition|?
operator|(
name|ListeningScheduledExecutorService
operator|)
name|delegate
else|:
operator|new
name|ScheduledListeningDecorator
argument_list|(
name|delegate
argument_list|)
return|;
block|}
DECL|class|ListeningDecorator
specifier|private
specifier|static
class|class
name|ListeningDecorator
extends|extends
name|AbstractListeningExecutorService
block|{
DECL|field|delegate
specifier|final
name|ExecutorService
name|delegate
decl_stmt|;
DECL|method|ListeningDecorator (ExecutorService delegate)
name|ListeningDecorator
parameter_list|(
name|ExecutorService
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isShutdown
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isTerminated
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|delegate
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|shutdownNow
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|execute (Runnable command)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|delegate
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ScheduledListeningDecorator
specifier|private
specifier|static
class|class
name|ScheduledListeningDecorator
extends|extends
name|ListeningDecorator
implements|implements
name|ListeningScheduledExecutorService
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
DECL|field|delegate
specifier|final
name|ScheduledExecutorService
name|delegate
decl_stmt|;
DECL|method|ScheduledListeningDecorator (ScheduledExecutorService delegate)
name|ScheduledListeningDecorator
parameter_list|(
name|ScheduledExecutorService
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|schedule ( Runnable command, long delay, TimeUnit unit)
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|schedule
argument_list|(
name|command
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|schedule ( Callable<V> callable, long delay, TimeUnit unit)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
name|schedule
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|schedule
argument_list|(
name|callable
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|scheduleAtFixedRate ( Runnable command, long initialDelay, long period, TimeUnit unit)
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleAtFixedRate
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|scheduleAtFixedRate
argument_list|(
name|command
argument_list|,
name|initialDelay
argument_list|,
name|period
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|scheduleWithFixedDelay ( Runnable command, long initialDelay, long delay, TimeUnit unit)
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|command
argument_list|,
name|initialDelay
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
comment|/*    * This following method is a modified version of one found in    * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck/AbstractExecutorServiceTest.java?revision=1.30    * which contained the following notice:    *    * Written by Doug Lea with assistance from members of JCP JSR-166    * Expert Group and released to the public domain, as explained at    * http://creativecommons.org/publicdomain/zero/1.0/    * Other contributors include Andrew Wright, Jeffrey Hayes,    * Pat Fisher, Mike Judd.    */
comment|/**    * An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}    * implementations.    */
DECL|method|invokeAnyImpl (ListeningExecutorService executorService, Collection<? extends Callable<T>> tasks, boolean timed, long nanos)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAnyImpl
parameter_list|(
name|ListeningExecutorService
name|executorService
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|boolean
name|timed
parameter_list|,
name|long
name|nanos
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|int
name|ntasks
init|=
name|tasks
operator|.
name|size
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|ntasks
operator|>
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|ntasks
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|futureQueue
init|=
name|Queues
operator|.
name|newLinkedBlockingQueue
argument_list|()
decl_stmt|;
comment|// For efficiency, especially in executors with limited
comment|// parallelism, check to see if previously submitted tasks are
comment|// done before submitting more of them. This interleaving
comment|// plus the exception mechanics account for messiness of main
comment|// loop.
try|try
block|{
comment|// Record exceptions so that if we fail to obtain any
comment|// result, we can throw the last exception we got.
name|ExecutionException
name|ee
init|=
literal|null
decl_stmt|;
name|long
name|lastTime
init|=
name|timed
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|it
init|=
name|tasks
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|submitAndAddQueueListener
argument_list|(
name|executorService
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|futureQueue
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|ntasks
expr_stmt|;
name|int
name|active
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Future
argument_list|<
name|T
argument_list|>
name|f
init|=
name|futureQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ntasks
operator|>
literal|0
condition|)
block|{
operator|--
name|ntasks
expr_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|submitAndAddQueueListener
argument_list|(
name|executorService
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|futureQueue
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|active
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|active
operator|==
literal|0
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|timed
condition|)
block|{
name|f
operator|=
name|futureQueue
operator|.
name|poll
argument_list|(
name|nanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|()
throw|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|nanos
operator|-=
name|now
operator|-
name|lastTime
expr_stmt|;
name|lastTime
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|futureQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
operator|--
name|active
expr_stmt|;
try|try
block|{
return|return
name|f
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|eex
parameter_list|)
block|{
name|ee
operator|=
name|eex
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
name|ee
operator|=
operator|new
name|ExecutionException
argument_list|(
name|rex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ee
operator|==
literal|null
condition|)
block|{
name|ee
operator|=
operator|new
name|ExecutionException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ee
throw|;
block|}
finally|finally
block|{
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
block|{
name|f
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Submits the task and adds a listener that adds the future to {@code queue} when it completes.    */
DECL|method|submitAndAddQueueListener ( ListeningExecutorService executorService, Callable<T> task, final BlockingQueue<Future<T>> queue)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submitAndAddQueueListener
parameter_list|(
name|ListeningExecutorService
name|executorService
parameter_list|,
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|,
specifier|final
name|BlockingQueue
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|queue
parameter_list|)
block|{
specifier|final
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|queue
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

