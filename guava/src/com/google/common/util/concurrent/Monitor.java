begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_comment
comment|/**  * A synchronization abstraction supporting waiting on arbitrary boolean conditions.  *  *<p>This class is intended as a replacement for {@link ReentrantLock}. Code using {@code Monitor}  * is less error-prone and more readable than code using {@code ReentrantLock}, without significant  * performance loss. {@code Monitor} even has the potential for performance gain by optimizing the  * evaluation and signaling of conditions.  *  *<p>A thread is said to<i>occupy</i> a monitor if it has<i>entered</i> the monitor but not yet  *<i>left</i>. Only one thread may occupy a given monitor at any moment. A monitor is also  * reentrant, so a thread may enter a monitor any number of times, and then must leave the same  * number of times. The<i>enter</i> and<i>leave</i> operations have the same synchronization  * semantics as the built-in Java language synchronization primitives.  *  *<p>A call to any of the<i>enter</i> methods with<b>void</b> return type should always be  * followed immediately by a<i>try/finally</i> block to ensure that the current thread leaves the  * monitor cleanly:<pre>   {@code  *  *   monitor.enter();  *   try {  *     // do things while occupying the monitor  *   } finally {  *     monitor.leave();  *   }}</pre>  *  * A call to any of the<i>enter</i> methods with<b>boolean</b> return type should always appear as  * the condition of an<i>if</i> statement containing a<i>try/finally</i> block to ensure that the  * current thread leaves the monitor cleanly:<pre>   {@code  *  *   if (monitor.tryEnter()) {  *     try {  *       // do things while occupying the monitor  *     } finally {  *       monitor.leave();  *     }  *   } else {  *     // do other things since the monitor was not available  *   }}</pre>  *  *<h2>Comparison with {@code synchronized} and {@code ReentrantLock}</h2>  *   *<p>The following examples show a simple threadsafe holder expressed using {@code synchronized},  * {@link ReentrantLock}, and {@code Monitor}.  *   *<h3>{@code synchronized}</h3>  *   *<p>This version is the fewest lines of code, largely because the synchronization mechanism used  * is built into the language and runtime. But the programmer has to remember to avoid a couple of  * common bugs: The {@code wait()} must be inside a {@code while} instead of an {@code if}, and  * {@code notifyAll()} must be used instead of {@code notify()} because there are two different  * logical conditions being awaited.<pre>   {@code  *  *   public class SafeBox<V> {  *     private V value;  *  *     public synchronized V get() throws InterruptedException {  *       while (value == null) {  *         wait();  *       }  *       V result = value;  *       value = null;  *       notifyAll();  *       return result;  *     }  *  *     public synchronized void set(V newValue) throws InterruptedException {  *       while (value != null) {  *         wait();  *       }  *       value = newValue;  *       notifyAll();  *     }  *   }}</pre>  *   *<h3>{@code ReentrantLock}</h3>  *   *<p>This version is much more verbose than the {@code synchronized} version, and still suffers  * from the need for the programmer to remember to use {@code while} instead of {@code if}.  * However, one advantage is that we can introduce two separate {@code Condition} objects, which  * allows us to use {@code signal()} instead of {@code signalAll()}, which may be a performance  * benefit.<pre>   {@code  *  *   public class SafeBox<V> {  *     private final ReentrantLock lock = new ReentrantLock();  *     private final Condition valuePresent = lock.newCondition();  *     private final Condition valueAbsent = lock.newCondition();  *     private V value;  *  *     public V get() throws InterruptedException {  *       lock.lock();  *       try {  *         while (value == null) {  *           valuePresent.await();  *         }  *         V result = value;  *         value = null;  *         valueAbsent.signal();  *         return result;  *       } finally {  *         lock.unlock();  *       }  *     }  *  *     public void set(V newValue) throws InterruptedException {  *       lock.lock();  *       try {  *         while (value != null) {  *           valueAbsent.await();  *         }  *         value = newValue;  *         valuePresent.signal();  *       } finally {  *         lock.unlock();  *       }  *     }  *   }}</pre>  *   *<h3>{@code Monitor}</h3>  *   *<p>This version adds some verbosity around the {@code Guard} objects, but removes that same  * verbosity, and more, from the {@code get} and {@code set} methods. {@code Monitor} implements the  * same efficient signaling as we had to hand-code in the {@code ReentrantLock} version above.  * Finally, the programmer no longer has to hand-code the wait loop, and therefore doesn't have to  * remember to use {@code while} instead of {@code if}.<pre>   {@code  *  *   public class SafeBox<V> {  *     private final Monitor monitor = new Monitor();  *     private final Monitor.Guard valuePresent = new Monitor.Guard(monitor) {  *       public boolean isSatisfied() {  *         return value != null;  *       }  *     };  *     private final Monitor.Guard valueAbsent = new Monitor.Guard(monitor) {  *       public boolean isSatisfied() {  *         return value == null;  *       }  *     };  *     private V value;  *  *     public V get() throws InterruptedException {  *       monitor.enterWhen(valuePresent);  *       try {  *         V result = value;  *         value = null;  *         return result;  *       } finally {  *         monitor.leave();  *       }  *     }  *  *     public void set(V newValue) throws InterruptedException {  *       monitor.enterWhen(valueAbsent);  *       try {  *         value = newValue;  *       } finally {  *         monitor.leave();  *       }  *     }  *   }}</pre>  *   * @author Justin T. Sampson  * @since Guava release 10  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|Monitor
specifier|public
specifier|final
class|class
name|Monitor
block|{
comment|// TODO: Use raw LockSupport or AbstractQueuedSynchronizer instead of ReentrantLock.
comment|/**    * A boolean condition for which a thread may wait. A {@code Guard} is associated with a single    * {@code Monitor}.    *    *<p>An implementation of this interface must ensure the following:    *    *<ul>    *<li>Calling {@code isSatisfied()} must be thread-safe with its monitor occupied, because the    * monitor may check the guard at arbitrary times from a thread occupying the monitor.    *<li>Calling {@code isSatisfied()} must not itself have the effect of altering the return value    * of this or any other guard's {@code isSatisfied()} method.    *<li>No thread that is<i>not</i> occupying the monitor may cause the value returned by {@code    * isSatisfied()} to change from true to false.    *<li>If any thread that is<i>not</i> occupying the monitor causes the value returned by {@code    * isSatisfied()} to change from false to true, {@link Monitor#reevaluateGuards()} must be called    * in order to notify any waiting threads.    *</ul>    *     *<p>If a {@code Guard} is passed into any method of a {@code Monitor} other than the one it is    * associated with, an {@link IllegalMonitorStateException} is thrown.    *    * @since Guava release 10    */
annotation|@
name|Beta
DECL|class|Guard
specifier|public
specifier|abstract
specifier|static
class|class
name|Guard
block|{
DECL|field|monitor
specifier|final
name|Monitor
name|monitor
decl_stmt|;
DECL|field|condition
specifier|final
name|Condition
name|condition
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"monitor.lock"
argument_list|)
DECL|field|waiterCount
name|int
name|waiterCount
init|=
literal|0
decl_stmt|;
DECL|method|Guard (Monitor monitor)
specifier|protected
name|Guard
parameter_list|(
name|Monitor
name|monitor
parameter_list|)
block|{
name|this
operator|.
name|monitor
operator|=
name|checkNotNull
argument_list|(
name|monitor
argument_list|,
literal|"monitor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|monitor
operator|.
name|lock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
block|}
comment|/**      * Evaluates this guard's boolean condition.      */
DECL|method|isSatisfied ()
specifier|public
specifier|abstract
name|boolean
name|isSatisfied
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
comment|// Overridden as final to ensure identity semantics in Monitor.activeGuards.
return|return
name|this
operator|==
name|other
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
comment|// Overridden as final to ensure identity semantics in Monitor.activeGuards.
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * The lock underlying this monitor.    */
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
decl_stmt|;
comment|/**    * The guards associated with this monitor that currently have waiters ({@code waiterCount> 0}).    * This is an ArrayList rather than, say, a HashSet so that iteration and almost all adds don't    * incur any object allocation overhead.    */
DECL|field|activeGuards
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Guard
argument_list|>
name|activeGuards
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code    * Monitor(false)}.    */
DECL|method|Monitor ()
specifier|public
name|Monitor
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a monitor with the given ordering policy.    *    * @param fair whether this monitor should use a fair ordering policy rather than a non-fair (but    *        fast) one    */
DECL|method|Monitor (boolean fair)
specifier|public
name|Monitor
parameter_list|(
name|boolean
name|fair
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|(
name|fair
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enters this monitor. Blocks indefinitely.    */
DECL|method|enter ()
specifier|public
name|void
name|enter
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Enters this monitor. Blocks indefinitely, but may be interrupted.    */
DECL|method|enterInterruptibly ()
specifier|public
name|void
name|enterInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/**    * Enters this monitor. Blocks at most the given time.    *    * @return whether the monitor was entered    */
DECL|method|enter (long time, TimeUnit unit)
specifier|public
name|boolean
name|enter
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|long
name|startNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timeoutNanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|long
name|remainingNanos
init|=
name|timeoutNanos
decl_stmt|;
name|boolean
name|interruptIgnored
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|lock
operator|.
name|tryLock
argument_list|(
name|remainingNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
name|interruptIgnored
operator|=
literal|true
expr_stmt|;
name|remainingNanos
operator|=
operator|(
name|timeoutNanos
operator|-
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNanos
operator|)
operator|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|interruptIgnored
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Enters this monitor. Blocks at most the given time, and may be interrupted.    *    * @return whether the monitor was entered    */
DECL|method|enterInterruptibly (long time, TimeUnit unit)
specifier|public
name|boolean
name|enterInterruptibly
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|lock
operator|.
name|tryLock
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
return|;
block|}
comment|/**    * Enters this monitor if it is possible to do so immediately. Does not block.    *    *<p><b>Note:</b> This method disregards the fairness setting of this monitor.    *    * @return whether the monitor was entered    */
DECL|method|tryEnter ()
specifier|public
name|boolean
name|tryEnter
parameter_list|()
block|{
return|return
name|lock
operator|.
name|tryLock
argument_list|()
return|;
block|}
comment|/**    * Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted.    */
DECL|method|enterWhen (Guard guard)
specifier|public
name|void
name|enterWhen
parameter_list|(
name|Guard
name|guard
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|boolean
name|reentrant
init|=
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
name|waitInterruptibly
argument_list|(
name|guard
argument_list|,
name|reentrant
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
comment|/**    * Enters this monitor when the guard is satisfied. Blocks indefinitely.    */
DECL|method|enterWhenUninterruptibly (Guard guard)
specifier|public
name|void
name|enterWhenUninterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|boolean
name|reentrant
init|=
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|waitUninterruptibly
argument_list|(
name|guard
argument_list|,
name|reentrant
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
comment|/**    * Enters this monitor when the guard is satisfied. Blocks at most the given time, including both    * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be    * interrupted.    *    * @return whether the monitor was entered    */
DECL|method|enterWhen (Guard guard, long time, TimeUnit unit)
specifier|public
name|boolean
name|enterWhen
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|boolean
name|reentrant
init|=
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
decl_stmt|;
name|long
name|startNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lock
operator|.
name|tryLock
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|long
name|remainingNanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|time
argument_list|)
operator|-
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNanos
operator|)
decl_stmt|;
name|satisfied
operator|=
name|waitInterruptibly
argument_list|(
name|guard
argument_list|,
name|remainingNanos
argument_list|,
name|reentrant
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Enters this monitor when the guard is satisfied. Blocks at most the given time, including    * both the time to acquire the lock and the time to wait for the guard to be satisfied.    *    * @return whether the monitor was entered    */
DECL|method|enterWhenUninterruptibly (Guard guard, long time, TimeUnit unit)
specifier|public
name|boolean
name|enterWhenUninterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|boolean
name|reentrant
init|=
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
decl_stmt|;
name|long
name|startNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timeoutNanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|long
name|remainingNanos
init|=
name|timeoutNanos
decl_stmt|;
name|boolean
name|interruptIgnored
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|lock
operator|.
name|tryLock
argument_list|(
name|remainingNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
name|interruptIgnored
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|remainingNanos
operator|=
operator|(
name|timeoutNanos
operator|-
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNanos
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|satisfied
operator|=
name|waitUninterruptibly
argument_list|(
name|guard
argument_list|,
name|remainingNanos
argument_list|,
name|reentrant
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|interruptIgnored
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Enters this monitor if the guard is satisfied. Blocks indefinitely acquiring the lock, but    * does not wait for the guard to be satisfied.    *    * @return whether the monitor was entered    */
DECL|method|enterIf (Guard guard)
specifier|public
name|boolean
name|enterIf
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|satisfied
operator|=
name|guard
operator|.
name|isSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Enters this monitor if the guard is satisfied. Blocks indefinitely acquiring the lock, but does    * not wait for the guard to be satisfied, and may be interrupted.    *    * @return whether the monitor was entered    */
DECL|method|enterIfInterruptibly (Guard guard)
specifier|public
name|boolean
name|enterIfInterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|satisfied
operator|=
name|guard
operator|.
name|isSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the    * lock, but does not wait for the guard to be satisfied.    *    * @return whether the monitor was entered    */
DECL|method|enterIf (Guard guard, long time, TimeUnit unit)
specifier|public
name|boolean
name|enterIf
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
if|if
condition|(
operator|!
name|enter
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|satisfied
operator|=
name|guard
operator|.
name|isSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the    * lock, but does not wait for the guard to be satisfied, and may be interrupted.    *    * @return whether the monitor was entered    */
DECL|method|enterIfInterruptibly (Guard guard, long time, TimeUnit unit)
specifier|public
name|boolean
name|enterIfInterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
if|if
condition|(
operator|!
name|lock
operator|.
name|tryLock
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|satisfied
operator|=
name|guard
operator|.
name|isSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Enters this monitor if it is possible to do so immediately and the guard is satisfied. Does not    * block acquiring the lock and does not wait for the guard to be satisfied.    *    *<p><b>Note:</b> This method disregards the fairness setting of this monitor.    *    * @return whether the monitor was entered    */
DECL|method|tryEnterIf (Guard guard)
specifier|public
name|boolean
name|tryEnterIf
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
if|if
condition|(
operator|!
name|lock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|satisfied
decl_stmt|;
try|try
block|{
name|satisfied
operator|=
name|guard
operator|.
name|isSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
if|if
condition|(
name|satisfied
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be    * called only by a thread currently occupying this monitor.    */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitFor (Guard guard)
specifier|public
name|void
name|waitFor
parameter_list|(
name|Guard
name|guard
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
name|waitInterruptibly
argument_list|(
name|guard
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread    * currently occupying this monitor.    */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitForUninterruptibly (Guard guard)
specifier|public
name|void
name|waitForUninterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
name|waitUninterruptibly
argument_list|(
name|guard
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted.    * May be called only by a thread currently occupying this monitor.    *    * @return whether the guard is now satisfied    */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitFor (Guard guard, long time, TimeUnit unit)
specifier|public
name|boolean
name|waitFor
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
return|return
name|waitInterruptibly
argument_list|(
name|guard
argument_list|,
name|unit
operator|.
name|toNanos
argument_list|(
name|time
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Waits for the guard to be satisfied. Waits at most the given time. May be called only by a    * thread currently occupying this monitor.    *    * @return whether the guard is now satisfied    */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitForUninterruptibly (Guard guard, long time, TimeUnit unit)
specifier|public
name|boolean
name|waitForUninterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
return|return
name|waitUninterruptibly
argument_list|(
name|guard
argument_list|,
name|unit
operator|.
name|toNanos
argument_list|(
name|time
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Leaves this monitor. May be called only by a thread currently occupying this monitor.    */
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|leave ()
specifier|public
name|void
name|leave
parameter_list|()
block|{
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
if|if
condition|(
operator|!
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
try|try
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Forces all guards to be reevaluated so that threads waiting inside the monitor for guards    * whose conditions have become true<i>outside</i> of the monitor will be notified.    *    *<p>This never needs to be called by a thread occupying the monitor, because all other monitor    * methods ensure that all guards are evaluated whenever necessary.    */
DECL|method|reevaluateGuards ()
specifier|public
name|void
name|reevaluateGuards
parameter_list|()
block|{
specifier|final
name|ReentrantLock
name|lock
init|=
name|this
operator|.
name|lock
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns whether this monitor is using a fair ordering policy.    */
DECL|method|isFair ()
specifier|public
name|boolean
name|isFair
parameter_list|()
block|{
return|return
name|lock
operator|.
name|isFair
argument_list|()
return|;
block|}
comment|/**    * Returns whether this monitor is occupied by any thread. This method is designed for use in    * monitoring of the system state, not for synchronization control.    */
DECL|method|isOccupied ()
specifier|public
name|boolean
name|isOccupied
parameter_list|()
block|{
return|return
name|lock
operator|.
name|isLocked
argument_list|()
return|;
block|}
comment|/**    * Returns whether the current thread is occupying this monitor (has entered more times than it    * has left).    */
DECL|method|isOccupiedByCurrentThread ()
specifier|public
name|boolean
name|isOccupiedByCurrentThread
parameter_list|()
block|{
return|return
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
return|;
block|}
comment|/**    * Returns the number of times the current thread has entered this monitor in excess of the number    * of times it has left. Returns 0 if the current thread is not occupying this monitor.    */
DECL|method|getOccupiedDepth ()
specifier|public
name|int
name|getOccupiedDepth
parameter_list|()
block|{
return|return
name|lock
operator|.
name|getHoldCount
argument_list|()
return|;
block|}
comment|/**    * Returns an estimate of the number of threads waiting to enter this monitor. The value is only    * an estimate because the number of threads may change dynamically while this method traverses    * internal data structures. This method is designed for use in monitoring of the system state,    * not for synchronization control.    */
DECL|method|getQueueLength ()
specifier|public
name|int
name|getQueueLength
parameter_list|()
block|{
return|return
name|lock
operator|.
name|getQueueLength
argument_list|()
return|;
block|}
comment|/**    * Returns whether any threads are waiting to enter this monitor. Note that because cancellations    * may occur at any time, a {@code true} return does not guarantee that any other thread will ever    * enter this monitor. This method is designed primarily for use in monitoring of the system    * state.    */
DECL|method|hasQueuedThreads ()
specifier|public
name|boolean
name|hasQueuedThreads
parameter_list|()
block|{
return|return
name|lock
operator|.
name|hasQueuedThreads
argument_list|()
return|;
block|}
comment|/**    * Queries whether the given thread is waiting to enter this monitor. Note that because    * cancellations may occur at any time, a {@code true} return does not guarantee that this thread    * will ever enter this monitor. This method is designed primarily for use in monitoring of the    * system state.    */
DECL|method|hasQueuedThread (Thread thread)
specifier|public
name|boolean
name|hasQueuedThread
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
return|return
name|lock
operator|.
name|hasQueuedThread
argument_list|(
name|thread
argument_list|)
return|;
block|}
comment|/**    * Queries whether any threads are waiting for the given guard to become satisfied. Note that    * because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee    * that the guard becoming satisfied in the future will awaken any threads. This method is    * designed primarily for use in monitoring of the system state.    */
DECL|method|hasWaiters (Guard guard)
specifier|public
name|boolean
name|hasWaiters
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|guard
operator|.
name|waiterCount
operator|>
literal|0
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns an estimate of the number of threads waiting for the given guard to become satisfied.    * Note that because timeouts and interrupts may occur at any time, the estimate serves only as an    * upper bound on the actual number of waiters. This method is designed for use in monitoring of    * the system state, not for synchronization control.    */
DECL|method|getWaitQueueLength (Guard guard)
specifier|public
name|int
name|getWaitQueueLength
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
if|if
condition|(
name|guard
operator|.
name|monitor
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|()
throw|;
block|}
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|guard
operator|.
name|waiterCount
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|signalConditionsOfSatisfiedGuards (@ullable Guard interruptedGuard)
specifier|private
name|void
name|signalConditionsOfSatisfiedGuards
parameter_list|(
annotation|@
name|Nullable
name|Guard
name|interruptedGuard
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|Guard
argument_list|>
name|guards
init|=
name|this
operator|.
name|activeGuards
decl_stmt|;
specifier|final
name|int
name|guardCount
init|=
name|guards
operator|.
name|size
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|guardCount
condition|;
name|i
operator|++
control|)
block|{
name|Guard
name|guard
init|=
name|guards
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|guard
operator|==
name|interruptedGuard
operator|)
operator|&&
operator|(
name|guard
operator|.
name|waiterCount
operator|==
literal|1
operator|)
condition|)
block|{
comment|// That one waiter was just interrupted and is throwing InterruptedException rather than
comment|// paying attention to the guard being satisfied, so find another waiter on another guard.
continue|continue;
block|}
if|if
condition|(
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
name|guard
operator|.
name|condition
operator|.
name|signal
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|guardCount
condition|;
name|i
operator|++
control|)
block|{
name|Guard
name|guard
init|=
name|guards
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|guard
operator|.
name|condition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|incrementWaiters (Guard guard)
specifier|private
name|void
name|incrementWaiters
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
name|int
name|waiters
init|=
name|guard
operator|.
name|waiterCount
operator|++
decl_stmt|;
if|if
condition|(
name|waiters
operator|==
literal|0
condition|)
block|{
name|activeGuards
operator|.
name|add
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|decrementWaiters (Guard guard)
specifier|private
name|void
name|decrementWaiters
parameter_list|(
name|Guard
name|guard
parameter_list|)
block|{
name|int
name|waiters
init|=
operator|--
name|guard
operator|.
name|waiterCount
decl_stmt|;
if|if
condition|(
name|waiters
operator|==
literal|0
condition|)
block|{
name|activeGuards
operator|.
name|remove
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitInterruptibly (Guard guard, boolean signalBeforeWaiting)
specifier|private
name|void
name|waitInterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|boolean
name|signalBeforeWaiting
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
if|if
condition|(
name|signalBeforeWaiting
condition|)
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|incrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Condition
name|condition
init|=
name|guard
operator|.
name|condition
decl_stmt|;
do|do
block|{
try|try
block|{
name|condition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|interrupt
parameter_list|)
block|{
try|try
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
throw|throw
name|interrupt
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|decrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitUninterruptibly (Guard guard, boolean signalBeforeWaiting)
specifier|private
name|void
name|waitUninterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|boolean
name|signalBeforeWaiting
parameter_list|)
block|{
if|if
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
if|if
condition|(
name|signalBeforeWaiting
condition|)
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|incrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Condition
name|condition
init|=
name|guard
operator|.
name|condition
decl_stmt|;
do|do
block|{
name|condition
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|decrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitInterruptibly (Guard guard, long remainingNanos, boolean signalBeforeWaiting)
specifier|private
name|boolean
name|waitInterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|remainingNanos
parameter_list|,
name|boolean
name|signalBeforeWaiting
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
if|if
condition|(
name|signalBeforeWaiting
condition|)
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|incrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Condition
name|condition
init|=
name|guard
operator|.
name|condition
decl_stmt|;
do|do
block|{
if|if
condition|(
name|remainingNanos
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|remainingNanos
operator|=
name|condition
operator|.
name|awaitNanos
argument_list|(
name|remainingNanos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|interrupt
parameter_list|)
block|{
try|try
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
throw|throw
name|interrupt
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|decrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
DECL|method|waitUninterruptibly (Guard guard, long timeoutNanos, boolean signalBeforeWaiting)
specifier|private
name|boolean
name|waitUninterruptibly
parameter_list|(
name|Guard
name|guard
parameter_list|,
name|long
name|timeoutNanos
parameter_list|,
name|boolean
name|signalBeforeWaiting
parameter_list|)
block|{
if|if
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
name|long
name|startNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|signalBeforeWaiting
condition|)
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|interruptIgnored
init|=
literal|false
decl_stmt|;
try|try
block|{
name|incrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Condition
name|condition
init|=
name|guard
operator|.
name|condition
decl_stmt|;
name|long
name|remainingNanos
init|=
name|timeoutNanos
decl_stmt|;
do|do
block|{
if|if
condition|(
name|remainingNanos
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|remainingNanos
operator|=
name|condition
operator|.
name|awaitNanos
argument_list|(
name|remainingNanos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
try|try
block|{
name|signalConditionsOfSatisfiedGuards
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
name|interruptIgnored
operator|=
literal|true
expr_stmt|;
name|remainingNanos
operator|=
operator|(
name|timeoutNanos
operator|-
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNanos
operator|)
operator|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|guard
operator|.
name|isSatisfied
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|decrementWaiters
argument_list|(
name|guard
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|interruptIgnored
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

