begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Base class for services that do not need a thread while "running" but may need one during startup  * and shutdown. Subclasses can implement {@link #startUp} and {@link #shutDown} methods, each which  * run in a executor which by default uses a separate thread for each method.  *  * @author Chris Nokleberg  * @since 1.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
DECL|class|AbstractIdleService
specifier|public
specifier|abstract
class|class
name|AbstractIdleService
implements|implements
name|Service
block|{
comment|/* Thread names will look like {@code "MyService STARTING"}. */
DECL|field|threadNameSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|String
argument_list|>
name|threadNameSupplier
init|=
operator|new
name|ThreadNameSupplier
argument_list|()
decl_stmt|;
annotation|@
name|WeakOuter
DECL|class|ThreadNameSupplier
specifier|private
specifier|final
class|class
name|ThreadNameSupplier
implements|implements
name|Supplier
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|serviceName
argument_list|()
operator|+
literal|" "
operator|+
name|state
argument_list|()
return|;
block|}
block|}
comment|/* use AbstractService for state management */
DECL|field|delegate
specifier|private
specifier|final
name|Service
name|delegate
init|=
operator|new
name|DelegateService
argument_list|()
decl_stmt|;
annotation|@
name|WeakOuter
DECL|class|DelegateService
specifier|private
specifier|final
class|class
name|DelegateService
extends|extends
name|AbstractService
block|{
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
specifier|final
name|void
name|doStart
parameter_list|()
block|{
name|MoreExecutors
operator|.
name|renamingDecorator
argument_list|(
name|executor
argument_list|()
argument_list|,
name|threadNameSupplier
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startUp
argument_list|()
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|notifyFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
specifier|final
name|void
name|doStop
parameter_list|()
block|{
name|MoreExecutors
operator|.
name|renamingDecorator
argument_list|(
name|executor
argument_list|()
argument_list|,
name|threadNameSupplier
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|shutDown
argument_list|()
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|notifyFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|AbstractIdleService
operator|.
name|this
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** Constructor for use by subclasses. */
DECL|method|AbstractIdleService ()
specifier|protected
name|AbstractIdleService
parameter_list|()
block|{}
comment|/** Start the service. */
DECL|method|startUp ()
specifier|protected
specifier|abstract
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/** Stop the service. */
DECL|method|shutDown ()
specifier|protected
specifier|abstract
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Returns the {@link Executor} that will be used to run this service. Subclasses may override    * this method to use a custom {@link Executor}, which may configure its worker thread with a    * specific name, thread group or priority. The returned executor's {@link    * Executor#execute(Runnable) execute()} method is called when this service is started and    * stopped, and should return promptly.    */
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|MoreExecutors
operator|.
name|newThread
argument_list|(
name|threadNameSupplier
operator|.
name|get
argument_list|()
argument_list|,
name|command
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|serviceName
argument_list|()
operator|+
literal|" ["
operator|+
name|state
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
specifier|final
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isRunning
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|state ()
specifier|public
specifier|final
name|State
name|state
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|state
argument_list|()
return|;
block|}
comment|/**    * @since 13.0    */
annotation|@
name|Override
DECL|method|addListener (Listener listener, Executor executor)
specifier|public
specifier|final
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|delegate
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * @since 14.0    */
annotation|@
name|Override
DECL|method|failureCause ()
specifier|public
specifier|final
name|Throwable
name|failureCause
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|failureCause
argument_list|()
return|;
block|}
comment|/**    * @since 15.0    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|startAsync ()
specifier|public
specifier|final
name|Service
name|startAsync
parameter_list|()
block|{
name|delegate
operator|.
name|startAsync
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @since 15.0    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|stopAsync ()
specifier|public
specifier|final
name|Service
name|stopAsync
parameter_list|()
block|{
name|delegate
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @since 15.0    */
annotation|@
name|Override
DECL|method|awaitRunning ()
specifier|public
specifier|final
name|void
name|awaitRunning
parameter_list|()
block|{
name|delegate
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
block|}
comment|/**    * @since 15.0    */
annotation|@
name|Override
DECL|method|awaitRunning (long timeout, TimeUnit unit)
specifier|public
specifier|final
name|void
name|awaitRunning
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|TimeoutException
block|{
name|delegate
operator|.
name|awaitRunning
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
comment|/**    * @since 15.0    */
annotation|@
name|Override
DECL|method|awaitTerminated ()
specifier|public
specifier|final
name|void
name|awaitTerminated
parameter_list|()
block|{
name|delegate
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
block|}
comment|/**    * @since 15.0    */
annotation|@
name|Override
DECL|method|awaitTerminated (long timeout, TimeUnit unit)
specifier|public
specifier|final
name|void
name|awaitTerminated
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|TimeoutException
block|{
name|delegate
operator|.
name|awaitTerminated
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the name of this service. {@link AbstractIdleService} may include the name in debugging    * output.    *    * @since 14.0    */
DECL|method|serviceName ()
specifier|protected
name|String
name|serviceName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

