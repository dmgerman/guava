begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_comment
comment|/**  * A special purpose queue/executor that executes listener callbacks serially on a configured  * executor.  Each callback task can be enqueued and executed as separate phases.  *   *<p>This class is very similar to {@link SerializingExecutor} with the exception that tasks can  * be enqueued without necessarily executing immediately.  */
end_comment

begin_class
DECL|class|ListenerCallQueue
specifier|final
class|class
name|ListenerCallQueue
parameter_list|<
name|L
parameter_list|>
implements|implements
name|Runnable
block|{
comment|// TODO(cpovirk): consider using the logger associated with listener.getClass().
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ListenerCallQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|Callback
specifier|abstract
specifier|static
class|class
name|Callback
parameter_list|<
name|L
parameter_list|>
block|{
DECL|field|methodCall
specifier|private
specifier|final
name|String
name|methodCall
decl_stmt|;
DECL|method|Callback (String methodCall)
name|Callback
parameter_list|(
name|String
name|methodCall
parameter_list|)
block|{
name|this
operator|.
name|methodCall
operator|=
name|methodCall
expr_stmt|;
block|}
DECL|method|call (L listener)
specifier|abstract
name|void
name|call
parameter_list|(
name|L
name|listener
parameter_list|)
function_decl|;
comment|/** Helper method to add this callback to all the queues. */
DECL|method|enqueueOn (Iterable<ListenerCallQueue<L>> queues)
name|void
name|enqueueOn
parameter_list|(
name|Iterable
argument_list|<
name|ListenerCallQueue
argument_list|<
name|L
argument_list|>
argument_list|>
name|queues
parameter_list|)
block|{
for|for
control|(
name|ListenerCallQueue
argument_list|<
name|L
argument_list|>
name|queue
range|:
name|queues
control|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|listener
specifier|private
specifier|final
name|L
name|listener
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|waitQueue
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
specifier|private
specifier|final
name|Queue
argument_list|<
name|Callback
argument_list|<
name|L
argument_list|>
argument_list|>
name|waitQueue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
DECL|field|isThreadScheduled
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
specifier|private
name|boolean
name|isThreadScheduled
decl_stmt|;
DECL|method|ListenerCallQueue (L listener, Executor executor)
name|ListenerCallQueue
parameter_list|(
name|L
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|checkNotNull
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/** Enqueues a task to be run. */
DECL|method|add (Callback<L> callback)
specifier|synchronized
name|void
name|add
parameter_list|(
name|Callback
argument_list|<
name|L
argument_list|>
name|callback
parameter_list|)
block|{
name|waitQueue
operator|.
name|add
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
comment|/** Executes all listeners {@linkplain #add added} prior to this call, serially and in order.*/
DECL|method|execute ()
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|scheduleTaskRunner
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|isThreadScheduled
condition|)
block|{
name|isThreadScheduled
operator|=
literal|true
expr_stmt|;
name|scheduleTaskRunner
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scheduleTaskRunner
condition|)
block|{
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// reset state in case of an error so that later calls to execute will actually do something
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isThreadScheduled
operator|=
literal|false
expr_stmt|;
block|}
comment|// Log it and keep going.
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exception while running callbacks for "
operator|+
name|listener
operator|+
literal|" on "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|stillRunning
init|=
literal|true
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Callback
argument_list|<
name|L
argument_list|>
name|nextToRun
decl_stmt|;
synchronized|synchronized
init|(
name|ListenerCallQueue
operator|.
name|this
init|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isThreadScheduled
argument_list|)
expr_stmt|;
name|nextToRun
operator|=
name|waitQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextToRun
operator|==
literal|null
condition|)
block|{
name|isThreadScheduled
operator|=
literal|false
expr_stmt|;
name|stillRunning
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// Always run while _not_ holding the lock, to avoid deadlocks.
try|try
block|{
name|nextToRun
operator|.
name|call
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// Log it and keep going.
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exception while executing callback: "
operator|+
name|listener
operator|+
literal|"."
operator|+
name|nextToRun
operator|.
name|methodCall
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|stillRunning
condition|)
block|{
comment|// An Error is bubbling up, we should mark ourselves as no longer
comment|// running, that way if anyone tries to keep using us we won't be
comment|// corrupted.
synchronized|synchronized
init|(
name|ListenerCallQueue
operator|.
name|this
init|)
block|{
name|isThreadScheduled
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

