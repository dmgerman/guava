begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RunnableFuture
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Abstract {@link ListeningExecutorService} implementation that creates {@link ListenableFuture}  * instances for each {@link Runnable} and {@link Callable} submitted to it. These tasks are run  * with the abstract {@link #execute execute(Runnable)} method.  *  *<p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and  * termination.  *  * @author Chris Povirk  * @since 14.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|AbstractListeningExecutorService
specifier|public
specifier|abstract
class|class
name|AbstractListeningExecutorService
extends|extends
name|AbstractExecutorService
implements|implements
name|ListeningExecutorService
block|{
comment|/** @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0) */
annotation|@
name|Override
DECL|method|newTaskFor (Runnable runnable, T value)
specifier|protected
specifier|final
parameter_list|<
name|T
parameter_list|>
name|RunnableFuture
argument_list|<
name|T
argument_list|>
name|newTaskFor
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|T
name|value
parameter_list|)
block|{
return|return
name|TrustedListenableFutureTask
operator|.
name|create
argument_list|(
name|runnable
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/** @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0) */
annotation|@
name|Override
DECL|method|newTaskFor (Callable<T> callable)
specifier|protected
specifier|final
parameter_list|<
name|T
parameter_list|>
name|RunnableFuture
argument_list|<
name|T
argument_list|>
name|newTaskFor
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
return|return
name|TrustedListenableFutureTask
operator|.
name|create
argument_list|(
name|callable
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task)
specifier|public
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
return|return
operator|(
name|ListenableFuture
argument_list|<
name|?
argument_list|>
operator|)
name|super
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task, @Nullable T result)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|,
annotation|@
name|Nullable
name|T
name|result
parameter_list|)
block|{
return|return
operator|(
name|ListenableFuture
argument_list|<
name|T
argument_list|>
operator|)
name|super
operator|.
name|submit
argument_list|(
name|task
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Callable<T> task)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
block|{
return|return
operator|(
name|ListenableFuture
argument_list|<
name|T
argument_list|>
operator|)
name|super
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
block|}
end_class

end_unit

