begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is a modified version of   * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/AbstractExecutorService.java?revision=1.35  * which contained the following notice:  *  * Written by Doug Lea with assistance from members of JCP JSR-166 Expert Group and released to the  * public domain, as explained at http://creativecommons.org/publicdomain/zero/1.0/  *  * Rationale for copying:  * Guava targets JDK5, whose AbstractExecutorService class lacks the newTaskFor protected  * customization methods needed by MoreExecutors.listeningDecorator. This class is a copy of  * AbstractExecutorService from the JSR166 CVS repository. It contains the desired methods.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Provides default implementations of {@link ListeningExecutorService} execution methods. This  * class implements the<tt>submit</tt>,<tt>invokeAny</tt> and<tt>invokeAll</tt> methods using a  * {@link ListenableFutureTask} returned by<tt>newTaskFor</tt>.  For example, the implementation of  *<tt>submit(Runnable)</tt> creates an associated<tt>ListenableFutureTask</tt> that is executed  * and returned.  *  * @author Doug Lea  */
end_comment

begin_class
DECL|class|AbstractListeningExecutorService
specifier|abstract
class|class
name|AbstractListeningExecutorService
implements|implements
name|ListeningExecutorService
block|{
comment|/**    * Returns a<tt>ListenableFutureTask</tt> for the given runnable and default value.    *    * @param runnable the runnable task being wrapped    * @param value the default value for the returned future    * @return a<tt>ListenableFutureTask</tt> which when run will run the underlying runnable and    *         which, as a<tt>Future</tt>, will yield the given value as its result and provide for    *         cancellation of the underlying task.    */
DECL|method|newTaskFor (Runnable runnable, @Nullable T value)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ListenableFutureTask
argument_list|<
name|T
argument_list|>
name|newTaskFor
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
annotation|@
name|Nullable
name|T
name|value
parameter_list|)
block|{
return|return
name|ListenableFutureTask
operator|.
name|create
argument_list|(
name|runnable
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns a<tt>ListenableFutureTask</tt> for the given callable task.    *    * @param callable the callable task being wrapped    * @return a<tt>ListenableFutureTask</tt> which when run will call the underlying callable and    *         which, as a<tt>Future</tt>, will yield the callable's result as its result and provide    *         for cancellation of the underlying task.    */
DECL|method|newTaskFor (Callable<T> callable)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ListenableFutureTask
argument_list|<
name|T
argument_list|>
name|newTaskFor
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
return|return
name|ListenableFutureTask
operator|.
name|create
argument_list|(
name|callable
argument_list|)
return|;
block|}
comment|/**    * @throws RejectedExecutionException {@inheritDoc}    * @throws NullPointerException {@inheritDoc}    */
DECL|method|submit (Runnable task)
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ListenableFutureTask
argument_list|<
name|Void
argument_list|>
name|ftask
init|=
name|newTaskFor
argument_list|(
name|task
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|ftask
argument_list|)
expr_stmt|;
return|return
name|ftask
return|;
block|}
comment|/**    * @throws RejectedExecutionException {@inheritDoc}    * @throws NullPointerException {@inheritDoc}    */
DECL|method|submit (Runnable task, T result)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|T
name|result
parameter_list|)
block|{
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ListenableFutureTask
argument_list|<
name|T
argument_list|>
name|ftask
init|=
name|newTaskFor
argument_list|(
name|task
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|ftask
argument_list|)
expr_stmt|;
return|return
name|ftask
return|;
block|}
comment|/**    * @throws RejectedExecutionException {@inheritDoc}    * @throws NullPointerException {@inheritDoc}    */
DECL|method|submit (Callable<T> task)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ListenableFutureTask
argument_list|<
name|T
argument_list|>
name|ftask
init|=
name|newTaskFor
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|ftask
argument_list|)
expr_stmt|;
return|return
name|ftask
return|;
block|}
comment|/**    * the main mechanics of invokeAny.    */
DECL|method|doInvokeAny (Collection<? extends Callable<T>> tasks, boolean timed, long nanos)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doInvokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|boolean
name|timed
parameter_list|,
name|long
name|nanos
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|tasks
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|int
name|ntasks
init|=
name|tasks
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|ntasks
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|ntasks
argument_list|)
decl_stmt|;
name|ExecutorCompletionService
argument_list|<
name|T
argument_list|>
name|ecs
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// For efficiency, especially in executors with limited
comment|// parallelism, check to see if previously submitted tasks are
comment|// done before submitting more of them. This interleaving
comment|// plus the exception mechanics account for messiness of main
comment|// loop.
try|try
block|{
comment|// Record exceptions so that if we fail to obtain any
comment|// result, we can throw the last exception we got.
name|ExecutionException
name|ee
init|=
literal|null
decl_stmt|;
name|long
name|lastTime
init|=
name|timed
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|it
init|=
name|tasks
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Start one task for sure; the rest incrementally
name|futures
operator|.
name|add
argument_list|(
name|ecs
operator|.
name|submit
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|ntasks
expr_stmt|;
name|int
name|active
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Future
argument_list|<
name|T
argument_list|>
name|f
init|=
name|ecs
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ntasks
operator|>
literal|0
condition|)
block|{
operator|--
name|ntasks
expr_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|ecs
operator|.
name|submit
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|active
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|active
operator|==
literal|0
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|timed
condition|)
block|{
name|f
operator|=
name|ecs
operator|.
name|poll
argument_list|(
name|nanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|()
throw|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|nanos
operator|-=
name|now
operator|-
name|lastTime
expr_stmt|;
name|lastTime
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|ecs
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
operator|--
name|active
expr_stmt|;
try|try
block|{
return|return
name|f
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|eex
parameter_list|)
block|{
name|ee
operator|=
name|eex
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
name|ee
operator|=
operator|new
name|ExecutionException
argument_list|(
name|rex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ee
operator|==
literal|null
condition|)
block|{
name|ee
operator|=
operator|new
name|ExecutionException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ee
throw|;
block|}
finally|finally
block|{
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
name|f
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
block|{
return|return
name|doInvokeAny
argument_list|(
name|tasks
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|cannotHappen
parameter_list|)
block|{
comment|// assert false;
return|return
literal|null
return|;
block|}
block|}
DECL|method|invokeAny ( Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|doInvokeAny
argument_list|(
name|tasks
argument_list|,
literal|true
argument_list|,
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
argument_list|)
return|;
block|}
DECL|method|invokeAll (Collection<? extends Callable<T>> tasks)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|tasks
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|Callable
argument_list|<
name|T
argument_list|>
name|t
range|:
name|tasks
control|)
block|{
name|ListenableFutureTask
argument_list|<
name|T
argument_list|>
name|f
init|=
name|newTaskFor
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isDone
argument_list|()
condition|)
block|{
try|try
block|{
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|ignore
parameter_list|)
block|{           }
catch|catch
parameter_list|(
name|ExecutionException
name|ignore
parameter_list|)
block|{           }
block|}
block|}
name|done
operator|=
literal|true
expr_stmt|;
return|return
name|futures
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|done
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
name|f
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|invokeAll ( Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|tasks
operator|==
literal|null
operator|||
name|unit
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|long
name|nanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|Callable
argument_list|<
name|T
argument_list|>
name|t
range|:
name|tasks
control|)
name|futures
operator|.
name|add
argument_list|(
name|newTaskFor
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lastTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// Interleave time checks and calls to execute in case
comment|// executor doesn't have any/much parallelism.
name|Iterator
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|it
init|=
name|futures
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|execute
argument_list|(
call|(
name|Runnable
call|)
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|nanos
operator|-=
name|now
operator|-
name|lastTime
expr_stmt|;
name|lastTime
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|nanos
operator|<=
literal|0
condition|)
block|{
return|return
name|futures
return|;
block|}
block|}
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isDone
argument_list|()
condition|)
block|{
if|if
condition|(
name|nanos
operator|<=
literal|0
condition|)
block|{
return|return
name|futures
return|;
block|}
try|try
block|{
name|f
operator|.
name|get
argument_list|(
name|nanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|ignore
parameter_list|)
block|{           }
catch|catch
parameter_list|(
name|ExecutionException
name|ignore
parameter_list|)
block|{           }
catch|catch
parameter_list|(
name|TimeoutException
name|toe
parameter_list|)
block|{
return|return
name|futures
return|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|nanos
operator|-=
name|now
operator|-
name|lastTime
expr_stmt|;
name|lastTime
operator|=
name|now
expr_stmt|;
block|}
block|}
name|done
operator|=
literal|true
expr_stmt|;
return|return
name|futures
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|done
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|T
argument_list|>
name|f
range|:
name|futures
control|)
name|f
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

