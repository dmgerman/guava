begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A TimeLimiter implementation which actually does not attempt to limit time at all. This may be  * desirable to use in some unit tests. More importantly, attempting to debug a call which is  * time-limited would be extremely annoying, so this gives you a time-limiter you can easily swap in  * for your real time-limiter while you're debugging.  *  * @author Kevin Bourrillion  * @author Jens Nyman  * @since 1.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|GwtIncompatible
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|FakeTimeLimiter
specifier|public
specifier|final
class|class
name|FakeTimeLimiter
implements|implements
name|TimeLimiter
block|{
annotation|@
name|Override
DECL|method|newProxy ( T target, Class<T> interfaceType, long timeoutDuration, TimeUnit timeoutUnit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newProxy
parameter_list|(
name|T
name|target
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|interfaceType
parameter_list|,
name|long
name|timeoutDuration
parameter_list|,
name|TimeUnit
name|timeoutUnit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|interfaceType
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|timeoutUnit
argument_list|)
expr_stmt|;
return|return
name|target
return|;
comment|// ha ha
block|}
annotation|@
name|Override
annotation|@
name|ParametricNullness
DECL|method|callWithTimeout ( Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
name|callWithTimeout
argument_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
argument_list|,
name|long
name|timeoutDuration
argument_list|,
name|TimeUnit
name|timeoutUnit
argument_list|)
throws|throws
name|ExecutionException
block|{
name|checkNotNull
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|checkNotNull
parameter_list|(
name|timeoutUnit
parameter_list|)
constructor_decl|;
try|try
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// It's a non-Error, non-Exception Throwable. Such classes are usually intended to extend
comment|// Exception, so we'll treat it like an Exception.
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_class

begin_annotation
annotation|@
name|Override
end_annotation

begin_annotation
annotation|@
name|ParametricNullness
end_annotation

begin_expr_stmt
DECL|method|callUninterruptiblyWithTimeout ( Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit)
specifier|public
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
name|callUninterruptiblyWithTimeout
argument_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
argument_list|,
name|long
name|timeoutDuration
argument_list|,
name|TimeUnit
name|timeoutUnit
argument_list|)
throws|throws
name|ExecutionException
block|{
end_expr_stmt

begin_return
return|return
name|callWithTimeout
argument_list|(
name|callable
argument_list|,
name|timeoutDuration
argument_list|,
name|timeoutUnit
argument_list|)
return|;
end_return

begin_function
unit|}    @
name|Override
DECL|method|runWithTimeout (Runnable runnable, long timeoutDuration, TimeUnit timeoutUnit)
specifier|public
name|void
name|runWithTimeout
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|long
name|timeoutDuration
parameter_list|,
name|TimeUnit
name|timeoutUnit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|timeoutUnit
argument_list|)
expr_stmt|;
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// It's a non-Error, non-Exception Throwable. Such classes are usually intended to extend
comment|// Exception, so we'll treat it like a RuntimeException.
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|runUninterruptiblyWithTimeout ( Runnable runnable, long timeoutDuration, TimeUnit timeoutUnit)
specifier|public
name|void
name|runUninterruptiblyWithTimeout
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|long
name|timeoutDuration
parameter_list|,
name|TimeUnit
name|timeoutUnit
parameter_list|)
block|{
name|runWithTimeout
argument_list|(
name|runnable
argument_list|,
name|timeoutDuration
argument_list|,
name|timeoutUnit
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

