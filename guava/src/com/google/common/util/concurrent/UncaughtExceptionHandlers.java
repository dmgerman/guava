begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|SEVERE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Factories for {@link UncaughtExceptionHandler} instances.  *  * @author Gregory Kick  * @since 8.0  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|UncaughtExceptionHandlers
specifier|public
specifier|final
class|class
name|UncaughtExceptionHandlers
block|{
DECL|method|UncaughtExceptionHandlers ()
specifier|private
name|UncaughtExceptionHandlers
parameter_list|()
block|{}
comment|/**    * Returns an exception handler that exits the system. This is particularly useful for the main    * thread, which may start up other, non-daemon threads, but fail to fully initialize the    * application successfully.    *    *<p>Example usage:    *    *<pre>    * public static void main(String[] args) {    *   Thread.currentThread().setUncaughtExceptionHandler(UncaughtExceptionHandlers.systemExit());    *   ...    *</pre>    *    *<p>The returned handler logs any exception at severity {@code SEVERE} and then shuts down the    * process with an exit status of 1, indicating abnormal termination.    */
DECL|method|systemExit ()
specifier|public
specifier|static
name|UncaughtExceptionHandler
name|systemExit
parameter_list|()
block|{
return|return
operator|new
name|Exiter
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|class|Exiter
specifier|static
specifier|final
class|class
name|Exiter
implements|implements
name|UncaughtExceptionHandler
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Exiter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|runtime
specifier|private
specifier|final
name|Runtime
name|runtime
decl_stmt|;
DECL|method|Exiter (Runtime runtime)
name|Exiter
parameter_list|(
name|Runtime
name|runtime
parameter_list|)
block|{
name|this
operator|.
name|runtime
operator|=
name|runtime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncaughtException (Thread t, Throwable e)
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|log
argument_list|(
name|SEVERE
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Caught an exception in %s.  Shutting down."
argument_list|,
name|t
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|errorInLogging
parameter_list|)
block|{
comment|// If logging fails, e.g. due to missing memory, at least try to log the
comment|// message and the cause for the failed logging.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|errorInLogging
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|runtime
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

