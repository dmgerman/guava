begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicIntegerFieldUpdater
operator|.
name|newUpdater
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceFieldUpdater
operator|.
name|newUpdater
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicIntegerFieldUpdater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceFieldUpdater
import|;
end_import

begin_comment
comment|/**  * A helper which does some thread-safe operations for aggregate futures, which must be implemented  * differently in GWT.  Namely:  *<p>Lazily initializes a set of seen exceptions  *<p>Decrements a counter atomically  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|AggregateFutureState
specifier|abstract
class|class
name|AggregateFutureState
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
specifier|final
name|AtomicReferenceFieldUpdater
argument_list|<
name|AggregateFutureState
argument_list|,
name|Set
argument_list|<
name|Throwable
argument_list|>
argument_list|>
DECL|field|SEEN_EXCEPTIONS_UDPATER
name|SEEN_EXCEPTIONS_UDPATER
init|=
name|newUpdater
argument_list|(
name|AggregateFutureState
operator|.
name|class
argument_list|,
operator|(
name|Class
operator|)
name|Set
operator|.
name|class
argument_list|,
literal|"seenExceptions"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicIntegerFieldUpdater
argument_list|<
name|AggregateFutureState
argument_list|>
DECL|field|REMAINING_COUNT_UPDATER
name|REMAINING_COUNT_UPDATER
init|=
name|newUpdater
argument_list|(
name|AggregateFutureState
operator|.
name|class
argument_list|,
literal|"remaining"
argument_list|)
decl_stmt|;
comment|// Initialized once the first time we see an exception
DECL|field|seenExceptions
specifier|private
specifier|volatile
name|Set
argument_list|<
name|Throwable
argument_list|>
name|seenExceptions
init|=
literal|null
decl_stmt|;
DECL|field|remaining
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|volatile
name|int
name|remaining
decl_stmt|;
DECL|method|AggregateFutureState (int remainingFutures)
name|AggregateFutureState
parameter_list|(
name|int
name|remainingFutures
parameter_list|)
block|{
name|this
operator|.
name|remaining
operator|=
name|remainingFutures
expr_stmt|;
block|}
DECL|method|getSeenExceptions ()
specifier|final
name|Set
argument_list|<
name|Throwable
argument_list|>
name|getSeenExceptions
parameter_list|()
block|{
name|Set
argument_list|<
name|Throwable
argument_list|>
name|seenExceptionsLocal
init|=
name|seenExceptions
decl_stmt|;
if|if
condition|(
name|seenExceptionsLocal
operator|==
literal|null
condition|)
block|{
name|SEEN_EXCEPTIONS_UDPATER
operator|.
name|compareAndSet
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|Sets
operator|.
expr|<
name|Throwable
operator|>
name|newConcurrentHashSet
argument_list|()
argument_list|)
expr_stmt|;
name|seenExceptionsLocal
operator|=
name|seenExceptions
expr_stmt|;
block|}
return|return
name|seenExceptionsLocal
return|;
block|}
DECL|method|decrementRemainingAndGet ()
specifier|final
name|int
name|decrementRemainingAndGet
parameter_list|()
block|{
return|return
name|REMAINING_COUNT_UPDATER
operator|.
name|decrementAndGet
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|releaseResourcesAfterFailure ()
name|void
name|releaseResourcesAfterFailure
parameter_list|()
block|{
name|seenExceptions
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

