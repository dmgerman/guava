begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_comment
comment|/**  * A {@link Reader} that reads the characters in a {@link CharSequence}. Like {@code StringReader},  * but works with any {@link CharSequence}.  *  * @author Colin Decker  */
end_comment

begin_comment
comment|// TODO(cgdecker): make this public? as a type, or a method in CharStreams?
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|CharSequenceReader
specifier|final
class|class
name|CharSequenceReader
extends|extends
name|Reader
block|{
DECL|field|seq
specifier|private
name|CharSequence
name|seq
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|mark
specifier|private
name|int
name|mark
decl_stmt|;
comment|/** Creates a new reader wrapping the given character sequence. */
DECL|method|CharSequenceReader (CharSequence seq)
specifier|public
name|CharSequenceReader
parameter_list|(
name|CharSequence
name|seq
parameter_list|)
block|{
name|this
operator|.
name|seq
operator|=
name|checkNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOpen ()
specifier|private
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|seq
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"reader closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|hasRemaining ()
specifier|private
name|boolean
name|hasRemaining
parameter_list|()
block|{
return|return
name|remaining
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|remaining ()
specifier|private
name|int
name|remaining
parameter_list|()
block|{
return|return
name|seq
operator|.
name|length
argument_list|()
operator|-
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|read (CharBuffer target)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|CharBuffer
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|charsToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|target
operator|.
name|remaining
argument_list|()
argument_list|,
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charsToRead
condition|;
name|i
operator|++
control|)
block|{
name|target
operator|.
name|put
argument_list|(
name|seq
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|charsToRead
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
return|return
name|hasRemaining
argument_list|()
condition|?
name|seq
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|read (char[] cbuf, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|cbuf
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|charsToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charsToRead
condition|;
name|i
operator|++
control|)
block|{
name|cbuf
index|[
name|off
operator|+
name|i
index|]
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|charsToRead
return|;
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
name|n
operator|>=
literal|0
argument_list|,
literal|"n (%s) may not be negative"
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|charsToSkip
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
comment|// safe because remaining is an int
name|pos
operator|+=
name|charsToSkip
expr_stmt|;
return|return
name|charsToSkip
return|;
block|}
annotation|@
name|Override
DECL|method|ready ()
specifier|public
specifier|synchronized
name|boolean
name|ready
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|mark (int readAheadLimit)
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readAheadLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
name|readAheadLimit
operator|>=
literal|0
argument_list|,
literal|"readAheadLimit (%s) may not be negative"
argument_list|,
name|readAheadLimit
argument_list|)
expr_stmt|;
name|checkOpen
argument_list|()
expr_stmt|;
name|mark
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|pos
operator|=
name|mark
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|seq
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

