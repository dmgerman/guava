begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Provides utility methods for working with character streams.  *  *<p>All method parameters must be non-null unless documented otherwise.  *  *<p>Some of the methods in this class take arguments with a generic type of  * {@code Readable& Closeable}. A {@link java.io.Reader} implements both of  * those interfaces. Similarly for {@code Appendable& Closeable} and  * {@link java.io.Writer}.  *  * @author Chris Nokleberg  * @author Bin Zhu  * @author Colin Decker  * @since 1.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|CharStreams
specifier|public
specifier|final
class|class
name|CharStreams
block|{
DECL|field|BUF_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUF_SIZE
init|=
literal|0x800
decl_stmt|;
comment|// 2K chars (4K bytes)
DECL|method|CharStreams ()
specifier|private
name|CharStreams
parameter_list|()
block|{}
comment|/**    * Returns a factory that will supply instances of {@link StringReader} that    * read a string value.    *    * @param value the string to read    * @return the factory    * @deprecated Use {@link CharSource#wrap(CharSequence}} instead. This method    *     is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|newReaderSupplier ( final String value)
specifier|public
specifier|static
name|InputSupplier
argument_list|<
name|StringReader
argument_list|>
name|newReaderSupplier
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|asInputSupplier
argument_list|(
name|CharSource
operator|.
name|wrap
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a factory that will supply instances of {@link InputStreamReader},    * using the given {@link InputStream} factory and character set.    *    * @param in the factory that will be used to open input streams    * @param charset the charset used to decode the input stream; see {@link    *     Charsets} for helpful predefined constants    * @return the factory    * @deprecated Use {@link ByteSource#asCharSource(Charset)} instead. This    *     method is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|newReaderSupplier ( final InputSupplier<? extends InputStream> in, final Charset charset)
specifier|public
specifier|static
name|InputSupplier
argument_list|<
name|InputStreamReader
argument_list|>
name|newReaderSupplier
parameter_list|(
specifier|final
name|InputSupplier
argument_list|<
name|?
extends|extends
name|InputStream
argument_list|>
name|in
parameter_list|,
specifier|final
name|Charset
name|charset
parameter_list|)
block|{
return|return
name|asInputSupplier
argument_list|(
name|ByteStreams
operator|.
name|asByteSource
argument_list|(
name|in
argument_list|)
operator|.
name|asCharSource
argument_list|(
name|charset
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a factory that will supply instances of {@link OutputStreamWriter},    * using the given {@link OutputStream} factory and character set.    *    * @param out the factory that will be used to open output streams    * @param charset the charset used to encode the output stream; see {@link    *     Charsets} for helpful predefined constants    * @return the factory    * @deprecated Use {@link ByteSink#asCharSink(Charset)} instead. This method    *     is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|newWriterSupplier ( final OutputSupplier<? extends OutputStream> out, final Charset charset)
specifier|public
specifier|static
name|OutputSupplier
argument_list|<
name|OutputStreamWriter
argument_list|>
name|newWriterSupplier
parameter_list|(
specifier|final
name|OutputSupplier
argument_list|<
name|?
extends|extends
name|OutputStream
argument_list|>
name|out
parameter_list|,
specifier|final
name|Charset
name|charset
parameter_list|)
block|{
return|return
name|asOutputSupplier
argument_list|(
name|ByteStreams
operator|.
name|asByteSink
argument_list|(
name|out
argument_list|)
operator|.
name|asCharSink
argument_list|(
name|charset
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Writes a character sequence (such as a string) to an appendable    * object from the given supplier.    *    * @param from the character sequence to write    * @param to the output supplier    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSink#write(CharSequence)} instead. This method    *     is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|write (CharSequence from, OutputSupplier<W> to)
specifier|public
specifier|static
parameter_list|<
name|W
extends|extends
name|Appendable
operator|&
name|Closeable
parameter_list|>
name|void
name|write
parameter_list|(
name|CharSequence
name|from
parameter_list|,
name|OutputSupplier
argument_list|<
name|W
argument_list|>
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|asCharSink
argument_list|(
name|to
argument_list|)
operator|.
name|write
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opens {@link Readable} and {@link Appendable} objects from the    * given factories, copies all characters between the two, and closes    * them.    *    * @param from the input factory    * @param to the output factory    * @return the number of characters copied    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSource#copyTo(CharSink) instead. This method is    *     scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Readable
operator|&
name|Closeable
parameter_list|,
DECL|method|copy (InputSupplier<R> from, OutputSupplier<W> to)
name|W
extends|extends
name|Appendable
operator|&
name|Closeable
parameter_list|>
name|long
name|copy
parameter_list|(
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|from
parameter_list|,
name|OutputSupplier
argument_list|<
name|W
argument_list|>
name|to
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|asCharSource
argument_list|(
name|from
argument_list|)
operator|.
name|copyTo
argument_list|(
name|asCharSink
argument_list|(
name|to
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Opens a {@link Readable} object from the supplier, copies all characters    * to the {@link Appendable} object, and closes the input. Does not close    * or flush the output.    *    * @param from the input factory    * @param to the object to write to    * @return the number of characters copied    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSource#copyTo(Appendable)} instead. This method    *     is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|copy ( InputSupplier<R> from, Appendable to)
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Readable
operator|&
name|Closeable
parameter_list|>
name|long
name|copy
parameter_list|(
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|from
parameter_list|,
name|Appendable
name|to
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|asCharSource
argument_list|(
name|from
argument_list|)
operator|.
name|copyTo
argument_list|(
name|to
argument_list|)
return|;
block|}
comment|/**    * Copies all characters between the {@link Readable} and {@link Appendable}    * objects. Does not close or flush either object.    *    * @param from the object to read from    * @param to the object to write to    * @return the number of characters copied    * @throws IOException if an I/O error occurs    */
DECL|method|copy (Readable from, Appendable to)
specifier|public
specifier|static
name|long
name|copy
parameter_list|(
name|Readable
name|from
parameter_list|,
name|Appendable
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|CharBuffer
name|buf
init|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
name|BUF_SIZE
argument_list|)
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|from
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|to
operator|.
name|append
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|total
operator|+=
name|buf
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Reads all characters from a {@link Readable} object into a {@link String}.    * Does not close the {@code Readable}.    *    * @param r the object to read from    * @return a string containing all the characters    * @throws IOException if an I/O error occurs    */
DECL|method|toString (Readable r)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Readable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toStringBuilder
argument_list|(
name|r
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the characters from a {@link Readable}& {@link Closeable} object    * supplied by a factory as a {@link String}.    *    * @param supplier the factory to read from    * @return a string containing all the characters    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSource#read()} instead. This method is    *     scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|toString ( InputSupplier<R> supplier)
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Readable
operator|&
name|Closeable
parameter_list|>
name|String
name|toString
parameter_list|(
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|supplier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|asCharSource
argument_list|(
name|supplier
argument_list|)
operator|.
name|read
argument_list|()
return|;
block|}
comment|/**    * Reads all characters from a {@link Readable} object into a new    * {@link StringBuilder} instance. Does not close the {@code Readable}.    *    * @param r the object to read from    * @return a {@link StringBuilder} containing all the characters    * @throws IOException if an I/O error occurs    */
DECL|method|toStringBuilder (Readable r)
specifier|private
specifier|static
name|StringBuilder
name|toStringBuilder
parameter_list|(
name|Readable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|r
argument_list|,
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
comment|/**    * Reads the first line from a {@link Readable}& {@link Closeable} object    * supplied by a factory. The line does not include line-termination    * characters, but does include other leading and trailing whitespace.    *    * @param supplier the factory to read from    * @return the first line, or null if the reader is empty    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSource#readFirstLine()} instead. This method is    *     scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|readFirstLine ( InputSupplier<R> supplier)
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Readable
operator|&
name|Closeable
parameter_list|>
name|String
name|readFirstLine
parameter_list|(
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|supplier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|asCharSource
argument_list|(
name|supplier
argument_list|)
operator|.
name|readFirstLine
argument_list|()
return|;
block|}
comment|/**    * Reads all of the lines from a {@link Readable}& {@link Closeable} object    * supplied by a factory. The lines do not include line-termination    * characters, but do include other leading and trailing whitespace.    *    * @param supplier the factory to read from    * @return a mutable {@link List} containing all the lines    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSource#readLines()} instead, but note that it    *     returns an {@code ImmutableList}. This method is scheduled for removal    *     in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|readLines ( InputSupplier<R> supplier)
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Readable
operator|&
name|Closeable
parameter_list|>
name|List
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|supplier
parameter_list|)
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|R
name|r
init|=
name|closer
operator|.
name|register
argument_list|(
name|supplier
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|readLines
argument_list|(
name|r
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads all of the lines from a {@link Readable} object. The lines do    * not include line-termination characters, but do include other    * leading and trailing whitespace.    *    *<p>Does not close the {@code Readable}. If reading files or resources you    * should use the {@link Files#readLines} and {@link Resources#readLines}    * methods.    *    * @param r the object to read from    * @return a mutable {@link List} containing all the lines    * @throws IOException if an I/O error occurs    */
DECL|method|readLines (Readable r)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|Readable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|lineReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Streams lines from a {@link Readable} object, stopping when the processor    * returns {@code false} or all lines have been read and returning the result    * produced by the processor. Does not close {@code readable}. Note that this    * method may not fully consume the contents of {@code readable} if the    * processor stops processing early.    *    * @throws IOException if an I/O error occurs    * @since 14.0    */
DECL|method|readLines ( Readable readable, LineProcessor<T> processor)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|readLines
parameter_list|(
name|Readable
name|readable
parameter_list|,
name|LineProcessor
argument_list|<
name|T
argument_list|>
name|processor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|readable
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
name|readable
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|lineReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|processor
operator|.
name|processLine
argument_list|(
name|line
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|processor
operator|.
name|getResult
argument_list|()
return|;
block|}
comment|/**    * Streams lines from a {@link Readable} and {@link Closeable} object    * supplied by a factory, stopping when our callback returns false, or we    * have read all of the lines.    *    * @param supplier the factory to read from    * @param callback the LineProcessor to use to handle the lines    * @return the output of processing the lines    * @throws IOException if an I/O error occurs    * @deprecated Use {@link CharSource#readLines(LineProcessor)} instead. This    *     method is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|readLines ( InputSupplier<R> supplier, LineProcessor<T> callback)
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|Readable
operator|&
name|Closeable
parameter_list|,
name|T
parameter_list|>
name|T
name|readLines
parameter_list|(
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|supplier
parameter_list|,
name|LineProcessor
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|supplier
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|callback
argument_list|)
expr_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|R
name|r
init|=
name|closer
operator|.
name|register
argument_list|(
name|supplier
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|readLines
argument_list|(
name|r
argument_list|,
name|callback
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Joins multiple {@link Reader} suppliers into a single supplier.    * Reader returned from the supplier will contain the concatenated data    * from the readers of the underlying suppliers.    *    *<p>Reading from the joined reader will throw a {@link NullPointerException}    * if any of the suppliers are null or return null.    *    *<p>Only one underlying reader will be open at a time. Closing the    * joined reader will close the open underlying reader.    *    * @param suppliers the suppliers to concatenate    * @return a supplier that will return a reader containing the concatenated    *     data    * @deprecated Use {@link CharSource#concat(Iterable)} instead. This method    *     is scheduled for removal in Guava 18.0.    */
annotation|@
name|Deprecated
DECL|method|join ( final Iterable<? extends InputSupplier<? extends Reader>> suppliers)
specifier|public
specifier|static
name|InputSupplier
argument_list|<
name|Reader
argument_list|>
name|join
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
argument_list|>
name|suppliers
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|suppliers
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|CharSource
argument_list|>
name|sources
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|suppliers
argument_list|,
operator|new
name|Function
argument_list|<
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
argument_list|,
name|CharSource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CharSource
name|apply
parameter_list|(
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|asCharSource
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
block|)
function|;
return|return
name|asInputSupplier
argument_list|(
name|CharSource
operator|.
name|concat
argument_list|(
name|sources
argument_list|)
argument_list|)
return|;
block|}
end_class

begin_comment
comment|/**    * Varargs form of {@link #join(Iterable)}.    *    * @deprecated Use {@link CharSource#concat(CharSource[])} instead. This    *     method is scheduled for removal in Guava 18.0.    */
end_comment

begin_function
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// suppress "possible heap pollution" warning in JDK7
DECL|method|join ( InputSupplier<? extends Reader>.... suppliers)
specifier|public
specifier|static
name|InputSupplier
argument_list|<
name|Reader
argument_list|>
name|join
parameter_list|(
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
modifier|...
name|suppliers
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|suppliers
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Discards {@code n} characters of data from the reader. This method    * will block until the full amount has been skipped. Does not close the    * reader.    *    * @param reader the reader to read from    * @param n the number of characters to skip    * @throws EOFException if this stream reaches the end before skipping all    *     the characters    * @throws IOException if an I/O error occurs    */
end_comment

begin_function
DECL|method|skipFully (Reader reader, long n)
specifier|public
specifier|static
name|void
name|skipFully
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|long
name|amt
init|=
name|reader
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|amt
operator|==
literal|0
condition|)
block|{
comment|// force a blocking read
if|if
condition|(
name|reader
operator|.
name|read
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|n
operator|--
expr_stmt|;
block|}
else|else
block|{
name|n
operator|-=
name|amt
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Returns a {@link Writer} that simply discards written chars.    *    * @since 15.0    */
end_comment

begin_function
DECL|method|nullWriter ()
specifier|public
specifier|static
name|Writer
name|nullWriter
parameter_list|()
block|{
return|return
name|NullWriter
operator|.
name|INSTANCE
return|;
block|}
end_function

begin_class
DECL|class|NullWriter
specifier|private
specifier|static
specifier|final
class|class
name|NullWriter
extends|extends
name|Writer
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|NullWriter
name|INSTANCE
init|=
operator|new
name|NullWriter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|write (int c)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|c
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|write (char[] cbuf)
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|cbuf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (char[] cbuf, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|cbuf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (String str)
specifier|public
name|void
name|write
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (String str, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append (CharSequence csq)
specifier|public
name|Writer
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|csq
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|append (CharSequence csq, int start, int end)
specifier|public
name|Writer
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|csq
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|append (char c)
specifier|public
name|Writer
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CharStreams.nullWriter()"
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Returns a Writer that sends all output to the given {@link Appendable}    * target. Closing the writer will close the target if it is {@link    * Closeable}, and flushing the writer will flush the target if it is {@link    * java.io.Flushable}.    *    * @param target the object to which output will be sent    * @return a new Writer object, unless target is a Writer, in which case the    *     target is returned    */
end_comment

begin_function
DECL|method|asWriter (Appendable target)
specifier|public
specifier|static
name|Writer
name|asWriter
parameter_list|(
name|Appendable
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|Writer
condition|)
block|{
return|return
operator|(
name|Writer
operator|)
name|target
return|;
block|}
return|return
operator|new
name|AppendableWriter
argument_list|(
name|target
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// TODO(user): Remove these once Input/OutputSupplier methods are removed
end_comment

begin_function
DECL|method|asReader (final Readable readable)
specifier|static
name|Reader
name|asReader
parameter_list|(
specifier|final
name|Readable
name|readable
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|readable
argument_list|)
expr_stmt|;
if|if
condition|(
name|readable
operator|instanceof
name|Reader
condition|)
block|{
return|return
operator|(
name|Reader
operator|)
name|readable
return|;
block|}
return|return
operator|new
name|Reader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|CharBuffer
operator|.
name|wrap
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|CharBuffer
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readable
operator|.
name|read
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|readable
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|readable
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a view of the given {@code Readable} supplier as a    * {@code CharSource}.    *    *<p>This method is a temporary method provided for easing migration from    * suppliers to sources and sinks.    *    * @since 15.0    * @deprecated Convert all {@code InputSupplier<? extends Readable>}    *     implementations to extend {@link CharSource} or provide a method for    *     viewing the object as a {@code CharSource}. This method is scheduled    *     for removal in Guava 18.0.    */
end_comment

begin_function
annotation|@
name|Deprecated
DECL|method|asCharSource ( final InputSupplier<? extends Readable> supplier)
specifier|public
specifier|static
name|CharSource
name|asCharSource
parameter_list|(
specifier|final
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Readable
argument_list|>
name|supplier
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|supplier
argument_list|)
expr_stmt|;
return|return
operator|new
name|CharSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Reader
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|asReader
argument_list|(
name|supplier
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CharStreams.asCharSource("
operator|+
name|supplier
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a view of the given {@code Appendable} supplier as a    * {@code CharSink}.    *    *<p>This method is a temporary method provided for easing migration from    * suppliers to sources and sinks.    *    * @since 15.0    * @deprecated Convert all {@code OutputSupplier<? extends Appendable>}    *     implementations to extend {@link CharSink} or provide a method for    *     viewing the object as a {@code CharSink}. This method is scheduled    *     for removal in Guava 18.0.    */
end_comment

begin_function
annotation|@
name|Deprecated
DECL|method|asCharSink ( final OutputSupplier<? extends Appendable> supplier)
specifier|public
specifier|static
name|CharSink
name|asCharSink
parameter_list|(
specifier|final
name|OutputSupplier
argument_list|<
name|?
extends|extends
name|Appendable
argument_list|>
name|supplier
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|supplier
argument_list|)
expr_stmt|;
return|return
operator|new
name|CharSink
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Writer
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|asWriter
argument_list|(
name|supplier
operator|.
name|getOutput
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CharStreams.asCharSink("
operator|+
name|supplier
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// used internally where known to be safe
DECL|method|asInputSupplier ( CharSource source)
specifier|static
parameter_list|<
name|R
extends|extends
name|Reader
parameter_list|>
name|InputSupplier
argument_list|<
name|R
argument_list|>
name|asInputSupplier
parameter_list|(
name|CharSource
name|source
parameter_list|)
block|{
return|return
operator|(
name|InputSupplier
operator|)
name|checkNotNull
argument_list|(
name|source
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// used internally where known to be safe
DECL|method|asOutputSupplier ( CharSink sink)
specifier|static
parameter_list|<
name|W
extends|extends
name|Writer
parameter_list|>
name|OutputSupplier
argument_list|<
name|W
argument_list|>
name|asOutputSupplier
parameter_list|(
name|CharSink
name|sink
parameter_list|)
block|{
return|return
operator|(
name|OutputSupplier
operator|)
name|checkNotNull
argument_list|(
name|sink
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

