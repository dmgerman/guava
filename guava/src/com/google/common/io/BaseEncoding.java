begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
operator|.
name|divide
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
operator|.
name|log2
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|FLOOR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckReturnValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A binary encoding scheme for reversibly translating between byte sequences and printable ASCII  * strings. This class includes several constants for encoding schemes specified by<a  * href="http://tools.ietf.org/html/rfc4648">RFC 4648</a>. For example, the expression:  *  *<pre>   {@code  *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>  *  *<p>returns the string {@code "MZXW6==="}, and<pre>   {@code  *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>  *  *<p>...returns the ASCII bytes of the string {@code "foo"}.  *  *<p>By default, {@code BaseEncoding}'s behavior is relatively strict and in accordance with  * RFC 4648.  Decoding rejects characters in the wrong case, though padding is optional.  * To modify encoding and decoding behavior, use configuration methods to obtain a new encoding  * with modified behavior:  *  *<pre>   {@code  *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>  *  *<p>Warning: BaseEncoding instances are immutable.  Invoking a configuration method has no effect  * on the receiving instance; you must store and use the new encoding instance it returns, instead.  *  *<pre>   {@code  *   // Do NOT do this  *   BaseEncoding hex = BaseEncoding.base16();  *   hex.lowerCase(); // does nothing!  *   return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>  *  *<p>It is guaranteed that {@code encoding.decode(encoding.encode(x))} is always equal to  * {@code x}, but the reverse does not necessarily hold.  *  *<p>  *<table>  *<tr>  *<th>Encoding  *<th>Alphabet  *<th>{@code char:byte} ratio  *<th>Default padding  *<th>Comments  *<tr>  *<td>{@link #base16()}  *<td>0-9 A-F  *<td>2.00  *<td>N/A  *<td>Traditional hexadecimal.  Defaults to upper case.  *<tr>  *<td>{@link #base32()}  *<td>A-Z 2-7  *<td>1.60  *<td>=  *<td>Human-readable; no possibility of mixing up 0/O or 1/I.  Defaults to upper case.  *<tr>  *<td>{@link #base32Hex()}  *<td>0-9 A-V  *<td>1.60  *<td>=  *<td>"Numerical" base 32; extended from the traditional hex alphabet.  Defaults to upper case.  *<tr>  *<td>{@link #base64()}  *<td>A-Z a-z 0-9 + /  *<td>1.33  *<td>=  *<td>  *<tr>  *<td>{@link #base64Url()}  *<td>A-Z a-z 0-9 - _  *<td>1.33  *<td>=  *<td>Safe to use as filenames, or to pass in URLs without escaping  *</table>  *  *<p>  * All instances of this class are immutable, so they may be stored safely as static constants.  *  * @author Louis Wasserman  * @since 14.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|BaseEncoding
specifier|public
specifier|abstract
class|class
name|BaseEncoding
block|{
comment|// TODO(lowasser): consider making encodeTo(Appendable, byte[], int, int) public.
DECL|method|BaseEncoding ()
name|BaseEncoding
parameter_list|()
block|{}
comment|/**    * Exception indicating invalid base-encoded input encountered while decoding.    *    * @author Louis Wasserman    * @since 15.0    */
DECL|class|DecodingException
specifier|public
specifier|static
specifier|final
class|class
name|DecodingException
extends|extends
name|IOException
block|{
DECL|method|DecodingException (String message)
name|DecodingException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|DecodingException (Throwable cause)
name|DecodingException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Encodes the specified byte array, and returns the encoded {@code String}.    */
DECL|method|encode (byte[] bytes)
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|encode
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Encodes the specified range of the specified byte array, and returns the encoded    * {@code String}.    */
DECL|method|encode (byte[] bytes, int off, int len)
specifier|public
specifier|final
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|maxEncodedSize
argument_list|(
name|len
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|encodeTo
argument_list|(
name|result
argument_list|,
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns an {@code OutputStream} that encodes bytes using this encoding into the specified    * {@code Writer}.  When the returned {@code OutputStream} is closed, so is the backing    * {@code Writer}.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Writer,OutputStream"
argument_list|)
DECL|method|encodingStream (Writer writer)
specifier|public
specifier|abstract
name|OutputStream
name|encodingStream
parameter_list|(
name|Writer
name|writer
parameter_list|)
function_decl|;
comment|/**    * Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ByteSink,CharSink"
argument_list|)
DECL|method|encodingSink (final CharSink encodedSink)
specifier|public
specifier|final
name|ByteSink
name|encodingSink
parameter_list|(
specifier|final
name|CharSink
name|encodedSink
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|encodedSink
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteSink
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|encodingStream
argument_list|(
name|encodedSink
operator|.
name|openStream
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// TODO(lowasser): document the extent of leniency, probably after adding ignore(CharMatcher)
DECL|method|extract (byte[] result, int length)
specifier|private
specifier|static
name|byte
index|[]
name|extract
parameter_list|(
name|byte
index|[]
name|result
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
name|result
operator|.
name|length
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
name|byte
index|[]
name|trunc
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|trunc
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|trunc
return|;
block|}
block|}
comment|/**    * Decodes the specified character sequence, and returns the resulting {@code byte[]}.    * This is the inverse operation to {@link #encode(byte[])}.    *    * @throws IllegalArgumentException if the input is not a valid encoded string according to this    *         encoding.    */
DECL|method|decode (CharSequence chars)
specifier|public
specifier|final
name|byte
index|[]
name|decode
parameter_list|(
name|CharSequence
name|chars
parameter_list|)
block|{
try|try
block|{
return|return
name|decodeChecked
argument_list|(
name|chars
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DecodingException
name|badInput
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|badInput
argument_list|)
throw|;
block|}
block|}
comment|/**    * Decodes the specified character sequence, and returns the resulting {@code byte[]}.    * This is the inverse operation to {@link #encode(byte[])}.    *    * @throws DecodingException if the input is not a valid encoded string according to this    *         encoding.    */
DECL|method|decodeChecked (CharSequence chars)
specifier|final
name|byte
index|[]
name|decodeChecked
parameter_list|(
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|DecodingException
block|{
name|chars
operator|=
name|padding
argument_list|()
operator|.
name|trimTrailingFrom
argument_list|(
name|chars
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
name|maxDecodedSize
argument_list|(
name|chars
operator|.
name|length
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|int
name|len
init|=
name|decodeTo
argument_list|(
name|tmp
argument_list|,
name|chars
argument_list|)
decl_stmt|;
return|return
name|extract
argument_list|(
name|tmp
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * Returns an {@code InputStream} that decodes base-encoded input from the specified    * {@code Reader}.  The returned stream throws a {@link DecodingException} upon decoding-specific    * errors.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Reader,InputStream"
argument_list|)
DECL|method|decodingStream (Reader reader)
specifier|public
specifier|abstract
name|InputStream
name|decodingStream
parameter_list|(
name|Reader
name|reader
parameter_list|)
function_decl|;
comment|/**    * Returns a {@code ByteSource} that reads base-encoded bytes from the specified    * {@code CharSource}.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ByteSource,CharSource"
argument_list|)
DECL|method|decodingSource (final CharSource encodedSource)
specifier|public
specifier|final
name|ByteSource
name|decodingSource
parameter_list|(
specifier|final
name|CharSource
name|encodedSource
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|encodedSource
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|decodingStream
argument_list|(
name|encodedSource
operator|.
name|openStream
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// Implementations for encoding/decoding
DECL|method|maxEncodedSize (int bytes)
specifier|abstract
name|int
name|maxEncodedSize
parameter_list|(
name|int
name|bytes
parameter_list|)
function_decl|;
DECL|method|encodeTo (Appendable target, byte[] bytes, int off, int len)
specifier|abstract
name|void
name|encodeTo
parameter_list|(
name|Appendable
name|target
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|maxDecodedSize (int chars)
specifier|abstract
name|int
name|maxDecodedSize
parameter_list|(
name|int
name|chars
parameter_list|)
function_decl|;
DECL|method|decodeTo (byte[] target, CharSequence chars)
specifier|abstract
name|int
name|decodeTo
parameter_list|(
name|byte
index|[]
name|target
parameter_list|,
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|DecodingException
function_decl|;
DECL|method|padding ()
specifier|abstract
name|CharMatcher
name|padding
parameter_list|()
function_decl|;
comment|// Modified encoding generators
comment|/**    * Returns an encoding that behaves equivalently to this encoding, but omits any padding    * characters as specified by<a href="http://tools.ietf.org/html/rfc4648#section-3.2">RFC 4648    * section 3.2</a>, Padding of Encoded Data.    */
annotation|@
name|CheckReturnValue
DECL|method|omitPadding ()
specifier|public
specifier|abstract
name|BaseEncoding
name|omitPadding
parameter_list|()
function_decl|;
comment|/**    * Returns an encoding that behaves equivalently to this encoding, but uses an alternate character    * for padding.    *    * @throws IllegalArgumentException if this padding character is already used in the alphabet or a    *         separator    */
annotation|@
name|CheckReturnValue
DECL|method|withPadChar (char padChar)
specifier|public
specifier|abstract
name|BaseEncoding
name|withPadChar
parameter_list|(
name|char
name|padChar
parameter_list|)
function_decl|;
comment|/**    * Returns an encoding that behaves equivalently to this encoding, but adds a separator string    * after every {@code n} characters. Any occurrences of any characters that occur in the separator    * are skipped over in decoding.    *    * @throws IllegalArgumentException if any alphabet or padding characters appear in the separator    *         string, or if {@code n<= 0}    * @throws UnsupportedOperationException if this encoding already uses a separator    */
annotation|@
name|CheckReturnValue
DECL|method|withSeparator (String separator, int n)
specifier|public
specifier|abstract
name|BaseEncoding
name|withSeparator
parameter_list|(
name|String
name|separator
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
comment|/**    * Returns an encoding that behaves equivalently to this encoding, but encodes and decodes with    * uppercase letters. Padding and separator characters remain in their original case.    *    * @throws IllegalStateException if the alphabet used by this encoding contains mixed upper- and    *         lower-case characters    */
annotation|@
name|CheckReturnValue
DECL|method|upperCase ()
specifier|public
specifier|abstract
name|BaseEncoding
name|upperCase
parameter_list|()
function_decl|;
comment|/**    * Returns an encoding that behaves equivalently to this encoding, but encodes and decodes with    * lowercase letters. Padding and separator characters remain in their original case.    *    * @throws IllegalStateException if the alphabet used by this encoding contains mixed upper- and    *         lower-case characters    */
annotation|@
name|CheckReturnValue
DECL|method|lowerCase ()
specifier|public
specifier|abstract
name|BaseEncoding
name|lowerCase
parameter_list|()
function_decl|;
DECL|field|BASE64
specifier|private
specifier|static
specifier|final
name|BaseEncoding
name|BASE64
init|=
operator|new
name|Base64Encoding
argument_list|(
literal|"base64()"
argument_list|,
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
argument_list|,
literal|'='
argument_list|)
decl_stmt|;
comment|/**    * The "base64" base encoding specified by<a    * href="http://tools.ietf.org/html/rfc4648#section-4">RFC 4648 section 4</a>, Base 64 Encoding.    * (This is the same as the base 64 encoding from<a    * href="http://tools.ietf.org/html/rfc3548#section-3">RFC 3548</a>.)    *    *<p>The character {@code '='} is used for padding, but can be {@linkplain #omitPadding()    * omitted} or {@linkplain #withPadChar(char) replaced}.    *    *<p>No line feeds are added by default, as per<a    * href="http://tools.ietf.org/html/rfc4648#section-3.1"> RFC 4648 section 3.1</a>, Line Feeds in    * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.    */
DECL|method|base64 ()
specifier|public
specifier|static
name|BaseEncoding
name|base64
parameter_list|()
block|{
return|return
name|BASE64
return|;
block|}
DECL|field|BASE64_URL
specifier|private
specifier|static
specifier|final
name|BaseEncoding
name|BASE64_URL
init|=
operator|new
name|Base64Encoding
argument_list|(
literal|"base64Url()"
argument_list|,
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
argument_list|,
literal|'='
argument_list|)
decl_stmt|;
comment|/**    * The "base64url" encoding specified by<a    * href="http://tools.ietf.org/html/rfc4648#section-5">RFC 4648 section 5</a>, Base 64 Encoding    * with URL and Filename Safe Alphabet, also sometimes referred to as the "web safe Base64."    * (This is the same as the base 64 encoding with URL and filename safe alphabet from<a    * href="http://tools.ietf.org/html/rfc3548#section-4">RFC 3548</a>.)    *    *<p>The character {@code '='} is used for padding, but can be {@linkplain #omitPadding()    * omitted} or {@linkplain #withPadChar(char) replaced}.    *    *<p>No line feeds are added by default, as per<a    * href="http://tools.ietf.org/html/rfc4648#section-3.1"> RFC 4648 section 3.1</a>, Line Feeds in    * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.    */
DECL|method|base64Url ()
specifier|public
specifier|static
name|BaseEncoding
name|base64Url
parameter_list|()
block|{
return|return
name|BASE64_URL
return|;
block|}
DECL|field|BASE32
specifier|private
specifier|static
specifier|final
name|BaseEncoding
name|BASE32
init|=
operator|new
name|StandardBaseEncoding
argument_list|(
literal|"base32()"
argument_list|,
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
argument_list|,
literal|'='
argument_list|)
decl_stmt|;
comment|/**    * The "base32" encoding specified by<a    * href="http://tools.ietf.org/html/rfc4648#section-6">RFC 4648 section 6</a>, Base 32 Encoding.    * (This is the same as the base 32 encoding from<a    * href="http://tools.ietf.org/html/rfc3548#section-5">RFC 3548</a>.)    *    *<p>The character {@code '='} is used for padding, but can be {@linkplain #omitPadding()    * omitted} or {@linkplain #withPadChar(char) replaced}.    *    *<p>No line feeds are added by default, as per<a    * href="http://tools.ietf.org/html/rfc4648#section-3.1"> RFC 4648 section 3.1</a>, Line Feeds in    * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.    */
DECL|method|base32 ()
specifier|public
specifier|static
name|BaseEncoding
name|base32
parameter_list|()
block|{
return|return
name|BASE32
return|;
block|}
DECL|field|BASE32_HEX
specifier|private
specifier|static
specifier|final
name|BaseEncoding
name|BASE32_HEX
init|=
operator|new
name|StandardBaseEncoding
argument_list|(
literal|"base32Hex()"
argument_list|,
literal|"0123456789ABCDEFGHIJKLMNOPQRSTUV"
argument_list|,
literal|'='
argument_list|)
decl_stmt|;
comment|/**    * The "base32hex" encoding specified by<a    * href="http://tools.ietf.org/html/rfc4648#section-7">RFC 4648 section 7</a>, Base 32 Encoding    * with Extended Hex Alphabet.  There is no corresponding encoding in RFC 3548.    *    *<p>The character {@code '='} is used for padding, but can be {@linkplain #omitPadding()    * omitted} or {@linkplain #withPadChar(char) replaced}.    *    *<p>No line feeds are added by default, as per<a    * href="http://tools.ietf.org/html/rfc4648#section-3.1"> RFC 4648 section 3.1</a>, Line Feeds in    * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.    */
DECL|method|base32Hex ()
specifier|public
specifier|static
name|BaseEncoding
name|base32Hex
parameter_list|()
block|{
return|return
name|BASE32_HEX
return|;
block|}
DECL|field|BASE16
specifier|private
specifier|static
specifier|final
name|BaseEncoding
name|BASE16
init|=
operator|new
name|Base16Encoding
argument_list|(
literal|"base16()"
argument_list|,
literal|"0123456789ABCDEF"
argument_list|)
decl_stmt|;
comment|/**    * The "base16" encoding specified by<a    * href="http://tools.ietf.org/html/rfc4648#section-8">RFC 4648 section 8</a>, Base 16 Encoding.    * (This is the same as the base 16 encoding from<a    * href="http://tools.ietf.org/html/rfc3548#section-6">RFC 3548</a>.) This is commonly known as    * "hexadecimal" format.    *    *<p>No padding is necessary in base 16, so {@link #withPadChar(char)} and    * {@link #omitPadding()} have no effect.    *    *<p>No line feeds are added by default, as per<a    * href="http://tools.ietf.org/html/rfc4648#section-3.1"> RFC 4648 section 3.1</a>, Line Feeds in    * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.    */
DECL|method|base16 ()
specifier|public
specifier|static
name|BaseEncoding
name|base16
parameter_list|()
block|{
return|return
name|BASE16
return|;
block|}
DECL|class|Alphabet
specifier|private
specifier|static
specifier|final
class|class
name|Alphabet
extends|extends
name|CharMatcher
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|// this is meant to be immutable -- don't modify it!
DECL|field|chars
specifier|private
specifier|final
name|char
index|[]
name|chars
decl_stmt|;
DECL|field|mask
specifier|final
name|int
name|mask
decl_stmt|;
DECL|field|bitsPerChar
specifier|final
name|int
name|bitsPerChar
decl_stmt|;
DECL|field|charsPerChunk
specifier|final
name|int
name|charsPerChunk
decl_stmt|;
DECL|field|bytesPerChunk
specifier|final
name|int
name|bytesPerChunk
decl_stmt|;
DECL|field|decodabet
specifier|private
specifier|final
name|byte
index|[]
name|decodabet
decl_stmt|;
DECL|field|validPadding
specifier|private
specifier|final
name|boolean
index|[]
name|validPadding
decl_stmt|;
DECL|method|Alphabet (String name, char[] chars)
name|Alphabet
parameter_list|(
name|String
name|name
parameter_list|,
name|char
index|[]
name|chars
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|chars
operator|=
name|checkNotNull
argument_list|(
name|chars
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|bitsPerChar
operator|=
name|log2
argument_list|(
name|chars
operator|.
name|length
argument_list|,
name|UNNECESSARY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal alphabet length "
operator|+
name|chars
operator|.
name|length
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|/*        * e.g. for base64, bitsPerChar == 6, charsPerChunk == 4, and bytesPerChunk == 3. This makes        * for the smallest chunk size that still has charsPerChunk * bitsPerChar be a multiple of 8.        */
name|int
name|gcd
init|=
name|Math
operator|.
name|min
argument_list|(
literal|8
argument_list|,
name|Integer
operator|.
name|lowestOneBit
argument_list|(
name|bitsPerChar
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|charsPerChunk
operator|=
literal|8
operator|/
name|gcd
expr_stmt|;
name|this
operator|.
name|bytesPerChunk
operator|=
name|bitsPerChar
operator|/
name|gcd
expr_stmt|;
name|this
operator|.
name|mask
operator|=
name|chars
operator|.
name|length
operator|-
literal|1
expr_stmt|;
name|byte
index|[]
name|decodabet
init|=
operator|new
name|byte
index|[
name|Ascii
operator|.
name|MAX
operator|+
literal|1
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|decodabet
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|chars
index|[
name|i
index|]
decl_stmt|;
name|checkArgument
argument_list|(
name|CharMatcher
operator|.
name|ASCII
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|,
literal|"Non-ASCII character: %s"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|decodabet
index|[
name|c
index|]
operator|==
operator|-
literal|1
argument_list|,
literal|"Duplicate character: %s"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|decodabet
index|[
name|c
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|this
operator|.
name|decodabet
operator|=
name|decodabet
expr_stmt|;
name|boolean
index|[]
name|validPadding
init|=
operator|new
name|boolean
index|[
name|charsPerChunk
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesPerChunk
condition|;
name|i
operator|++
control|)
block|{
name|validPadding
index|[
name|divide
argument_list|(
name|i
operator|*
literal|8
argument_list|,
name|bitsPerChar
argument_list|,
name|CEILING
argument_list|)
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|validPadding
operator|=
name|validPadding
expr_stmt|;
block|}
DECL|method|encode (int bits)
name|char
name|encode
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
return|return
name|chars
index|[
name|bits
index|]
return|;
block|}
DECL|method|isValidPaddingStartPosition (int index)
name|boolean
name|isValidPaddingStartPosition
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|validPadding
index|[
name|index
operator|%
name|charsPerChunk
index|]
return|;
block|}
DECL|method|decode (char ch)
name|int
name|decode
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|DecodingException
block|{
if|if
condition|(
name|ch
operator|>
name|Ascii
operator|.
name|MAX
operator|||
name|decodabet
index|[
name|ch
index|]
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Unrecognized character: "
operator|+
operator|(
name|CharMatcher
operator|.
name|INVISIBLE
operator|.
name|matches
argument_list|(
name|ch
argument_list|)
condition|?
literal|"0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|ch
argument_list|)
else|:
name|ch
operator|)
argument_list|)
throw|;
block|}
return|return
name|decodabet
index|[
name|ch
index|]
return|;
block|}
DECL|method|hasLowerCase ()
specifier|private
name|boolean
name|hasLowerCase
parameter_list|()
block|{
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
if|if
condition|(
name|Ascii
operator|.
name|isLowerCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasUpperCase ()
specifier|private
name|boolean
name|hasUpperCase
parameter_list|()
block|{
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
if|if
condition|(
name|Ascii
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|upperCase ()
name|Alphabet
name|upperCase
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasLowerCase
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
name|checkState
argument_list|(
operator|!
name|hasUpperCase
argument_list|()
argument_list|,
literal|"Cannot call upperCase() on a mixed-case alphabet"
argument_list|)
expr_stmt|;
name|char
index|[]
name|upperCased
init|=
operator|new
name|char
index|[
name|chars
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|upperCased
index|[
name|i
index|]
operator|=
name|Ascii
operator|.
name|toUpperCase
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Alphabet
argument_list|(
name|name
operator|+
literal|".upperCase()"
argument_list|,
name|upperCased
argument_list|)
return|;
block|}
block|}
DECL|method|lowerCase ()
name|Alphabet
name|lowerCase
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasUpperCase
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
name|checkState
argument_list|(
operator|!
name|hasLowerCase
argument_list|()
argument_list|,
literal|"Cannot call lowerCase() on a mixed-case alphabet"
argument_list|)
expr_stmt|;
name|char
index|[]
name|lowerCased
init|=
operator|new
name|char
index|[
name|chars
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lowerCased
index|[
name|i
index|]
operator|=
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Alphabet
argument_list|(
name|name
operator|+
literal|".lowerCase()"
argument_list|,
name|lowerCased
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|matches (char c)
specifier|public
name|boolean
name|matches
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|CharMatcher
operator|.
name|ASCII
operator|.
name|matches
argument_list|(
name|c
argument_list|)
operator|&&
name|decodabet
index|[
name|c
index|]
operator|!=
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|StandardBaseEncoding
specifier|static
class|class
name|StandardBaseEncoding
extends|extends
name|BaseEncoding
block|{
comment|// TODO(lowasser): provide a useful toString
DECL|field|alphabet
specifier|final
name|Alphabet
name|alphabet
decl_stmt|;
annotation|@
name|Nullable
DECL|field|paddingChar
specifier|final
name|Character
name|paddingChar
decl_stmt|;
DECL|method|StandardBaseEncoding (String name, String alphabetChars, @Nullable Character paddingChar)
name|StandardBaseEncoding
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|alphabetChars
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Alphabet
argument_list|(
name|name
argument_list|,
name|alphabetChars
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
name|paddingChar
argument_list|)
expr_stmt|;
block|}
DECL|method|StandardBaseEncoding (Alphabet alphabet, @Nullable Character paddingChar)
name|StandardBaseEncoding
parameter_list|(
name|Alphabet
name|alphabet
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
name|this
operator|.
name|alphabet
operator|=
name|checkNotNull
argument_list|(
name|alphabet
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|paddingChar
operator|==
literal|null
operator|||
operator|!
name|alphabet
operator|.
name|matches
argument_list|(
name|paddingChar
argument_list|)
argument_list|,
literal|"Padding character %s was already in alphabet"
argument_list|,
name|paddingChar
argument_list|)
expr_stmt|;
name|this
operator|.
name|paddingChar
operator|=
name|paddingChar
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|padding ()
name|CharMatcher
name|padding
parameter_list|()
block|{
return|return
operator|(
name|paddingChar
operator|==
literal|null
operator|)
condition|?
name|CharMatcher
operator|.
name|NONE
else|:
name|CharMatcher
operator|.
name|is
argument_list|(
name|paddingChar
operator|.
name|charValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|maxEncodedSize (int bytes)
name|int
name|maxEncodedSize
parameter_list|(
name|int
name|bytes
parameter_list|)
block|{
return|return
name|alphabet
operator|.
name|charsPerChunk
operator|*
name|divide
argument_list|(
name|bytes
argument_list|,
name|alphabet
operator|.
name|bytesPerChunk
argument_list|,
name|CEILING
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Writer,OutputStream"
argument_list|)
annotation|@
name|Override
DECL|method|encodingStream (final Writer out)
specifier|public
name|OutputStream
name|encodingStream
parameter_list|(
specifier|final
name|Writer
name|out
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
operator|new
name|OutputStream
argument_list|()
block|{
name|int
name|bitBuffer
init|=
literal|0
decl_stmt|;
name|int
name|bitBufferLength
init|=
literal|0
decl_stmt|;
name|int
name|writtenChars
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|bitBuffer
operator|<<=
literal|8
expr_stmt|;
name|bitBuffer
operator||=
name|b
operator|&
literal|0xFF
expr_stmt|;
name|bitBufferLength
operator|+=
literal|8
expr_stmt|;
while|while
condition|(
name|bitBufferLength
operator|>=
name|alphabet
operator|.
name|bitsPerChar
condition|)
block|{
name|int
name|charIndex
init|=
operator|(
name|bitBuffer
operator|>>
operator|(
name|bitBufferLength
operator|-
name|alphabet
operator|.
name|bitsPerChar
operator|)
operator|)
operator|&
name|alphabet
operator|.
name|mask
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
name|charIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writtenChars
operator|++
expr_stmt|;
name|bitBufferLength
operator|-=
name|alphabet
operator|.
name|bitsPerChar
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bitBufferLength
operator|>
literal|0
condition|)
block|{
name|int
name|charIndex
init|=
operator|(
name|bitBuffer
operator|<<
operator|(
name|alphabet
operator|.
name|bitsPerChar
operator|-
name|bitBufferLength
operator|)
operator|)
operator|&
name|alphabet
operator|.
name|mask
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
name|charIndex
argument_list|)
argument_list|)
expr_stmt|;
name|writtenChars
operator|++
expr_stmt|;
if|if
condition|(
name|paddingChar
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|writtenChars
operator|%
name|alphabet
operator|.
name|charsPerChunk
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|paddingChar
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|writtenChars
operator|++
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|encodeTo (Appendable target, byte[] bytes, int off, int len)
name|void
name|encodeTo
parameter_list|(
name|Appendable
name|target
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|+=
name|alphabet
operator|.
name|bytesPerChunk
control|)
block|{
name|encodeChunkTo
argument_list|(
name|target
argument_list|,
name|bytes
argument_list|,
name|off
operator|+
name|i
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|alphabet
operator|.
name|bytesPerChunk
argument_list|,
name|len
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|encodeChunkTo (Appendable target, byte[] bytes, int off, int len)
name|void
name|encodeChunkTo
parameter_list|(
name|Appendable
name|target
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|len
operator|<=
name|alphabet
operator|.
name|bytesPerChunk
argument_list|)
expr_stmt|;
name|long
name|bitBuffer
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|bitBuffer
operator||=
name|bytes
index|[
name|off
operator|+
name|i
index|]
operator|&
literal|0xFF
expr_stmt|;
name|bitBuffer
operator|<<=
literal|8
expr_stmt|;
comment|// Add additional zero byte in the end.
block|}
comment|// Position of first character is length of bitBuffer minus bitsPerChar.
specifier|final
name|int
name|bitOffset
init|=
operator|(
name|len
operator|+
literal|1
operator|)
operator|*
literal|8
operator|-
name|alphabet
operator|.
name|bitsPerChar
decl_stmt|;
name|int
name|bitsProcessed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bitsProcessed
operator|<
name|len
operator|*
literal|8
condition|)
block|{
name|int
name|charIndex
init|=
call|(
name|int
call|)
argument_list|(
name|bitBuffer
operator|>>>
operator|(
name|bitOffset
operator|-
name|bitsProcessed
operator|)
argument_list|)
operator|&
name|alphabet
operator|.
name|mask
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
name|charIndex
argument_list|)
argument_list|)
expr_stmt|;
name|bitsProcessed
operator|+=
name|alphabet
operator|.
name|bitsPerChar
expr_stmt|;
block|}
if|if
condition|(
name|paddingChar
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|bitsProcessed
operator|<
name|alphabet
operator|.
name|bytesPerChunk
operator|*
literal|8
condition|)
block|{
name|target
operator|.
name|append
argument_list|(
name|paddingChar
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|bitsProcessed
operator|+=
name|alphabet
operator|.
name|bitsPerChar
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|maxDecodedSize (int chars)
name|int
name|maxDecodedSize
parameter_list|(
name|int
name|chars
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|alphabet
operator|.
name|bitsPerChar
operator|*
operator|(
name|long
operator|)
name|chars
operator|+
literal|7L
operator|)
operator|/
literal|8L
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeTo (byte[] target, CharSequence chars)
name|int
name|decodeTo
parameter_list|(
name|byte
index|[]
name|target
parameter_list|,
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|DecodingException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|chars
operator|=
name|padding
argument_list|()
operator|.
name|trimTrailingFrom
argument_list|(
name|chars
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|alphabet
operator|.
name|isValidPaddingStartPosition
argument_list|(
name|chars
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Invalid input length "
operator|+
name|chars
operator|.
name|length
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|charIdx
init|=
literal|0
init|;
name|charIdx
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|;
name|charIdx
operator|+=
name|alphabet
operator|.
name|charsPerChunk
control|)
block|{
name|long
name|chunk
init|=
literal|0
decl_stmt|;
name|int
name|charsProcessed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alphabet
operator|.
name|charsPerChunk
condition|;
name|i
operator|++
control|)
block|{
name|chunk
operator|<<=
name|alphabet
operator|.
name|bitsPerChar
expr_stmt|;
if|if
condition|(
name|charIdx
operator|+
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|)
block|{
name|chunk
operator||=
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|charIdx
operator|+
name|charsProcessed
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|minOffset
init|=
name|alphabet
operator|.
name|bytesPerChunk
operator|*
literal|8
operator|-
name|charsProcessed
operator|*
name|alphabet
operator|.
name|bitsPerChar
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
operator|(
name|alphabet
operator|.
name|bytesPerChunk
operator|-
literal|1
operator|)
operator|*
literal|8
init|;
name|offset
operator|>=
name|minOffset
condition|;
name|offset
operator|-=
literal|8
control|)
block|{
name|target
index|[
name|bytesWritten
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|chunk
operator|>>>
name|offset
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bytesWritten
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Reader,InputStream"
argument_list|)
annotation|@
name|Override
DECL|method|decodingStream (final Reader reader)
specifier|public
name|InputStream
name|decodingStream
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
operator|new
name|InputStream
argument_list|()
block|{
name|int
name|bitBuffer
init|=
literal|0
decl_stmt|;
name|int
name|bitBufferLength
init|=
literal|0
decl_stmt|;
name|int
name|readChars
init|=
literal|0
decl_stmt|;
name|boolean
name|hitPadding
init|=
literal|false
decl_stmt|;
specifier|final
name|CharMatcher
name|paddingMatcher
init|=
name|padding
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|readChar
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|readChar
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|hitPadding
operator|&&
operator|!
name|alphabet
operator|.
name|isValidPaddingStartPosition
argument_list|(
name|readChars
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Invalid input length "
operator|+
name|readChars
argument_list|)
throw|;
block|}
return|return
operator|-
literal|1
return|;
block|}
name|readChars
operator|++
expr_stmt|;
name|char
name|ch
init|=
operator|(
name|char
operator|)
name|readChar
decl_stmt|;
if|if
condition|(
name|paddingMatcher
operator|.
name|matches
argument_list|(
name|ch
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hitPadding
operator|&&
operator|(
name|readChars
operator|==
literal|1
operator|||
operator|!
name|alphabet
operator|.
name|isValidPaddingStartPosition
argument_list|(
name|readChars
operator|-
literal|1
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Padding cannot start at index "
operator|+
name|readChars
argument_list|)
throw|;
block|}
name|hitPadding
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hitPadding
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Expected padding character but found '"
operator|+
name|ch
operator|+
literal|"' at index "
operator|+
name|readChars
argument_list|)
throw|;
block|}
else|else
block|{
name|bitBuffer
operator|<<=
name|alphabet
operator|.
name|bitsPerChar
expr_stmt|;
name|bitBuffer
operator||=
name|alphabet
operator|.
name|decode
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|bitBufferLength
operator|+=
name|alphabet
operator|.
name|bitsPerChar
expr_stmt|;
if|if
condition|(
name|bitBufferLength
operator|>=
literal|8
condition|)
block|{
name|bitBufferLength
operator|-=
literal|8
expr_stmt|;
return|return
operator|(
name|bitBuffer
operator|>>
name|bitBufferLength
operator|)
operator|&
literal|0xFF
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|omitPadding ()
specifier|public
name|BaseEncoding
name|omitPadding
parameter_list|()
block|{
return|return
operator|(
name|paddingChar
operator|==
literal|null
operator|)
condition|?
name|this
else|:
name|newInstance
argument_list|(
name|alphabet
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|withPadChar (char padChar)
specifier|public
name|BaseEncoding
name|withPadChar
parameter_list|(
name|char
name|padChar
parameter_list|)
block|{
if|if
condition|(
literal|8
operator|%
name|alphabet
operator|.
name|bitsPerChar
operator|==
literal|0
operator|||
operator|(
name|paddingChar
operator|!=
literal|null
operator|&&
name|paddingChar
operator|.
name|charValue
argument_list|()
operator|==
name|padChar
operator|)
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
return|return
name|newInstance
argument_list|(
name|alphabet
argument_list|,
name|padChar
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|withSeparator (String separator, int afterEveryChars)
specifier|public
name|BaseEncoding
name|withSeparator
parameter_list|(
name|String
name|separator
parameter_list|,
name|int
name|afterEveryChars
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|padding
argument_list|()
operator|.
name|or
argument_list|(
name|alphabet
argument_list|)
operator|.
name|matchesNoneOf
argument_list|(
name|separator
argument_list|)
argument_list|,
literal|"Separator (%s) cannot contain alphabet or padding characters"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
operator|new
name|SeparatedBaseEncoding
argument_list|(
name|this
argument_list|,
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
return|;
block|}
DECL|field|upperCase
specifier|private
specifier|transient
name|BaseEncoding
name|upperCase
decl_stmt|;
DECL|field|lowerCase
specifier|private
specifier|transient
name|BaseEncoding
name|lowerCase
decl_stmt|;
annotation|@
name|Override
DECL|method|upperCase ()
specifier|public
name|BaseEncoding
name|upperCase
parameter_list|()
block|{
name|BaseEncoding
name|result
init|=
name|upperCase
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|Alphabet
name|upper
init|=
name|alphabet
operator|.
name|upperCase
argument_list|()
decl_stmt|;
name|result
operator|=
name|upperCase
operator|=
operator|(
name|upper
operator|==
name|alphabet
operator|)
condition|?
name|this
else|:
name|newInstance
argument_list|(
name|upper
argument_list|,
name|paddingChar
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|lowerCase ()
specifier|public
name|BaseEncoding
name|lowerCase
parameter_list|()
block|{
name|BaseEncoding
name|result
init|=
name|lowerCase
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|Alphabet
name|lower
init|=
name|alphabet
operator|.
name|lowerCase
argument_list|()
decl_stmt|;
name|result
operator|=
name|lowerCase
operator|=
operator|(
name|lower
operator|==
name|alphabet
operator|)
condition|?
name|this
else|:
name|newInstance
argument_list|(
name|lower
argument_list|,
name|paddingChar
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|newInstance (Alphabet alphabet, @Nullable Character paddingChar)
name|BaseEncoding
name|newInstance
parameter_list|(
name|Alphabet
name|alphabet
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
return|return
operator|new
name|StandardBaseEncoding
argument_list|(
name|alphabet
argument_list|,
name|paddingChar
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"BaseEncoding."
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|alphabet
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|8
operator|%
name|alphabet
operator|.
name|bitsPerChar
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|paddingChar
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|".omitPadding()"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|".withPadChar("
argument_list|)
operator|.
name|append
argument_list|(
name|paddingChar
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|Base16Encoding
specifier|static
specifier|final
class|class
name|Base16Encoding
extends|extends
name|StandardBaseEncoding
block|{
DECL|field|encoding
specifier|final
name|char
index|[]
name|encoding
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
DECL|method|Base16Encoding (String name, String alphabetChars)
name|Base16Encoding
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|alphabetChars
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Alphabet
argument_list|(
name|name
argument_list|,
name|alphabetChars
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Base16Encoding (Alphabet alphabet)
specifier|private
name|Base16Encoding
parameter_list|(
name|Alphabet
name|alphabet
parameter_list|)
block|{
name|super
argument_list|(
name|alphabet
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|alphabet
operator|.
name|chars
operator|.
name|length
operator|==
literal|16
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
name|encoding
index|[
name|i
index|]
operator|=
name|alphabet
operator|.
name|encode
argument_list|(
name|i
operator|>>>
literal|4
argument_list|)
expr_stmt|;
name|encoding
index|[
name|i
operator||
literal|0x100
index|]
operator|=
name|alphabet
operator|.
name|encode
argument_list|(
name|i
operator|&
literal|0xF
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|encodeTo (Appendable target, byte[] bytes, int off, int len)
name|void
name|encodeTo
parameter_list|(
name|Appendable
name|target
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|int
name|b
init|=
name|bytes
index|[
name|off
operator|+
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
name|encoding
index|[
name|b
index|]
argument_list|)
expr_stmt|;
name|target
operator|.
name|append
argument_list|(
name|encoding
index|[
name|b
operator||
literal|0x100
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decodeTo (byte[] target, CharSequence chars)
name|int
name|decodeTo
parameter_list|(
name|byte
index|[]
name|target
parameter_list|,
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|DecodingException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|chars
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Invalid input length "
operator|+
name|chars
operator|.
name|length
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|int
name|decoded
init|=
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
literal|4
operator||
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|target
index|[
name|bytesWritten
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|decoded
expr_stmt|;
block|}
return|return
name|bytesWritten
return|;
block|}
annotation|@
name|Override
DECL|method|newInstance (Alphabet alphabet, @Nullable Character paddingChar)
name|BaseEncoding
name|newInstance
parameter_list|(
name|Alphabet
name|alphabet
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
return|return
operator|new
name|Base16Encoding
argument_list|(
name|alphabet
argument_list|)
return|;
block|}
block|}
DECL|class|Base64Encoding
specifier|static
specifier|final
class|class
name|Base64Encoding
extends|extends
name|StandardBaseEncoding
block|{
DECL|method|Base64Encoding (String name, String alphabetChars, @Nullable Character paddingChar)
name|Base64Encoding
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|alphabetChars
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Alphabet
argument_list|(
name|name
argument_list|,
name|alphabetChars
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
name|paddingChar
argument_list|)
expr_stmt|;
block|}
DECL|method|Base64Encoding (Alphabet alphabet, @Nullable Character paddingChar)
specifier|private
name|Base64Encoding
parameter_list|(
name|Alphabet
name|alphabet
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
name|super
argument_list|(
name|alphabet
argument_list|,
name|paddingChar
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|alphabet
operator|.
name|chars
operator|.
name|length
operator|==
literal|64
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encodeTo (Appendable target, byte[] bytes, int off, int len)
name|void
name|encodeTo
parameter_list|(
name|Appendable
name|target
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|off
decl_stmt|;
for|for
control|(
name|int
name|remaining
init|=
name|len
init|;
name|remaining
operator|>=
literal|3
condition|;
name|remaining
operator|-=
literal|3
control|)
block|{
name|int
name|chunk
init|=
operator|(
name|bytes
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator||
operator|(
name|bytes
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator||
name|bytes
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
name|chunk
operator|>>>
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|append
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
operator|(
name|chunk
operator|>>>
literal|12
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|append
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
operator|(
name|chunk
operator|>>>
literal|6
operator|)
operator|&
literal|0x3F
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|append
argument_list|(
name|alphabet
operator|.
name|encode
argument_list|(
name|chunk
operator|&
literal|0x3F
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|off
operator|+
name|len
condition|)
block|{
name|encodeChunkTo
argument_list|(
name|target
argument_list|,
name|bytes
argument_list|,
name|i
argument_list|,
name|off
operator|+
name|len
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decodeTo (byte[] target, CharSequence chars)
name|int
name|decodeTo
parameter_list|(
name|byte
index|[]
name|target
parameter_list|,
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|DecodingException
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|chars
operator|=
name|padding
argument_list|()
operator|.
name|trimTrailingFrom
argument_list|(
name|chars
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|alphabet
operator|.
name|isValidPaddingStartPosition
argument_list|(
name|chars
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DecodingException
argument_list|(
literal|"Invalid input length "
operator|+
name|chars
operator|.
name|length
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|bytesWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
name|int
name|chunk
init|=
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
operator|<<
literal|18
decl_stmt|;
name|chunk
operator||=
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
operator|<<
literal|12
expr_stmt|;
name|target
index|[
name|bytesWritten
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|chunk
operator|>>>
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|)
block|{
name|chunk
operator||=
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|target
index|[
name|bytesWritten
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|chunk
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|)
block|{
name|chunk
operator||=
name|alphabet
operator|.
name|decode
argument_list|(
name|chars
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|target
index|[
name|bytesWritten
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|chunk
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bytesWritten
return|;
block|}
annotation|@
name|Override
DECL|method|newInstance (Alphabet alphabet, @Nullable Character paddingChar)
name|BaseEncoding
name|newInstance
parameter_list|(
name|Alphabet
name|alphabet
parameter_list|,
annotation|@
name|Nullable
name|Character
name|paddingChar
parameter_list|)
block|{
return|return
operator|new
name|Base64Encoding
argument_list|(
name|alphabet
argument_list|,
name|paddingChar
argument_list|)
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Reader"
argument_list|)
DECL|method|ignoringReader (final Reader delegate, final CharMatcher toIgnore)
specifier|static
name|Reader
name|ignoringReader
parameter_list|(
specifier|final
name|Reader
name|delegate
parameter_list|,
specifier|final
name|CharMatcher
name|toIgnore
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|toIgnore
argument_list|)
expr_stmt|;
return|return
operator|new
name|Reader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|readChar
decl_stmt|;
do|do
block|{
name|readChar
operator|=
name|delegate
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|readChar
operator|!=
operator|-
literal|1
operator|&&
name|toIgnore
operator|.
name|matches
argument_list|(
operator|(
name|char
operator|)
name|readChar
argument_list|)
condition|)
do|;
return|return
name|readChar
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|separatingAppendable ( final Appendable delegate, final String separator, final int afterEveryChars)
specifier|static
name|Appendable
name|separatingAppendable
parameter_list|(
specifier|final
name|Appendable
name|delegate
parameter_list|,
specifier|final
name|String
name|separator
parameter_list|,
specifier|final
name|int
name|afterEveryChars
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|afterEveryChars
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|Appendable
argument_list|()
block|{
name|int
name|charsUntilSeparator
init|=
name|afterEveryChars
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Appendable
name|append
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|charsUntilSeparator
operator|==
literal|0
condition|)
block|{
name|delegate
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|charsUntilSeparator
operator|=
name|afterEveryChars
expr_stmt|;
block|}
name|delegate
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|charsUntilSeparator
operator|--
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|chars
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Writer"
argument_list|)
DECL|method|separatingWriter ( final Writer delegate, final String separator, final int afterEveryChars)
specifier|static
name|Writer
name|separatingWriter
parameter_list|(
specifier|final
name|Writer
name|delegate
parameter_list|,
specifier|final
name|String
name|separator
parameter_list|,
specifier|final
name|int
name|afterEveryChars
parameter_list|)
block|{
specifier|final
name|Appendable
name|seperatingAppendable
init|=
name|separatingAppendable
argument_list|(
name|delegate
argument_list|,
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
decl_stmt|;
return|return
operator|new
name|Writer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|seperatingAppendable
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|SeparatedBaseEncoding
specifier|static
specifier|final
class|class
name|SeparatedBaseEncoding
extends|extends
name|BaseEncoding
block|{
DECL|field|delegate
specifier|private
specifier|final
name|BaseEncoding
name|delegate
decl_stmt|;
DECL|field|separator
specifier|private
specifier|final
name|String
name|separator
decl_stmt|;
DECL|field|afterEveryChars
specifier|private
specifier|final
name|int
name|afterEveryChars
decl_stmt|;
DECL|field|separatorChars
specifier|private
specifier|final
name|CharMatcher
name|separatorChars
decl_stmt|;
DECL|method|SeparatedBaseEncoding (BaseEncoding delegate, String separator, int afterEveryChars)
name|SeparatedBaseEncoding
parameter_list|(
name|BaseEncoding
name|delegate
parameter_list|,
name|String
name|separator
parameter_list|,
name|int
name|afterEveryChars
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|checkNotNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|this
operator|.
name|afterEveryChars
operator|=
name|afterEveryChars
expr_stmt|;
name|checkArgument
argument_list|(
name|afterEveryChars
operator|>
literal|0
argument_list|,
literal|"Cannot add a separator after every %s chars"
argument_list|,
name|afterEveryChars
argument_list|)
expr_stmt|;
name|this
operator|.
name|separatorChars
operator|=
name|CharMatcher
operator|.
name|anyOf
argument_list|(
name|separator
argument_list|)
operator|.
name|precomputed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|padding ()
name|CharMatcher
name|padding
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|padding
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|maxEncodedSize (int bytes)
name|int
name|maxEncodedSize
parameter_list|(
name|int
name|bytes
parameter_list|)
block|{
name|int
name|unseparatedSize
init|=
name|delegate
operator|.
name|maxEncodedSize
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
name|unseparatedSize
operator|+
name|separator
operator|.
name|length
argument_list|()
operator|*
name|divide
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|unseparatedSize
operator|-
literal|1
argument_list|)
argument_list|,
name|afterEveryChars
argument_list|,
name|FLOOR
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Writer,OutputStream"
argument_list|)
annotation|@
name|Override
DECL|method|encodingStream (final Writer output)
specifier|public
name|OutputStream
name|encodingStream
parameter_list|(
specifier|final
name|Writer
name|output
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|encodingStream
argument_list|(
name|separatingWriter
argument_list|(
name|output
argument_list|,
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|encodeTo (Appendable target, byte[] bytes, int off, int len)
name|void
name|encodeTo
parameter_list|(
name|Appendable
name|target
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|encodeTo
argument_list|(
name|separatingAppendable
argument_list|(
name|target
argument_list|,
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|maxDecodedSize (int chars)
name|int
name|maxDecodedSize
parameter_list|(
name|int
name|chars
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|maxDecodedSize
argument_list|(
name|chars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeTo (byte[] target, CharSequence chars)
name|int
name|decodeTo
parameter_list|(
name|byte
index|[]
name|target
parameter_list|,
name|CharSequence
name|chars
parameter_list|)
throws|throws
name|DecodingException
block|{
return|return
name|delegate
operator|.
name|decodeTo
argument_list|(
name|target
argument_list|,
name|separatorChars
operator|.
name|removeFrom
argument_list|(
name|chars
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Reader,InputStream"
argument_list|)
annotation|@
name|Override
DECL|method|decodingStream (final Reader reader)
specifier|public
name|InputStream
name|decodingStream
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|decodingStream
argument_list|(
name|ignoringReader
argument_list|(
name|reader
argument_list|,
name|separatorChars
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|omitPadding ()
specifier|public
name|BaseEncoding
name|omitPadding
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|omitPadding
argument_list|()
operator|.
name|withSeparator
argument_list|(
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|withPadChar (char padChar)
specifier|public
name|BaseEncoding
name|withPadChar
parameter_list|(
name|char
name|padChar
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|withPadChar
argument_list|(
name|padChar
argument_list|)
operator|.
name|withSeparator
argument_list|(
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|withSeparator (String separator, int afterEveryChars)
specifier|public
name|BaseEncoding
name|withSeparator
parameter_list|(
name|String
name|separator
parameter_list|,
name|int
name|afterEveryChars
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Already have a separator"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|upperCase ()
specifier|public
name|BaseEncoding
name|upperCase
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|upperCase
argument_list|()
operator|.
name|withSeparator
argument_list|(
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lowerCase ()
specifier|public
name|BaseEncoding
name|lowerCase
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|lowerCase
argument_list|()
operator|.
name|withSeparator
argument_list|(
name|separator
argument_list|,
name|afterEveryChars
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
operator|+
literal|".withSeparator(\""
operator|+
name|separator
operator|+
literal|"\", "
operator|+
name|afterEveryChars
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

