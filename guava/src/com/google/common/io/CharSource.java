begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A readable source of characters, such as a text file. Unlike a {@link Reader}, a  * {@code CharSource} is not an open, stateful stream of characters that can be read and closed.  * Instead, it is an immutable<i>supplier</i> of {@code Reader} instances.  *  *<p>{@code CharSource} provides two kinds of methods:  *<ul>  *<li><b>Methods that return a reader:</b> These methods should return a<i>new</i>, independent  *   instance each time they are called. The caller is responsible for ensuring that the returned  *   reader is closed.  *<li><b>Convenience methods:</b> These are implementations of common operations that are  *   typically implemented by opening a reader using one of the methods in the first category,  *   doing something and finally closing the reader that was opened.  *</ul>  *  *<p>Several methods in this class, such as {@link #readLines()}, break the contents of the  * source into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \n},  * {@code \r} or {@code \r\n}, do not include the line separator in each line and do not consider  * there to be an empty line at the end if the contents are terminated with a line separator.  *  *<p>Any {@link ByteSource} containing text encoded with a specific {@linkplain Charset character  * encoding} may be viewed as a {@code CharSource} using {@link ByteSource#asCharSource(Charset)}.  *  * @since 14.0  * @author Colin Decker  */
end_comment

begin_class
DECL|class|CharSource
specifier|public
specifier|abstract
class|class
name|CharSource
block|{
comment|/**    * Constructor for use by subclasses.    */
DECL|method|CharSource ()
specifier|protected
name|CharSource
parameter_list|()
block|{}
comment|/**    * Opens a new {@link Reader} for reading from this source. This method should return a new,    * independent reader each time it is called.    *    *<p>The caller is responsible for ensuring that the returned reader is closed.    *    * @throws IOException if an I/O error occurs in the process of opening the reader    */
DECL|method|openStream ()
specifier|public
specifier|abstract
name|Reader
name|openStream
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Opens a new {@link BufferedReader} for reading from this source. This method should return a    * new, independent reader each time it is called.    *    *<p>The caller is responsible for ensuring that the returned reader is closed.    *    * @throws IOException if an I/O error occurs in the process of opening the reader    */
DECL|method|openBufferedStream ()
specifier|public
name|BufferedReader
name|openBufferedStream
parameter_list|()
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
name|openStream
argument_list|()
decl_stmt|;
return|return
operator|(
name|reader
operator|instanceof
name|BufferedReader
operator|)
condition|?
operator|(
name|BufferedReader
operator|)
name|reader
else|:
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
return|;
block|}
comment|/**    * Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).    * Does not close {@code appendable} if it is {@code Closeable}.    *    * @throws IOException if an I/O error occurs in the process of reading from this source or    *     writing to {@code appendable}    */
DECL|method|copyTo (Appendable appendable)
specifier|public
name|long
name|copyTo
parameter_list|(
name|Appendable
name|appendable
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|appendable
argument_list|)
expr_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|Reader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CharStreams
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|appendable
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Copies the contents of this source to the given sink.    *    * @throws IOException if an I/O error occurs in the process of reading from this source or    *     writing to {@code sink}    */
DECL|method|copyTo (CharSink sink)
specifier|public
name|long
name|copyTo
parameter_list|(
name|CharSink
name|sink
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|sink
argument_list|)
expr_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|Reader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|closer
operator|.
name|register
argument_list|(
name|sink
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CharStreams
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads the contents of this source as a string.    *    * @throws IOException if an I/O error occurs in the process of reading from this source    */
DECL|method|read ()
specifier|public
name|String
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|Reader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CharStreams
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads the first link of this source as a string. Returns {@code null} if this source is empty.    *    *<p>Like {@link BufferedReader}, this method breaks lines on any of {@code \n}, {@code \r} or    * {@code \r\n}, does not include the line separator in the returned line and does not consider    * there to be an extra empty line at the end if the content is terminated with a line separator.    *    * @throws IOException if an I/O error occurs in the process of reading from this source    */
DECL|method|readFirstLine ()
annotation|@
name|Nullable
specifier|public
name|String
name|readFirstLine
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openBufferedStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads all the lines of this source as a list of strings. The returned list will be empty if    * this source is empty.    *    *<p>Like {@link BufferedReader}, this method breaks lines on any of {@code \n}, {@code \r} or    * {@code \r\n}, does not include the line separator in the returned lines and does not consider    * there to be an extra empty line at the end if the content is terminated with a line separator.    *    * @throws IOException if an I/O error occurs in the process of reading from this source    */
DECL|method|readLines ()
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openBufferedStream
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads lines of text from this source, processing each line as it is read using the given    * {@link LineProcessor processor}. Stops when all lines have been processed or the processor    * returns {@code false} and returns the result produced by the processor.    *    *<p>Like {@link BufferedReader}, this method breaks lines on any of {@code \n}, {@code \r} or    * {@code \r\n}, does not include the line separator in the lines passed to the {@code processor}    * and does not consider there to be an extra empty line at the end if the content is terminated    * with a line separator.    *    * @throws IOException if an I/O error occurs in the process of reading from this source or if    *     {@code processor} throws an {@code IOException}    * @since 16.0    */
annotation|@
name|Beta
DECL|method|readLines (LineProcessor<T> processor)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readLines
parameter_list|(
name|LineProcessor
argument_list|<
name|T
argument_list|>
name|processor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|Reader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CharStreams
operator|.
name|readLines
argument_list|(
name|reader
argument_list|,
name|processor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns whether the source has zero chars. The default implementation is to open a stream and    * check for EOF.    *    * @throws IOException if an I/O error occurs    * @since 15.0    */
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|Reader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|read
argument_list|()
operator|==
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from    * the source will contain the concatenated data from the streams of the underlying sources.    *    *<p>Only one underlying stream will be open at a time. Closing the  concatenated stream will    * close the open underlying stream.    *    * @param sources the sources to concatenate    * @return a {@code CharSource} containing the concatenated data    * @since 15.0    */
DECL|method|concat (Iterable<? extends CharSource> sources)
specifier|public
specifier|static
name|CharSource
name|concat
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSource
argument_list|>
name|sources
parameter_list|)
block|{
return|return
operator|new
name|ConcatenatedCharSource
argument_list|(
name|sources
argument_list|)
return|;
block|}
comment|/**    * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from    * the source will contain the concatenated data from the streams of the underlying sources.    *    *<p>Only one underlying stream will be open at a time. Closing the concatenated stream will    * close the open underlying stream.    *    *<p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this    * method is called. This will fail if the iterator is infinite and may cause problems if the    * iterator eagerly fetches data for each source when iterated (rather than producing sources    * that only load data through their streams). Prefer using the {@link #concat(Iterable)}    * overload if possible.    *    * @param sources the sources to concatenate    * @return a {@code CharSource} containing the concatenated data    * @throws NullPointerException if any of {@code sources} is {@code null}    * @since 15.0    */
DECL|method|concat (Iterator<? extends CharSource> sources)
specifier|public
specifier|static
name|CharSource
name|concat
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|CharSource
argument_list|>
name|sources
parameter_list|)
block|{
return|return
name|concat
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|sources
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from    * the source will contain the concatenated data from the streams of the underlying sources.    *    *<p>Only one underlying stream will be open at a time. Closing the concatenated stream will    * close the open underlying stream.    *    * @param sources the sources to concatenate    * @return a {@code CharSource} containing the concatenated data    * @throws NullPointerException if any of {@code sources} is {@code null}    * @since 15.0    */
DECL|method|concat (CharSource... sources)
specifier|public
specifier|static
name|CharSource
name|concat
parameter_list|(
name|CharSource
modifier|...
name|sources
parameter_list|)
block|{
return|return
name|concat
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|sources
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a view of the given character sequence as a {@link CharSource}. The behavior of the    * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if    * the {@code charSequence} is mutated while it is being read, so don't do that.    *    * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})    */
DECL|method|wrap (CharSequence charSequence)
specifier|public
specifier|static
name|CharSource
name|wrap
parameter_list|(
name|CharSequence
name|charSequence
parameter_list|)
block|{
return|return
operator|new
name|CharSequenceCharSource
argument_list|(
name|charSequence
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable {@link CharSource} that contains no characters.    *    * @since 15.0    */
DECL|method|empty ()
specifier|public
specifier|static
name|CharSource
name|empty
parameter_list|()
block|{
return|return
name|EmptyCharSource
operator|.
name|INSTANCE
return|;
block|}
DECL|class|CharSequenceCharSource
specifier|private
specifier|static
class|class
name|CharSequenceCharSource
extends|extends
name|CharSource
block|{
DECL|field|LINE_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|LINE_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\r\n|\n|\r"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|seq
specifier|private
specifier|final
name|CharSequence
name|seq
decl_stmt|;
DECL|method|CharSequenceCharSource (CharSequence seq)
specifier|protected
name|CharSequenceCharSource
parameter_list|(
name|CharSequence
name|seq
parameter_list|)
block|{
name|this
operator|.
name|seq
operator|=
name|checkNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openStream ()
specifier|public
name|Reader
name|openStream
parameter_list|()
block|{
return|return
operator|new
name|CharSequenceReader
argument_list|(
name|seq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|String
name|read
parameter_list|()
block|{
return|return
name|seq
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|seq
operator|.
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * Returns an iterable over the lines in the string. If the string ends in      * a newline, a final empty string is not included to match the behavior of      * BufferedReader/LineReader.readLine().      */
DECL|method|lines ()
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|LINE_SPLITTER
operator|.
name|split
argument_list|(
name|seq
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|lines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|next
init|=
name|lines
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// skip last line if it's empty
if|if
condition|(
name|lines
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|next
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|readFirstLine ()
specifier|public
name|String
name|readFirstLine
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|lines
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|lines
operator|.
name|hasNext
argument_list|()
condition|?
name|lines
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|readLines ()
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|lines
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readLines (LineProcessor<T> processor)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readLines
parameter_list|(
name|LineProcessor
argument_list|<
name|T
argument_list|>
name|processor
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|line
range|:
name|lines
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|processor
operator|.
name|processLine
argument_list|(
name|line
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|processor
operator|.
name|getResult
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CharSource.wrap("
operator|+
name|truncate
argument_list|(
name|seq
argument_list|,
literal|30
argument_list|,
literal|"..."
argument_list|)
operator|+
literal|")"
return|;
block|}
comment|/**      * Truncates the given character sequence to the given maximum length. If the length of the      * sequence is greater than {@code maxLength}, the returned string will be exactly      * {@code maxLength} chars in length and will end with the given {@code truncationIndicator}.      * Otherwise, the sequence will be returned as a string with no changes to the content.      *      *<p>Examples:      *      *<pre>   {@code      *   truncate("foobar", 7, "..."); // returns "foobar"      *   truncate("foobar", 5, "..."); // returns "fo..." }</pre>      *      *<p><b>Note:</b> This method<i>may</i> work with certain non-ASCII text but is not safe for      * use with arbitrary Unicode text. It is mostly intended for use with text that is known to be      * safe for use with it (such as all-ASCII text) and for simple debugging text. When using this      * method, consider the following:      *      *<ul>      *<li>it may split surrogate pairs</li>      *<li>it may split characters and combining characters</li>      *<li>it does not consider word boundaries</li>      *<li>if truncating for display to users, there are other considerations that must be taken      *   into account</li>      *<li>the appropriate truncation indicator may be locale-dependent</li>      *<li>it is safe to use non-ASCII characters in the truncation indicator</li>      *</ul>      *      *      * @throws IllegalArgumentException if {@code maxLength} is less than the length of      *     {@code truncationIndicator}      */
comment|/*      *<p>TODO(user, cpovirk): Use Ascii.truncate once it is available in our internal copy of      * guava_jdk5.      */
DECL|method|truncate (CharSequence seq, int maxLength, String truncationIndicator)
specifier|private
specifier|static
name|String
name|truncate
parameter_list|(
name|CharSequence
name|seq
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|String
name|truncationIndicator
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
comment|// length to truncate the sequence to, not including the truncation indicator
name|int
name|truncationLength
init|=
name|maxLength
operator|-
name|truncationIndicator
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// in this worst case, this allows a maxLength equal to the length of the truncationIndicator,
comment|// meaning that a string will be truncated to just the truncation indicator itself
name|checkArgument
argument_list|(
name|truncationLength
operator|>=
literal|0
argument_list|,
literal|"maxLength (%s) must be>= length of the truncation indicator (%s)"
argument_list|,
name|maxLength
argument_list|,
name|truncationIndicator
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|seq
operator|.
name|length
argument_list|()
operator|<=
name|maxLength
condition|)
block|{
name|String
name|string
init|=
name|seq
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|<=
name|maxLength
condition|)
block|{
return|return
name|string
return|;
block|}
comment|// if the length of the toString() result was> maxLength for some reason, truncate that
name|seq
operator|=
name|string
expr_stmt|;
block|}
return|return
operator|new
name|StringBuilder
argument_list|(
name|maxLength
argument_list|)
operator|.
name|append
argument_list|(
name|seq
argument_list|,
literal|0
argument_list|,
name|truncationLength
argument_list|)
operator|.
name|append
argument_list|(
name|truncationIndicator
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|EmptyCharSource
specifier|private
specifier|static
specifier|final
class|class
name|EmptyCharSource
extends|extends
name|CharSequenceCharSource
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|EmptyCharSource
name|INSTANCE
init|=
operator|new
name|EmptyCharSource
argument_list|()
decl_stmt|;
DECL|method|EmptyCharSource ()
specifier|private
name|EmptyCharSource
parameter_list|()
block|{
name|super
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CharSource.empty()"
return|;
block|}
block|}
DECL|class|ConcatenatedCharSource
specifier|private
specifier|static
specifier|final
class|class
name|ConcatenatedCharSource
extends|extends
name|CharSource
block|{
DECL|field|sources
specifier|private
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSource
argument_list|>
name|sources
decl_stmt|;
DECL|method|ConcatenatedCharSource (Iterable<? extends CharSource> sources)
name|ConcatenatedCharSource
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSource
argument_list|>
name|sources
parameter_list|)
block|{
name|this
operator|.
name|sources
operator|=
name|checkNotNull
argument_list|(
name|sources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openStream ()
specifier|public
name|Reader
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiReader
argument_list|(
name|sources
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|CharSource
name|source
range|:
name|sources
control|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CharSource.concat("
operator|+
name|sources
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

