begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable object that may or may not contain a non-null reference to another object. Note that  * an instance of this type never "contains {@code null}"; it either contains a non-null reference  * or it contains nothing (the reference is "absent"). The method {@link #isPresent} distinguishes  * between these cases.  *  *<p>Java's type system does not account for nullability; that is, an intentionally-nullable  * reference has the same type as one that is expected never to be null. One reason to use a  * non-null {@code Optional<Foo>} reference in place of a nullable {@code Foo} reference is to  * surface this distinction to the type system; the two types are no longer interchangeable. Also,  * the need to invoke {@link #get} serves as a reminder to either check {@link #isPresent} or  * provide a default value, while with a nullable reference, it's easy to accidentally dereference  * it without checking.  *  *<p>(Note that if you can find or create a suitable  *<a href="http://en.wikipedia.org/wiki/Null_Object_pattern">null object</a>, you may not need  *<i>either</i> strategy for coping with nullability.)  *  *<p>Other uses of this class include  *  *<ul>  *<li>To distinguish between "unknown" (for example, not present in a map) and "known to have no  *     value" (present in the map, with value {@code Optional.absent()})  *<li>To wrap nullable references for storage in a collection that does not support {@code null}  *     (though there are  *<a href="http://code.google.com/p/guava-libraries/wiki/LivingWithNullHostileCollections">  *     several other approaches to this</a> that should be considered first)  *</ul>  *  *<p>This class is not intended as a direct analogue of any existing "option" or "maybe" construct  * from other programming environments, though it may bear some similarities.  *  *<p>If you are looking for a<i>mutable</i> holder class, see {@link Holder}.  *  * @param<T> the type of instance that can be contained. {@code Optional} is naturally covariant on  *     this type, so it is safe to cast an {@code Optional<T>} to {@code Optional<S>} for any  *     supertype {@code S} of {@code T}.    * @author Kurt Alfred Kluever  * @author Kevin Bourrillion  * @since Guava release 10  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|Optional
specifier|public
specifier|final
class|class
name|Optional
parameter_list|<
name|T
parameter_list|>
block|{
comment|// Static factories
comment|/**    * Returns an {@code Optional} instance with no contained reference.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|absent ()
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|absent
parameter_list|()
block|{
return|return
operator|(
name|Optional
argument_list|<
name|T
argument_list|>
operator|)
name|ABSENT
return|;
block|}
DECL|field|ABSENT
specifier|private
specifier|static
specifier|final
name|Optional
argument_list|<
name|Object
argument_list|>
name|ABSENT
init|=
operator|new
name|Optional
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Returns an {@code Optional} instance containing the given non-null reference.    */
DECL|method|of (T reference)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
name|T
name|reference
parameter_list|)
block|{
return|return
operator|new
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|reference
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that    * reference; otherwise returns {@link Optional#absent}.    */
DECL|method|fromNullable (@ullable T nullableReference)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|fromNullable
parameter_list|(
annotation|@
name|Nullable
name|T
name|nullableReference
parameter_list|)
block|{
return|return
operator|(
name|nullableReference
operator|==
literal|null
operator|)
condition|?
name|Optional
operator|.
expr|<
name|T
operator|>
name|absent
argument_list|()
else|:
operator|new
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|(
name|nullableReference
argument_list|)
return|;
block|}
comment|// Constructors
DECL|field|reference
annotation|@
name|Nullable
specifier|private
specifier|final
name|T
name|reference
decl_stmt|;
DECL|method|Optional (@ullable T reference)
specifier|private
name|Optional
parameter_list|(
annotation|@
name|Nullable
name|T
name|reference
parameter_list|)
block|{
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
block|}
comment|// Accessors
comment|/**    * Returns {@code true} if this instance contains a reference.    */
DECL|method|isPresent ()
specifier|public
name|boolean
name|isPresent
parameter_list|()
block|{
return|return
name|reference
operator|!=
literal|null
return|;
block|}
comment|// TODO(kevinb): isAbsent too?
comment|/**    * Returns the contained non-null reference, which must be present.    *    * @throws IllegalStateException if the reference is absent ({@link #isPresent} returns {@code    *     false})    */
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
block|{
name|checkState
argument_list|(
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
comment|/**    * Returns the contained non-null reference if it is present; {@code defaultValue} otherwise.    */
comment|// TODO(kevinb): consider renaming this method
DECL|method|get (@ullable T defaultValue)
annotation|@
name|Nullable
specifier|public
name|T
name|get
parameter_list|(
annotation|@
name|Nullable
name|T
name|defaultValue
parameter_list|)
block|{
return|return
name|isPresent
argument_list|()
condition|?
name|reference
else|:
name|defaultValue
return|;
block|}
comment|// Object overrides
comment|/**    * Returns {@code true} if {@code object} is an {@code Optional} instance, and either the    * contained references are {@linkplain Object#equals equal} to each other or both are absent.    * Note that {@code Optional} instances of differing parameterized types can be equal.    */
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Optional
condition|)
block|{
name|Optional
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Optional
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|reference
argument_list|,
name|other
operator|.
name|reference
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns a hash code for this instance.    */
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0x598df91c
operator|+
operator|(
name|isPresent
argument_list|()
condition|?
name|reference
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
comment|/**    * Returns a string representation for this instance. The form of this string representation is    * unspecified.    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|isPresent
argument_list|()
condition|?
literal|"Optional.of("
operator|+
name|reference
operator|+
literal|")"
else|:
literal|"Optional.absent()"
return|;
block|}
block|}
end_class

end_unit

