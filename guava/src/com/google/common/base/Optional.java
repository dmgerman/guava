begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable object that may contain a non-null reference to another object. Each  * instance of this type either contains a non-null reference, or contains nothing (in  * which case we say that the reference is "absent"); it is never said to "contain {@code  * null}".  *  *<p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable  * {@code T} reference. It allows you to represent "a {@code T} that must be present" and  * a "a {@code T} that might be absent" as two distinct types in your program, which can  * aid clarity.  *  *<p>Some uses of this class include  *  *<ul>  *<li>As a method return type, as an alternative to returning {@code null} to indicate  *     that no value was available  *<li>To distinguish between "unknown" (for example, not present in a map) and "known to  *     have no value" (present in the map, with value {@code Optional.absent()})  *<li>To wrap nullable references for storage in a collection that does not support  *     {@code null} (though there are  *<a href="http://code.google.com/p/guava-libraries/wiki/LivingWithNullHostileCollections">  *     several other approaches to this</a> that should be considered first)  *</ul>  *  *<p>A common alternative to using this class is to find or create a suitable  *<a href="http://en.wikipedia.org/wiki/Null_Object_pattern">null object</a> for the  * type in question.  *  *<p>This class is not intended as a direct analogue of any existing "option" or "maybe"  * construct from other programming environments, though it may bear some similarities.  *  *  * @param<T> the type of instance that can be contained. {@code Optional} is naturally  *     covariant on this type, so it is safe to cast an {@code Optional<T>} to {@code  *     Optional<S>} for any supertype {@code S} of {@code T}.  * @author Kurt Alfred Kluever  * @author Kevin Bourrillion  * @since 10.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|Optional
specifier|public
specifier|abstract
class|class
name|Optional
parameter_list|<
name|T
parameter_list|>
implements|implements
name|BaseHolder
argument_list|<
name|T
argument_list|>
implements|,
name|Serializable
block|{
comment|/**    * Returns an {@code Optional} instance with no contained reference.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|absent ()
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|absent
parameter_list|()
block|{
return|return
operator|(
name|Optional
argument_list|<
name|T
argument_list|>
operator|)
name|Absent
operator|.
name|INSTANCE
return|;
block|}
comment|/**    * Returns an {@code Optional} instance containing the given non-null reference.    */
DECL|method|of (T reference)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
name|T
name|reference
parameter_list|)
block|{
return|return
operator|new
name|Present
argument_list|<
name|T
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|reference
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that    * reference; otherwise returns {@link Optional#absent}.    */
DECL|method|fromNullable (@ullable T nullableReference)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|fromNullable
parameter_list|(
annotation|@
name|Nullable
name|T
name|nullableReference
parameter_list|)
block|{
return|return
operator|(
name|nullableReference
operator|==
literal|null
operator|)
condition|?
name|Optional
operator|.
expr|<
name|T
operator|>
name|absent
argument_list|()
else|:
operator|new
name|Present
argument_list|<
name|T
argument_list|>
argument_list|(
name|nullableReference
argument_list|)
return|;
block|}
DECL|method|Optional ()
specifier|private
name|Optional
parameter_list|()
block|{}
comment|/**    * Returns this {@code Optional} if it has a value present; {@code secondChoice}    * otherwise.    */
DECL|method|or (Optional<? extends T> secondChoice)
specifier|public
specifier|abstract
name|Optional
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Optional
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|secondChoice
parameter_list|)
function_decl|;
comment|/**    * Returns the contained instance if it is present; {@code supplier.get()} otherwise.    */
DECL|method|or (Supplier<? extends T> supplier)
annotation|@
name|Nullable
specifier|public
specifier|abstract
name|T
name|or
parameter_list|(
name|Supplier
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|supplier
parameter_list|)
function_decl|;
comment|/**    * Returns {@code true} if {@code object} is an {@code Optional} instance, and either    * the contained references are {@linkplain Object#equals equal} to each other or both    * are absent. Note that {@code Optional} instances of differing parameterized types can    * be equal.    */
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
function_decl|;
comment|/**    * Returns a hash code for this instance.    */
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
comment|/**    * Returns a string representation for this instance. The form of this string    * representation is unspecified.    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
DECL|class|Present
specifier|private
specifier|static
specifier|final
class|class
name|Present
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Optional
argument_list|<
name|T
argument_list|>
block|{
DECL|field|reference
specifier|private
specifier|final
name|T
name|reference
decl_stmt|;
DECL|method|Present (T reference)
name|Present
parameter_list|(
name|T
name|reference
parameter_list|)
block|{
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
block|}
DECL|method|isPresent ()
annotation|@
name|Override
specifier|public
name|boolean
name|isPresent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|get ()
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|reference
return|;
block|}
DECL|method|or (T defaultValue)
annotation|@
name|Override
specifier|public
name|T
name|or
parameter_list|(
name|T
name|defaultValue
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|defaultValue
argument_list|,
literal|"use orNull() instead of or(null)"
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
DECL|method|or (Optional<? extends T> secondChoice)
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Optional
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|secondChoice
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|secondChoice
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|or (Supplier<? extends T> supplier)
annotation|@
name|Override
specifier|public
name|T
name|or
parameter_list|(
name|Supplier
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|supplier
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
DECL|method|orNull ()
annotation|@
name|Override
specifier|public
name|T
name|orNull
parameter_list|()
block|{
return|return
name|reference
return|;
block|}
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Present
condition|)
block|{
name|Present
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Present
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|reference
operator|.
name|equals
argument_list|(
name|other
operator|.
name|reference
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0x598df91c
operator|+
name|reference
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Optional.of("
operator|+
name|reference
operator|+
literal|")"
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|Absent
specifier|private
specifier|static
specifier|final
class|class
name|Absent
extends|extends
name|Optional
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|Absent
name|INSTANCE
init|=
operator|new
name|Absent
argument_list|()
decl_stmt|;
DECL|method|isPresent ()
annotation|@
name|Override
specifier|public
name|boolean
name|isPresent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|get ()
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"value is absent"
argument_list|)
throw|;
block|}
DECL|method|or (Object defaultValue)
annotation|@
name|Override
specifier|public
name|Object
name|or
parameter_list|(
name|Object
name|defaultValue
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|defaultValue
argument_list|,
literal|"use orNull() instead of or(null)"
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe covariant cast
DECL|method|or (Optional<?> secondChoice)
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Object
argument_list|>
name|or
parameter_list|(
name|Optional
argument_list|<
name|?
argument_list|>
name|secondChoice
parameter_list|)
block|{
return|return
operator|(
name|Optional
operator|)
name|checkNotNull
argument_list|(
name|secondChoice
argument_list|)
return|;
block|}
DECL|method|or (Supplier<?> supplier)
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Object
name|or
parameter_list|(
name|Supplier
argument_list|<
name|?
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|orNull ()
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Object
name|orNull
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|object
operator|==
name|this
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0x598df91c
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Optional.absent()"
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
block|}
end_class

end_unit

