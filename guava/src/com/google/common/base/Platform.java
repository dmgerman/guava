begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
operator|.
name|lenientFormat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|parseBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceConfigurationError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Methods factored out so that they can be emulated differently in GWT.  *  * @author Jesse Wilson  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|Platform
specifier|final
class|class
name|Platform
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Platform
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|patternCompiler
specifier|private
specifier|static
specifier|final
name|PatternCompiler
name|patternCompiler
init|=
name|loadPatternCompiler
argument_list|()
decl_stmt|;
DECL|method|Platform ()
specifier|private
name|Platform
parameter_list|()
block|{}
comment|/** Calls {@link System#nanoTime()}. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"GoodTime"
argument_list|)
comment|// reading system time without TimeSource
DECL|method|systemNanoTime ()
specifier|static
name|long
name|systemNanoTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
DECL|method|precomputeCharMatcher (CharMatcher matcher)
specifier|static
name|CharMatcher
name|precomputeCharMatcher
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|)
block|{
return|return
name|matcher
operator|.
name|precomputedInternal
argument_list|()
return|;
block|}
DECL|method|getEnumIfPresent (Class<T> enumClass, String value)
specifier|static
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|getEnumIfPresent
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|enumClass
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|?
extends|extends
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|>
name|ref
init|=
name|Enums
operator|.
name|getEnumConstants
argument_list|(
name|enumClass
argument_list|)
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|ref
operator|==
literal|null
condition|?
name|Optional
operator|.
expr|<
name|T
operator|>
name|absent
argument_list|()
else|:
name|Optional
operator|.
name|of
argument_list|(
name|enumClass
operator|.
name|cast
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|formatCompact4Digits (double value)
specifier|static
name|String
name|formatCompact4Digits
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%.4g"
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|stringIsNullOrEmpty (@ullable String string)
specifier|static
name|boolean
name|stringIsNullOrEmpty
parameter_list|(
annotation|@
name|Nullable
name|String
name|string
parameter_list|)
block|{
return|return
name|string
operator|==
literal|null
operator|||
name|string
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|nullToEmpty (@ullable String string)
specifier|static
name|String
name|nullToEmpty
parameter_list|(
annotation|@
name|Nullable
name|String
name|string
parameter_list|)
block|{
return|return
operator|(
name|string
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|string
return|;
block|}
DECL|method|emptyToNull (@ullable String string)
specifier|static
name|String
name|emptyToNull
parameter_list|(
annotation|@
name|Nullable
name|String
name|string
parameter_list|)
block|{
return|return
name|stringIsNullOrEmpty
argument_list|(
name|string
argument_list|)
condition|?
literal|null
else|:
name|string
return|;
block|}
DECL|method|compilePattern (String pattern)
specifier|static
name|CommonPattern
name|compilePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|patternCompiler
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
return|;
block|}
DECL|method|patternCompilerIsPcreLike ()
specifier|static
name|boolean
name|patternCompilerIsPcreLike
parameter_list|()
block|{
return|return
name|patternCompiler
operator|.
name|isPcreLike
argument_list|()
return|;
block|}
DECL|method|loadPatternCompiler ()
specifier|private
specifier|static
name|PatternCompiler
name|loadPatternCompiler
parameter_list|()
block|{
return|return
operator|new
name|JdkPatternCompiler
argument_list|()
return|;
block|}
DECL|method|logPatternCompilerError (ServiceConfigurationError e)
specifier|private
specifier|static
name|void
name|logPatternCompilerError
parameter_list|(
name|ServiceConfigurationError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Error loading regex compiler, falling back to next option"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
DECL|class|JdkPatternCompiler
specifier|private
specifier|static
specifier|final
class|class
name|JdkPatternCompiler
implements|implements
name|PatternCompiler
block|{
annotation|@
name|Override
DECL|method|compile (String pattern)
specifier|public
name|CommonPattern
name|compile
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|JdkPattern
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPcreLike ()
specifier|public
name|boolean
name|isPcreLike
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|field|GWT_RPC_PROPERTY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|GWT_RPC_PROPERTY_NAME
init|=
literal|"guava.gwt.emergency_reenable_rpc"
decl_stmt|;
DECL|method|checkGwtRpcEnabled ()
specifier|static
name|void
name|checkGwtRpcEnabled
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|GWT_RPC_PROPERTY_NAME
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|lenientFormat
argument_list|(
literal|"We are removing GWT-RPC support for Guava types. You can temporarily reenable"
operator|+
literal|" support by setting the system property %s to true. For more about system"
operator|+
literal|" properties, see %s. For more about Guava's GWT-RPC support, see %s."
argument_list|,
name|GWT_RPC_PROPERTY_NAME
argument_list|,
literal|"https://stackoverflow.com/q/5189914/28465"
argument_list|,
literal|"https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

