begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Helper class to implement the contract around nulls.  *   * @author benyu@google.com (Jige Yu)  */
end_comment

begin_comment
comment|// TODO(benyu): Pull up into Equivalence and expose it as SPI.
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractEquivalence
specifier|abstract
class|class
name|AbstractEquivalence
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Equivalence
argument_list|<
name|T
argument_list|>
block|{
DECL|method|equivalent (@ullable T a, @Nullable T b)
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equivalent
parameter_list|(
annotation|@
name|Nullable
name|T
name|a
parameter_list|,
annotation|@
name|Nullable
name|T
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|equivalentNonNull
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|hash (@ullable T t)
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|hash
parameter_list|(
annotation|@
name|Nullable
name|T
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|hashNonNull
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|method|equivalentNonNull (T a, T b)
specifier|protected
specifier|abstract
name|boolean
name|equivalentNonNull
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
function_decl|;
DECL|method|hashNonNull (T t)
specifier|protected
specifier|abstract
name|int
name|hashNonNull
parameter_list|(
name|T
name|t
parameter_list|)
function_decl|;
block|}
end_class

end_unit

