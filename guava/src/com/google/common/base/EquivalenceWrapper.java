begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Wraps an object so that {@link #equals(Object)} and {@link #hashCode()} delegate to an  * {@link Equivalence}.  *  *<p>For example, given an {@link Equivalence} for {@link String strings} named {@code equiv} that  * tests equivalence using their lengths:  *  *<pre>   {@code  *   Equivalences.wrap(equiv, "a").equals(Equivalences.wrap(equiv, "b")) // true  *   Equivalences.wrap(equiv, "a").equals(Equivalences.wrap(equiv, "hello")) // false  * }</pre>  *  *<p>Note in particular that an equivalence wrapper is never equal to the object it wraps.  *  *<pre>   {@code  *   Equivalences.wrap(equiv, obj).equals(obj) // always false  * }</pre>  *  * @author Gregory Kick  * @since Guava release 10  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|EquivalenceWrapper
specifier|public
specifier|final
class|class
name|EquivalenceWrapper
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|equivalence
specifier|private
specifier|final
name|Equivalence
argument_list|<
name|?
super|super
name|T
argument_list|>
name|equivalence
decl_stmt|;
DECL|field|reference
annotation|@
name|Nullable
specifier|private
specifier|final
name|T
name|reference
decl_stmt|;
DECL|method|EquivalenceWrapper (Equivalence<? super T> equivalence, @Nullable T reference)
name|EquivalenceWrapper
parameter_list|(
name|Equivalence
argument_list|<
name|?
super|super
name|T
argument_list|>
name|equivalence
parameter_list|,
annotation|@
name|Nullable
name|T
name|reference
parameter_list|)
block|{
name|this
operator|.
name|equivalence
operator|=
name|checkNotNull
argument_list|(
name|equivalence
argument_list|)
expr_stmt|;
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
block|}
comment|/** Returns the (possibly null) reference wrapped by this instance. */
DECL|method|get ()
annotation|@
name|Nullable
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|reference
return|;
block|}
comment|/**    * Returns the result of {@link Equivalence#hash(Object)} applied to the the wrapped reference.    */
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|equivalence
operator|.
name|hash
argument_list|(
name|reference
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped    * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}    * equivalence.    */
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|EquivalenceWrapper
condition|)
block|{
name|EquivalenceWrapper
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|EquivalenceWrapper
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
comment|/*        * We cast to Equivalence<Object> here because we can't check the type of the reference held        * by the other wrapper.  But, by checking that the Equivalences are equal, we know that        * whatever type it is, it is assignable to the type handled by this wrapper's equivalence.        */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|equivalence
init|=
operator|(
name|Equivalence
argument_list|<
name|Object
argument_list|>
operator|)
name|this
operator|.
name|equivalence
decl_stmt|;
return|return
name|equivalence
operator|.
name|equals
argument_list|(
name|that
operator|.
name|equivalence
argument_list|)
operator|&&
name|equivalence
operator|.
name|equivalent
argument_list|(
name|this
operator|.
name|reference
argument_list|,
name|that
operator|.
name|reference
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns a string representation for this equivalence wrapper. The form of this string    * representation is not specified.    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"equivalence"
argument_list|,
name|equivalence
argument_list|)
operator|.
name|add
argument_list|(
literal|"value"
argument_list|,
name|reference
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

