begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|DoubleUtils
operator|.
name|isFinite
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|NaN
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|concurrent
operator|.
name|LazyInit
import|;
end_import

begin_comment
comment|/**  * The representation of a linear transformation between real numbers {@code x} and {@code y}.  * Graphically, this is the specification of a straight line on a plane. The transformation can be  * expressed as {@code y = m * x + c} for finite {@code m} and {@code c}, unless it is a vertical  * transformation in which case {@code x} has a constant value for all {@code y}. In the  * non-vertical case, {@code m} is the slope of the transformation (and a horizontal transformation  * has zero slope).  *  * @author Pete Gillin  * @since 20.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtIncompatible
DECL|class|LinearTransformation
specifier|public
specifier|abstract
class|class
name|LinearTransformation
block|{
comment|/**    * Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be    * finite. Call either {@link LinearTransformationBuilder#and} or {@link    * LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.    */
DECL|method|mapping (double x1, double y1)
specifier|public
specifier|static
name|LinearTransformationBuilder
name|mapping
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|isFinite
argument_list|(
name|x1
argument_list|)
operator|&&
name|isFinite
argument_list|(
name|y1
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|LinearTransformationBuilder
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
return|;
block|}
comment|/**    * This is an intermediate stage in the construction process. It is returned by {@link    * LinearTransformation#mapping}. You almost certainly don't want to keep instances around, but    * instead use method chaining. This represents a single point mapping, i.e. a mapping between one    * {@code x} and {@code y} value pair.    *    * @since 20.0    */
DECL|class|LinearTransformationBuilder
specifier|public
specifier|static
specifier|final
class|class
name|LinearTransformationBuilder
block|{
DECL|field|x1
specifier|private
specifier|final
name|double
name|x1
decl_stmt|;
DECL|field|y1
specifier|private
specifier|final
name|double
name|y1
decl_stmt|;
DECL|method|LinearTransformationBuilder (double x1, double y1)
specifier|private
name|LinearTransformationBuilder
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|)
block|{
name|this
operator|.
name|x1
operator|=
name|x1
expr_stmt|;
name|this
operator|.
name|y1
operator|=
name|y1
expr_stmt|;
block|}
comment|/**      * Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values      * must not both be identical to the values given in the first mapping. If only the {@code x}      * values are identical, the transformation is vertical. If only the {@code y} values are      * identical, the transformation is horizontal (i.e. the slope is zero).      */
DECL|method|and (double x2, double y2)
specifier|public
name|LinearTransformation
name|and
parameter_list|(
name|double
name|x2
parameter_list|,
name|double
name|y2
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|isFinite
argument_list|(
name|x2
argument_list|)
operator|&&
name|isFinite
argument_list|(
name|y2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x2
operator|==
name|x1
condition|)
block|{
name|checkArgument
argument_list|(
name|y2
operator|!=
name|y1
argument_list|)
expr_stmt|;
return|return
operator|new
name|VerticalLinearTransformation
argument_list|(
name|x1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|withSlope
argument_list|(
operator|(
name|y2
operator|-
name|y1
operator|)
operator|/
operator|(
name|x2
operator|-
name|x1
operator|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Finish building an instance with the given slope, i.e. the rate of change of {@code y} with      * respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case      * the transformation is vertical. (If it is zero, the transformation is horizontal.)      */
DECL|method|withSlope (double slope)
specifier|public
name|LinearTransformation
name|withSlope
parameter_list|(
name|double
name|slope
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|slope
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinite
argument_list|(
name|slope
argument_list|)
condition|)
block|{
name|double
name|yIntercept
init|=
name|y1
operator|-
name|x1
operator|*
name|slope
decl_stmt|;
return|return
operator|new
name|RegularLinearTransformation
argument_list|(
name|slope
argument_list|,
name|yIntercept
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|VerticalLinearTransformation
argument_list|(
name|x1
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Builds an instance representing a vertical transformation with a constant value of {@code x}.    * (The inverse of this will be a horizontal transformation.)    */
DECL|method|vertical (double x)
specifier|public
specifier|static
name|LinearTransformation
name|vertical
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|isFinite
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|VerticalLinearTransformation
argument_list|(
name|x
argument_list|)
return|;
block|}
comment|/**    * Builds an instance representing a horizontal transformation with a constant value of {@code y}.    * (The inverse of this will be a vertical transformation.)    */
DECL|method|horizontal (double y)
specifier|public
specifier|static
name|LinearTransformation
name|horizontal
parameter_list|(
name|double
name|y
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|isFinite
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|slope
init|=
literal|0.0
decl_stmt|;
return|return
operator|new
name|RegularLinearTransformation
argument_list|(
name|slope
argument_list|,
name|y
argument_list|)
return|;
block|}
comment|/**    * Builds an instance for datasets which contains {@link Double#NaN}. The {@link #isHorizontal}    * and {@link #isVertical} methods return {@code false} and the {@link #slope}, and {@link    * #transform} methods all return {@link Double#NaN}. The {@link #inverse} method returns the same    * instance.    */
DECL|method|forNaN ()
specifier|public
specifier|static
name|LinearTransformation
name|forNaN
parameter_list|()
block|{
return|return
name|NaNLinearTransformation
operator|.
name|INSTANCE
return|;
block|}
comment|/** Returns whether this is a vertical transformation. */
DECL|method|isVertical ()
specifier|public
specifier|abstract
name|boolean
name|isVertical
parameter_list|()
function_decl|;
comment|/** Returns whether this is a horizontal transformation. */
DECL|method|isHorizontal ()
specifier|public
specifier|abstract
name|boolean
name|isHorizontal
parameter_list|()
function_decl|;
comment|/**    * Returns the slope of the transformation, i.e. the rate of change of {@code y} with respect to    * {@code x}. This must not be called on a vertical transformation (i.e. when {@link    * #isVertical()} is true).    */
DECL|method|slope ()
specifier|public
specifier|abstract
name|double
name|slope
parameter_list|()
function_decl|;
comment|/**    * Returns the {@code y} corresponding to the given {@code x}. This must not be called on a    * vertical transformation (i.e. when {@link #isVertical()} is true).    */
DECL|method|transform (double x)
specifier|public
specifier|abstract
name|double
name|transform
parameter_list|(
name|double
name|x
parameter_list|)
function_decl|;
comment|/**    * Returns the inverse linear transformation. The inverse of a horizontal transformation is a    * vertical transformation, and vice versa. The inverse of the {@link #forNaN} transformation is    * itself. In all other cases, the inverse is a transformation such that applying both the    * original transformation and its inverse to a value gives you the original value give-or-take    * numerical errors. Calling this method multiple times on the same instance will always return    * the same instance. Calling this method on the result of calling this method on an instance will    * always return that original instance.    */
DECL|method|inverse ()
specifier|public
specifier|abstract
name|LinearTransformation
name|inverse
parameter_list|()
function_decl|;
DECL|class|RegularLinearTransformation
specifier|private
specifier|static
specifier|final
class|class
name|RegularLinearTransformation
extends|extends
name|LinearTransformation
block|{
DECL|field|slope
specifier|final
name|double
name|slope
decl_stmt|;
DECL|field|yIntercept
specifier|final
name|double
name|yIntercept
decl_stmt|;
DECL|field|inverse
annotation|@
name|LazyInit
name|LinearTransformation
name|inverse
decl_stmt|;
DECL|method|RegularLinearTransformation (double slope, double yIntercept)
name|RegularLinearTransformation
parameter_list|(
name|double
name|slope
parameter_list|,
name|double
name|yIntercept
parameter_list|)
block|{
name|this
operator|.
name|slope
operator|=
name|slope
expr_stmt|;
name|this
operator|.
name|yIntercept
operator|=
name|yIntercept
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
literal|null
expr_stmt|;
comment|// to be lazily initialized
block|}
DECL|method|RegularLinearTransformation (double slope, double yIntercept, LinearTransformation inverse)
name|RegularLinearTransformation
parameter_list|(
name|double
name|slope
parameter_list|,
name|double
name|yIntercept
parameter_list|,
name|LinearTransformation
name|inverse
parameter_list|)
block|{
name|this
operator|.
name|slope
operator|=
name|slope
expr_stmt|;
name|this
operator|.
name|yIntercept
operator|=
name|yIntercept
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
name|inverse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isVertical ()
specifier|public
name|boolean
name|isVertical
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isHorizontal ()
specifier|public
name|boolean
name|isHorizontal
parameter_list|()
block|{
return|return
operator|(
name|slope
operator|==
literal|0.0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|slope ()
specifier|public
name|double
name|slope
parameter_list|()
block|{
return|return
name|slope
return|;
block|}
annotation|@
name|Override
DECL|method|transform (double x)
specifier|public
name|double
name|transform
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|x
operator|*
name|slope
operator|+
name|yIntercept
return|;
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|LinearTransformation
name|inverse
parameter_list|()
block|{
name|LinearTransformation
name|result
init|=
name|inverse
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|inverse
operator|=
name|createInverse
argument_list|()
else|:
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"y = %g * x + %g"
argument_list|,
name|slope
argument_list|,
name|yIntercept
argument_list|)
return|;
block|}
DECL|method|createInverse ()
specifier|private
name|LinearTransformation
name|createInverse
parameter_list|()
block|{
if|if
condition|(
name|slope
operator|!=
literal|0.0
condition|)
block|{
return|return
operator|new
name|RegularLinearTransformation
argument_list|(
literal|1.0
operator|/
name|slope
argument_list|,
operator|-
literal|1.0
operator|*
name|yIntercept
operator|/
name|slope
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|VerticalLinearTransformation
argument_list|(
name|yIntercept
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|VerticalLinearTransformation
specifier|private
specifier|static
specifier|final
class|class
name|VerticalLinearTransformation
extends|extends
name|LinearTransformation
block|{
DECL|field|x
specifier|final
name|double
name|x
decl_stmt|;
DECL|field|inverse
annotation|@
name|LazyInit
name|LinearTransformation
name|inverse
decl_stmt|;
DECL|method|VerticalLinearTransformation (double x)
name|VerticalLinearTransformation
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
literal|null
expr_stmt|;
comment|// to be lazily initialized
block|}
DECL|method|VerticalLinearTransformation (double x, LinearTransformation inverse)
name|VerticalLinearTransformation
parameter_list|(
name|double
name|x
parameter_list|,
name|LinearTransformation
name|inverse
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
name|inverse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isVertical ()
specifier|public
name|boolean
name|isVertical
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isHorizontal ()
specifier|public
name|boolean
name|isHorizontal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|slope ()
specifier|public
name|double
name|slope
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|transform (double x)
specifier|public
name|double
name|transform
parameter_list|(
name|double
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|LinearTransformation
name|inverse
parameter_list|()
block|{
name|LinearTransformation
name|result
init|=
name|inverse
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|inverse
operator|=
name|createInverse
argument_list|()
else|:
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"x = %g"
argument_list|,
name|x
argument_list|)
return|;
block|}
DECL|method|createInverse ()
specifier|private
name|LinearTransformation
name|createInverse
parameter_list|()
block|{
return|return
operator|new
name|RegularLinearTransformation
argument_list|(
literal|0.0
argument_list|,
name|x
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NaNLinearTransformation
specifier|private
specifier|static
specifier|final
class|class
name|NaNLinearTransformation
extends|extends
name|LinearTransformation
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|NaNLinearTransformation
name|INSTANCE
init|=
operator|new
name|NaNLinearTransformation
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|isVertical ()
specifier|public
name|boolean
name|isVertical
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isHorizontal ()
specifier|public
name|boolean
name|isHorizontal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|slope ()
specifier|public
name|double
name|slope
parameter_list|()
block|{
return|return
name|NaN
return|;
block|}
annotation|@
name|Override
DECL|method|transform (double x)
specifier|public
name|double
name|transform
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|NaN
return|;
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|LinearTransformation
name|inverse
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NaN"
return|;
block|}
block|}
block|}
end_class

end_unit

