begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2020 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * A class for arithmetic on {@link BigDecimal} that is not covered by its built-in methods.  *  * @author Louis Wasserman  * @since NEXT  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|BigDecimalMath
specifier|public
class|class
name|BigDecimalMath
block|{
DECL|method|BigDecimalMath ()
specifier|private
name|BigDecimalMath
parameter_list|()
block|{}
comment|/**    * Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}    * is precisely representable as a {@code double}, its {@code double} value will be returned;    * otherwise, the rounding will choose between the two nearest representable values with {@code    * mode}.    *    *<p>For the case of {@link RoundingMode#HALF_DOWN}, {@code HALF_UP}, and {@code HALF_EVEN},    * infinite {@code double} values are considered infinitely far away. For example, 2^2000 is not    * representable as a double, but {@code roundToDouble(BigDecimal.valueOf(2).pow(2000), HALF_UP)}    * will return {@code Double.MAX_VALUE}, not {@code Double.POSITIVE_INFINITY}.    *    *<p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754    * default rounding mode: if the two nearest representable values are equally near, the one with    * the least significant bit zero is chosen. (In such cases, both of the nearest representable    * values are even integers; this method returns the one that is a multiple of a greater power of    * two.)    *    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}    *     is not precisely representable as a {@code double}    * @since NEXT    */
DECL|method|roundToDouble (BigDecimal x, RoundingMode mode)
specifier|public
specifier|static
name|double
name|roundToDouble
parameter_list|(
name|BigDecimal
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
return|return
name|BigDecimalToDoubleRounder
operator|.
name|INSTANCE
operator|.
name|roundToDouble
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
return|;
block|}
DECL|class|BigDecimalToDoubleRounder
specifier|private
specifier|static
class|class
name|BigDecimalToDoubleRounder
extends|extends
name|ToDoubleRounder
argument_list|<
name|BigDecimal
argument_list|>
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|BigDecimalToDoubleRounder
name|INSTANCE
init|=
operator|new
name|BigDecimalToDoubleRounder
argument_list|()
decl_stmt|;
DECL|method|BigDecimalToDoubleRounder ()
specifier|private
name|BigDecimalToDoubleRounder
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|roundToDoubleArbitrarily (BigDecimal bigDecimal)
name|double
name|roundToDoubleArbitrarily
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
return|return
name|bigDecimal
operator|.
name|doubleValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sign (BigDecimal bigDecimal)
name|int
name|sign
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
return|return
name|bigDecimal
operator|.
name|signum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toX (double d, RoundingMode mode)
name|BigDecimal
name|toX
parameter_list|(
name|double
name|d
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|minus (BigDecimal a, BigDecimal b)
name|BigDecimal
name|minus
parameter_list|(
name|BigDecimal
name|a
parameter_list|,
name|BigDecimal
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|subtract
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

