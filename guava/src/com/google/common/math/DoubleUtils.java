begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Utilities for {@code double} primitives. Some of these are exposed in JDK 6,  * but we can't depend on them there.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|DoubleUtils
specifier|final
class|class
name|DoubleUtils
block|{
comment|// TODO(user): replace with appropriate calls when we move to JDK 6
DECL|method|DoubleUtils ()
specifier|private
name|DoubleUtils
parameter_list|()
block|{   }
DECL|method|next (double x, boolean up)
specifier|static
name|double
name|next
parameter_list|(
name|double
name|x
parameter_list|,
name|boolean
name|up
parameter_list|)
block|{
comment|// Math.nextAfter is JDK 6.
if|if
condition|(
name|x
operator|==
literal|0.0
condition|)
block|{
return|return
name|up
condition|?
name|Double
operator|.
name|MIN_VALUE
else|:
operator|-
name|Double
operator|.
name|MIN_VALUE
return|;
block|}
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|x
operator|<
literal|0.0
operator|)
operator|==
name|up
condition|)
block|{
name|bits
operator|--
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|++
expr_stmt|;
block|}
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bits
argument_list|)
return|;
block|}
comment|// The mask for the significand, according to the {@link
comment|// Double#doubleToRawLongBits(double)} spec.
DECL|field|SIGNIFICAND_MASK
specifier|static
specifier|final
name|long
name|SIGNIFICAND_MASK
init|=
literal|0x000fffffffffffffL
decl_stmt|;
comment|// The mask for the exponent, according to the {@link
comment|// Double#doubleToRawLongBits(double)} spec.
DECL|field|EXPONENT_MASK
specifier|static
specifier|final
name|long
name|EXPONENT_MASK
init|=
literal|0x7ff0000000000000L
decl_stmt|;
comment|// The mask for the sign, according to the {@link
comment|// Double#doubleToRawLongBits(double)} spec.
DECL|field|SIGN_MASK
specifier|static
specifier|final
name|long
name|SIGN_MASK
init|=
literal|0x8000000000000000L
decl_stmt|;
DECL|field|SIGNIFICAND_BITS
specifier|static
specifier|final
name|int
name|SIGNIFICAND_BITS
init|=
literal|52
decl_stmt|;
DECL|field|EXPONENT_BIAS
specifier|static
specifier|final
name|int
name|EXPONENT_BIAS
init|=
literal|1023
decl_stmt|;
DECL|field|MIN_DOUBLE_EXPONENT
specifier|static
specifier|final
name|int
name|MIN_DOUBLE_EXPONENT
init|=
operator|-
literal|1022
decl_stmt|;
DECL|field|MAX_DOUBLE_EXPONENT
specifier|static
specifier|final
name|int
name|MAX_DOUBLE_EXPONENT
init|=
literal|1023
decl_stmt|;
comment|/**    * The implicit 1 bit that is omitted in significands of normal doubles.    */
DECL|field|IMPLICIT_BIT
specifier|static
specifier|final
name|long
name|IMPLICIT_BIT
init|=
name|SIGNIFICAND_MASK
operator|+
literal|1
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|getExponent (double d)
specifier|static
name|int
name|getExponent
parameter_list|(
name|double
name|d
parameter_list|)
block|{
comment|// TODO: replace with Math.getExponent in JDK 6
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|exponent
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|bits
operator|&
name|EXPONENT_MASK
operator|)
operator|>>
name|SIGNIFICAND_BITS
argument_list|)
decl_stmt|;
name|exponent
operator|-=
name|EXPONENT_BIAS
expr_stmt|;
return|return
name|exponent
return|;
block|}
comment|/**    * Returns {@code d * 2^scale}.    */
DECL|method|scalb (double d, int scale)
specifier|static
specifier|strictfp
name|double
name|scalb
parameter_list|(
name|double
name|d
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
comment|// TODO: replace with Math.scalb in JDK 6
name|int
name|exponent
init|=
name|getExponent
argument_list|(
name|d
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|exponent
condition|)
block|{
case|case
name|MAX_DOUBLE_EXPONENT
operator|+
literal|1
case|:
comment|// NaN, infinity
return|return
name|d
return|;
case|case
name|MIN_DOUBLE_EXPONENT
operator|-
literal|1
case|:
return|return
name|d
operator|*
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|scale
argument_list|)
return|;
default|default:
name|int
name|newExponent
init|=
name|exponent
operator|+
name|scale
decl_stmt|;
if|if
condition|(
name|MIN_DOUBLE_EXPONENT
operator|<=
name|newExponent
operator|&
name|newExponent
operator|<=
name|MAX_DOUBLE_EXPONENT
condition|)
block|{
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|bits
operator|&=
operator|~
name|EXPONENT_MASK
expr_stmt|;
name|bits
operator||=
operator|(
call|(
name|long
call|)
argument_list|(
name|newExponent
operator|+
name|EXPONENT_BIAS
argument_list|)
operator|)
operator|<<
name|SIGNIFICAND_BITS
expr_stmt|;
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bits
argument_list|)
return|;
block|}
return|return
name|d
operator|*
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|scale
argument_list|)
return|;
block|}
block|}
DECL|method|getSignificand (double d)
specifier|static
name|long
name|getSignificand
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|isFinite
argument_list|(
name|d
argument_list|)
argument_list|,
literal|"not a normal value"
argument_list|)
expr_stmt|;
name|int
name|exponent
init|=
name|getExponent
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|bits
operator|&=
name|SIGNIFICAND_MASK
expr_stmt|;
return|return
operator|(
name|exponent
operator|==
name|MIN_DOUBLE_EXPONENT
operator|-
literal|1
operator|)
condition|?
name|bits
operator|<<
literal|1
else|:
name|bits
operator||
name|IMPLICIT_BIT
return|;
block|}
DECL|method|isFinite (double d)
specifier|static
name|boolean
name|isFinite
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|getExponent
argument_list|(
name|d
argument_list|)
operator|<=
name|MAX_DOUBLE_EXPONENT
return|;
block|}
DECL|method|isNormal (double d)
specifier|static
name|boolean
name|isNormal
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|getExponent
argument_list|(
name|d
argument_list|)
operator|>=
name|MIN_DOUBLE_EXPONENT
return|;
block|}
comment|/*    * Returns x scaled by a power of 2 such that it is in the range [1, 2). Assumes x is positive,    * normal, and finite.    */
DECL|method|scaleNormalize (double x)
specifier|static
name|double
name|scaleNormalize
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|long
name|significand
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|x
argument_list|)
operator|&
name|SIGNIFICAND_MASK
decl_stmt|;
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|significand
operator||
name|ONE_BITS
argument_list|)
return|;
block|}
DECL|field|ONE_BITS
specifier|private
specifier|static
specifier|final
name|long
name|ONE_BITS
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

