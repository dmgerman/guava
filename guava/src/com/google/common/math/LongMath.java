begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkNoOverflow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkNonNegative
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkPositive
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkRoundingUnnecessary
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|abs
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_EVEN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_UP
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * A class for arithmetic on values of type {@code long}. Where possible, methods are defined and  * named analogously to their {@code BigInteger} counterparts.  *  *<p>The implementations of many methods in this class are based on material from Henry S. Warren,  * Jr.'s<i>Hacker's Delight</i>, (Addison Wesley, 2002).  *  *<p>Similar functionality for {@code int} and for {@link BigInteger} can be found in  * {@link IntMath} and {@link BigIntegerMath} respectively.  For other common operations on  * {@code long} values, see {@link com.google.common.primitives.Longs}.  *  * @author Louis Wasserman  * @since 11.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|LongMath
specifier|public
specifier|final
class|class
name|LongMath
block|{
comment|// NOTE: Whenever both tests are cheap and functional, it's faster to use&, | instead of&&, ||
comment|/**    * Returns {@code true} if {@code x} represents a power of two.    *    *<p>This differs from {@code Long.bitCount(x) == 1}, because    * {@code Long.bitCount(Long.MIN_VALUE) == 1}, but {@link Long#MIN_VALUE} is not a power of two.    */
DECL|method|isPowerOfTwo (long x)
specifier|public
specifier|static
name|boolean
name|isPowerOfTwo
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
name|x
operator|>
literal|0
operator|&
operator|(
name|x
operator|&
operator|(
name|x
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
return|;
block|}
comment|/**    * Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.    *    * @throws IllegalArgumentException if {@code x<= 0}    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}    *         is not a power of two    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|log2 (long x, RoundingMode mode)
specifier|public
specifier|static
name|int
name|log2
parameter_list|(
name|long
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkPositive
argument_list|(
literal|"x"
argument_list|,
name|x
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|DOWN
case|:
case|case
name|FLOOR
case|:
return|return
operator|(
name|Long
operator|.
name|SIZE
operator|-
literal|1
operator|)
operator|-
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|x
argument_list|)
return|;
case|case
name|UP
case|:
case|case
name|CEILING
case|:
return|return
name|Long
operator|.
name|SIZE
operator|-
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|x
operator|-
literal|1
argument_list|)
return|;
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
comment|// Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5
name|int
name|leadingZeros
init|=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|long
name|cmp
init|=
name|MAX_POWER_OF_SQRT2_UNSIGNED
operator|>>>
name|leadingZeros
decl_stmt|;
comment|// floor(2^(logFloor + 0.5))
name|int
name|logFloor
init|=
operator|(
name|Long
operator|.
name|SIZE
operator|-
literal|1
operator|)
operator|-
name|leadingZeros
decl_stmt|;
return|return
operator|(
name|x
operator|<=
name|cmp
operator|)
condition|?
name|logFloor
else|:
name|logFloor
operator|+
literal|1
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"impossible"
argument_list|)
throw|;
block|}
block|}
comment|/** The biggest half power of two that fits into an unsigned long */
DECL|field|MAX_POWER_OF_SQRT2_UNSIGNED
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|MAX_POWER_OF_SQRT2_UNSIGNED
init|=
literal|0xB504F333F9DE6484L
decl_stmt|;
comment|/**    * Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.    *    * @throws IllegalArgumentException if {@code x<= 0}    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}    *         is not a power of ten    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|log10 (long x, RoundingMode mode)
specifier|public
specifier|static
name|int
name|log10
parameter_list|(
name|long
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkPositive
argument_list|(
literal|"x"
argument_list|,
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|fitsInInt
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
name|IntMath
operator|.
name|log10
argument_list|(
operator|(
name|int
operator|)
name|x
argument_list|,
name|mode
argument_list|)
return|;
block|}
name|int
name|logFloor
init|=
name|log10Floor
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|long
name|floorPow
init|=
name|POWERS_OF_10
index|[
name|logFloor
index|]
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|x
operator|==
name|floorPow
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|FLOOR
case|:
case|case
name|DOWN
case|:
return|return
name|logFloor
return|;
case|case
name|CEILING
case|:
case|case
name|UP
case|:
return|return
operator|(
name|x
operator|==
name|floorPow
operator|)
condition|?
name|logFloor
else|:
name|logFloor
operator|+
literal|1
return|;
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
comment|// sqrt(10) is irrational, so log10(x)-logFloor is never exactly 0.5
return|return
operator|(
name|x
operator|<=
name|HALF_POWERS_OF_10
index|[
name|logFloor
index|]
operator|)
condition|?
name|logFloor
else|:
name|logFloor
operator|+
literal|1
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|log10Floor (long x)
specifier|static
name|int
name|log10Floor
parameter_list|(
name|long
name|x
parameter_list|)
block|{
comment|/*      * Based on Hacker's Delight Fig. 11-5, the two-table-lookup, branch-free implementation.      *      * The key idea is that based on the number of leading zeros (equivalently, floor(log2(x))),      * we can narrow the possible floor(log10(x)) values to two.  For example, if floor(log2(x))      * is 6, then 64<= x< 128, so floor(log10(x)) is either 1 or 2.      */
name|int
name|y
init|=
name|MAX_LOG10_FOR_LEADING_ZEROS
index|[
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|x
argument_list|)
index|]
decl_stmt|;
comment|// y is the higher of the two possible values of floor(log10(x))
name|long
name|sgn
init|=
operator|(
name|x
operator|-
name|POWERS_OF_10
index|[
name|y
index|]
operator|)
operator|>>>
operator|(
name|Long
operator|.
name|SIZE
operator|-
literal|1
operator|)
decl_stmt|;
comment|/*      * sgn is the sign bit of x - 10^y; it is 1 if x< 10^y, and 0 otherwise. If x< 10^y, then we      * want the lower of the two possible values, or y - 1, otherwise, we want y.      */
return|return
name|y
operator|-
operator|(
name|int
operator|)
name|sgn
return|;
block|}
comment|// MAX_LOG10_FOR_LEADING_ZEROS[i] == floor(log10(2^(Long.SIZE - i)))
DECL|field|MAX_LOG10_FOR_LEADING_ZEROS
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|byte
index|[]
name|MAX_LOG10_FOR_LEADING_ZEROS
init|=
block|{
literal|19
block|,
literal|18
block|,
literal|18
block|,
literal|18
block|,
literal|18
block|,
literal|17
block|,
literal|17
block|,
literal|17
block|,
literal|16
block|,
literal|16
block|,
literal|16
block|,
literal|15
block|,
literal|15
block|,
literal|15
block|,
literal|15
block|,
literal|14
block|,
literal|14
block|,
literal|14
block|,
literal|13
block|,
literal|13
block|,
literal|13
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
annotation|@
name|VisibleForTesting
DECL|field|POWERS_OF_10
specifier|static
specifier|final
name|long
index|[]
name|POWERS_OF_10
init|=
block|{
literal|1L
block|,
literal|10L
block|,
literal|100L
block|,
literal|1000L
block|,
literal|10000L
block|,
literal|100000L
block|,
literal|1000000L
block|,
literal|10000000L
block|,
literal|100000000L
block|,
literal|1000000000L
block|,
literal|10000000000L
block|,
literal|100000000000L
block|,
literal|1000000000000L
block|,
literal|10000000000000L
block|,
literal|100000000000000L
block|,
literal|1000000000000000L
block|,
literal|10000000000000000L
block|,
literal|100000000000000000L
block|,
literal|1000000000000000000L
block|}
decl_stmt|;
comment|// HALF_POWERS_OF_10[i] = largest long less than 10^(i + 0.5)
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
annotation|@
name|VisibleForTesting
DECL|field|HALF_POWERS_OF_10
specifier|static
specifier|final
name|long
index|[]
name|HALF_POWERS_OF_10
init|=
block|{
literal|3L
block|,
literal|31L
block|,
literal|316L
block|,
literal|3162L
block|,
literal|31622L
block|,
literal|316227L
block|,
literal|3162277L
block|,
literal|31622776L
block|,
literal|316227766L
block|,
literal|3162277660L
block|,
literal|31622776601L
block|,
literal|316227766016L
block|,
literal|3162277660168L
block|,
literal|31622776601683L
block|,
literal|316227766016837L
block|,
literal|3162277660168379L
block|,
literal|31622776601683793L
block|,
literal|316227766016837933L
block|,
literal|3162277660168379331L
block|}
decl_stmt|;
comment|/**    * Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to    * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}    * time.    *    * @throws IllegalArgumentException if {@code k< 0}    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|pow (long b, int k)
specifier|public
specifier|static
name|long
name|pow
parameter_list|(
name|long
name|b
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"exponent"
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|2
operator|<=
name|b
operator|&&
name|b
operator|<=
literal|2
condition|)
block|{
switch|switch
condition|(
operator|(
name|int
operator|)
name|b
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
name|k
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
return|;
case|case
literal|1
case|:
return|return
literal|1
return|;
case|case
operator|(
operator|-
literal|1
operator|)
case|:
return|return
operator|(
operator|(
name|k
operator|&
literal|1
operator|)
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
return|;
case|case
literal|2
case|:
return|return
operator|(
name|k
operator|<
name|Long
operator|.
name|SIZE
operator|)
condition|?
literal|1L
operator|<<
name|k
else|:
literal|0
return|;
case|case
operator|(
operator|-
literal|2
operator|)
case|:
if|if
condition|(
name|k
operator|<
name|Long
operator|.
name|SIZE
condition|)
block|{
return|return
operator|(
operator|(
name|k
operator|&
literal|1
operator|)
operator|==
literal|0
operator|)
condition|?
literal|1L
operator|<<
name|k
else|:
operator|-
operator|(
literal|1L
operator|<<
name|k
operator|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
for|for
control|(
name|long
name|accum
init|=
literal|1
init|;
condition|;
name|k
operator|>>=
literal|1
control|)
block|{
switch|switch
condition|(
name|k
condition|)
block|{
case|case
literal|0
case|:
return|return
name|accum
return|;
case|case
literal|1
case|:
return|return
name|accum
operator|*
name|b
return|;
default|default:
name|accum
operator|*=
operator|(
operator|(
name|k
operator|&
literal|1
operator|)
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|b
expr_stmt|;
name|b
operator|*=
name|b
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the square root of {@code x}, rounded with the specified rounding mode.    *    * @throws IllegalArgumentException if {@code x< 0}    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and    *         {@code sqrt(x)} is not an integer    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|sqrt (long x, RoundingMode mode)
specifier|public
specifier|static
name|long
name|sqrt
parameter_list|(
name|long
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"x"
argument_list|,
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|fitsInInt
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
name|IntMath
operator|.
name|sqrt
argument_list|(
operator|(
name|int
operator|)
name|x
argument_list|,
name|mode
argument_list|)
return|;
block|}
name|long
name|sqrtFloor
init|=
name|sqrtFloor
argument_list|(
name|x
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|sqrtFloor
operator|*
name|sqrtFloor
operator|==
name|x
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|FLOOR
case|:
case|case
name|DOWN
case|:
return|return
name|sqrtFloor
return|;
case|case
name|CEILING
case|:
case|case
name|UP
case|:
return|return
operator|(
name|sqrtFloor
operator|*
name|sqrtFloor
operator|==
name|x
operator|)
condition|?
name|sqrtFloor
else|:
name|sqrtFloor
operator|+
literal|1
return|;
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
name|long
name|halfSquare
init|=
name|sqrtFloor
operator|*
name|sqrtFloor
operator|+
name|sqrtFloor
decl_stmt|;
comment|/*          * We wish to test whether or not x<= (sqrtFloor + 0.5)^2 = halfSquare + 0.25. Since both          * x and halfSquare are integers, this is equivalent to testing whether or not x<=          * halfSquare. (We have to deal with overflow, though.)          */
return|return
operator|(
name|halfSquare
operator|>=
name|x
operator||
name|halfSquare
operator|<
literal|0
operator|)
condition|?
name|sqrtFloor
else|:
name|sqrtFloor
operator|+
literal|1
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|sqrtFloor (long x)
specifier|private
specifier|static
name|long
name|sqrtFloor
parameter_list|(
name|long
name|x
parameter_list|)
block|{
comment|// Hackers's Delight, Figure 11-1
name|long
name|sqrt0
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|x
argument_list|)
decl_stmt|;
comment|// Precision can be lost in the cast to double, so we use this as a starting estimate.
name|long
name|sqrt1
init|=
operator|(
name|sqrt0
operator|+
operator|(
name|x
operator|/
name|sqrt0
operator|)
operator|)
operator|>>
literal|1
decl_stmt|;
if|if
condition|(
name|sqrt1
operator|==
name|sqrt0
condition|)
block|{
return|return
name|sqrt0
return|;
block|}
do|do
block|{
name|sqrt0
operator|=
name|sqrt1
expr_stmt|;
name|sqrt1
operator|=
operator|(
name|sqrt0
operator|+
operator|(
name|x
operator|/
name|sqrt0
operator|)
operator|)
operator|>>
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|sqrt1
operator|<
name|sqrt0
condition|)
do|;
return|return
name|sqrt0
return|;
block|}
comment|/**    * Returns the result of dividing {@code p} by {@code q}, rounding using the specified    * {@code RoundingMode}.    *    * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}    *         is not an integer multiple of {@code b}    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|divide (long p, long q, RoundingMode mode)
specifier|public
specifier|static
name|long
name|divide
parameter_list|(
name|long
name|p
parameter_list|,
name|long
name|q
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|long
name|div
init|=
name|p
operator|/
name|q
decl_stmt|;
comment|// throws if q == 0
name|long
name|rem
init|=
name|p
operator|-
name|q
operator|*
name|div
decl_stmt|;
comment|// equals p % q
if|if
condition|(
name|rem
operator|==
literal|0
condition|)
block|{
return|return
name|div
return|;
block|}
comment|/*      * Normal Java division rounds towards 0, consistently with RoundingMode.DOWN. We just have to      * deal with the cases where rounding towards 0 is wrong, which typically depends on the sign of      * p / q.      *      * signum is 1 if p and q are both nonnegative or both negative, and -1 otherwise.      */
name|int
name|signum
init|=
literal|1
operator||
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|^
name|q
operator|)
operator|>>
operator|(
name|Long
operator|.
name|SIZE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|boolean
name|increment
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|rem
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|DOWN
case|:
name|increment
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|UP
case|:
name|increment
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CEILING
case|:
name|increment
operator|=
name|signum
operator|>
literal|0
expr_stmt|;
break|break;
case|case
name|FLOOR
case|:
name|increment
operator|=
name|signum
operator|<
literal|0
expr_stmt|;
break|break;
case|case
name|HALF_EVEN
case|:
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
name|long
name|absRem
init|=
name|abs
argument_list|(
name|rem
argument_list|)
decl_stmt|;
name|long
name|cmpRemToHalfDivisor
init|=
name|absRem
operator|-
operator|(
name|abs
argument_list|(
name|q
argument_list|)
operator|-
name|absRem
operator|)
decl_stmt|;
comment|// subtracting two nonnegative longs can't overflow
comment|// cmpRemToHalfDivisor has the same sign as compare(abs(rem), abs(q) / 2).
if|if
condition|(
name|cmpRemToHalfDivisor
operator|==
literal|0
condition|)
block|{
comment|// exactly on the half mark
name|increment
operator|=
operator|(
name|mode
operator|==
name|HALF_UP
operator||
operator|(
name|mode
operator|==
name|HALF_EVEN
operator|&
operator|(
name|div
operator|&
literal|1
operator|)
operator|!=
literal|0
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|increment
operator|=
name|cmpRemToHalfDivisor
operator|>
literal|0
expr_stmt|;
comment|// closer to the UP value
block|}
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|increment
condition|?
name|div
operator|+
name|signum
else|:
name|div
return|;
block|}
comment|/**    * Returns {@code x mod m}. This differs from {@code x % m} in that it always returns a    * non-negative result.    *    *<p>For example:    *    *<pre> {@code    *    * mod(7, 4) == 3    * mod(-7, 4) == 1    * mod(-1, 4) == 3    * mod(-8, 4) == 0    * mod(8, 4) == 0}</pre>    *    * @throws ArithmeticException if {@code m<= 0}    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|mod (long x, int m)
specifier|public
specifier|static
name|int
name|mod
parameter_list|(
name|long
name|x
parameter_list|,
name|int
name|m
parameter_list|)
block|{
comment|// Cast is safe because the result is guaranteed in the range [0, m)
return|return
operator|(
name|int
operator|)
name|mod
argument_list|(
name|x
argument_list|,
operator|(
name|long
operator|)
name|m
argument_list|)
return|;
block|}
comment|/**    * Returns {@code x mod m}. This differs from {@code x % m} in that it always returns a    * non-negative result.    *    *<p>For example:    *    *<pre> {@code    *    * mod(7, 4) == 3    * mod(-7, 4) == 1    * mod(-1, 4) == 3    * mod(-8, 4) == 0    * mod(8, 4) == 0}</pre>    *    * @throws ArithmeticException if {@code m<= 0}    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|mod (long x, long m)
specifier|public
specifier|static
name|long
name|mod
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"Modulus "
operator|+
name|m
operator|+
literal|" must be> 0"
argument_list|)
throw|;
block|}
name|long
name|result
init|=
name|x
operator|%
name|m
decl_stmt|;
return|return
operator|(
name|result
operator|>=
literal|0
operator|)
condition|?
name|result
else|:
name|result
operator|+
name|m
return|;
block|}
comment|/**    * Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if    * {@code a == 0&& b == 0}.    *    * @throws IllegalArgumentException if {@code a< 0} or {@code b< 0}    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|gcd (long a, long b)
specifier|public
specifier|static
name|long
name|gcd
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
comment|/*      * The reason we require both arguments to be>= 0 is because otherwise, what do you return on      * gcd(0, Long.MIN_VALUE)? BigInteger.gcd would return positive 2^63, but positive 2^63 isn't      * an int.      */
name|checkNonNegative
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|==
literal|0
operator||
name|b
operator|==
literal|0
condition|)
block|{
return|return
name|a
operator||
name|b
return|;
block|}
comment|/*      * Uses the binary GCD algorithm; see http://en.wikipedia.org/wiki/Binary_GCD_algorithm.      * This is over 40% faster than the Euclidean algorithm in benchmarks.      */
name|int
name|aTwos
init|=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|>>=
name|aTwos
expr_stmt|;
comment|// divide out all 2s
name|int
name|bTwos
init|=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|b
operator|>>=
name|bTwos
expr_stmt|;
comment|// divide out all 2s
while|while
condition|(
name|a
operator|!=
name|b
condition|)
block|{
comment|// both a, b are odd
if|if
condition|(
name|a
operator|<
name|b
condition|)
block|{
comment|// swap a, b
name|long
name|t
init|=
name|b
decl_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|a
operator|=
name|t
expr_stmt|;
block|}
name|a
operator|-=
name|b
expr_stmt|;
comment|// a is now positive and even
name|a
operator|>>=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// divide out all 2s, since 2 doesn't divide b
block|}
return|return
name|a
operator|<<
name|min
argument_list|(
name|aTwos
argument_list|,
name|bTwos
argument_list|)
return|;
block|}
comment|/**    * Returns the sum of {@code a} and {@code b}, provided it does not overflow.    *    * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|checkedAdd (long a, long b)
specifier|public
specifier|static
name|long
name|checkedAdd
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|long
name|result
init|=
name|a
operator|+
name|b
decl_stmt|;
name|checkNoOverflow
argument_list|(
operator|(
name|a
operator|^
name|b
operator|)
operator|<
literal|0
operator||
operator|(
name|a
operator|^
name|result
operator|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Returns the difference of {@code a} and {@code b}, provided it does not overflow.    *    * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|checkedSubtract (long a, long b)
specifier|public
specifier|static
name|long
name|checkedSubtract
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|long
name|result
init|=
name|a
operator|-
name|b
decl_stmt|;
name|checkNoOverflow
argument_list|(
operator|(
name|a
operator|^
name|b
operator|)
operator|>=
literal|0
operator||
operator|(
name|a
operator|^
name|result
operator|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Returns the product of {@code a} and {@code b}, provided it does not overflow.    *    * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|checkedMultiply (long a, long b)
specifier|public
specifier|static
name|long
name|checkedMultiply
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
comment|// Hacker's Delight, Section 2-12
name|int
name|leadingZeros
init|=
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|a
argument_list|)
operator|+
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
operator|~
name|a
argument_list|)
operator|+
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|b
argument_list|)
operator|+
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
operator|~
name|b
argument_list|)
decl_stmt|;
comment|/*      * If leadingZeros> Long.SIZE + 1 it's definitely fine, if it's< Long.SIZE it's definitely      * bad. We do the leadingZeros check to avoid the division below if at all possible.      *      * Otherwise, if b == Long.MIN_VALUE, then the only allowed values of a are 0 and 1. We take      * care of all a< 0 with their own check, because in particular, the case a == -1 will      * incorrectly pass the division check below.      *      * In all other cases, we check that either a is 0 or the result is consistent with division.      */
if|if
condition|(
name|leadingZeros
operator|>
name|Long
operator|.
name|SIZE
operator|+
literal|1
condition|)
block|{
return|return
name|a
operator|*
name|b
return|;
block|}
name|checkNoOverflow
argument_list|(
name|leadingZeros
operator|>=
name|Long
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|checkNoOverflow
argument_list|(
name|a
operator|>=
literal|0
operator||
name|b
operator|!=
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|a
operator|*
name|b
decl_stmt|;
name|checkNoOverflow
argument_list|(
name|a
operator|==
literal|0
operator|||
name|result
operator|/
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Returns the {@code b} to the {@code k}th power, provided it does not overflow.    *    * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed    *         {@code long} arithmetic    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|checkedPow (long b, int k)
specifier|public
specifier|static
name|long
name|checkedPow
parameter_list|(
name|long
name|b
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"exponent"
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|>=
operator|-
literal|2
operator|&
name|b
operator|<=
literal|2
condition|)
block|{
switch|switch
condition|(
operator|(
name|int
operator|)
name|b
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
name|k
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
return|;
case|case
literal|1
case|:
return|return
literal|1
return|;
case|case
operator|(
operator|-
literal|1
operator|)
case|:
return|return
operator|(
operator|(
name|k
operator|&
literal|1
operator|)
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
return|;
case|case
literal|2
case|:
name|checkNoOverflow
argument_list|(
name|k
operator|<
name|Long
operator|.
name|SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|1L
operator|<<
name|k
return|;
case|case
operator|(
operator|-
literal|2
operator|)
case|:
name|checkNoOverflow
argument_list|(
name|k
operator|<
name|Long
operator|.
name|SIZE
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|k
operator|&
literal|1
operator|)
operator|==
literal|0
operator|)
condition|?
operator|(
literal|1L
operator|<<
name|k
operator|)
else|:
operator|(
operator|-
literal|1L
operator|<<
name|k
operator|)
return|;
block|}
block|}
name|long
name|accum
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|k
condition|)
block|{
case|case
literal|0
case|:
return|return
name|accum
return|;
case|case
literal|1
case|:
return|return
name|checkedMultiply
argument_list|(
name|accum
argument_list|,
name|b
argument_list|)
return|;
default|default:
if|if
condition|(
operator|(
name|k
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|accum
operator|=
name|checkedMultiply
argument_list|(
name|accum
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|k
operator|>>=
literal|1
expr_stmt|;
if|if
condition|(
name|k
operator|>
literal|0
condition|)
block|{
name|checkNoOverflow
argument_list|(
name|b
operator|<=
name|FLOOR_SQRT_MAX_LONG
argument_list|)
expr_stmt|;
name|b
operator|*=
name|b
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|field|FLOOR_SQRT_MAX_LONG
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|FLOOR_SQRT_MAX_LONG
init|=
literal|3037000499L
decl_stmt|;
comment|/**    * Returns {@code n!}, that is, the product of the first {@code n} positive    * integers, {@code 1} if {@code n == 0}, or {@link Long#MAX_VALUE} if the    * result does not fit in a {@code long}.    *    * @throws IllegalArgumentException if {@code n< 0}    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|factorial (int n)
specifier|public
specifier|static
name|long
name|factorial
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"n"
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
operator|(
name|n
operator|<
name|FACTORIALS
operator|.
name|length
operator|)
condition|?
name|FACTORIALS
index|[
name|n
index|]
else|:
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
DECL|field|FACTORIALS
specifier|static
specifier|final
name|long
index|[]
name|FACTORIALS
init|=
block|{
literal|1L
block|,
literal|1L
block|,
literal|1L
operator|*
literal|2
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
operator|*
literal|15
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
operator|*
literal|15
operator|*
literal|16
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
operator|*
literal|15
operator|*
literal|16
operator|*
literal|17
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
operator|*
literal|15
operator|*
literal|16
operator|*
literal|17
operator|*
literal|18
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
operator|*
literal|15
operator|*
literal|16
operator|*
literal|17
operator|*
literal|18
operator|*
literal|19
block|,
literal|1L
operator|*
literal|2
operator|*
literal|3
operator|*
literal|4
operator|*
literal|5
operator|*
literal|6
operator|*
literal|7
operator|*
literal|8
operator|*
literal|9
operator|*
literal|10
operator|*
literal|11
operator|*
literal|12
operator|*
literal|13
operator|*
literal|14
operator|*
literal|15
operator|*
literal|16
operator|*
literal|17
operator|*
literal|18
operator|*
literal|19
operator|*
literal|20
block|}
decl_stmt|;
comment|/**    * Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and    * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.    *    * @throws IllegalArgumentException if {@code n< 0}, {@code k< 0}, or {@code k> n}    */
DECL|method|binomial (int n, int k)
specifier|public
specifier|static
name|long
name|binomial
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"n"
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
literal|"k"
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|k
operator|<=
name|n
argument_list|,
literal|"k (%s)> n (%s)"
argument_list|,
name|k
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|>
operator|(
name|n
operator|>>
literal|1
operator|)
condition|)
block|{
name|k
operator|=
name|n
operator|-
name|k
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|>=
name|BIGGEST_BINOMIALS
operator|.
name|length
operator|||
name|n
operator|>
name|BIGGEST_BINOMIALS
index|[
name|k
index|]
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
name|long
name|result
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|k
operator|<
name|BIGGEST_SIMPLE_BINOMIALS
operator|.
name|length
operator|&&
name|n
operator|<=
name|BIGGEST_SIMPLE_BINOMIALS
index|[
name|k
index|]
condition|)
block|{
comment|// guaranteed not to overflow
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|*=
name|n
operator|-
name|i
expr_stmt|;
name|result
operator|/=
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We want to do this in long math for speed, but want to avoid overflow.
comment|// Dividing by the GCD suffices to avoid overflow in all the remaining cases.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|k
condition|;
name|i
operator|++
operator|,
name|n
operator|--
control|)
block|{
name|int
name|d
init|=
name|IntMath
operator|.
name|gcd
argument_list|(
name|n
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|result
operator|/=
name|i
operator|/
name|d
expr_stmt|;
comment|// (i/d) is guaranteed to divide result
name|result
operator|*=
name|n
operator|/
name|d
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * binomial(BIGGEST_BINOMIALS[k], k) fits in a long, but not    * binomial(BIGGEST_BINOMIALS[k] + 1, k).    */
DECL|field|BIGGEST_BINOMIALS
specifier|static
specifier|final
name|int
index|[]
name|BIGGEST_BINOMIALS
init|=
block|{
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
literal|3810779
block|,
literal|121977
block|,
literal|16175
block|,
literal|4337
block|,
literal|1733
block|,
literal|887
block|,
literal|534
block|,
literal|361
block|,
literal|265
block|,
literal|206
block|,
literal|169
block|,
literal|143
block|,
literal|125
block|,
literal|111
block|,
literal|101
block|,
literal|94
block|,
literal|88
block|,
literal|83
block|,
literal|79
block|,
literal|76
block|,
literal|74
block|,
literal|72
block|,
literal|70
block|,
literal|69
block|,
literal|68
block|,
literal|67
block|,
literal|67
block|,
literal|66
block|,
literal|66
block|,
literal|66
block|,
literal|66
block|}
decl_stmt|;
comment|/*    * binomial(BIGGEST_SIMPLE_BINOMIALS[k], k) doesn't need to use the slower GCD-based impl,    * but binomial(BIGGEST_SIMPLE_BINOMIALS[k] + 1, k) does.    */
DECL|field|BIGGEST_SIMPLE_BINOMIALS
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|int
index|[]
name|BIGGEST_SIMPLE_BINOMIALS
init|=
block|{
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
literal|2642246
block|,
literal|86251
block|,
literal|11724
block|,
literal|3218
block|,
literal|1313
block|,
literal|684
block|,
literal|419
block|,
literal|287
block|,
literal|214
block|,
literal|169
block|,
literal|139
block|,
literal|119
block|,
literal|105
block|,
literal|95
block|,
literal|87
block|,
literal|81
block|,
literal|76
block|,
literal|73
block|,
literal|70
block|,
literal|68
block|,
literal|66
block|,
literal|64
block|,
literal|63
block|,
literal|62
block|,
literal|62
block|,
literal|61
block|,
literal|61
block|,
literal|61
block|}
decl_stmt|;
comment|// These values were generated by using checkedMultiply to see when the simple multiply/divide
comment|// algorithm would lead to an overflow.
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TODO"
argument_list|)
DECL|method|fitsInInt (long x)
specifier|static
name|boolean
name|fitsInInt
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|x
operator|==
name|x
return|;
block|}
DECL|method|LongMath ()
specifier|private
name|LongMath
parameter_list|()
block|{}
block|}
end_class

end_unit

