begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkNonNegative
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkPositive
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkRoundingUnnecessary
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A class for arithmetic on values of type {@code BigInteger}.  *  *<p>The implementations of many methods in this class are based on material from Henry S. Warren,  * Jr.'s<i>Hacker's Delight</i>, (Addison Wesley, 2002).  *  *<p>Similar functionality for {@code int} and for {@code long} can be found in  * {@link IntMath} and {@link LongMath} respectively.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|BigIntegerMath
specifier|public
specifier|final
class|class
name|BigIntegerMath
block|{
comment|/**    * Returns {@code true} if {@code x} represents a power of two.    */
DECL|method|isPowerOfTwo (BigInteger x)
specifier|public
specifier|static
name|boolean
name|isPowerOfTwo
parameter_list|(
name|BigInteger
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|x
operator|.
name|signum
argument_list|()
operator|>
literal|0
operator|&&
name|x
operator|.
name|getLowestSetBit
argument_list|()
operator|==
name|x
operator|.
name|bitLength
argument_list|()
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.    *    * @throws IllegalArgumentException if {@code x<= 0}    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}    *         is not a power of two    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|log2 (BigInteger x, RoundingMode mode)
specifier|public
specifier|static
name|int
name|log2
parameter_list|(
name|BigInteger
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkPositive
argument_list|(
literal|"x"
argument_list|,
name|checkNotNull
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|logFloor
init|=
name|x
operator|.
name|bitLength
argument_list|()
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|DOWN
case|:
case|case
name|FLOOR
case|:
return|return
name|logFloor
return|;
case|case
name|UP
case|:
case|case
name|CEILING
case|:
return|return
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
condition|?
name|logFloor
else|:
name|logFloor
operator|+
literal|1
return|;
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
if|if
condition|(
name|logFloor
operator|<
name|SQRT2_PRECOMPUTE_THRESHOLD
condition|)
block|{
name|BigInteger
name|halfPower
init|=
name|SQRT2_PRECOMPUTED_BITS
operator|.
name|shiftRight
argument_list|(
name|SQRT2_PRECOMPUTE_THRESHOLD
operator|-
name|logFloor
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|halfPower
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
name|logFloor
return|;
block|}
else|else
block|{
return|return
name|logFloor
operator|+
literal|1
return|;
block|}
block|}
comment|/*          * Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5          *          * To determine which side of logFloor.5 the logarithm is, we compare x^2 to 2^(2 *          * logFloor + 1).          */
name|BigInteger
name|x2
init|=
name|x
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|logX2Floor
init|=
name|x2
operator|.
name|bitLength
argument_list|()
operator|-
literal|1
decl_stmt|;
return|return
operator|(
name|logX2Floor
operator|<
literal|2
operator|*
name|logFloor
operator|+
literal|1
operator|)
condition|?
name|logFloor
else|:
name|logFloor
operator|+
literal|1
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/*    * The maximum number of bits in a square root for which we'll precompute an explicit half power    * of two. This can be any value, but higher values incur more class load time and linearly    * increasing memory consumption.    */
DECL|field|SQRT2_PRECOMPUTE_THRESHOLD
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|int
name|SQRT2_PRECOMPUTE_THRESHOLD
init|=
literal|256
decl_stmt|;
DECL|field|SQRT2_PRECOMPUTED_BITS
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|BigInteger
name|SQRT2_PRECOMPUTED_BITS
init|=
operator|new
name|BigInteger
argument_list|(
literal|"16a09e667f3bcc908b2fb1366ea957d3e3adec17512775099da2f590b0667322a"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
comment|/**    * Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.    *    * @throws IllegalArgumentException if {@code x<= 0}    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}    *         is not a power of ten    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|log10 (BigInteger x, RoundingMode mode)
specifier|public
specifier|static
name|int
name|log10
parameter_list|(
name|BigInteger
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkPositive
argument_list|(
literal|"x"
argument_list|,
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|fitsInLong
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
name|LongMath
operator|.
name|log10
argument_list|(
name|x
operator|.
name|longValue
argument_list|()
argument_list|,
name|mode
argument_list|)
return|;
block|}
comment|// capacity of 10 suffices for all x<= 10^(2^10).
name|List
argument_list|<
name|BigInteger
argument_list|>
name|powersOf10
init|=
operator|new
name|ArrayList
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|BigInteger
name|powerOf10
init|=
name|BigInteger
operator|.
name|TEN
decl_stmt|;
while|while
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|powerOf10
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|powersOf10
operator|.
name|add
argument_list|(
name|powerOf10
argument_list|)
expr_stmt|;
name|powerOf10
operator|=
name|powerOf10
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|BigInteger
name|floorPow
init|=
name|BigInteger
operator|.
name|ONE
decl_stmt|;
name|int
name|floorLog
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|powersOf10
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|BigInteger
name|powOf10
init|=
name|powersOf10
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|floorLog
operator|*=
literal|2
expr_stmt|;
name|BigInteger
name|tenPow
init|=
name|powOf10
operator|.
name|multiply
argument_list|(
name|floorPow
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|compareTo
argument_list|(
name|tenPow
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|floorPow
operator|=
name|tenPow
expr_stmt|;
name|floorLog
operator|++
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|floorPow
operator|.
name|equals
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|FLOOR
case|:
case|case
name|DOWN
case|:
return|return
name|floorLog
return|;
case|case
name|CEILING
case|:
case|case
name|UP
case|:
return|return
name|floorPow
operator|.
name|equals
argument_list|(
name|x
argument_list|)
condition|?
name|floorLog
else|:
name|floorLog
operator|+
literal|1
return|;
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
comment|// Since sqrt(10) is irrational, log10(x) - floorLog can never be exactly 0.5
name|BigInteger
name|x2
init|=
name|x
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BigInteger
name|halfPowerSquared
init|=
name|floorPow
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|TEN
argument_list|)
decl_stmt|;
return|return
operator|(
name|x2
operator|.
name|compareTo
argument_list|(
name|halfPowerSquared
argument_list|)
operator|<=
literal|0
operator|)
condition|?
name|floorLog
else|:
name|floorLog
operator|+
literal|1
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Returns the square root of {@code x}, rounded with the specified rounding mode.    *    * @throws IllegalArgumentException if {@code x< 0}    * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and    *         {@code sqrt(x)} is not an integer    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|sqrt (BigInteger x, RoundingMode mode)
specifier|public
specifier|static
name|BigInteger
name|sqrt
parameter_list|(
name|BigInteger
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"x"
argument_list|,
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|fitsInLong
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|LongMath
operator|.
name|sqrt
argument_list|(
name|x
operator|.
name|longValue
argument_list|()
argument_list|,
name|mode
argument_list|)
argument_list|)
return|;
block|}
name|BigInteger
name|sqrtFloor
init|=
name|sqrtFloor
argument_list|(
name|x
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|sqrtFloor
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// fall through
case|case
name|FLOOR
case|:
case|case
name|DOWN
case|:
return|return
name|sqrtFloor
return|;
case|case
name|CEILING
case|:
case|case
name|UP
case|:
return|return
name|sqrtFloor
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|x
argument_list|)
condition|?
name|sqrtFloor
else|:
name|sqrtFloor
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
return|;
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
name|BigInteger
name|halfSquare
init|=
name|sqrtFloor
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
operator|.
name|add
argument_list|(
name|sqrtFloor
argument_list|)
decl_stmt|;
comment|/*          * We wish to test whether or not x<= (sqrtFloor + 0.5)^2 = halfSquare + 0.25. Since both          * x and halfSquare are integers, this is equivalent to testing whether or not x<=          * halfSquare.          */
return|return
operator|(
name|halfSquare
operator|.
name|compareTo
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
operator|)
condition|?
name|sqrtFloor
else|:
name|sqrtFloor
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|sqrtFloor (BigInteger x)
specifier|private
specifier|static
name|BigInteger
name|sqrtFloor
parameter_list|(
name|BigInteger
name|x
parameter_list|)
block|{
comment|// Hackers's Delight, Figure 11-1
name|int
name|s
init|=
operator|(
name|log2
argument_list|(
name|x
argument_list|,
name|CEILING
argument_list|)
operator|+
literal|1
operator|)
operator|>>
literal|1
decl_stmt|;
name|BigInteger
name|sqrt0
init|=
name|BigInteger
operator|.
name|ZERO
operator|.
name|setBit
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|BigInteger
name|sqrt1
init|=
name|sqrt0
operator|.
name|add
argument_list|(
name|x
operator|.
name|shiftRight
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|shiftRight
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|sqrt1
operator|.
name|compareTo
argument_list|(
name|sqrt0
argument_list|)
operator|<
literal|0
condition|)
block|{
name|sqrt0
operator|=
name|sqrt1
expr_stmt|;
name|sqrt1
operator|=
name|sqrt0
operator|.
name|add
argument_list|(
name|x
operator|.
name|divide
argument_list|(
name|sqrt0
argument_list|)
argument_list|)
operator|.
name|shiftRight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|sqrt0
return|;
block|}
comment|/**    * Returns the result of dividing {@code p} by {@code q}, rounding using the specified    * {@code RoundingMode}.    *    * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}    *         is not an integer multiple of {@code b}    */
DECL|method|divide (BigInteger p, BigInteger q, RoundingMode mode)
specifier|public
specifier|static
name|BigInteger
name|divide
parameter_list|(
name|BigInteger
name|p
parameter_list|,
name|BigInteger
name|q
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|BigDecimal
name|pDec
init|=
operator|new
name|BigDecimal
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|BigDecimal
name|qDec
init|=
operator|new
name|BigDecimal
argument_list|(
name|q
argument_list|)
decl_stmt|;
return|return
name|pDec
operator|.
name|divide
argument_list|(
name|qDec
argument_list|,
literal|0
argument_list|,
name|mode
argument_list|)
operator|.
name|toBigIntegerExact
argument_list|()
return|;
block|}
comment|/**    * Returns {@code n!}. Warning: the result takes<i>O(n log n)</i> memory.    *    *<p><b>Warning</b>: the result takes<i>O(n log n)</i> space, so use cautiously.    *    * @throws IllegalArgumentException if {@code n< 0}    */
DECL|method|factorial (int n)
specifier|public
specifier|static
name|BigInteger
name|factorial
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"n"
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|<
name|LongMath
operator|.
name|FACTORIALS
operator|.
name|length
condition|)
block|{
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|LongMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|k
init|=
name|LongMath
operator|.
name|FACTORIALS
operator|.
name|length
operator|-
literal|1
decl_stmt|;
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|LongMath
operator|.
name|factorial
argument_list|(
name|k
argument_list|)
argument_list|)
operator|.
name|multiply
argument_list|(
name|factorial
argument_list|(
name|k
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the product of {@code n1} exclusive through {@code n2} inclusive.    */
DECL|method|factorial (int n1, int n2)
specifier|private
specifier|static
name|BigInteger
name|factorial
parameter_list|(
name|int
name|n1
parameter_list|,
name|int
name|n2
parameter_list|)
block|{
assert|assert
name|n1
operator|<=
name|n2
assert|;
if|if
condition|(
name|IntMath
operator|.
name|log2
argument_list|(
name|n2
argument_list|,
name|CEILING
argument_list|)
operator|*
operator|(
name|n2
operator|-
name|n1
operator|)
operator|<
name|Long
operator|.
name|SIZE
operator|-
literal|1
condition|)
block|{
comment|// the result will definitely fit into a long
name|long
name|result
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|n1
operator|+
literal|1
init|;
name|i
operator|<=
name|n2
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|*=
name|i
expr_stmt|;
block|}
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/*      * We want each multiplication to have both sides with approximately the same number of digits.      * Currently, we just divide the range in half.      */
name|int
name|mid
init|=
operator|(
name|n1
operator|+
name|n2
operator|)
operator|>>>
literal|1
decl_stmt|;
return|return
name|factorial
argument_list|(
name|n1
argument_list|,
name|mid
argument_list|)
operator|.
name|multiply
argument_list|(
name|factorial
argument_list|(
name|mid
argument_list|,
name|n2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and    * {@code k}.    *    *<p><b>Warning</b>: the result can take as much as<i>O(k log n)</i> space.    *    * @throws IllegalArgumentException if {@code n< 0}, {@code k< 0}, or {@code k> n}    */
DECL|method|binomial (int n, int k)
specifier|public
specifier|static
name|BigInteger
name|binomial
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|checkNonNegative
argument_list|(
literal|"n"
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkNonNegative
argument_list|(
literal|"k"
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|k
operator|<=
name|n
argument_list|,
literal|"k (%s)> n (%s)"
argument_list|,
name|k
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|>
operator|(
name|n
operator|>>
literal|1
operator|)
condition|)
block|{
name|k
operator|=
name|n
operator|-
name|k
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|<
name|LongMath
operator|.
name|BIGGEST_BINOMIALS
operator|.
name|length
operator|&&
name|n
operator|<=
name|LongMath
operator|.
name|BIGGEST_BINOMIALS
index|[
name|k
index|]
condition|)
block|{
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
argument_list|)
return|;
block|}
name|BigInteger
name|result
init|=
name|BigInteger
operator|.
name|ONE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|result
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|n
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|divide
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Returns true if BigInteger.valueOf(x.longValue()).equals(x).
DECL|method|fitsInLong (BigInteger x)
specifier|static
name|boolean
name|fitsInLong
parameter_list|(
name|BigInteger
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|bitLength
argument_list|()
operator|<=
name|Long
operator|.
name|SIZE
operator|-
literal|1
return|;
block|}
DECL|method|BigIntegerMath ()
specifier|private
name|BigIntegerMath
parameter_list|()
block|{}
block|}
end_class

end_unit

