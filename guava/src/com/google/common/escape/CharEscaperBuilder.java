begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.escape
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Simple helper class to build a "sparse" array of objects based on the indexes that were added to  * it. The array will be from 0 to the maximum index given. All non-set indexes will contain null  * (so it's not really a sparse array, just a pseudo sparse array). The builder can also return a  * CharEscaper based on the generated array.  *  * @author Sven Mawson  * @since 15.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|CharEscaperBuilder
specifier|public
specifier|final
class|class
name|CharEscaperBuilder
block|{
comment|/**    * Simple decorator that turns an array of replacement char[]s into a CharEscaper, this results in    * a very fast escape method.    */
DECL|class|CharArrayDecorator
specifier|private
specifier|static
class|class
name|CharArrayDecorator
extends|extends
name|CharEscaper
block|{
DECL|field|replacements
specifier|private
specifier|final
name|char
index|[]
index|[]
name|replacements
decl_stmt|;
DECL|field|replaceLength
specifier|private
specifier|final
name|int
name|replaceLength
decl_stmt|;
DECL|method|CharArrayDecorator (char[][] replacements)
name|CharArrayDecorator
parameter_list|(
name|char
index|[]
index|[]
name|replacements
parameter_list|)
block|{
name|this
operator|.
name|replacements
operator|=
name|replacements
expr_stmt|;
name|this
operator|.
name|replaceLength
operator|=
name|replacements
operator|.
name|length
expr_stmt|;
block|}
comment|/*      * Overriding escape method to be slightly faster for this decorator. We test the replacements      * array directly, saving a method call.      */
annotation|@
name|Override
DECL|method|escape (String s)
specifier|public
name|String
name|escape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|slen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|slen
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
name|replacements
operator|.
name|length
operator|&&
name|replacements
index|[
name|c
index|]
operator|!=
literal|null
condition|)
block|{
return|return
name|escapeSlow
argument_list|(
name|s
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|escape (char c)
specifier|protected
name|char
index|[]
name|escape
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|c
operator|<
name|replaceLength
condition|?
name|replacements
index|[
name|c
index|]
else|:
literal|null
return|;
block|}
block|}
comment|// Replacement mappings.
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
comment|// The highest index we've seen so far.
DECL|field|max
specifier|private
name|int
name|max
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Construct a new sparse array builder. */
DECL|method|CharEscaperBuilder ()
specifier|public
name|CharEscaperBuilder
parameter_list|()
block|{
name|this
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/** Add a new mapping from an index to an object to the escaping. */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEscape (char c, String r)
specifier|public
name|CharEscaperBuilder
name|addEscape
parameter_list|(
name|char
name|c
parameter_list|,
name|String
name|r
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|checkNotNull
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|c
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** Add multiple mappings at once for a particular index. */
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEscapes (char[] cs, String r)
specifier|public
name|CharEscaperBuilder
name|addEscapes
parameter_list|(
name|char
index|[]
name|cs
parameter_list|,
name|String
name|r
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
name|cs
control|)
block|{
name|addEscape
argument_list|(
name|c
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Convert this builder into an array of char[]s where the maximum index is the value of the    * highest character that has been seen. The array will be sparse in the sense that any unseen    * index will default to null.    *    * @return a "sparse" array that holds the replacement mappings.    */
DECL|method|toArray ()
specifier|public
name|char
index|[]
index|[]
name|toArray
parameter_list|()
block|{
name|char
index|[]
index|[]
name|result
init|=
operator|new
name|char
index|[
name|max
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
index|[
name|entry
operator|.
name|getKey
argument_list|()
index|]
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert this builder into a char escaper which is just a decorator around the underlying array    * of replacement char[]s.    *    * @return an escaper that escapes based on the underlying array.    */
DECL|method|toEscaper ()
specifier|public
name|Escaper
name|toEscaper
parameter_list|()
block|{
return|return
operator|new
name|CharArrayDecorator
argument_list|(
name|toArray
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

