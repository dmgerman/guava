begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Computes or retrieves values, based on a key, for use in populating a {@code Cache}.  *  *<p>Most implementations will only need to implement {@link #load}. Other methods may be  * overridden as desired.  *  * @author Charles Fry  * @since 10.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|CacheLoader
specifier|public
specifier|abstract
class|class
name|CacheLoader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|/**    * Constructor for use by subclasses.    */
DECL|method|CacheLoader ()
specifier|protected
name|CacheLoader
parameter_list|()
block|{}
comment|/**    * Computes or retrieves the value corresponding to {@code key}.    *    * @param key the non-null key whose value should be loaded    * @return the value associated with {@code key};<b>must not be null</b>    */
DECL|method|load (K key)
specifier|public
specifier|abstract
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This    * method is called when an existing cache entry is refreshed, such as through a call to    * {@link Cache#refresh}.    *    *<p>This implementation simply delegates to {@link #load}. This method should be overriden when    * the new value can be computed more efficiently from the old value.    *    * @param key the non-null key whose value should be loaded    * @param oldValue the non-null old value corresponding to {@code key}    * @return the new value associated with {@code key};<b>must not be null</b>    * @since 11.0    */
DECL|method|reload (K key, V oldValue)
specifier|public
name|V
name|reload
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|oldValue
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|load
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Computes or retrieves the values corresponding to {@code keys}. This method is called by    * {@link Cache#getAll}.    *    *<p>If the returned map doesn't contain all requested {@code keys} then the entries it does    * contain will be cached, but {@code getAll} will throw an exception. If the returned map    * contains extra keys not present in {@code keys} then all returned entries will be cached,    * but only the entries for {@code keys} will be returned from {@code getAll}.    *    *<p>This method should be overriden when bulk retrieval is significantly more efficient than    * many individual lookups. Note that {@link Cache#getAll} will defer to individual calls to    * {@link Cache#get} if this method is not overriden.    *    * @param keys the unique, non-null keys whose values should be loaded    * @return a map from each key in {@code keys} to the value associated with that key;    *<b>may not contain null values</b>    * @since 11.0    */
DECL|method|loadAll (Iterable<? extends K> keys)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This will be caught by getAll(), causing it to fall back to multiple calls to Cache.get
throw|throw
operator|new
name|UnsupportedLoadingOperationException
argument_list|()
throw|;
block|}
comment|/**    * Returns a {@code CacheLoader} which creates values by applying a {@code Function} to the key.    */
DECL|method|from (Function<K, V> function)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|from
parameter_list|(
name|Function
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|function
parameter_list|)
block|{
return|return
operator|new
name|FunctionToCacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|function
argument_list|)
return|;
block|}
DECL|class|FunctionToCacheLoader
specifier|private
specifier|static
specifier|final
class|class
name|FunctionToCacheLoader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|computingFunction
specifier|private
specifier|final
name|Function
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|computingFunction
decl_stmt|;
DECL|method|FunctionToCacheLoader (Function<K, V> computingFunction)
specifier|public
name|FunctionToCacheLoader
parameter_list|(
name|Function
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|computingFunction
parameter_list|)
block|{
name|this
operator|.
name|computingFunction
operator|=
name|checkNotNull
argument_list|(
name|computingFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (K key)
specifier|public
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|computingFunction
operator|.
name|apply
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns a {@code CacheLoader} which obtains values from a {@code Supplier} (independent of the    * key).    */
DECL|method|from (Supplier<V> supplier)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
name|from
parameter_list|(
name|Supplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
operator|new
name|SupplierToCacheLoader
argument_list|<
name|V
argument_list|>
argument_list|(
name|supplier
argument_list|)
return|;
block|}
DECL|class|SupplierToCacheLoader
specifier|private
specifier|static
specifier|final
class|class
name|SupplierToCacheLoader
parameter_list|<
name|V
parameter_list|>
extends|extends
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|computingSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|V
argument_list|>
name|computingSupplier
decl_stmt|;
DECL|method|SupplierToCacheLoader (Supplier<V> computingSupplier)
specifier|public
name|SupplierToCacheLoader
parameter_list|(
name|Supplier
argument_list|<
name|V
argument_list|>
name|computingSupplier
parameter_list|)
block|{
name|this
operator|.
name|computingSupplier
operator|=
name|checkNotNull
argument_list|(
name|computingSupplier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (Object key)
specifier|public
name|V
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|computingSupplier
operator|.
name|get
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|UnsupportedLoadingOperationException
specifier|static
specifier|final
class|class
name|UnsupportedLoadingOperationException
extends|extends
name|UnsupportedOperationException
block|{}
comment|/**    * Thrown to indicate that an invalid response was returned from a call to {@link CacheLoader}.    */
DECL|class|InvalidCacheLoadException
specifier|public
specifier|static
specifier|final
class|class
name|InvalidCacheLoadException
extends|extends
name|RuntimeException
block|{
DECL|method|InvalidCacheLoadException (String message)
specifier|public
name|InvalidCacheLoadException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

