begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Written by Doug Lea with assistance from members of JCP JSR-166  * Expert Group and released to the public domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  */
end_comment

begin_comment
comment|/*  * Source:  * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/LongAdder.java?revision=1.8  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_comment
comment|/**  * One or more variables that together maintain an initially zero  * {@code long} sum.  When updates (method {@link #add}) are contended  * across threads, the set of variables may grow dynamically to reduce  * contention. Method {@link #sum} (or, equivalently, {@link  * #longValue}) returns the current total combined across the  * variables maintaining the sum.  *  *<p> This class is usually preferable to {@link AtomicLong} when  * multiple threads update a common sum that is used for purposes such  * as collecting statistics, not for fine-grained synchronization  * control.  Under low update contention, the two classes have similar  * characteristics. But under high contention, expected throughput of  * this class is significantly higher, at the expense of higher space  * consumption.  *  *<p>This class extends {@link Number}, but does<em>not</em> define  * methods such as {@code hashCode} and {@code compareTo} because  * instances are expected to be mutated, and so are not useful as  * collection keys.  *  *<p><em>jsr166e note: This class is targeted to be placed in  * java.util.concurrent.atomic<em>  *  * @since 1.8  * @author Doug Lea  */
end_comment

begin_class
DECL|class|LongAdder
specifier|final
class|class
name|LongAdder
extends|extends
name|Striped64
implements|implements
name|Serializable
implements|,
name|LongAddable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7249069246863182397L
decl_stmt|;
comment|/**      * Version of plus for use in retryUpdate      */
DECL|method|fn (long v, long x)
specifier|final
name|long
name|fn
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
return|return
name|v
operator|+
name|x
return|;
block|}
comment|/**      * Creates a new adder with initial sum of zero.      */
DECL|method|LongAdder ()
specifier|public
name|LongAdder
parameter_list|()
block|{     }
comment|/**      * Adds the given value.      *      * @param x the value to add      */
DECL|method|add (long x)
specifier|public
name|void
name|add
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|Cell
index|[]
name|as
decl_stmt|;
name|long
name|b
decl_stmt|,
name|v
decl_stmt|;
name|HashCode
name|hc
decl_stmt|;
name|Cell
name|a
decl_stmt|;
name|int
name|n
decl_stmt|;
if|if
condition|(
operator|(
name|as
operator|=
name|cells
operator|)
operator|!=
literal|null
operator|||
operator|!
name|casBase
argument_list|(
name|b
operator|=
name|base
argument_list|,
name|b
operator|+
name|x
argument_list|)
condition|)
block|{
name|boolean
name|uncontended
init|=
literal|true
decl_stmt|;
name|int
name|h
init|=
operator|(
name|hc
operator|=
name|threadHashCode
operator|.
name|get
argument_list|()
operator|)
operator|.
name|code
decl_stmt|;
if|if
condition|(
name|as
operator|==
literal|null
operator|||
operator|(
name|n
operator|=
name|as
operator|.
name|length
operator|)
operator|<
literal|1
operator|||
operator|(
name|a
operator|=
name|as
index|[
operator|(
name|n
operator|-
literal|1
operator|)
operator|&
name|h
index|]
operator|)
operator|==
literal|null
operator|||
operator|!
operator|(
name|uncontended
operator|=
name|a
operator|.
name|cas
argument_list|(
name|v
operator|=
name|a
operator|.
name|value
argument_list|,
name|v
operator|+
name|x
argument_list|)
operator|)
condition|)
name|retryUpdate
argument_list|(
name|x
argument_list|,
name|hc
argument_list|,
name|uncontended
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Equivalent to {@code add(1)}.      */
DECL|method|increment ()
specifier|public
name|void
name|increment
parameter_list|()
block|{
name|add
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/**      * Equivalent to {@code add(-1)}.      */
DECL|method|decrement ()
specifier|public
name|void
name|decrement
parameter_list|()
block|{
name|add
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the current sum.  The returned value is<em>NOT</em> an      * atomic snapshot: Invocation in the absence of concurrent      * updates returns an accurate result, but concurrent updates that      * occur while the sum is being calculated might not be      * incorporated.      *      * @return the sum      */
DECL|method|sum ()
specifier|public
name|long
name|sum
parameter_list|()
block|{
name|long
name|sum
init|=
name|base
decl_stmt|;
name|Cell
index|[]
name|as
init|=
name|cells
decl_stmt|;
if|if
condition|(
name|as
operator|!=
literal|null
condition|)
block|{
name|int
name|n
init|=
name|as
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Cell
name|a
init|=
name|as
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
name|sum
operator|+=
name|a
operator|.
name|value
expr_stmt|;
block|}
block|}
return|return
name|sum
return|;
block|}
comment|/**      * Resets variables maintaining the sum to zero.  This method may      * be a useful alternative to creating a new adder, but is only      * effective if there are no concurrent updates.  Because this      * method is intrinsically racy, it should only be used when it is      * known that no threads are concurrently updating.      */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|internalReset
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**      * Equivalent in effect to {@link #sum} followed by {@link      * #reset}. This method may apply for example during quiescent      * points between multithreaded computations.  If there are      * updates concurrent with this method, the returned value is      *<em>not</em> guaranteed to be the final value occurring before      * the reset.      *      * @return the sum      */
DECL|method|sumThenReset ()
specifier|public
name|long
name|sumThenReset
parameter_list|()
block|{
name|long
name|sum
init|=
name|base
decl_stmt|;
name|Cell
index|[]
name|as
init|=
name|cells
decl_stmt|;
name|base
operator|=
literal|0L
expr_stmt|;
if|if
condition|(
name|as
operator|!=
literal|null
condition|)
block|{
name|int
name|n
init|=
name|as
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Cell
name|a
init|=
name|as
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|sum
operator|+=
name|a
operator|.
name|value
expr_stmt|;
name|a
operator|.
name|value
operator|=
literal|0L
expr_stmt|;
block|}
block|}
block|}
return|return
name|sum
return|;
block|}
comment|/**      * Returns the String representation of the {@link #sum}.      * @return the String representation of the {@link #sum}      */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|sum
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Equivalent to {@link #sum}.      *      * @return the sum      */
DECL|method|longValue ()
specifier|public
name|long
name|longValue
parameter_list|()
block|{
return|return
name|sum
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link #sum} as an {@code int} after a narrowing      * primitive conversion.      */
DECL|method|intValue ()
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|sum
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link #sum} as a {@code float}      * after a widening primitive conversion.      */
DECL|method|floatValue ()
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
return|return
operator|(
name|float
operator|)
name|sum
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link #sum} as a {@code double} after a widening      * primitive conversion.      */
DECL|method|doubleValue ()
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
operator|(
name|double
operator|)
name|sum
argument_list|()
return|;
block|}
DECL|method|writeObject (ObjectOutputStream s)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|s
operator|.
name|writeLong
argument_list|(
name|sum
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readObject (ObjectInputStream s)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|busy
operator|=
literal|0
expr_stmt|;
name|cells
operator|=
literal|null
expr_stmt|;
name|base
operator|=
name|s
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

