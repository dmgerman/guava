begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleImmutableEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * A notification of the removal of a single entry. The key and/or value may be null if they were  * already garbage collected.  *  *<p>Like other {@code Entry} instances associated with {@code CacheBuilder}, this class holds  * strong references to the key and value, regardless of the type of references the cache may be  * using.  *  * @author Charles Fry  * @since 10.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|RemovalNotification
specifier|public
specifier|final
class|class
name|RemovalNotification
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SimpleImmutableEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|cause
specifier|private
specifier|final
name|RemovalCause
name|cause
decl_stmt|;
comment|/**    * Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with    * the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code    * null} if they were already garbage collected.    *    * @since 19.0    */
DECL|method|create ( @ullableDecl K key, @NullableDecl V value, RemovalCause cause)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|RemovalNotification
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|,
name|RemovalCause
name|cause
parameter_list|)
block|{
return|return
operator|new
name|RemovalNotification
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|cause
argument_list|)
return|;
block|}
DECL|method|RemovalNotification (@ullableDecl K key, @NullableDecl V value, RemovalCause cause)
specifier|private
name|RemovalNotification
parameter_list|(
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|,
name|RemovalCause
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|checkNotNull
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the cause for which the entry was removed. */
DECL|method|getCause ()
specifier|public
name|RemovalCause
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
comment|/**    * Returns {@code true} if there was an automatic removal due to eviction (the cause is neither    * {@link RemovalCause#EXPLICIT} nor {@link RemovalCause#REPLACED}).    */
DECL|method|wasEvicted ()
specifier|public
name|boolean
name|wasEvicted
parameter_list|()
block|{
return|return
name|cause
operator|.
name|wasEvicted
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

