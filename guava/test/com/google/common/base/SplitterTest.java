begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|util
operator|.
name|MoreAsserts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|util
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * @author Julien Silland  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|SplitterTest
specifier|public
class|class
name|SplitterTest
extends|extends
name|TestCase
block|{
DECL|method|testSplitNullString ()
specifier|public
name|void
name|testSplitNullString
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCharacterSimpleSplit ()
specifier|public
name|void
name|testCharacterSimpleSplit
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSimpleSplitWithNoDelimiter ()
specifier|public
name|void
name|testCharacterSimpleSplitWithNoDelimiter
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithDoubleDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithDoubleDelimiter
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a,,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithDoubleDelimiterAndSpace ()
specifier|public
name|void
name|testCharacterSplitWithDoubleDelimiterAndSpace
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a,, b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|" b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithTrailingDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithTrailingDelimiter
parameter_list|()
block|{
name|String
name|trailing
init|=
literal|"a,b,c,"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|trailing
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithLeadingDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithLeadingDelimiter
parameter_list|()
block|{
name|String
name|leading
init|=
literal|",a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|leading
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|""
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithMulitpleLetters ()
specifier|public
name|void
name|testCharacterSplitWithMulitpleLetters
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|testCharacteringMotto
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'-'
argument_list|)
operator|.
name|split
argument_list|(
literal|"Testing-rocks-Debugging-sucks"
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|testCharacteringMotto
argument_list|,
literal|"Testing"
argument_list|,
literal|"rocks"
argument_list|,
literal|"Debugging"
argument_list|,
literal|"sucks"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithMatcherDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithMatcherDelimiter
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|testCharacteringMotto
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|CharMatcher
operator|.
name|WHITESPACE
argument_list|)
operator|.
name|split
argument_list|(
literal|"Testing\nrocks\tDebugging sucks"
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|testCharacteringMotto
argument_list|,
literal|"Testing"
argument_list|,
literal|"rocks"
argument_list|,
literal|"Debugging"
argument_list|,
literal|"sucks"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithDoubleDelimiterOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitWithDoubleDelimiterOmitEmptyStrings
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a..b.c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitEmptyToken ()
specifier|public
name|void
name|testCharacterSplitEmptyToken
parameter_list|()
block|{
name|String
name|emptyToken
init|=
literal|"a. .c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|emptyToken
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitEmptyTokenOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitEmptyTokenOmitEmptyStrings
parameter_list|()
block|{
name|String
name|emptyToken
init|=
literal|"a. .c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|emptyToken
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnEmptyString ()
specifier|public
name|void
name|testCharacterSplitOnEmptyString
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|nothing
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|split
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|nothing
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnEmptyStringOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitOnEmptyStringOmitEmptyStrings
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
literal|""
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnOnlyDelimiter ()
specifier|public
name|void
name|testCharacterSplitOnOnlyDelimiter
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|blankblank
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|split
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|blankblank
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnOnlyDelimitersOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitOnOnlyDelimitersOmitEmptyStrings
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
literal|"..."
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|empty
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithTrim ()
specifier|public
name|void
name|testCharacterSplitWithTrim
parameter_list|()
block|{
name|String
name|jacksons
init|=
literal|"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, "
operator|+
literal|"ofar(Jemaine), aff(Tito)"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|family
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|(
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"afro"
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|WHITESPACE
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|jacksons
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|family
argument_list|,
literal|"(Marlon)"
argument_list|,
literal|"(Michael)"
argument_list|,
literal|"(Jackie)"
argument_list|,
literal|"(Jemaine)"
argument_list|,
literal|"(Tito)"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSimpleSplit ()
specifier|public
name|void
name|testStringSimpleSplit
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSimpleSplitWithNoDelimiter ()
specifier|public
name|void
name|testStringSimpleSplitWithNoDelimiter
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithDoubleDelimiter ()
specifier|public
name|void
name|testStringSplitWithDoubleDelimiter
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a,,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithDoubleDelimiterAndSpace ()
specifier|public
name|void
name|testStringSplitWithDoubleDelimiterAndSpace
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a,, b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|" b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithTrailingDelimiter ()
specifier|public
name|void
name|testStringSplitWithTrailingDelimiter
parameter_list|()
block|{
name|String
name|trailing
init|=
literal|"a,b,c,"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|trailing
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithLeadingDelimiter ()
specifier|public
name|void
name|testStringSplitWithLeadingDelimiter
parameter_list|()
block|{
name|String
name|leading
init|=
literal|",a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|leading
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|""
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithMultipleLetters ()
specifier|public
name|void
name|testStringSplitWithMultipleLetters
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|testStringingMotto
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"-"
argument_list|)
operator|.
name|split
argument_list|(
literal|"Testing-rocks-Debugging-sucks"
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|testStringingMotto
argument_list|,
literal|"Testing"
argument_list|,
literal|"rocks"
argument_list|,
literal|"Debugging"
argument_list|,
literal|"sucks"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithDoubleDelimiterOmitEmptyStrings ()
specifier|public
name|void
name|testStringSplitWithDoubleDelimiterOmitEmptyStrings
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a..b.c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitEmptyToken ()
specifier|public
name|void
name|testStringSplitEmptyToken
parameter_list|()
block|{
name|String
name|emptyToken
init|=
literal|"a. .c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|emptyToken
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitEmptyTokenOmitEmptyStrings ()
specifier|public
name|void
name|testStringSplitEmptyTokenOmitEmptyStrings
parameter_list|()
block|{
name|String
name|emptyToken
init|=
literal|"a. .c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|emptyToken
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithLongDelimiter ()
specifier|public
name|void
name|testStringSplitWithLongDelimiter
parameter_list|()
block|{
name|String
name|longDelimiter
init|=
literal|"a, b, c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|split
argument_list|(
name|longDelimiter
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithLongLeadingDelimiter ()
specifier|public
name|void
name|testStringSplitWithLongLeadingDelimiter
parameter_list|()
block|{
name|String
name|longDelimiter
init|=
literal|", a, b, c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|split
argument_list|(
name|longDelimiter
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|""
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithLongTrailingDelimiter ()
specifier|public
name|void
name|testStringSplitWithLongTrailingDelimiter
parameter_list|()
block|{
name|String
name|longDelimiter
init|=
literal|"a, b, c, "
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|split
argument_list|(
name|longDelimiter
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithDelimiterSubstringInValue ()
specifier|public
name|void
name|testStringSplitWithDelimiterSubstringInValue
parameter_list|()
block|{
name|String
name|fourCommasAndFourSpaces
init|=
literal|",,,,    "
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|threeCommasThenTreeSpaces
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|split
argument_list|(
name|fourCommasAndFourSpaces
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|threeCommasThenTreeSpaces
argument_list|,
literal|",,,"
argument_list|,
literal|"   "
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithEmptyString ()
specifier|public
name|void
name|testStringSplitWithEmptyString
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|on
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testStringSplitOnEmptyString ()
specifier|public
name|void
name|testStringSplitOnEmptyString
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|notMuch
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|split
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|notMuch
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitOnEmptyStringOmitEmptyString ()
specifier|public
name|void
name|testStringSplitOnEmptyStringOmitEmptyString
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
literal|""
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitOnOnlyDelimiter ()
specifier|public
name|void
name|testStringSplitOnOnlyDelimiter
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|blankblank
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|split
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|blankblank
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitOnOnlyDelimitersOmitEmptyStrings ()
specifier|public
name|void
name|testStringSplitOnOnlyDelimitersOmitEmptyStrings
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
literal|"..."
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|empty
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringSplitWithTrim ()
specifier|public
name|void
name|testStringSplitWithTrim
parameter_list|()
block|{
name|String
name|jacksons
init|=
literal|"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, "
operator|+
literal|"ofar(Jemaine), aff(Tito)"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|family
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|(
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"afro"
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|WHITESPACE
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|jacksons
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|family
argument_list|,
literal|"(Marlon)"
argument_list|,
literal|"(Michael)"
argument_list|,
literal|"(Jackie)"
argument_list|,
literal|"(Jemaine)"
argument_list|,
literal|"(Tito)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSimpleSplit ()
specifier|public
name|void
name|testPatternSimpleSplit
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSimpleSplitWithNoDelimiter ()
specifier|public
name|void
name|testPatternSimpleSplitWithNoDelimiter
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSplitWithDoubleDelimiter ()
specifier|public
name|void
name|testPatternSplitWithDoubleDelimiter
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a,,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSplitWithDoubleDelimiterAndSpace ()
specifier|public
name|void
name|testPatternSplitWithDoubleDelimiterAndSpace
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a,, b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|" b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSplitWithTrailingDelimiter ()
specifier|public
name|void
name|testPatternSplitWithTrailingDelimiter
parameter_list|()
block|{
name|String
name|trailing
init|=
literal|"a,b,c,"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|trailing
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSplitWithLeadingDelimiter ()
specifier|public
name|void
name|testPatternSplitWithLeadingDelimiter
parameter_list|()
block|{
name|String
name|leading
init|=
literal|",a,b,c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
name|leading
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|""
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Splitter.onPattern"
argument_list|)
DECL|method|testPatternSplitWithMultipleLetters ()
specifier|public
name|void
name|testPatternSplitWithMultipleLetters
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|testPatterningMotto
init|=
name|Splitter
operator|.
name|onPattern
argument_list|(
literal|"-"
argument_list|)
operator|.
name|split
argument_list|(
literal|"Testing-rocks-Debugging-sucks"
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|testPatterningMotto
argument_list|,
literal|"Testing"
argument_list|,
literal|"rocks"
argument_list|,
literal|"Debugging"
argument_list|,
literal|"sucks"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|literalDotPattern ()
specifier|private
specifier|static
name|Pattern
name|literalDotPattern
parameter_list|()
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\."
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitWithDoubleDelimiterOmitEmptyStrings ()
specifier|public
name|void
name|testPatternSplitWithDoubleDelimiterOmitEmptyStrings
parameter_list|()
block|{
name|String
name|doubled
init|=
literal|"a..b.c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|literalDotPattern
argument_list|()
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|doubled
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitEmptyToken ()
specifier|public
name|void
name|testPatternSplitEmptyToken
parameter_list|()
block|{
name|String
name|emptyToken
init|=
literal|"a. .c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|literalDotPattern
argument_list|()
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|emptyToken
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitEmptyTokenOmitEmptyStrings ()
specifier|public
name|void
name|testPatternSplitEmptyTokenOmitEmptyStrings
parameter_list|()
block|{
name|String
name|emptyToken
init|=
literal|"a. .c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|literalDotPattern
argument_list|()
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|emptyToken
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitOnOnlyDelimiter ()
specifier|public
name|void
name|testPatternSplitOnOnlyDelimiter
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|blankblank
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|literalDotPattern
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|blankblank
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitOnOnlyDelimitersOmitEmptyStrings ()
specifier|public
name|void
name|testPatternSplitOnOnlyDelimitersOmitEmptyStrings
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|literalDotPattern
argument_list|()
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
literal|"..."
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|empty
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitMatchingIsGreedy ()
specifier|public
name|void
name|testPatternSplitMatchingIsGreedy
parameter_list|()
block|{
name|String
name|longDelimiter
init|=
literal|"a, b,   c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|",\\s*"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|longDelimiter
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitWithLongLeadingDelimiter ()
specifier|public
name|void
name|testPatternSplitWithLongLeadingDelimiter
parameter_list|()
block|{
name|String
name|longDelimiter
init|=
literal|", a, b, c"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|longDelimiter
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|""
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitWithLongTrailingDelimiter ()
specifier|public
name|void
name|testPatternSplitWithLongTrailingDelimiter
parameter_list|()
block|{
name|String
name|longDelimiter
init|=
literal|"a, b, c/ "
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[,/]\\s"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|longDelimiter
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitInvalidPattern ()
specifier|public
name|void
name|testPatternSplitInvalidPattern
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"a*"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testPatternSplitWithTrim ()
specifier|public
name|void
name|testPatternSplitWithTrim
parameter_list|()
block|{
name|String
name|jacksons
init|=
literal|"arfo(Marlon)aorf, (Michael)orfa, afro(Jackie)orfa, "
operator|+
literal|"ofar(Jemaine), aff(Tito)"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|family
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|trimResults
argument_list|(
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"afro"
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|WHITESPACE
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|jacksons
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|family
argument_list|,
literal|"(Marlon)"
argument_list|,
literal|"(Michael)"
argument_list|,
literal|"(Jackie)"
argument_list|,
literal|"(Jemaine)"
argument_list|,
literal|"(Tito)"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitterIterableIsUnmodifiable ()
specifier|public
name|void
name|testSplitterIterableIsUnmodifiable
parameter_list|()
block|{
name|assertIteratorIsUnmodifiable
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
literal|"a,b"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|assertIteratorIsUnmodifiable
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|split
argument_list|(
literal|"a,b"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testSplitterIterableIsUnmodifiable_pattern ()
specifier|public
name|void
name|testSplitterIterableIsUnmodifiable_pattern
parameter_list|()
block|{
name|assertIteratorIsUnmodifiable
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|"a,b"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIteratorIsUnmodifiable (Iterator<?> iterator)
specifier|private
name|void
name|assertIteratorIsUnmodifiable
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
parameter_list|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testSplitterIterableIsLazy ()
specifier|public
name|void
name|testSplitterIterableIsLazy
parameter_list|()
block|{
name|assertSplitterIterableIsLazy
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|assertSplitterIterableIsLazy
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.regex.Pattern"
argument_list|)
DECL|method|testSplitterIterableIsLazy_pattern ()
specifier|public
name|void
name|testSplitterIterableIsLazy_pattern
parameter_list|()
block|{
name|assertSplitterIterableIsLazy
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test really pushes the boundaries of what we support. In general the    * splitter's behaviour is not well defined if the char sequence it's    * splitting is mutated during iteration.    */
DECL|method|assertSplitterIterableIsLazy (Splitter splitter)
specifier|private
name|void
name|assertSplitterIterableIsLazy
parameter_list|(
name|Splitter
name|splitter
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|splitter
operator|.
name|split
argument_list|(
name|builder
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"A,"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"B,"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSimpleSplit ()
specifier|public
name|void
name|testAtEachSimpleSplit
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"abcde"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"ab"
argument_list|,
literal|"cd"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitEqualChunkLength ()
specifier|public
name|void
name|testAtEachSplitEqualChunkLength
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"abcdef"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"ab"
argument_list|,
literal|"cd"
argument_list|,
literal|"ef"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitOnlyOneChunk ()
specifier|public
name|void
name|testAtEachSplitOnlyOneChunk
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"abc"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|3
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitSmallerString ()
specifier|public
name|void
name|testAtEachSplitSmallerString
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"ab"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|3
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitEmptyString ()
specifier|public
name|void
name|testAtEachSplitEmptyString
parameter_list|()
block|{
name|String
name|simple
init|=
literal|""
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|3
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitEmptyStringWithOmitEmptyStrings ()
specifier|public
name|void
name|testAtEachSplitEmptyStringWithOmitEmptyStrings
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|3
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
literal|""
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitIntoChars ()
specifier|public
name|void
name|testAtEachSplitIntoChars
parameter_list|()
block|{
name|String
name|simple
init|=
literal|"abcd"
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|letters
init|=
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
name|simple
argument_list|)
decl_stmt|;
name|assertContentsInOrder
argument_list|(
name|letters
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtEachSplitZeroChunkLen ()
specifier|public
name|void
name|testAtEachSplitZeroChunkLen
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAtEachSplitNegativeChunkLen ()
specifier|public
name|void
name|testAtEachSplitNegativeChunkLen
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|fixedLength
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Splitter
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: use common one when we settle where that is...
DECL|method|assertContentsInOrder ( Iterable<String> actual, String... expected)
specifier|private
name|void
name|assertContentsInOrder
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|actual
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_trimmedBoth ()
specifier|public
name|void
name|testMapSplitter_trimmedBoth
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|withKeyValueSeparator
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|trimResults
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"boy  : tom , girl: tina , cat  : kitty , dog: tommy "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tom"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"boy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tina"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kitty"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tommy"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_trimmedEntries ()
specifier|public
name|void
name|testMapSplitter_trimmedEntries
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|withKeyValueSeparator
argument_list|(
literal|":"
argument_list|)
operator|.
name|split
argument_list|(
literal|"boy  : tom , girl: tina , cat  : kitty , dog: tommy "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" tom"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"boy  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" tina"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" kitty"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"cat  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" tommy"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_trimmedKeyValue ()
specifier|public
name|void
name|testMapSplitter_trimmedKeyValue
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
operator|.
name|trimResults
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"boy  : tom , girl: tina , cat  : kitty , dog: tommy "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tom"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"boy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tina"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kitty"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tommy"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_notTrimmed ()
specifier|public
name|void
name|testMapSplitter_notTrimmed
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|":"
argument_list|)
operator|.
name|split
argument_list|(
literal|" boy:tom , girl: tina , cat :kitty , dog:  tommy "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tom "
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|" boy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" tina "
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|" girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kitty "
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|" cat "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"  tommy "
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|" dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_multiCharacterSeparator ()
specifier|public
name|void
name|testMapSplitter_multiCharacterSeparator
parameter_list|()
block|{
comment|// try different delimiters.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|":^&"
argument_list|)
operator|.
name|split
argument_list|(
literal|"boy:^&tom,girl:^&tina,cat:^&kitty,dog:^&tommy"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tom"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"boy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tina"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kitty"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tommy"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_emptySeparator ()
specifier|public
name|void
name|testMapSplitter_emptySeparator
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should be impossible to use an empty separator."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// Pass
block|}
block|}
DECL|method|testMapSplitter_malformedEntry ()
specifier|public
name|void
name|testMapSplitter_malformedEntry
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
operator|.
name|split
argument_list|(
literal|"a=1,b,c=2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't accept malformed entry \"b\""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// Pass
block|}
block|}
DECL|method|testMapSplitter_orderedResults ()
specifier|public
name|void
name|testMapSplitter_orderedResults
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|":"
argument_list|)
operator|.
name|split
argument_list|(
literal|"boy:tom,girl:tina,cat:kitty,dog:tommy"
argument_list|)
decl_stmt|;
name|MoreAsserts
operator|.
name|assertContentsInOrder
argument_list|(
name|m
operator|.
name|keySet
argument_list|()
argument_list|,
literal|"boy"
argument_list|,
literal|"girl"
argument_list|,
literal|"cat"
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tom"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"boy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tina"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kitty"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tommy"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try in a different order
name|m
operator|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|":"
argument_list|)
operator|.
name|split
argument_list|(
literal|"girl:tina,boy:tom,dog:tommy,cat:kitty"
argument_list|)
expr_stmt|;
name|MoreAsserts
operator|.
name|assertContentsInOrder
argument_list|(
name|m
operator|.
name|keySet
argument_list|()
argument_list|,
literal|"girl"
argument_list|,
literal|"boy"
argument_list|,
literal|"dog"
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tom"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"boy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tina"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"girl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kitty"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tommy"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapSplitter_duplicateKeys ()
specifier|public
name|void
name|testMapSplitter_duplicateKeys
parameter_list|()
block|{
try|try
block|{
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|":"
argument_list|)
operator|.
name|split
argument_list|(
literal|"a:1,b:2,a:3"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

