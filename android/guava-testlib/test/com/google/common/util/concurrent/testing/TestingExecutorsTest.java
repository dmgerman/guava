begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for TestingExecutors.  *  * @author Eric Chang  */
end_comment

begin_class
DECL|class|TestingExecutorsTest
specifier|public
class|class
name|TestingExecutorsTest
extends|extends
name|TestCase
block|{
DECL|field|taskDone
specifier|private
specifier|volatile
name|boolean
name|taskDone
decl_stmt|;
DECL|method|testNoOpScheduledExecutor ()
specifier|public
name|void
name|testNoOpScheduledExecutor
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|taskDone
operator|=
literal|false
expr_stmt|;
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|taskDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|TestingExecutors
operator|.
name|noOpScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskDone
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpScheduledExecutorShutdown ()
specifier|public
name|void
name|testNoOpScheduledExecutorShutdown
parameter_list|()
block|{
name|ListeningScheduledExecutorService
name|executor
init|=
name|TestingExecutors
operator|.
name|noOpScheduledExecutor
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpScheduledExecutorInvokeAll ()
specifier|public
name|void
name|testNoOpScheduledExecutorInvokeAll
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|ListeningScheduledExecutorService
name|executor
init|=
name|TestingExecutors
operator|.
name|noOpScheduledExecutor
argument_list|()
decl_stmt|;
name|taskDone
operator|=
literal|false
expr_stmt|;
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|taskDone
operator|=
literal|true
expr_stmt|;
return|return
name|taskDone
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futureList
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|task
argument_list|)
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|futureList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|taskDone
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testSameThreadScheduledExecutor ()
specifier|public
name|void
name|testSameThreadScheduledExecutor
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|taskDone
operator|=
literal|false
expr_stmt|;
name|Callable
argument_list|<
name|Integer
argument_list|>
name|task
init|=
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
block|{
name|taskDone
operator|=
literal|true
expr_stmt|;
return|return
literal|6
return|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|TestingExecutors
operator|.
name|sameThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
literal|10000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should run callable immediately"
argument_list|,
name|taskDone
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
operator|(
name|int
operator|)
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSameThreadScheduledExecutorWithException ()
specifier|public
name|void
name|testSameThreadScheduledExecutorWithException
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Oh no!"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|TestingExecutors
operator|.
name|sameThreadScheduledExecutor
argument_list|()
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
block|}
end_class

end_unit

