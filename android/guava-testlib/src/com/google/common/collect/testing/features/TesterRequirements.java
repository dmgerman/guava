begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.features
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Encapsulates the constraints that a class under test must satisfy in order for a tester method to  * be run against that class.  *  * @author George van den Driessche  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|TesterRequirements
specifier|public
specifier|final
class|class
name|TesterRequirements
block|{
DECL|field|presentFeatures
specifier|private
specifier|final
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|presentFeatures
decl_stmt|;
DECL|field|absentFeatures
specifier|private
specifier|final
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|absentFeatures
decl_stmt|;
DECL|method|TesterRequirements (Set<Feature<?>> presentFeatures, Set<Feature<?>> absentFeatures)
specifier|public
name|TesterRequirements
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|presentFeatures
parameter_list|,
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|absentFeatures
parameter_list|)
block|{
name|this
operator|.
name|presentFeatures
operator|=
name|Helpers
operator|.
name|copyToSet
argument_list|(
name|presentFeatures
argument_list|)
expr_stmt|;
name|this
operator|.
name|absentFeatures
operator|=
name|Helpers
operator|.
name|copyToSet
argument_list|(
name|absentFeatures
argument_list|)
expr_stmt|;
block|}
DECL|method|TesterRequirements (TesterRequirements tr)
specifier|public
name|TesterRequirements
parameter_list|(
name|TesterRequirements
name|tr
parameter_list|)
block|{
name|this
argument_list|(
name|tr
operator|.
name|getPresentFeatures
argument_list|()
argument_list|,
name|tr
operator|.
name|getAbsentFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TesterRequirements ()
specifier|public
name|TesterRequirements
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
expr|<
name|Feature
argument_list|<
name|?
argument_list|>
operator|>
name|emptySet
argument_list|()
operator|,
name|Collections
operator|.
expr|<
name|Feature
argument_list|<
name|?
argument_list|>
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getPresentFeatures ()
specifier|public
specifier|final
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|getPresentFeatures
parameter_list|()
block|{
return|return
name|presentFeatures
return|;
block|}
DECL|method|getAbsentFeatures ()
specifier|public
specifier|final
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|getAbsentFeatures
parameter_list|()
block|{
return|return
name|absentFeatures
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|TesterRequirements
condition|)
block|{
name|TesterRequirements
name|that
init|=
operator|(
name|TesterRequirements
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|presentFeatures
operator|.
name|equals
argument_list|(
name|that
operator|.
name|presentFeatures
argument_list|)
operator|&&
name|this
operator|.
name|absentFeatures
operator|.
name|equals
argument_list|(
name|that
operator|.
name|absentFeatures
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|presentFeatures
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|absentFeatures
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{TesterRequirements: present="
operator|+
name|presentFeatures
operator|+
literal|", absent="
operator|+
name|absentFeatures
operator|+
literal|"}"
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

