begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multisets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractCollectionTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|FeatureSpecificTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|OneSizeTestContainerGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|CollectionSerializationEqualTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code Multiset}  * implementation.  *  * @author Jared Levy  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|MultisetTestSuiteBuilder
specifier|public
class|class
name|MultisetTestSuiteBuilder
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractCollectionTestSuiteBuilder
argument_list|<
name|MultisetTestSuiteBuilder
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
block|{
DECL|method|using (TestMultisetGenerator<E> generator)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|MultisetTestSuiteBuilder
argument_list|<
name|E
argument_list|>
name|using
parameter_list|(
name|TestMultisetGenerator
argument_list|<
name|E
argument_list|>
name|generator
parameter_list|)
block|{
return|return
operator|new
name|MultisetTestSuiteBuilder
argument_list|<
name|E
argument_list|>
argument_list|()
operator|.
name|usingGenerator
argument_list|(
name|generator
argument_list|)
return|;
block|}
DECL|enum|NoRecurse
specifier|public
enum|enum
name|NoRecurse
implements|implements
name|Feature
argument_list|<
name|Void
argument_list|>
block|{
DECL|enumConstant|NO_ENTRY_SET
name|NO_ENTRY_SET
block|;
annotation|@
name|Override
DECL|method|getImpliedFeatures ()
specifier|public
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
super|super
name|Void
argument_list|>
argument_list|>
name|getImpliedFeatures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTesters ()
specifier|protected
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|getTesters
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|testers
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|super
operator|.
name|getTesters
argument_list|()
argument_list|)
decl_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|CollectionSerializationEqualTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetAddTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetContainsTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetCountTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetElementSetTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetEqualsTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetReadsTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetSetCountConditionallyTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetSetCountUnconditionallyTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetRemoveTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetEntrySetTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetIteratorTester
operator|.
name|class
argument_list|)
expr_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|MultisetSerializationTester
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|testers
return|;
block|}
DECL|method|computeEntrySetFeatures (Set<Feature<?>> features)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeEntrySetFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|features
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|features
argument_list|)
decl_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ADD
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
block|}
return|return
name|derivedFeatures
return|;
block|}
DECL|method|computeElementSetFeatures (Set<Feature<?>> features)
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeElementSetFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|features
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|features
argument_list|)
decl_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ADD
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
block|}
return|return
name|derivedFeatures
return|;
block|}
DECL|method|computeReserializedMultisetFeatures (Set<Feature<?>> features)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeReserializedMultisetFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|features
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|features
argument_list|)
decl_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
expr_stmt|;
return|return
name|derivedFeatures
return|;
block|}
annotation|@
name|Override
DECL|method|createDerivedSuites ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>> parentBuilder)
specifier|protected
name|List
argument_list|<
name|TestSuite
argument_list|>
name|createDerivedSuites
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
name|List
argument_list|<
name|TestSuite
argument_list|>
name|derivedSuites
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|super
operator|.
name|createDerivedSuites
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
decl_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|createElementSetTestSuite
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|NoRecurse
operator|.
name|NO_ENTRY_SET
argument_list|)
condition|)
block|{
name|derivedSuites
operator|.
name|add
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|EntrySetGenerator
argument_list|<
name|E
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|getName
argument_list|()
operator|+
literal|".entrySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeEntrySetFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|withSetUp
argument_list|(
name|parentBuilder
operator|.
name|getSetUp
argument_list|()
argument_list|)
operator|.
name|withTearDown
argument_list|(
name|parentBuilder
operator|.
name|getTearDown
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
condition|)
block|{
name|derivedSuites
operator|.
name|add
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ReserializedMultisetGenerator
argument_list|<
name|E
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|getName
argument_list|()
operator|+
literal|" reserialized"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeReserializedMultisetFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|withSetUp
argument_list|(
name|parentBuilder
operator|.
name|getSetUp
argument_list|()
argument_list|)
operator|.
name|withTearDown
argument_list|(
name|parentBuilder
operator|.
name|getTearDown
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|derivedSuites
return|;
block|}
DECL|method|createElementSetTestSuite ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>> parentBuilder)
name|TestSuite
name|createElementSetTestSuite
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ElementSetGenerator
argument_list|<
name|E
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|getName
argument_list|()
operator|+
literal|".elementSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeElementSetFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|withSetUp
argument_list|(
name|parentBuilder
operator|.
name|getSetUp
argument_list|()
argument_list|)
operator|.
name|withTearDown
argument_list|(
name|parentBuilder
operator|.
name|getTearDown
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|class|ElementSetGenerator
specifier|static
class|class
name|ElementSetGenerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|gen
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
name|gen
decl_stmt|;
DECL|method|ElementSetGenerator (OneSizeTestContainerGenerator<Collection<E>, E> gen)
name|ElementSetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
name|gen
parameter_list|)
block|{
name|this
operator|.
name|gen
operator|=
name|gen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|E
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|gen
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Object
index|[]
name|duplicated
init|=
operator|new
name|Object
index|[
name|elements
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|duplicated
index|[
name|i
index|]
operator|=
name|elements
index|[
name|i
index|]
expr_stmt|;
name|duplicated
index|[
name|i
operator|+
name|elements
operator|.
name|length
index|]
operator|=
name|elements
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|gen
operator|.
name|create
argument_list|(
name|duplicated
argument_list|)
operator|)
operator|.
name|elementSet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|E
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|gen
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<E> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|E
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|gen
operator|.
name|order
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|E
argument_list|>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|insertionOrder
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|EntrySetGenerator
specifier|static
class|class
name|EntrySetGenerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
DECL|field|gen
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
name|gen
decl_stmt|;
DECL|method|EntrySetGenerator (OneSizeTestContainerGenerator<Collection<E>, E> gen)
specifier|private
name|EntrySetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
name|gen
parameter_list|)
block|{
name|this
operator|.
name|gen
operator|=
name|gen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
name|SampleElements
argument_list|<
name|E
argument_list|>
name|samples
init|=
name|gen
operator|.
name|samples
argument_list|()
decl_stmt|;
return|return
operator|new
name|SampleElements
argument_list|<>
argument_list|(
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|samples
operator|.
name|e1
argument_list|()
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|samples
operator|.
name|e2
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|samples
operator|.
name|e3
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|samples
operator|.
name|e4
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... entries)
specifier|public
name|Set
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|entries
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|contents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|E
argument_list|>
name|elements
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|entries
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|E
argument_list|>
operator|)
name|o
decl_stmt|;
name|checkArgument
argument_list|(
name|elements
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|,
literal|"Duplicate keys not allowed in EntrySetGenerator"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|gen
operator|.
name|create
argument_list|(
name|contents
operator|.
name|toArray
argument_list|()
argument_list|)
operator|)
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Multiset
operator|.
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<E>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
comment|// We mimic the order from gen.
name|Map
argument_list|<
name|E
argument_list|,
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
range|:
name|insertionOrder
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|E
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|gen
operator|.
name|order
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|E
argument_list|>
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|seen
operator|.
name|add
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|order
operator|.
name|add
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|order
return|;
block|}
block|}
DECL|class|ReserializedMultisetGenerator
specifier|static
class|class
name|ReserializedMultisetGenerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|TestMultisetGenerator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|gen
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
name|gen
decl_stmt|;
DECL|method|ReserializedMultisetGenerator (OneSizeTestContainerGenerator<Collection<E>, E> gen)
specifier|private
name|ReserializedMultisetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
name|gen
parameter_list|)
block|{
name|this
operator|.
name|gen
operator|=
name|gen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|E
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|gen
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Multiset
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|gen
operator|.
name|create
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|E
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|gen
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<E> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|E
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|gen
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

