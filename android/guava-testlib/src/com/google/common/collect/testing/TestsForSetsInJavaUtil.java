begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|SetFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Generates a test suite covering the {@link Set} implementations in the  * {@link java.util} package. Can be subclassed to specify tests that should  * be suppressed.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|TestsForSetsInJavaUtil
specifier|public
class|class
name|TestsForSetsInJavaUtil
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestsForSetsInJavaUtil
argument_list|()
operator|.
name|allTests
argument_list|()
return|;
block|}
DECL|method|allTests ()
specifier|public
name|Test
name|allTests
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"java.util Sets"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForEmptySet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForSingletonSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForHashSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForLinkedHashSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForEnumSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForTreeSetNatural
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForTreeSetWithComparator
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForCopyOnWriteArraySet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForUnmodifiableSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForCheckedSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForCheckedSortedSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForAbstractSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForBadlyCollidingHashSet
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForConcurrentSkipListSetNatural
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForConcurrentSkipListSetWithComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|suppressForEmptySet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForEmptySet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForSingletonSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForSingletonSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForHashSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForHashSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForLinkedHashSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForLinkedHashSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForEnumSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForEnumSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForTreeSetNatural ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForTreeSetNatural
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForTreeSetWithComparator ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForTreeSetWithComparator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForCopyOnWriteArraySet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForCopyOnWriteArraySet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForUnmodifiableSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForUnmodifiableSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForCheckedSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForCheckedSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForCheckedSortedSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForCheckedSortedSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForAbstractSet ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForAbstractSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForConcurrentSkipListSetNatural ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForConcurrentSkipListSetNatural
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForConcurrentSkipListSetWithComparator ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForConcurrentSkipListSetWithComparator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|testsForEmptySet ()
specifier|public
name|Test
name|testsForEmptySet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"emptySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionSize
operator|.
name|ZERO
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForEmptySet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForSingletonSet ()
specifier|public
name|Test
name|testsForSingletonSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"singleton"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ONE
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForSingletonSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForHashSet ()
specifier|public
name|Test
name|testsForHashSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForHashSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForLinkedHashSet ()
specifier|public
name|Test
name|testsForLinkedHashSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"LinkedHashSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForLinkedHashSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForEnumSet ()
specifier|public
name|Test
name|testsForEnumSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestEnumSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AnEnum
argument_list|>
name|create
parameter_list|(
name|AnEnum
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|(
name|elements
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AnEnum
operator|.
name|class
argument_list|)
else|:
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"EnumSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|RESTRICTS_ELEMENTS
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForEnumSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForTreeSetNatural ()
specifier|public
name|Test
name|testsForTreeSetNatural
parameter_list|()
block|{
return|return
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeSet, natural"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForTreeSetNatural
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForTreeSetWithComparator ()
specifier|public
name|Test
name|testsForTreeSetWithComparator
parameter_list|()
block|{
return|return
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|arbitraryNullFriendlyComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeSet, with comparator"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForTreeSetWithComparator
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForCopyOnWriteArraySet ()
specifier|public
name|Test
name|testsForCopyOnWriteArraySet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"CopyOnWriteArraySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ADD
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForCopyOnWriteArraySet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForUnmodifiableSet ()
specifier|public
name|Test
name|testsForUnmodifiableSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|innerSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|innerSet
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|innerSet
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableSet/HashSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|NONE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForUnmodifiableSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForCheckedSet ()
specifier|public
name|Test
name|testsForCheckedSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|innerSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|innerSet
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|checkedSet
argument_list|(
name|innerSet
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"checkedSet/HashSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|RESTRICTS_ELEMENTS
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForCheckedSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForCheckedSortedSet ()
specifier|public
name|Test
name|testsForCheckedSortedSet
parameter_list|()
block|{
return|return
name|SortedSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|innerSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|innerSet
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|checkedSortedSet
argument_list|(
name|innerSet
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"checkedSortedSet/TreeSet, natural"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionFeature
operator|.
name|RESTRICTS_ELEMENTS
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForCheckedSortedSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForAbstractSet ()
specifier|public
name|Test
name|testsForAbstractSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|deduped
init|=
name|dedupe
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|deduped
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|MinimalCollection
operator|.
name|of
argument_list|(
name|deduped
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"AbstractSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|NONE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
comment|// in this case, anyway
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForAbstractSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForBadlyCollidingHashSet ()
specifier|public
name|Test
name|testsForBadlyCollidingHashSet
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCollidingSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"badly colliding HashSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForHashSet
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForConcurrentSkipListSetNatural ()
specifier|public
name|Test
name|testsForConcurrentSkipListSetNatural
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ConcurrentSkipListSet, natural"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForConcurrentSkipListSetNatural
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForConcurrentSkipListSetWithComparator ()
specifier|public
name|Test
name|testsForConcurrentSkipListSetWithComparator
parameter_list|()
block|{
return|return
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|(
name|arbitraryNullFriendlyComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ConcurrentSkipListSet, with comparator"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForConcurrentSkipListSetWithComparator
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|dedupe (String[] elements)
specifier|private
specifier|static
name|String
index|[]
name|dedupe
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|tmp
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|tmp
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|arbitraryNullFriendlyComparator ()
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Comparator
argument_list|<
name|T
argument_list|>
name|arbitraryNullFriendlyComparator
parameter_list|()
block|{
return|return
operator|new
name|NullFriendlyComparator
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
DECL|class|NullFriendlyComparator
specifier|private
specifier|static
specifier|final
class|class
name|NullFriendlyComparator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|T
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|compare (T left, T right)
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|left
parameter_list|,
name|T
name|right
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
operator|.
name|compareTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

