begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractMapTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_comment
comment|/**  * Tests {@link java.util.Map#hashCode}.  *  * @author George van den Driessche  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|Ignore
comment|// Affects only Android test runner, which respects JUnit 4 annotations on JUnit 3 tests.
DECL|class|MapHashCodeTester
specifier|public
class|class
name|MapHashCodeTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|testHashCode ()
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|int
name|expectedHashCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|getSampleEntries
argument_list|()
control|)
block|{
name|expectedHashCode
operator|+=
name|hash
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"A Map's hashCode() should be the sum of those of its entries."
argument_list|,
name|expectedHashCode
argument_list|,
name|getMap
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|ALLOWS_NULL_KEYS
argument_list|)
DECL|method|testHashCode_containingNullKey ()
specifier|public
name|void
name|testHashCode_containingNullKey
parameter_list|()
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entryWithNull
init|=
name|entry
argument_list|(
literal|null
argument_list|,
name|v3
argument_list|()
argument_list|)
decl_stmt|;
name|runEntryWithNullTest
argument_list|(
name|entryWithNull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|ALLOWS_NULL_VALUES
argument_list|)
DECL|method|testHashCode_containingNullValue ()
specifier|public
name|void
name|testHashCode_containingNullValue
parameter_list|()
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entryWithNull
init|=
name|entry
argument_list|(
name|k3
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|runEntryWithNullTest
argument_list|(
name|entryWithNull
argument_list|)
expr_stmt|;
block|}
DECL|method|runEntryWithNullTest (Entry<K, V> entryWithNull)
specifier|private
name|void
name|runEntryWithNullTest
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entryWithNull
parameter_list|)
block|{
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entryWithNull
argument_list|)
expr_stmt|;
name|int
name|expectedHashCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|expectedHashCode
operator|+=
name|hash
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|resetContainer
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A Map's hashCode() should be the sum of those of its entries (where "
operator|+
literal|"a null element in an entry counts as having a hash of zero)."
argument_list|,
name|expectedHashCode
argument_list|,
name|getMap
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hash (Entry<?, ?> e)
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
parameter_list|)
block|{
return|return
operator|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

