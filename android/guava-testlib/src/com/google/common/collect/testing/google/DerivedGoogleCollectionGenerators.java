begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|OneSizeTestContainerGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSubjectGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Derived suite generators for Guava collection interfaces, split out of the suite builders so that  * they are available to GWT.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|DerivedGoogleCollectionGenerators
specifier|public
specifier|final
class|class
name|DerivedGoogleCollectionGenerators
block|{
DECL|class|MapGenerator
specifier|public
specifier|static
class|class
name|MapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|DerivedGenerator
block|{
DECL|field|generator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|generator
decl_stmt|;
DECL|method|MapGenerator ( OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> oneSizeTestContainerGenerator)
specifier|public
name|MapGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|oneSizeTestContainerGenerator
parameter_list|)
block|{
name|this
operator|.
name|generator
operator|=
name|oneSizeTestContainerGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|generator
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|generator
operator|.
name|create
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|generator
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|generator
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|K
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|K
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|V
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
name|TestSubjectGenerator
argument_list|<
name|?
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|generator
return|;
block|}
block|}
DECL|class|InverseBiMapGenerator
specifier|public
specifier|static
class|class
name|InverseBiMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestBiMapGenerator
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
implements|,
name|DerivedGenerator
block|{
DECL|field|generator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|generator
decl_stmt|;
DECL|method|InverseBiMapGenerator ( OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> oneSizeTestContainerGenerator)
specifier|public
name|InverseBiMapGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|oneSizeTestContainerGenerator
parameter_list|)
block|{
name|this
operator|.
name|generator
operator|=
name|oneSizeTestContainerGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
init|=
name|generator
operator|.
name|samples
argument_list|()
decl_stmt|;
return|return
operator|new
name|SampleElements
argument_list|<>
argument_list|(
name|reverse
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e1
argument_list|()
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e2
argument_list|()
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e3
argument_list|()
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e4
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reverse (Entry<K, V> entry)
specifier|private
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|reverse
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entries
init|=
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|reverse
argument_list|(
operator|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|generator
operator|.
name|create
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|entries
argument_list|)
operator|.
name|inverse
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<V, K>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|V
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|K
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|K
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
name|TestSubjectGenerator
argument_list|<
name|?
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|generator
return|;
block|}
block|}
DECL|class|BiMapValueSetGenerator
specifier|public
specifier|static
class|class
name|BiMapValueSetGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|V
argument_list|>
implements|,
name|DerivedGenerator
block|{
DECL|field|mapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapGenerator
decl_stmt|;
DECL|field|samples
specifier|private
specifier|final
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
decl_stmt|;
DECL|method|BiMapValueSetGenerator ( OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> mapGenerator)
specifier|public
name|BiMapValueSetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapGenerator
parameter_list|)
block|{
name|this
operator|.
name|mapGenerator
operator|=
name|mapGenerator
expr_stmt|;
specifier|final
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapSamples
init|=
name|this
operator|.
name|mapGenerator
operator|.
name|samples
argument_list|()
decl_stmt|;
name|this
operator|.
name|samples
operator|=
operator|new
name|SampleElements
argument_list|<
name|V
argument_list|>
argument_list|(
name|mapSamples
operator|.
name|e0
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e1
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e2
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e3
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e4
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|samples
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
index|[]
name|valuesArray
init|=
operator|(
name|V
index|[]
operator|)
name|elements
decl_stmt|;
comment|// Start with a suitably shaped collection of entries
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|originalEntries
init|=
name|mapGenerator
operator|.
name|getSampleElements
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Create a copy of that, with the desired value for each value
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|originalEntries
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|valuesArray
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mapGenerator
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|V
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
specifier|final
name|V
index|[]
name|vs
init|=
operator|(
operator|(
name|TestBiMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|mapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
decl_stmt|;
return|return
name|vs
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<V> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
name|TestSubjectGenerator
argument_list|<
name|?
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|mapGenerator
return|;
block|}
block|}
DECL|method|DerivedGoogleCollectionGenerators ()
specifier|private
name|DerivedGoogleCollectionGenerators
parameter_list|()
block|{}
block|}
end_class

end_unit

