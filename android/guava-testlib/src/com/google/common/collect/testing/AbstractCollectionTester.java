begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Base class for collection testers.  *  * @param<E> the element type of the collection to be tested.  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractCollectionTester
specifier|public
specifier|abstract
class|class
name|AbstractCollectionTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractContainerTester
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
block|{
comment|// TODO: replace this with an accessor.
DECL|field|collection
specifier|protected
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
decl_stmt|;
annotation|@
name|Override
DECL|method|actualContents ()
specifier|protected
name|Collection
argument_list|<
name|E
argument_list|>
name|actualContents
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
comment|// TODO: dispose of this once collection is encapsulated.
annotation|@
name|Override
DECL|method|resetContainer (Collection<E> newContents)
specifier|protected
name|Collection
argument_list|<
name|E
argument_list|>
name|resetContainer
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|newContents
parameter_list|)
block|{
name|collection
operator|=
name|super
operator|.
name|resetContainer
argument_list|(
name|newContents
argument_list|)
expr_stmt|;
return|return
name|collection
return|;
block|}
comment|/** @see AbstractContainerTester#resetContainer() */
DECL|method|resetCollection ()
specifier|protected
name|void
name|resetCollection
parameter_list|()
block|{
name|resetContainer
argument_list|()
expr_stmt|;
block|}
comment|/** @return an array of the proper size with {@code null} inserted into the middle element. */
DECL|method|createArrayWithNullElement ()
specifier|protected
name|E
index|[]
name|createArrayWithNullElement
parameter_list|()
block|{
name|E
index|[]
name|array
init|=
name|createSamplesArray
argument_list|()
decl_stmt|;
name|array
index|[
name|getNullLocation
argument_list|()
index|]
operator|=
literal|null
expr_stmt|;
return|return
name|array
return|;
block|}
DECL|method|initCollectionWithNullElement ()
specifier|protected
name|void
name|initCollectionWithNullElement
parameter_list|()
block|{
name|E
index|[]
name|array
init|=
name|createArrayWithNullElement
argument_list|()
decl_stmt|;
name|resetContainer
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Equivalent to {@link #expectMissing(Object[]) expectMissing}{@code (null)} except that the call    * to {@code contains(null)} is permitted to throw a {@code NullPointerException}.    *    * @param message message to use upon assertion failure    */
DECL|method|expectNullMissingWhenNullUnsupported (String message)
specifier|protected
name|void
name|expectNullMissingWhenNullUnsupported
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|message
argument_list|,
name|actualContents
argument_list|()
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|tolerated
parameter_list|)
block|{
comment|// Tolerated
block|}
block|}
block|}
end_class

end_unit

