begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_comment
comment|/** Forwarding wrapper around a {@code Condition}. */
end_comment

begin_class
DECL|class|ForwardingCondition
specifier|abstract
class|class
name|ForwardingCondition
implements|implements
name|Condition
block|{
DECL|method|delegate ()
specifier|abstract
name|Condition
name|delegate
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|await ()
specifier|public
name|void
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|delegate
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|await (long time, TimeUnit unit)
specifier|public
name|boolean
name|await
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
argument_list|()
operator|.
name|await
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|awaitUninterruptibly ()
specifier|public
name|void
name|awaitUninterruptibly
parameter_list|()
block|{
name|delegate
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|awaitNanos (long nanosTimeout)
specifier|public
name|long
name|awaitNanos
parameter_list|(
name|long
name|nanosTimeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
argument_list|()
operator|.
name|awaitNanos
argument_list|(
name|nanosTimeout
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|awaitUntil (Date deadline)
specifier|public
name|boolean
name|awaitUntil
parameter_list|(
name|Date
name|deadline
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
argument_list|()
operator|.
name|awaitUntil
argument_list|(
name|deadline
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|signal ()
specifier|public
name|void
name|signal
parameter_list|()
block|{
name|delegate
argument_list|()
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|signalAll ()
specifier|public
name|void
name|signalAll
parameter_list|()
block|{
name|delegate
argument_list|()
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

