begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** Aggregate future that collects (stores) results of each future. */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|CollectionFuture
specifier|abstract
name|class
name|CollectionFuture
operator|<
name|V
expr|extends @
name|Nullable
name|Object
operator|,
name|C
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|AggregateFuture
argument_list|<
name|V
argument_list|,
name|C
argument_list|>
block|{
comment|/*    * We access this field racily but safely. For discussion of a similar situation, see the comments    * on the fields of TimeoutFuture. This field is slightly different than the fields discussed    * there: cancel() never reads this field, only writes to it. That makes the race here completely    * harmless, rather than just 99.99% harmless.    */
DECL|field|values
block|@
name|CheckForNull
specifier|private
name|List
argument_list|<
annotation|@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
block|;
DECL|method|CollectionFuture ( ImmutableCollection<? extends ListenableFuture<? extends V>> futures, boolean allMustSucceed)
name|CollectionFuture
argument_list|(
name|ImmutableCollection
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
operator|,
name|boolean
name|allMustSucceed
argument_list|)
block|{
name|super
argument_list|(
name|futures
argument_list|,
name|allMustSucceed
argument_list|,
literal|true
argument_list|)
block|;
name|List
argument_list|<
annotation|@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
operator|=
name|futures
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
expr|<@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
operator|>
name|emptyList
argument_list|()
else|:
name|Lists
operator|.
expr|<@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
operator|>
name|newArrayListWithCapacity
argument_list|(
name|futures
operator|.
name|size
argument_list|()
argument_list|)
block|;
comment|// Populate the results list with null initially.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|futures
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|values
operator|=
name|values
block|;   }
expr|@
name|Override
DECL|method|collectOneValue (int index, @ParametricNullness V returnValue)
name|final
name|void
name|collectOneValue
argument_list|(
name|int
name|index
argument_list|,
annotation|@
name|ParametricNullness
name|V
name|returnValue
argument_list|)
block|{
name|List
argument_list|<
annotation|@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
argument_list|>
name|localValues
operator|=
name|values
block|;
if|if
condition|(
name|localValues
operator|!=
literal|null
condition|)
block|{
name|localValues
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|Present
argument_list|<>
argument_list|(
name|returnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|handleAllCompleted ()
specifier|final
name|void
name|handleAllCompleted
parameter_list|()
block|{
name|List
argument_list|<
annotation|@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
argument_list|>
name|localValues
init|=
name|values
decl_stmt|;
if|if
condition|(
name|localValues
operator|!=
literal|null
condition|)
block|{
name|set
argument_list|(
name|combine
argument_list|(
name|localValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|releaseResources (ReleaseResourcesReason reason)
name|void
name|releaseResources
parameter_list|(
name|ReleaseResourcesReason
name|reason
parameter_list|)
block|{
name|super
operator|.
name|releaseResources
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function_decl
DECL|method|combine (List<@Nullable Present<V>> values)
specifier|abstract
name|C
name|combine
parameter_list|(
name|List
argument_list|<
annotation|@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/** Used for {@link Futures#allAsList} and {@link Futures#successfulAsList}. */
end_comment

begin_expr_stmt
DECL|class|ListFuture
specifier|static
name|final
name|class
name|ListFuture
operator|<
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|CollectionFuture
argument_list|<
name|V
argument_list|,
name|List
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
argument_list|>
block|{
DECL|method|ListFuture ( ImmutableCollection<? extends ListenableFuture<? extends V>> futures, boolean allMustSucceed)
name|ListFuture
argument_list|(
name|ImmutableCollection
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|futures
argument_list|,
name|boolean
name|allMustSucceed
argument_list|)
block|{
name|super
argument_list|(
name|futures
argument_list|,
name|allMustSucceed
argument_list|)
block|;
name|init
argument_list|()
block|;     }
expr|@
name|Override
DECL|method|combine (List<@Nullable Present<V>> values)
specifier|public
name|List
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
name|combine
argument_list|(
name|List
argument_list|<
annotation|@
name|Nullable
name|Present
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
argument_list|)
block|{
name|List
argument_list|<
annotation|@
name|Nullable
name|V
argument_list|>
name|result
operator|=
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|Present
argument_list|<
name|V
argument_list|>
name|element
range|:
name|values
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|element
operator|!=
literal|null
condition|?
name|element
operator|.
name|value
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|unmodifiableList
argument_list|(
name|result
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|/** The result of a successful {@code Future}. */
end_comment

begin_expr_stmt
DECL|class|Present
unit|private
specifier|static
name|final
name|class
name|Present
operator|<
name|V
expr|extends @
name|Nullable
name|Object
operator|>
block|{
DECL|field|value
name|V
name|value
block|;
DECL|method|Present (V value)
name|Present
argument_list|(
name|V
name|value
argument_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
block|;     }
block|}
end_expr_stmt

unit|}
end_unit

