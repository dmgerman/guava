begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_comment
comment|/**  * Executor ensuring that all Runnables submitted are executed in order, using the provided  * Executor, and sequentially such that no two will ever be running at the same time.  *  *<p>Tasks submitted to {@link #execute(Runnable)} are executed in FIFO order.  *  *<p>The execution of tasks is done by one thread as long as there are tasks left in the queue.  * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks  * continues. See {@link QueueWorker#workOnQueue} for details.  *  *<p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.  * If an {@code Error} is thrown, the error will propagate and execution will stop until it is  * restarted by a call to {@link #execute}.  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|SequentialExecutor
specifier|final
class|class
name|SequentialExecutor
implements|implements
name|Executor
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SequentialExecutor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Underlying executor that all submitted Runnable objects are run on. */
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"queue"
argument_list|)
DECL|field|queue
specifier|private
specifier|final
name|Queue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"queue"
argument_list|)
DECL|field|isWorkerRunning
specifier|private
name|boolean
name|isWorkerRunning
init|=
literal|false
decl_stmt|;
DECL|field|worker
specifier|private
specifier|final
name|QueueWorker
name|worker
init|=
operator|new
name|QueueWorker
argument_list|()
decl_stmt|;
comment|/** Use {@link MoreExecutors#newSequentialExecutor} */
DECL|method|SequentialExecutor (Executor executor)
name|SequentialExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a task to the queue and makes sure a worker thread is running.    *    *<p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,    * execution of tasks will stop until a call to this method or to {@link #resume()} is made.    */
annotation|@
name|Override
DECL|method|execute (Runnable task)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWorkerRunning
condition|)
block|{
return|return;
block|}
name|isWorkerRunning
operator|=
literal|true
expr_stmt|;
block|}
name|startQueueWorker
argument_list|()
expr_stmt|;
block|}
comment|/**    * Starts a worker.  This should only be called if:    *    *<ul>    *<li>{@code suspensions == 0}    *<li>{@code isWorkerRunning == true}    *<li>{@code !queue.isEmpty()}    *<li>the {@link #worker} lock is not held    *</ul>    */
DECL|method|startQueueWorker ()
specifier|private
name|void
name|startQueueWorker
parameter_list|()
block|{
name|boolean
name|executionRejected
init|=
literal|true
decl_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|executionRejected
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|executionRejected
condition|)
block|{
comment|// The best we can do is to stop executing the queue, but reset the state so that
comment|// execution can be resumed later if the caller so wishes.
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|isWorkerRunning
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Worker that runs tasks from {@link #queue} until it is empty. */
annotation|@
name|WeakOuter
DECL|class|QueueWorker
specifier|private
specifier|final
class|class
name|QueueWorker
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|workOnQueue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|isWorkerRunning
operator|=
literal|false
expr_stmt|;
block|}
throw|throw
name|e
throw|;
comment|// The execution of a task has ended abnormally.
comment|// We could have tasks left in the queue, so should perhaps try to restart a worker,
comment|// but then the Error will get delayed if we are using a direct (same thread) executor.
block|}
block|}
comment|/**      * Continues executing tasks from {@link #queue} until it is empty.      *      *<p>The thread's interrupt bit is cleared before execution of each task.      *      *<p>If the Thread in use is interrupted before or during execution of the tasks in      * {@link #queue}, the Executor will complete its tasks, and then restore the interruption.      * This means that once the Thread returns to the Executor that this Executor composes, the      * interruption will still be present. If the composed Executor is an ExecutorService, it can      * respond to shutdown() by returning tasks queued on that Thread after {@link #worker} drains      * the queue.      */
DECL|method|workOnQueue ()
specifier|private
name|void
name|workOnQueue
parameter_list|()
block|{
name|boolean
name|interruptedDuringTask
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Remove the interrupt bit before each task. The interrupt is for the "current task" when
comment|// it is sent, so subsequent tasks in the queue should not be caused to be interrupted
comment|// by a previous one in the queue being interrupted.
name|interruptedDuringTask
operator||=
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|Runnable
name|task
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|task
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|isWorkerRunning
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
try|try
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exception while executing runnable "
operator|+
name|task
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// Ensure that if the thread was interrupted at all while processing the task queue, it
comment|// is returned to the delegate Executor interrupted so that it may handle the
comment|// interruption if it likes.
if|if
condition|(
name|interruptedDuringTask
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

