begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SequentialExecutor
operator|.
name|WorkerRunningState
operator|.
name|IDLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SequentialExecutor
operator|.
name|WorkerRunningState
operator|.
name|QUEUED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SequentialExecutor
operator|.
name|WorkerRunningState
operator|.
name|QUEUING
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SequentialExecutor
operator|.
name|WorkerRunningState
operator|.
name|RUNNING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|identityHashCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_comment
comment|/**  * Executor ensuring that all Runnables submitted are executed in order, using the provided  * Executor, and sequentially such that no two will ever be running at the same time.  *  *<p>Tasks submitted to {@link #execute(Runnable)} are executed in FIFO order.  *  *<p>The execution of tasks is done by one thread as long as there are tasks left in the queue.  * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks  * continues. See {@link QueueWorker#workOnQueue} for details.  *  *<p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.  * If an {@code Error} is thrown, the error will propagate and execution will stop until it is  * restarted by a call to {@link #execute}.  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|SequentialExecutor
specifier|final
class|class
name|SequentialExecutor
implements|implements
name|Executor
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SequentialExecutor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|enum|WorkerRunningState
enum|enum
name|WorkerRunningState
block|{
comment|/** Runnable is not running and not queued for execution */
DECL|enumConstant|IDLE
name|IDLE
block|,
comment|/** Runnable is not running, but is being queued for execution */
DECL|enumConstant|QUEUING
name|QUEUING
block|,
comment|/** runnable has been submitted but has not yet begun execution */
DECL|enumConstant|QUEUED
name|QUEUED
block|,
DECL|enumConstant|RUNNING
name|RUNNING
block|,   }
comment|/** Underlying executor that all submitted Runnable objects are run on. */
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"queue"
argument_list|)
DECL|field|queue
specifier|private
specifier|final
name|Deque
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** see {@link WorkerRunningState} */
annotation|@
name|GuardedBy
argument_list|(
literal|"queue"
argument_list|)
DECL|field|workerRunningState
specifier|private
name|WorkerRunningState
name|workerRunningState
init|=
name|IDLE
decl_stmt|;
comment|/**    * This counter prevents an ABA issue where a thread may successfully schedule the worker, the    * worker runs and exhausts the queue, another thread enqueues a task and fails to schedule the    * worker, and then the first thread's call to delegate.execute() returns. Without this counter,    * it would observe the QUEUING state and set it to QUEUED, and the worker would never be    * scheduled again for future submissions.    */
annotation|@
name|GuardedBy
argument_list|(
literal|"queue"
argument_list|)
DECL|field|workerRunCount
specifier|private
name|long
name|workerRunCount
init|=
literal|0
decl_stmt|;
DECL|field|worker
annotation|@
name|RetainedWith
specifier|private
specifier|final
name|QueueWorker
name|worker
init|=
operator|new
name|QueueWorker
argument_list|()
decl_stmt|;
comment|/** Use {@link MoreExecutors#newSequentialExecutor} */
DECL|method|SequentialExecutor (Executor executor)
name|SequentialExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a task to the queue and makes sure a worker thread is running.    *    *<p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,    * execution of tasks will stop until a call to this method is made.    */
annotation|@
name|Override
DECL|method|execute (Runnable task)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|Runnable
name|submittedTask
decl_stmt|;
name|long
name|oldRunCount
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
comment|// If the worker is already running (or execute() on the delegate returned successfully, and
comment|// the worker has yet to start) then we don't need to start the worker.
if|if
condition|(
name|workerRunningState
operator|==
name|RUNNING
operator|||
name|workerRunningState
operator|==
name|QUEUED
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
return|return;
block|}
name|oldRunCount
operator|=
name|workerRunCount
expr_stmt|;
comment|// If the worker is not yet running, the delegate Executor might reject our attempt to start
comment|// it. To preserve FIFO order and failure atomicity of rejected execution when the same
comment|// Runnable is executed more than once, allocate a wrapper that we know is safe to remove by
comment|// object identity.
comment|// A data structure that returned a removal handle from add() would allow eliminating this
comment|// allocation.
name|submittedTask
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|task
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|submittedTask
argument_list|)
expr_stmt|;
name|workerRunningState
operator|=
name|QUEUING
expr_stmt|;
block|}
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
decl||
name|Error
name|t
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|boolean
name|removed
init|=
operator|(
name|workerRunningState
operator|==
name|IDLE
operator|||
name|workerRunningState
operator|==
name|QUEUING
operator|)
operator|&&
name|queue
operator|.
name|removeLastOccurrence
argument_list|(
name|submittedTask
argument_list|)
decl_stmt|;
comment|// If the delegate is directExecutor(), the submitted runnable could have thrown a REE. But
comment|// that's handled by the log check that catches RuntimeExceptions in the queue worker.
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|RejectedExecutionException
operator|)
operator|||
name|removed
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
return|return;
block|}
comment|/*      * This is an unsynchronized read! After the read, the function returns immediately or acquires      * the lock to check again. Since an IDLE state was observed inside the preceding synchronized      * block, and reference field assignment is atomic, this may save reacquiring the lock when      * another thread or the worker task has cleared the count and set the state.      *      *<p>When {@link #executor} is a directExecutor(), the value written to      * {@code workerRunningState} will be available synchronously, and behaviour will be      * deterministic.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"GuardedBy"
argument_list|)
name|boolean
name|alreadyMarkedQueued
init|=
name|workerRunningState
operator|!=
name|QUEUING
decl_stmt|;
if|if
condition|(
name|alreadyMarkedQueued
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|queue
init|)
block|{
if|if
condition|(
name|workerRunCount
operator|==
name|oldRunCount
operator|&&
name|workerRunningState
operator|==
name|QUEUING
condition|)
block|{
name|workerRunningState
operator|=
name|QUEUED
expr_stmt|;
block|}
block|}
block|}
comment|/** Worker that runs tasks from {@link #queue} until it is empty. */
DECL|class|QueueWorker
specifier|private
specifier|final
class|class
name|QueueWorker
implements|implements
name|Runnable
block|{
DECL|field|task
annotation|@
name|CheckForNull
name|Runnable
name|task
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|workOnQueue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|workerRunningState
operator|=
name|IDLE
expr_stmt|;
block|}
throw|throw
name|e
throw|;
comment|// The execution of a task has ended abnormally.
comment|// We could have tasks left in the queue, so should perhaps try to restart a worker,
comment|// but then the Error will get delayed if we are using a direct (same thread) executor.
block|}
block|}
comment|/**      * Continues executing tasks from {@link #queue} until it is empty.      *      *<p>The thread's interrupt bit is cleared before execution of each task.      *      *<p>If the Thread in use is interrupted before or during execution of the tasks in {@link      * #queue}, the Executor will complete its tasks, and then restore the interruption. This means      * that once the Thread returns to the Executor that this Executor composes, the interruption      * will still be present. If the composed Executor is an ExecutorService, it can respond to      * shutdown() by returning tasks queued on that Thread after {@link #worker} drains the queue.      */
DECL|method|workOnQueue ()
specifier|private
name|void
name|workOnQueue
parameter_list|()
block|{
name|boolean
name|interruptedDuringTask
init|=
literal|false
decl_stmt|;
name|boolean
name|hasSetRunning
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
comment|// Choose whether this thread will run or not after acquiring the lock on the first
comment|// iteration
if|if
condition|(
operator|!
name|hasSetRunning
condition|)
block|{
if|if
condition|(
name|workerRunningState
operator|==
name|RUNNING
condition|)
block|{
comment|// Don't want to have two workers pulling from the queue.
return|return;
block|}
else|else
block|{
comment|// Increment the run counter to avoid the ABA problem of a submitter marking the
comment|// thread as QUEUED after it already ran and exhausted the queue before returning
comment|// from execute().
name|workerRunCount
operator|++
expr_stmt|;
name|workerRunningState
operator|=
name|RUNNING
expr_stmt|;
name|hasSetRunning
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|task
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|workerRunningState
operator|=
name|IDLE
expr_stmt|;
return|return;
block|}
block|}
comment|// Remove the interrupt bit before each task. The interrupt is for the "current task" when
comment|// it is sent, so subsequent tasks in the queue should not be caused to be interrupted
comment|// by a previous one in the queue being interrupted.
name|interruptedDuringTask
operator||=
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
try|try
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exception while executing runnable "
operator|+
name|task
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|task
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// Ensure that if the thread was interrupted at all while processing the task queue, it
comment|// is returned to the delegate Executor interrupted so that it may handle the
comment|// interruption if it likes.
if|if
condition|(
name|interruptedDuringTask
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"GuardedBy"
argument_list|)
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Runnable
name|currentlyRunning
init|=
name|task
decl_stmt|;
if|if
condition|(
name|currentlyRunning
operator|!=
literal|null
condition|)
block|{
return|return
literal|"SequentialExecutorWorker{running="
operator|+
name|currentlyRunning
operator|+
literal|"}"
return|;
block|}
return|return
literal|"SequentialExecutorWorker{state="
operator|+
name|workerRunningState
operator|+
literal|"}"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SequentialExecutor@"
operator|+
name|identityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|"{"
operator|+
name|executor
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

