begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.escape
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An implementation-specific parameter class suitable for initializing {@link  * ArrayBasedCharEscaper} or {@link ArrayBasedUnicodeEscaper} instances. This class should be used  * when more than one escaper is created using the same character replacement mapping to allow the  * underlying (implementation specific) data structures to be shared.  *  *<p>The size of the data structure used by ArrayBasedCharEscaper and ArrayBasedUnicodeEscaper is  * proportional to the highest valued character that has a replacement. For example a replacement  * map containing the single character '{@literal \}u1000' will require approximately 16K of memory.  * As such sharing this data structure between escaper instances is the primary goal of this class.  *  * @author David Beaumont  * @since 15.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|ArrayBasedEscaperMap
specifier|public
specifier|final
class|class
name|ArrayBasedEscaperMap
block|{
comment|/**    * Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or    * ArrayBasedUnicodeEscaper instances.    *    * @param replacements a map of characters to their escaped representations    */
DECL|method|create (Map<Character, String> replacements)
specifier|public
specifier|static
name|ArrayBasedEscaperMap
name|create
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|replacements
parameter_list|)
block|{
return|return
operator|new
name|ArrayBasedEscaperMap
argument_list|(
name|createReplacementArray
argument_list|(
name|replacements
argument_list|)
argument_list|)
return|;
block|}
comment|// The underlying replacement array we can share between multiple escaper
comment|// instances.
DECL|field|replacementArray
specifier|private
specifier|final
name|char
index|[]
index|[]
name|replacementArray
decl_stmt|;
DECL|method|ArrayBasedEscaperMap (char[][] replacementArray)
specifier|private
name|ArrayBasedEscaperMap
parameter_list|(
name|char
index|[]
index|[]
name|replacementArray
parameter_list|)
block|{
name|this
operator|.
name|replacementArray
operator|=
name|replacementArray
expr_stmt|;
block|}
comment|// Returns the non-null array of replacements for fast lookup.
DECL|method|getReplacementArray ()
name|char
index|[]
index|[]
name|getReplacementArray
parameter_list|()
block|{
return|return
name|replacementArray
return|;
block|}
comment|// Creates a replacement array from the given map. The returned array is a
comment|// linear lookup table of replacement character sequences indexed by the
comment|// original character value.
annotation|@
name|VisibleForTesting
DECL|method|createReplacementArray (Map<Character, String> map)
specifier|static
name|char
index|[]
index|[]
name|createReplacementArray
parameter_list|(
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// GWT specific check (do not optimize)
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY_REPLACEMENT_ARRAY
return|;
block|}
name|char
name|max
init|=
name|Collections
operator|.
name|max
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|char
index|[]
index|[]
name|replacements
init|=
operator|new
name|char
index|[
name|max
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|replacements
index|[
name|c
index|]
operator|=
name|map
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
return|return
name|replacements
return|;
block|}
comment|// Immutable empty array for when there are no replacements.
DECL|field|EMPTY_REPLACEMENT_ARRAY
specifier|private
specifier|static
specifier|final
name|char
index|[]
index|[]
name|EMPTY_REPLACEMENT_ARRAY
init|=
operator|new
name|char
index|[
literal|0
index|]
index|[
literal|0
index|]
decl_stmt|;
block|}
end_class

end_unit

