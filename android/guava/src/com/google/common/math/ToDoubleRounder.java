begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2020 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathPreconditions
operator|.
name|checkRoundingUnnecessary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * Helper type to implement rounding {@code X} to a representable {@code double} value according to  * a {@link RoundingMode}.  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|ToDoubleRounder
specifier|abstract
class|class
name|ToDoubleRounder
parameter_list|<
name|X
extends|extends
name|Number
operator|&
name|Comparable
parameter_list|<
name|X
parameter_list|>
parameter_list|>
block|{
comment|/**    * Returns x rounded to either the greatest double less than or equal to the precise value of x,    * or the least double greater than or equal to the precise value of x.    */
DECL|method|roundToDoubleArbitrarily (X x)
specifier|abstract
name|double
name|roundToDoubleArbitrarily
parameter_list|(
name|X
name|x
parameter_list|)
function_decl|;
comment|/** Returns the sign of x: either -1, 0, or 1. */
DECL|method|sign (X x)
specifier|abstract
name|int
name|sign
parameter_list|(
name|X
name|x
parameter_list|)
function_decl|;
comment|/** Returns d's value as an X, rounded with the specified mode. */
DECL|method|toX (double d, RoundingMode mode)
specifier|abstract
name|X
name|toX
parameter_list|(
name|double
name|d
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
function_decl|;
comment|/** Returns a - b, guaranteed that both arguments are nonnegative. */
DECL|method|minus (X a, X b)
specifier|abstract
name|X
name|minus
parameter_list|(
name|X
name|a
parameter_list|,
name|X
name|b
parameter_list|)
function_decl|;
comment|/** Rounds {@code x} to a {@code double}. */
DECL|method|roundToDouble (X x, RoundingMode mode)
specifier|final
name|double
name|roundToDouble
parameter_list|(
name|X
name|x
parameter_list|,
name|RoundingMode
name|mode
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|mode
argument_list|,
literal|"mode"
argument_list|)
expr_stmt|;
name|double
name|roundArbitrarily
init|=
name|roundToDoubleArbitrarily
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|roundArbitrarily
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|DOWN
case|:
case|case
name|HALF_EVEN
case|:
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
return|return
name|Double
operator|.
name|MAX_VALUE
operator|*
name|sign
argument_list|(
name|x
argument_list|)
return|;
case|case
name|FLOOR
case|:
return|return
operator|(
name|roundArbitrarily
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
operator|)
condition|?
name|Double
operator|.
name|MAX_VALUE
else|:
name|Double
operator|.
name|NEGATIVE_INFINITY
return|;
case|case
name|CEILING
case|:
return|return
operator|(
name|roundArbitrarily
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
operator|)
condition|?
name|Double
operator|.
name|POSITIVE_INFINITY
else|:
operator|-
name|Double
operator|.
name|MAX_VALUE
return|;
case|case
name|UP
case|:
return|return
name|roundArbitrarily
return|;
case|case
name|UNNECESSARY
case|:
throw|throw
operator|new
name|ArithmeticException
argument_list|(
name|x
operator|+
literal|" cannot be represented precisely as a double"
argument_list|)
throw|;
block|}
block|}
name|X
name|roundArbitrarilyAsX
init|=
name|toX
argument_list|(
name|roundArbitrarily
argument_list|,
name|RoundingMode
operator|.
name|UNNECESSARY
argument_list|)
decl_stmt|;
name|int
name|cmpXToRoundArbitrarily
init|=
name|x
operator|.
name|compareTo
argument_list|(
name|roundArbitrarilyAsX
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|UNNECESSARY
case|:
name|checkRoundingUnnecessary
argument_list|(
name|cmpXToRoundArbitrarily
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
name|roundArbitrarily
return|;
case|case
name|FLOOR
case|:
return|return
operator|(
name|cmpXToRoundArbitrarily
operator|>=
literal|0
operator|)
condition|?
name|roundArbitrarily
else|:
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
name|roundArbitrarily
argument_list|)
return|;
case|case
name|CEILING
case|:
return|return
operator|(
name|cmpXToRoundArbitrarily
operator|<=
literal|0
operator|)
condition|?
name|roundArbitrarily
else|:
name|Math
operator|.
name|nextUp
argument_list|(
name|roundArbitrarily
argument_list|)
return|;
case|case
name|DOWN
case|:
if|if
condition|(
name|sign
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|cmpXToRoundArbitrarily
operator|>=
literal|0
operator|)
condition|?
name|roundArbitrarily
else|:
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
name|roundArbitrarily
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|cmpXToRoundArbitrarily
operator|<=
literal|0
operator|)
condition|?
name|roundArbitrarily
else|:
name|Math
operator|.
name|nextUp
argument_list|(
name|roundArbitrarily
argument_list|)
return|;
block|}
case|case
name|UP
case|:
if|if
condition|(
name|sign
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|cmpXToRoundArbitrarily
operator|<=
literal|0
operator|)
condition|?
name|roundArbitrarily
else|:
name|Math
operator|.
name|nextUp
argument_list|(
name|roundArbitrarily
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|cmpXToRoundArbitrarily
operator|>=
literal|0
operator|)
condition|?
name|roundArbitrarily
else|:
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
name|roundArbitrarily
argument_list|)
return|;
block|}
case|case
name|HALF_DOWN
case|:
case|case
name|HALF_UP
case|:
case|case
name|HALF_EVEN
case|:
block|{
name|X
name|roundFloor
decl_stmt|;
name|double
name|roundFloorAsDouble
decl_stmt|;
name|X
name|roundCeiling
decl_stmt|;
name|double
name|roundCeilingAsDouble
decl_stmt|;
if|if
condition|(
name|cmpXToRoundArbitrarily
operator|>=
literal|0
condition|)
block|{
name|roundFloorAsDouble
operator|=
name|roundArbitrarily
expr_stmt|;
name|roundFloor
operator|=
name|roundArbitrarilyAsX
expr_stmt|;
name|roundCeilingAsDouble
operator|=
name|Math
operator|.
name|nextUp
argument_list|(
name|roundArbitrarily
argument_list|)
expr_stmt|;
if|if
condition|(
name|roundCeilingAsDouble
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
condition|)
block|{
return|return
name|roundFloorAsDouble
return|;
block|}
name|roundCeiling
operator|=
name|toX
argument_list|(
name|roundCeilingAsDouble
argument_list|,
name|RoundingMode
operator|.
name|CEILING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roundCeilingAsDouble
operator|=
name|roundArbitrarily
expr_stmt|;
name|roundCeiling
operator|=
name|roundArbitrarilyAsX
expr_stmt|;
name|roundFloorAsDouble
operator|=
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
name|roundArbitrarily
argument_list|)
expr_stmt|;
if|if
condition|(
name|roundFloorAsDouble
operator|==
name|Double
operator|.
name|NEGATIVE_INFINITY
condition|)
block|{
return|return
name|roundCeilingAsDouble
return|;
block|}
name|roundFloor
operator|=
name|toX
argument_list|(
name|roundFloorAsDouble
argument_list|,
name|RoundingMode
operator|.
name|FLOOR
argument_list|)
expr_stmt|;
block|}
name|X
name|deltaToFloor
init|=
name|minus
argument_list|(
name|x
argument_list|,
name|roundFloor
argument_list|)
decl_stmt|;
name|X
name|deltaToCeiling
init|=
name|minus
argument_list|(
name|roundCeiling
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|deltaToFloor
operator|.
name|compareTo
argument_list|(
name|deltaToCeiling
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
block|{
comment|// closer to floor
return|return
name|roundFloorAsDouble
return|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
comment|// closer to ceiling
return|return
name|roundCeilingAsDouble
return|;
block|}
comment|// halfway between the representable values; do the half-whatever logic
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|HALF_EVEN
case|:
return|return
operator|(
operator|(
name|DoubleUtils
operator|.
name|getSignificand
argument_list|(
name|roundFloorAsDouble
argument_list|)
operator|&
literal|1L
operator|)
operator|==
literal|0
operator|)
condition|?
name|roundFloorAsDouble
else|:
name|roundCeilingAsDouble
return|;
case|case
name|HALF_DOWN
case|:
return|return
operator|(
name|sign
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
operator|)
condition|?
name|roundFloorAsDouble
else|:
name|roundCeilingAsDouble
return|;
case|case
name|HALF_UP
case|:
return|return
operator|(
name|sign
argument_list|(
name|x
argument_list|)
operator|>=
literal|0
operator|)
condition|?
name|roundCeilingAsDouble
else|:
name|roundFloorAsDouble
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"impossible"
argument_list|)
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"impossible"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

