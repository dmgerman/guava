begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multisets
operator|.
name|AbstractEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * Basic implementation of a primitive map of Object keys to counting number values, to be used for  * backing store for {@link Multiset} implementations.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|AbstractObjectCountMap
specifier|abstract
class|class
name|AbstractObjectCountMap
parameter_list|<
name|K
parameter_list|>
block|{
comment|/** The keys of the entries in the map. */
DECL|field|keys
specifier|transient
name|Object
index|[]
name|keys
decl_stmt|;
comment|/** The values of the entries in the map. */
DECL|field|values
specifier|transient
name|int
index|[]
name|values
decl_stmt|;
comment|/** Sentinel value that denotes an unset entry. */
DECL|field|UNSET
specifier|static
specifier|final
name|int
name|UNSET
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The number of elements contained in the set. */
DECL|field|size
specifier|transient
name|int
name|size
decl_stmt|;
DECL|field|modCount
specifier|transient
name|int
name|modCount
decl_stmt|;
DECL|field|keySetView
specifier|private
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySetView
decl_stmt|;
comment|/**    * Associates the specified value with the specified key in this map. If the map previously    * contained a mapping for the key, the old value is replaced by the specified value. (A map m is    * said to contain a mapping for a key k if and only if m.containsKey(k) would return true.)    *    * @param key key with which the specified value is to be associated    * @param value a positive int value to be associated with the specified key    * @return the previous value associated with key, or 0 if there was no mapping for key.    */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (@ullableDecl K key, int value)
specifier|abstract
name|int
name|put
parameter_list|(
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
comment|/**    * Returns the value to which the specified key is mapped, or 0 if this map contains no mapping    * for the key.    *    * @param key the key whose associated value is to be returned    * @return the int value to which the specified key is mapped, or 0 if this map contains no    *     mapping for the key    */
DECL|method|get (@ullableDecl Object key)
specifier|abstract
name|int
name|get
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**    * Removes the mapping for a key from this map if it is present. More formally, if this map    * contains a mapping from key k to value v such that (key==null ? k==null : key.equals(k)), that    * mapping is removed. (The map can contain at most one such mapping.)    *    *<p>Returns the value to which this map previously associated the key, or 0 if the map contained    * no mapping for the key.    *    * @param key key whose mapping is to be removed from the map    * @return the previous int value associated with key, or 0 if there was no mapping for key.    */
annotation|@
name|CanIgnoreReturnValue
DECL|method|remove (@ullableDecl Object key)
specifier|abstract
name|int
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
function_decl|;
comment|/** Removes all of the mappings from this map. The map will be empty after this call returns. */
DECL|method|clear ()
specifier|abstract
name|void
name|clear
parameter_list|()
function_decl|;
comment|/**    * Returns true if this map contains a mapping for the specified key. More formally, returns true    * if and only if this map contains a mapping for a key k such that (key==null ? k==null :    * key.equals(k)). (There can be at most one such mapping.)    *    * @param key key whose presence in this map is to be tested    * @return true if this map contains a mapping for the specified key    */
DECL|method|containsKey (@ullableDecl Object key)
specifier|abstract
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**    * Returns a Set view of the keys contained in this map. The set is backed by the map, so changes    * to the map are reflected in the set, and vice-versa.    *    * @return a set view of the keys contained in this map    */
DECL|method|keySet ()
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|(
name|keySetView
operator|==
literal|null
operator|)
condition|?
name|keySetView
operator|=
name|createKeySet
argument_list|()
else|:
name|keySetView
return|;
block|}
comment|/** Returns the number of key-value mappings in this map. */
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/** Returns true if this map contains no key-value mappings. */
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
comment|/**    * Returns index of the specified key in the underlying key array. Implementation specific and    * does not denote ordering of the keys.    */
DECL|method|indexOf (@ullableDecl Object key)
specifier|abstract
name|int
name|indexOf
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
function_decl|;
comment|/** Given the index of a key, remove the corresponding entry in the map. */
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeEntry (int entryIndex)
specifier|abstract
name|int
name|removeEntry
parameter_list|(
name|int
name|entryIndex
parameter_list|)
function_decl|;
DECL|method|createKeySet ()
name|Set
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
operator|new
name|KeySetView
argument_list|()
return|;
block|}
DECL|method|getKey (int index)
name|K
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
operator|(
name|K
operator|)
name|keys
index|[
name|index
index|]
return|;
block|}
DECL|method|getValue (int index)
name|int
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|values
index|[
name|index
index|]
return|;
block|}
DECL|method|getEntry (int index)
name|Entry
argument_list|<
name|K
argument_list|>
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapEntry
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|KeySetView
class|class
name|KeySetView
extends|extends
name|Sets
operator|.
name|ImprovedAbstractSet
argument_list|<
name|K
argument_list|>
block|{
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|ObjectArrays
operator|.
name|copyAsObjectArray
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toArray (T[] a)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// keys only contains Ks
annotation|@
name|Override
name|K
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
operator|(
name|K
operator|)
name|keys
index|[
name|entry
index|]
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
DECL|method|firstIndex ()
name|int
name|firstIndex
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|nextIndex (int index)
name|int
name|nextIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|+
literal|1
operator|<
name|size
operator|)
condition|?
name|index
operator|+
literal|1
else|:
operator|-
literal|1
return|;
block|}
DECL|class|Itr
specifier|abstract
class|class
name|Itr
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|expectedModCount
name|int
name|expectedModCount
init|=
name|modCount
decl_stmt|;
DECL|field|nextCalled
name|boolean
name|nextCalled
init|=
literal|false
decl_stmt|;
DECL|field|index
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|size
return|;
block|}
DECL|method|getOutput (int entry)
specifier|abstract
name|T
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|nextCalled
operator|=
literal|true
expr_stmt|;
return|return
name|getOutput
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
name|checkRemove
argument_list|(
name|nextCalled
argument_list|)
expr_stmt|;
name|expectedModCount
operator|++
expr_stmt|;
name|index
operator|--
expr_stmt|;
name|removeEntry
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|nextCalled
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|checkForConcurrentModification ()
name|void
name|checkForConcurrentModification
parameter_list|()
block|{
if|if
condition|(
name|modCount
operator|!=
name|expectedModCount
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
block|}
DECL|field|entrySetView
specifier|private
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|entrySetView
decl_stmt|;
comment|/**    * Returns a Set view of the entries contained in this map. The set is backed by the map, so    * changes to the map are reflected in the set, and vice-versa.    *    * @return a set view of the entries contained in this map    */
DECL|method|entrySet ()
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|(
name|entrySetView
operator|==
literal|null
operator|)
condition|?
name|entrySetView
operator|=
name|createEntrySet
argument_list|()
else|:
name|entrySetView
return|;
block|}
DECL|method|createEntrySet ()
specifier|abstract
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
function_decl|;
annotation|@
name|WeakOuter
DECL|class|EntrySetView
specifier|abstract
class|class
name|EntrySetView
extends|extends
name|Sets
operator|.
name|ImprovedAbstractSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|int
name|index
init|=
name|indexOf
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|index
operator|!=
operator|-
literal|1
operator|&&
name|values
index|[
name|index
index|]
operator|==
name|entry
operator|.
name|getCount
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullableDecl Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|int
name|index
init|=
name|indexOf
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
name|values
index|[
name|index
index|]
operator|==
name|entry
operator|.
name|getCount
argument_list|()
condition|)
block|{
name|removeEntry
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
DECL|class|MapEntry
class|class
name|MapEntry
extends|extends
name|AbstractEntry
argument_list|<
name|K
argument_list|>
block|{
DECL|field|key
annotation|@
name|NullableDecl
specifier|final
name|K
name|key
decl_stmt|;
DECL|field|lastKnownIndex
name|int
name|lastKnownIndex
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// keys only contains Ks
DECL|method|MapEntry (int index)
name|MapEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
operator|(
name|K
operator|)
name|keys
index|[
name|index
index|]
expr_stmt|;
name|this
operator|.
name|lastKnownIndex
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getElement ()
specifier|public
name|K
name|getElement
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|updateLastKnownIndex ()
name|void
name|updateLastKnownIndex
parameter_list|()
block|{
if|if
condition|(
name|lastKnownIndex
operator|==
operator|-
literal|1
operator|||
name|lastKnownIndex
operator|>=
name|size
argument_list|()
operator|||
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|key
argument_list|,
name|keys
index|[
name|lastKnownIndex
index|]
argument_list|)
condition|)
block|{
name|lastKnownIndex
operator|=
name|indexOf
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// values only contains Vs
annotation|@
name|Override
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
name|updateLastKnownIndex
argument_list|()
expr_stmt|;
return|return
operator|(
name|lastKnownIndex
operator|==
operator|-
literal|1
operator|)
condition|?
literal|0
else|:
name|values
index|[
name|lastKnownIndex
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// values only contains Vs
annotation|@
name|CanIgnoreReturnValue
DECL|method|setCount (int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|updateLastKnownIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastKnownIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|put
argument_list|(
name|key
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|int
name|old
init|=
name|values
index|[
name|lastKnownIndex
index|]
decl_stmt|;
name|values
index|[
name|lastKnownIndex
index|]
operator|=
name|count
expr_stmt|;
return|return
name|old
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

