begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|concurrent
operator|.
name|LazyInit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link ImmutableMultiset} with zero or more elements.  *  * @author Jared Levy  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// uses writeReplace(), not default serialization
DECL|class|RegularImmutableMultiset
class|class
name|RegularImmutableMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ImmutableMultiset
argument_list|<
name|E
argument_list|>
block|{
DECL|field|EMPTY
specifier|static
specifier|final
name|RegularImmutableMultiset
argument_list|<
name|Object
argument_list|>
name|EMPTY
init|=
operator|new
name|RegularImmutableMultiset
argument_list|<>
argument_list|(
name|ObjectCountHashMap
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|contents
specifier|private
specifier|final
specifier|transient
name|ObjectCountHashMap
argument_list|<
name|E
argument_list|>
name|contents
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
specifier|transient
name|int
name|size
decl_stmt|;
DECL|field|elementSet
annotation|@
name|LazyInit
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|elementSet
decl_stmt|;
DECL|method|RegularImmutableMultiset (ObjectCountHashMap<E> contents)
name|RegularImmutableMultiset
parameter_list|(
name|ObjectCountHashMap
argument_list|<
name|E
argument_list|>
name|contents
parameter_list|)
block|{
name|this
operator|.
name|contents
operator|=
name|contents
expr_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|contents
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|=
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|count (@ullable Object element)
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|result
init|=
name|elementSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|elementSet
operator|=
operator|new
name|ElementSet
argument_list|()
else|:
name|result
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|ElementSet
specifier|private
specifier|final
class|class
name|ElementSet
extends|extends
name|ImmutableSet
operator|.
name|Indexed
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|Override
DECL|method|get (int index)
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|contents
operator|.
name|getKey
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullable Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
name|RegularImmutableMultiset
operator|.
name|this
operator|.
name|contains
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|contents
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEntry (int index)
name|Entry
argument_list|<
name|E
argument_list|>
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|contents
operator|.
name|getEntry
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

