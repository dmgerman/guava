begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multisets
operator|.
name|UnmodifiableMultiset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Multisets#unmodifiableSortedMultiset(SortedMultiset)}, split out into  * its own file so it can be GWT emulated (to deal with the differing elementSet() types in GWT and  * non-GWT).  *  * @author Louis Wasserman  */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|UnmodifiableSortedMultiset
name|final
name|class
name|UnmodifiableSortedMultiset
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|UnmodifiableMultiset
argument_list|<
name|E
argument_list|>
expr|implements
name|SortedMultiset
argument_list|<
name|E
argument_list|>
block|{
DECL|method|UnmodifiableSortedMultiset (SortedMultiset<E> delegate)
name|UnmodifiableSortedMultiset
argument_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
block|;   }
expr|@
name|Override
DECL|method|delegate ()
specifier|protected
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|delegate
argument_list|()
block|{
return|return
operator|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
expr|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
argument_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|createElementSet ()
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|unmodifiableNavigableSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|NavigableSet
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
return|return
operator|(
name|NavigableSet
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|elementSet
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
DECL|field|descendingMultiset
annotation|@
name|CheckForNull
specifier|private
specifier|transient
name|UnmodifiableSortedMultiset
argument_list|<
name|E
argument_list|>
name|descendingMultiset
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|descendingMultiset ()
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|descendingMultiset
parameter_list|()
block|{
name|UnmodifiableSortedMultiset
argument_list|<
name|E
argument_list|>
name|result
init|=
name|descendingMultiset
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|UnmodifiableSortedMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|descendingMultiset
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|descendingMultiset
operator|=
name|this
expr_stmt|;
return|return
name|descendingMultiset
operator|=
name|result
return|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|firstEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|firstEntry
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|firstEntry
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|lastEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|lastEntry
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lastEntry
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollFirstEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|pollFirstEntry
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|pollLastEntry ()
specifier|public
name|Entry
argument_list|<
name|E
argument_list|>
name|pollLastEntry
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|headMultiset (@arametricNullness E upperBound, BoundType boundType)
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|headMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|upperBound
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
return|return
name|Multisets
operator|.
name|unmodifiableSortedMultiset
argument_list|(
name|delegate
argument_list|()
operator|.
name|headMultiset
argument_list|(
name|upperBound
argument_list|,
name|boundType
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|subMultiset ( @arametricNullness E lowerBound, BoundType lowerBoundType, @ParametricNullness E upperBound, BoundType upperBoundType)
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|lowerBound
parameter_list|,
name|BoundType
name|lowerBoundType
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|upperBound
parameter_list|,
name|BoundType
name|upperBoundType
parameter_list|)
block|{
return|return
name|Multisets
operator|.
name|unmodifiableSortedMultiset
argument_list|(
name|delegate
argument_list|()
operator|.
name|subMultiset
argument_list|(
name|lowerBound
argument_list|,
name|lowerBoundType
argument_list|,
name|upperBound
argument_list|,
name|upperBoundType
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|tailMultiset (@arametricNullness E lowerBound, BoundType boundType)
specifier|public
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|tailMultiset
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|lowerBound
parameter_list|,
name|BoundType
name|boundType
parameter_list|)
block|{
return|return
name|Multisets
operator|.
name|unmodifiableSortedMultiset
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailMultiset
argument_list|(
name|lowerBound
argument_list|,
name|boundType
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

unit|}
end_unit

