begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|Weak
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Implementation for {@link FilteredMultimap#values()}.  *  * @author Louis Wasserman  */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|FilteredMultimapValues
name|final
name|class
name|FilteredMultimapValues
operator|<
name|K
expr|extends @
name|Nullable
name|Object
operator|,
name|V
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|AbstractCollection
argument_list|<
name|V
argument_list|>
block|{   @
DECL|field|multimap
name|Weak
specifier|private
name|final
name|FilteredMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
block|;
DECL|method|FilteredMultimapValues (FilteredMultimap<K, V> multimap)
name|FilteredMultimapValues
argument_list|(
name|FilteredMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
argument_list|)
block|{
name|this
operator|.
name|multimap
operator|=
name|checkNotNull
argument_list|(
name|multimap
argument_list|)
block|;   }
expr|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
argument_list|()
block|{
return|return
name|Maps
operator|.
name|valueIterator
argument_list|(
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
expr|@
name|Override
DECL|method|contains (@heckForNull Object o)
specifier|public
name|boolean
name|contains
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|o
argument_list|)
block|{
return|return
name|multimap
operator|.
name|containsValue
argument_list|(
name|o
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove (@heckForNull Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|o
parameter_list|)
block|{
name|Predicate
argument_list|<
name|?
super|super
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryPredicate
init|=
name|multimap
operator|.
name|entryPredicate
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|unfilteredItr
init|=
name|multimap
operator|.
name|unfiltered
argument_list|()
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|unfilteredItr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|unfilteredItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entryPredicate
operator|.
name|apply
argument_list|(
name|entry
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|o
argument_list|)
condition|)
block|{
name|unfilteredItr
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|removeIf
argument_list|(
name|multimap
operator|.
name|unfiltered
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
comment|// explicit<Entry<K, V>> is required to build with JDK6
name|Predicates
operator|.
expr|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|>
name|and
argument_list|(
name|multimap
operator|.
name|entryPredicate
argument_list|()
argument_list|,
name|Maps
operator|.
expr|<
name|V
operator|>
name|valuePredicateOnEntries
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|removeIf
argument_list|(
name|multimap
operator|.
name|unfiltered
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
comment|// explicit<Entry<K, V>> is required to build with JDK6
name|Predicates
operator|.
expr|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|>
name|and
argument_list|(
name|multimap
operator|.
name|entryPredicate
argument_list|()
argument_list|,
name|Maps
operator|.
expr|<
name|V
operator|>
name|valuePredicateOnEntries
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|multimap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

