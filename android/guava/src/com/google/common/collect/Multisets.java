begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkNonnegative
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Provides static utility methods for creating and working with {@link  * Multiset} instances.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multisets">  * {@code Multisets}</a>.  *  * @author Kevin Bourrillion  * @author Mike Bostock  * @author Louis Wasserman  * @since 2.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|Multisets
specifier|public
specifier|final
class|class
name|Multisets
block|{
DECL|method|Multisets ()
specifier|private
name|Multisets
parameter_list|()
block|{}
comment|/**    * Returns an unmodifiable view of the specified multiset. Query operations on    * the returned multiset "read through" to the specified multiset, and    * attempts to modify the returned multiset result in an    * {@link UnsupportedOperationException}.    *    *<p>The returned multiset will be serializable if the specified multiset is    * serializable.    *    * @param multiset the multiset for which an unmodifiable view is to be    *     generated    * @return an unmodifiable view of the multiset    */
DECL|method|unmodifiableMultiset (Multiset<? extends E> multiset)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|unmodifiableMultiset
parameter_list|(
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|multiset
parameter_list|)
block|{
if|if
condition|(
name|multiset
operator|instanceof
name|UnmodifiableMultiset
operator|||
name|multiset
operator|instanceof
name|ImmutableMultiset
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Since it's unmodifiable, the covariant cast is safe
name|Multiset
argument_list|<
name|E
argument_list|>
name|result
init|=
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|multiset
decl_stmt|;
return|return
name|result
return|;
block|}
return|return
operator|new
name|UnmodifiableMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|multiset
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Simply returns its argument.    *    * @deprecated no need to use this    * @since 10.0    */
annotation|@
name|Deprecated
DECL|method|unmodifiableMultiset (ImmutableMultiset<E> multiset)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|unmodifiableMultiset
parameter_list|(
name|ImmutableMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|multiset
argument_list|)
return|;
block|}
DECL|class|UnmodifiableMultiset
specifier|static
class|class
name|UnmodifiableMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|ForwardingMultiset
argument_list|<
name|E
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|delegate
specifier|final
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|delegate
decl_stmt|;
DECL|method|UnmodifiableMultiset (Multiset<? extends E> delegate)
name|UnmodifiableMultiset
parameter_list|(
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Multiset
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
comment|// This is safe because all non-covariant methods are overridden
return|return
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|delegate
return|;
block|}
DECL|field|elementSet
specifier|transient
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
decl_stmt|;
DECL|method|createElementSet ()
name|Set
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|E
operator|>
name|unmodifiableSet
argument_list|(
name|delegate
operator|.
name|elementSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|es
init|=
name|elementSet
decl_stmt|;
return|return
operator|(
name|es
operator|==
literal|null
operator|)
condition|?
name|elementSet
operator|=
name|createElementSet
argument_list|()
else|:
name|es
return|;
block|}
DECL|field|entrySet
specifier|transient
name|Set
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|es
init|=
name|entrySet
decl_stmt|;
return|return
operator|(
name|es
operator|==
literal|null
operator|)
comment|// Safe because the returned set is made unmodifiable and Entry
comment|// itself is readonly
condition|?
name|entrySet
operator|=
operator|(
name|Set
operator|)
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|delegate
operator|.
name|entrySet
argument_list|()
argument_list|)
else|:
name|es
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
expr|<
name|E
operator|>
name|unmodifiableIterator
argument_list|(
name|delegate
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|add (E element)
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|add (E element, int occurences)
specifier|public
name|int
name|add
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|occurences
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addAll (Collection<? extends E> elementsToAdd)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elementsToAdd
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove (Object element)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove (Object element, int occurrences)
specifier|public
name|int
name|remove
parameter_list|(
name|Object
name|element
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> elementsToRemove)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elementsToRemove
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> elementsToRetain)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elementsToRetain
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setCount (E element, int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setCount (E element, int oldCount, int newCount)
specifier|public
name|boolean
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns an unmodifiable view of the specified sorted multiset. Query    * operations on the returned multiset "read through" to the specified    * multiset, and attempts to modify the returned multiset result in an {@link    * UnsupportedOperationException}.    *    *<p>The returned multiset will be serializable if the specified multiset is    * serializable.    *    * @param sortedMultiset the sorted multiset for which an unmodifiable view is    *     to be generated    * @return an unmodifiable view of the multiset    * @since 11.0    */
annotation|@
name|Beta
DECL|method|unmodifiableSortedMultiset (SortedMultiset<E> sortedMultiset)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|unmodifiableSortedMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|sortedMultiset
parameter_list|)
block|{
comment|// it's in its own file so it can be emulated for GWT
return|return
operator|new
name|UnmodifiableSortedMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|sortedMultiset
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable multiset entry with the specified element and count.    * The entry will be serializable if {@code e} is.    *    * @param e the element to be associated with the returned entry    * @param n the count to be associated with the returned entry    * @throws IllegalArgumentException if {@code n} is negative    */
DECL|method|immutableEntry (@ullable E e, int n)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
name|immutableEntry
parameter_list|(
annotation|@
name|Nullable
name|E
name|e
parameter_list|,
name|int
name|n
parameter_list|)
block|{
return|return
operator|new
name|ImmutableEntry
argument_list|<
name|E
argument_list|>
argument_list|(
name|e
argument_list|,
name|n
argument_list|)
return|;
block|}
DECL|class|ImmutableEntry
specifier|static
class|class
name|ImmutableEntry
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractEntry
argument_list|<
name|E
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|element
annotation|@
name|Nullable
specifier|private
specifier|final
name|E
name|element
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
DECL|method|ImmutableEntry (@ullable E element, int count)
name|ImmutableEntry
parameter_list|(
annotation|@
name|Nullable
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|checkNonnegative
argument_list|(
name|count
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getElement ()
specifier|public
specifier|final
name|E
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
annotation|@
name|Override
DECL|method|getCount ()
specifier|public
specifier|final
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|nextInBucket ()
specifier|public
name|ImmutableEntry
argument_list|<
name|E
argument_list|>
name|nextInBucket
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned    * multiset is a live view of {@code unfiltered}; changes to one affect the other.    *    *<p>The resulting multiset's iterators, and those of its {@code entrySet()} and    * {@code elementSet()}, do not support {@code remove()}.  However, all other multiset methods    * supported by {@code unfiltered} are supported by the returned multiset. When given an element    * that doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods    * throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and    * {@code clear()} are called on the filtered multiset, only elements that satisfy the filter    * will be removed from the underlying multiset.    *    *<p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is.    *    *<p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every    * element in the underlying multiset and determine which elements satisfy the filter. When a    * live view is<i>not</i> needed, it may be faster to copy the returned multiset and use the    * copy.    *    *<p><b>Warning:</b> {@code predicate} must be<i>consistent with equals</i>, as documented at    * {@link Predicate#apply}. Do not provide a predicate such as    * {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See    * {@link Iterables#filter(Iterable, Class)} for related functionality.)    *    * @since 14.0    */
annotation|@
name|Beta
DECL|method|filter (Multiset<E> unfiltered, Predicate<? super E> predicate)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|filter
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|unfiltered
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|E
argument_list|>
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|unfiltered
operator|instanceof
name|FilteredMultiset
condition|)
block|{
comment|// Support clear(), removeAll(), and retainAll() when filtering a filtered
comment|// collection.
name|FilteredMultiset
argument_list|<
name|E
argument_list|>
name|filtered
init|=
operator|(
name|FilteredMultiset
argument_list|<
name|E
argument_list|>
operator|)
name|unfiltered
decl_stmt|;
name|Predicate
argument_list|<
name|E
argument_list|>
name|combinedPredicate
init|=
name|Predicates
operator|.
expr|<
name|E
operator|>
name|and
argument_list|(
name|filtered
operator|.
name|predicate
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilteredMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|filtered
operator|.
name|unfiltered
argument_list|,
name|combinedPredicate
argument_list|)
return|;
block|}
return|return
operator|new
name|FilteredMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|unfiltered
argument_list|,
name|predicate
argument_list|)
return|;
block|}
DECL|class|FilteredMultiset
specifier|private
specifier|static
specifier|final
class|class
name|FilteredMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractMultiset
argument_list|<
name|E
argument_list|>
block|{
DECL|field|unfiltered
specifier|final
name|Multiset
argument_list|<
name|E
argument_list|>
name|unfiltered
decl_stmt|;
DECL|field|predicate
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|E
argument_list|>
name|predicate
decl_stmt|;
DECL|method|FilteredMultiset (Multiset<E> unfiltered, Predicate<? super E> predicate)
name|FilteredMultiset
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|unfiltered
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|E
argument_list|>
name|predicate
parameter_list|)
block|{
name|this
operator|.
name|unfiltered
operator|=
name|checkNotNull
argument_list|(
name|unfiltered
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|checkNotNull
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|unfiltered
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createElementSet ()
name|Set
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|filter
argument_list|(
name|unfiltered
operator|.
name|elementSet
argument_list|()
argument_list|,
name|predicate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|Set
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|filter
argument_list|(
name|unfiltered
operator|.
name|entrySet
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|predicate
operator|.
name|apply
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should never be called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|distinctElements ()
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|count (@ullable Object element)
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
name|int
name|count
init|=
name|unfiltered
operator|.
name|count
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// element is equal to an E
name|E
name|e
init|=
operator|(
name|E
operator|)
name|element
decl_stmt|;
return|return
name|predicate
operator|.
name|apply
argument_list|(
name|e
argument_list|)
condition|?
name|count
else|:
literal|0
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|add (@ullable E element, int occurrences)
specifier|public
name|int
name|add
parameter_list|(
annotation|@
name|Nullable
name|E
name|element
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
name|element
argument_list|)
argument_list|,
literal|"Element %s does not match predicate %s"
argument_list|,
name|element
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
return|return
name|unfiltered
operator|.
name|add
argument_list|(
name|element
argument_list|,
name|occurrences
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullable Object element, int occurrences)
specifier|public
name|int
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|occurrences
argument_list|,
literal|"occurrences"
argument_list|)
expr_stmt|;
if|if
condition|(
name|occurrences
operator|==
literal|0
condition|)
block|{
return|return
name|count
argument_list|(
name|element
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|contains
argument_list|(
name|element
argument_list|)
condition|?
name|unfiltered
operator|.
name|remove
argument_list|(
name|element
argument_list|,
name|occurrences
argument_list|)
else|:
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|elementSet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the expected number of distinct elements given the specified    * elements. The number of distinct elements is only computed if {@code    * elements} is an instance of {@code Multiset}; otherwise the default value    * of 11 is returned.    */
DECL|method|inferDistinctElements (Iterable<?> elements)
specifier|static
name|int
name|inferDistinctElements
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|instanceof
name|Multiset
condition|)
block|{
return|return
operator|(
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|elements
operator|)
operator|.
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|11
return|;
comment|// initial capacity will be rounded up to 16
block|}
comment|/**    * Returns an unmodifiable view of the union of two multisets.    * In the returned multiset, the count of each element is the<i>maximum</i>    * of its counts in the two backing multisets. The iteration order of the    * returned multiset matches that of the element set of {@code multiset1}    * followed by the members of the element set of {@code multiset2} that are    * not contained in {@code multiset1}, with repeated occurrences of the same    * element appearing consecutively.    *    *<p>Results are undefined if {@code multiset1} and {@code multiset2} are    * based on different equivalence relations (as {@code HashMultiset} and    * {@code TreeMultiset} are).    *    * @since 14.0    */
annotation|@
name|Beta
DECL|method|union ( final Multiset<? extends E> multiset1, final Multiset<? extends E> multiset2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|union
parameter_list|(
specifier|final
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|multiset1
parameter_list|,
specifier|final
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|multiset2
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|multiset1
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|multiset2
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractMultiset
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
return|return
name|multiset1
operator|.
name|contains
argument_list|(
name|element
argument_list|)
operator|||
name|multiset2
operator|.
name|contains
argument_list|(
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|multiset1
operator|.
name|isEmpty
argument_list|()
operator|&&
name|multiset2
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|multiset1
operator|.
name|count
argument_list|(
name|element
argument_list|)
argument_list|,
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Set
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|union
argument_list|(
name|multiset1
operator|.
name|elementSet
argument_list|()
argument_list|,
name|multiset2
operator|.
name|elementSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|iterator1
init|=
name|multiset1
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|iterator2
init|=
name|multiset2
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// TODO(lowasser): consider making the entries live views
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|iterator1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|entry1
init|=
name|iterator1
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|element
init|=
name|entry1
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|Math
operator|.
name|max
argument_list|(
name|entry1
operator|.
name|getCount
argument_list|()
argument_list|,
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
while|while
condition|(
name|iterator2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|entry2
init|=
name|iterator2
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|element
init|=
name|entry2
operator|.
name|getElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multiset1
operator|.
name|contains
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|entry2
operator|.
name|getCount
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns an unmodifiable view of the intersection of two multisets.    * In the returned multiset, the count of each element is the<i>minimum</i>    * of its counts in the two backing multisets, with elements that would have    * a count of 0 not included. The iteration order of the returned multiset    * matches that of the element set of {@code multiset1}, with repeated    * occurrences of the same element appearing consecutively.    *    *<p>Results are undefined if {@code multiset1} and {@code multiset2} are    * based on different equivalence relations (as {@code HashMultiset} and    * {@code TreeMultiset} are).    *    * @since 2.0    */
DECL|method|intersection ( final Multiset<E> multiset1, final Multiset<?> multiset2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|intersection
parameter_list|(
specifier|final
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset1
parameter_list|,
specifier|final
name|Multiset
argument_list|<
name|?
argument_list|>
name|multiset2
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|multiset1
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|multiset2
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractMultiset
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
name|int
name|count1
init|=
name|multiset1
operator|.
name|count
argument_list|(
name|element
argument_list|)
decl_stmt|;
return|return
operator|(
name|count1
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
name|Math
operator|.
name|min
argument_list|(
name|count1
argument_list|,
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Set
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|intersection
argument_list|(
name|multiset1
operator|.
name|elementSet
argument_list|()
argument_list|,
name|multiset2
operator|.
name|elementSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|iterator1
init|=
name|multiset1
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// TODO(lowasser): consider making the entries live views
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|iterator1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|E
argument_list|>
name|entry1
init|=
name|iterator1
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|element
init|=
name|entry1
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|entry1
operator|.
name|getCount
argument_list|()
argument_list|,
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns an unmodifiable view of the sum of two multisets.    * In the returned multiset, the count of each element is the<i>sum</i> of    * its counts in the two backing multisets. The iteration order of the    * returned multiset matches that of the element set of {@code multiset1}    * followed by the members of the element set of {@code multiset2} that    * are not contained in {@code multiset1}, with repeated occurrences of the    * same element appearing consecutively.    *    *<p>Results are undefined if {@code multiset1} and {@code multiset2} are    * based on different equivalence relations (as {@code HashMultiset} and    * {@code TreeMultiset} are).    *    * @since 14.0    */
annotation|@
name|Beta
DECL|method|sum ( final Multiset<? extends E> multiset1, final Multiset<? extends E> multiset2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|sum
parameter_list|(
specifier|final
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|multiset1
parameter_list|,
specifier|final
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|multiset2
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|multiset1
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|multiset2
argument_list|)
expr_stmt|;
comment|// TODO(lowasser): consider making the entries live views
return|return
operator|new
name|AbstractMultiset
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
return|return
name|multiset1
operator|.
name|contains
argument_list|(
name|element
argument_list|)
operator|||
name|multiset2
operator|.
name|contains
argument_list|(
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|multiset1
operator|.
name|isEmpty
argument_list|()
operator|&&
name|multiset2
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|IntMath
operator|.
name|saturatedAdd
argument_list|(
name|multiset1
operator|.
name|size
argument_list|()
argument_list|,
name|multiset2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
name|multiset1
operator|.
name|count
argument_list|(
name|element
argument_list|)
operator|+
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Set
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|union
argument_list|(
name|multiset1
operator|.
name|elementSet
argument_list|()
argument_list|,
name|multiset2
operator|.
name|elementSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|iterator1
init|=
name|multiset1
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|iterator2
init|=
name|multiset2
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|iterator1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|entry1
init|=
name|iterator1
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|element
init|=
name|entry1
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|entry1
operator|.
name|getCount
argument_list|()
operator|+
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
decl_stmt|;
return|return
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
while|while
condition|(
name|iterator2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|entry2
init|=
name|iterator2
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|element
init|=
name|entry2
operator|.
name|getElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multiset1
operator|.
name|contains
argument_list|(
name|element
argument_list|)
condition|)
block|{
return|return
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|entry2
operator|.
name|getCount
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns an unmodifiable view of the difference of two multisets.    * In the returned multiset, the count of each element is the result of the    *<i>zero-truncated subtraction</i> of its count in the second multiset from    * its count in the first multiset, with elements that would have a count of    * 0 not included. The iteration order of the returned multiset matches that    * of the element set of {@code multiset1}, with repeated occurrences of the    * same element appearing consecutively.    *    *<p>Results are undefined if {@code multiset1} and {@code multiset2} are    * based on different equivalence relations (as {@code HashMultiset} and    * {@code TreeMultiset} are).    *    * @since 14.0    */
annotation|@
name|Beta
DECL|method|difference ( final Multiset<E> multiset1, final Multiset<?> multiset2)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|difference
parameter_list|(
specifier|final
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset1
parameter_list|,
specifier|final
name|Multiset
argument_list|<
name|?
argument_list|>
name|multiset2
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|multiset1
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|multiset2
argument_list|)
expr_stmt|;
comment|// TODO(lowasser): consider making the entries live views
return|return
operator|new
name|AbstractMultiset
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
name|int
name|count1
init|=
name|multiset1
operator|.
name|count
argument_list|(
name|element
argument_list|)
decl_stmt|;
return|return
operator|(
name|count1
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|count1
operator|-
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|iterator1
init|=
name|multiset1
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|E
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|iterator1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|E
argument_list|>
name|entry1
init|=
name|iterator1
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|element
init|=
name|entry1
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|entry1
operator|.
name|getCount
argument_list|()
operator|-
name|multiset2
operator|.
name|count
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|immutableEntry
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|entryIterator
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns {@code true} if {@code subMultiset.count(o)<=    * superMultiset.count(o)} for all {@code o}.    *    * @since 10.0    */
annotation|@
name|CanIgnoreReturnValue
DECL|method|containsOccurrences (Multiset<?> superMultiset, Multiset<?> subMultiset)
specifier|public
specifier|static
name|boolean
name|containsOccurrences
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|superMultiset
parameter_list|,
name|Multiset
argument_list|<
name|?
argument_list|>
name|subMultiset
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|superMultiset
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|subMultiset
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|subMultiset
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|superCount
init|=
name|superMultiset
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|superCount
operator|<
name|entry
operator|.
name|getCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Modifies {@code multisetToModify} so that its count for an element    * {@code e} is at most {@code multisetToRetain.count(e)}.    *    *<p>To be precise, {@code multisetToModify.count(e)} is set to    * {@code Math.min(multisetToModify.count(e),    * multisetToRetain.count(e))}. This is similar to    * {@link #intersection(Multiset, Multiset) intersection}    * {@code (multisetToModify, multisetToRetain)}, but mutates    * {@code multisetToModify} instead of returning a view.    *    *<p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps    * all occurrences of elements that appear at all in {@code    * multisetToRetain}, and deletes all occurrences of all other elements.    *    * @return {@code true} if {@code multisetToModify} was changed as a result    *         of this operation    * @since 10.0    */
annotation|@
name|CanIgnoreReturnValue
DECL|method|retainOccurrences ( Multiset<?> multisetToModify, Multiset<?> multisetToRetain)
specifier|public
specifier|static
name|boolean
name|retainOccurrences
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|multisetToModify
parameter_list|,
name|Multiset
argument_list|<
name|?
argument_list|>
name|multisetToRetain
parameter_list|)
block|{
return|return
name|retainOccurrencesImpl
argument_list|(
name|multisetToModify
argument_list|,
name|multisetToRetain
argument_list|)
return|;
block|}
comment|/**    * Delegate implementation which cares about the element type.    */
DECL|method|retainOccurrencesImpl ( Multiset<E> multisetToModify, Multiset<?> occurrencesToRetain)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|retainOccurrencesImpl
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|multisetToModify
parameter_list|,
name|Multiset
argument_list|<
name|?
argument_list|>
name|occurrencesToRetain
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|multisetToModify
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|occurrencesToRetain
argument_list|)
expr_stmt|;
comment|// Avoiding ConcurrentModificationExceptions is tricky.
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
init|=
name|multisetToModify
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|retainCount
init|=
name|occurrencesToRetain
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainCount
operator|==
literal|0
condition|)
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retainCount
operator|<
name|entry
operator|.
name|getCount
argument_list|()
condition|)
block|{
name|multisetToModify
operator|.
name|setCount
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|retainCount
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**    * For each occurrence of an element {@code e} in {@code occurrencesToRemove},    * removes one occurrence of {@code e} in {@code multisetToModify}.    *    *<p>Equivalently, this method modifies {@code multisetToModify} so that    * {@code multisetToModify.count(e)} is set to    * {@code Math.max(0, multisetToModify.count(e) -    * Iterables.frequency(occurrencesToRemove, e))}.    *    *<p>This is<i>not</i> the same as {@code multisetToModify.}    * {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which    * removes all occurrences of elements that appear in    * {@code occurrencesToRemove}. However, this operation<i>is</i> equivalent    * to, albeit sometimes more efficient than, the following:<pre>   {@code    *    *   for (E e : occurrencesToRemove) {    *     multisetToModify.remove(e);    *   }}</pre>    *    * @return {@code true} if {@code multisetToModify} was changed as a result of    *         this operation    * @since 18.0 (present in 10.0 with a requirement that the second parameter    *     be a {@code Multiset})    */
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeOccurrences ( Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove)
specifier|public
specifier|static
name|boolean
name|removeOccurrences
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|multisetToModify
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|occurrencesToRemove
parameter_list|)
block|{
if|if
condition|(
name|occurrencesToRemove
operator|instanceof
name|Multiset
condition|)
block|{
return|return
name|removeOccurrences
argument_list|(
name|multisetToModify
argument_list|,
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|occurrencesToRemove
argument_list|)
return|;
block|}
else|else
block|{
name|checkNotNull
argument_list|(
name|multisetToModify
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|occurrencesToRemove
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|occurrencesToRemove
control|)
block|{
name|changed
operator||=
name|multisetToModify
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
block|}
comment|/**    * For each occurrence of an element {@code e} in {@code occurrencesToRemove},    * removes one occurrence of {@code e} in {@code multisetToModify}.    *    *<p>Equivalently, this method modifies {@code multisetToModify} so that    * {@code multisetToModify.count(e)} is set to    * {@code Math.max(0, multisetToModify.count(e) -    * occurrencesToRemove.count(e))}.    *    *<p>This is<i>not</i> the same as {@code multisetToModify.}    * {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which    * removes all occurrences of elements that appear in    * {@code occurrencesToRemove}. However, this operation<i>is</i> equivalent    * to, albeit sometimes more efficient than, the following:<pre>   {@code    *    *   for (E e : occurrencesToRemove) {    *     multisetToModify.remove(e);    *   }}</pre>    *    * @return {@code true} if {@code multisetToModify} was changed as a result of    *         this operation    * @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)    */
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeOccurrences ( Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove)
specifier|public
specifier|static
name|boolean
name|removeOccurrences
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|multisetToModify
parameter_list|,
name|Multiset
argument_list|<
name|?
argument_list|>
name|occurrencesToRemove
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|multisetToModify
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|occurrencesToRemove
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|>
argument_list|>
name|entryIterator
init|=
name|multisetToModify
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|removeCount
init|=
name|occurrencesToRemove
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeCount
operator|>=
name|entry
operator|.
name|getCount
argument_list|()
condition|)
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|removeCount
operator|>
literal|0
condition|)
block|{
name|multisetToModify
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|removeCount
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**    * Implementation of the {@code equals}, {@code hashCode}, and    * {@code toString} methods of {@link Multiset.Entry}.    */
DECL|class|AbstractEntry
specifier|abstract
specifier|static
class|class
name|AbstractEntry
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Multiset
operator|.
name|Entry
argument_list|<
name|E
argument_list|>
block|{
comment|/**      * Indicates whether an object equals this entry, following the behavior      * specified in {@link Multiset.Entry#equals}.      */
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Multiset
operator|.
name|Entry
condition|)
block|{
name|Multiset
operator|.
name|Entry
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|Multiset
operator|.
name|Entry
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|getCount
argument_list|()
operator|==
name|that
operator|.
name|getCount
argument_list|()
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|that
operator|.
name|getElement
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return this entry's hash code, following the behavior specified in      * {@link Multiset.Entry#hashCode}.      */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|E
name|e
init|=
name|getElement
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|e
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|e
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
name|getCount
argument_list|()
return|;
block|}
comment|/**      * Returns a string representation of this multiset entry. The string      * representation consists of the associated element if the associated count      * is one, and otherwise the associated element followed by the characters      * " x " (space, x and space) followed by the count. Elements and counts are      * converted to strings as by {@code String.valueOf}.      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|text
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|n
operator|==
literal|1
operator|)
condition|?
name|text
else|:
operator|(
name|text
operator|+
literal|" x "
operator|+
name|n
operator|)
return|;
block|}
block|}
comment|/**    * An implementation of {@link Multiset#equals}.    */
DECL|method|equalsImpl (Multiset<?> multiset, @Nullable Object object)
specifier|static
name|boolean
name|equalsImpl
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|multiset
parameter_list|,
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|multiset
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Multiset
condition|)
block|{
name|Multiset
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
comment|/*        * We can't simply check whether the entry sets are equal, since that        * approach fails when a TreeMultiset has a comparator that returns 0        * when passed unequal elements.        */
if|if
condition|(
name|multiset
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|size
argument_list|()
operator|||
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|that
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|multiset
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
operator|!=
name|entry
operator|.
name|getCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * An implementation of {@link Multiset#addAll}.    */
DECL|method|addAllImpl (Multiset<E> self, Collection<? extends E> elements)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|addAllImpl
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|self
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|elements
operator|instanceof
name|Multiset
condition|)
block|{
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|that
init|=
name|cast
argument_list|(
name|elements
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|entry
range|:
name|that
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|self
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Iterators
operator|.
name|addAll
argument_list|(
name|self
argument_list|,
name|elements
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * An implementation of {@link Multiset#removeAll}.    */
DECL|method|removeAllImpl (Multiset<?> self, Collection<?> elementsToRemove)
specifier|static
name|boolean
name|removeAllImpl
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Collection
argument_list|<
name|?
argument_list|>
name|elementsToRemove
parameter_list|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|elementsToRemove
operator|instanceof
name|Multiset
operator|)
condition|?
operator|(
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|elementsToRemove
operator|)
operator|.
name|elementSet
argument_list|()
else|:
name|elementsToRemove
decl_stmt|;
return|return
name|self
operator|.
name|elementSet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|collection
argument_list|)
return|;
block|}
comment|/**    * An implementation of {@link Multiset#retainAll}.    */
DECL|method|retainAllImpl (Multiset<?> self, Collection<?> elementsToRetain)
specifier|static
name|boolean
name|retainAllImpl
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|self
parameter_list|,
name|Collection
argument_list|<
name|?
argument_list|>
name|elementsToRetain
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|elementsToRetain
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|elementsToRetain
operator|instanceof
name|Multiset
operator|)
condition|?
operator|(
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|elementsToRetain
operator|)
operator|.
name|elementSet
argument_list|()
else|:
name|elementsToRetain
decl_stmt|;
return|return
name|self
operator|.
name|elementSet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|collection
argument_list|)
return|;
block|}
comment|/**    * An implementation of {@link Multiset#setCount(Object, int)}.    */
DECL|method|setCountImpl (Multiset<E> self, E element, int count)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|int
name|setCountImpl
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|self
parameter_list|,
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|count
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|int
name|oldCount
init|=
name|self
operator|.
name|count
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|int
name|delta
init|=
name|count
operator|-
name|oldCount
decl_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|self
operator|.
name|add
argument_list|(
name|element
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
name|self
operator|.
name|remove
argument_list|(
name|element
argument_list|,
operator|-
name|delta
argument_list|)
expr_stmt|;
block|}
return|return
name|oldCount
return|;
block|}
comment|/**    * An implementation of {@link Multiset#setCount(Object, int, int)}.    */
DECL|method|setCountImpl (Multiset<E> self, E element, int oldCount, int newCount)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|setCountImpl
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|self
parameter_list|,
name|E
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|oldCount
argument_list|,
literal|"oldCount"
argument_list|)
expr_stmt|;
name|checkNonnegative
argument_list|(
name|newCount
argument_list|,
literal|"newCount"
argument_list|)
expr_stmt|;
if|if
condition|(
name|self
operator|.
name|count
argument_list|(
name|element
argument_list|)
operator|==
name|oldCount
condition|)
block|{
name|self
operator|.
name|setCount
argument_list|(
name|element
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ElementSet
specifier|abstract
specifier|static
class|class
name|ElementSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|Sets
operator|.
name|ImprovedAbstractSet
argument_list|<
name|E
argument_list|>
block|{
DECL|method|multiset ()
specifier|abstract
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|multiset
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|multiset
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|multiset
argument_list|()
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|multiset
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TransformedIterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|,
name|E
argument_list|>
argument_list|(
name|multiset
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|E
name|transform
parameter_list|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|multiset
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|multiset
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|class|EntrySet
specifier|abstract
specifier|static
class|class
name|EntrySet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|Sets
operator|.
name|ImprovedAbstractSet
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
DECL|method|multiset ()
specifier|abstract
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|contains (@ullable Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
comment|/*          * The GWT compiler wrongly issues a warning here.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"cast"
argument_list|)
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|count
init|=
name|multiset
argument_list|()
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|count
operator|==
name|entry
operator|.
name|getCount
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// GWT compiler warning; see contains().
annotation|@
name|SuppressWarnings
argument_list|(
literal|"cast"
argument_list|)
annotation|@
name|Override
DECL|method|remove (Object object)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Multiset
operator|.
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|Object
name|element
init|=
name|entry
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|entryCount
init|=
name|entry
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|entryCount
operator|!=
literal|0
condition|)
block|{
comment|// Safe as long as we never add a new entry, which we won't.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Multiset
argument_list|<
name|Object
argument_list|>
name|multiset
init|=
operator|(
name|Multiset
operator|)
name|multiset
argument_list|()
decl_stmt|;
return|return
name|multiset
operator|.
name|setCount
argument_list|(
name|element
argument_list|,
name|entryCount
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|multiset
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * An implementation of {@link Multiset#iterator}.    */
DECL|method|iteratorImpl (Multiset<E> multiset)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterator
argument_list|<
name|E
argument_list|>
name|iteratorImpl
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|)
block|{
return|return
operator|new
name|MultisetIteratorImpl
argument_list|<
name|E
argument_list|>
argument_list|(
name|multiset
argument_list|,
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MultisetIteratorImpl
specifier|static
specifier|final
class|class
name|MultisetIteratorImpl
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|multiset
specifier|private
specifier|final
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
decl_stmt|;
DECL|field|entryIterator
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
decl_stmt|;
DECL|field|currentEntry
specifier|private
name|Entry
argument_list|<
name|E
argument_list|>
name|currentEntry
decl_stmt|;
comment|/** Count of subsequent elements equal to current element */
DECL|field|laterCount
specifier|private
name|int
name|laterCount
decl_stmt|;
comment|/** Count of all elements equal to current element */
DECL|field|totalCount
specifier|private
name|int
name|totalCount
decl_stmt|;
DECL|field|canRemove
specifier|private
name|boolean
name|canRemove
decl_stmt|;
DECL|method|MultisetIteratorImpl (Multiset<E> multiset, Iterator<Entry<E>> entryIterator)
name|MultisetIteratorImpl
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|)
block|{
name|this
operator|.
name|multiset
operator|=
name|multiset
expr_stmt|;
name|this
operator|.
name|entryIterator
operator|=
name|entryIterator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|laterCount
operator|>
literal|0
operator|||
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|laterCount
operator|==
literal|0
condition|)
block|{
name|currentEntry
operator|=
name|entryIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|totalCount
operator|=
name|laterCount
operator|=
name|currentEntry
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|laterCount
operator|--
expr_stmt|;
name|canRemove
operator|=
literal|true
expr_stmt|;
return|return
name|currentEntry
operator|.
name|getElement
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkRemove
argument_list|(
name|canRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCount
operator|==
literal|1
condition|)
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|multiset
operator|.
name|remove
argument_list|(
name|currentEntry
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|--
expr_stmt|;
name|canRemove
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * An implementation of {@link Multiset#size}.    */
DECL|method|sizeImpl (Multiset<?> multiset)
specifier|static
name|int
name|sizeImpl
parameter_list|(
name|Multiset
argument_list|<
name|?
argument_list|>
name|multiset
parameter_list|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|multiset
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|size
operator|+=
name|entry
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
return|return
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/**    * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557    */
DECL|method|cast (Iterable<T> iterable)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Multiset
argument_list|<
name|T
argument_list|>
name|cast
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|(
name|Multiset
argument_list|<
name|T
argument_list|>
operator|)
name|iterable
return|;
block|}
comment|/**    * Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order is    * highest count first, with ties broken by the iteration order of the original multiset.    *    * @since 11.0    */
annotation|@
name|Beta
DECL|method|copyHighestCountFirst (Multiset<E> multiset)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ImmutableMultiset
argument_list|<
name|E
argument_list|>
name|copyHighestCountFirst
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|)
block|{
name|Entry
argument_list|<
name|E
argument_list|>
index|[]
name|entries
init|=
operator|(
name|Entry
argument_list|<
name|E
argument_list|>
index|[]
operator|)
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
name|DecreasingCount
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return
name|ImmutableMultiset
operator|.
name|copyFromEntries
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
argument_list|)
return|;
block|}
DECL|class|DecreasingCount
specifier|private
specifier|static
specifier|final
class|class
name|DecreasingCount
implements|implements
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|DecreasingCount
name|INSTANCE
init|=
operator|new
name|DecreasingCount
argument_list|()
decl_stmt|;
DECL|method|compare (Entry<?> entry1, Entry<?> entry2)
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry1
parameter_list|,
name|Entry
argument_list|<
name|?
argument_list|>
name|entry2
parameter_list|)
block|{
return|return
name|entry2
operator|.
name|getCount
argument_list|()
operator|-
name|entry1
operator|.
name|getCount
argument_list|()
return|;
comment|// subtracting two nonnegative integers
block|}
block|}
block|}
end_class

end_unit

