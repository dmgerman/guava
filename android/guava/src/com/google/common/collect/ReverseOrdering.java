begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** An ordering that uses the reverse of a given order. */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|ReverseOrdering
name|final
name|class
name|ReverseOrdering
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|Ordering
argument_list|<
name|T
argument_list|>
expr|implements
name|Serializable
block|{
DECL|field|forwardOrder
name|final
name|Ordering
argument_list|<
name|?
super|super
name|T
argument_list|>
name|forwardOrder
block|;
DECL|method|ReverseOrdering (Ordering<? super T> forwardOrder)
name|ReverseOrdering
argument_list|(
name|Ordering
argument_list|<
name|?
super|super
name|T
argument_list|>
name|forwardOrder
argument_list|)
block|{
name|this
operator|.
name|forwardOrder
operator|=
name|checkNotNull
argument_list|(
name|forwardOrder
argument_list|)
block|;   }
expr|@
name|Override
DECL|method|compare (@arametricNullness T a, @ParametricNullness T b)
specifier|public
name|int
name|compare
argument_list|(
annotation|@
name|ParametricNullness
name|T
name|a
argument_list|,
annotation|@
name|ParametricNullness
name|T
name|b
argument_list|)
block|{
return|return
name|forwardOrder
operator|.
name|compare
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
return|;
block|}
expr|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// how to explain?
expr|@
name|Override
DECL|method|reverse ()
specifier|public
operator|<
name|S
expr|extends
name|T
operator|>
name|Ordering
argument_list|<
name|S
argument_list|>
name|reverse
argument_list|()
block|{
return|return
operator|(
name|Ordering
argument_list|<
name|S
argument_list|>
operator|)
name|forwardOrder
return|;
block|}
end_expr_stmt

begin_comment
comment|// Override the min/max methods to "hoist" delegation outside loops
end_comment

begin_function
annotation|@
name|Override
DECL|method|min (@arametricNullness E a, @ParametricNullness E b)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|min
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|a
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|b
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|min ( @arametricNullness E a, @ParametricNullness E b, @ParametricNullness E c, E... rest)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|min
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|a
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|b
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|c
parameter_list|,
name|E
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|rest
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|min (Iterator<E> iterator)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|min
parameter_list|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|max
argument_list|(
name|iterator
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|min (Iterable<E> iterable)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|min
parameter_list|(
name|Iterable
argument_list|<
name|E
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|max
argument_list|(
name|iterable
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|max (@arametricNullness E a, @ParametricNullness E b)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|max
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|a
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|b
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|max ( @arametricNullness E a, @ParametricNullness E b, @ParametricNullness E c, E... rest)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|max
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|a
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|b
parameter_list|,
annotation|@
name|ParametricNullness
name|E
name|c
parameter_list|,
name|E
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|rest
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|max (Iterator<E> iterator)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|max
parameter_list|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|min
argument_list|(
name|iterator
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|max (Iterable<E> iterable)
specifier|public
parameter_list|<
name|E
extends|extends
name|T
parameter_list|>
name|E
name|max
parameter_list|(
name|Iterable
argument_list|<
name|E
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
name|forwardOrder
operator|.
name|min
argument_list|(
name|iterable
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|-
name|forwardOrder
operator|.
name|hashCode
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|equals (@heckForNull Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|ReverseOrdering
condition|)
block|{
name|ReverseOrdering
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|ReverseOrdering
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|forwardOrder
operator|.
name|equals
argument_list|(
name|that
operator|.
name|forwardOrder
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|forwardOrder
operator|+
literal|".reverse()"
return|;
block|}
end_function

begin_decl_stmt
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

unit|}
end_unit

