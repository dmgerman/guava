begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Similar to {@link TransformedIterator}, this iterator transforms a backing iterator.  * However, rather than enforcing a one-to-one mapping, each element in the backing iterator  * can be transformed into an arbitrary number of elements (i.e. a one-to-many mapping).  *  * @author James Sexton  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MultitransformedIterator
specifier|abstract
class|class
name|MultitransformedIterator
parameter_list|<
name|F
parameter_list|,
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|backingIterator
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|F
argument_list|>
name|backingIterator
decl_stmt|;
DECL|field|current
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|current
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
DECL|field|removeFrom
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|removeFrom
decl_stmt|;
DECL|method|MultitransformedIterator (Iterator<? extends F> backingIterator)
name|MultitransformedIterator
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|F
argument_list|>
name|backingIterator
parameter_list|)
block|{
name|this
operator|.
name|backingIterator
operator|=
name|checkNotNull
argument_list|(
name|backingIterator
argument_list|)
expr_stmt|;
block|}
DECL|method|transform (F from)
specifier|abstract
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|transform
parameter_list|(
name|F
name|from
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|current
argument_list|)
expr_stmt|;
comment|// eager for GWT
if|if
condition|(
name|current
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
while|while
condition|(
name|backingIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// checkNotNull the assignment, so that current is null even if the exception is caught
name|checkNotNull
argument_list|(
name|current
operator|=
name|transform
argument_list|(
name|backingIterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|removeFrom
operator|=
name|current
expr_stmt|;
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkRemove
argument_list|(
name|removeFrom
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|removeFrom
operator|.
name|remove
argument_list|()
expr_stmt|;
name|removeFrom
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

