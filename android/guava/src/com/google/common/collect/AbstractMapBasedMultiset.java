begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkNonnegative
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Basic implementation of {@code Multiset<E>} backed by an instance of {@code  * ObjectCountHashMap<E>}.  *  *<p>For serialization to work, the subclass must specify explicit {@code readObject} and {@code  * writeObject} methods.  *  * @author Kevin Bourrillion  */
end_comment

begin_annotation
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
end_annotation

begin_annotation
annotation|@
name|ElementTypesAreNonnullByDefault
end_annotation

begin_expr_stmt
DECL|class|AbstractMapBasedMultiset
specifier|abstract
name|class
name|AbstractMapBasedMultiset
operator|<
name|E
expr|extends @
name|Nullable
name|Object
operator|>
expr|extends
name|AbstractMultiset
argument_list|<
name|E
argument_list|>
expr|implements
name|Serializable
block|{
DECL|field|backingMap
specifier|transient
name|ObjectCountHashMap
argument_list|<
name|E
argument_list|>
name|backingMap
block|;
DECL|field|size
specifier|transient
name|long
name|size
block|;
DECL|method|AbstractMapBasedMultiset (int distinctElements)
name|AbstractMapBasedMultiset
argument_list|(
name|int
name|distinctElements
argument_list|)
block|{
name|backingMap
operator|=
name|newBackingMap
argument_list|(
name|distinctElements
argument_list|)
block|;   }
DECL|method|newBackingMap (int distinctElements)
specifier|abstract
name|ObjectCountHashMap
argument_list|<
name|E
argument_list|>
name|newBackingMap
argument_list|(
name|int
name|distinctElements
argument_list|)
block|;    @
name|Override
DECL|method|count (@heckForNull Object element)
specifier|public
name|final
name|int
name|count
argument_list|(
annotation|@
name|CheckForNull
name|Object
name|element
argument_list|)
block|{
return|return
name|backingMap
operator|.
name|get
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|// Optional Operations - Modification Operations
comment|/**    * {@inheritDoc}    *    * @throws IllegalArgumentException if the call would result in more than {@link    *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.    */
expr|@
name|CanIgnoreReturnValue
expr|@
name|Override
DECL|method|add (@arametricNullness E element, int occurrences)
specifier|public
name|final
name|int
name|add
argument_list|(
annotation|@
name|ParametricNullness
name|E
name|element
argument_list|,
name|int
name|occurrences
argument_list|)
block|{
if|if
condition|(
name|occurrences
operator|==
literal|0
condition|)
block|{
return|return
name|count
argument_list|(
name|element
argument_list|)
return|;
block|}
name|checkArgument
argument_list|(
name|occurrences
operator|>
literal|0
argument_list|,
literal|"occurrences cannot be negative: %s"
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|int
name|entryIndex
init|=
name|backingMap
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|entryIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|backingMap
operator|.
name|put
argument_list|(
name|element
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
name|size
operator|+=
name|occurrences
expr_stmt|;
return|return
literal|0
return|;
block|}
end_if

begin_decl_stmt
name|int
name|oldCount
init|=
name|backingMap
operator|.
name|getValue
argument_list|(
name|entryIndex
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|long
name|newCount
init|=
operator|(
name|long
operator|)
name|oldCount
operator|+
operator|(
name|long
operator|)
name|occurrences
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|checkArgument
argument_list|(
name|newCount
operator|<=
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"too many occurrences: %s"
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|backingMap
operator|.
name|setValue
argument_list|(
name|entryIndex
argument_list|,
operator|(
name|int
operator|)
name|newCount
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|size
operator|+=
name|occurrences
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|oldCount
return|;
end_return

begin_function
unit|}    @
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|remove (@heckForNull Object element, int occurrences)
specifier|public
specifier|final
name|int
name|remove
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|element
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
if|if
condition|(
name|occurrences
operator|==
literal|0
condition|)
block|{
return|return
name|count
argument_list|(
name|element
argument_list|)
return|;
block|}
name|checkArgument
argument_list|(
name|occurrences
operator|>
literal|0
argument_list|,
literal|"occurrences cannot be negative: %s"
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
name|int
name|entryIndex
init|=
name|backingMap
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|oldCount
init|=
name|backingMap
operator|.
name|getValue
argument_list|(
name|entryIndex
argument_list|)
decl_stmt|;
name|int
name|numberRemoved
decl_stmt|;
if|if
condition|(
name|oldCount
operator|>
name|occurrences
condition|)
block|{
name|numberRemoved
operator|=
name|occurrences
expr_stmt|;
name|backingMap
operator|.
name|setValue
argument_list|(
name|entryIndex
argument_list|,
name|oldCount
operator|-
name|occurrences
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numberRemoved
operator|=
name|oldCount
expr_stmt|;
name|backingMap
operator|.
name|removeEntry
argument_list|(
name|entryIndex
argument_list|)
expr_stmt|;
block|}
name|size
operator|-=
name|numberRemoved
expr_stmt|;
return|return
name|oldCount
return|;
block|}
end_function

begin_function
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|setCount (@arametricNullness E element, int count)
specifier|public
specifier|final
name|int
name|setCount
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|count
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|int
name|oldCount
init|=
operator|(
name|count
operator|==
literal|0
operator|)
condition|?
name|backingMap
operator|.
name|remove
argument_list|(
name|element
argument_list|)
else|:
name|backingMap
operator|.
name|put
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|size
operator|+=
operator|(
name|count
operator|-
name|oldCount
operator|)
expr_stmt|;
return|return
name|oldCount
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setCount (@arametricNullness E element, int oldCount, int newCount)
specifier|public
specifier|final
name|boolean
name|setCount
parameter_list|(
annotation|@
name|ParametricNullness
name|E
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
name|checkNonnegative
argument_list|(
name|oldCount
argument_list|,
literal|"oldCount"
argument_list|)
expr_stmt|;
name|checkNonnegative
argument_list|(
name|newCount
argument_list|,
literal|"newCount"
argument_list|)
expr_stmt|;
name|int
name|entryIndex
init|=
name|backingMap
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|oldCount
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|newCount
operator|>
literal|0
condition|)
block|{
name|backingMap
operator|.
name|put
argument_list|(
name|element
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
name|size
operator|+=
name|newCount
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|int
name|actualOldCount
init|=
name|backingMap
operator|.
name|getValue
argument_list|(
name|entryIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualOldCount
operator|!=
name|oldCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|newCount
operator|==
literal|0
condition|)
block|{
name|backingMap
operator|.
name|removeEntry
argument_list|(
name|entryIndex
argument_list|)
expr_stmt|;
name|size
operator|-=
name|oldCount
expr_stmt|;
block|}
else|else
block|{
name|backingMap
operator|.
name|setValue
argument_list|(
name|entryIndex
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
name|size
operator|+=
name|newCount
operator|-
name|oldCount
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|clear ()
specifier|public
specifier|final
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Skeleton of per-entry iterators. We could push this down and win a few bytes, but it's complex    * enough it's not especially worth it.    */
end_comment

begin_expr_stmt
DECL|class|Itr
specifier|abstract
name|class
name|Itr
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
expr|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|entryIndex
name|int
name|entryIndex
operator|=
name|backingMap
operator|.
name|firstIndex
argument_list|()
block|;
DECL|field|toRemove
name|int
name|toRemove
operator|=
operator|-
literal|1
block|;
DECL|field|expectedModCount
name|int
name|expectedModCount
operator|=
name|backingMap
operator|.
name|modCount
block|;      @
name|ParametricNullness
DECL|method|result (int entryIndex)
specifier|abstract
name|T
name|result
argument_list|(
name|int
name|entryIndex
argument_list|)
block|;
DECL|method|checkForConcurrentModification ()
specifier|private
name|void
name|checkForConcurrentModification
argument_list|()
block|{
if|if
condition|(
name|backingMap
operator|.
name|modCount
operator|!=
name|expectedModCount
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
expr|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
argument_list|()
block|{
name|checkForConcurrentModification
argument_list|()
block|;
return|return
name|entryIndex
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
annotation|@
name|ParametricNullness
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|T
name|result
init|=
name|result
argument_list|(
name|entryIndex
argument_list|)
decl_stmt|;
name|toRemove
operator|=
name|entryIndex
expr_stmt|;
name|entryIndex
operator|=
name|backingMap
operator|.
name|nextIndex
argument_list|(
name|entryIndex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
name|CollectPreconditions
operator|.
name|checkRemove
argument_list|(
name|toRemove
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|size
operator|-=
name|backingMap
operator|.
name|removeEntry
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
name|entryIndex
operator|=
name|backingMap
operator|.
name|nextIndexAfterRemove
argument_list|(
name|entryIndex
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
name|toRemove
operator|=
operator|-
literal|1
expr_stmt|;
name|expectedModCount
operator|=
name|backingMap
operator|.
name|modCount
expr_stmt|;
block|}
end_function

begin_function
unit|}    @
name|Override
DECL|method|elementIterator ()
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|elementIterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|ParametricNullness
name|E
name|result
parameter_list|(
name|int
name|entryIndex
parameter_list|)
block|{
return|return
name|backingMap
operator|.
name|getKey
argument_list|(
name|entryIndex
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|entryIterator ()
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|E
argument_list|>
name|result
parameter_list|(
name|int
name|entryIndex
parameter_list|)
block|{
return|return
name|backingMap
operator|.
name|getEntry
argument_list|(
name|entryIndex
argument_list|)
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/** Allocation-free implementation of {@code target.addAll(this)}. */
end_comment

begin_function
DECL|method|addTo (Multiset<? super E> target)
name|void
name|addTo
parameter_list|(
name|Multiset
argument_list|<
name|?
super|super
name|E
argument_list|>
name|target
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|backingMap
operator|.
name|firstIndex
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|backingMap
operator|.
name|nextIndex
argument_list|(
name|i
argument_list|)
control|)
block|{
name|target
operator|.
name|add
argument_list|(
name|backingMap
operator|.
name|getKey
argument_list|(
name|i
argument_list|)
argument_list|,
name|backingMap
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|distinctElements ()
specifier|final
name|int
name|distinctElements
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Multisets
operator|.
name|iteratorImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|size ()
specifier|public
specifier|final
name|int
name|size
parameter_list|()
block|{
return|return
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|size
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @serialData the number of distinct elements, the first element, its count, the second element,    *     its count, and so on    */
end_comment

begin_function
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectOutputStream
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|Serialization
operator|.
name|writeMultiset
argument_list|(
name|this
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectInputStream
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|int
name|distinctElements
init|=
name|Serialization
operator|.
name|readCount
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|backingMap
operator|=
name|newBackingMap
argument_list|(
name|ObjectCountHashMap
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|Serialization
operator|.
name|populateMultiset
argument_list|(
name|this
argument_list|,
name|stream
argument_list|,
name|distinctElements
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
annotation|@
name|GwtIncompatible
comment|// Not needed in emulated source.
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
end_decl_stmt

unit|}
end_unit

