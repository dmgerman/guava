begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkPositive
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** EnumCountHashMap is an implementation of {@code AbstractObjectCountMap} with enum type keys. */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|EnumCountHashMap
specifier|public
class|class
name|EnumCountHashMap
parameter_list|<
name|K
extends|extends
name|Enum
parameter_list|<
name|K
parameter_list|>
parameter_list|>
extends|extends
name|AbstractObjectCountMap
argument_list|<
name|K
argument_list|>
block|{
comment|/** Creates an empty {@code EnumCountHashMap} instance. */
DECL|method|create (Class<K> type)
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Enum
argument_list|<
name|K
argument_list|>
parameter_list|>
name|EnumCountHashMap
argument_list|<
name|K
argument_list|>
name|create
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|EnumCountHashMap
argument_list|<
name|K
argument_list|>
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|field|keyType
specifier|private
specifier|final
name|Class
argument_list|<
name|K
argument_list|>
name|keyType
decl_stmt|;
comment|/** Constructs a new empty instance of {@code EnumCountHashMap}. */
DECL|method|EnumCountHashMap (Class<K> keyType)
name|EnumCountHashMap
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keyType
operator|.
name|getEnumConstants
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|keys
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected Enum class type, but got "
operator|+
name|keyType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|values
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keys
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|keys
operator|.
name|length
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|firstIndex ()
name|int
name|firstIndex
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|>
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|nextIndex (int index)
name|int
name|nextIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|index
operator|+
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|>
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|class|EnumIterator
specifier|private
specifier|abstract
class|class
name|EnumIterator
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Itr
argument_list|<
name|T
argument_list|>
block|{
DECL|field|nextIndex
name|int
name|nextIndex
init|=
name|UNSET
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
while|while
condition|(
name|index
operator|<
name|values
operator|.
name|length
operator|&&
name|values
index|[
name|index
index|]
operator|<=
literal|0
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
return|return
name|index
operator|!=
name|values
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|nextCalled
operator|=
literal|true
expr_stmt|;
name|nextIndex
operator|=
name|index
expr_stmt|;
return|return
name|getOutput
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForConcurrentModification
argument_list|()
expr_stmt|;
name|checkRemove
argument_list|(
name|nextCalled
argument_list|)
expr_stmt|;
name|expectedModCount
operator|++
expr_stmt|;
name|removeEntry
argument_list|(
name|nextIndex
argument_list|)
expr_stmt|;
name|nextCalled
operator|=
literal|false
expr_stmt|;
name|nextIndex
operator|=
name|UNSET
expr_stmt|;
name|index
operator|--
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createKeySet ()
name|Set
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
operator|new
name|KeySetView
argument_list|()
block|{
specifier|private
name|Object
index|[]
name|getFilteredKeyArray
parameter_list|()
block|{
name|Object
index|[]
name|filteredKeys
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|!=
name|UNSET
condition|)
block|{
name|filteredKeys
index|[
name|j
operator|++
index|]
operator|=
name|keys
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|filteredKeys
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|getFilteredKeyArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|getFilteredKeyArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EnumIterator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
name|K
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
operator|(
name|K
operator|)
name|keys
index|[
name|entry
index|]
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getEntry (int index)
name|Multiset
operator|.
name|Entry
argument_list|<
name|K
argument_list|>
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkElementIndex
argument_list|(
name|index
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
operator|new
name|EnumMapEntry
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|class|EnumMapEntry
class|class
name|EnumMapEntry
extends|extends
name|MapEntry
block|{
DECL|method|EnumMapEntry (int index)
name|EnumMapEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|values
index|[
name|lastKnownIndex
index|]
operator|==
name|UNSET
condition|?
literal|0
else|:
name|values
index|[
name|lastKnownIndex
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|setCount (int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|values
index|[
name|lastKnownIndex
index|]
operator|==
name|UNSET
condition|)
block|{
name|put
argument_list|(
name|key
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|int
name|old
init|=
name|values
index|[
name|lastKnownIndex
index|]
decl_stmt|;
name|values
index|[
name|lastKnownIndex
index|]
operator|=
name|count
expr_stmt|;
return|return
name|old
operator|==
name|UNSET
condition|?
literal|0
else|:
name|old
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySetView
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EnumIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|K
argument_list|>
name|getOutput
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
operator|new
name|EnumMapEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|modCount
operator|++
expr_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** Returns true if key is of the proper type to be a key in this enum map. */
DECL|method|isValidKey (Object key)
specifier|private
name|boolean
name|isValidKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// Cheaper than instanceof Enum followed by getDeclaringClass
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
init|=
name|key
operator|.
name|getClass
argument_list|()
decl_stmt|;
return|return
name|keyClass
operator|==
name|keyType
operator|||
name|keyClass
operator|.
name|getSuperclass
argument_list|()
operator|==
name|keyType
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullable Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|isValidKey
argument_list|(
name|key
argument_list|)
operator|&&
name|values
index|[
operator|(
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|ordinal
argument_list|()
index|]
operator|!=
name|UNSET
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullable Object key)
specifier|public
name|int
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsKey
argument_list|(
name|key
argument_list|)
condition|?
name|values
index|[
operator|(
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|ordinal
argument_list|()
index|]
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|indexOf (@ullable Object key)
name|int
name|indexOf
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValidKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|ordinal
argument_list|()
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|removeEntry (int entryIndex)
name|int
name|removeEntry
parameter_list|(
name|int
name|entryIndex
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|keys
index|[
name|entryIndex
index|]
argument_list|)
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|put (@ullable K key, int value)
specifier|public
name|int
name|put
parameter_list|(
annotation|@
name|Nullable
name|K
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|checkPositive
argument_list|(
name|value
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|typeCheck
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|key
operator|.
name|ordinal
argument_list|()
decl_stmt|;
name|int
name|oldValue
init|=
name|values
index|[
name|index
index|]
decl_stmt|;
name|values
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
if|if
condition|(
name|oldValue
operator|==
name|UNSET
condition|)
block|{
name|size
operator|++
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|oldValue
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|remove (@ullable Object key)
specifier|public
name|int
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValidKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|index
init|=
operator|(
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|ordinal
argument_list|()
decl_stmt|;
name|int
name|oldValue
init|=
name|values
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
name|UNSET
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|values
index|[
name|index
index|]
operator|=
name|UNSET
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
comment|/** Throws an exception if key is not of the correct type for this enum set. */
DECL|method|typeCheck (K key)
specifier|private
name|void
name|typeCheck
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
init|=
name|key
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyClass
operator|!=
name|keyType
operator|&&
name|keyClass
operator|.
name|getSuperclass
argument_list|()
operator|!=
name|keyType
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|keyClass
operator|+
literal|" != "
operator|+
name|keyType
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|+=
name|keys
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
operator|^
name|values
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
block|}
end_class

end_unit

