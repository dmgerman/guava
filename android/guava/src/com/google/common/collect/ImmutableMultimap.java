begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkEntryNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|Weak
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * A {@link Multimap} whose contents will never change, with many other important properties  * detailed at {@link ImmutableCollection}.  *  *<p><b>Warning:</b> avoid<i>direct</i> usage of {@link ImmutableMultimap} as a type (as with  * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link  * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common  * source of bugs and confusion.  *  *<p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no  * need for a distinct {@code ImmutableBiMultimap} type.  *  *<p><a name="iteration"></a>  *  *<p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all  * current implementations, the iteration order always keeps multiple entries with the same key  * together. Any creation method that would customarily respect insertion order (such as {@link  * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key  * immediately after the last entry having that key.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.  *  * @author Jared Levy  * @since 2.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableMultimap
specifier|public
specifier|abstract
class|class
name|ImmutableMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
comment|/** Returns an empty multimap. */
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
return|;
block|}
comment|/** Returns an immutable multimap containing a single entry. */
DECL|method|of (K k1, V v1)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
return|;
block|}
comment|/** Returns an immutable multimap containing the given entries, in order. */
DECL|method|of (K k1, V v1, K k2, V v2)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|,
name|k2
argument_list|,
name|v2
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable multimap containing the given entries, in the "key-grouped" insertion    * order described in the<a href="#iteration">class documentation</a>.    */
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|,
name|k2
argument_list|,
name|v2
argument_list|,
name|k3
argument_list|,
name|v3
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable multimap containing the given entries, in the "key-grouped" insertion    * order described in the<a href="#iteration">class documentation</a>.    */
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|,
name|k2
argument_list|,
name|v2
argument_list|,
name|k3
argument_list|,
name|v3
argument_list|,
name|k4
argument_list|,
name|v4
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable multimap containing the given entries, in the "key-grouped" insertion    * order described in the<a href="#iteration">class documentation</a>.    */
DECL|method|of ( K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|,
name|K
name|k5
parameter_list|,
name|V
name|v5
parameter_list|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|,
name|k2
argument_list|,
name|v2
argument_list|,
name|k3
argument_list|,
name|v3
argument_list|,
name|k4
argument_list|,
name|v4
argument_list|,
name|k5
argument_list|,
name|v5
argument_list|)
return|;
block|}
comment|// looking for of() with> 5 entries? Use the builder instead.
comment|/**    * Returns a new builder. The generated builder is equivalent to the builder created by the {@link    * Builder} constructor.    */
DECL|method|builder ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<>
argument_list|()
return|;
block|}
comment|/**    * A builder for creating immutable multimap instances, especially {@code public static final}    * multimaps ("constant multimaps"). Example:    *    *<pre>{@code    * static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =    *     new ImmutableMultimap.Builder<String, Integer>()    *         .put("one", 1)    *         .putAll("several", 1, 2, 3)    *         .putAll("many", 1, 2, 3, 4, 5)    *         .build();    * }</pre>    *    *<p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build    * multiple multimaps in series. Each multimap contains the key-value mappings in the previously    * created multimaps.    *    * @since 2.0    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|builderMultimap
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builderMultimap
decl_stmt|;
DECL|field|keyComparator
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
decl_stmt|;
DECL|field|valueComparator
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
decl_stmt|;
comment|/**      * Creates a new builder. The returned builder is equivalent to the builder generated by {@link      * ImmutableMultimap#builder}.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
argument_list|(
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
operator|<
name|K
argument_list|,
name|V
operator|>
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder (Multimap<K, V> builderMultimap)
name|Builder
parameter_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builderMultimap
parameter_list|)
block|{
name|this
operator|.
name|builderMultimap
operator|=
name|builderMultimap
expr_stmt|;
block|}
comment|/** Adds a key-value mapping to the built multimap. */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (K key, V value)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builderMultimap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an entry to the built multimap.      *      * @since 11.0      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (Entry<? extends K, ? extends V> entry)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Adds entries to the built multimap.      *      * @since 19.0      */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Beta
DECL|method|putAll (Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Stores a collection of values with the same key in the built multimap.      *      * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}      *     is null. The builder is left in an invalid state.      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|putAll (K key, Iterable<? extends V> values)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null key in entry: null="
operator|+
name|Iterables
operator|.
name|toString
argument_list|(
name|values
argument_list|)
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|V
argument_list|>
name|valueList
init|=
name|builderMultimap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|V
name|value
range|:
name|values
control|)
block|{
name|checkEntryNotNull
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|valueList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Stores an array of values with the same key in the built multimap.      *      * @throws NullPointerException if the key or any value is null. The builder is left in an      *     invalid state.      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|putAll (K key, V... values)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|K
name|key
parameter_list|,
name|V
modifier|...
name|values
parameter_list|)
block|{
return|return
name|putAll
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Stores another multimap's entries in the built multimap. The generated multimap's key and      * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,      * with new keys and values following any existing keys and values.      *      * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is      *     left in an invalid state.      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|putAll (Multimap<? extends K, ? extends V> multimap)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|putAll
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Specifies the ordering of the generated multimap's keys.      *      * @since 8.0      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|orderKeysBy (Comparator<? super K> keyComparator)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|orderKeysBy
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
parameter_list|)
block|{
name|this
operator|.
name|keyComparator
operator|=
name|checkNotNull
argument_list|(
name|keyComparator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies the ordering of the generated multimap's values for each key.      *      * @since 8.0      */
annotation|@
name|CanIgnoreReturnValue
DECL|method|orderValuesBy (Comparator<? super V> valueComparator)
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|orderValuesBy
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|)
block|{
name|this
operator|.
name|valueComparator
operator|=
name|checkNotNull
argument_list|(
name|valueComparator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Returns a newly-created immutable multimap. */
DECL|method|build ()
specifier|public
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
if|if
condition|(
name|valueComparator
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Collection
argument_list|<
name|V
argument_list|>
name|values
range|:
name|builderMultimap
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|V
argument_list|>
operator|)
name|values
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|valueComparator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyComparator
operator|!=
literal|null
condition|)
block|{
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedCopy
init|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
operator|<
name|K
decl_stmt|,
name|V
decl|>
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|keyComparator
argument_list|)
operator|.
operator|<
name|K
operator|>
name|onKeys
argument_list|()
operator|.
name|immutableSortedCopy
argument_list|(
name|builderMultimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|sortedCopy
operator|.
name|putAll
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builderMultimap
operator|=
name|sortedCopy
expr_stmt|;
block|}
return|return
name|copyOf
argument_list|(
name|builderMultimap
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns an immutable multimap containing the same mappings as {@code multimap}, in the    * "key-grouped" iteration order described in the class documentation.    *    *<p>Despite the method name, this method attempts to avoid actually copying the data when it is    * safe to do so. The exact circumstances under which a copy will or will not be performed are    * undocumented and subject to change.    *    * @throws NullPointerException if any key or value in {@code multimap} is null    */
DECL|method|copyOf (Multimap<? extends K, ? extends V> multimap)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|ImmutableMultimap
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe since multimap is not writable
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvMultimap
init|=
operator|(
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|multimap
decl_stmt|;
if|if
condition|(
operator|!
name|kvMultimap
operator|.
name|isPartialView
argument_list|()
condition|)
block|{
return|return
name|kvMultimap
return|;
block|}
block|}
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|multimap
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable multimap containing the specified entries. The returned multimap iterates    * over keys in the order they were first encountered in the input, and the values for each key    * are iterated in the order they were encountered.    *    * @throws NullPointerException if any key, value, or entry is null    * @since 19.0    */
annotation|@
name|Beta
DECL|method|copyOf ( Iterable<? extends Entry<? extends K, ? extends V>> entries)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|)
return|;
block|}
DECL|field|map
specifier|final
specifier|transient
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
decl_stmt|;
DECL|field|size
specifier|final
specifier|transient
name|int
name|size
decl_stmt|;
comment|// These constants allow the deserialization code to set final fields. This
comment|// holder class makes sure they are not initialized unless an instance is
comment|// deserialized.
annotation|@
name|GwtIncompatible
comment|// java serialization is not supported
DECL|class|FieldSettersHolder
specifier|static
class|class
name|FieldSettersHolder
block|{
DECL|field|MAP_FIELD_SETTER
specifier|static
specifier|final
name|Serialization
operator|.
name|FieldSetter
argument_list|<
name|ImmutableMultimap
argument_list|>
name|MAP_FIELD_SETTER
init|=
name|Serialization
operator|.
name|getFieldSetter
argument_list|(
name|ImmutableMultimap
operator|.
name|class
argument_list|,
literal|"map"
argument_list|)
decl_stmt|;
DECL|field|SIZE_FIELD_SETTER
specifier|static
specifier|final
name|Serialization
operator|.
name|FieldSetter
argument_list|<
name|ImmutableMultimap
argument_list|>
name|SIZE_FIELD_SETTER
init|=
name|Serialization
operator|.
name|getFieldSetter
argument_list|(
name|ImmutableMultimap
operator|.
name|class
argument_list|,
literal|"size"
argument_list|)
decl_stmt|;
block|}
DECL|method|ImmutableMultimap (ImmutableMap<K, ? extends ImmutableCollection<V>> map, int size)
name|ImmutableMultimap
parameter_list|(
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|// mutators (not supported)
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|removeAll (Object key)
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Returns an immutable collection of the values for the given key. If no mappings in the multimap    * have the provided key, an empty immutable collection is returned. The values are in the same    * order as the parameters used to build this multimap.    */
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
specifier|abstract
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
function_decl|;
comment|/**    * Returns an immutable multimap which is the inverse of this one. For every key-value mapping in    * the original, the result will have a mapping with key and value reversed.    *    * @since 11.0    */
DECL|method|inverse ()
specifier|public
specifier|abstract
name|ImmutableMultimap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
function_decl|;
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|boolean
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|putAll (K key, Iterable<? extends V> values)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|putAll (Multimap<? extends K, ? extends V> multimap)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Guaranteed to throw an exception and leave the multimap unmodified.    *    * @throws UnsupportedOperationException always    * @deprecated Unsupported operation.    */
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|remove (Object key, Object value)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Returns {@code true} if this immutable multimap's implementation contains references to    * user-created objects that aren't accessible via this multimap's methods. This is generally used    * to determine whether {@code copyOf} implementations should make an explicit copy to avoid    * memory leaks.    */
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|map
operator|.
name|isPartialView
argument_list|()
return|;
block|}
comment|// accessors
annotation|@
name|Override
DECL|method|containsKey (@ullableDecl Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullableDecl Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|super
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|// views
comment|/**    * Returns an immutable set of the distinct keys in this multimap, in the same order as they    * appear in this multimap.    */
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable map that associates each key with its corresponding values in the    * multimap. Keys and values appear in the same order as in this multimap.    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// a widening cast
DECL|method|asMap ()
specifier|public
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
operator|(
name|ImmutableMap
operator|)
name|map
return|;
block|}
annotation|@
name|Override
DECL|method|createAsMap ()
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|createAsMap
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should never be called"
argument_list|)
throw|;
block|}
comment|/** Returns an immutable collection of all key-value pairs in the multimap. */
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|ImmutableCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
return|return
operator|(
name|ImmutableCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
operator|)
name|super
operator|.
name|entries
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createEntries ()
name|ImmutableCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntries
parameter_list|()
block|{
return|return
operator|new
name|EntryCollection
argument_list|<>
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|class|EntryCollection
specifier|private
specifier|static
class|class
name|EntryCollection
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableCollection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|multimap
annotation|@
name|Weak
specifier|final
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
decl_stmt|;
DECL|method|EntryCollection (ImmutableMultimap<K, V> multimap)
name|EntryCollection
parameter_list|(
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
name|this
operator|.
name|multimap
operator|=
name|multimap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|entryIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|isPartialView
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|multimap
operator|.
name|containsEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|Itr
specifier|private
specifier|abstract
class|class
name|Itr
parameter_list|<
name|T
parameter_list|>
extends|extends
name|UnmodifiableIterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|mapIterator
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|mapIterator
init|=
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|key
name|K
name|key
init|=
literal|null
decl_stmt|;
DECL|field|valueIterator
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueIterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
DECL|method|output (K key, V value)
specifier|abstract
name|T
name|output
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|mapIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|valueIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|valueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|mapEntry
init|=
name|mapIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|mapEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|valueIterator
operator|=
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|output
argument_list|(
name|key
argument_list|,
name|valueIterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns an immutable multiset containing all the keys in this multimap, in the same order and    * with the same frequencies as they appear in this multimap; to get only a single occurrence of    * each key, use {@link #keySet}.    */
annotation|@
name|Override
DECL|method|keys ()
specifier|public
name|ImmutableMultiset
argument_list|<
name|K
argument_list|>
name|keys
parameter_list|()
block|{
return|return
operator|(
name|ImmutableMultiset
argument_list|<
name|K
argument_list|>
operator|)
name|super
operator|.
name|keys
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createKeys ()
name|ImmutableMultiset
argument_list|<
name|K
argument_list|>
name|createKeys
parameter_list|()
block|{
return|return
operator|new
name|Keys
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// Uses writeReplace, not default serialization
annotation|@
name|WeakOuter
DECL|class|Keys
class|class
name|Keys
extends|extends
name|ImmutableMultiset
argument_list|<
name|K
argument_list|>
block|{
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|object
parameter_list|)
block|{
return|return
name|containsKey
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|count (@ullableDecl Object element)
specifier|public
name|int
name|count
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|element
parameter_list|)
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|values
init|=
name|map
operator|.
name|get
argument_list|(
name|element
argument_list|)
decl_stmt|;
return|return
operator|(
name|values
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|values
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|elementSet
parameter_list|()
block|{
return|return
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|ImmutableMultimap
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEntry (int index)
name|Multiset
operator|.
name|Entry
argument_list|<
name|K
argument_list|>
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Returns an immutable collection of the values in this multimap. Its iterator traverses the    * values for the first key, the values for the second key, and so on.    */
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|(
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|Values
argument_list|<>
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|valueIterator ()
name|UnmodifiableIterator
argument_list|<
name|V
argument_list|>
name|valueIterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|V
name|output
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
DECL|class|Values
specifier|private
specifier|static
specifier|final
class|class
name|Values
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
block|{
DECL|field|multimap
annotation|@
name|Weak
specifier|private
specifier|final
specifier|transient
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
decl_stmt|;
DECL|method|Values (ImmutableMultimap<K, V> multimap)
name|Values
parameter_list|(
name|ImmutableMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
name|this
operator|.
name|multimap
operator|=
name|multimap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object object)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|object
parameter_list|)
block|{
return|return
name|multimap
operator|.
name|containsValue
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|UnmodifiableIterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|valueIterator
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// not present in emulated superclass
annotation|@
name|Override
DECL|method|copyIntoArray (Object[] dst, int offset)
name|int
name|copyIntoArray
parameter_list|(
name|Object
index|[]
name|dst
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
for|for
control|(
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|valueCollection
range|:
name|multimap
operator|.
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|offset
operator|=
name|valueCollection
operator|.
name|copyIntoArray
argument_list|(
name|dst
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|offset
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

