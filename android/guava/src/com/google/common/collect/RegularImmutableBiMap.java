begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * Bimap with zero or more mappings.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// uses writeReplace(), not default serialization
DECL|class|RegularImmutableBiMap
specifier|final
class|class
name|RegularImmutableBiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|EMPTY
specifier|static
specifier|final
name|RegularImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|EMPTY
init|=
operator|new
name|RegularImmutableBiMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|keyHashTable
specifier|private
specifier|final
specifier|transient
name|int
index|[]
name|keyHashTable
decl_stmt|;
DECL|field|alternatingKeysAndValues
annotation|@
name|VisibleForTesting
specifier|final
specifier|transient
name|Object
index|[]
name|alternatingKeysAndValues
decl_stmt|;
DECL|field|keyOffset
specifier|private
specifier|final
specifier|transient
name|int
name|keyOffset
decl_stmt|;
comment|// 0 for K-to-V, 1 for V-to-K
DECL|field|size
specifier|private
specifier|final
specifier|transient
name|int
name|size
decl_stmt|;
DECL|field|inverse
specifier|private
specifier|final
specifier|transient
name|RegularImmutableBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
decl_stmt|;
comment|/** Constructor for empty bimap. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|RegularImmutableBiMap ()
specifier|private
name|RegularImmutableBiMap
parameter_list|()
block|{
name|this
operator|.
name|keyHashTable
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|alternatingKeysAndValues
operator|=
operator|new
name|Object
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|keyOffset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
operator|(
name|RegularImmutableBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
operator|)
name|this
expr_stmt|;
block|}
comment|/** K-to-V constructor. */
DECL|method|RegularImmutableBiMap (Object[] alternatingKeysAndValues, int size)
name|RegularImmutableBiMap
parameter_list|(
name|Object
index|[]
name|alternatingKeysAndValues
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|alternatingKeysAndValues
operator|=
name|alternatingKeysAndValues
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|keyOffset
operator|=
literal|0
expr_stmt|;
name|int
name|tableSize
init|=
operator|(
name|size
operator|>=
literal|2
operator|)
condition|?
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
name|size
argument_list|)
else|:
literal|0
decl_stmt|;
name|this
operator|.
name|keyHashTable
operator|=
name|RegularImmutableMap
operator|.
name|createHashTable
argument_list|(
name|alternatingKeysAndValues
argument_list|,
name|size
argument_list|,
name|tableSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
name|valueHashTable
init|=
name|RegularImmutableMap
operator|.
name|createHashTable
argument_list|(
name|alternatingKeysAndValues
argument_list|,
name|size
argument_list|,
name|tableSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|inverse
operator|=
operator|new
name|RegularImmutableBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|(
name|valueHashTable
argument_list|,
name|alternatingKeysAndValues
argument_list|,
name|size
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** V-to-K constructor. */
DECL|method|RegularImmutableBiMap ( int[] valueHashTable, Object[] alternatingKeysAndValues, int size, RegularImmutableBiMap<V, K> inverse)
specifier|private
name|RegularImmutableBiMap
parameter_list|(
name|int
index|[]
name|valueHashTable
parameter_list|,
name|Object
index|[]
name|alternatingKeysAndValues
parameter_list|,
name|int
name|size
parameter_list|,
name|RegularImmutableBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|)
block|{
name|this
operator|.
name|keyHashTable
operator|=
name|valueHashTable
expr_stmt|;
name|this
operator|.
name|alternatingKeysAndValues
operator|=
name|alternatingKeysAndValues
expr_stmt|;
name|this
operator|.
name|keyOffset
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
name|inverse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|ImmutableBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
return|return
name|inverse
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|get (@ullableDecl Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|V
operator|)
name|RegularImmutableMap
operator|.
name|get
argument_list|(
name|keyHashTable
argument_list|,
name|alternatingKeysAndValues
argument_list|,
name|size
argument_list|,
name|keyOffset
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|RegularImmutableMap
operator|.
name|EntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|,
name|alternatingKeysAndValues
argument_list|,
name|keyOffset
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKeySet ()
name|ImmutableSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ImmutableList
argument_list|<
name|K
argument_list|>
name|keyList
init|=
operator|(
name|ImmutableList
argument_list|<
name|K
argument_list|>
operator|)
operator|new
name|RegularImmutableMap
operator|.
name|KeysOrValuesAsList
argument_list|(
name|alternatingKeysAndValues
argument_list|,
name|keyOffset
argument_list|,
name|size
argument_list|)
decl_stmt|;
return|return
operator|new
name|RegularImmutableMap
operator|.
name|KeySet
argument_list|<>
argument_list|(
name|this
argument_list|,
name|keyList
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPartialView ()
name|boolean
name|isPartialView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

