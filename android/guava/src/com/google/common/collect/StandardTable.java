begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|alwaysTrue
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|safeContainsKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|safeGet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|IteratorBasedAbstractMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|ViewCachingAbstractMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|ImprovedAbstractSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|WeakOuter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * {@link Table} implementation backed by a map that associates row keys with column key / value  * secondary maps. This class provides rapid access to records by the row key alone or by both keys,  * but not by just the column key.  *  *<p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link #columnMap()} have  * iterators that don't support {@code remove()}. Otherwise, all optional operations are supported.  * Null row keys, columns keys, and values are not supported.  *  *<p>Lookups by row key are often faster than lookups by column key, because the data is stored in  * a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs  * quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer,  * since an iteration across all row keys occurs.  *  *<p>Note that this implementation is not synchronized. If multiple threads access this table  * concurrently and one of the threads modifies the table, it must be synchronized externally.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|StandardTable
class|class
name|StandardTable
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractTable
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|backingMap
annotation|@
name|GwtTransient
specifier|final
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingMap
decl_stmt|;
DECL|field|factory
annotation|@
name|GwtTransient
specifier|final
name|Supplier
argument_list|<
name|?
extends|extends
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|factory
decl_stmt|;
DECL|method|StandardTable (Map<R, Map<C, V>> backingMap, Supplier<? extends Map<C, V>> factory)
name|StandardTable
parameter_list|(
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingMap
parameter_list|,
name|Supplier
argument_list|<
name|?
extends|extends
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|factory
parameter_list|)
block|{
name|this
operator|.
name|backingMap
operator|=
name|backingMap
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
comment|// Accessors
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object rowKey, @NullableDecl Object columnKey)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|rowKey
parameter_list|,
annotation|@
name|NullableDecl
name|Object
name|columnKey
parameter_list|)
block|{
return|return
name|rowKey
operator|!=
literal|null
operator|&&
name|columnKey
operator|!=
literal|null
operator|&&
name|super
operator|.
name|contains
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsColumn (@ullableDecl Object columnKey)
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|columnKey
parameter_list|)
block|{
if|if
condition|(
name|columnKey
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|safeContainsKey
argument_list|(
name|map
argument_list|,
name|columnKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|containsRow (@ullableDecl Object rowKey)
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|rowKey
parameter_list|)
block|{
return|return
name|rowKey
operator|!=
literal|null
operator|&&
name|safeContainsKey
argument_list|(
name|backingMap
argument_list|,
name|rowKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullableDecl Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|super
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (@ullableDecl Object rowKey, @NullableDecl Object columnKey)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|rowKey
parameter_list|,
annotation|@
name|NullableDecl
name|Object
name|columnKey
parameter_list|)
block|{
return|return
operator|(
name|rowKey
operator|==
literal|null
operator|||
name|columnKey
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|super
operator|.
name|get
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
name|size
operator|+=
name|map
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|// Mutators
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getOrCreate (R rowKey)
specifier|private
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|getOrCreate
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|backingMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|factory
operator|.
name|get
argument_list|()
expr_stmt|;
name|backingMap
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|put (R rowKey, C columnKey, V value)
specifier|public
name|V
name|put
parameter_list|(
name|R
name|rowKey
parameter_list|,
name|C
name|columnKey
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|getOrCreate
argument_list|(
name|rowKey
argument_list|)
operator|.
name|put
argument_list|(
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|Override
DECL|method|remove (@ullableDecl Object rowKey, @NullableDecl Object columnKey)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|rowKey
parameter_list|,
annotation|@
name|NullableDecl
name|Object
name|columnKey
parameter_list|)
block|{
if|if
condition|(
operator|(
name|rowKey
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnKey
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|safeGet
argument_list|(
name|backingMap
argument_list|,
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|V
name|value
init|=
name|map
operator|.
name|remove
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|backingMap
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeColumn (Object column)
specifier|private
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|removeColumn
parameter_list|(
name|Object
name|column
parameter_list|)
block|{
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|output
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|remove
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|output
return|;
block|}
DECL|method|containsMapping (Object rowKey, Object columnKey, Object value)
specifier|private
name|boolean
name|containsMapping
parameter_list|(
name|Object
name|rowKey
parameter_list|,
name|Object
name|columnKey
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|get
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
argument_list|)
return|;
block|}
comment|/** Remove a row key / column key / value mapping, if present. */
DECL|method|removeMapping (Object rowKey, Object columnKey, Object value)
specifier|private
name|boolean
name|removeMapping
parameter_list|(
name|Object
name|rowKey
parameter_list|,
name|Object
name|columnKey
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|containsMapping
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// Views
comment|/**    * Abstract set whose {@code isEmpty()} returns whether the table is empty and whose {@code    * clear()} clears all table mappings.    */
annotation|@
name|WeakOuter
DECL|class|TableSet
specifier|private
specifier|abstract
class|class
name|TableSet
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ImprovedAbstractSet
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    *    *<p>The set's iterator traverses the mappings for the first row, the mappings for the second    * row, and so on.    *    *<p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the    * time the cell is returned by a method call to the set or its iterator.    */
annotation|@
name|Override
DECL|method|cellSet ()
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellSet
parameter_list|()
block|{
return|return
name|super
operator|.
name|cellSet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cellIterator ()
name|Iterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellIterator
parameter_list|()
block|{
return|return
operator|new
name|CellIterator
argument_list|()
return|;
block|}
DECL|class|CellIterator
specifier|private
class|class
name|CellIterator
implements|implements
name|Iterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|rowIterator
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|rowIterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|rowEntry
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowEntry
decl_stmt|;
DECL|field|columnIterator
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnIterator
init|=
name|Iterators
operator|.
name|emptyModifiableIterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|rowIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|columnIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|columnIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|rowEntry
operator|=
name|rowIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|columnIterator
operator|=
name|rowEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|columnEntry
init|=
name|columnIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|immutableCell
argument_list|(
name|rowEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnEntry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|columnIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|rowEntry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rowIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|row (R rowKey)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
return|return
operator|new
name|Row
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
DECL|class|Row
class|class
name|Row
extends|extends
name|IteratorBasedAbstractMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
block|{
DECL|field|rowKey
specifier|final
name|R
name|rowKey
decl_stmt|;
DECL|method|Row (R rowKey)
name|Row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|this
operator|.
name|rowKey
operator|=
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
DECL|field|backingRowMap
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|backingRowMap
decl_stmt|;
DECL|method|backingRowMap ()
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|backingRowMap
parameter_list|()
block|{
return|return
operator|(
name|backingRowMap
operator|==
literal|null
operator|||
operator|(
name|backingRowMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|backingMap
operator|.
name|containsKey
argument_list|(
name|rowKey
argument_list|)
operator|)
operator|)
condition|?
name|backingRowMap
operator|=
name|computeBackingRowMap
argument_list|()
else|:
name|backingRowMap
return|;
block|}
DECL|method|computeBackingRowMap ()
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|computeBackingRowMap
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
comment|// Call this every time we perform a removal.
DECL|method|maintainEmptyInvariant ()
name|void
name|maintainEmptyInvariant
parameter_list|()
block|{
if|if
condition|(
name|backingRowMap
argument_list|()
operator|!=
literal|null
operator|&&
name|backingRowMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|backingMap
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|backingRowMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|backingRowMap
init|=
name|backingRowMap
argument_list|()
decl_stmt|;
return|return
operator|(
name|key
operator|!=
literal|null
operator|&&
name|backingRowMap
operator|!=
literal|null
operator|)
operator|&&
name|Maps
operator|.
name|safeContainsKey
argument_list|(
name|backingRowMap
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|backingRowMap
init|=
name|backingRowMap
argument_list|()
decl_stmt|;
return|return
operator|(
name|key
operator|!=
literal|null
operator|&&
name|backingRowMap
operator|!=
literal|null
operator|)
condition|?
name|Maps
operator|.
name|safeGet
argument_list|(
name|backingRowMap
argument_list|,
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|put (C key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|C
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|backingRowMap
operator|!=
literal|null
operator|&&
operator|!
name|backingRowMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|backingRowMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
name|StandardTable
operator|.
name|this
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|backingRowMap
init|=
name|backingRowMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|backingRowMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|V
name|result
init|=
name|Maps
operator|.
name|safeRemove
argument_list|(
name|backingRowMap
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|maintainEmptyInvariant
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|backingRowMap
init|=
name|backingRowMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|backingRowMap
operator|!=
literal|null
condition|)
block|{
name|backingRowMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|maintainEmptyInvariant
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|backingRowMap
argument_list|()
decl_stmt|;
return|return
operator|(
name|map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entryIterator ()
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|backingRowMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyModifiableIterator
argument_list|()
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|wrapEntry
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|maintainEmptyInvariant
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|wrapEntry (final Entry<C, V> entry)
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|wrapEntry
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|ForwardingMapEntry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|super
operator|.
name|setValue
argument_list|(
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
comment|// TODO(lowasser): identify why this affects GWT tests
return|return
name|standardEquals
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/**    * {@inheritDoc}    *    *<p>The returned map's views have iterators that don't support {@code remove()}.    */
annotation|@
name|Override
DECL|method|column (C columnKey)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
return|return
operator|new
name|Column
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|class|Column
specifier|private
class|class
name|Column
extends|extends
name|ViewCachingAbstractMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
block|{
DECL|field|columnKey
specifier|final
name|C
name|columnKey
decl_stmt|;
DECL|method|Column (C columnKey)
name|Column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
name|this
operator|.
name|columnKey
operator|=
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (R key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|R
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|contains
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
comment|/** Removes all {@code Column} mappings whose row key and value satisfy the given predicate. */
annotation|@
name|CanIgnoreReturnValue
DECL|method|removeFromColumnIf (Predicate<? super Entry<R, V>> predicate)
name|boolean
name|removeFromColumnIf
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
name|Set
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|EntrySet
specifier|private
class|class
name|EntrySet
extends|extends
name|ImprovedAbstractSet
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntrySetIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|containsColumn
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|removeFromColumnIf
argument_list|(
name|alwaysTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|containsMapping
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|removeMapping
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeFromColumnIf
argument_list|(
name|not
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|EntrySetIterator
specifier|private
class|class
name|EntrySetIterator
extends|extends
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|iterator
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|computeNext ()
specifier|protected
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
condition|)
block|{
annotation|@
name|WeakOuter
class|class
name|EntryImpl
extends|extends
name|AbstractMapEntry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|R
name|getKey
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|columnKey
argument_list|,
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|EntryImpl
argument_list|()
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createKeySet ()
name|Set
argument_list|<
name|R
argument_list|>
name|createKeySet
parameter_list|()
block|{
return|return
operator|new
name|KeySet
argument_list|()
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|KeySet
specifier|private
class|class
name|KeySet
extends|extends
name|Maps
operator|.
name|KeySet
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
block|{
DECL|method|KeySet ()
name|KeySet
parameter_list|()
block|{
name|super
argument_list|(
name|Column
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (Object obj)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|contains
argument_list|(
name|obj
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|remove
argument_list|(
name|obj
argument_list|,
name|columnKey
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (final Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeFromColumnIf
argument_list|(
name|Maps
operator|.
expr|<
name|R
operator|>
name|keyPredicateOnEntries
argument_list|(
name|not
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|Collection
argument_list|<
name|V
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|Values
argument_list|()
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|Values
specifier|private
class|class
name|Values
extends|extends
name|Maps
operator|.
name|Values
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
block|{
DECL|method|Values ()
name|Values
parameter_list|()
block|{
name|super
argument_list|(
name|Column
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|removeFromColumnIf
argument_list|(
name|Maps
operator|.
expr|<
name|V
operator|>
name|valuePredicateOnEntries
argument_list|(
name|equalTo
argument_list|(
name|obj
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (final Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeFromColumnIf
argument_list|(
name|Maps
operator|.
expr|<
name|V
operator|>
name|valuePredicateOnEntries
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (final Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removeFromColumnIf
argument_list|(
name|Maps
operator|.
expr|<
name|V
operator|>
name|valuePredicateOnEntries
argument_list|(
name|not
argument_list|(
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|rowKeySet ()
specifier|public
name|Set
argument_list|<
name|R
argument_list|>
name|rowKeySet
parameter_list|()
block|{
return|return
name|rowMap
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|field|columnKeySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|C
argument_list|>
name|columnKeySet
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<p>The returned set has an iterator that does not support {@code remove()}.    *    *<p>The set's iterator traverses the columns of the first row, the columns of the second row,    * etc., skipping any columns that have appeared previously.    */
annotation|@
name|Override
DECL|method|columnKeySet ()
specifier|public
name|Set
argument_list|<
name|C
argument_list|>
name|columnKeySet
parameter_list|()
block|{
name|Set
argument_list|<
name|C
argument_list|>
name|result
init|=
name|columnKeySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|columnKeySet
operator|=
operator|new
name|ColumnKeySet
argument_list|()
else|:
name|result
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|ColumnKeySet
specifier|private
class|class
name|ColumnKeySet
extends|extends
name|TableSet
argument_list|<
name|C
argument_list|>
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|C
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|createColumnKeyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|remove
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// map.keySet().removeAll(c) can throw a NPE when map is a TreeMap with
comment|// natural ordering and c contains a null.
if|if
condition|(
name|Iterators
operator|.
name|removeAll
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object obj)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
comment|/** Creates an iterator that returns each column value with duplicates omitted. */
DECL|method|createColumnKeyIterator ()
name|Iterator
argument_list|<
name|C
argument_list|>
name|createColumnKeyIterator
parameter_list|()
block|{
return|return
operator|new
name|ColumnKeyIterator
argument_list|()
return|;
block|}
DECL|class|ColumnKeyIterator
specifier|private
class|class
name|ColumnKeyIterator
extends|extends
name|AbstractIterator
argument_list|<
name|C
argument_list|>
block|{
comment|// Use the same map type to support TreeMaps with comparators that aren't
comment|// consistent with equals().
DECL|field|seen
specifier|final
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|seen
init|=
name|factory
operator|.
name|get
argument_list|()
decl_stmt|;
DECL|field|mapIterator
specifier|final
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapIterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|entryIterator
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|computeNext ()
specifier|protected
name|C
name|computeNext
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|seen
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|mapIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|entryIterator
operator|=
name|mapIterator
operator|.
name|next
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    *    *<p>The collection's iterator traverses the values for the first row, the values for the second    * row, and so on.    */
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|super
operator|.
name|values
argument_list|()
return|;
block|}
DECL|field|rowMap
specifier|private
specifier|transient
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
decl_stmt|;
annotation|@
name|Override
DECL|method|rowMap ()
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|rowMap
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|rowMap
operator|=
name|createRowMap
argument_list|()
else|:
name|result
return|;
block|}
DECL|method|createRowMap ()
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createRowMap
parameter_list|()
block|{
return|return
operator|new
name|RowMap
argument_list|()
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|RowMap
class|class
name|RowMap
extends|extends
name|ViewCachingAbstractMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsRow
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|// performing cast only when key is in backing map and has the correct type
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsRow
argument_list|(
name|key
argument_list|)
condition|?
name|row
argument_list|(
operator|(
name|R
operator|)
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|key
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|backingMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|EntrySet
class|class
name|EntrySet
extends|extends
name|TableSet
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|asMapEntryIterator
argument_list|(
name|backingMap
operator|.
name|keySet
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|apply
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
return|return
name|row
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object obj)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|&&
name|Collections2
operator|.
name|safeContains
argument_list|(
name|backingMap
operator|.
name|entrySet
argument_list|()
argument_list|,
name|entry
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|&&
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|field|columnMap
specifier|private
specifier|transient
name|ColumnMap
name|columnMap
decl_stmt|;
annotation|@
name|Override
DECL|method|columnMap ()
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
name|ColumnMap
name|result
init|=
name|columnMap
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|columnMap
operator|=
operator|new
name|ColumnMap
argument_list|()
else|:
name|result
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|ColumnMap
specifier|private
class|class
name|ColumnMap
extends|extends
name|ViewCachingAbstractMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
comment|// The cast to C occurs only when the key is in the map, implying that it
comment|// has the correct type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|key
argument_list|)
condition|?
name|column
argument_list|(
operator|(
name|C
operator|)
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|key
argument_list|)
condition|?
name|removeColumn
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|ColumnMapEntrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|C
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|columnKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createValues ()
name|Collection
argument_list|<
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|createValues
parameter_list|()
block|{
return|return
operator|new
name|ColumnMapValues
argument_list|()
return|;
block|}
annotation|@
name|WeakOuter
DECL|class|ColumnMapEntrySet
class|class
name|ColumnMapEntrySet
extends|extends
name|TableSet
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|asMapEntryIterator
argument_list|(
name|columnKeySet
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|apply
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
return|return
name|column
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|columnKeySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object obj)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|containsColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// The cast to C occurs only when the key is in the map, implying
comment|// that it has the correct type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|C
name|columnKey
init|=
operator|(
name|C
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
name|get
argument_list|(
name|columnKey
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
name|removeColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
comment|/*          * We can't inherit the normal implementation (which calls          * Sets.removeAllImpl(Set, *Collection*) because, under some          * circumstances, it attempts to call columnKeySet().iterator().remove,          * which is unsupported.          */
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|Sets
operator|.
name|removeAllImpl
argument_list|(
name|this
argument_list|,
name|c
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|C
name|columnKey
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|columnKey
argument_list|,
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
block|}
annotation|@
name|WeakOuter
DECL|class|ColumnMapValues
specifier|private
class|class
name|ColumnMapValues
extends|extends
name|Maps
operator|.
name|Values
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|ColumnMapValues ()
name|ColumnMapValues
parameter_list|()
block|{
name|super
argument_list|(
name|ColumnMap
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Object obj)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|ColumnMap
operator|.
name|this
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|C
name|columnKey
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|contains
argument_list|(
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|C
name|columnKey
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|contains
argument_list|(
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

