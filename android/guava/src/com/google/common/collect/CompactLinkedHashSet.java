begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * CompactLinkedHashSet is an implementation of a Set, which a predictable iteration order  * that matches the insertion order. All optional operations (adding and  * removing) are supported. All elements, including {@code null}, are permitted.  *  *<p>{@code contains(x)}, {@code add(x)} and {@code remove(x)}, are all (expected and amortized)  * constant time operations. Expected in the hashtable sense (depends on the hash function  * doing a good job of distributing the elements to the buckets to a distribution not far from  * uniform), and amortized since some operations can trigger a hash table resize.  *  *<p>This implementation consumes significantly less memory than {@code java.util.LinkedHashSet}  * or even {@code java.util.HashSet}, and places considerably less load on the garbage collector.  * Like {@code java.util.LinkedHashSet}, it offers insertion-order iteration, with identical  * behavior.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
comment|// not worth using in GWT for now
DECL|class|CompactLinkedHashSet
class|class
name|CompactLinkedHashSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|CompactHashSet
argument_list|<
name|E
argument_list|>
block|{
comment|/**    * Creates an empty {@code CompactLinkedHashSet} instance.    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Creates a<i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements    * of the given collection in the order returned by the collection's iterator.    *    * @param collection the elements that the set should contain    * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)    */
DECL|method|create (Collection<? extends E> collection)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|createWithExpectedSize
argument_list|(
name|collection
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|collection
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
comment|/**    * Creates a {@code CompactLinkedHashSet} instance containing the given elements in    * unspecified order.    *    * @param elements the elements that the set should contain    * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)    */
DECL|method|create (E... elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|createWithExpectedSize
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
comment|/**    * Creates a {@code CompactLinkedHashSet} instance, with a high enough "initial capacity"    * that it<i>should</i> hold {@code expectedSize} elements without rebuilding internal    * data structures.    *    * @param expectedSize the number of elements you expect to add to the returned set    * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code    *         expectedSize} elements without resizing    * @throws IllegalArgumentException if {@code expectedSize} is negative    */
DECL|method|createWithExpectedSize (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
name|createWithExpectedSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
return|return
operator|new
name|CompactLinkedHashSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
DECL|field|ENDPOINT
specifier|private
specifier|static
specifier|final
name|int
name|ENDPOINT
init|=
operator|-
literal|2
decl_stmt|;
comment|// TODO(user): predecessors and successors should be collocated (reducing cache misses).
comment|// Might also explore collocating all of [hash, next, predecessor, succesor] fields of an
comment|// entry in a *single* long[], though that reduces the maximum size of the set by a factor of 2
comment|/**    * Pointer to the predecessor of an entry in insertion order. ENDPOINT indicates a node is the    * first node in insertion order; all values at indices â¥ {@link #size()} are UNSET.    */
DECL|field|predecessor
specifier|private
specifier|transient
name|int
index|[]
name|predecessor
decl_stmt|;
comment|/**    * Pointer to the successor of an entry in insertion order. ENDPOINT indicates a node is the last    * node in insertion order; all values at indices â¥ {@link #size()} are UNSET.    */
DECL|field|successor
specifier|private
specifier|transient
name|int
index|[]
name|successor
decl_stmt|;
DECL|field|firstEntry
specifier|private
specifier|transient
name|int
name|firstEntry
decl_stmt|;
DECL|field|lastEntry
specifier|private
specifier|transient
name|int
name|lastEntry
decl_stmt|;
DECL|method|CompactLinkedHashSet ()
name|CompactLinkedHashSet
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|CompactLinkedHashSet (int expectedSize)
name|CompactLinkedHashSet
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|super
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (int expectedSize, float loadFactor)
name|void
name|init
parameter_list|(
name|int
name|expectedSize
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|expectedSize
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|predecessor
operator|=
operator|new
name|int
index|[
name|expectedSize
index|]
expr_stmt|;
name|this
operator|.
name|successor
operator|=
operator|new
name|int
index|[
name|expectedSize
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|predecessor
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|successor
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
name|firstEntry
operator|=
name|ENDPOINT
expr_stmt|;
name|lastEntry
operator|=
name|ENDPOINT
expr_stmt|;
block|}
DECL|method|succeeds (int pred, int succ)
specifier|private
name|void
name|succeeds
parameter_list|(
name|int
name|pred
parameter_list|,
name|int
name|succ
parameter_list|)
block|{
if|if
condition|(
name|pred
operator|==
name|ENDPOINT
condition|)
block|{
name|firstEntry
operator|=
name|succ
expr_stmt|;
block|}
else|else
block|{
name|successor
index|[
name|pred
index|]
operator|=
name|succ
expr_stmt|;
block|}
if|if
condition|(
name|succ
operator|==
name|ENDPOINT
condition|)
block|{
name|lastEntry
operator|=
name|pred
expr_stmt|;
block|}
else|else
block|{
name|predecessor
index|[
name|succ
index|]
operator|=
name|pred
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|insertEntry (int entryIndex, E object, int hash)
name|void
name|insertEntry
parameter_list|(
name|int
name|entryIndex
parameter_list|,
name|E
name|object
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
name|super
operator|.
name|insertEntry
argument_list|(
name|entryIndex
argument_list|,
name|object
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|succeeds
argument_list|(
name|lastEntry
argument_list|,
name|entryIndex
argument_list|)
expr_stmt|;
name|succeeds
argument_list|(
name|entryIndex
argument_list|,
name|ENDPOINT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|moveEntry (int dstIndex)
name|void
name|moveEntry
parameter_list|(
name|int
name|dstIndex
parameter_list|)
block|{
name|int
name|srcIndex
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|super
operator|.
name|moveEntry
argument_list|(
name|dstIndex
argument_list|)
expr_stmt|;
name|succeeds
argument_list|(
name|predecessor
index|[
name|dstIndex
index|]
argument_list|,
name|successor
index|[
name|dstIndex
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcIndex
operator|!=
name|dstIndex
condition|)
block|{
name|succeeds
argument_list|(
name|predecessor
index|[
name|srcIndex
index|]
argument_list|,
name|dstIndex
argument_list|)
expr_stmt|;
name|succeeds
argument_list|(
name|dstIndex
argument_list|,
name|successor
index|[
name|srcIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|predecessor
index|[
name|srcIndex
index|]
operator|=
name|UNSET
expr_stmt|;
name|successor
index|[
name|srcIndex
index|]
operator|=
name|UNSET
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|firstEntry
operator|=
name|ENDPOINT
expr_stmt|;
name|lastEntry
operator|=
name|ENDPOINT
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|predecessor
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|successor
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resizeEntries (int newCapacity)
name|void
name|resizeEntries
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|super
operator|.
name|resizeEntries
argument_list|(
name|newCapacity
argument_list|)
expr_stmt|;
name|int
name|oldCapacity
init|=
name|predecessor
operator|.
name|length
decl_stmt|;
name|predecessor
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|predecessor
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|successor
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|successor
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldCapacity
operator|<
name|newCapacity
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|predecessor
argument_list|,
name|oldCapacity
argument_list|,
name|newCapacity
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|successor
argument_list|,
name|oldCapacity
argument_list|,
name|newCapacity
argument_list|,
name|UNSET
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toArray (T[] a)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|firstEntryIndex ()
name|int
name|firstEntryIndex
parameter_list|()
block|{
return|return
name|firstEntry
return|;
block|}
annotation|@
name|Override
DECL|method|adjustAfterRemove (int indexBeforeRemove, int indexRemoved)
name|int
name|adjustAfterRemove
parameter_list|(
name|int
name|indexBeforeRemove
parameter_list|,
name|int
name|indexRemoved
parameter_list|)
block|{
return|return
operator|(
name|indexBeforeRemove
operator|==
name|size
argument_list|()
operator|)
condition|?
name|indexRemoved
else|:
name|indexBeforeRemove
return|;
block|}
annotation|@
name|Override
DECL|method|getSuccessor (int entryIndex)
name|int
name|getSuccessor
parameter_list|(
name|int
name|entryIndex
parameter_list|)
block|{
return|return
name|successor
index|[
name|entryIndex
index|]
return|;
block|}
block|}
end_class

end_unit

