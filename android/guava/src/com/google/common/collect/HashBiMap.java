begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|j2objc
operator|.
name|annotations
operator|.
name|RetainedWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|MonotonicNonNullDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * A {@link BiMap} backed by two hash tables. This implementation allows null keys and values. A  * {@code HashBiMap} and its inverse are both serializable.  *  *<p>This implementation guarantees insertion-based iteration order of its keys.  *  *<p>See the Guava User Guide article on<a href=  * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap"> {@code BiMap}</a>.  *  * @author Louis Wasserman  * @author Mike Bostock  * @since 2.0  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|HashBiMap
specifier|public
specifier|final
class|class
name|HashBiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
comment|/** Returns a new, empty {@code HashBiMap} with the default initial capacity (16). */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|create
argument_list|(
literal|16
argument_list|)
return|;
block|}
comment|/**    * Constructs a new, empty bimap with the specified expected size.    *    * @param expectedSize the expected number of entries    * @throws IllegalArgumentException if the specified expected size is negative    */
DECL|method|create (int expectedSize)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
return|return
operator|new
name|HashBiMap
argument_list|<>
argument_list|(
name|expectedSize
argument_list|)
return|;
block|}
comment|/**    * Constructs a new bimap containing initial values from {@code map}. The bimap is created with an    * initial capacity sufficient to hold the mappings in the specified map.    */
DECL|method|create (Map<? extends K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
init|=
name|create
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|bimap
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|bimap
return|;
block|}
DECL|field|ABSENT
specifier|private
specifier|static
specifier|final
name|int
name|ABSENT
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ENDPOINT
specifier|private
specifier|static
specifier|final
name|int
name|ENDPOINT
init|=
operator|-
literal|2
decl_stmt|;
comment|/** Maps an "entry" to the key of that entry. */
DECL|field|keys
specifier|transient
name|K
index|[]
name|keys
decl_stmt|;
comment|/** Maps an "entry" to the value of that entry. */
DECL|field|values
specifier|transient
name|V
index|[]
name|values
decl_stmt|;
DECL|field|size
specifier|transient
name|int
name|size
decl_stmt|;
DECL|field|modCount
specifier|transient
name|int
name|modCount
decl_stmt|;
comment|/** Maps a bucket to the "entry" of its first element. */
DECL|field|hashTableKToV
specifier|private
specifier|transient
name|int
index|[]
name|hashTableKToV
decl_stmt|;
comment|/** Maps a bucket to the "entry" of its first element. */
DECL|field|hashTableVToK
specifier|private
specifier|transient
name|int
index|[]
name|hashTableVToK
decl_stmt|;
comment|/** Maps an "entry" to the "entry" that follows it in its bucket. */
DECL|field|nextInBucketKToV
specifier|private
specifier|transient
name|int
index|[]
name|nextInBucketKToV
decl_stmt|;
comment|/** Maps an "entry" to the "entry" that follows it in its bucket. */
DECL|field|nextInBucketVToK
specifier|private
specifier|transient
name|int
index|[]
name|nextInBucketVToK
decl_stmt|;
comment|/** The "entry" of the first element in insertion order. */
DECL|field|firstInInsertionOrder
annotation|@
name|NullableDecl
specifier|private
specifier|transient
name|int
name|firstInInsertionOrder
decl_stmt|;
comment|/** The "entry" of the last element in insertion order. */
DECL|field|lastInInsertionOrder
annotation|@
name|NullableDecl
specifier|private
specifier|transient
name|int
name|lastInInsertionOrder
decl_stmt|;
comment|/** Maps an "entry" to the "entry" that precedes it in insertion order. */
DECL|field|prevInInsertionOrder
specifier|private
specifier|transient
name|int
index|[]
name|prevInInsertionOrder
decl_stmt|;
comment|/** Maps an "entry" to the "entry" that follows it in insertion order. */
DECL|field|nextInInsertionOrder
specifier|private
specifier|transient
name|int
index|[]
name|nextInInsertionOrder
decl_stmt|;
DECL|method|HashBiMap (int expectedSize)
specifier|private
name|HashBiMap
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|init
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init (int expectedSize)
name|void
name|init
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|CollectPreconditions
operator|.
name|checkNonnegative
argument_list|(
name|expectedSize
argument_list|,
literal|"expectedSize"
argument_list|)
expr_stmt|;
name|int
name|tableSize
init|=
name|Hashing
operator|.
name|closedTableSize
argument_list|(
name|expectedSize
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|keys
operator|=
operator|(
name|K
index|[]
operator|)
operator|new
name|Object
index|[
name|expectedSize
index|]
expr_stmt|;
name|values
operator|=
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|expectedSize
index|]
expr_stmt|;
name|hashTableKToV
operator|=
name|createFilledWithAbsent
argument_list|(
name|tableSize
argument_list|)
expr_stmt|;
name|hashTableVToK
operator|=
name|createFilledWithAbsent
argument_list|(
name|tableSize
argument_list|)
expr_stmt|;
name|nextInBucketKToV
operator|=
name|createFilledWithAbsent
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|nextInBucketVToK
operator|=
name|createFilledWithAbsent
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|firstInInsertionOrder
operator|=
name|ENDPOINT
expr_stmt|;
name|lastInInsertionOrder
operator|=
name|ENDPOINT
expr_stmt|;
name|prevInInsertionOrder
operator|=
name|createFilledWithAbsent
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|nextInInsertionOrder
operator|=
name|createFilledWithAbsent
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
comment|/** Returns an int array of the specified size, filled with ABSENT. */
DECL|method|createFilledWithAbsent (int size)
specifier|private
specifier|static
name|int
index|[]
name|createFilledWithAbsent
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|int
index|[]
name|array
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
comment|/** Equivalent to {@code Arrays.copyOf(array, newSize)}, save that the new elements are ABSENT. */
DECL|method|expandAndFillWithAbsent (int[] array, int newSize)
specifier|private
specifier|static
name|int
index|[]
name|expandAndFillWithAbsent
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|newSize
parameter_list|)
block|{
name|int
name|oldSize
init|=
name|array
operator|.
name|length
decl_stmt|;
name|int
index|[]
name|result
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|newSize
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|result
argument_list|,
name|oldSize
argument_list|,
name|newSize
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**    * Ensures that all of the internal structures in the HashBiMap are ready for this many elements.    */
DECL|method|ensureCapacity (int minCapacity)
specifier|private
name|void
name|ensureCapacity
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
if|if
condition|(
name|nextInBucketKToV
operator|.
name|length
operator|<
name|minCapacity
condition|)
block|{
name|int
name|oldCapacity
init|=
name|nextInBucketKToV
operator|.
name|length
decl_stmt|;
name|int
name|newCapacity
init|=
name|ImmutableCollection
operator|.
name|Builder
operator|.
name|expandedCapacity
argument_list|(
name|oldCapacity
argument_list|,
name|minCapacity
argument_list|)
decl_stmt|;
name|keys
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keys
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|values
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|values
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|nextInBucketKToV
operator|=
name|expandAndFillWithAbsent
argument_list|(
name|nextInBucketKToV
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|nextInBucketVToK
operator|=
name|expandAndFillWithAbsent
argument_list|(
name|nextInBucketVToK
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|prevInInsertionOrder
operator|=
name|expandAndFillWithAbsent
argument_list|(
name|prevInInsertionOrder
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|nextInInsertionOrder
operator|=
name|expandAndFillWithAbsent
argument_list|(
name|nextInInsertionOrder
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hashTableKToV
operator|.
name|length
operator|<
name|minCapacity
condition|)
block|{
name|int
name|newTableSize
init|=
name|Hashing
operator|.
name|closedTableSize
argument_list|(
name|minCapacity
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|hashTableKToV
operator|=
name|createFilledWithAbsent
argument_list|(
name|newTableSize
argument_list|)
expr_stmt|;
name|hashTableVToK
operator|=
name|createFilledWithAbsent
argument_list|(
name|newTableSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|entryToRehash
init|=
literal|0
init|;
name|entryToRehash
operator|<
name|size
condition|;
name|entryToRehash
operator|++
control|)
block|{
name|int
name|keyHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|keys
index|[
name|entryToRehash
index|]
argument_list|)
decl_stmt|;
name|int
name|keyBucket
init|=
name|bucket
argument_list|(
name|keyHash
argument_list|)
decl_stmt|;
name|nextInBucketKToV
index|[
name|entryToRehash
index|]
operator|=
name|hashTableKToV
index|[
name|keyBucket
index|]
expr_stmt|;
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|=
name|entryToRehash
expr_stmt|;
name|int
name|valueHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|values
index|[
name|entryToRehash
index|]
argument_list|)
decl_stmt|;
name|int
name|valueBucket
init|=
name|bucket
argument_list|(
name|valueHash
argument_list|)
decl_stmt|;
name|nextInBucketVToK
index|[
name|entryToRehash
index|]
operator|=
name|hashTableVToK
index|[
name|valueBucket
index|]
expr_stmt|;
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|=
name|entryToRehash
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the bucket (in either the K-to-V or V-to-K tables) where elements with the specified    * hash could be found, if present, or could be inserted.    */
DECL|method|bucket (int hash)
specifier|private
name|int
name|bucket
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
return|return
name|hash
operator|&
operator|(
name|hashTableKToV
operator|.
name|length
operator|-
literal|1
operator|)
return|;
block|}
comment|/** Given a key, returns the index of the entry in the tables, or ABSENT if not found. */
DECL|method|findEntryByKey (@ullableDecl Object key)
name|int
name|findEntryByKey
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
return|return
name|findEntryByKey
argument_list|(
name|key
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Given a key and its hash, returns the index of the entry in the tables, or ABSENT if not found.    */
DECL|method|findEntryByKey (@ullableDecl Object key, int keyHash)
name|int
name|findEntryByKey
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|,
name|int
name|keyHash
parameter_list|)
block|{
return|return
name|findEntry
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|,
name|hashTableKToV
argument_list|,
name|nextInBucketKToV
argument_list|,
name|keys
argument_list|)
return|;
block|}
comment|/** Given a value, returns the index of the entry in the tables, or ABSENT if not found. */
DECL|method|findEntryByValue (@ullableDecl Object value)
name|int
name|findEntryByValue
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
return|return
name|findEntryByValue
argument_list|(
name|value
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Given a value and its hash, returns the index of the entry in the tables, or ABSENT if not    * found.    */
DECL|method|findEntryByValue (@ullableDecl Object value, int valueHash)
name|int
name|findEntryByValue
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
return|return
name|findEntry
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|,
name|hashTableVToK
argument_list|,
name|nextInBucketVToK
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|method|findEntry ( @ullableDecl Object o, int oHash, int[] hashTable, int[] nextInBucket, Object[] array)
name|int
name|findEntry
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|,
name|int
name|oHash
parameter_list|,
name|int
index|[]
name|hashTable
parameter_list|,
name|int
index|[]
name|nextInBucket
parameter_list|,
name|Object
index|[]
name|array
parameter_list|)
block|{
for|for
control|(
name|int
name|entry
init|=
name|hashTable
index|[
name|bucket
argument_list|(
name|oHash
argument_list|)
index|]
init|;
name|entry
operator|!=
name|ABSENT
condition|;
name|entry
operator|=
name|nextInBucket
index|[
name|entry
index|]
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|array
index|[
name|entry
index|]
argument_list|,
name|o
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
name|ABSENT
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullableDecl Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
return|return
name|findEntryByKey
argument_list|(
name|key
argument_list|)
operator|!=
name|ABSENT
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullableDecl Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
return|return
name|findEntryByValue
argument_list|(
name|value
argument_list|)
operator|!=
name|ABSENT
return|;
block|}
annotation|@
name|Override
annotation|@
name|NullableDecl
DECL|method|get (@ullableDecl Object key)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
name|int
name|entry
init|=
name|findEntryByKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|==
name|ABSENT
operator|)
condition|?
literal|null
else|:
name|values
index|[
name|entry
index|]
return|;
block|}
annotation|@
name|NullableDecl
DECL|method|getInverse (@ullableDecl Object value)
name|K
name|getInverse
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
name|int
name|entry
init|=
name|findEntryByValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|==
name|ABSENT
operator|)
condition|?
literal|null
else|:
name|keys
index|[
name|entry
index|]
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|put (@ullableDecl K key, @NullableDecl V value)
specifier|public
name|V
name|put
parameter_list|(
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|NullableDecl
DECL|method|put (@ullableDecl K key, @NullableDecl V value, boolean force)
name|V
name|put
parameter_list|(
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|int
name|keyHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|entryForKey
init|=
name|findEntryByKey
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryForKey
operator|!=
name|ABSENT
condition|)
block|{
name|V
name|oldValue
init|=
name|values
index|[
name|entryForKey
index|]
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|oldValue
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
name|replaceValueInEntry
argument_list|(
name|entryForKey
argument_list|,
name|value
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
name|int
name|valueHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|valueEntry
init|=
name|findEntryByValue
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
if|if
condition|(
name|valueEntry
operator|!=
name|ABSENT
condition|)
block|{
name|removeEntryValueHashKnown
argument_list|(
name|valueEntry
argument_list|,
name|valueHash
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkArgument
argument_list|(
name|valueEntry
operator|==
name|ABSENT
argument_list|,
literal|"Value already present: %s"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|ensureCapacity
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|keys
index|[
name|size
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|size
index|]
operator|=
name|value
expr_stmt|;
name|insertIntoTableKToV
argument_list|(
name|size
argument_list|,
name|keyHash
argument_list|)
expr_stmt|;
name|insertIntoTableVToK
argument_list|(
name|size
argument_list|,
name|valueHash
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|lastInInsertionOrder
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|size
argument_list|,
name|ENDPOINT
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|NullableDecl
DECL|method|forcePut (@ullableDecl K key, @NullableDecl V value)
specifier|public
name|V
name|forcePut
parameter_list|(
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|NullableDecl
DECL|method|putInverse (@ullableDecl V value, @NullableDecl K key, boolean force)
name|K
name|putInverse
parameter_list|(
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|,
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|int
name|valueHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|entryForValue
init|=
name|findEntryByValue
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryForValue
operator|!=
name|ABSENT
condition|)
block|{
name|K
name|oldKey
init|=
name|keys
index|[
name|entryForValue
index|]
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|oldKey
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
else|else
block|{
name|replaceKeyInEntry
argument_list|(
name|entryForValue
argument_list|,
name|key
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|oldKey
return|;
block|}
block|}
name|int
name|predecessor
init|=
name|lastInInsertionOrder
decl_stmt|;
name|int
name|keyHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|keyEntry
init|=
name|findEntryByKey
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
if|if
condition|(
name|keyEntry
operator|!=
name|ABSENT
condition|)
block|{
name|predecessor
operator|=
name|prevInInsertionOrder
index|[
name|keyEntry
index|]
expr_stmt|;
name|removeEntryKeyHashKnown
argument_list|(
name|keyEntry
argument_list|,
name|keyHash
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkArgument
argument_list|(
name|keyEntry
operator|==
name|ABSENT
argument_list|,
literal|"Key already present: %s"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// insertion point for new entry is after predecessor
comment|// note predecessor must still be a valid entry: either we deleted an entry that was *not*
comment|// predecessor, or we didn't delete anything
name|ensureCapacity
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|keys
index|[
name|size
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|size
index|]
operator|=
name|value
expr_stmt|;
name|insertIntoTableKToV
argument_list|(
name|size
argument_list|,
name|keyHash
argument_list|)
expr_stmt|;
name|insertIntoTableVToK
argument_list|(
name|size
argument_list|,
name|valueHash
argument_list|)
expr_stmt|;
name|int
name|successor
init|=
operator|(
name|predecessor
operator|==
name|ENDPOINT
operator|)
condition|?
name|firstInInsertionOrder
else|:
name|nextInInsertionOrder
index|[
name|predecessor
index|]
decl_stmt|;
name|setSucceeds
argument_list|(
name|predecessor
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|size
argument_list|,
name|successor
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Updates the pointers of the insertion order linked list so that {@code next} follows {@code    * prev}. {@code ENDPOINT} represents either the first or last entry in the entire map (as    * appropriate).    */
DECL|method|setSucceeds (int prev, int next)
specifier|private
name|void
name|setSucceeds
parameter_list|(
name|int
name|prev
parameter_list|,
name|int
name|next
parameter_list|)
block|{
if|if
condition|(
name|prev
operator|==
name|ENDPOINT
condition|)
block|{
name|firstInInsertionOrder
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
name|nextInInsertionOrder
index|[
name|prev
index|]
operator|=
name|next
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|==
name|ENDPOINT
condition|)
block|{
name|lastInInsertionOrder
operator|=
name|prev
expr_stmt|;
block|}
else|else
block|{
name|prevInInsertionOrder
index|[
name|next
index|]
operator|=
name|prev
expr_stmt|;
block|}
block|}
comment|/**    * Updates the K-to-V hash table to include the entry at the specified index, which is assumed to    * have not yet been added.    */
DECL|method|insertIntoTableKToV (int entry, int keyHash)
specifier|private
name|void
name|insertIntoTableKToV
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|keyHash
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|int
name|keyBucket
init|=
name|bucket
argument_list|(
name|keyHash
argument_list|)
decl_stmt|;
name|nextInBucketKToV
index|[
name|entry
index|]
operator|=
name|hashTableKToV
index|[
name|keyBucket
index|]
expr_stmt|;
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|=
name|entry
expr_stmt|;
block|}
comment|/**    * Updates the V-to-K hash table to include the entry at the specified index, which is assumed to    * have not yet been added.    */
DECL|method|insertIntoTableVToK (int entry, int valueHash)
specifier|private
name|void
name|insertIntoTableVToK
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|int
name|valueBucket
init|=
name|bucket
argument_list|(
name|valueHash
argument_list|)
decl_stmt|;
name|nextInBucketVToK
index|[
name|entry
index|]
operator|=
name|hashTableVToK
index|[
name|valueBucket
index|]
expr_stmt|;
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|=
name|entry
expr_stmt|;
block|}
comment|/**    * Updates the K-to-V hash table to remove the entry at the specified index, which is assumed to    * be present. Does not update any other data structures.    */
DECL|method|deleteFromTableKToV (int entry, int keyHash)
specifier|private
name|void
name|deleteFromTableKToV
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|keyHash
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|int
name|keyBucket
init|=
name|bucket
argument_list|(
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|==
name|entry
condition|)
block|{
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|=
name|nextInBucketKToV
index|[
name|entry
index|]
expr_stmt|;
name|nextInBucketKToV
index|[
name|entry
index|]
operator|=
name|ABSENT
expr_stmt|;
return|return;
block|}
name|int
name|prevInBucket
init|=
name|hashTableKToV
index|[
name|keyBucket
index|]
decl_stmt|;
for|for
control|(
name|int
name|entryInBucket
init|=
name|nextInBucketKToV
index|[
name|prevInBucket
index|]
init|;
name|entryInBucket
operator|!=
name|ABSENT
condition|;
name|entryInBucket
operator|=
name|nextInBucketKToV
index|[
name|entryInBucket
index|]
control|)
block|{
if|if
condition|(
name|entryInBucket
operator|==
name|entry
condition|)
block|{
name|nextInBucketKToV
index|[
name|prevInBucket
index|]
operator|=
name|nextInBucketKToV
index|[
name|entry
index|]
expr_stmt|;
name|nextInBucketKToV
index|[
name|entry
index|]
operator|=
name|ABSENT
expr_stmt|;
return|return;
block|}
name|prevInBucket
operator|=
name|entryInBucket
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected to find entry with key "
operator|+
name|keys
index|[
name|entry
index|]
argument_list|)
throw|;
block|}
comment|/**    * Updates the V-to-K hash table to remove the entry at the specified index, which is assumed to    * be present. Does not update any other data structures.    */
DECL|method|deleteFromTableVToK (int entry, int valueHash)
specifier|private
name|void
name|deleteFromTableVToK
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|int
name|valueBucket
init|=
name|bucket
argument_list|(
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|==
name|entry
condition|)
block|{
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|=
name|nextInBucketVToK
index|[
name|entry
index|]
expr_stmt|;
name|nextInBucketVToK
index|[
name|entry
index|]
operator|=
name|ABSENT
expr_stmt|;
return|return;
block|}
name|int
name|prevInBucket
init|=
name|hashTableVToK
index|[
name|valueBucket
index|]
decl_stmt|;
for|for
control|(
name|int
name|entryInBucket
init|=
name|nextInBucketVToK
index|[
name|prevInBucket
index|]
init|;
name|entryInBucket
operator|!=
name|ABSENT
condition|;
name|entryInBucket
operator|=
name|nextInBucketVToK
index|[
name|entryInBucket
index|]
control|)
block|{
if|if
condition|(
name|entryInBucket
operator|==
name|entry
condition|)
block|{
name|nextInBucketVToK
index|[
name|prevInBucket
index|]
operator|=
name|nextInBucketVToK
index|[
name|entry
index|]
expr_stmt|;
name|nextInBucketVToK
index|[
name|entry
index|]
operator|=
name|ABSENT
expr_stmt|;
return|return;
block|}
name|prevInBucket
operator|=
name|entryInBucket
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected to find entry with value "
operator|+
name|values
index|[
name|entry
index|]
argument_list|)
throw|;
block|}
comment|/**    * Updates the specified entry to point to the new value: removes the old value from the V-to-K    * mapping and puts the new one in. The entry does not move in the insertion order of the bimap.    */
DECL|method|replaceValueInEntry (int entry, @NullableDecl V newValue, boolean force)
specifier|private
name|void
name|replaceValueInEntry
parameter_list|(
name|int
name|entry
parameter_list|,
annotation|@
name|NullableDecl
name|V
name|newValue
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|int
name|newValueHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|int
name|newValueIndex
init|=
name|findEntryByValue
argument_list|(
name|newValue
argument_list|,
name|newValueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValueIndex
operator|!=
name|ABSENT
condition|)
block|{
if|if
condition|(
name|force
condition|)
block|{
name|removeEntryValueHashKnown
argument_list|(
name|newValueIndex
argument_list|,
name|newValueHash
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
name|size
condition|)
block|{
comment|// this entry got moved to newValueIndex
name|entry
operator|=
name|newValueIndex
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value already present in map: "
operator|+
name|newValue
argument_list|)
throw|;
block|}
block|}
comment|// we do *not* update insertion order, and it isn't a structural modification!
name|deleteFromTableVToK
argument_list|(
name|entry
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|values
index|[
name|entry
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|values
index|[
name|entry
index|]
operator|=
name|newValue
expr_stmt|;
name|insertIntoTableVToK
argument_list|(
name|entry
argument_list|,
name|newValueHash
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the specified entry to point to the new value: removes the old value from the V-to-K    * mapping and puts the new one in. The entry is moved to the end of the insertion order, or to    * the position of the new key if it was previously present.    */
DECL|method|replaceKeyInEntry (int entry, @NullableDecl K newKey, boolean force)
specifier|private
name|void
name|replaceKeyInEntry
parameter_list|(
name|int
name|entry
parameter_list|,
annotation|@
name|NullableDecl
name|K
name|newKey
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|int
name|newKeyHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|newKey
argument_list|)
decl_stmt|;
name|int
name|newKeyIndex
init|=
name|findEntryByKey
argument_list|(
name|newKey
argument_list|,
name|newKeyHash
argument_list|)
decl_stmt|;
name|int
name|newPredecessor
init|=
name|lastInInsertionOrder
decl_stmt|;
name|int
name|newSuccessor
init|=
name|ENDPOINT
decl_stmt|;
if|if
condition|(
name|newKeyIndex
operator|!=
name|ABSENT
condition|)
block|{
if|if
condition|(
name|force
condition|)
block|{
name|newPredecessor
operator|=
name|prevInInsertionOrder
index|[
name|newKeyIndex
index|]
expr_stmt|;
name|newSuccessor
operator|=
name|nextInInsertionOrder
index|[
name|newKeyIndex
index|]
expr_stmt|;
name|removeEntryKeyHashKnown
argument_list|(
name|newKeyIndex
argument_list|,
name|newKeyHash
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
name|size
condition|)
block|{
comment|// this entry got moved to newKeyIndex
name|entry
operator|=
name|newKeyIndex
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key already present in map: "
operator|+
name|newKey
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|newPredecessor
operator|==
name|entry
condition|)
block|{
name|newPredecessor
operator|=
name|prevInInsertionOrder
index|[
name|entry
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newPredecessor
operator|==
name|size
condition|)
block|{
name|newPredecessor
operator|=
name|newKeyIndex
expr_stmt|;
block|}
if|if
condition|(
name|newSuccessor
operator|==
name|entry
condition|)
block|{
name|newSuccessor
operator|=
name|nextInInsertionOrder
index|[
name|entry
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newSuccessor
operator|==
name|size
condition|)
block|{
name|newSuccessor
operator|=
name|newKeyIndex
expr_stmt|;
block|}
name|int
name|oldPredecessor
init|=
name|prevInInsertionOrder
index|[
name|entry
index|]
decl_stmt|;
name|int
name|oldSuccessor
init|=
name|nextInInsertionOrder
index|[
name|entry
index|]
decl_stmt|;
name|setSucceeds
argument_list|(
name|oldPredecessor
argument_list|,
name|oldSuccessor
argument_list|)
expr_stmt|;
comment|// remove from insertion order linked list
name|deleteFromTableKToV
argument_list|(
name|entry
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|keys
index|[
name|entry
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|keys
index|[
name|entry
index|]
operator|=
name|newKey
expr_stmt|;
name|insertIntoTableKToV
argument_list|(
name|entry
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|newKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert into insertion order linked list, usually at the end
name|setSucceeds
argument_list|(
name|newPredecessor
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|entry
argument_list|,
name|newSuccessor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|NullableDecl
DECL|method|remove (@ullableDecl Object key)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
name|int
name|keyHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|entry
init|=
name|findEntryByKey
argument_list|(
name|key
argument_list|,
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
name|ABSENT
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
annotation|@
name|NullableDecl
name|V
name|value
init|=
name|values
index|[
name|entry
index|]
decl_stmt|;
name|removeEntryKeyHashKnown
argument_list|(
name|entry
argument_list|,
name|keyHash
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
annotation|@
name|NullableDecl
DECL|method|removeInverse (@ullableDecl Object value)
name|K
name|removeInverse
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
name|int
name|valueHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|entry
init|=
name|findEntryByValue
argument_list|(
name|value
argument_list|,
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
name|ABSENT
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
annotation|@
name|NullableDecl
name|K
name|key
init|=
name|keys
index|[
name|entry
index|]
decl_stmt|;
name|removeEntryValueHashKnown
argument_list|(
name|entry
argument_list|,
name|valueHash
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
comment|/** Removes the entry at the specified index with no additional data. */
DECL|method|removeEntry (int entry)
name|void
name|removeEntry
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
name|removeEntryKeyHashKnown
argument_list|(
name|entry
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|keys
index|[
name|entry
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Removes the entry at the specified index, given the hash of its key and value. */
DECL|method|removeEntry (int entry, int keyHash, int valueHash)
specifier|private
name|void
name|removeEntry
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|keyHash
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|entry
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|deleteFromTableKToV
argument_list|(
name|entry
argument_list|,
name|keyHash
argument_list|)
expr_stmt|;
name|deleteFromTableVToK
argument_list|(
name|entry
argument_list|,
name|valueHash
argument_list|)
expr_stmt|;
name|int
name|oldPredecessor
init|=
name|prevInInsertionOrder
index|[
name|entry
index|]
decl_stmt|;
name|int
name|oldSuccessor
init|=
name|nextInInsertionOrder
index|[
name|entry
index|]
decl_stmt|;
name|setSucceeds
argument_list|(
name|oldPredecessor
argument_list|,
name|oldSuccessor
argument_list|)
expr_stmt|;
name|moveEntryToIndex
argument_list|(
name|size
operator|-
literal|1
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|keys
index|[
name|size
operator|-
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|values
index|[
name|size
operator|-
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
comment|/** Removes the entry at the specified index, given the hash of its key. */
DECL|method|removeEntryKeyHashKnown (int entry, int keyHash)
name|void
name|removeEntryKeyHashKnown
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|keyHash
parameter_list|)
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|,
name|keyHash
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|values
index|[
name|entry
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Removes the entry at the specified index, given the hash of its value. */
DECL|method|removeEntryValueHashKnown (int entry, int valueHash)
name|void
name|removeEntryValueHashKnown
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|valueHash
parameter_list|)
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|,
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|keys
index|[
name|entry
index|]
argument_list|)
argument_list|,
name|valueHash
argument_list|)
expr_stmt|;
block|}
comment|/**    * Moves the entry previously positioned at {@code src} to {@code dest}. Assumes the entry    * previously at {@code src} has already been removed from the data structures.    */
DECL|method|moveEntryToIndex (int src, int dest)
specifier|private
name|void
name|moveEntryToIndex
parameter_list|(
name|int
name|src
parameter_list|,
name|int
name|dest
parameter_list|)
block|{
if|if
condition|(
name|src
operator|==
name|dest
condition|)
block|{
return|return;
block|}
name|int
name|predecessor
init|=
name|prevInInsertionOrder
index|[
name|src
index|]
decl_stmt|;
name|int
name|successor
init|=
name|nextInInsertionOrder
index|[
name|src
index|]
decl_stmt|;
name|setSucceeds
argument_list|(
name|predecessor
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|setSucceeds
argument_list|(
name|dest
argument_list|,
name|successor
argument_list|)
expr_stmt|;
name|K
name|key
init|=
name|keys
index|[
name|src
index|]
decl_stmt|;
name|V
name|value
init|=
name|values
index|[
name|src
index|]
decl_stmt|;
name|keys
index|[
name|dest
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|dest
index|]
operator|=
name|value
expr_stmt|;
comment|// update pointers in hashTableKToV
name|int
name|keyHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|keyBucket
init|=
name|bucket
argument_list|(
name|keyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|==
name|src
condition|)
block|{
name|hashTableKToV
index|[
name|keyBucket
index|]
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|int
name|prevInBucket
init|=
name|hashTableKToV
index|[
name|keyBucket
index|]
decl_stmt|;
for|for
control|(
name|int
name|entryInBucket
init|=
name|nextInBucketKToV
index|[
name|prevInBucket
index|]
init|;
comment|/* should never reach end */
condition|;
name|entryInBucket
operator|=
name|nextInBucketKToV
index|[
name|entryInBucket
index|]
control|)
block|{
if|if
condition|(
name|entryInBucket
operator|==
name|src
condition|)
block|{
name|nextInBucketKToV
index|[
name|prevInBucket
index|]
operator|=
name|dest
expr_stmt|;
break|break;
block|}
name|prevInBucket
operator|=
name|entryInBucket
expr_stmt|;
block|}
block|}
name|nextInBucketKToV
index|[
name|dest
index|]
operator|=
name|nextInBucketKToV
index|[
name|src
index|]
expr_stmt|;
name|nextInBucketKToV
index|[
name|src
index|]
operator|=
name|ABSENT
expr_stmt|;
comment|// update pointers in hashTableVToK
name|int
name|valueHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|valueBucket
init|=
name|bucket
argument_list|(
name|valueHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|==
name|src
condition|)
block|{
name|hashTableVToK
index|[
name|valueBucket
index|]
operator|=
name|dest
expr_stmt|;
block|}
else|else
block|{
name|int
name|prevInBucket
init|=
name|hashTableVToK
index|[
name|valueBucket
index|]
decl_stmt|;
for|for
control|(
name|int
name|entryInBucket
init|=
name|nextInBucketVToK
index|[
name|prevInBucket
index|]
init|;
comment|/* should never reach end*/
condition|;
name|entryInBucket
operator|=
name|nextInBucketVToK
index|[
name|entryInBucket
index|]
control|)
block|{
if|if
condition|(
name|entryInBucket
operator|==
name|src
condition|)
block|{
name|nextInBucketVToK
index|[
name|prevInBucket
index|]
operator|=
name|dest
expr_stmt|;
break|break;
block|}
name|prevInBucket
operator|=
name|entryInBucket
expr_stmt|;
block|}
block|}
name|nextInBucketVToK
index|[
name|dest
index|]
operator|=
name|nextInBucketVToK
index|[
name|src
index|]
expr_stmt|;
name|nextInBucketVToK
index|[
name|src
index|]
operator|=
name|ABSENT
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|hashTableKToV
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|hashTableVToK
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|nextInBucketKToV
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|nextInBucketVToK
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|prevInInsertionOrder
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|nextInInsertionOrder
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|ABSENT
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|firstInInsertionOrder
operator|=
name|ENDPOINT
expr_stmt|;
name|lastInInsertionOrder
operator|=
name|ENDPOINT
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
comment|/** Shared supertype of keySet, values, entrySet, and inverse.entrySet. */
DECL|class|View
specifier|abstract
specifier|static
class|class
name|View
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|T
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|T
argument_list|>
block|{
DECL|field|biMap
specifier|final
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
decl_stmt|;
DECL|method|View (HashBiMap<K, V> biMap)
name|View
parameter_list|(
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
parameter_list|)
block|{
name|this
operator|.
name|biMap
operator|=
name|biMap
expr_stmt|;
block|}
DECL|method|forEntry (int entry)
specifier|abstract
name|T
name|forEntry
parameter_list|(
name|int
name|entry
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|index
init|=
name|biMap
operator|.
name|firstInInsertionOrder
decl_stmt|;
specifier|private
name|int
name|indexToRemove
init|=
name|ABSENT
decl_stmt|;
specifier|private
name|int
name|expectedModCount
init|=
name|biMap
operator|.
name|modCount
decl_stmt|;
comment|// Calls to setValue on inverse entries can move already-visited entries to the end.
comment|// Make sure we don't visit those.
specifier|private
name|int
name|remaining
init|=
name|biMap
operator|.
name|size
decl_stmt|;
specifier|private
name|void
name|checkForComodification
parameter_list|()
block|{
if|if
condition|(
name|biMap
operator|.
name|modCount
operator|!=
name|expectedModCount
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|checkForComodification
argument_list|()
expr_stmt|;
return|return
name|index
operator|!=
name|ENDPOINT
operator|&&
name|remaining
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|T
name|result
init|=
name|forEntry
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|indexToRemove
operator|=
name|index
expr_stmt|;
name|index
operator|=
name|biMap
operator|.
name|nextInInsertionOrder
index|[
name|index
index|]
expr_stmt|;
name|remaining
operator|--
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkForComodification
argument_list|()
expr_stmt|;
name|CollectPreconditions
operator|.
name|checkRemove
argument_list|(
name|indexToRemove
operator|!=
name|ABSENT
argument_list|)
expr_stmt|;
name|biMap
operator|.
name|removeEntry
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|biMap
operator|.
name|size
condition|)
block|{
name|index
operator|=
name|indexToRemove
expr_stmt|;
block|}
name|indexToRemove
operator|=
name|ABSENT
expr_stmt|;
name|expectedModCount
operator|=
name|biMap
operator|.
name|modCount
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|biMap
operator|.
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|biMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|keySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|result
init|=
name|keySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|keySet
operator|=
operator|new
name|KeySet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|KeySet
specifier|final
class|class
name|KeySet
extends|extends
name|View
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|>
block|{
DECL|method|KeySet ()
name|KeySet
parameter_list|()
block|{
name|super
argument_list|(
name|HashBiMap
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forEntry (int entry)
name|K
name|forEntry
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
name|keys
index|[
name|entry
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
return|return
name|HashBiMap
operator|.
name|this
operator|.
name|containsKey
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullableDecl Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
name|int
name|oHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|int
name|entry
init|=
name|findEntryByKey
argument_list|(
name|o
argument_list|,
name|oHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
name|ABSENT
condition|)
block|{
name|removeEntryKeyHashKnown
argument_list|(
name|entry
argument_list|,
name|oHash
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|field|valueSet
specifier|private
specifier|transient
name|Set
argument_list|<
name|V
argument_list|>
name|valueSet
decl_stmt|;
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|Set
argument_list|<
name|V
argument_list|>
name|result
init|=
name|valueSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|valueSet
operator|=
operator|new
name|ValueSet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|ValueSet
specifier|final
class|class
name|ValueSet
extends|extends
name|View
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ValueSet ()
name|ValueSet
parameter_list|()
block|{
name|super
argument_list|(
name|HashBiMap
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forEntry (int entry)
name|V
name|forEntry
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
name|values
index|[
name|entry
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
return|return
name|HashBiMap
operator|.
name|this
operator|.
name|containsValue
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (@ullableDecl Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
name|int
name|oHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|int
name|entry
init|=
name|findEntryByValue
argument_list|(
name|o
argument_list|,
name|oHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
name|ABSENT
condition|)
block|{
name|removeEntryValueHashKnown
argument_list|(
name|entry
argument_list|,
name|oHash
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|field|entrySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|result
init|=
name|entrySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|entrySet
operator|=
operator|new
name|EntrySet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|EntrySet
specifier|final
class|class
name|EntrySet
extends|extends
name|View
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|EntrySet ()
name|EntrySet
parameter_list|()
block|{
name|super
argument_list|(
name|HashBiMap
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
annotation|@
name|NullableDecl
name|Object
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|NullableDecl
name|Object
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|eIndex
init|=
name|findEntryByKey
argument_list|(
name|k
argument_list|)
decl_stmt|;
return|return
name|eIndex
operator|!=
name|ABSENT
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|v
argument_list|,
name|values
index|[
name|eIndex
index|]
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|remove (@ullableDecl Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
annotation|@
name|NullableDecl
name|Object
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
annotation|@
name|NullableDecl
name|Object
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|kHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|int
name|eIndex
init|=
name|findEntryByKey
argument_list|(
name|k
argument_list|,
name|kHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|eIndex
operator|!=
name|ABSENT
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|v
argument_list|,
name|values
index|[
name|eIndex
index|]
argument_list|)
condition|)
block|{
name|removeEntryKeyHashKnown
argument_list|(
name|eIndex
argument_list|,
name|kHash
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|forEntry (int entry)
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|forEntry
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
operator|new
name|EntryForKey
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
comment|/**    * An {@code Entry} implementation that attempts to follow its key around the map -- that is, if    * the key is moved, deleted, or reinserted, it will account for that -- while not doing any extra    * work if the key has not moved.    */
DECL|class|EntryForKey
specifier|final
class|class
name|EntryForKey
extends|extends
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|key
annotation|@
name|NullableDecl
specifier|final
name|K
name|key
decl_stmt|;
DECL|field|index
name|int
name|index
decl_stmt|;
DECL|method|EntryForKey (int index)
name|EntryForKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|keys
index|[
name|index
index|]
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|updateIndex ()
name|void
name|updateIndex
parameter_list|()
block|{
if|if
condition|(
name|index
operator|==
name|ABSENT
operator|||
name|index
operator|>
name|size
operator|||
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|keys
index|[
name|index
index|]
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|index
operator|=
name|findEntryByKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
annotation|@
name|NullableDecl
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
name|updateIndex
argument_list|()
expr_stmt|;
return|return
operator|(
name|index
operator|==
name|ABSENT
operator|)
condition|?
literal|null
else|:
name|values
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (V value)
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|updateIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|ABSENT
condition|)
block|{
return|return
name|HashBiMap
operator|.
name|this
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
name|V
name|oldValue
init|=
name|values
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|oldValue
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
name|replaceValueInEntry
argument_list|(
name|index
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
DECL|field|inverse
annotation|@
name|MonotonicNonNullDecl
annotation|@
name|RetainedWith
specifier|private
specifier|transient
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
decl_stmt|;
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|result
init|=
name|inverse
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|inverse
operator|=
operator|new
name|Inverse
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|)
else|:
name|result
return|;
block|}
DECL|class|Inverse
specifier|static
class|class
name|Inverse
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
implements|implements
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|forward
specifier|private
specifier|final
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|forward
decl_stmt|;
DECL|method|Inverse (HashBiMap<K, V> forward)
name|Inverse
parameter_list|(
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|forward
parameter_list|)
block|{
name|this
operator|.
name|forward
operator|=
name|forward
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|forward
operator|.
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (@ullableDecl Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
return|return
name|forward
operator|.
name|containsValue
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|NullableDecl
DECL|method|get (@ullableDecl Object key)
specifier|public
name|K
name|get
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|key
parameter_list|)
block|{
return|return
name|forward
operator|.
name|getInverse
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (@ullableDecl Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
return|return
name|forward
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|NullableDecl
DECL|method|put (@ullableDecl V value, @NullableDecl K key)
specifier|public
name|K
name|put
parameter_list|(
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|,
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|)
block|{
return|return
name|forward
operator|.
name|putInverse
argument_list|(
name|value
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|NullableDecl
DECL|method|forcePut (@ullableDecl V value, @NullableDecl K key)
specifier|public
name|K
name|forcePut
parameter_list|(
annotation|@
name|NullableDecl
name|V
name|value
parameter_list|,
annotation|@
name|NullableDecl
name|K
name|key
parameter_list|)
block|{
return|return
name|forward
operator|.
name|putInverse
argument_list|(
name|value
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|inverse
parameter_list|()
block|{
return|return
name|forward
return|;
block|}
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
annotation|@
name|NullableDecl
DECL|method|remove (@ullableDecl Object value)
specifier|public
name|K
name|remove
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|value
parameter_list|)
block|{
return|return
name|forward
operator|.
name|removeInverse
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|forward
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|forward
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|forward
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|field|inverseEntrySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|inverseEntrySet
decl_stmt|;
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|result
init|=
name|inverseEntrySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|inverseEntrySet
operator|=
operator|new
name|InverseEntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|forward
argument_list|)
else|:
name|result
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"serialization"
argument_list|)
DECL|method|readObject (ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|in
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|this
operator|.
name|forward
operator|.
name|inverse
operator|=
name|this
expr_stmt|;
block|}
block|}
DECL|class|InverseEntrySet
specifier|static
class|class
name|InverseEntrySet
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|View
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
block|{
DECL|method|InverseEntrySet (HashBiMap<K, V> biMap)
name|InverseEntrySet
parameter_list|(
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
parameter_list|)
block|{
name|super
argument_list|(
name|biMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (@ullableDecl Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|Object
name|v
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|k
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|eIndex
init|=
name|biMap
operator|.
name|findEntryByValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
return|return
name|eIndex
operator|!=
name|ABSENT
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|biMap
operator|.
name|keys
index|[
name|eIndex
index|]
argument_list|,
name|k
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|Object
name|v
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|k
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|vHash
init|=
name|Hashing
operator|.
name|smearedHash
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|int
name|eIndex
init|=
name|biMap
operator|.
name|findEntryByValue
argument_list|(
name|v
argument_list|,
name|vHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|eIndex
operator|!=
name|ABSENT
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|biMap
operator|.
name|keys
index|[
name|eIndex
index|]
argument_list|,
name|k
argument_list|)
condition|)
block|{
name|biMap
operator|.
name|removeEntryValueHashKnown
argument_list|(
name|eIndex
argument_list|,
name|vHash
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|forEntry (int entry)
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|forEntry
parameter_list|(
name|int
name|entry
parameter_list|)
block|{
return|return
operator|new
name|EntryForValue
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|biMap
argument_list|,
name|entry
argument_list|)
return|;
block|}
block|}
comment|/**    * An {@code Entry} implementation that attempts to follow its value around the map -- that is, if    * the value is moved, deleted, or reinserted, it will account for that -- while not doing any    * extra work if the value has not moved.    */
DECL|class|EntryForValue
specifier|static
specifier|final
class|class
name|EntryForValue
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapEntry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
block|{
DECL|field|biMap
specifier|final
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
decl_stmt|;
DECL|field|value
specifier|final
name|V
name|value
decl_stmt|;
DECL|field|index
name|int
name|index
decl_stmt|;
DECL|method|EntryForValue (HashBiMap<K, V> biMap, int index)
name|EntryForValue
parameter_list|(
name|HashBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|biMap
operator|=
name|biMap
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|biMap
operator|.
name|values
index|[
name|index
index|]
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|updateIndex ()
specifier|private
name|void
name|updateIndex
parameter_list|()
block|{
if|if
condition|(
name|index
operator|==
name|ABSENT
operator|||
name|index
operator|>
name|biMap
operator|.
name|size
operator|||
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|biMap
operator|.
name|values
index|[
name|index
index|]
argument_list|)
condition|)
block|{
name|index
operator|=
name|biMap
operator|.
name|findEntryByValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|V
name|getKey
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|K
name|getValue
parameter_list|()
block|{
name|updateIndex
argument_list|()
expr_stmt|;
return|return
operator|(
name|index
operator|==
name|ABSENT
operator|)
condition|?
literal|null
else|:
name|biMap
operator|.
name|keys
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (K key)
specifier|public
name|K
name|setValue
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|updateIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|ABSENT
condition|)
block|{
return|return
name|biMap
operator|.
name|putInverse
argument_list|(
name|value
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|K
name|oldKey
init|=
name|biMap
operator|.
name|keys
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|oldKey
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
name|biMap
operator|.
name|replaceKeyInEntry
argument_list|(
name|index
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|oldKey
return|;
block|}
block|}
comment|/**    * @serialData the number of entries, first key, first value, second key, second value, and so on.    */
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectOutputStream
DECL|method|writeObject (ObjectOutputStream stream)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|Serialization
operator|.
name|writeMap
argument_list|(
name|this
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// java.io.ObjectInputStream
DECL|method|readObject (ObjectInputStream stream)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|stream
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|Serialization
operator|.
name|readCount
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|init
argument_list|(
literal|16
argument_list|)
expr_stmt|;
comment|// resist hostile attempts to allocate gratuitous heap
name|Serialization
operator|.
name|populateMap
argument_list|(
name|this
argument_list|,
name|stream
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

