begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Provides static methods for working with {@link Comparator} instances. For many other helpful  * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code  * com.google.common.collect.Ordering} (otherwise).  *  *<h3>Relationship to {@code Ordering}</h3>  *  *<p>In light of the significant enhancements to {@code Comparator} in Java 8, the overwhelming  * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is  * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by  * the JDK.  *  * @since 21.0  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|Comparators
specifier|public
specifier|final
class|class
name|Comparators
block|{
DECL|method|Comparators ()
specifier|private
name|Comparators
parameter_list|()
block|{}
comment|/**    * Returns a new comparator which sorts iterables by comparing corresponding elements pairwise    * until a nonzero result is found; imposes "dictionary order." If the end of one iterable is    * reached, but not the other, the shorter iterable is considered to be less than the longer one.    * For example, a lexicographical natural ordering over integers considers {@code []< [1]< [1,    * 1]< [1, 2]< [2]}.    *    *<p>Note that {@code Collections.reverseOrder(lexicographical(comparator))} is not equivalent to    * {@code lexicographical(Collections.reverseOrder(comparator))} (consider how each would order    * {@code [1]} and {@code [1, 1]}).    */
comment|// Note: 90% of the time we don't add type parameters or wildcards that serve only to "tweak" the
comment|// desired return type. However, *nested* generics introduce a special class of problems that we
comment|// think tip it over into being worthwhile.
DECL|method|lexicographical ( Comparator<T> comparator)
specifier|public
specifier|static
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|,
name|S
expr|extends
name|T
operator|>
name|Comparator
argument_list|<
name|Iterable
argument_list|<
name|S
argument_list|>
argument_list|>
name|lexicographical
argument_list|(
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
argument_list|)
block|{
return|return
operator|new
name|LexicographicalOrdering
argument_list|<
name|S
argument_list|>
argument_list|(
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns {@code true} if each element in {@code iterable} after the first is greater than or    * equal to the element that preceded it, according to the specified comparator. Note that this is    * always true when the iterable has fewer than two elements.    */
DECL|method|isInOrder ( Iterable<? extends T> iterable, Comparator<T> comparator)
specifier|public
specifier|static
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|boolean
name|isInOrder
argument_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|iterable
operator|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
argument_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
block|;
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|it
operator|=
name|iterable
operator|.
name|iterator
argument_list|()
block|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|prev
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|prev
argument_list|,
name|next
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|next
expr_stmt|;
block|}
end_class

begin_expr_stmt
unit|}     return
literal|true
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**    * Returns {@code true} if each element in {@code iterable} after the first is<i>strictly</i>    * greater than the element that preceded it, according to the specified comparator. Note that    * this is always true when the iterable has fewer than two elements.    */
end_comment

begin_expr_stmt
DECL|method|isInStrictOrder ( Iterable<? extends T> iterable, Comparator<T> comparator)
unit|public
specifier|static
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|boolean
name|isInStrictOrder
argument_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|iterable
operator|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
argument_list|)
block|{
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
block|;
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|it
operator|=
name|iterable
operator|.
name|iterator
argument_list|()
block|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|prev
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|prev
argument_list|,
name|next
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|next
expr_stmt|;
end_expr_stmt

begin_return
unit|}     }
return|return
literal|true
return|;
end_return

begin_comment
unit|}
comment|/**    * Returns the minimum of the two values. If the values compare as 0, the first is returned.    *    *<p>The recommended solution for finding the {@code minimum} of some values depends on the type    * of your data and the number of elements you have. Read more in the Guava User Guide article on    *<a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#comparators">{@code    * Comparators}</a>.    *    * @param a first value to compare, returned if less than or equal to b.    * @param b second value to compare.    * @throws ClassCastException if the parameters are not<i>mutually comparable</i>.    * @since 30.0    */
end_comment

begin_function
unit|@
name|Beta
DECL|method|min (T a, T b)
specifier|public
specifier|static
argument_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
argument_list|>
name|T
name|min
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|<=
literal|0
operator|)
condition|?
name|a
else|:
name|b
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the minimum of the two values, according to the given comparator. If the values compare    * as equal, the first is returned.    *    *<p>The recommended solution for finding the {@code minimum} of some values depends on the type    * of your data and the number of elements you have. Read more in the Guava User Guide article on    *<a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#comparators">{@code    * Comparators}</a>.    *    * @param a first value to compare, returned if less than or equal to b    * @param b second value to compare.    * @throws ClassCastException if the parameters are not<i>mutually comparable</i> using the given    *     comparator.    * @since 30.0    */
end_comment

begin_annotation
annotation|@
name|Beta
end_annotation

begin_annotation
annotation|@
name|ParametricNullness
end_annotation

begin_expr_stmt
DECL|method|min ( @arametricNullness T a, @ParametricNullness T b, Comparator<T> comparator)
specifier|public
specifier|static
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
name|min
argument_list|(
annotation|@
name|ParametricNullness
name|T
name|a
argument_list|,
annotation|@
name|ParametricNullness
name|T
name|b
argument_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
argument_list|)
block|{
return|return
operator|(
name|comparator
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<=
literal|0
operator|)
operator|?
name|a
operator|:
name|b
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    * Returns the maximum of the two values. If the values compare as 0, the first is returned.    *    *<p>The recommended solution for finding the {@code maximum} of some values depends on the type    * of your data and the number of elements you have. Read more in the Guava User Guide article on    *<a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#comparators">{@code    * Comparators}</a>.    *    * @param a first value to compare, returned if greater than or equal to b.    * @param b second value to compare.    * @throws ClassCastException if the parameters are not<i>mutually comparable</i>.    * @since 30.0    */
end_comment

begin_function
annotation|@
name|Beta
DECL|method|max (T a, T b)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|T
name|max
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|>=
literal|0
operator|)
condition|?
name|a
else|:
name|b
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the maximum of the two values, according to the given comparator. If the values compare    * as equal, the first is returned.    *    *<p>The recommended solution for finding the {@code maximum} of some values depends on the type    * of your data and the number of elements you have. Read more in the Guava User Guide article on    *<a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#comparators">{@code    * Comparators}</a>.    *    * @param a first value to compare, returned if greater than or equal to b.    * @param b second value to compare.    * @throws ClassCastException if the parameters are not<i>mutually comparable</i> using the given    *     comparator.    * @since 30.0    */
end_comment

begin_annotation
annotation|@
name|Beta
end_annotation

begin_annotation
annotation|@
name|ParametricNullness
end_annotation

begin_expr_stmt
DECL|method|max ( @arametricNullness T a, @ParametricNullness T b, Comparator<T> comparator)
specifier|public
specifier|static
operator|<
name|T
expr|extends @
name|Nullable
name|Object
operator|>
name|T
name|max
argument_list|(
annotation|@
name|ParametricNullness
name|T
name|a
argument_list|,
annotation|@
name|ParametricNullness
name|T
name|b
argument_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
argument_list|)
block|{
return|return
operator|(
name|comparator
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|>=
literal|0
operator|)
operator|?
name|a
operator|:
name|b
return|;
block|}
end_expr_stmt

unit|}
end_unit

