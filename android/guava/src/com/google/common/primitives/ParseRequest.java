begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_comment
comment|/**  * A string to be parsed as a number and the radix to interpret it in.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|ParseRequest
specifier|final
class|class
name|ParseRequest
block|{
DECL|field|rawValue
specifier|final
name|String
name|rawValue
decl_stmt|;
DECL|field|radix
specifier|final
name|int
name|radix
decl_stmt|;
DECL|method|ParseRequest (String rawValue, int radix)
specifier|private
name|ParseRequest
parameter_list|(
name|String
name|rawValue
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|this
operator|.
name|rawValue
operator|=
name|rawValue
expr_stmt|;
name|this
operator|.
name|radix
operator|=
name|radix
expr_stmt|;
block|}
DECL|method|fromString (String stringValue)
specifier|static
name|ParseRequest
name|fromString
parameter_list|(
name|String
name|stringValue
parameter_list|)
block|{
if|if
condition|(
name|stringValue
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"empty string"
argument_list|)
throw|;
block|}
comment|// Handle radix specifier if present
name|String
name|rawValue
decl_stmt|;
name|int
name|radix
decl_stmt|;
name|char
name|firstChar
init|=
name|stringValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringValue
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|)
operator|||
name|stringValue
operator|.
name|startsWith
argument_list|(
literal|"0X"
argument_list|)
condition|)
block|{
name|rawValue
operator|=
name|stringValue
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|radix
operator|=
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstChar
operator|==
literal|'#'
condition|)
block|{
name|rawValue
operator|=
name|stringValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|radix
operator|=
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstChar
operator|==
literal|'0'
operator|&&
name|stringValue
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|rawValue
operator|=
name|stringValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|radix
operator|=
literal|8
expr_stmt|;
block|}
else|else
block|{
name|rawValue
operator|=
name|stringValue
expr_stmt|;
name|radix
operator|=
literal|10
expr_stmt|;
block|}
return|return
operator|new
name|ParseRequest
argument_list|(
name|rawValue
argument_list|,
name|radix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

