begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Chars
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Shorts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_comment
comment|/**  * Abstract {@link Hasher} that handles converting primitives to bytes using a scratch {@code  * ByteBuffer} and streams all bytes to a sink to compute the hash.  *  * @author Colin Decker  */
end_comment

begin_class
annotation|@
name|CanIgnoreReturnValue
DECL|class|AbstractByteHasher
specifier|abstract
class|class
name|AbstractByteHasher
extends|extends
name|AbstractHasher
block|{
DECL|field|scratch
specifier|private
specifier|final
name|ByteBuffer
name|scratch
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
comment|/** Updates this hasher with the given byte. */
DECL|method|update (byte b)
specifier|protected
specifier|abstract
name|void
name|update
parameter_list|(
name|byte
name|b
parameter_list|)
function_decl|;
comment|/** Updates this hasher with the given bytes. */
DECL|method|update (byte[] b)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|update
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** Updates this hasher with {@code len} bytes starting at {@code off} in the given buffer. */
DECL|method|update (byte[] b, int off, int len)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|update
argument_list|(
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Updates this hasher with bytes from the given buffer. */
DECL|method|update (ByteBuffer b)
specifier|protected
name|void
name|update
parameter_list|(
name|ByteBuffer
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|update
argument_list|(
name|b
operator|.
name|array
argument_list|()
argument_list|,
name|b
operator|.
name|arrayOffset
argument_list|()
operator|+
name|b
operator|.
name|position
argument_list|()
argument_list|,
name|b
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Java8Compatibility
operator|.
name|position
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|remaining
init|=
name|b
operator|.
name|remaining
argument_list|()
init|;
name|remaining
operator|>
literal|0
condition|;
name|remaining
operator|--
control|)
block|{
name|update
argument_list|(
name|b
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Updates the sink with the given number of bytes from the buffer. */
DECL|method|update (int bytes)
specifier|private
name|Hasher
name|update
parameter_list|(
name|int
name|bytes
parameter_list|)
block|{
try|try
block|{
name|update
argument_list|(
name|scratch
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Java8Compatibility
operator|.
name|clear
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putByte (byte b)
specifier|public
name|Hasher
name|putByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (byte[] bytes)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (byte[] bytes, int off, int len)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checkPositionIndexes
argument_list|(
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putBytes (ByteBuffer bytes)
specifier|public
name|Hasher
name|putBytes
parameter_list|(
name|ByteBuffer
name|bytes
parameter_list|)
block|{
name|update
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|putShort (short s)
specifier|public
name|Hasher
name|putShort
parameter_list|(
name|short
name|s
parameter_list|)
block|{
name|scratch
operator|.
name|putShort
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|update
argument_list|(
name|Shorts
operator|.
name|BYTES
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putInt (int i)
specifier|public
name|Hasher
name|putInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|scratch
operator|.
name|putInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|update
argument_list|(
name|Ints
operator|.
name|BYTES
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putLong (long l)
specifier|public
name|Hasher
name|putLong
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|scratch
operator|.
name|putLong
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|update
argument_list|(
name|Longs
operator|.
name|BYTES
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putChar (char c)
specifier|public
name|Hasher
name|putChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|scratch
operator|.
name|putChar
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|update
argument_list|(
name|Chars
operator|.
name|BYTES
argument_list|)
return|;
block|}
block|}
end_class

end_unit

