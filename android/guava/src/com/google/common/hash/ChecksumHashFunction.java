begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * {@link HashFunction} adapter for {@link Checksum} instances.  *  * @author Colin Decker  */
end_comment

begin_class
annotation|@
name|Immutable
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|ChecksumHashFunction
specifier|final
class|class
name|ChecksumHashFunction
extends|extends
name|AbstractHashFunction
implements|implements
name|Serializable
block|{
DECL|field|checksumSupplier
specifier|private
specifier|final
name|ImmutableSupplier
argument_list|<
name|?
extends|extends
name|Checksum
argument_list|>
name|checksumSupplier
decl_stmt|;
DECL|field|bits
specifier|private
specifier|final
name|int
name|bits
decl_stmt|;
DECL|field|toString
specifier|private
specifier|final
name|String
name|toString
decl_stmt|;
DECL|method|ChecksumHashFunction ( ImmutableSupplier<? extends Checksum> checksumSupplier, int bits, String toString)
name|ChecksumHashFunction
parameter_list|(
name|ImmutableSupplier
argument_list|<
name|?
extends|extends
name|Checksum
argument_list|>
name|checksumSupplier
parameter_list|,
name|int
name|bits
parameter_list|,
name|String
name|toString
parameter_list|)
block|{
name|this
operator|.
name|checksumSupplier
operator|=
name|checkNotNull
argument_list|(
name|checksumSupplier
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|bits
operator|==
literal|32
operator|||
name|bits
operator|==
literal|64
argument_list|,
literal|"bits (%s) must be either 32 or 64"
argument_list|,
name|bits
argument_list|)
expr_stmt|;
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
name|this
operator|.
name|toString
operator|=
name|checkNotNull
argument_list|(
name|toString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bits ()
specifier|public
name|int
name|bits
parameter_list|()
block|{
return|return
name|bits
return|;
block|}
annotation|@
name|Override
DECL|method|newHasher ()
specifier|public
name|Hasher
name|newHasher
parameter_list|()
block|{
return|return
operator|new
name|ChecksumHasher
argument_list|(
name|checksumSupplier
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
return|;
block|}
comment|/** Hasher that updates a checksum. */
DECL|class|ChecksumHasher
specifier|private
specifier|final
class|class
name|ChecksumHasher
extends|extends
name|AbstractByteHasher
block|{
DECL|field|checksum
specifier|private
specifier|final
name|Checksum
name|checksum
decl_stmt|;
DECL|method|ChecksumHasher (Checksum checksum)
specifier|private
name|ChecksumHasher
parameter_list|(
name|Checksum
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|checksum
operator|=
name|checkNotNull
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (byte b)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|checksum
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (byte[] bytes, int off, int len)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|checksum
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash ()
specifier|public
name|HashCode
name|hash
parameter_list|()
block|{
name|long
name|value
init|=
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|bits
operator|==
literal|32
condition|)
block|{
comment|/*          * The long returned from a 32-bit Checksum will have all 0s for its second word, so the          * cast won't lose any information and is necessary to return a HashCode of the correct          * size.          */
return|return
name|HashCode
operator|.
name|fromInt
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|HashCode
operator|.
name|fromLong
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
block|}
end_class

end_unit

