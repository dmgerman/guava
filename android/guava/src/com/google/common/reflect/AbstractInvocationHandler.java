begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of {@link InvocationHandler} that handles {@link Object#equals}, {@link  * Object#hashCode} and {@link Object#toString}. For example:  *  *<pre>  * class Unsupported extends AbstractInvocationHandler {  *   protected Object handleInvocation(Object proxy, Method method, Object[] args) {  *     throw new UnsupportedOperationException();  *   }  * }  *  * CharSequence unsupported = Reflection.newProxy(CharSequence.class, new Unsupported());  *</pre>  *  * @author Ben Yu  * @since 12.0  */
end_comment

begin_class
annotation|@
name|Beta
comment|// TODO(cpovirk): after adding @Nullable below
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|AbstractInvocationHandler
specifier|public
specifier|abstract
class|class
name|AbstractInvocationHandler
implements|implements
name|InvocationHandler
block|{
DECL|field|NO_ARGS
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|NO_ARGS
init|=
block|{}
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<ul>    *<li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode}    *<li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString}    *<li>{@code proxy.equals(argument)} returns true if:    *<ul>    *<li>{@code proxy} and {@code argument} are of the same type    *<li>and {@link AbstractInvocationHandler#equals} returns true for the {@link    *             InvocationHandler} of {@code argument}    *</ul>    *<li>other method calls are dispatched to {@link #handleInvocation}.    *</ul>    */
annotation|@
name|Override
annotation|@
name|CheckForNull
DECL|method|invoke (Object proxy, Method method, @CheckForNull @Nullable Object[] args)
specifier|public
specifier|final
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
annotation|@
name|CheckForNull
annotation|@
name|Nullable
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
name|args
operator|=
name|NO_ARGS
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
operator|&&
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hashCode"
argument_list|)
condition|)
block|{
return|return
name|hashCode
argument_list|()
return|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|Object
operator|.
name|class
condition|)
block|{
name|Object
name|arg
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|proxy
operator|==
name|arg
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|isProxyOfSameInterfaces
argument_list|(
name|arg
argument_list|,
name|proxy
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|arg
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
operator|&&
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"toString"
argument_list|)
condition|)
block|{
return|return
name|toString
argument_list|()
return|;
block|}
return|return
name|handleInvocation
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * {@link #invoke} delegates to this method upon any method invocation on the proxy instance,    * except {@link Object#equals}, {@link Object#hashCode} and {@link Object#toString}. The result    * will be returned as the proxied method's return value.    *    *<p>Unlike {@link #invoke}, {@code args} will never be null. When the method has no parameter,    * an empty array is passed in.    */
annotation|@
name|CheckForNull
DECL|method|handleInvocation ( Object proxy, Method method, Object[] args)
specifier|protected
specifier|abstract
name|Object
name|handleInvocation
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
comment|/* TODO(cpovirk): @Nullable */
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
function_decl|;
comment|/**    * By default delegates to {@link Object#equals} so instances are only equal if they are    * identical. {@code proxy.equals(argument)} returns true if:    *    *<ul>    *<li>{@code proxy} and {@code argument} are of the same type    *<li>and this method returns true for the {@link InvocationHandler} of {@code argument}    *</ul>    *    *<p>Subclasses can override this method to provide custom equality.    */
annotation|@
name|Override
DECL|method|equals (@heckForNull Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|CheckForNull
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/**    * By default delegates to {@link Object#hashCode}. The dynamic proxies' {@code hashCode()} will    * delegate to this method. Subclasses can override this method to provide custom equality.    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * By default delegates to {@link Object#toString}. The dynamic proxies' {@code toString()} will    * delegate to this method. Subclasses can override this method to provide custom string    * representation for the proxies.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isProxyOfSameInterfaces (Object arg, Class<?> proxyClass)
specifier|private
specifier|static
name|boolean
name|isProxyOfSameInterfaces
parameter_list|(
name|Object
name|arg
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|proxyClass
parameter_list|)
block|{
return|return
name|proxyClass
operator|.
name|isInstance
argument_list|(
name|arg
argument_list|)
comment|// Equal proxy instances should mostly be instance of proxyClass
comment|// Under some edge cases (such as the proxy of JDK types serialized and then deserialized)
comment|// the proxy type may not be the same.
comment|// We first check isProxyClass() so that the common case of comparing with non-proxy objects
comment|// is efficient.
operator|||
operator|(
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|arg
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|arg
operator|.
name|getClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
argument_list|,
name|proxyClass
operator|.
name|getInterfaces
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

