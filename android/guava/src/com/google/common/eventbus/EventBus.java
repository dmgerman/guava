begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Dispatches events to listeners, and provides ways for listeners to register themselves.  *  *<h2>Avoid EventBus</h2>  *  *<p><b>We recommend against using EventBus.</b> It was designed many years ago, and newer  * libraries offer better ways to decouple components and react to events.  *  *<p>To decouple components, we recommend a dependency-injection framework. For Android code, most  * apps use<a href="https://dagger.dev">Dagger</a>. For server code, common options include<a  * href="https://github.com/google/guice/wiki/Motivation">Guice</a> and<a  * href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-introduction">Spring</a>.  * Frameworks typically offer a way to register multiple listeners independently and then request  * them together as a set (<a href="https://dagger.dev/dev-guide/multibindings">Dagger</a>,<a  * href="https://github.com/google/guice/wiki/Multibindings">Guice</a>,<a  * href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation">Spring</a>).  *  *<p>To react to events, we recommend a reactive-streams framework like<a  * href="https://github.com/ReactiveX/RxJava/wiki">RxJava</a> (supplemented with its<a  * href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a> extension if you are building for  * Android) or<a href="https://projectreactor.io/">Project Reactor</a>. (For the basics of  * translating code from using an event bus to using a reactive-streams framework, see these two  * guides:<a href="https://blog.jkl.gg/implementing-an-event-bus-with-rxjava-rxbus/">1</a>,<a  * href="https://lorentzos.com/rxjava-as-event-bus-the-right-way-10a36bdd49ba">2</a>.) Some usages  * of EventBus may be better written using<a  * href="https://kotlinlang.org/docs/coroutines-guide.html">Kotlin coroutines</a>, including<a  * href="https://kotlinlang.org/docs/flow.html">Flow</a> and<a  * href="https://kotlinlang.org/docs/channels.html">Channels</a>. Yet other usages are better served  * by individual libraries that provide specialized support for particular use cases.  *  *<p>Disadvantages of EventBus include:  *  *<ul>  *<li>It makes the cross-references between producer and subscriber harder to find. This can  *       complicate debugging, lead to unintentional reentrant calls, and force apps to eagerly  *       initialize all possible subscribers at startup time.  *<li>It uses reflection in ways that break when code is processed by optimizers/minimizers like  *<a href="https://developer.android.com/studio/build/shrink-code">R8 and Proguard</a>.  *<li>It doesn't offer a way to wait for multiple events before taking action. For example, it  *       doesn't offer a way to wait for multiple producers to all report that they're "ready," nor  *       does it offer a way to batch multiple events from a single producer together.  *<li>It doesn't support backpressure and other features needed for resilience.  *<li>It doesn't provide much control of threading.  *<li>It doesn't offer much monitoring.  *<li>It doesn't propagate exceptions, so apps don't have a way to react to them.  *<li>It doesn't interoperate well with RxJava, coroutines, and other more commonly used  *       alternatives.  *<li>It imposes requirements on the lifecycle of its subscribers. For example, if an event  *       occurs between when one subscriber is removed and the next subscriber is added, the event  *       is dropped.  *<li>Its performance is suboptimal, especially under Android.  *<li>It<a href="https://github.com/google/guava/issues/1431">doesn't support parameterized  *       types</a>.  *<li>With the introduction of lambdas in Java 8, EventBus went from less verbose than listeners  *       to<a href="https://github.com/google/guava/issues/3311">more verbose</a>.  *</ul>  *  *<h2>EventBus Summary</h2>  *  *<p>The EventBus allows publish-subscribe-style communication between components without requiring  * the components to explicitly register with one another (and thus be aware of each other). It is  * designed exclusively to replace traditional Java in-process event distribution using explicit  * registration. It is<em>not</em> a general-purpose publish-subscribe system, nor is it intended  * for interprocess communication.  *  *<h2>Receiving Events</h2>  *  *<p>To receive events, an object should:  *  *<ol>  *<li>Expose a public method, known as the<i>event subscriber</i>, which accepts a single  *       argument of the type of event desired;  *<li>Mark it with a {@link Subscribe} annotation;  *<li>Pass itself to an EventBus instance's {@link #register(Object)} method.  *</ol>  *  *<h2>Posting Events</h2>  *  *<p>To post an event, simply provide the event object to the {@link #post(Object)} method. The  * EventBus instance will determine the type of event and route it to all registered listeners.  *  *<p>Events are routed based on their type&mdash; an event will be delivered to any subscriber for  * any type to which the event is<em>assignable.</em> This includes implemented interfaces, all  * superclasses, and all interfaces implemented by superclasses.  *  *<p>When {@code post} is called, all registered subscribers for an event are run in sequence, so  * subscribers should be reasonably quick. If an event may trigger an extended process (such as a  * database load), spawn a thread or queue it for later. (For a convenient way to do this, use an  * {@link AsyncEventBus}.)  *  *<h2>Subscriber Methods</h2>  *  *<p>Event subscriber methods must accept only one argument: the event.  *  *<p>Subscribers should not, in general, throw. If they do, the EventBus will catch and log the  * exception. This is rarely the right solution for error handling and should not be relied upon; it  * is intended solely to help find problems during development.  *  *<p>The EventBus guarantees that it will not call a subscriber method from multiple threads  * simultaneously, unless the method explicitly allows it by bearing the {@link  * AllowConcurrentEvents} annotation. If this annotation is not present, subscriber methods need not  * worry about being reentrant, unless also called from outside the EventBus.  *  *<h2>Dead Events</h2>  *  *<p>If an event is posted, but no registered subscribers can accept it, it is considered "dead."  * To give the system a second chance to handle dead events, they are wrapped in an instance of  * {@link DeadEvent} and reposted.  *  *<p>If a subscriber for a supertype of all events (such as Object) is registered, no event will  * ever be considered dead, and no DeadEvents will be generated. Accordingly, while DeadEvent  * extends {@link Object}, a subscriber registered to receive any Object will never receive a  * DeadEvent.  *  *<p>This class is safe for concurrent use.  *  *<p>See the Guava User Guide article on<a  * href="https://github.com/google/guava/wiki/EventBusExplained">{@code EventBus}</a>.  *  * @author Cliff Biffle  * @since 10.0  */
end_comment

begin_class
annotation|@
name|ElementTypesAreNonnullByDefault
DECL|class|EventBus
specifier|public
class|class
name|EventBus
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|EventBus
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|identifier
specifier|private
specifier|final
name|String
name|identifier
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
specifier|final
name|SubscriberExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|field|subscribers
specifier|private
specifier|final
name|SubscriberRegistry
name|subscribers
init|=
operator|new
name|SubscriberRegistry
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
comment|/** Creates a new EventBus named "default". */
DECL|method|EventBus ()
specifier|public
name|EventBus
parameter_list|()
block|{
name|this
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new EventBus with the given {@code identifier}.    *    * @param identifier a brief name for this bus, for logging purposes. Should be a valid Java    *     identifier.    */
DECL|method|EventBus (String identifier)
specifier|public
name|EventBus
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|this
argument_list|(
name|identifier
argument_list|,
name|MoreExecutors
operator|.
name|directExecutor
argument_list|()
argument_list|,
name|Dispatcher
operator|.
name|perThreadDispatchQueue
argument_list|()
argument_list|,
name|LoggingHandler
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new EventBus with the given {@link SubscriberExceptionHandler}.    *    * @param exceptionHandler Handler for subscriber exceptions.    * @since 16.0    */
DECL|method|EventBus (SubscriberExceptionHandler exceptionHandler)
specifier|public
name|EventBus
parameter_list|(
name|SubscriberExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
argument_list|(
literal|"default"
argument_list|,
name|MoreExecutors
operator|.
name|directExecutor
argument_list|()
argument_list|,
name|Dispatcher
operator|.
name|perThreadDispatchQueue
argument_list|()
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|EventBus ( String identifier, Executor executor, Dispatcher dispatcher, SubscriberExceptionHandler exceptionHandler)
name|EventBus
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|SubscriberExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|checkNotNull
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|checkNotNull
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|exceptionHandler
operator|=
name|checkNotNull
argument_list|(
name|exceptionHandler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the identifier for this event bus.    *    * @since 19.0    */
DECL|method|identifier ()
specifier|public
specifier|final
name|String
name|identifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
comment|/** Returns the default executor this event bus uses for dispatching events to subscribers. */
DECL|method|executor ()
specifier|final
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
comment|/** Handles the given exception thrown by a subscriber with the given context. */
DECL|method|handleSubscriberException (Throwable e, SubscriberExceptionContext context)
name|void
name|handleSubscriberException
parameter_list|(
name|Throwable
name|e
parameter_list|,
name|SubscriberExceptionContext
name|context
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionHandler
operator|.
name|handleException
argument_list|(
name|e
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e2
parameter_list|)
block|{
comment|// if the handler threw an exception... well, just log it
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Exception %s thrown while handling exception: %s"
argument_list|,
name|e2
argument_list|,
name|e
argument_list|)
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Registers all subscriber methods on {@code object} to receive events.    *    * @param object object whose subscriber methods should be registered.    */
DECL|method|register (Object object)
specifier|public
name|void
name|register
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|subscribers
operator|.
name|register
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unregisters all subscriber methods on a registered {@code object}.    *    * @param object object whose subscriber methods should be unregistered.    * @throws IllegalArgumentException if the object was not previously registered.    */
DECL|method|unregister (Object object)
specifier|public
name|void
name|unregister
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|subscribers
operator|.
name|unregister
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**    * Posts an event to all registered subscribers. This method will return successfully after the    * event has been posted to all subscribers, and regardless of any exceptions thrown by    * subscribers.    *    *<p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not    * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.    *    * @param event event to post.    */
DECL|method|post (Object event)
specifier|public
name|void
name|post
parameter_list|(
name|Object
name|event
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Subscriber
argument_list|>
name|eventSubscribers
init|=
name|subscribers
operator|.
name|getSubscribers
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventSubscribers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|event
argument_list|,
name|eventSubscribers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|DeadEvent
operator|)
condition|)
block|{
comment|// the event had no subscribers and was not itself a DeadEvent
name|post
argument_list|(
operator|new
name|DeadEvent
argument_list|(
name|this
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|addValue
argument_list|(
name|identifier
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Simple logging handler for subscriber exceptions. */
DECL|class|LoggingHandler
specifier|static
specifier|final
class|class
name|LoggingHandler
implements|implements
name|SubscriberExceptionHandler
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|LoggingHandler
name|INSTANCE
init|=
operator|new
name|LoggingHandler
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|handleException (Throwable exception, SubscriberExceptionContext context)
specifier|public
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|SubscriberExceptionContext
name|context
parameter_list|)
block|{
name|Logger
name|logger
init|=
name|logger
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|)
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
argument_list|(
name|context
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logger (SubscriberExceptionContext context)
specifier|private
specifier|static
name|Logger
name|logger
parameter_list|(
name|SubscriberExceptionContext
name|context
parameter_list|)
block|{
return|return
name|Logger
operator|.
name|getLogger
argument_list|(
name|EventBus
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|context
operator|.
name|getEventBus
argument_list|()
operator|.
name|identifier
argument_list|()
argument_list|)
return|;
block|}
DECL|method|message (SubscriberExceptionContext context)
specifier|private
specifier|static
name|String
name|message
parameter_list|(
name|SubscriberExceptionContext
name|context
parameter_list|)
block|{
name|Method
name|method
init|=
name|context
operator|.
name|getSubscriberMethod
argument_list|()
decl_stmt|;
return|return
literal|"Exception thrown by subscriber method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|'('
operator|+
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|')'
operator|+
literal|" on subscriber "
operator|+
name|context
operator|.
name|getSubscriber
argument_list|()
operator|+
literal|" when dispatching event: "
operator|+
name|context
operator|.
name|getEvent
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

