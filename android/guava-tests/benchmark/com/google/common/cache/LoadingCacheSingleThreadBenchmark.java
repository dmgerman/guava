begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|AfterExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Single-threaded benchmark for {@link LoadingCache}.  *  * @author Charles Fry  */
end_comment

begin_class
DECL|class|LoadingCacheSingleThreadBenchmark
specifier|public
class|class
name|LoadingCacheSingleThreadBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"1000"
block|,
literal|"2000"
block|}
argument_list|)
DECL|field|maximumSize
name|int
name|maximumSize
decl_stmt|;
annotation|@
name|Param
argument_list|(
literal|"5000"
argument_list|)
DECL|field|distinctKeys
name|int
name|distinctKeys
decl_stmt|;
annotation|@
name|Param
argument_list|(
literal|"4"
argument_list|)
DECL|field|segments
name|int
name|segments
decl_stmt|;
comment|// 1 means uniform likelihood of keys; higher means some keys are more popular
comment|// tweak this to control hit rate
annotation|@
name|Param
argument_list|(
literal|"2.5"
argument_list|)
DECL|field|concentration
name|double
name|concentration
decl_stmt|;
DECL|field|random
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|cache
name|LoadingCache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
decl_stmt|;
DECL|field|max
name|int
name|max
decl_stmt|;
DECL|field|requests
specifier|static
name|AtomicLong
name|requests
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|misses
specifier|static
name|AtomicLong
name|misses
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
comment|// random integers will be generated in this range, then raised to the
comment|// power of (1/concentration) and floor()ed
name|max
operator|=
name|Ints
operator|.
name|checkedCast
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|distinctKeys
argument_list|,
name|concentration
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|segments
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|maximumSize
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|load
parameter_list|(
name|Integer
name|from
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|misses
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// To start, fill up the cache.
comment|// Each miss both increments the counter and causes the map to grow by one,
comment|// so until evictions begin, the size of the map is the greatest return
comment|// value seen so far
while|while
condition|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|nextRandomKey
argument_list|()
argument_list|)
operator|<
name|maximumSize
condition|)
block|{}
name|requests
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|misses
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
DECL|method|time (int reps)
name|int
name|time
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|cache
operator|.
name|getUnchecked
argument_list|(
name|nextRandomKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requests
operator|.
name|addAndGet
argument_list|(
name|reps
argument_list|)
expr_stmt|;
return|return
name|dummy
return|;
block|}
DECL|method|nextRandomKey ()
specifier|private
name|int
name|nextRandomKey
parameter_list|()
block|{
name|int
name|a
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|max
argument_list|)
decl_stmt|;
comment|/*      * For example, if concentration=2.0, the following takes the square root of      * the uniformly-distributed random integer, then truncates any fractional      * part, so higher integers would appear (in this case linearly) more often      * than lower ones.      */
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|a
argument_list|,
literal|1.0
operator|/
name|concentration
argument_list|)
return|;
block|}
annotation|@
name|AfterExperiment
DECL|method|tearDown ()
name|void
name|tearDown
parameter_list|()
block|{
name|double
name|req
init|=
name|requests
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|hit
init|=
name|req
operator|-
name|misses
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Currently, this is going into /dev/null, but I'll fix that
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"hit rate: "
operator|+
name|hit
operator|/
name|req
argument_list|)
expr_stmt|;
block|}
comment|// for proper distributions later:
comment|// import JSci.maths.statistics.ProbabilityDistribution;
comment|// int key = (int) dist.inverse(random.nextDouble());
block|}
end_class

end_unit

