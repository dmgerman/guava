begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for comparing the various {@link HashCode#equals} methods.  *  *<p>Parameters for the benchmark are:  *<ul>  *<li>size: the length of the byte array to hash  *<li>whereToDiffer: where in the array the bytes should differ  *<li>equalsImpl: which implementation of array equality to use  *</ul>  *  *<p><b>Important note:</b> the primary goal of this benchmark is to ensure that varying {@code  * whereToDiffer} produces no observable change in performance. We want to make sure that the  * array equals implementation is *not* short-circuiting to prevent timing-based attacks. Being  * fast is only a secondary goal.  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|HashCodeBenchmark
specifier|public
class|class
name|HashCodeBenchmark
block|{
comment|// Use a statically configured random instance for all of the benchmarks
DECL|field|random
specifier|private
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"1000"
block|,
literal|"100000"
block|}
argument_list|)
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|whereToDiffer
annotation|@
name|Param
name|WhereToDiffer
name|whereToDiffer
decl_stmt|;
DECL|field|equalsImpl
annotation|@
name|Param
name|EqualsImplementation
name|equalsImpl
decl_stmt|;
DECL|enum|WhereToDiffer
specifier|private
enum|enum
name|WhereToDiffer
block|{
DECL|enumConstant|ONE_PERCENT_IN
name|ONE_PERCENT_IN
block|,
DECL|enumConstant|LAST_BYTE
name|LAST_BYTE
block|,
DECL|enumConstant|NOT_AT_ALL
name|NOT_AT_ALL
block|;   }
DECL|enum|EqualsImplementation
specifier|private
enum|enum
name|EqualsImplementation
block|{
DECL|enumConstant|ANDING_BOOLEANS
name|ANDING_BOOLEANS
block|{
annotation|@
name|Override
name|boolean
name|doEquals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|!=
name|b
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|areEqual
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|areEqual
operator|&=
operator|(
name|a
index|[
name|i
index|]
operator|==
name|b
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
return|return
name|areEqual
return|;
block|}
block|}
block|,
DECL|enumConstant|XORING_TO_BYTE
name|XORING_TO_BYTE
block|{
annotation|@
name|Override
name|boolean
name|doEquals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|!=
name|b
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|byte
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
call|(
name|byte
call|)
argument_list|(
name|result
operator||
name|a
index|[
name|i
index|]
operator|^
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|result
operator|==
literal|0
operator|)
return|;
block|}
block|}
block|,
DECL|enumConstant|XORING_TO_INT
name|XORING_TO_INT
block|{
annotation|@
name|Override
name|boolean
name|doEquals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|!=
name|b
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator||=
name|a
index|[
name|i
index|]
operator|^
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
operator|(
name|result
operator|==
literal|0
operator|)
return|;
block|}
block|}
block|,
DECL|enumConstant|MESSAGE_DIGEST_IS_EQUAL
name|MESSAGE_DIGEST_IS_EQUAL
block|{
annotation|@
name|Override
name|boolean
name|doEquals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|MessageDigest
operator|.
name|isEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|ARRAYS_EQUALS
name|ARRAYS_EQUALS
block|{
annotation|@
name|Override
name|boolean
name|doEquals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|doEquals (byte[] a, byte[] b)
specifier|abstract
name|boolean
name|doEquals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
function_decl|;
block|}
DECL|field|testBytesA
specifier|private
name|byte
index|[]
name|testBytesA
decl_stmt|;
DECL|field|testBytesB
specifier|private
name|byte
index|[]
name|testBytesB
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|BeforeExperiment
name|void
name|setUp
parameter_list|()
block|{
name|testBytesA
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|testBytesA
argument_list|)
expr_stmt|;
name|testBytesB
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|testBytesA
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|int
name|indexToDifferAt
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|whereToDiffer
condition|)
block|{
case|case
name|ONE_PERCENT_IN
case|:
name|indexToDifferAt
operator|=
call|(
name|int
call|)
argument_list|(
name|size
operator|*
literal|0.01
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAST_BYTE
case|:
name|indexToDifferAt
operator|=
name|size
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|NOT_AT_ALL
case|:
block|}
if|if
condition|(
name|indexToDifferAt
operator|!=
operator|-
literal|1
condition|)
block|{
name|testBytesA
index|[
name|indexToDifferAt
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|testBytesB
index|[
name|indexToDifferAt
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hashFunction (int reps)
annotation|@
name|Benchmark
name|boolean
name|hashFunction
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|^=
name|equalsImpl
operator|.
name|doEquals
argument_list|(
name|testBytesA
argument_list|,
name|testBytesB
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

