begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/** Benchmark for {@code BaseEncoding} performance. */
end_comment

begin_class
DECL|class|BaseEncodingBenchmark
specifier|public
class|class
name|BaseEncodingBenchmark
block|{
DECL|field|INPUTS_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|INPUTS_COUNT
init|=
literal|0x1000
decl_stmt|;
DECL|field|INPUTS_MASK
specifier|private
specifier|static
specifier|final
name|int
name|INPUTS_MASK
init|=
literal|0xFFF
decl_stmt|;
DECL|enum|EncodingOption
enum|enum
name|EncodingOption
block|{
DECL|enumConstant|BASE64
DECL|enumConstant|BaseEncoding.base64
name|BASE64
argument_list|(
name|BaseEncoding
operator|.
name|base64
argument_list|()
argument_list|)
block|,
DECL|enumConstant|BASE64_URL
DECL|enumConstant|BaseEncoding.base64Url
name|BASE64_URL
argument_list|(
name|BaseEncoding
operator|.
name|base64Url
argument_list|()
argument_list|)
block|,
DECL|enumConstant|BASE32
DECL|enumConstant|BaseEncoding.base32
name|BASE32
argument_list|(
name|BaseEncoding
operator|.
name|base32
argument_list|()
argument_list|)
block|,
DECL|enumConstant|BASE32_HEX
DECL|enumConstant|BaseEncoding.base32Hex
name|BASE32_HEX
argument_list|(
name|BaseEncoding
operator|.
name|base32Hex
argument_list|()
argument_list|)
block|,
DECL|enumConstant|BASE16
DECL|enumConstant|BaseEncoding.base16
name|BASE16
argument_list|(
name|BaseEncoding
operator|.
name|base16
argument_list|()
argument_list|)
block|;
DECL|field|encoding
specifier|final
name|BaseEncoding
name|encoding
decl_stmt|;
DECL|method|EncodingOption (BaseEncoding encoding)
name|EncodingOption
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
block|}
DECL|field|encoding
annotation|@
name|Param
name|EncodingOption
name|encoding
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"100"
block|,
literal|"10000"
block|}
argument_list|)
DECL|field|n
name|int
name|n
decl_stmt|;
DECL|field|encodingInputs
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|encodingInputs
init|=
operator|new
name|byte
index|[
name|INPUTS_COUNT
index|]
index|[]
decl_stmt|;
DECL|field|decodingInputs
specifier|private
specifier|final
name|String
index|[]
name|decodingInputs
init|=
operator|new
name|String
index|[
name|INPUTS_COUNT
index|]
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encodingInputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encodingInputs
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|n
index|]
expr_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|encodingInputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|decodingInputs
index|[
name|i
index|]
operator|=
name|encoding
operator|.
name|encoding
operator|.
name|encode
argument_list|(
name|encodingInputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Benchmark
DECL|method|encode (int reps)
specifier|public
name|int
name|encode
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|tmp
operator|+=
name|System
operator|.
name|identityHashCode
argument_list|(
name|encoding
operator|.
name|encoding
operator|.
name|encode
argument_list|(
name|encodingInputs
index|[
name|i
operator|&
name|INPUTS_MASK
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
annotation|@
name|Benchmark
DECL|method|decode (int reps)
specifier|public
name|int
name|decode
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|tmp
operator|+=
name|System
operator|.
name|identityHashCode
argument_list|(
name|encoding
operator|.
name|encoding
operator|.
name|decode
argument_list|(
name|decodingInputs
index|[
name|i
operator|&
name|INPUTS_MASK
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
annotation|@
name|Benchmark
DECL|method|encodingStream (int reps)
specifier|public
name|int
name|encodingStream
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|StringWriter
name|target
init|=
operator|new
name|StringWriter
argument_list|(
literal|2
operator|*
name|n
argument_list|)
decl_stmt|;
name|OutputStream
name|encodingStream
init|=
name|encoding
operator|.
name|encoding
operator|.
name|encodingStream
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|encodingStream
operator|.
name|write
argument_list|(
name|encodingInputs
index|[
name|i
operator|&
name|INPUTS_MASK
index|]
argument_list|)
expr_stmt|;
name|encodingStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmp
operator|+=
name|target
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
annotation|@
name|Benchmark
DECL|method|decodingStream (int reps)
specifier|public
name|int
name|decodingStream
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tmp
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|target
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|StringReader
name|source
init|=
operator|new
name|StringReader
argument_list|(
name|decodingInputs
index|[
name|i
operator|&
name|INPUTS_MASK
index|]
argument_list|)
decl_stmt|;
name|InputStream
name|decodingStream
init|=
name|encoding
operator|.
name|encoding
operator|.
name|decodingStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|decodingStream
operator|.
name|read
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|decodingStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmp
operator|+=
name|target
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
block|}
end_class

end_unit

