begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|SkipThisScenarioException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * A benchmark that tries invoking {@code Set.contains} on many different sets.  */
end_comment

begin_class
DECL|class|MultipleSetContainsBenchmark
specifier|public
class|class
name|MultipleSetContainsBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"0.0"
block|,
literal|"0.1"
block|,
literal|"0.7"
block|,
literal|"1.0"
block|}
argument_list|)
DECL|field|emptySetProportion
name|double
name|emptySetProportion
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"0.0"
block|,
literal|"0.1"
block|,
literal|"0.7"
block|,
literal|"1.0"
block|}
argument_list|)
DECL|field|singletonSetProportion
name|double
name|singletonSetProportion
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"0.2"
block|,
literal|"0.8"
block|}
argument_list|)
DECL|field|hitRate
name|double
name|hitRate
decl_stmt|;
DECL|field|PRESENT
specifier|static
specifier|final
name|Object
name|PRESENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|ABSENT
specifier|static
specifier|final
name|Object
name|ABSENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|sets
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|Object
argument_list|>
index|[]
name|sets
init|=
operator|new
name|ImmutableSet
index|[
literal|0x1000
index|]
decl_stmt|;
DECL|field|queries
specifier|private
specifier|final
name|Object
index|[]
name|queries
init|=
operator|new
name|Object
index|[
literal|0x1000
index|]
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|BeforeExperiment
name|void
name|setUp
parameter_list|()
block|{
if|if
condition|(
name|emptySetProportion
operator|+
name|singletonSetProportion
operator|>
literal|1.01
condition|)
block|{
throw|throw
operator|new
name|SkipThisScenarioException
argument_list|()
throw|;
block|}
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|0x1000
condition|;
name|i
operator|++
control|)
block|{
name|double
name|setSize
init|=
name|rng
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|setSize
operator|<
name|emptySetProportion
condition|)
block|{
name|sets
index|[
name|i
index|]
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|setSize
operator|<
name|emptySetProportion
operator|+
name|singletonSetProportion
condition|)
block|{
name|sets
index|[
name|i
index|]
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PRESENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sets
index|[
name|i
index|]
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PRESENT
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rng
operator|.
name|nextDouble
argument_list|()
operator|<
name|hitRate
condition|)
block|{
name|queries
index|[
name|i
index|]
operator|=
name|PRESENT
expr_stmt|;
block|}
else|else
block|{
name|queries
index|[
name|i
index|]
operator|=
name|ABSENT
expr_stmt|;
block|}
block|}
block|}
DECL|method|contains (int reps)
annotation|@
name|Benchmark
specifier|public
name|boolean
name|contains
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|ImmutableSet
argument_list|<
name|Object
argument_list|>
index|[]
name|sets
init|=
name|this
operator|.
name|sets
decl_stmt|;
name|Object
index|[]
name|queries
init|=
name|this
operator|.
name|queries
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
literal|0xFFF
decl_stmt|;
name|result
operator|^=
name|sets
index|[
name|j
index|]
operator|.
name|contains
argument_list|(
name|queries
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

