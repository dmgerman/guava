begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Tests for {@link AbstractFuture} with the cancellation cause system property set */
end_comment

begin_class
DECL|class|AbstractFutureCancellationCauseTest
specifier|public
class|class
name|AbstractFutureCancellationCauseTest
extends|extends
name|TestCase
block|{
DECL|field|oldClassLoader
specifier|private
name|ClassLoader
name|oldClassLoader
decl_stmt|;
DECL|field|classReloader
specifier|private
name|URLClassLoader
name|classReloader
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load the "normal" copy of SettableFuture and related classes.
name|SettableFuture
argument_list|<
name|?
argument_list|>
name|unused
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Hack to load AbstractFuture et. al. in a new classloader so that it re-reads the cancellation
comment|// cause system property.  This allows us to run with both settings of the property in one jvm
comment|// without resorting to even crazier hacks to reset static final boolean fields.
name|System
operator|.
name|setProperty
argument_list|(
literal|"guava.concurrent.generate_cancellation_cause"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|concurrentPackage
init|=
name|SettableFuture
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|classReloader
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|ClassPathUtil
operator|.
name|getClassPathUrls
argument_list|()
argument_list|)
block|{
annotation|@
name|GuardedBy
argument_list|(
literal|"loadedClasses"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|loadedClasses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|concurrentPackage
argument_list|)
comment|// Use other classloader for ListenableFuture, so that the objects can interact
operator|&&
operator|!
name|ListenableFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|loadedClasses
init|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|toReturn
init|=
name|loadedClasses
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|toReturn
operator|==
literal|null
condition|)
block|{
name|toReturn
operator|=
name|super
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|loadedClasses
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|toReturn
argument_list|)
expr_stmt|;
block|}
return|return
name|toReturn
return|;
block|}
block|}
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|oldClassLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classReloader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|classReloader
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|oldClassLoader
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"guava.concurrent.generate_cancellation_cause"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancel_notDoneNoInterrupt ()
specifier|public
name|void
name|testCancel_notDoneNoInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|newFutureInstance
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCancel_notDoneInterrupt ()
specifier|public
name|void
name|testCancel_notDoneInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|newFutureInstance
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetFuture_misbehavingFutureDoesNotThrow ()
specifier|public
name|void
name|testSetFuture_misbehavingFutureDoesNotThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|badFuture
init|=
operator|new
name|ListenableFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|interrupt
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
literal|"foo"
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
literal|"foo"
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|newFutureInstance
argument_list|()
decl_stmt|;
name|future
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setFuture"
argument_list|,
name|future
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|ListenableFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|invoke
argument_list|(
name|future
argument_list|,
name|badFuture
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|badFuture
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newFutureInstance ()
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|newFutureInstance
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|Future
argument_list|<
name|?
argument_list|>
operator|)
name|classReloader
operator|.
name|loadClass
argument_list|(
name|SettableFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"create"
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

