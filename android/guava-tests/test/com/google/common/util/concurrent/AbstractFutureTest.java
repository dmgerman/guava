begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|internal
operator|.
name|InternalFutureFailureAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|LockSupport
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link AbstractFuture}.  *  * @author Brian Stoler  */
end_comment

begin_class
DECL|class|AbstractFutureTest
specifier|public
class|class
name|AbstractFutureTest
extends|extends
name|TestCase
block|{
DECL|method|testSuccess ()
specifier|public
name|void
name|testSuccess
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|set
parameter_list|(
name|value
parameter_list|)
constructor_decl|;
block|}
block|}
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testException ()
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Throwable
name|failure
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|setException
parameter_list|(
name|failure
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
name|ExecutionException
name|ee1
init|=
name|getExpectingExecutionException
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|ExecutionException
name|ee2
init|=
name|getExpectingExecutionException
argument_list|(
name|future
argument_list|)
decl_stmt|;
comment|// Ensure we get a unique execution exception on each get
name|assertNotSame
argument_list|(
name|ee1
argument_list|,
name|ee2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ee1
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ee2
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|checkStackTrace
argument_list|(
name|ee1
argument_list|)
expr_stmt|;
name|checkStackTrace
argument_list|(
name|ee2
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancel_notDoneNoInterrupt ()
specifier|public
name|void
name|testCancel_notDoneNoInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|InterruptibleFuture
name|future
init|=
operator|new
name|InterruptibleFuture
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|interruptTaskWasCalled
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// See AbstractFutureCancellationCauseTest for how to set causes
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCancel_notDoneInterrupt ()
specifier|public
name|void
name|testCancel_notDoneInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|InterruptibleFuture
name|future
init|=
operator|new
name|InterruptibleFuture
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|interruptTaskWasCalled
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// See AbstractFutureCancellationCauseTest for how to set causes
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCancel_done ()
specifier|public
name|void
name|testCancel_done
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetWithTimeoutDoneFuture ()
specifier|public
name|void
name|testGetWithTimeoutDoneFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEvilFuture_setFuture ()
specifier|public
name|void
name|testEvilFuture_setFuture
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"you didn't say the magic word!"
argument_list|)
decl_stmt|;
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|evilFuture
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|Executor
name|e
parameter_list|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
decl_stmt|;
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|normalFuture
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|normalFuture
operator|.
name|setFuture
argument_list|(
name|evilFuture
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|normalFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|normalFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveWaiter_interruption ()
specifier|public
name|void
name|testRemoveWaiter_interruption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|WaiterThread
name|waiter1
init|=
operator|new
name|WaiterThread
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|waiter1
operator|.
name|start
argument_list|()
expr_stmt|;
name|waiter1
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
name|WaiterThread
name|waiter2
init|=
operator|new
name|WaiterThread
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|waiter2
operator|.
name|start
argument_list|()
expr_stmt|;
name|waiter2
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
comment|// The waiter queue should be waiter2->waiter1
comment|// This should wake up waiter1 and cause the waiter1 node to be removed.
name|waiter1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|waiter1
operator|.
name|join
argument_list|()
expr_stmt|;
name|waiter2
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
comment|// should still be blocked
name|LockSupport
operator|.
name|unpark
argument_list|(
name|waiter2
argument_list|)
expr_stmt|;
comment|// spurious wakeup
name|waiter2
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
comment|// should eventually re-park
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|waiter2
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveWaiter_polling ()
specifier|public
name|void
name|testRemoveWaiter_polling
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|WaiterThread
name|waiter
init|=
operator|new
name|WaiterThread
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|start
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
name|PollingThread
name|poller
init|=
operator|new
name|PollingThread
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|poller
operator|.
name|start
argument_list|()
expr_stmt|;
name|PollingThread
name|poller2
init|=
operator|new
name|PollingThread
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|poller2
operator|.
name|start
argument_list|()
expr_stmt|;
name|PollingThread
name|poller3
init|=
operator|new
name|PollingThread
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|poller3
operator|.
name|start
argument_list|()
expr_stmt|;
name|poller
operator|.
name|awaitInLoop
argument_list|()
expr_stmt|;
name|poller2
operator|.
name|awaitInLoop
argument_list|()
expr_stmt|;
name|poller3
operator|.
name|awaitInLoop
argument_list|()
expr_stmt|;
comment|// The waiter queue should be {poller x 3}->waiter1
name|waiter
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// This should wake up waiter1 and cause the waiter1 node to be removed.
name|waiter
operator|.
name|join
argument_list|()
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|poller
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString_allUnique ()
specifier|public
name|void
name|testToString_allUnique
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two futures should not have the same toString, to avoid people asserting on it
name|assertThat
argument_list|(
name|SettableFuture
operator|.
name|create
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|SettableFuture
operator|.
name|create
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_notDone ()
specifier|public
name|void
name|testToString_notDone
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
name|testFuture
init|=
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|pendingToString
parameter_list|()
block|{
return|return
literal|"cause=[Because this test isn't done]"
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|testFuture
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=PENDING, info=\\[cause=\\[Because this test isn't done\\]\\]\\]"
argument_list|)
expr_stmt|;
try|try
block|{
name|testFuture
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1 nanoseconds"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Because this test isn't done"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToString_completesDuringToString ()
specifier|public
name|void
name|testToString_completesDuringToString
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
name|testFuture
init|=
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|pendingToString
parameter_list|()
block|{
comment|// Complete ourselves during the toString calculation
name|this
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|"cause=[Because this test isn't done]"
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|testFuture
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=SUCCESS, result=\\[true\\]\\]"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test attempts to cause a future to wait for longer than it was requested to from a timed    * get() call. As measurements of time are prone to flakiness, it tries to assert based on ranges    * derived from observing how much time actually passed for various operations.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"DeprecatedThreadMethods"
block|,
literal|"ThreadPriorityCheck"
block|}
argument_list|)
DECL|method|testToString_delayedTimeout ()
specifier|public
name|void
name|testToString_delayedTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|TimedWaiterThread
name|thread
init|=
operator|new
name|TimedWaiterThread
argument_list|(
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
name|thread
operator|.
name|suspend
argument_list|()
expr_stmt|;
comment|// Sleep for enough time to add 1500 milliseconds of overwait to the get() call.
name|long
name|toWaitMillis
init|=
literal|3500
operator|-
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|thread
operator|.
name|startTime
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|toWaitMillis
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
expr_stmt|;
name|thread
operator|.
name|resume
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// It's possible to race and suspend the thread just before the park call actually takes effect,
comment|// causing the thread to be suspended for 3.5 seconds, and then park itself for 2 seconds after
comment|// being resumed. To avoid a flake in this scenario, calculate how long that thread actually
comment|// waited and assert based on that time. Empirically, the race where the thread ends up waiting
comment|// for 5.5 seconds happens about 2% of the time.
name|boolean
name|longWait
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|thread
operator|.
name|timeSpentBlocked
argument_list|)
operator|>=
literal|5
decl_stmt|;
comment|// Count how long it actually took to return; we'll accept any number between the expected delay
comment|// and the approximate actual delay, to be robust to variance in thread scheduling.
name|char
name|overWaitNanosFirstDigit
init|=
name|Long
operator|.
name|toString
argument_list|(
name|thread
operator|.
name|timeSpentBlocked
operator|-
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|longWait
condition|?
literal|5000
else|:
literal|3000
argument_list|)
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|overWaitNanosFirstDigit
operator|<
literal|'4'
condition|)
block|{
name|overWaitNanosFirstDigit
operator|=
literal|'9'
expr_stmt|;
block|}
name|String
name|nanosRegex
init|=
literal|"[4-"
operator|+
name|overWaitNanosFirstDigit
operator|+
literal|"][0-9]+"
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Spent "
operator|+
name|thread
operator|.
name|timeSpentBlocked
operator|+
literal|" ns blocked; slept for "
operator|+
name|toWaitMillis
operator|+
literal|" ms"
argument_list|)
operator|.
name|that
argument_list|(
name|thread
operator|.
name|exception
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Waited 2 seconds \\(plus "
operator|+
operator|(
name|longWait
condition|?
literal|"3"
else|:
literal|"1"
operator|)
operator|+
literal|" seconds, "
operator|+
name|nanosRegex
operator|+
literal|" nanoseconds delay\\).*"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_completed ()
specifier|public
name|void
name|testToString_completed
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
name|testFuture2
init|=
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|pendingToString
parameter_list|()
block|{
return|return
literal|"cause=[Someday...]"
return|;
block|}
block|}
decl_stmt|;
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
name|testFuture3
init|=
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|testFuture3
operator|.
name|setFuture
argument_list|(
name|testFuture2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testFuture3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=PENDING, setFuture=\\[[^\\[]+\\[status=PENDING,"
operator|+
literal|" info=\\[cause=\\[Someday...]]]]]"
argument_list|)
expr_stmt|;
name|testFuture2
operator|.
name|set
argument_list|(
literal|"result string"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testFuture3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=SUCCESS, result=\\[result string\\]\\]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_cancelled ()
specifier|public
name|void
name|testToString_cancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|Futures
operator|.
name|immediateCancelledFuture
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=CANCELLED\\]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_failed ()
specifier|public
name|void
name|testToString_failed
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=FAILURE, cause=\\[java.lang.RuntimeException: foo\\]\\]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_misbehaving ()
specifier|public
name|void
name|testToString_misbehaving
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|pendingToString
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"I'm a misbehaving implementation"
argument_list|)
throw|;
block|}
block|}
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
literal|"[^\\[]+\\[status=PENDING, info=\\[Exception thrown from implementation: "
operator|+
literal|"class java.lang.RuntimeException\\]\\]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompletionFinishesWithDone ()
specifier|public
name|void
name|testCompletionFinishesWithDone
parameter_list|()
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|errorMessage
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|future
operator|.
name|set
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|errorMessage
operator|.
name|set
argument_list|(
literal|"Set call exited before future was complete."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|future
operator|.
name|setException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failure"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|errorMessage
operator|.
name|set
argument_list|(
literal|"SetException call exited before future was complete."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|errorMessage
operator|.
name|set
argument_list|(
literal|"Cancel call exited before future was complete."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore, we just wanted to block.
block|}
name|String
name|error
init|=
name|errorMessage
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|error
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * He did the bash, he did the future bash The future bash, it was a concurrency smash He did the    * bash, it caught on in a flash He did the bash, he did the future bash    */
DECL|method|testFutureBash ()
specifier|public
name|void
name|testFutureBash
parameter_list|()
block|{
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|6
comment|// for the setter threads
operator|+
literal|50
comment|// for the listeners
operator|+
literal|50
comment|// for the blocking get threads,
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// for the main thread
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|>
name|currentFuture
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|numSuccessfulSetCalls
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|completeSucessFullyRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
if|if
condition|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|set
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
name|numSuccessfulSetCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|completeExceptionallyRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
name|Exception
name|failureCause
init|=
operator|new
name|Exception
argument_list|(
literal|"setException"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
if|if
condition|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|setException
argument_list|(
name|failureCause
argument_list|)
condition|)
block|{
name|numSuccessfulSetCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|cancelRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
if|if
condition|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|numSuccessfulSetCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|setFutureCompleteSucessFullyRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|Futures
operator|.
name|immediateFuture
argument_list|(
literal|"setFuture"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
if|if
condition|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
condition|)
block|{
name|numSuccessfulSetCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|setFutureCompleteExceptionallyRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"setFuture"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
if|if
condition|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
condition|)
block|{
name|numSuccessfulSetCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|setFutureCancelRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|Futures
operator|.
name|immediateCancelledFuture
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
if|if
condition|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
condition|)
block|{
name|numSuccessfulSetCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|finalResults
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
argument_list|)
decl_stmt|;
name|Runnable
name|collectResultsRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|result
init|=
name|Uninterruptibles
operator|.
name|getUninterruptibly
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|finalResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Runnable
name|collectResultsTimedGetRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|currentFuture
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|result
init|=
name|Uninterruptibles
operator|.
name|getUninterruptibly
argument_list|(
name|future
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|finalResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// loop
block|}
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|?
argument_list|>
argument_list|>
name|allTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|completeSucessFullyRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|completeExceptionallyRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|cancelRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|setFutureCompleteSucessFullyRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|setFutureCompleteExceptionallyRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|setFutureCancelRunnable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|50
condition|;
name|k
operator|++
control|)
block|{
comment|// For each listener we add a task that submits it to the executor directly for the blocking
comment|// get usecase and another task that adds it as a listener to the future to exercise both
comment|// racing addListener calls and addListener calls completing after the future completes.
specifier|final
name|Runnable
name|listener
init|=
name|k
operator|%
literal|2
operator|==
literal|0
condition|?
name|collectResultsRunnable
else|:
name|collectResultsTimedGetRunnable
decl_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|executor
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|allTasks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|allTasks
argument_list|)
expr_stmt|;
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|currentFuture
operator|.
name|set
argument_list|(
name|future
argument_list|)
expr_stmt|;
for|for
control|(
name|Callable
argument_list|<
name|?
argument_list|>
name|task
range|:
name|allTasks
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|executor
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// inspect state and ensure it is correct!
comment|// asserts that all get calling threads received the same value
name|Object
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|finalResults
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|CancellationException
operator|.
name|class
condition|)
block|{
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|wasInterrupted
argument_list|()
condition|)
block|{
comment|// We were cancelled, it is possible that setFuture could have succeeded too.
name|assertThat
argument_list|(
name|numSuccessfulSetCalls
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|numSuccessfulSetCalls
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertThat
argument_list|(
name|numSuccessfulSetCalls
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// reset for next iteration
name|numSuccessfulSetCalls
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|finalResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// setFuture and cancel() interact in more complicated ways than the other setters.
DECL|method|testSetFutureCancelBash ()
specifier|public
name|void
name|testSetFutureCancelBash
parameter_list|()
block|{
specifier|final
name|int
name|size
init|=
literal|50
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
comment|// for the setter threads
operator|+
name|size
comment|// for the listeners
operator|+
name|size
comment|// for the get threads,
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// for the main thread
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|>
name|currentFuture
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|>
name|setFutureFuture
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|setFutureSetSucess
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|setFutureCompletionSucess
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|cancellationSucess
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Runnable
name|cancelRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cancellationSucess
operator|.
name|set
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Runnable
name|setFutureCompleteSucessFullyRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|setFutureFuture
operator|.
name|get
argument_list|()
decl_stmt|;
name|setFutureSetSucess
operator|.
name|set
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
name|setFutureCompletionSucess
operator|.
name|set
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|"hello-async-world"
argument_list|)
argument_list|)
expr_stmt|;
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|finalResults
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
argument_list|)
decl_stmt|;
name|Runnable
name|collectResultsRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|result
init|=
name|Uninterruptibles
operator|.
name|getUninterruptibly
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|finalResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Runnable
name|collectResultsTimedGetRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|currentFuture
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|result
init|=
name|Uninterruptibles
operator|.
name|getUninterruptibly
argument_list|(
name|future
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|finalResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// loop
block|}
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|allTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|cancelRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|setFutureCompleteSucessFullyRunnable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
name|k
operator|++
control|)
block|{
comment|// For each listener we add a task that submits it to the executor directly for the blocking
comment|// get usecase and another task that adds it as a listener to the future to exercise both
comment|// racing addListener calls and addListener calls completing after the future completes.
specifier|final
name|Runnable
name|listener
init|=
name|k
operator|%
literal|2
operator|==
literal|0
condition|?
name|collectResultsRunnable
else|:
name|collectResultsTimedGetRunnable
decl_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|allTasks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|allTasks
argument_list|)
expr_stmt|;
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|setFuture
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|currentFuture
operator|.
name|set
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|setFutureFuture
operator|.
name|set
argument_list|(
name|setFuture
argument_list|)
expr_stmt|;
for|for
control|(
name|Runnable
name|task
range|:
name|allTasks
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// inspect state and ensure it is correct!
comment|// asserts that all get calling threads received the same value
name|Object
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|finalResults
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|CancellationException
operator|.
name|class
condition|)
block|{
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cancellationSucess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// cancellation can interleave in 3 ways
comment|// 1. prior to setFuture
comment|// 2. after setFuture before set() on the future assigned
comment|// 3. after setFuture and set() are called but before the listener completes.
if|if
condition|(
operator|!
name|setFutureSetSucess
operator|.
name|get
argument_list|()
operator|||
operator|!
name|setFutureCompletionSucess
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// If setFuture fails or set on the future fails then it must be because that future was
comment|// cancelled
name|assertTrue
argument_list|(
name|setFuture
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setFuture
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
comment|// we only call cancel(true)
block|}
block|}
else|else
block|{
comment|// set on the future completed
name|assertFalse
argument_list|(
name|cancellationSucess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setFutureSetSucess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setFutureCompletionSucess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// reset for next iteration
name|setFutureSetSucess
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setFutureCompletionSucess
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cancellationSucess
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|finalResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Test to ensure that when calling setFuture with a done future only setFuture or cancel can
comment|// return true.
DECL|method|testSetFutureCancelBash_withDoneFuture ()
specifier|public
name|void
name|testSetFutureCancelBash_withDoneFuture
parameter_list|()
block|{
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
comment|// for the setter threads
operator|+
literal|1
comment|// for the blocking get thread,
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// for the main thread
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|>
name|currentFuture
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|setFutureSuccess
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|cancellationSucess
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|cancelRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|cancellationSucess
operator|.
name|set
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|setFutureCompleteSucessFullyRunnable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|final
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|Futures
operator|.
name|immediateFuture
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|setFutureSuccess
operator|.
name|set
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|finalResults
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Runnable
name|collectResultsRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|result
init|=
name|Uninterruptibles
operator|.
name|getUninterruptibly
argument_list|(
name|currentFuture
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|finalResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|finalResults
operator|.
name|add
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|?
argument_list|>
argument_list|>
name|allTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|cancelRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|setFutureCompleteSucessFullyRunnable
argument_list|)
expr_stmt|;
name|allTasks
operator|.
name|add
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|collectResultsRunnable
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allTasks
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|allTasks
argument_list|)
expr_stmt|;
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|currentFuture
operator|.
name|set
argument_list|(
name|future
argument_list|)
expr_stmt|;
for|for
control|(
name|Callable
argument_list|<
name|?
argument_list|>
name|task
range|:
name|allTasks
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|executor
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
block|}
name|awaitUnchecked
argument_list|(
name|barrier
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// inspect state and ensure it is correct!
comment|// asserts that all get calling threads received the same value
name|Object
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|finalResults
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|CancellationException
operator|.
name|class
condition|)
block|{
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cancellationSucess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|setFutureSuccess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|setFutureSuccess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cancellationSucess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// reset for next iteration
name|setFutureSuccess
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cancellationSucess
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|finalResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// In a previous implementation this would cause a stack overflow after ~2000 futures chained
comment|// together.  Now it should only be limited by available memory (and time)
DECL|method|testSetFuture_stackOverflow ()
specifier|public
name|void
name|testSetFuture_stackOverflow
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|prev
init|=
name|orig
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|curr
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|prev
operator|.
name|setFuture
argument_list|(
name|curr
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
comment|// prev represents the 'innermost' future
name|prev
operator|.
name|set
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify that StackOverflowError in a long chain of SetFuture doesn't cause the entire toString
comment|// call to fail
annotation|@
name|GwtIncompatible
annotation|@
name|AndroidIncompatible
DECL|method|testSetFutureToString_stackOverflow ()
specifier|public
name|void
name|testSetFutureToString_stackOverflow
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|prev
init|=
name|orig
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|curr
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|prev
operator|.
name|setFuture
argument_list|(
name|curr
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
comment|// orig represents the 'outermost' future
name|assertThat
argument_list|(
name|orig
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Exception thrown from implementation: class java.lang.StackOverflowError"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFuture_misbehavingFutureThrows ()
specifier|public
name|void
name|testSetFuture_misbehavingFutureThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|badFuture
init|=
operator|new
name|ListenableFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|interrupt
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|CancellationException
argument_list|()
throw|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|CancellationException
argument_list|()
throw|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|badFuture
argument_list|)
expr_stmt|;
name|ExecutionException
name|expected
init|=
name|getExpectingExecutionException
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|badFuture
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFuture_misbehavingFutureDoesNotThrow ()
specifier|public
name|void
name|testSetFuture_misbehavingFutureDoesNotThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|badFuture
init|=
operator|new
name|ListenableFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|interrupt
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
literal|"foo"
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
literal|"foo"
return|;
comment|// BAD!!
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|badFuture
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testCancel_stackOverflow ()
specifier|public
name|void
name|testCancel_stackOverflow
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|prev
init|=
name|orig
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|curr
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|prev
operator|.
name|setFuture
argument_list|(
name|curr
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
comment|// orig is the 'outermost future', this should propagate fully down the stack of futures.
name|orig
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prev
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prev
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureSelf_cancel ()
specifier|public
name|void
name|testSetFutureSelf_cancel
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|orig
operator|.
name|setFuture
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|orig
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureSelf_toString ()
specifier|public
name|void
name|testSetFutureSelf_toString
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|orig
operator|.
name|setFuture
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"[status=PENDING, setFuture=[this future]]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetSelf_toString ()
specifier|public
name|void
name|testSetSelf_toString
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|Object
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|orig
operator|.
name|set
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"[status=SUCCESS, result=[this future]]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureSelf_toStringException ()
specifier|public
name|void
name|testSetFutureSelf_toStringException
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|orig
operator|.
name|setFuture
argument_list|(
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"[status=PENDING, setFuture=[Exception thrown from implementation: class"
operator|+
literal|" java.lang.NullPointerException]]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetIndirectSelf_toString ()
specifier|public
name|void
name|testSetIndirectSelf_toString
parameter_list|()
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Object
argument_list|>
name|orig
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// unlike the above this indirection defeats the trivial cycle detection and causes a SOE
name|orig
operator|.
name|set
argument_list|(
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|orig
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Exception thrown from implementation: class java.lang.StackOverflowError"
argument_list|)
expr_stmt|;
block|}
comment|// Regression test for a case where we would fail to execute listeners immediately on done futures
comment|// this would be observable from an afterDone callback
DECL|method|testListenersExecuteImmediately_fromAfterDone ()
specifier|public
name|void
name|testListenersExecuteImmediately_fromAfterDone
parameter_list|()
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|f
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|afterDone
parameter_list|()
block|{
specifier|final
name|AtomicBoolean
name|ranImmediately
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ranImmediately
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ranImmediately
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|f
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
comment|// Regression test for a case where we would fail to execute listeners immediately on done futures
comment|// this would be observable from a waiter that was just unblocked.
DECL|method|testListenersExecuteImmediately_afterWaiterWakesUp ()
specifier|public
name|void
name|testListenersExecuteImmediately_afterWaiterWakesUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|f
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|afterDone
parameter_list|()
block|{
comment|// this simply delays executing listeners
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// preserve status
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|f
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|ranImmediately
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|f
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ranImmediately
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ranImmediately
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrustedGetFailure_Completed ()
specifier|public
name|void
name|testTrustedGetFailure_Completed
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|"261"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrustedGetFailure_Failed ()
specifier|public
name|void
name|testTrustedGetFailure_Failed
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Throwable
name|failure
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|future
operator|.
name|setException
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrustedGetFailure_NotCompleted ()
specifier|public
name|void
name|testTrustedGetFailure_NotCompleted
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrustedGetFailure_CanceledNoCause ()
specifier|public
name|void
name|testTrustedGetFailure_CanceledNoCause
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFailure_Completed ()
specifier|public
name|void
name|testGetFailure_Completed
parameter_list|()
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|"261"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFailure_Failed ()
specifier|public
name|void
name|testGetFailure_Failed
parameter_list|()
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
specifier|final
name|Throwable
name|failure
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|future
operator|.
name|setException
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFailure_NotCompleted ()
specifier|public
name|void
name|testGetFailure_NotCompleted
parameter_list|()
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFailure_CanceledNoCause ()
specifier|public
name|void
name|testGetFailure_CanceledNoCause
parameter_list|()
block|{
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|tryInternalFastPathGetFailure
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testForwardExceptionFastPath ()
specifier|public
name|void
name|testForwardExceptionFastPath
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|FailFuture
extends|extends
name|InternalFutureFailureAccess
implements|implements
name|ListenableFuture
argument_list|<
name|String
argument_list|>
block|{
name|Throwable
name|failure
decl_stmt|;
name|FailFuture
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|failure
operator|=
name|throwable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"cancel shouldn't be called on this object"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"get() shouldn't be called on this object"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Throwable
name|tryInternalFastPathGetFailure
parameter_list|()
block|{
return|return
name|failure
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"addListener() shouldn't be called on this object"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"you still didn't say the magic word!"
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|normalFuture
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|normalFuture
operator|.
name|setFuture
argument_list|(
operator|new
name|FailFuture
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|normalFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|normalFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|awaitUnchecked (final CyclicBarrier barrier)
specifier|private
specifier|static
name|void
name|awaitUnchecked
parameter_list|(
specifier|final
name|CyclicBarrier
name|barrier
parameter_list|)
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkStackTrace (ExecutionException e)
specifier|private
name|void
name|checkStackTrace
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// Our call site for get() should be in the trace.
name|int
name|index
init|=
name|findStackFrame
argument_list|(
name|e
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"getExpectingExecutionException"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|index
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Above our method should be the call to get(). Don't assert on the class
comment|// because it could be some superclass.
name|assertThat
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
index|[
name|index
operator|-
literal|1
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
block|}
DECL|method|findStackFrame (ExecutionException e, String clazz, String method)
specifier|private
specifier|static
name|int
name|findStackFrame
parameter_list|(
name|ExecutionException
name|e
parameter_list|,
name|String
name|clazz
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|StackTraceElement
index|[]
name|elements
init|=
name|e
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StackTraceElement
name|element
init|=
name|elements
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|&&
name|element
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
name|AssertionFailedError
name|failure
init|=
operator|new
name|AssertionFailedError
argument_list|(
literal|"Expected element "
operator|+
name|clazz
operator|+
literal|"."
operator|+
name|method
operator|+
literal|" not found in stack trace"
argument_list|)
decl_stmt|;
name|failure
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|failure
throw|;
block|}
DECL|method|getExpectingExecutionException (AbstractFuture<String> future)
specifier|private
name|ExecutionException
name|getExpectingExecutionException
parameter_list|(
name|AbstractFuture
argument_list|<
name|String
argument_list|>
name|future
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|String
name|got
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Expected exception but got "
operator|+
name|got
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
comment|// unreachable, but compiler doesn't know that fail() always throws
return|return
literal|null
return|;
block|}
DECL|class|WaiterThread
specifier|private
specifier|static
specifier|final
class|class
name|WaiterThread
extends|extends
name|Thread
block|{
DECL|field|future
specifier|private
specifier|final
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
DECL|method|WaiterThread (AbstractFuture<?> future)
specifier|private
name|WaiterThread
parameter_list|(
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// nothing
block|}
block|}
DECL|method|awaitWaiting ()
name|void
name|awaitWaiting
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isBlocked
argument_list|()
condition|)
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
name|State
operator|.
name|TERMINATED
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Thread exited"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isBlocked ()
specifier|private
name|boolean
name|isBlocked
parameter_list|()
block|{
return|return
name|getState
argument_list|()
operator|==
name|Thread
operator|.
name|State
operator|.
name|WAITING
operator|&&
name|LockSupport
operator|.
name|getBlocker
argument_list|(
name|this
argument_list|)
operator|==
name|future
return|;
block|}
block|}
DECL|class|TimedWaiterThread
specifier|static
specifier|final
class|class
name|TimedWaiterThread
extends|extends
name|Thread
block|{
DECL|field|future
specifier|private
specifier|final
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
DECL|field|timeout
specifier|private
specifier|final
name|long
name|timeout
decl_stmt|;
DECL|field|unit
specifier|private
specifier|final
name|TimeUnit
name|unit
decl_stmt|;
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|volatile
name|long
name|startTime
decl_stmt|;
DECL|field|timeSpentBlocked
specifier|private
name|long
name|timeSpentBlocked
decl_stmt|;
DECL|method|TimedWaiterThread (AbstractFuture<?> future, long timeout, TimeUnit unit)
name|TimedWaiterThread
parameter_list|(
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// nothing
name|exception
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|timeSpentBlocked
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
expr_stmt|;
block|}
block|}
DECL|method|awaitWaiting ()
name|void
name|awaitWaiting
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isBlocked
argument_list|()
condition|)
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
name|State
operator|.
name|TERMINATED
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Thread exited"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isBlocked ()
specifier|private
name|boolean
name|isBlocked
parameter_list|()
block|{
return|return
name|getState
argument_list|()
operator|==
name|Thread
operator|.
name|State
operator|.
name|TIMED_WAITING
operator|&&
name|LockSupport
operator|.
name|getBlocker
argument_list|(
name|this
argument_list|)
operator|==
name|future
return|;
block|}
block|}
DECL|class|PollingThread
specifier|private
specifier|static
specifier|final
class|class
name|PollingThread
extends|extends
name|Thread
block|{
DECL|field|future
specifier|private
specifier|final
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
DECL|field|completedIteration
specifier|private
specifier|final
name|CountDownLatch
name|completedIteration
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|method|PollingThread (AbstractFuture<?> future)
specifier|private
name|PollingThread
parameter_list|(
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
finally|finally
block|{
name|completedIteration
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|awaitInLoop ()
name|void
name|awaitInLoop
parameter_list|()
block|{
name|Uninterruptibles
operator|.
name|awaitUninterruptibly
argument_list|(
name|completedIteration
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InterruptibleFuture
specifier|private
specifier|static
specifier|final
class|class
name|InterruptibleFuture
extends|extends
name|AbstractFuture
argument_list|<
name|String
argument_list|>
block|{
DECL|field|interruptTaskWasCalled
name|boolean
name|interruptTaskWasCalled
decl_stmt|;
annotation|@
name|Override
DECL|method|interruptTask ()
specifier|protected
name|void
name|interruptTask
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|interruptTaskWasCalled
argument_list|)
expr_stmt|;
name|interruptTaskWasCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

