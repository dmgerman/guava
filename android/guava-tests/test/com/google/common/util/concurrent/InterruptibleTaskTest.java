begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|spi
operator|.
name|AbstractInterruptibleChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|LockSupport
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|InterruptibleTaskTest
specifier|public
specifier|final
class|class
name|InterruptibleTaskTest
extends|extends
name|TestCase
block|{
comment|// Regression test for a deadlock where a task could be stuck busy waiting for the task to
comment|// transition to DONE
DECL|method|testInterruptThrows ()
specifier|public
name|void
name|testInterruptThrows
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|isInterruptibleRegistered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|InterruptibleTask
argument_list|<
name|Void
argument_list|>
name|task
init|=
operator|new
name|InterruptibleTask
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Void
name|runInterruptibly
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokenChannel
name|bc
init|=
operator|new
name|BrokenChannel
argument_list|()
decl_stmt|;
name|bc
operator|.
name|doBegin
argument_list|()
expr_stmt|;
name|isInterruptibleRegistered
operator|.
name|countDown
argument_list|()
expr_stmt|;
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// the interrupt will wake us up
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|String
name|toPendingString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
name|void
name|afterRanInterruptibly
parameter_list|(
name|Void
name|result
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{}
block|}
decl_stmt|;
name|Thread
name|runner
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|isInterruptibleRegistered
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|task
operator|.
name|interruptTask
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"I bet you didn't think Thread.interrupt could throw"
argument_list|)
expr_stmt|;
block|}
comment|// We need to wait for the runner to exit.  It used to be that the runner would get stuck in the
comment|// busy loop when interrupt threw.
name|runner
operator|.
name|join
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|BrokenChannel
specifier|static
specifier|final
class|class
name|BrokenChannel
extends|extends
name|AbstractInterruptibleChannel
block|{
annotation|@
name|Override
DECL|method|implCloseChannel ()
specifier|protected
name|void
name|implCloseChannel
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"I bet you didn't think Thread.interrupt could throw"
argument_list|)
throw|;
block|}
DECL|method|doBegin ()
name|void
name|doBegin
parameter_list|()
block|{
name|super
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Because Thread.interrupt() can invoke arbitrary code, it can be slow (e.g. perform IO). To    * protect ourselves from that we want to make sure that tasks don't spin too much waiting for the    * interrupting thread to complete the protocol.    */
DECL|method|testInterruptIsSlow ()
specifier|public
name|void
name|testInterruptIsSlow
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|isInterruptibleRegistered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|SlowChannel
name|slowChannel
init|=
operator|new
name|SlowChannel
argument_list|()
decl_stmt|;
specifier|final
name|InterruptibleTask
argument_list|<
name|Void
argument_list|>
name|task
init|=
operator|new
name|InterruptibleTask
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Void
name|runInterruptibly
parameter_list|()
throws|throws
name|Exception
block|{
name|slowChannel
operator|.
name|doBegin
argument_list|()
expr_stmt|;
name|isInterruptibleRegistered
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// the interrupt will wake us up
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// continue
block|}
name|LockSupport
operator|.
name|unpark
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulate a spurious wakeup.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|String
name|toPendingString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
name|void
name|afterRanInterruptibly
parameter_list|(
name|Void
name|result
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{}
block|}
decl_stmt|;
name|Thread
name|runner
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|,
literal|"runner"
argument_list|)
decl_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|isInterruptibleRegistered
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// trigger the interrupt on another thread since it will block
operator|new
name|Thread
argument_list|(
literal|"Interrupter"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|task
operator|.
name|interruptTask
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// this will happen once the interrupt has been set which means that
comment|// 1. the runner has been woken up
comment|// 2. the interrupter is stuck in the call the Thread.interrupt()
comment|// after some period of time the runner thread should become blocked on the task because it is
comment|// waiting for the slow interrupting thread to complete Thread.interrupt
name|awaitBlockedOn
argument_list|(
name|runner
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|slowChannel
operator|.
name|exitClose
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// release the interrupter
comment|// We need to wait for the runner to exit.  To make sure that the interrupting thread wakes it
comment|// back up.
name|runner
operator|.
name|join
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// waits for the given thread to be blocked on the given object
DECL|method|awaitBlockedOn (Thread t, Object blocker)
specifier|private
specifier|static
name|void
name|awaitBlockedOn
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Object
name|blocker
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|isThreadBlockedOn
argument_list|(
name|t
argument_list|,
name|blocker
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getState
argument_list|()
operator|==
name|Thread
operator|.
name|State
operator|.
name|TERMINATED
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Thread "
operator|+
name|t
operator|+
literal|" exited unexpectedly"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isThreadBlockedOn (Thread t, Object blocker)
specifier|private
specifier|static
name|boolean
name|isThreadBlockedOn
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Object
name|blocker
parameter_list|)
block|{
return|return
name|t
operator|.
name|getState
argument_list|()
operator|==
name|Thread
operator|.
name|State
operator|.
name|WAITING
operator|&&
name|LockSupport
operator|.
name|getBlocker
argument_list|(
name|t
argument_list|)
operator|==
name|blocker
return|;
block|}
DECL|class|SlowChannel
specifier|static
specifier|final
class|class
name|SlowChannel
extends|extends
name|AbstractInterruptibleChannel
block|{
DECL|field|exitClose
specifier|final
name|CountDownLatch
name|exitClose
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|implCloseChannel ()
specifier|protected
name|void
name|implCloseChannel
parameter_list|()
block|{
name|Uninterruptibles
operator|.
name|awaitUninterruptibly
argument_list|(
name|exitClose
argument_list|)
expr_stmt|;
block|}
DECL|method|doBegin ()
name|void
name|doBegin
parameter_list|()
block|{
name|super
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

