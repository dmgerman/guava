begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A {@link Future} implementation which always throws directly from calls to {@code get()} (i.e.  * not wrapped in {@code ExecutionException}. For just a normal failure, use {@link  * SettableFuture}).  *  *<p>Useful for testing the behavior of Future utilities against odd futures.  *  * @author Anthony Zana  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|UncheckedThrowingFuture
specifier|final
class|class
name|UncheckedThrowingFuture
parameter_list|<
name|V
parameter_list|>
implements|implements
name|ListenableFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|field|error
specifier|private
specifier|final
name|Error
name|error
decl_stmt|;
DECL|field|runtime
specifier|private
specifier|final
name|RuntimeException
name|runtime
decl_stmt|;
DECL|method|throwingError (Error error)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|throwingError
parameter_list|(
name|Error
name|error
parameter_list|)
block|{
return|return
operator|new
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|error
argument_list|)
return|;
block|}
DECL|method|throwingRuntimeException (RuntimeException e)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|throwingRuntimeException
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
operator|new
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|UncheckedThrowingFuture (Error error)
specifier|private
name|UncheckedThrowingFuture
parameter_list|(
name|Error
name|error
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|checkNotNull
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|this
operator|.
name|runtime
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|UncheckedThrowingFuture (RuntimeException e)
specifier|public
name|UncheckedThrowingFuture
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|this
operator|.
name|runtime
operator|=
name|checkNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
name|throwOnGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unreachable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|throwOnGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addListener (Runnable listener, Executor executor)
specifier|public
name|void
name|addListener
parameter_list|(
name|Runnable
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// TODO(cpovirk): Catch RuntimeExceptions
name|executor
operator|.
name|execute
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|throwOnGet ()
specifier|private
name|void
name|throwOnGet
parameter_list|()
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
else|else
block|{
throw|throw
name|runtime
throw|;
block|}
block|}
block|}
end_class

end_unit

