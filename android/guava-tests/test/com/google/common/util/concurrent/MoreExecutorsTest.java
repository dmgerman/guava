begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * Portions of this file are modified versions of  * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck/AbstractExecutorServiceTest.java?revision=1.30  * which contained the following notice:  *  * Written by Doug Lea with assistance from members of JCP JSR-166  * Expert Group and released to the public domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  * Other contributors include Andrew Wright, Jeffrey Hayes,  * Pat Fisher, Mike Judd.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|invokeAnyImpl
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|listeningDecorator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|newDirectExecutorService
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|renamingDecorator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|shutdownAndAwaitTermination
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Tests for MoreExecutors.  *  * @author Kyle Littlefield (klittle)  */
end_comment

begin_class
DECL|class|MoreExecutorsTest
specifier|public
class|class
name|MoreExecutorsTest
extends|extends
name|JSR166TestCase
block|{
DECL|field|EMPTY_RUNNABLE
specifier|private
specifier|static
specifier|final
name|Runnable
name|EMPTY_RUNNABLE
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
decl_stmt|;
DECL|method|testDirectExecutorServiceServiceInThreadExecution ()
specifier|public
name|void
name|testDirectExecutorServiceServiceInThreadExecution
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ListeningExecutorService
name|executor
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
specifier|final
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|threadLocalCount
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|initialValue
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwableFromOtherThread
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Runnable
name|incrementTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|threadLocalCount
operator|.
name|set
argument_list|(
name|threadLocalCount
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|otherThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
name|incrementTask
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|threadLocalCount
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwableFromOtherThread
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|otherThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
name|incrementTask
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerRunImmediately
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|threadLocalCount
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|otherThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Thread
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|otherThread
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|throwable
init|=
name|throwableFromOtherThread
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Throwable from other thread: "
operator|+
operator|(
name|throwable
operator|==
literal|null
condition|?
literal|null
else|:
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|throwable
argument_list|)
operator|)
argument_list|,
name|throwableFromOtherThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDirectExecutorServiceInvokeAll ()
specifier|public
name|void
name|testDirectExecutorServiceInvokeAll
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|executor
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
specifier|final
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|threadLocalCount
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|initialValue
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Integer
argument_list|>
name|incrementTask
init|=
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
block|{
name|int
name|i
init|=
name|threadLocalCount
operator|.
name|get
argument_list|()
decl_stmt|;
name|threadLocalCount
operator|.
name|set
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|10
argument_list|,
name|incrementTask
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|futures
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Task should have been run before being returned"
argument_list|,
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|future
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|threadLocalCount
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDirectExecutorServiceServiceTermination ()
specifier|public
name|void
name|testDirectExecutorServiceServiceTermination
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|executor
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwableFromOtherThread
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Runnable
name|doNothingRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
decl_stmt|;
name|Thread
name|otherThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// WAIT #1
name|barrier
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// WAIT #2
name|barrier
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
comment|// WAIT #3
name|barrier
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwableFromOtherThread
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|otherThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// WAIT #1
name|barrier
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|submit
argument_list|(
name|doNothingRunnable
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have encountered RejectedExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// good to go
block|}
name|assertFalse
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
comment|// WAIT #2
name|barrier
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// WAIT #3
name|barrier
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|submit
argument_list|(
name|doNothingRunnable
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have encountered RejectedExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// good to go
block|}
name|assertTrue
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
name|otherThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Thread
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|otherThread
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|throwable
init|=
name|throwableFromOtherThread
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Throwable from other thread: "
operator|+
operator|(
name|throwable
operator|==
literal|null
condition|?
literal|null
else|:
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|throwable
argument_list|)
operator|)
argument_list|,
name|throwableFromOtherThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for a bug where threads weren't getting signaled when shutdown was called, only when tasks    * completed.    */
DECL|method|testDirectExecutorService_awaitTermination_missedSignal ()
specifier|public
name|void
name|testDirectExecutorService_awaitTermination_missedSignal
parameter_list|()
block|{
specifier|final
name|ExecutorService
name|service
init|=
name|MoreExecutors
operator|.
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|Thread
name|waiter
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|service
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
decl_stmt|;
name|waiter
operator|.
name|start
argument_list|()
expr_stmt|;
name|awaitTimedWaiting
argument_list|(
name|waiter
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|waiter
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|waiter
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|waiter
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"awaitTermination failed to trigger after shutdown()"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Wait for the given thread to reach the {@link State#TIMED_WAITING} thread state. */
DECL|method|awaitTimedWaiting (Thread thread)
name|void
name|awaitTimedWaiting
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|thread
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|BLOCKED
case|:
case|case
name|NEW
case|:
case|case
name|RUNNABLE
case|:
case|case
name|WAITING
case|:
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMED_WAITING
case|:
return|return;
case|case
name|TERMINATED
case|:
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
DECL|method|testDirectExecutorService_shutdownNow ()
specifier|public
name|void
name|testDirectExecutorService_shutdownNow
parameter_list|()
block|{
name|ExecutorService
name|executor
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|executor
operator|.
name|shutdownNow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteAfterShutdown ()
specifier|public
name|void
name|testExecuteAfterShutdown
parameter_list|()
block|{
name|ExecutorService
name|executor
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testListeningExecutorServiceInvokeAllJavadocCodeCompiles ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testListeningExecutorServiceInvokeAllJavadocCodeCompiles
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|executor
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|unused
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
block|}
DECL|method|testListeningDecorator ()
specifier|public
name|void
name|testListeningDecorator
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|service
init|=
name|listeningDecorator
argument_list|(
name|newDirectExecutorService
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|service
argument_list|,
name|listeningDecorator
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|callables
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Callables
operator|.
name|returning
argument_list|(
literal|"x"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|service
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getOnlyElement
argument_list|(
name|results
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|TrustedListenableFutureTask
operator|.
name|class
argument_list|)
expr_stmt|;
name|results
operator|=
name|service
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getOnlyElement
argument_list|(
name|results
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|TrustedListenableFutureTask
operator|.
name|class
argument_list|)
expr_stmt|;
comment|/*      * TODO(cpovirk): move ForwardingTestCase somewhere common, and use it to      * test the forwarded methods      */
block|}
DECL|method|testListeningDecorator_noWrapExecuteTask ()
specifier|public
name|void
name|testListeningDecorator_noWrapExecuteTask
parameter_list|()
block|{
name|ExecutorService
name|delegate
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ListeningExecutorService
name|service
init|=
name|listeningDecorator
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delegate
argument_list|)
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|testListeningDecorator_scheduleSuccess ()
specifier|public
name|void
name|testListeningDecorator_scheduleSuccess
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|completed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ScheduledThreadPoolExecutor
name|delegate
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|afterExecute
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|completed
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ListeningScheduledExecutorService
name|service
init|=
name|listeningDecorator
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|service
operator|.
name|schedule
argument_list|(
name|Callables
operator|.
name|returning
argument_list|(
literal|42
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|/*      * Wait not just until the Future's value is set (as in future.get()) but      * also until ListeningScheduledExecutorService's wrapper task is done      * executing listeners, as detected by yielding control to afterExecute.      */
name|completed
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|assertListenerRunImmediately
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|delegate
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListeningDecorator_scheduleFailure ()
specifier|public
name|void
name|testListeningDecorator_scheduleFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledThreadPoolExecutor
name|delegate
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ListeningScheduledExecutorService
name|service
init|=
name|listeningDecorator
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|RuntimeException
name|ex
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|service
operator|.
name|schedule
argument_list|(
operator|new
name|ThrowingRunnable
argument_list|(
literal|0
argument_list|,
name|ex
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertExecutionException
argument_list|(
name|future
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|delegate
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListeningDecorator_schedulePeriodic ()
specifier|public
name|void
name|testListeningDecorator_schedulePeriodic
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledThreadPoolExecutor
name|delegate
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ListeningScheduledExecutorService
name|service
init|=
name|listeningDecorator
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|RuntimeException
name|ex
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
name|ThrowingRunnable
name|runnable
init|=
operator|new
name|ThrowingRunnable
argument_list|(
literal|5
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|future
operator|=
name|service
operator|.
name|scheduleAtFixedRate
argument_list|(
name|runnable
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertExecutionException
argument_list|(
name|future
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|runnable
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|delegate
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runnable
operator|=
operator|new
name|ThrowingRunnable
argument_list|(
literal|5
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|future
operator|=
name|service
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|runnable
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertExecutionException
argument_list|(
name|future
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|runnable
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|delegate
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListeningDecorator_cancelled ()
specifier|public
name|void
name|testListeningDecorator_cancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledThreadPoolExecutor
name|delegate
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|?
argument_list|>
name|delegateQueue
init|=
name|delegate
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|ListeningScheduledExecutorService
name|service
init|=
name|listeningDecorator
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|delegateFuture
decl_stmt|;
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
decl_stmt|;
name|future
operator|=
name|service
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|delegateFuture
operator|=
operator|(
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
operator|)
name|delegateQueue
operator|.
name|element
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|delegateFuture
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|delegateQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|future
operator|=
name|service
operator|.
name|scheduleAtFixedRate
argument_list|(
name|runnable
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|delegateFuture
operator|=
operator|(
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
operator|)
name|delegateQueue
operator|.
name|element
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|delegateFuture
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|delegateQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|future
operator|=
name|service
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|runnable
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|delegateFuture
operator|=
operator|(
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
operator|)
name|delegateQueue
operator|.
name|element
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|delegateFuture
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ThrowingRunnable
specifier|private
specifier|static
specifier|final
class|class
name|ThrowingRunnable
implements|implements
name|Runnable
block|{
DECL|field|throwAfterCount
specifier|final
name|int
name|throwAfterCount
decl_stmt|;
DECL|field|thrown
specifier|final
name|RuntimeException
name|thrown
decl_stmt|;
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|method|ThrowingRunnable (int throwAfterCount, RuntimeException thrown)
name|ThrowingRunnable
parameter_list|(
name|int
name|throwAfterCount
parameter_list|,
name|RuntimeException
name|thrown
parameter_list|)
block|{
name|this
operator|.
name|throwAfterCount
operator|=
name|throwAfterCount
expr_stmt|;
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|++
name|count
operator|>=
name|throwAfterCount
condition|)
block|{
throw|throw
name|thrown
throw|;
block|}
block|}
block|}
DECL|method|assertExecutionException (Future<?> future, Exception expectedCause)
specifier|private
specifier|static
name|void
name|assertExecutionException
parameter_list|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
parameter_list|,
name|Exception
name|expectedCause
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|expectedCause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** invokeAny(null) throws NPE */
DECL|method|testInvokeAnyImpl_nullTasks ()
specifier|public
name|void
name|testInvokeAnyImpl_nullTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|e
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|invokeAnyImpl
argument_list|(
name|e
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{     }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** invokeAny(empty collection) throws IAE */
DECL|method|testInvokeAnyImpl_emptyTasks ()
specifier|public
name|void
name|testInvokeAnyImpl_emptyTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|e
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|invokeAnyImpl
argument_list|(
name|e
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|success
parameter_list|)
block|{     }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** invokeAny(c) throws NPE if c has null elements */
DECL|method|testInvokeAnyImpl_nullElement ()
specifier|public
name|void
name|testInvokeAnyImpl_nullElement
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|e
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"/ by zero"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|invokeAnyImpl
argument_list|(
name|e
argument_list|,
name|l
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{     }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** invokeAny(c) throws ExecutionException if no task in c completes */
DECL|method|testInvokeAnyImpl_noTaskCompletes ()
specifier|public
name|void
name|testInvokeAnyImpl_noTaskCompletes
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|e
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|NPETask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|invokeAnyImpl
argument_list|(
name|e
argument_list|,
name|l
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertThat
argument_list|(
name|success
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** invokeAny(c) returns result of some task in c if at least one completes */
DECL|method|testInvokeAnyImpl ()
specifier|public
name|void
name|testInvokeAnyImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|e
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|invokeAnyImpl
argument_list|(
name|e
argument_list|,
name|l
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertListenerRunImmediately (ListenableFuture<?> future)
specifier|private
specifier|static
name|void
name|assertListenerRunImmediately
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|class|CountingRunnable
specifier|private
specifier|static
specifier|final
class|class
name|CountingRunnable
implements|implements
name|Runnable
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testAddDelayedShutdownHook_success ()
specifier|public
name|void
name|testAddDelayedShutdownHook_success
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ExecutorService
name|service
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|application
operator|.
name|addDelayedShutdownHook
argument_list|(
name|service
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|application
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|InOrder
name|shutdownFirst
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|shutdownFirst
operator|.
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|shutdownFirst
operator|.
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|awaitTermination
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddDelayedShutdownHook_interrupted ()
specifier|public
name|void
name|testAddDelayedShutdownHook_interrupted
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ExecutorService
name|service
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|application
operator|.
name|addDelayedShutdownHook
argument_list|(
name|service
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|awaitTermination
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
expr_stmt|;
name|application
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetExitingExecutorService_executorSetToUseDaemonThreads ()
specifier|public
name|void
name|testGetExitingExecutorService_executorSetToUseDaemonThreads
parameter_list|()
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|application
operator|.
name|getExitingExecutorService
argument_list|(
name|executor
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetExitingExecutorService_executorDelegatesToOriginal ()
specifier|public
name|void
name|testGetExitingExecutorService_executorDelegatesToOriginal
parameter_list|()
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|mock
argument_list|(
name|ThreadFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|application
operator|.
name|getExitingExecutorService
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetExitingExecutorService_shutdownHookRegistered ()
specifier|public
name|void
name|testGetExitingExecutorService_shutdownHookRegistered
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
name|mock
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|mock
argument_list|(
name|ThreadFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|ExecutorService
name|unused
init|=
name|application
operator|.
name|getExitingExecutorService
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|application
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|executor
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetExitingScheduledExecutorService_executorSetToUseDaemonThreads ()
specifier|public
name|void
name|testGetExitingScheduledExecutorService_executorSetToUseDaemonThreads
parameter_list|()
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|application
operator|.
name|getExitingScheduledExecutorService
argument_list|(
name|executor
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetExitingScheduledExecutorService_executorDelegatesToOriginal ()
specifier|public
name|void
name|testGetExitingScheduledExecutorService_executorDelegatesToOriginal
parameter_list|()
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ScheduledThreadPoolExecutor
name|executor
init|=
name|mock
argument_list|(
name|ScheduledThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|mock
argument_list|(
name|ThreadFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|application
operator|.
name|getExitingScheduledExecutorService
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
name|EMPTY_RUNNABLE
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetScheduledExitingExecutorService_shutdownHookRegistered ()
specifier|public
name|void
name|testGetScheduledExitingExecutorService_shutdownHookRegistered
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TestApplication
name|application
init|=
operator|new
name|TestApplication
argument_list|()
decl_stmt|;
name|ScheduledThreadPoolExecutor
name|executor
init|=
name|mock
argument_list|(
name|ScheduledThreadPoolExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|mock
argument_list|(
name|ThreadFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|executor
operator|.
name|getThreadFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|ScheduledExecutorService
name|unused
init|=
name|application
operator|.
name|getExitingScheduledExecutorService
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|application
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|executor
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testPlatformThreadFactory_default ()
specifier|public
name|void
name|testPlatformThreadFactory_default
parameter_list|()
block|{
name|ThreadFactory
name|factory
init|=
name|MoreExecutors
operator|.
name|platformThreadFactory
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
comment|// Executors#defaultThreadFactory() may return a new instance each time.
name|assertEquals
argument_list|(
name|factory
operator|.
name|getClass
argument_list|()
argument_list|,
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadRenaming ()
specifier|public
name|void
name|testThreadRenaming
parameter_list|()
block|{
name|Executor
name|renamingExecutor
init|=
name|renamingDecorator
argument_list|(
name|newDirectExecutorService
argument_list|()
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"FooBar"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|oldName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|renamingExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"FooBar"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldName
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecutors_nullCheck ()
specifier|public
name|void
name|testExecutors_nullCheck
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|setDefault
argument_list|(
name|RateLimiter
operator|.
name|class
argument_list|,
name|RateLimiter
operator|.
name|create
argument_list|(
literal|1.0
argument_list|)
argument_list|)
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|MoreExecutors
operator|.
name|class
argument_list|)
operator|.
name|thatReturn
argument_list|(
name|Executor
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
DECL|class|TestApplication
specifier|private
specifier|static
class|class
name|TestApplication
extends|extends
name|Application
block|{
DECL|field|hooks
specifier|private
specifier|final
name|List
argument_list|<
name|Thread
argument_list|>
name|hooks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|addShutdownHook (Thread hook)
specifier|synchronized
name|void
name|addShutdownHook
parameter_list|(
name|Thread
name|hook
parameter_list|)
block|{
name|hooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|synchronized
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Thread
name|hook
range|:
name|hooks
control|)
block|{
name|hook
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|hook
range|:
name|hooks
control|)
block|{
name|hook
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* Half of a 1-second timeout in nanoseconds */
DECL|field|HALF_SECOND_NANOS
specifier|private
specifier|static
specifier|final
name|long
name|HALF_SECOND_NANOS
init|=
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|1L
argument_list|,
name|SECONDS
argument_list|)
operator|/
literal|2
decl_stmt|;
DECL|method|testShutdownAndAwaitTermination_immediateShutdown ()
specifier|public
name|void
name|testShutdownAndAwaitTermination_immediateShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|service
argument_list|,
literal|1L
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShutdownAndAwaitTermination_immediateShutdownInternal ()
specifier|public
name|void
name|testShutdownAndAwaitTermination_immediateShutdownInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|service
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|isTerminated
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|service
argument_list|,
literal|1L
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|testShutdownAndAwaitTermination_forcedShutDownInternal ()
specifier|public
name|void
name|testShutdownAndAwaitTermination_forcedShutDownInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|service
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|isTerminated
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|service
argument_list|,
literal|1L
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
DECL|method|testShutdownAndAwaitTermination_nonTerminationInternal ()
specifier|public
name|void
name|testShutdownAndAwaitTermination_nonTerminationInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|service
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|service
argument_list|,
literal|1L
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
DECL|method|testShutdownAndAwaitTermination_interruptedInternal ()
specifier|public
name|void
name|testShutdownAndAwaitTermination_interruptedInternal
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|service
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|service
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|terminated
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// we need to keep this in a flag because t.isInterrupted() returns false after t.join()
specifier|final
name|AtomicBoolean
name|interrupted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// we need to use another thread because it will be interrupted and thus using
comment|// the current one, owned by JUnit, would make the test fail
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|terminated
operator|.
name|set
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|service
argument_list|,
literal|1L
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|interrupted
operator|.
name|set
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|awaitTermination
argument_list|(
name|HALF_SECOND_NANOS
argument_list|,
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|service
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|interrupted
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|terminated
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

