begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Answers
operator|.
name|CALLS_REAL_METHODS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ForwardingWrapperTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Tester for typical subclass of {@link ForwardingObject} by using EasyMock partial mocks.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|ForwardingObjectTester
specifier|final
class|class
name|ForwardingObjectTester
block|{
DECL|field|DELEGATE_METHOD
specifier|private
specifier|static
specifier|final
name|Method
name|DELEGATE_METHOD
decl_stmt|;
static|static
block|{
try|try
block|{
name|DELEGATE_METHOD
operator|=
name|ForwardingObject
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"delegate"
argument_list|)
expr_stmt|;
name|DELEGATE_METHOD
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Ensures that all interface methods of {@code forwarderClass} are forwarded to the {@link    * ForwardingObject#delegate}. {@code forwarderClass} is assumed to only implement one interface.    */
DECL|method|testForwardingObject (final Class<T> forwarderClass)
specifier|static
parameter_list|<
name|T
extends|extends
name|ForwardingObject
parameter_list|>
name|void
name|testForwardingObject
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|forwarderClass
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// super interface type of T
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|interfaceType
init|=
operator|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
operator|)
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|forwarderClass
operator|.
name|getInterfaces
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|ForwardingWrapperTester
argument_list|()
operator|.
name|testForwarding
argument_list|(
name|interfaceType
argument_list|,
operator|new
name|Function
argument_list|<
name|Object
argument_list|,
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|apply
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|T
name|mock
init|=
name|mock
argument_list|(
name|forwarderClass
argument_list|,
name|CALLS_REAL_METHODS
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|T
name|stubber
init|=
name|doReturn
argument_list|(
name|delegate
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|DELEGATE_METHOD
operator|.
name|invoke
argument_list|(
name|stubber
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|mock
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

