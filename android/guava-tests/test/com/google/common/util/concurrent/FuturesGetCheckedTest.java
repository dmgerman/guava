begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClassPathUtil
operator|.
name|parseJavaClassPath
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|getChecked
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|CHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ERROR_FUTURE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_CHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_OTHER_THROWABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_UNCHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|OTHER_THROWABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|RUNTIME_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|RUNTIME_EXCEPTION_FUTURE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|UNCHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|GcFinalization
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithBadConstructor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithGoodAndBadConstructor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithManyConstructors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithPrivateConstructor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithSomePrivateConstructors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithWrongTypesConstructor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ExceptionWithoutThrowableConstructor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|TwoArgConstructorException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|TwoArgConstructorRuntimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for {@link Futures#getChecked(Future, Class)}. */
end_comment

begin_class
DECL|class|FuturesGetCheckedTest
specifier|public
class|class
name|FuturesGetCheckedTest
extends|extends
name|TestCase
block|{
comment|// Boring untimed-get tests:
DECL|method|testGetCheckedUntimed_success ()
specifier|public
name|void
name|testGetCheckedUntimed_success
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|getChecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetCheckedUntimed_interrupted ()
specifier|public
name|void
name|testGetCheckedUntimed_interrupted
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|getChecked
argument_list|(
name|future
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|InterruptedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_cancelled ()
specifier|public
name|void
name|testGetCheckedUntimed_cancelled
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|getChecked
argument_list|(
name|future
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedUntimed_ExecutionExceptionChecked ()
specifier|public
name|void
name|testGetCheckedUntimed_ExecutionExceptionChecked
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_ExecutionExceptionUnchecked ()
specifier|public
name|void
name|testGetCheckedUntimed_ExecutionExceptionUnchecked
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_UNCHECKED_EXCEPTION
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|UNCHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_ExecutionExceptionError ()
specifier|public
name|void
name|testGetCheckedUntimed_ExecutionExceptionError
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_ERROR
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_ExecutionExceptionOtherThrowable ()
specifier|public
name|void
name|testGetCheckedUntimed_ExecutionExceptionOtherThrowable
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_OTHER_THROWABLE
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|OTHER_THROWABLE
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_RuntimeException ()
specifier|public
name|void
name|testGetCheckedUntimed_RuntimeException
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|RUNTIME_EXCEPTION_FUTURE
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RUNTIME_EXCEPTION
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_Error ()
specifier|public
name|void
name|testGetCheckedUntimed_Error
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|ERROR_FUTURE
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR
argument_list|,
name|expected
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetCheckedUntimed_badExceptionConstructor_failsEvenForSuccessfulInput ()
specifier|public
name|void
name|testGetCheckedUntimed_badExceptionConstructor_failsEvenForSuccessfulInput
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getChecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|ExceptionWithBadConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedUntimed_badExceptionConstructor_wrapsOriginalChecked ()
specifier|public
name|void
name|testGetCheckedUntimed_badExceptionConstructor_wrapsOriginalChecked
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithBadConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedUntimed_withGoodAndBadExceptionConstructor ()
specifier|public
name|void
name|testGetCheckedUntimed_withGoodAndBadExceptionConstructor
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithGoodAndBadConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionWithGoodAndBadConstructor
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|CHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Boring timed-get tests:
DECL|method|testGetCheckedTimed_success ()
specifier|public
name|void
name|testGetCheckedTimed_success
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|getChecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetCheckedTimed_interrupted ()
specifier|public
name|void
name|testGetCheckedTimed_interrupted
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|getChecked
argument_list|(
name|future
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|InterruptedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_cancelled ()
specifier|public
name|void
name|testGetCheckedTimed_cancelled
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|getChecked
argument_list|(
name|future
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedTimed_ExecutionExceptionChecked ()
specifier|public
name|void
name|testGetCheckedTimed_ExecutionExceptionChecked
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_ExecutionExceptionUnchecked ()
specifier|public
name|void
name|testGetCheckedTimed_ExecutionExceptionUnchecked
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_UNCHECKED_EXCEPTION
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|UNCHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_ExecutionExceptionError ()
specifier|public
name|void
name|testGetCheckedTimed_ExecutionExceptionError
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_ERROR
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_ExecutionExceptionOtherThrowable ()
specifier|public
name|void
name|testGetCheckedTimed_ExecutionExceptionOtherThrowable
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_OTHER_THROWABLE
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|OTHER_THROWABLE
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_RuntimeException ()
specifier|public
name|void
name|testGetCheckedTimed_RuntimeException
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|RUNTIME_EXCEPTION_FUTURE
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RUNTIME_EXCEPTION
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_Error ()
specifier|public
name|void
name|testGetCheckedTimed_Error
parameter_list|()
throws|throws
name|TwoArgConstructorException
block|{
try|try
block|{
name|getChecked
argument_list|(
name|ERROR_FUTURE
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR
argument_list|,
name|expected
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetCheckedTimed_TimeoutException ()
specifier|public
name|void
name|testGetCheckedTimed_TimeoutException
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|getChecked
argument_list|(
name|future
argument_list|,
name|TwoArgConstructorException
operator|.
name|class
argument_list|,
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TwoArgConstructorException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|TimeoutException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedTimed_badExceptionConstructor_failsEvenForSuccessfulInput ()
specifier|public
name|void
name|testGetCheckedTimed_badExceptionConstructor_failsEvenForSuccessfulInput
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getChecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|ExceptionWithBadConstructor
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedTimed_badExceptionConstructor_wrapsOriginalChecked ()
specifier|public
name|void
name|testGetCheckedTimed_badExceptionConstructor_wrapsOriginalChecked
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithBadConstructor
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedTimed_withGoodAndBadExceptionConstructor ()
specifier|public
name|void
name|testGetCheckedTimed_withGoodAndBadExceptionConstructor
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithGoodAndBadConstructor
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionWithGoodAndBadConstructor
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|CHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Edge case tests of the exception-construction code through untimed get():
annotation|@
name|SuppressWarnings
argument_list|(
literal|"FuturesGetCheckedIllegalExceptionType"
argument_list|)
DECL|method|testGetCheckedUntimed_exceptionClassIsRuntimeException ()
specifier|public
name|void
name|testGetCheckedUntimed_exceptionClassIsRuntimeException
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|TwoArgConstructorRuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedUntimed_exceptionClassSomePrivateConstructors ()
specifier|public
name|void
name|testGetCheckedUntimed_exceptionClassSomePrivateConstructors
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithSomePrivateConstructors
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionWithSomePrivateConstructors
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"FuturesGetCheckedIllegalExceptionType"
argument_list|)
DECL|method|testGetCheckedUntimed_exceptionClassNoPublicConstructor ()
specifier|public
name|void
name|testGetCheckedUntimed_exceptionClassNoPublicConstructor
parameter_list|()
throws|throws
name|ExceptionWithPrivateConstructor
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithPrivateConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"FuturesGetCheckedIllegalExceptionType"
argument_list|)
DECL|method|testGetCheckedUntimed_exceptionClassPublicConstructorWrongType ()
specifier|public
name|void
name|testGetCheckedUntimed_exceptionClassPublicConstructorWrongType
parameter_list|()
throws|throws
name|ExceptionWithWrongTypesConstructor
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithWrongTypesConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetCheckedUntimed_exceptionClassPrefersStringConstructor ()
specifier|public
name|void
name|testGetCheckedUntimed_exceptionClassPrefersStringConstructor
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithManyConstructors
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionWithManyConstructors
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|usedExpectedConstructor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetCheckedUntimed_exceptionClassUsedInitCause ()
specifier|public
name|void
name|testGetCheckedUntimed_exceptionClassUsedInitCause
parameter_list|()
block|{
try|try
block|{
name|getChecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|,
name|ExceptionWithoutThrowableConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExceptionWithoutThrowableConstructor
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"mymessage"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Class unloading test:
DECL|class|WillBeUnloadedException
specifier|public
specifier|static
specifier|final
class|class
name|WillBeUnloadedException
extends|extends
name|Exception
block|{}
DECL|method|testGetChecked_classUnloading ()
specifier|public
name|void
name|testGetChecked_classUnloading
parameter_list|()
throws|throws
name|Exception
block|{
name|WeakReference
argument_list|<
name|?
argument_list|>
name|classUsedByGetChecked
init|=
name|doTestClassUnloading
argument_list|()
decl_stmt|;
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|classUsedByGetChecked
argument_list|)
expr_stmt|;
block|}
comment|/**    * Loads {@link WillBeUnloadedException} in a separate {@code ClassLoader}, calls {@code    * getChecked(future, WillBeUnloadedException.class)}, and returns the loader. The caller can then    * test that the {@code ClassLoader} can still be GCed. The test amounts to a test that {@code    * getChecked} holds no strong references to the class.    */
DECL|method|doTestClassUnloading ()
specifier|private
name|WeakReference
argument_list|<
name|?
argument_list|>
name|doTestClassUnloading
parameter_list|()
throws|throws
name|Exception
block|{
name|URLClassLoader
name|shadowLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|parseJavaClassPath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|WillBeUnloadedException
argument_list|>
name|shadowClass
init|=
operator|(
name|Class
argument_list|<
name|WillBeUnloadedException
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|WillBeUnloadedException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|shadowLoader
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|shadowClass
argument_list|,
name|WillBeUnloadedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|getChecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|shadowClass
argument_list|)
expr_stmt|;
return|return
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|shadowLoader
argument_list|)
return|;
block|}
comment|/*    * TODO(cpovirk): It would be great to run all these tests (including class unloading) in an    * environment that forces Futures.getChecked to its fallback WeakSetValidator. One awful way of    * doing so would be to derive a separate test library by using remove_from_jar to strip out    * ClassValueValidator.    */
block|}
end_class

end_unit

