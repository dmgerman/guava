begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link SimpleTimeLimiter}.  *  * @author kevinb  * @author Jens Nyman  */
end_comment

begin_class
DECL|class|SimpleTimeLimiterTest
specifier|public
class|class
name|SimpleTimeLimiterTest
extends|extends
name|TestCase
block|{
DECL|field|DELAY_MS
specifier|private
specifier|static
specifier|final
name|long
name|DELAY_MS
init|=
literal|50
decl_stmt|;
DECL|field|ENOUGH_MS
specifier|private
specifier|static
specifier|final
name|long
name|ENOUGH_MS
init|=
literal|500
decl_stmt|;
DECL|field|NOT_ENOUGH_MS
specifier|private
specifier|static
specifier|final
name|long
name|NOT_ENOUGH_MS
init|=
literal|5
decl_stmt|;
DECL|field|GOOD_CALLABLE_RESULT
specifier|private
specifier|static
specifier|final
name|String
name|GOOD_CALLABLE_RESULT
init|=
literal|"good callable result"
decl_stmt|;
DECL|field|GOOD_CALLABLE
specifier|private
specifier|static
specifier|final
name|Callable
argument_list|<
name|String
argument_list|>
name|GOOD_CALLABLE
init|=
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|DELAY_MS
argument_list|)
expr_stmt|;
return|return
name|GOOD_CALLABLE_RESULT
return|;
block|}
block|}
decl_stmt|;
DECL|field|BAD_CALLABLE
specifier|private
specifier|static
specifier|final
name|Callable
argument_list|<
name|String
argument_list|>
name|BAD_CALLABLE
init|=
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|SampleException
block|{
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|DELAY_MS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SampleException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
DECL|field|GOOD_RUNNABLE
specifier|private
specifier|static
specifier|final
name|Runnable
name|GOOD_RUNNABLE
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|DELAY_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|BAD_RUNNABLE
specifier|private
specifier|static
specifier|final
name|Runnable
name|BAD_RUNNABLE
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|DELAY_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SampleRuntimeException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
DECL|field|service
specifier|private
name|TimeLimiter
name|service
decl_stmt|;
DECL|field|executor
specifier|private
specifier|static
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|service
operator|=
name|SimpleTimeLimiter
operator|.
name|create
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewProxy_goodMethodWithEnoughTime ()
specifier|public
name|void
name|testNewProxy_goodMethodWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|SampleImpl
name|target
init|=
operator|new
name|SampleImpl
argument_list|(
name|DELAY_MS
argument_list|)
decl_stmt|;
name|Sample
name|proxy
init|=
name|service
operator|.
name|newProxy
argument_list|(
name|target
argument_list|,
name|Sample
operator|.
name|class
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|proxy
operator|.
name|sleepThenReturnInput
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|target
operator|.
name|finished
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewProxy_goodMethodWithNotEnoughTime ()
specifier|public
name|void
name|testNewProxy_goodMethodWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|SampleImpl
name|target
init|=
operator|new
name|SampleImpl
argument_list|(
literal|9999
argument_list|)
decl_stmt|;
name|Sample
name|proxy
init|=
name|service
operator|.
name|newProxy
argument_list|(
name|target
argument_list|,
name|Sample
operator|.
name|class
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|sleepThenReturnInput
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedTimeoutException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|NOT_ENOUGH_MS
argument_list|,
name|DELAY_MS
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Is it still computing away anyway?
name|assertThat
argument_list|(
name|target
operator|.
name|finished
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|ENOUGH_MS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|target
operator|.
name|finished
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewProxy_badMethodWithEnoughTime ()
specifier|public
name|void
name|testNewProxy_badMethodWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|SampleImpl
name|target
init|=
operator|new
name|SampleImpl
argument_list|(
name|DELAY_MS
argument_list|)
decl_stmt|;
name|Sample
name|proxy
init|=
name|service
operator|.
name|newProxy
argument_list|(
name|target
argument_list|,
name|Sample
operator|.
name|class
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|sleepThenThrowException
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SampleException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewProxy_badMethodWithNotEnoughTime ()
specifier|public
name|void
name|testNewProxy_badMethodWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|SampleImpl
name|target
init|=
operator|new
name|SampleImpl
argument_list|(
literal|9999
argument_list|)
decl_stmt|;
name|Sample
name|proxy
init|=
name|service
operator|.
name|newProxy
argument_list|(
name|target
argument_list|,
name|Sample
operator|.
name|class
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|sleepThenThrowException
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedTimeoutException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|NOT_ENOUGH_MS
argument_list|,
name|DELAY_MS
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|testOldCallWithTimeout_goodCallableWithEnoughTime ()
specifier|public
name|void
name|testOldCallWithTimeout_goodCallableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|service
operator|.
name|callWithTimeout
argument_list|(
name|GOOD_CALLABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|,
literal|true
comment|/* interruptible */
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|GOOD_CALLABLE_RESULT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|testOldCallWithTimeout_goodCallableWithNotEnoughTime ()
specifier|public
name|void
name|testOldCallWithTimeout_goodCallableWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|callWithTimeout
argument_list|(
name|GOOD_CALLABLE
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|,
literal|false
comment|/* interruptible */
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedTimeoutException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|NOT_ENOUGH_MS
argument_list|,
name|DELAY_MS
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|testOldCallWithTimeout_badCallableWithEnoughTime ()
specifier|public
name|void
name|testOldCallWithTimeout_badCallableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|callWithTimeout
argument_list|(
name|BAD_CALLABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|,
literal|false
comment|/* interruptible */
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SampleException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|testOldCallWithTimeout_badCallableWithNotEnoughTime ()
specifier|public
name|void
name|testOldCallWithTimeout_badCallableWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|callWithTimeout
argument_list|(
name|BAD_CALLABLE
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|,
literal|true
comment|/* interruptible */
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedTimeoutException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|NOT_ENOUGH_MS
argument_list|,
name|DELAY_MS
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCallWithTimeout_goodCallableWithEnoughTime ()
specifier|public
name|void
name|testCallWithTimeout_goodCallableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|service
operator|.
name|callWithTimeout
argument_list|(
name|GOOD_CALLABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|GOOD_CALLABLE_RESULT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCallWithTimeout_goodCallableWithNotEnoughTime ()
specifier|public
name|void
name|testCallWithTimeout_goodCallableWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|callWithTimeout
argument_list|(
name|GOOD_CALLABLE
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCallWithTimeout_badCallableWithEnoughTime ()
specifier|public
name|void
name|testCallWithTimeout_badCallableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|callWithTimeout
argument_list|(
name|BAD_CALLABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|SampleException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCallUninterruptiblyWithTimeout_goodCallableWithEnoughTime ()
specifier|public
name|void
name|testCallUninterruptiblyWithTimeout_goodCallableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|service
operator|.
name|callUninterruptiblyWithTimeout
argument_list|(
name|GOOD_CALLABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|GOOD_CALLABLE_RESULT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCallUninterruptiblyWithTimeout_goodCallableWithNotEnoughTime ()
specifier|public
name|void
name|testCallUninterruptiblyWithTimeout_goodCallableWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|callUninterruptiblyWithTimeout
argument_list|(
name|GOOD_CALLABLE
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCallUninterruptiblyWithTimeout_badCallableWithEnoughTime ()
specifier|public
name|void
name|testCallUninterruptiblyWithTimeout_badCallableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|callUninterruptiblyWithTimeout
argument_list|(
name|BAD_CALLABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|SampleException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRunWithTimeout_goodRunnableWithEnoughTime ()
specifier|public
name|void
name|testRunWithTimeout_goodRunnableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|service
operator|.
name|runWithTimeout
argument_list|(
name|GOOD_RUNNABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRunWithTimeout_goodRunnableWithNotEnoughTime ()
specifier|public
name|void
name|testRunWithTimeout_goodRunnableWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|runWithTimeout
argument_list|(
name|GOOD_RUNNABLE
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testRunWithTimeout_badRunnableWithEnoughTime ()
specifier|public
name|void
name|testRunWithTimeout_badRunnableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|runWithTimeout
argument_list|(
name|BAD_RUNNABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|SampleRuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRunUninterruptiblyWithTimeout_goodRunnableWithEnoughTime ()
specifier|public
name|void
name|testRunUninterruptiblyWithTimeout_goodRunnableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|service
operator|.
name|runUninterruptiblyWithTimeout
argument_list|(
name|GOOD_RUNNABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isIn
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|DELAY_MS
argument_list|,
name|ENOUGH_MS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRunUninterruptiblyWithTimeout_goodRunnableWithNotEnoughTime ()
specifier|public
name|void
name|testRunUninterruptiblyWithTimeout_goodRunnableWithNotEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|runUninterruptiblyWithTimeout
argument_list|(
name|GOOD_RUNNABLE
argument_list|,
name|NOT_ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testRunUninterruptiblyWithTimeout_badRunnableWithEnoughTime ()
specifier|public
name|void
name|testRunUninterruptiblyWithTimeout_badRunnableWithEnoughTime
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|service
operator|.
name|runUninterruptiblyWithTimeout
argument_list|(
name|BAD_RUNNABLE
argument_list|,
name|ENOUGH_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|SampleRuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|Sample
specifier|private
interface|interface
name|Sample
block|{
DECL|method|sleepThenReturnInput (String input)
name|String
name|sleepThenReturnInput
parameter_list|(
name|String
name|input
parameter_list|)
function_decl|;
DECL|method|sleepThenThrowException ()
name|void
name|sleepThenThrowException
parameter_list|()
throws|throws
name|SampleException
function_decl|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|SampleException
specifier|private
specifier|static
class|class
name|SampleException
extends|extends
name|Exception
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|SampleRuntimeException
specifier|private
specifier|static
class|class
name|SampleRuntimeException
extends|extends
name|RuntimeException
block|{}
DECL|class|SampleImpl
specifier|private
specifier|static
class|class
name|SampleImpl
implements|implements
name|Sample
block|{
DECL|field|delayMillis
specifier|final
name|long
name|delayMillis
decl_stmt|;
DECL|field|finished
name|boolean
name|finished
decl_stmt|;
DECL|method|SampleImpl (long delayMillis)
name|SampleImpl
parameter_list|(
name|long
name|delayMillis
parameter_list|)
block|{
name|this
operator|.
name|delayMillis
operator|=
name|delayMillis
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sleepThenReturnInput (String input)
specifier|public
name|String
name|sleepThenReturnInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|delayMillis
argument_list|)
expr_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
return|return
name|input
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|sleepThenThrowException ()
specifier|public
name|void
name|sleepThenThrowException
parameter_list|()
throws|throws
name|SampleException
block|{
try|try
block|{
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|delayMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
throw|throw
operator|new
name|SampleException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

