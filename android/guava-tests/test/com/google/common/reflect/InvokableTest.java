begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AccessibleObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Invokable}.  *  * @author Ben Yu  */
end_comment

begin_class
annotation|@
name|AndroidIncompatible
comment|// lots of failures, possibly some related to bad equals() implementations?
DECL|class|InvokableTest
specifier|public
class|class
name|InvokableTest
extends|extends
name|TestCase
block|{
comment|// Historically Invokable inherited from java.lang.reflect.AccessibleObject. That's no longer the
comment|// case, but we do check that its API still has the same public methods. We exclude some methods
comment|// that were added in Java 9 and that people probably weren't calling via Invokable, namely
comment|// `boolean canAccess(Object)`.
DECL|method|testApiCompatibleWithAccessibleObject ()
specifier|public
name|void
name|testApiCompatibleWithAccessibleObject
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|invokableMethods
init|=
name|publicMethodSignatures
argument_list|(
name|Invokable
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|accesibleObjectMethods
init|=
name|publicMethodSignatures
argument_list|(
name|AccessibleObject
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"canAccess"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|invokableMethods
argument_list|)
operator|.
name|containsAtLeastElementsIn
argument_list|(
name|accesibleObjectMethods
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|genericDeclaration
decl_stmt|;
try|try
block|{
name|genericDeclaration
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.reflect.GenericDeclaration"
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|genericDeclarationMethods
init|=
name|publicMethodSignatures
argument_list|(
name|genericDeclaration
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|invokableMethods
argument_list|)
operator|.
name|containsAtLeastElementsIn
argument_list|(
name|genericDeclarationMethods
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// OK: we're on Java 7, which doesn't have this class
block|}
block|}
DECL|method|publicMethodSignatures ( Class<?> c, ImmutableSet<String> ignore)
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|publicMethodSignatures
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ignore
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|c
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|ignore
operator|.
name|contains
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|signature
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|typeName
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
name|String
name|sep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|param
range|:
name|method
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|signature
operator|.
name|append
argument_list|(
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|typeName
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|", "
expr_stmt|;
block|}
name|methods
operator|.
name|add
argument_list|(
name|signature
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|methods
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|typeName (Class<?> type)
specifier|private
specifier|static
name|String
name|typeName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|isArray
argument_list|()
condition|?
name|typeName
argument_list|(
name|type
operator|.
name|getComponentType
argument_list|()
argument_list|)
operator|+
literal|"[]"
else|:
name|type
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|A
argument_list|,
name|A
argument_list|>
name|invokable
init|=
name|A
operator|.
name|constructor
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isPublic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPackagePrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAbstractMethod ()
specifier|public
name|void
name|testAbstractMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"abstractMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isPackagePrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverridableMethod ()
specifier|public
name|void
name|testOverridableMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"overridableMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isPackagePrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrivateMethod ()
specifier|public
name|void
name|testPrivateMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPackagePrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPublic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testProtectedMethod ()
specifier|public
name|void
name|testProtectedMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"protectedMethod"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPackagePrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPublic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFinalMethod ()
specifier|public
name|void
name|testFinalMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"publicFinalMethod"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isPublic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNativeMethod ()
specifier|public
name|void
name|testNativeMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"nativeMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isNative
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isPackagePrivate
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSynchronizedMethod ()
specifier|public
name|void
name|testSynchronizedMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"synchronizedMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|invokable
operator|.
name|isSynchronized
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnannotatedMethod ()
specifier|public
name|void
name|testUnannotatedMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|A
operator|.
name|method
argument_list|(
literal|"notAnnotatedMethod"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|invokable
operator|.
name|isAnnotationPresent
argument_list|(
name|Tested
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
DECL|annotation|Tested
specifier|private
annotation_defn|@interface
name|Tested
block|{}
DECL|class|A
specifier|private
specifier|abstract
specifier|static
class|class
name|A
block|{
DECL|field|privateField
annotation|@
name|Tested
specifier|private
name|boolean
name|privateField
decl_stmt|;
DECL|field|packagePrivateField
annotation|@
name|Tested
name|int
name|packagePrivateField
decl_stmt|;
DECL|field|protectedField
annotation|@
name|Tested
specifier|protected
name|int
name|protectedField
decl_stmt|;
DECL|field|publicField
annotation|@
name|Tested
specifier|public
name|String
name|publicField
decl_stmt|;
DECL|field|staticField
annotation|@
name|Tested
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|staticField
decl_stmt|;
DECL|field|finalField
annotation|@
name|Tested
specifier|private
specifier|final
name|Object
name|finalField
decl_stmt|;
DECL|field|volatileField
specifier|private
specifier|volatile
name|char
name|volatileField
decl_stmt|;
DECL|field|transientField
specifier|private
specifier|transient
name|long
name|transientField
decl_stmt|;
annotation|@
name|Tested
DECL|method|A (Object finalField)
specifier|public
name|A
parameter_list|(
name|Object
name|finalField
parameter_list|)
block|{
name|this
operator|.
name|finalField
operator|=
name|finalField
expr_stmt|;
block|}
annotation|@
name|Tested
DECL|method|abstractMethod ()
specifier|abstract
name|void
name|abstractMethod
parameter_list|()
function_decl|;
annotation|@
name|Tested
DECL|method|overridableMethod ()
name|void
name|overridableMethod
parameter_list|()
block|{}
annotation|@
name|Tested
DECL|method|protectedMethod ()
specifier|protected
name|void
name|protectedMethod
parameter_list|()
block|{}
annotation|@
name|Tested
DECL|method|privateMethod ()
specifier|private
name|void
name|privateMethod
parameter_list|()
block|{}
annotation|@
name|Tested
DECL|method|publicFinalMethod ()
specifier|public
specifier|final
name|void
name|publicFinalMethod
parameter_list|()
block|{}
DECL|method|notAnnotatedMethod ()
name|void
name|notAnnotatedMethod
parameter_list|()
block|{}
DECL|method|constructor ()
specifier|static
name|Invokable
argument_list|<
name|A
argument_list|,
name|A
argument_list|>
name|constructor
parameter_list|()
throws|throws
name|Exception
block|{
name|Constructor
argument_list|<
name|A
argument_list|>
name|constructor
init|=
name|A
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Invokable
argument_list|<
name|A
argument_list|,
name|A
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|constructor
operator|.
name|getName
argument_list|()
argument_list|,
name|invokable
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|A
operator|.
name|class
argument_list|,
name|invokable
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|invokable
return|;
block|}
DECL|method|method (String name, Class<?>... parameterTypes)
specifier|static
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|method
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|A
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|invokable
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|A
operator|.
name|class
argument_list|,
name|invokable
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|invokable
return|;
block|}
DECL|method|nativeMethod ()
specifier|native
name|void
name|nativeMethod
parameter_list|()
function_decl|;
DECL|method|synchronizedMethod ()
specifier|synchronized
name|void
name|synchronizedMethod
parameter_list|()
block|{}
block|}
DECL|method|testConstructor_returnType ()
specifier|public
name|void
name|testConstructor_returnType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Prepender
operator|.
name|class
argument_list|,
name|Prepender
operator|.
name|constructor
argument_list|()
operator|.
name|getReturnType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|WithConstructorAndTypeParameter
specifier|private
specifier|static
class|class
name|WithConstructorAndTypeParameter
parameter_list|<
name|T
parameter_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// by reflection
DECL|method|WithConstructorAndTypeParameter ()
parameter_list|<
name|X
parameter_list|>
name|WithConstructorAndTypeParameter
parameter_list|()
block|{}
block|}
DECL|method|testConstructor_returnType_hasTypeParameter ()
specifier|public
name|void
name|testConstructor_returnType_hasTypeParameter
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Foo.class for Foo<T> is always raw type
name|Class
argument_list|<
name|WithConstructorAndTypeParameter
argument_list|>
name|type
init|=
name|WithConstructorAndTypeParameter
operator|.
name|class
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Foo.class
name|Constructor
argument_list|<
name|WithConstructorAndTypeParameter
argument_list|>
name|constructor
init|=
name|type
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|factory
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|factory
operator|.
name|getTypeParameters
argument_list|()
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|factory
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|constructor
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|factory
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ParameterizedType
name|returnType
init|=
operator|(
name|ParameterizedType
operator|)
name|factory
operator|.
name|getReturnType
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|returnType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|type
operator|.
name|getTypeParameters
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|returnType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_exceptionTypes ()
specifier|public
name|void
name|testConstructor_exceptionTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_typeParameters ()
specifier|public
name|void
name|testConstructor_typeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
index|[]
name|variables
init|=
name|Prepender
operator|.
name|constructor
argument_list|()
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|variables
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|variables
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_parameters ()
specifier|public
name|void
name|testConstructor_parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|delegate
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testConstructor_call ()
specifier|public
name|void
name|testConstructor_call
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|Prepender
name|prepender
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|prepender
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prepender
operator|.
name|times
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_returning ()
specifier|public
name|void
name|testConstructor_returning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|Prepender
operator|.
name|class
argument_list|)
decl_stmt|;
name|Prepender
name|prepender
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|prepender
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prepender
operator|.
name|times
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_invalidReturning ()
specifier|public
name|void
name|testConstructor_invalidReturning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|returning
argument_list|(
name|SubPrepender
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testStaticMethod_returnType ()
specifier|public
name|void
name|testStaticMethod_returnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_exceptionTypes ()
specifier|public
name|void
name|testStaticMethod_exceptionTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|delegate
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_typeParameters ()
specifier|public
name|void
name|testStaticMethod_typeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
index|[]
name|variables
init|=
name|delegate
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|variables
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|variables
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_parameters ()
specifier|public
name|void
name|testStaticMethod_parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|delegate
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testStaticMethod_call ()
specifier|public
name|void
name|testStaticMethod_call
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_returning ()
specifier|public
name|void
name|testStaticMethod_returning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_returningRawType ()
specifier|public
name|void
name|testStaticMethod_returningRawType
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// the purpose is to test raw type
name|Invokable
argument_list|<
name|?
argument_list|,
name|Iterable
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_invalidReturning ()
specifier|public
name|void
name|testStaticMethod_invalidReturning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstanceMethod_returnType ()
specifier|public
name|void
name|testInstanceMethod_returnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_exceptionTypes ()
specifier|public
name|void
name|testInstanceMethod_exceptionTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|delegate
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_typeParameters ()
specifier|public
name|void
name|testInstanceMethod_typeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|getTypeParameters
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testInstanceMethod_parameters ()
specifier|public
name|void
name|testInstanceMethod_parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
name|delegate
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAnnotations
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testInstanceMethod_call ()
specifier|public
name|void
name|testInstanceMethod_call
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Prepender
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|delegate
operator|.
name|invoke
argument_list|(
operator|new
name|Prepender
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_returning ()
specifier|public
name|void
name|testInstanceMethod_returning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Prepender
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
operator|new
name|Prepender
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_returningRawType ()
specifier|public
name|void
name|testInstanceMethod_returningRawType
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// the purpose is to test raw type
name|Invokable
argument_list|<
name|Prepender
argument_list|,
name|Iterable
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
operator|new
name|Prepender
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_invalidReturning ()
specifier|public
name|void
name|testInstanceMethod_invalidReturning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPrivateInstanceMethod_isOverridable ()
specifier|public
name|void
name|testPrivateInstanceMethod_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrivateFinalInstanceMethod_isOverridable ()
specifier|public
name|void
name|testPrivateFinalInstanceMethod_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateFinalMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_isOverridable ()
specifier|public
name|void
name|testStaticMethod_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"staticMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticFinalMethod_isFinal ()
specifier|public
name|void
name|testStaticFinalMethod_isFinal
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"staticFinalMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|Foo
specifier|static
class|class
name|Foo
block|{}
DECL|method|testConstructor_isOverridablel ()
specifier|public
name|void
name|testConstructor_isOverridablel
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|Foo
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMethod_isVarArgs ()
specifier|public
name|void
name|testMethod_isVarArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateVarArgsMethod"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_isVarArgs ()
specifier|public
name|void
name|testConstructor_isVarArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOwnerType_constructor ()
specifier|public
name|void
name|testGetOwnerType_constructor
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|String
operator|.
name|class
operator|.
name|getConstructor
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOwnerType_method ()
specifier|public
name|void
name|testGetOwnerType_method
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"length"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FinalClass
specifier|private
specifier|static
specifier|final
class|class
name|FinalClass
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|method|notFinalMethod ()
name|void
name|notFinalMethod
parameter_list|()
block|{}
block|}
DECL|method|testNonFinalMethodInFinalClass_isOverridable ()
specifier|public
name|void
name|testNonFinalMethodInFinalClass_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|FinalClass
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"notFinalMethod"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isVarArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|InnerWithDefaultConstructor
specifier|private
class|class
name|InnerWithDefaultConstructor
block|{
DECL|class|NestedInner
class|class
name|NestedInner
block|{}
block|}
DECL|method|testInnerClassDefaultConstructor ()
specifier|public
name|void
name|testInnerClassDefaultConstructor
parameter_list|()
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|InnerWithDefaultConstructor
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedInnerClassDefaultConstructor ()
specifier|public
name|void
name|testNestedInnerClassDefaultConstructor
parameter_list|()
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|InnerWithDefaultConstructor
operator|.
name|NestedInner
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|InnerWithOneParameterConstructor
specifier|private
class|class
name|InnerWithOneParameterConstructor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
DECL|method|InnerWithOneParameterConstructor (String s)
specifier|public
name|InnerWithOneParameterConstructor
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|method|testInnerClassWithOneParameterConstructor ()
specifier|public
name|void
name|testInnerClassWithOneParameterConstructor
parameter_list|()
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|InnerWithOneParameterConstructor
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|InnerWithAnnotatedConstructorParameter
specifier|private
class|class
name|InnerWithAnnotatedConstructorParameter
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
DECL|method|InnerWithAnnotatedConstructorParameter (@ullableDecl String s)
name|InnerWithAnnotatedConstructorParameter
parameter_list|(
annotation|@
name|NullableDecl
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|method|testInnerClassWithAnnotatedConstructorParameter ()
specifier|public
name|void
name|testInnerClassWithAnnotatedConstructorParameter
parameter_list|()
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|InnerWithAnnotatedConstructorParameter
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|InnerWithGenericConstructorParameter
specifier|private
class|class
name|InnerWithGenericConstructorParameter
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
DECL|method|InnerWithGenericConstructorParameter (Iterable<String> it, String s)
name|InnerWithGenericConstructorParameter
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|it
parameter_list|,
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|method|testInnerClassWithGenericConstructorParameter ()
specifier|public
name|void
name|testInnerClassWithGenericConstructorParameter
parameter_list|()
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|InnerWithGenericConstructorParameter
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnonymousClassDefaultConstructor ()
specifier|public
name|void
name|testAnonymousClassDefaultConstructor
parameter_list|()
block|{
specifier|final
name|int
name|i
init|=
literal|1
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|anonymous
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|anonymous
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnonymousClassWithTwoParametersConstructor ()
specifier|public
name|void
name|testAnonymousClassWithTwoParametersConstructor
parameter_list|()
block|{
specifier|abstract
class|class
name|Base
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
name|Base
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|anonymous
init|=
operator|new
name|Base
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
block|{}
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|anonymous
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalClassDefaultConstructor ()
specifier|public
name|void
name|testLocalClassDefaultConstructor
parameter_list|()
block|{
specifier|final
name|int
name|i
init|=
literal|1
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
class|class
name|LocalWithDefaultConstructor
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|LocalWithDefaultConstructor
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticAnonymousClassDefaultConstructor ()
specifier|public
name|void
name|testStaticAnonymousClassDefaultConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestStaticAnonymousClassDefaultConstructor
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestStaticAnonymousClassDefaultConstructor ()
specifier|private
specifier|static
name|void
name|doTestStaticAnonymousClassDefaultConstructor
parameter_list|()
block|{
specifier|final
name|int
name|i
init|=
literal|1
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|anonymous
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|anonymous
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnonymousClassInConstructor ()
specifier|public
name|void
name|testAnonymousClassInConstructor
parameter_list|()
block|{
operator|new
name|AnonymousClassInConstructor
argument_list|()
expr_stmt|;
block|}
DECL|class|AnonymousClassInConstructor
specifier|private
specifier|static
class|class
name|AnonymousClassInConstructor
block|{
DECL|method|AnonymousClassInConstructor ()
name|AnonymousClassInConstructor
parameter_list|()
block|{
specifier|final
name|int
name|i
init|=
literal|1
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|anonymous
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|anonymous
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLocalClassInInstanceInitializer ()
specifier|public
name|void
name|testLocalClassInInstanceInitializer
parameter_list|()
block|{
operator|new
name|LocalClassInInstanceInitializer
argument_list|()
expr_stmt|;
block|}
DECL|class|LocalClassInInstanceInitializer
specifier|private
specifier|static
class|class
name|LocalClassInInstanceInitializer
block|{
block|{
class|class
name|Local
block|{}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|Local
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLocalClassInStaticInitializer ()
specifier|public
name|void
name|testLocalClassInStaticInitializer
parameter_list|()
block|{
operator|new
name|LocalClassInStaticInitializer
argument_list|()
expr_stmt|;
block|}
DECL|class|LocalClassInStaticInitializer
specifier|private
specifier|static
class|class
name|LocalClassInStaticInitializer
block|{
static|static
block|{
class|class
name|Local
block|{}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|Local
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG ()
specifier|public
name|void
name|testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG
parameter_list|()
block|{
operator|new
name|LocalClassWithSeeminglyHiddenThisInStaticInitializer
argument_list|()
expr_stmt|;
block|}
comment|/**    * This class demonstrates a bug in getParameters() when the local class is inside static    * initializer.    */
DECL|class|LocalClassWithSeeminglyHiddenThisInStaticInitializer
specifier|private
specifier|static
class|class
name|LocalClassWithSeeminglyHiddenThisInStaticInitializer
block|{
static|static
block|{
class|class
name|Local
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// through reflection
name|Local
parameter_list|(
name|LocalClassWithSeeminglyHiddenThisInStaticInitializer
name|outer
parameter_list|)
block|{}
block|}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|Local
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|int
name|miscalculated
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
name|miscalculated
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLocalClassWithOneParameterConstructor ()
specifier|public
name|void
name|testLocalClassWithOneParameterConstructor
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|i
init|=
literal|1
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
class|class
name|LocalWithOneParameterConstructor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
specifier|public
name|LocalWithOneParameterConstructor
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|LocalWithOneParameterConstructor
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalClassWithAnnotatedConstructorParameter ()
specifier|public
name|void
name|testLocalClassWithAnnotatedConstructorParameter
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|LocalWithAnnotatedConstructorParameter
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
name|LocalWithAnnotatedConstructorParameter
parameter_list|(
annotation|@
name|NullableDecl
name|String
name|s
parameter_list|)
block|{}
block|}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|LocalWithAnnotatedConstructorParameter
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalClassWithGenericConstructorParameter ()
specifier|public
name|void
name|testLocalClassWithGenericConstructorParameter
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|LocalWithGenericConstructorParameter
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by reflection
name|LocalWithGenericConstructorParameter
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|it
parameter_list|,
name|String
name|s
parameter_list|)
block|{}
block|}
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|LocalWithGenericConstructorParameter
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|A
operator|.
name|constructor
argument_list|()
argument_list|,
name|A
operator|.
name|constructor
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|A
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|,
name|A
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|A
operator|.
name|method
argument_list|(
literal|"publicFinalMethod"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|constructor
argument_list|()
argument_list|,
name|Prepender
operator|.
name|constructor
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|,
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateFinalMethod"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Invokable
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|Prepender
operator|.
name|method
argument_list|(
literal|"staticMethod"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
DECL|annotation|NotBlank
specifier|private
annotation_defn|@interface
name|NotBlank
block|{}
comment|/** Class for testing constructor, static method and instance method. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// most are called by reflection
DECL|class|Prepender
specifier|private
specifier|static
class|class
name|Prepender
block|{
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|times
specifier|private
specifier|final
name|int
name|times
decl_stmt|;
DECL|method|Prepender (@otBlank String prefix, int times)
name|Prepender
parameter_list|(
annotation|@
name|NotBlank
name|String
name|prefix
parameter_list|,
name|int
name|times
parameter_list|)
throws|throws
name|NullPointerException
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|times
operator|=
name|times
expr_stmt|;
block|}
DECL|method|Prepender (String... varargs)
name|Prepender
parameter_list|(
name|String
modifier|...
name|varargs
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// just for testing
DECL|method|Prepender ()
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Prepender
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|prepend (@otBlank String first, Iterable<String> tail)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|String
argument_list|>
name|prepend
parameter_list|(
annotation|@
name|NotBlank
name|String
name|first
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|first
argument_list|)
argument_list|,
name|tail
argument_list|)
return|;
block|}
DECL|method|prepend (Iterable<String> tail)
name|Iterable
argument_list|<
name|String
argument_list|>
name|prepend
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|NullPointerException
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|times
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|tail
argument_list|)
return|;
block|}
DECL|method|constructor (Class<?>.... parameterTypes)
specifier|static
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|constructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|Constructor
argument_list|<
name|Prepender
argument_list|>
name|constructor
init|=
name|Prepender
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|parameterTypes
argument_list|)
decl_stmt|;
return|return
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
return|;
block|}
DECL|method|method (String name, Class<?>... parameterTypes)
specifier|static
name|Invokable
argument_list|<
name|Prepender
argument_list|,
name|Object
argument_list|>
name|method
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|Prepender
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// The method is from Prepender.
name|Invokable
argument_list|<
name|Prepender
argument_list|,
name|Object
argument_list|>
name|invokable
init|=
operator|(
name|Invokable
argument_list|<
name|Prepender
argument_list|,
name|Object
argument_list|>
operator|)
name|Invokable
operator|.
name|from
argument_list|(
name|method
argument_list|)
decl_stmt|;
return|return
name|invokable
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|privateMethod ()
specifier|private
name|void
name|privateMethod
parameter_list|()
block|{}
DECL|method|privateFinalMethod ()
specifier|private
specifier|final
name|void
name|privateFinalMethod
parameter_list|()
block|{}
DECL|method|staticMethod ()
specifier|static
name|void
name|staticMethod
parameter_list|()
block|{}
DECL|method|staticFinalMethod ()
specifier|static
specifier|final
name|void
name|staticFinalMethod
parameter_list|()
block|{}
DECL|method|privateVarArgsMethod (String... varargs)
specifier|private
name|void
name|privateVarArgsMethod
parameter_list|(
name|String
modifier|...
name|varargs
parameter_list|)
block|{}
block|}
DECL|class|SubPrepender
specifier|private
specifier|static
class|class
name|SubPrepender
extends|extends
name|Prepender
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// needed to satisfy compiler, never called
DECL|method|SubPrepender ()
specifier|public
name|SubPrepender
parameter_list|()
throws|throws
name|NullPointerException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

