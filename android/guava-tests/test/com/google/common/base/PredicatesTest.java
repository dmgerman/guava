begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2005 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|whitespace
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Predicates}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|PredicatesTest
specifier|public
class|class
name|PredicatesTest
extends|extends
name|TestCase
block|{
DECL|field|TRUE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|TRUE
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
DECL|field|FALSE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|FALSE
init|=
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
decl_stmt|;
DECL|field|NEVER_REACHED
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|NEVER_REACHED
init|=
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"This predicate should never have been evaluated"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
comment|/** Instantiable predicate with reasonable hashCode() and equals() methods. */
DECL|class|IsOdd
specifier|static
class|class
name|IsOdd
implements|implements
name|Predicate
argument_list|<
name|Integer
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0x150ddL
decl_stmt|;
annotation|@
name|Override
DECL|method|apply (Integer i)
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
return|return
operator|(
name|i
operator|.
name|intValue
argument_list|()
operator|&
literal|1
operator|)
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0x150dd
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|IsOdd
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IsOdd"
return|;
block|}
block|}
comment|/**    * Generates a new Predicate per call.    *    *<p>Creating a new Predicate each time helps catch cases where code is using {@code x == y}    * instead of {@code x.equals(y)}.    */
DECL|method|isOdd ()
specifier|private
specifier|static
name|IsOdd
name|isOdd
parameter_list|()
block|{
return|return
operator|new
name|IsOdd
argument_list|()
return|;
block|}
comment|/*    * Tests for Predicates.alwaysTrue().    */
DECL|method|testAlwaysTrue_apply ()
specifier|public
name|void
name|testAlwaysTrue_apply
parameter_list|()
block|{
name|assertEvalsToTrue
argument_list|(
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlwaysTrue_equality ()
specifier|public
name|void
name|testAlwaysTrue_equality
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|TRUE
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|isOdd
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testAlwaysTrue_serialization ()
specifier|public
name|void
name|testAlwaysTrue_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests for Predicates.alwaysFalse().    */
DECL|method|testAlwaysFalse_apply ()
specifier|public
name|void
name|testAlwaysFalse_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlwaysFalse_equality ()
specifier|public
name|void
name|testAlwaysFalse_equality
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|FALSE
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|isOdd
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testAlwaysFalse_serialization ()
specifier|public
name|void
name|testAlwaysFalse_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests for Predicates.not(predicate).    */
DECL|method|testNot_apply ()
specifier|public
name|void
name|testNot_apply
parameter_list|()
block|{
name|assertEvalsToTrue
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNot_equality ()
specifier|public
name|void
name|testNot_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|,
name|Predicates
operator|.
name|not
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|isOdd
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testNot_equalityForNotOfKnownValues ()
specifier|public
name|void
name|testNot_equalityForNotOfKnownValues
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|TRUE
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|FALSE
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|FALSE
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|TRUE
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|FALSE
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|,
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testNot_serialization ()
specifier|public
name|void
name|testNot_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests for all the different flavors of Predicates.and().    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_applyNoArgs ()
specifier|public
name|void
name|testAnd_applyNoArgs
parameter_list|()
block|{
name|assertEvalsToTrue
argument_list|(
name|Predicates
operator|.
name|and
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_equalityNoArgs ()
specifier|public
name|void
name|testAnd_equalityNoArgs
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|()
argument_list|,
name|Predicates
operator|.
name|and
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|FALSE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_serializationNoArgs ()
specifier|public
name|void
name|testAnd_serializationNoArgs
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|and
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_applyOneArg ()
specifier|public
name|void
name|testAnd_applyOneArg
parameter_list|()
block|{
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_equalityOneArg ()
specifier|public
name|void
name|testAnd_equalityOneArg
parameter_list|()
block|{
name|Object
index|[]
name|notEqualObjects
init|=
block|{
name|Predicates
operator|.
name|and
argument_list|(
name|NEVER_REACHED
argument_list|,
name|FALSE
argument_list|)
block|}
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|NEVER_REACHED
argument_list|)
argument_list|,
name|Predicates
operator|.
name|and
argument_list|(
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|notEqualObjects
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_serializationOneArg ()
specifier|public
name|void
name|testAnd_serializationOneArg
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnd_applyBinary ()
specifier|public
name|void
name|testAnd_applyBinary
parameter_list|()
block|{
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|isOdd
argument_list|()
argument_list|,
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_equalityBinary ()
specifier|public
name|void
name|testAnd_equalityBinary
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|,
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|NEVER_REACHED
argument_list|,
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testAnd_serializationBinary ()
specifier|public
name|void
name|testAnd_serializationBinary
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_applyTernary ()
specifier|public
name|void
name|testAnd_applyTernary
parameter_list|()
block|{
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|isOdd
argument_list|()
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_equalityTernary ()
specifier|public
name|void
name|testAnd_equalityTernary
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|,
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|isOdd
argument_list|()
argument_list|,
name|NEVER_REACHED
argument_list|,
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_serializationTernary ()
specifier|public
name|void
name|testAnd_serializationTernary
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_applyIterable ()
specifier|public
name|void
name|testAnd_applyIterable
parameter_list|()
block|{
name|Collection
argument_list|<
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|empty
init|=
name|Arrays
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEvalsToTrue
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TRUE
argument_list|,
name|isOdd
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_equalityIterable ()
specifier|public
name|void
name|testAnd_equalityIterable
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
argument_list|,
name|Predicates
operator|.
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
argument_list|,
name|Predicates
operator|.
name|and
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_serializationIterable ()
specifier|public
name|void
name|testAnd_serializationIterable
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TRUE
argument_list|,
name|FALSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testAnd_arrayDefensivelyCopied ()
specifier|public
name|void
name|testAnd_arrayDefensivelyCopied
parameter_list|()
block|{
name|Predicate
index|[]
name|array
init|=
block|{
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
block|}
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|and
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|array
index|[
literal|0
index|]
operator|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnd_listDefensivelyCopied ()
specifier|public
name|void
name|testAnd_listDefensivelyCopied
parameter_list|()
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|and
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnd_iterableDefensivelyCopied ()
specifier|public
name|void
name|testAnd_iterableDefensivelyCopied
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|and
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests for all the different flavors of Predicates.or().    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_applyNoArgs ()
specifier|public
name|void
name|testOr_applyNoArgs
parameter_list|()
block|{
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|or
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_equalityNoArgs ()
specifier|public
name|void
name|testOr_equalityNoArgs
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|()
argument_list|,
name|Predicates
operator|.
name|or
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_serializationNoArgs ()
specifier|public
name|void
name|testOr_serializationNoArgs
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|or
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_applyOneArg ()
specifier|public
name|void
name|testOr_applyOneArg
parameter_list|()
block|{
name|assertEvalsToTrue
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsToFalse
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_equalityOneArg ()
specifier|public
name|void
name|testOr_equalityOneArg
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|NEVER_REACHED
argument_list|)
argument_list|,
name|Predicates
operator|.
name|or
argument_list|(
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|NEVER_REACHED
argument_list|,
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_serializationOneArg ()
specifier|public
name|void
name|testOr_serializationOneArg
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOr_applyBinary ()
specifier|public
name|void
name|testOr_applyBinary
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|falseOrFalse
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|falseOrTrue
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|TRUE
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|trueOrAnything
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
decl_stmt|;
name|assertEvalsToFalse
argument_list|(
name|falseOrFalse
argument_list|)
expr_stmt|;
name|assertEvalsToTrue
argument_list|(
name|falseOrTrue
argument_list|)
expr_stmt|;
name|assertEvalsToTrue
argument_list|(
name|trueOrAnything
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_equalityBinary ()
specifier|public
name|void
name|testOr_equalityBinary
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|,
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|NEVER_REACHED
argument_list|,
name|FALSE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testOr_serializationBinary ()
specifier|public
name|void
name|testOr_serializationBinary
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|isOdd
argument_list|()
argument_list|,
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_applyTernary ()
specifier|public
name|void
name|testOr_applyTernary
parameter_list|()
block|{
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|isOdd
argument_list|()
argument_list|,
name|FALSE
argument_list|,
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsLikeOdd
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|FALSE
argument_list|,
name|isOdd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEvalsToTrue
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_equalityTernary ()
specifier|public
name|void
name|testOr_equalityTernary
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|,
name|TRUE
argument_list|)
argument_list|,
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|,
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|,
name|FALSE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|,
name|TRUE
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_serializationTernary ()
specifier|public
name|void
name|testOr_serializationTernary
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|isOdd
argument_list|()
argument_list|,
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_applyIterable ()
specifier|public
name|void
name|testOr_applyIterable
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|vacuouslyFalse
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|Collections
operator|.
expr|<
name|Predicate
argument_list|<
name|Integer
argument_list|>
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|troo
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TRUE
argument_list|)
argument_list|)
decl_stmt|;
comment|/*      * newLinkedList() takes varargs. TRUE and FALSE are both instances of      * Predicate<Integer>, so the call is safe.      */
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|trueAndFalse
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TRUE
argument_list|,
name|FALSE
argument_list|)
argument_list|)
decl_stmt|;
name|assertEvalsToFalse
argument_list|(
name|vacuouslyFalse
argument_list|)
expr_stmt|;
name|assertEvalsToTrue
argument_list|(
name|troo
argument_list|)
expr_stmt|;
name|assertEvalsToTrue
argument_list|(
name|trueAndFalse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_equalityIterable ()
specifier|public
name|void
name|testOr_equalityIterable
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
argument_list|,
name|Predicates
operator|.
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
argument_list|,
name|Predicates
operator|.
name|or
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|TRUE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|FALSE
argument_list|,
name|NEVER_REACHED
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_serializationIterable ()
specifier|public
name|void
name|testOr_serializationIterable
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|pre
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TRUE
argument_list|,
name|FALSE
argument_list|)
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|post
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|pre
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pre
operator|.
name|apply
argument_list|(
literal|0
argument_list|)
argument_list|,
name|post
operator|.
name|apply
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testOr_arrayDefensivelyCopied ()
specifier|public
name|void
name|testOr_arrayDefensivelyCopied
parameter_list|()
block|{
name|Predicate
index|[]
name|array
init|=
block|{
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
block|}
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|array
index|[
literal|0
index|]
operator|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOr_listDefensivelyCopied ()
specifier|public
name|void
name|testOr_listDefensivelyCopied
parameter_list|()
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOr_iterableDefensivelyCopied ()
specifier|public
name|void
name|testOr_iterableDefensivelyCopied
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|or
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests for Predicates.equalTo(x).    */
DECL|method|testIsEqualTo_apply ()
specifier|public
name|void
name|testIsEqualTo_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isOne
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isOne
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOne
operator|.
name|apply
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOne
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEqualTo_equality ()
specifier|public
name|void
name|testIsEqualTo_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testIsEqualTo_serialization ()
specifier|public
name|void
name|testIsEqualTo_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEqualToNull_apply ()
specifier|public
name|void
name|testIsEqualToNull_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isNull
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isNull
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isNull
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEqualToNull_equality ()
specifier|public
name|void
name|testIsEqualToNull_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"null"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testIsEqualToNull_serialization ()
specifier|public
name|void
name|testIsEqualToNull_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for Predicates.instanceOf(x). TODO: Fix the comment style after fixing annotation    * stripper to remove comments properly. Currently, all tests before the comments are removed as    * well.    */
annotation|@
name|GwtIncompatible
comment|// Predicates.instanceOf
DECL|method|testIsInstanceOf_apply ()
specifier|public
name|void
name|testIsInstanceOf_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Object
argument_list|>
name|isInteger
init|=
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isInteger
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isInteger
operator|.
name|apply
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isInteger
operator|.
name|apply
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isInteger
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.instanceOf
DECL|method|testIsInstanceOf_subclass ()
specifier|public
name|void
name|testIsInstanceOf_subclass
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Object
argument_list|>
name|isNumber
init|=
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isNumber
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNumber
operator|.
name|apply
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isNumber
operator|.
name|apply
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isNumber
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.instanceOf
DECL|method|testIsInstanceOf_interface ()
specifier|public
name|void
name|testIsInstanceOf_interface
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Object
argument_list|>
name|isComparable
init|=
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isComparable
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isComparable
operator|.
name|apply
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isComparable
operator|.
name|apply
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isComparable
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.instanceOf
DECL|method|testIsInstanceOf_equality ()
specifier|public
name|void
name|testIsInstanceOf_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.instanceOf, SerializableTester
DECL|method|testIsInstanceOf_serialization ()
specifier|public
name|void
name|testIsInstanceOf_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.subtypeOf
DECL|method|testSubtypeOf_apply ()
specifier|public
name|void
name|testSubtypeOf_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|isInteger
init|=
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isInteger
operator|.
name|apply
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isInteger
operator|.
name|apply
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|isInteger
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.subtypeOf
DECL|method|testSubtypeOf_subclass ()
specifier|public
name|void
name|testSubtypeOf_subclass
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|isNumber
init|=
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isNumber
operator|.
name|apply
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isNumber
operator|.
name|apply
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.subtypeOf
DECL|method|testSubtypeOf_interface ()
specifier|public
name|void
name|testSubtypeOf_interface
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|isComparable
init|=
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isComparable
operator|.
name|apply
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isComparable
operator|.
name|apply
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.subtypeOf
DECL|method|testSubtypeOf_equality ()
specifier|public
name|void
name|testSubtypeOf_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.subtypeOf, SerializableTester
DECL|method|testSubtypeOf_serialization ()
specifier|public
name|void
name|testSubtypeOf_serialization
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|subtypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|reserialized
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|assertEvalsLike
argument_list|(
name|predicate
argument_list|,
name|reserialized
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEvalsLike
argument_list|(
name|predicate
argument_list|,
name|reserialized
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEvalsLike
argument_list|(
name|predicate
argument_list|,
name|reserialized
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests for Predicates.isNull()    */
DECL|method|testIsNull_apply ()
specifier|public
name|void
name|testIsNull_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isNull
init|=
name|Predicates
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|isNull
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isNull
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsNull_equality ()
specifier|public
name|void
name|testIsNull_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|,
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testIsNull_serialization ()
specifier|public
name|void
name|testIsNull_serialization
parameter_list|()
block|{
name|Predicate
argument_list|<
name|String
argument_list|>
name|pre
init|=
name|Predicates
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|post
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|pre
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pre
operator|.
name|apply
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|post
operator|.
name|apply
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pre
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|,
name|post
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotNull_apply ()
specifier|public
name|void
name|testNotNull_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|notNull
init|=
name|Predicates
operator|.
name|notNull
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|notNull
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notNull
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotNull_equality ()
specifier|public
name|void
name|testNotNull_equality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testNotNull_serialization ()
specifier|public
name|void
name|testNotNull_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIn_apply ()
specifier|public
name|void
name|testIn_apply
parameter_list|()
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|nums
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isOneOrFive
init|=
name|Predicates
operator|.
name|in
argument_list|(
name|nums
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isOneOrFive
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOneOrFive
operator|.
name|apply
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOneOrFive
operator|.
name|apply
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOneOrFive
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIn_equality ()
specifier|public
name|void
name|testIn_equality
parameter_list|()
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|nums
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|sameOrder
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|differentOrder
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|differentNums
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|nums
argument_list|)
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|nums
argument_list|)
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|sameOrder
argument_list|)
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|differentOrder
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|differentNums
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testIn_serialization ()
specifier|public
name|void
name|testIn_serialization
parameter_list|()
block|{
name|checkSerialization
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIn_handlesNullPointerException ()
specifier|public
name|void
name|testIn_handlesNullPointerException
parameter_list|()
block|{
class|class
name|CollectionThatThrowsNPE
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|contains
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
name|Collection
argument_list|<
name|Integer
argument_list|>
name|nums
init|=
operator|new
name|CollectionThatThrowsNPE
argument_list|<>
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isFalse
init|=
name|Predicates
operator|.
name|in
argument_list|(
name|nums
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isFalse
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIn_handlesClassCastException ()
specifier|public
name|void
name|testIn_handlesClassCastException
parameter_list|()
block|{
class|class
name|CollectionThatThrowsCCE
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
name|Collection
argument_list|<
name|Integer
argument_list|>
name|nums
init|=
operator|new
name|CollectionThatThrowsCCE
argument_list|<>
argument_list|()
decl_stmt|;
name|nums
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isThree
init|=
name|Predicates
operator|.
name|in
argument_list|(
name|nums
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isThree
operator|.
name|apply
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests that compilation will work when applying explicit types.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// compilation test
DECL|method|testIn_compilesWithExplicitSupertype ()
specifier|public
name|void
name|testIn_compilesWithExplicitSupertype
parameter_list|()
block|{
name|Collection
argument_list|<
name|Number
argument_list|>
name|nums
init|=
name|ImmutableSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Number
argument_list|>
name|p1
init|=
name|Predicates
operator|.
name|in
argument_list|(
name|nums
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|Object
argument_list|>
name|p2
init|=
name|Predicates
operator|.
expr|<
name|Object
operator|>
name|in
argument_list|(
name|nums
argument_list|)
decl_stmt|;
comment|// The next two lines are not expected to compile.
comment|// Predicate<Integer> p3 = Predicates.in(nums);
comment|// Predicate<Integer> p4 = Predicates.<Integer>in(nums);
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Predicates
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
annotation|@
name|GwtIncompatible
comment|// SerializbleTester
DECL|method|testCascadingSerialization ()
specifier|public
name|void
name|testCascadingSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Eclipse says Predicate<Integer>; javac says Predicate<Object>.
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|nasty
init|=
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|1
argument_list|)
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|,
name|Predicates
operator|.
name|isNull
argument_list|()
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEvalsToFalse
argument_list|(
name|nasty
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|stillNasty
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|nasty
argument_list|)
decl_stmt|;
name|assertEvalsToFalse
argument_list|(
name|stillNasty
argument_list|)
expr_stmt|;
block|}
comment|// enum singleton pattern
DECL|enum|TrimStringFunction
specifier|private
enum|enum
name|TrimStringFunction
implements|implements
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|apply (String string)
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|whitespace
argument_list|()
operator|.
name|trimFrom
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
DECL|method|testCompose ()
specifier|public
name|void
name|testCompose
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|trim
init|=
name|TrimStringFunction
operator|.
name|INSTANCE
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|equalsFoo
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|equalsBar
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"Bar"
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|trimEqualsFoo
init|=
name|Predicates
operator|.
name|compose
argument_list|(
name|equalsFoo
argument_list|,
name|trim
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|identity
init|=
name|Functions
operator|.
name|identity
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|trimEqualsFoo
operator|.
name|apply
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trimEqualsFoo
operator|.
name|apply
argument_list|(
literal|"   Foo   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trimEqualsFoo
operator|.
name|apply
argument_list|(
literal|"Foo-b-que"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|trimEqualsFoo
argument_list|,
name|Predicates
operator|.
name|compose
argument_list|(
name|equalsFoo
argument_list|,
name|trim
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|equalsFoo
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|trim
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|compose
argument_list|(
name|equalsFoo
argument_list|,
name|identity
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|compose
argument_list|(
name|equalsBar
argument_list|,
name|trim
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testComposeSerialization ()
specifier|public
name|void
name|testComposeSerialization
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|trim
init|=
name|TrimStringFunction
operator|.
name|INSTANCE
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|equalsFoo
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|trimEqualsFoo
init|=
name|Predicates
operator|.
name|compose
argument_list|(
name|equalsFoo
argument_list|,
name|trim
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|trimEqualsFoo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for Predicates.contains(Pattern) and .containsPattern(String). We assume the regex level    * works, so there are only trivial tests of that aspect. TODO: Fix comment style once annotation    * stripper is fixed.    */
annotation|@
name|GwtIncompatible
comment|// Predicates.containsPattern
DECL|method|testContainsPattern_apply ()
specifier|public
name|void
name|testContainsPattern_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|isFoobar
init|=
name|Predicates
operator|.
name|containsPattern
argument_list|(
literal|"^Fo.*o.*bar$"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isFoobar
operator|.
name|apply
argument_list|(
literal|"Foxyzoabcbar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isFoobar
operator|.
name|apply
argument_list|(
literal|"Foobarx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Predicates.containsPattern
DECL|method|testContains_apply ()
specifier|public
name|void
name|testContains_apply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|isFoobar
init|=
name|Predicates
operator|.
name|contains
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Fo.*o.*bar$"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isFoobar
operator|.
name|apply
argument_list|(
literal|"Foxyzoabcbar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isFoobar
operator|.
name|apply
argument_list|(
literal|"Foobarx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testContainsPattern_nulls ()
specifier|public
name|void
name|testContainsPattern_nulls
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|isWooString
init|=
name|Predicates
operator|.
name|containsPattern
argument_list|(
literal|"Woo"
argument_list|)
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|isWooString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testContains_nulls ()
specifier|public
name|void
name|testContains_nulls
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|isWooPattern
init|=
name|Predicates
operator|.
name|contains
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Woo"
argument_list|)
argument_list|)
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|isWooPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testContainsPattern_serialization ()
specifier|public
name|void
name|testContainsPattern_serialization
parameter_list|()
block|{
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|pre
init|=
name|Predicates
operator|.
name|containsPattern
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|post
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|pre
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pre
operator|.
name|apply
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|post
operator|.
name|apply
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// java.util.regex.Pattern
DECL|method|testContains_equals ()
specifier|public
name|void
name|testContains_equals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|contains
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Predicates
operator|.
name|containsPattern
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|contains
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"foo"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Predicates
operator|.
name|containsPattern
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|assertEqualHashCode ( Predicate<? super Integer> expected, Predicate<? super Integer> actual)
specifier|public
name|void
name|assertEqualHashCode
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|expected
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|actual
operator|+
literal|" should hash like "
operator|+
name|expected
argument_list|,
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|actual
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCodeForBooleanOperations ()
specifier|public
name|void
name|testHashCodeForBooleanOperations
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|p1
init|=
name|Predicates
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|p2
init|=
name|isOdd
argument_list|()
decl_stmt|;
comment|// Make sure that hash codes are not computed per-instance.
name|assertEqualHashCode
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|p1
argument_list|)
argument_list|,
name|Predicates
operator|.
name|not
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualHashCode
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|,
name|Predicates
operator|.
name|and
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualHashCode
argument_list|(
name|Predicates
operator|.
name|or
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|,
name|Predicates
operator|.
name|or
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// While not a contractual requirement, we'd like the hash codes for ands
comment|//& ors of the same predicates to not collide.
name|assertTrue
argument_list|(
name|Predicates
operator|.
name|and
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|!=
name|Predicates
operator|.
name|or
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|Predicates
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// reflection
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): ClassNotFoundException: com.google.common.base.Function
DECL|method|testEqualsAndSerializable ()
specifier|public
name|void
name|testEqualsAndSerializable
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|Predicates
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
DECL|method|assertEvalsToTrue (Predicate<? super Integer> predicate)
specifier|private
specifier|static
name|void
name|assertEvalsToTrue
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|predicate
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEvalsToFalse (Predicate<? super Integer> predicate)
specifier|private
specifier|static
name|void
name|assertEvalsToFalse
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|predicate
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEvalsLikeOdd (Predicate<? super Integer> predicate)
specifier|private
specifier|static
name|void
name|assertEvalsLikeOdd
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|predicate
parameter_list|)
block|{
name|assertEvalsLike
argument_list|(
name|isOdd
argument_list|()
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEvalsLike ( Predicate<? super Integer> expected, Predicate<? super Integer> actual)
specifier|private
specifier|static
name|void
name|assertEvalsLike
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|expected
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|actual
parameter_list|)
block|{
name|assertEvalsLike
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEvalsLike
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEvalsLike
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEvalsLike ( Predicate<? super T> expected, Predicate<? super T> actual, T input)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertEvalsLike
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|expected
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|actual
parameter_list|,
name|T
name|input
parameter_list|)
block|{
name|Boolean
name|expectedResult
init|=
literal|null
decl_stmt|;
name|RuntimeException
name|expectedRuntimeException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expectedResult
operator|=
name|expected
operator|.
name|apply
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|expectedRuntimeException
operator|=
name|e
expr_stmt|;
block|}
name|Boolean
name|actualResult
init|=
literal|null
decl_stmt|;
name|RuntimeException
name|actualRuntimeException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|actualResult
operator|=
name|actual
operator|.
name|apply
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|actualRuntimeException
operator|=
name|e
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|actualResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedRuntimeException
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|actualRuntimeException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRuntimeException
operator|.
name|getClass
argument_list|()
argument_list|,
name|actualRuntimeException
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|checkSerialization (Predicate<? super Integer> predicate)
specifier|private
specifier|static
name|void
name|checkSerialization
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|predicate
parameter_list|)
block|{
name|Predicate
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|reserialized
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|assertEvalsLike
argument_list|(
name|predicate
argument_list|,
name|reserialized
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

