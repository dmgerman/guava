begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Dispatcher} implementations.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|DispatcherTest
specifier|public
class|class
name|DispatcherTest
extends|extends
name|TestCase
block|{
DECL|field|bus
specifier|private
specifier|final
name|EventBus
name|bus
init|=
operator|new
name|EventBus
argument_list|()
decl_stmt|;
DECL|field|i1
specifier|private
specifier|final
name|IntegerSubscriber
name|i1
init|=
operator|new
name|IntegerSubscriber
argument_list|(
literal|"i1"
argument_list|)
decl_stmt|;
DECL|field|i2
specifier|private
specifier|final
name|IntegerSubscriber
name|i2
init|=
operator|new
name|IntegerSubscriber
argument_list|(
literal|"i2"
argument_list|)
decl_stmt|;
DECL|field|i3
specifier|private
specifier|final
name|IntegerSubscriber
name|i3
init|=
operator|new
name|IntegerSubscriber
argument_list|(
literal|"i3"
argument_list|)
decl_stmt|;
DECL|field|integerSubscribers
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Subscriber
argument_list|>
name|integerSubscribers
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|subscriber
argument_list|(
name|bus
argument_list|,
name|i1
argument_list|,
literal|"handleInteger"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|subscriber
argument_list|(
name|bus
argument_list|,
name|i2
argument_list|,
literal|"handleInteger"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|subscriber
argument_list|(
name|bus
argument_list|,
name|i3
argument_list|,
literal|"handleInteger"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|s1
specifier|private
specifier|final
name|StringSubscriber
name|s1
init|=
operator|new
name|StringSubscriber
argument_list|(
literal|"s1"
argument_list|)
decl_stmt|;
DECL|field|s2
specifier|private
specifier|final
name|StringSubscriber
name|s2
init|=
operator|new
name|StringSubscriber
argument_list|(
literal|"s2"
argument_list|)
decl_stmt|;
DECL|field|stringSubscribers
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Subscriber
argument_list|>
name|stringSubscribers
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|subscriber
argument_list|(
name|bus
argument_list|,
name|s1
argument_list|,
literal|"handleString"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|subscriber
argument_list|(
name|bus
argument_list|,
name|s2
argument_list|,
literal|"handleString"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|dispatchedSubscribers
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|Object
argument_list|>
name|dispatchedSubscribers
init|=
name|Queues
operator|.
name|newConcurrentLinkedQueue
argument_list|()
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|method|testPerThreadQueuedDispatcher ()
specifier|public
name|void
name|testPerThreadQueuedDispatcher
parameter_list|()
block|{
name|dispatcher
operator|=
name|Dispatcher
operator|.
name|perThreadDispatchQueue
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
literal|1
argument_list|,
name|integerSubscribers
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dispatchedSubscribers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
comment|// Integer subscribers are dispatched to first.
name|s1
argument_list|,
name|s2
argument_list|,
comment|// Though each integer subscriber dispatches to all string subscribers,
name|s1
argument_list|,
name|s2
argument_list|,
comment|// those string subscribers aren't actually dispatched to until all integer
name|s1
argument_list|,
name|s2
comment|// subscribers have finished.
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testLegacyAsyncDispatcher ()
specifier|public
name|void
name|testLegacyAsyncDispatcher
parameter_list|()
block|{
name|dispatcher
operator|=
name|Dispatcher
operator|.
name|legacyAsync
argument_list|()
expr_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|dispatcher
operator|.
name|dispatch
argument_list|(
literal|2
argument_list|,
name|integerSubscribers
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|dispatcher
operator|.
name|dispatch
argument_list|(
literal|"foo"
argument_list|,
name|stringSubscribers
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Uninterruptibles
operator|.
name|awaitUninterruptibly
argument_list|(
name|latch
argument_list|)
expr_stmt|;
comment|// See Dispatcher.LegacyAsyncDispatcher for an explanation of why there aren't really any
comment|// useful testable guarantees about the behavior of that dispatcher in a multithreaded
comment|// environment. Here we simply test that all the expected dispatches happened in some order.
name|assertThat
argument_list|(
name|dispatchedSubscribers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|s1
argument_list|,
name|s1
argument_list|,
name|s1
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|,
name|s2
argument_list|,
name|s2
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
DECL|method|testImmediateDispatcher ()
specifier|public
name|void
name|testImmediateDispatcher
parameter_list|()
block|{
name|dispatcher
operator|=
name|Dispatcher
operator|.
name|immediate
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
literal|1
argument_list|,
name|integerSubscribers
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dispatchedSubscribers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|i1
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|,
comment|// Each integer subscriber immediately dispatches to 2 string subscribers.
name|i2
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|,
name|i3
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|subscriber ( EventBus bus, Object target, String methodName, Class<?> eventType)
specifier|private
specifier|static
name|Subscriber
name|subscriber
parameter_list|(
name|EventBus
name|bus
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|eventType
parameter_list|)
block|{
try|try
block|{
return|return
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
name|target
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|eventType
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|IntegerSubscriber
specifier|public
specifier|final
class|class
name|IntegerSubscriber
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|IntegerSubscriber (String name)
specifier|public
name|IntegerSubscriber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|handleInteger (Integer integer)
specifier|public
name|void
name|handleInteger
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
name|dispatchedSubscribers
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
literal|"hello"
argument_list|,
name|stringSubscribers
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|StringSubscriber
specifier|public
specifier|final
class|class
name|StringSubscriber
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|StringSubscriber (String name)
specifier|public
name|StringSubscriber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|handleString (String string)
specifier|public
name|void
name|handleString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|dispatchedSubscribers
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

