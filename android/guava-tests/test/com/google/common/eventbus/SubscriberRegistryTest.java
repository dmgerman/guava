begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link SubscriberRegistry}.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|SubscriberRegistryTest
specifier|public
class|class
name|SubscriberRegistryTest
extends|extends
name|TestCase
block|{
DECL|field|registry
specifier|private
specifier|final
name|SubscriberRegistry
name|registry
init|=
operator|new
name|SubscriberRegistry
argument_list|(
operator|new
name|EventBus
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|testRegister ()
specifier|public
name|void
name|testRegister
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|StringSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|StringSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|ObjectSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnregister ()
specifier|public
name|void
name|testUnregister
parameter_list|()
block|{
name|StringSubscriber
name|s1
init|=
operator|new
name|StringSubscriber
argument_list|()
decl_stmt|;
name|StringSubscriber
name|s2
init|=
operator|new
name|StringSubscriber
argument_list|()
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|registry
operator|.
name|unregister
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|unregister
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|getSubscribersForTesting
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnregister_notRegistered ()
specifier|public
name|void
name|testUnregister_notRegistered
parameter_list|()
block|{
try|try
block|{
name|registry
operator|.
name|unregister
argument_list|(
operator|new
name|StringSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|StringSubscriber
name|s1
init|=
operator|new
name|StringSubscriber
argument_list|()
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|s1
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|unregister
argument_list|(
operator|new
name|StringSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// a StringSubscriber was registered, but not the same one we tried to unregister
block|}
name|registry
operator|.
name|unregister
argument_list|(
name|s1
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|unregister
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetSubscribers ()
specifier|public
name|void
name|testGetSubscribers
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|StringSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|StringSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|ObjectSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|IntegerSubscriber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetSubscribers_returnsImmutableSnapshot ()
specifier|public
name|void
name|testGetSubscribers_returnsImmutableSnapshot
parameter_list|()
block|{
name|StringSubscriber
name|s1
init|=
operator|new
name|StringSubscriber
argument_list|()
decl_stmt|;
name|StringSubscriber
name|s2
init|=
operator|new
name|StringSubscriber
argument_list|()
decl_stmt|;
name|ObjectSubscriber
name|o1
init|=
operator|new
name|ObjectSubscriber
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Subscriber
argument_list|>
name|empty
init|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|empty
operator|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Subscriber
argument_list|>
name|one
init|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|one
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|one
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|one
operator|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|o1
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Subscriber
argument_list|>
name|three
init|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|one
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|one
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|three
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s2
argument_list|,
name|three
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|three
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|three
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|three
operator|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|registry
operator|.
name|unregister
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|three
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s2
argument_list|,
name|three
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|three
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|three
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Subscriber
argument_list|>
name|two
init|=
name|registry
operator|.
name|getSubscribers
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|two
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|two
operator|.
name|next
argument_list|()
operator|.
name|target
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|two
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|StringSubscriber
specifier|public
specifier|static
class|class
name|StringSubscriber
block|{
annotation|@
name|Subscribe
DECL|method|handle (String s)
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|IntegerSubscriber
specifier|public
specifier|static
class|class
name|IntegerSubscriber
block|{
annotation|@
name|Subscribe
DECL|method|handle (Integer i)
specifier|public
name|void
name|handle
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{}
block|}
DECL|class|ObjectSubscriber
specifier|public
specifier|static
class|class
name|ObjectSubscriber
block|{
annotation|@
name|Subscribe
DECL|method|handle (Object o)
specifier|public
name|void
name|handle
parameter_list|(
name|Object
name|o
parameter_list|)
block|{}
block|}
DECL|method|testFlattenHierarchy ()
specifier|public
name|void
name|testFlattenHierarchy
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|HierarchyFixtureInterface
operator|.
name|class
argument_list|,
name|HierarchyFixtureSubinterface
operator|.
name|class
argument_list|,
name|HierarchyFixtureParent
operator|.
name|class
argument_list|,
name|HierarchyFixture
operator|.
name|class
argument_list|)
argument_list|,
name|SubscriberRegistry
operator|.
name|flattenHierarchy
argument_list|(
name|HierarchyFixture
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|interface|HierarchyFixtureInterface
specifier|private
interface|interface
name|HierarchyFixtureInterface
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
DECL|interface|HierarchyFixtureSubinterface
specifier|private
interface|interface
name|HierarchyFixtureSubinterface
extends|extends
name|HierarchyFixtureInterface
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
DECL|class|HierarchyFixtureParent
specifier|private
specifier|static
class|class
name|HierarchyFixtureParent
implements|implements
name|HierarchyFixtureSubinterface
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
DECL|class|HierarchyFixture
specifier|private
specifier|static
class|class
name|HierarchyFixture
extends|extends
name|HierarchyFixtureParent
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
block|}
end_class

end_unit

