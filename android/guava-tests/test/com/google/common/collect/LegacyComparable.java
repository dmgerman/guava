begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A class that implements {@code Comparable} without generics, such as those found in libraries  * that support Java 1.4 and before. Our library needs to do the bare minimum to accommodate such  * types, though their use may still require an explicit type parameter and/or warning suppression.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ComparableType"
argument_list|)
annotation|@
name|GwtCompatible
DECL|class|LegacyComparable
class|class
name|LegacyComparable
implements|implements
name|Comparable
implements|,
name|Serializable
block|{
DECL|field|X
specifier|static
specifier|final
name|LegacyComparable
name|X
init|=
operator|new
name|LegacyComparable
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
DECL|field|Y
specifier|static
specifier|final
name|LegacyComparable
name|Y
init|=
operator|new
name|LegacyComparable
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
DECL|field|Z
specifier|static
specifier|final
name|LegacyComparable
name|Z
init|=
operator|new
name|LegacyComparable
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
DECL|field|VALUES_FORWARD
specifier|static
specifier|final
name|Iterable
argument_list|<
name|LegacyComparable
argument_list|>
name|VALUES_FORWARD
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|X
argument_list|,
name|Y
argument_list|,
name|Z
argument_list|)
decl_stmt|;
DECL|field|VALUES_BACKWARD
specifier|static
specifier|final
name|Iterable
argument_list|<
name|LegacyComparable
argument_list|>
name|VALUES_BACKWARD
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Z
argument_list|,
name|Y
argument_list|,
name|X
argument_list|)
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|LegacyComparable (String value)
name|LegacyComparable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Object object)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
comment|// This method is spec'd to throw CCE if object is of the wrong type
name|LegacyComparable
name|that
init|=
operator|(
name|LegacyComparable
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|value
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|LegacyComparable
condition|)
block|{
name|LegacyComparable
name|that
init|=
operator|(
name|LegacyComparable
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
name|that
operator|.
name|value
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

