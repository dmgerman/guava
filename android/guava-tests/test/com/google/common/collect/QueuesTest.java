begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|MAX_VALUE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newCachedThreadPool
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Queues}.  *  * @author Dimitris Andreou  */
end_comment

begin_class
DECL|class|QueuesTest
specifier|public
class|class
name|QueuesTest
extends|extends
name|TestCase
block|{
comment|/*    * All the following tests relate to BlockingQueue methods in Queues.    */
DECL|method|blockingQueues ()
specifier|public
specifier|static
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
argument_list|>
name|blockingQueues
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
operator|>
name|of
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|LinkedBlockingDeque
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|LinkedBlockingDeque
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|PriorityBlockingQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|10
argument_list|,
name|Ordering
operator|.
name|arbitrary
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * We need to perform operations in a thread pool, even for simple cases, because the queue might    * be a SynchronousQueue.    */
DECL|field|threadPool
specifier|private
name|ExecutorService
name|threadPool
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|threadPool
operator|=
name|newCachedThreadPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Some worker didn't finish in time"
argument_list|,
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|drain ( BlockingQueue<T> q, Collection<? super T> buffer, int maxElements, long timeout, TimeUnit unit, boolean interruptibly)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|drain
parameter_list|(
name|BlockingQueue
argument_list|<
name|T
argument_list|>
name|q
parameter_list|,
name|Collection
argument_list|<
name|?
super|super
name|T
argument_list|>
name|buffer
parameter_list|,
name|int
name|maxElements
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|boolean
name|interruptibly
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|interruptibly
condition|?
name|Queues
operator|.
name|drain
argument_list|(
name|q
argument_list|,
name|buffer
argument_list|,
name|maxElements
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
else|:
name|Queues
operator|.
name|drainUninterruptibly
argument_list|(
name|q
argument_list|,
name|buffer
argument_list|,
name|maxElements
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
DECL|method|testMultipleProducers ()
specifier|public
name|void
name|testMultipleProducers
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testMultipleProducers
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultipleProducers (BlockingQueue<Object> q)
specifier|private
name|void
name|testMultipleProducers
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|boolean
name|interruptibly
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError1
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError2
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError3
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError4
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|buf
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|elements
init|=
name|drain
argument_list|(
name|q
argument_list|,
name|buf
argument_list|,
literal|100
argument_list|,
name|MAX_VALUE
argument_list|,
name|NANOSECONDS
argument_list|,
name|interruptibly
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertDrained
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDrainTimesOut ()
specifier|public
name|void
name|testDrainTimesOut
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testDrainTimesOut
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDrainTimesOut (BlockingQueue<Object> q)
specifier|private
name|void
name|testDrainTimesOut
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|interruptibly
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Queues
operator|.
name|drain
argument_list|(
name|q
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// producing one, will ask for two
name|Future
argument_list|<
name|?
argument_list|>
name|producerThread
init|=
name|threadPool
operator|.
name|submit
argument_list|(
name|producer
argument_list|)
decl_stmt|;
name|producer
operator|.
name|beganProducing
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// make sure we time out
name|Stopwatch
name|timer
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|int
name|drained
init|=
name|drain
argument_list|(
name|q
argument_list|,
name|newArrayList
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
name|MILLISECONDS
argument_list|,
name|interruptibly
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|drained
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
comment|// If even the first one wasn't there, clean up so that the next test doesn't see an element.
name|producerThread
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producer
operator|.
name|doneProducing
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|drained
operator|==
literal|0
condition|)
block|{
name|q
operator|.
name|poll
argument_list|()
expr_stmt|;
comment|// not necessarily there if producer was interrupted
block|}
block|}
block|}
DECL|method|testZeroElements ()
specifier|public
name|void
name|testZeroElements
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testZeroElements
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testZeroElements (BlockingQueue<Object> q)
specifier|private
name|void
name|testZeroElements
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|boolean
name|interruptibly
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
comment|// asking to drain zero elements
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|drain
argument_list|(
name|q
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|MILLISECONDS
argument_list|,
name|interruptibly
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testEmpty
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmpty (BlockingQueue<Object> q)
specifier|private
name|void
name|testEmpty
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
block|{
name|assertDrained
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|testNegativeMaxElements ()
specifier|public
name|void
name|testNegativeMaxElements
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testNegativeMaxElements
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNegativeMaxElements (BlockingQueue<Object> q)
specifier|private
name|void
name|testNegativeMaxElements
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
throws|throws
name|InterruptedException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|buf
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|elements
init|=
name|Queues
operator|.
name|drain
argument_list|(
name|q
argument_list|,
name|buf
argument_list|,
operator|-
literal|1
argument_list|,
name|MAX_VALUE
argument_list|,
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|elements
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Free the producer thread, and give subsequent tests a clean slate.
name|q
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
DECL|method|testDrain_throws ()
specifier|public
name|void
name|testDrain_throws
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testDrain_throws
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDrain_throws (BlockingQueue<Object> q)
specifier|private
name|void
name|testDrain_throws
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Interrupter
argument_list|(
name|currentThread
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Queues
operator|.
name|drain
argument_list|(
name|q
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|100
argument_list|,
name|MAX_VALUE
argument_list|,
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testDrainUninterruptibly_doesNotThrow ()
specifier|public
name|void
name|testDrainUninterruptibly_doesNotThrow
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
range|:
name|blockingQueues
argument_list|()
control|)
block|{
name|testDrainUninterruptibly_doesNotThrow
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDrainUninterruptibly_doesNotThrow (final BlockingQueue<Object> q)
specifier|private
name|void
name|testDrainUninterruptibly_doesNotThrow
parameter_list|(
specifier|final
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
block|{
specifier|final
name|Thread
name|mainThread
init|=
name|currentThread
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|InterruptedException
block|{
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|50
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
operator|new
name|Interrupter
argument_list|(
name|mainThread
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
operator|new
name|Producer
argument_list|(
name|q
argument_list|,
literal|50
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|buf
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|elements
init|=
name|Queues
operator|.
name|drainUninterruptibly
argument_list|(
name|q
argument_list|,
name|buf
argument_list|,
literal|100
argument_list|,
name|MAX_VALUE
argument_list|,
name|NANOSECONDS
argument_list|)
decl_stmt|;
comment|// so when this drains all elements, we know the thread has also been interrupted in between
name|assertTrue
argument_list|(
name|Thread
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewLinkedBlockingDequeCapacity ()
specifier|public
name|void
name|testNewLinkedBlockingDequeCapacity
parameter_list|()
block|{
try|try
block|{
name|Queues
operator|.
name|newLinkedBlockingDeque
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// any capacity less than 1 should throw IllegalArgumentException
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Queues
operator|.
name|newLinkedBlockingDeque
argument_list|(
literal|1
argument_list|)
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|Queues
operator|.
name|newLinkedBlockingDeque
argument_list|(
literal|11
argument_list|)
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewLinkedBlockingQueueCapacity ()
specifier|public
name|void
name|testNewLinkedBlockingQueueCapacity
parameter_list|()
block|{
try|try
block|{
name|Queues
operator|.
name|newLinkedBlockingQueue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// any capacity less than 1 should throw IllegalArgumentException
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Queues
operator|.
name|newLinkedBlockingQueue
argument_list|(
literal|1
argument_list|)
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|Queues
operator|.
name|newLinkedBlockingQueue
argument_list|(
literal|11
argument_list|)
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Checks that #drain() invocations behave correctly for a drained (empty) queue. */
DECL|method|assertDrained (BlockingQueue<Object> q)
specifier|private
name|void
name|assertDrained
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
block|{
name|assertNull
argument_list|(
name|q
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertInterruptibleDrained
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertUninterruptibleDrained
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInterruptibleDrained (BlockingQueue<Object> q)
specifier|private
name|void
name|assertInterruptibleDrained
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
block|{
comment|// nothing to drain, thus this should wait doing nothing
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Queues
operator|.
name|drain
argument_list|(
name|q
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
comment|// but does the wait actually occurs?
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Interrupter
argument_list|(
name|currentThread
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// if waiting works, this should get stuck
name|Queues
operator|.
name|drain
argument_list|(
name|q
argument_list|,
name|newArrayList
argument_list|()
argument_list|,
literal|1
argument_list|,
name|MAX_VALUE
argument_list|,
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|expected
parameter_list|)
block|{
comment|// we indeed waited; a slow thread had enough time to interrupt us
block|}
block|}
comment|// same as above; uninterruptible version
DECL|method|assertUninterruptibleDrained (BlockingQueue<Object> q)
specifier|private
name|void
name|assertUninterruptibleDrained
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Queues
operator|.
name|drainUninterruptibly
argument_list|(
name|q
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// but does the wait actually occurs?
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Interrupter
argument_list|(
name|currentThread
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Stopwatch
name|timer
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|Queues
operator|.
name|drainUninterruptibly
argument_list|(
name|q
argument_list|,
name|newArrayList
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
comment|// wait for interrupted status and clear it
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Producer
specifier|private
specifier|static
class|class
name|Producer
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|q
specifier|final
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
decl_stmt|;
DECL|field|elements
specifier|final
name|int
name|elements
decl_stmt|;
DECL|field|beganProducing
specifier|final
name|CountDownLatch
name|beganProducing
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|doneProducing
specifier|final
name|CountDownLatch
name|doneProducing
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|Producer (BlockingQueue<Object> q, int elements)
name|Producer
parameter_list|(
name|BlockingQueue
argument_list|<
name|Object
argument_list|>
name|q
parameter_list|,
name|int
name|elements
parameter_list|)
block|{
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|beganProducing
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|doneProducing
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|Interrupter
specifier|private
specifier|static
class|class
name|Interrupter
implements|implements
name|Runnable
block|{
DECL|field|threadToInterrupt
specifier|final
name|Thread
name|threadToInterrupt
decl_stmt|;
DECL|method|Interrupter (Thread threadToInterrupt)
name|Interrupter
parameter_list|(
name|Thread
name|threadToInterrupt
parameter_list|)
block|{
name|this
operator|.
name|threadToInterrupt
operator|=
name|threadToInterrupt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
finally|finally
block|{
name|threadToInterrupt
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

