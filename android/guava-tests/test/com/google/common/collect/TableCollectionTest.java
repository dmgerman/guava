begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|CollectionTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapInterfaceTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SortedSetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSortedSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Collection tests for {@link Table} implementations.  *  * @author Jared Levy  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TableCollectionTest
specifier|public
class|class
name|TableCollectionTest
extends|extends
name|TestCase
block|{
DECL|field|COLLECTION_FEATURES
specifier|private
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
block|}
decl_stmt|;
DECL|field|COLLECTION_FEATURES_ORDER
specifier|private
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES_ORDER
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
block|}
decl_stmt|;
DECL|field|COLLECTION_FEATURES_REMOVE
specifier|private
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES_REMOVE
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
block|}
decl_stmt|;
DECL|field|COLLECTION_FEATURES_REMOVE_ORDER
specifier|private
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES_REMOVE_ORDER
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
block|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
block|}
decl_stmt|;
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ArrayRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|HashRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TransposeRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TransformValueRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableHashRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableTreeRowTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ArrayColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|HashColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TransposeColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TransformValueColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableHashColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableTreeColumnTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ArrayRowMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|HashRowMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeRowMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeRowMapHeadMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeRowMapTailMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeRowMapSubMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TransformValueRowMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableHashRowMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableTreeRowMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ArrayColumnMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|HashColumnMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeColumnMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TransformValueColumnMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableHashColumnMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|UnmodifiableTreeColumnMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Not testing rowKeySet() or columnKeySet() of Table.transformValues()
comment|// since the transformation doesn't affect the row and column key sets.
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowKeySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayTable.rowKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowKeySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBasedTable.rowKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeBasedTable.rowKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|rowKeySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableTable[HashBasedTable].rowKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|rowKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableRowSortedTable[TreeBasedTable].rowKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
argument_list|)
decl_stmt|;
name|populateForColumnKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|columnKeySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayTable.columnKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForColumnKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|columnKeySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBasedTable.columnKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForColumnKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|columnKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeBasedTable.columnKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForColumnKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|columnKeySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableTable[HashBasedTable].columnKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|RowSortedTable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForColumnKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|columnKeySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableRowSortedTable[TreeBasedTable].columnKeySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|rowKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rowKeys
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Table
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|rowKeys
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|'a'
argument_list|)
argument_list|)
decl_stmt|;
name|populateForValues
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayTable.values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populateForValues
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBasedTable.values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populateForValues
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeBasedTable.values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removeFirstCharacter
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|'a'
argument_list|,
literal|"x"
operator|+
name|checkNotNull
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|removeFirstCharacter
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TransformValues.values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populateForValues
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableTable[HashBasedTable].values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|RowSortedTable
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populateForValues
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableTable[TreeBasedTable].values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|,
operator|(
name|Character
operator|)
literal|null
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|,
literal|'b'
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|columnKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|element
decl_stmt|;
name|columnKeys
operator|.
name|add
argument_list|(
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|columnKeys
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|element
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
operator|.
name|cellSet
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayTable.cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
return|return
name|HashBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBasedTable.cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
return|return
name|TreeBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeBasedTable.cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transpose
argument_list|(
name|original
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TransposedTable.cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
return|return
name|HashBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|element
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|Functions
operator|.
expr|<
name|Character
operator|>
name|identity
argument_list|()
argument_list|)
operator|.
name|cellSet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TransformValues.cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|HashBasedTable
operator|.
expr|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
operator|>
name|create
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|element
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|cellSet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableTable[HashBasedTable].cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestCellSetGenerator
argument_list|()
block|{
annotation|@
name|Override
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
block|{
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|TreeBasedTable
operator|.
expr|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
operator|>
name|create
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|element
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|cellSet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableRowSortedTable[TreeBasedTable].cellSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|rowKeys
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|columnKeys
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|rowKeys
argument_list|,
name|columnKeys
argument_list|)
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayTable.column.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBasedTable.column.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeBasedTable.column.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|Functions
operator|.
name|toStringFunction
argument_list|()
argument_list|)
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TransformValues.column.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableTable[HashBasedTable].column.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateForRowKeySet
argument_list|(
name|table
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableRowSortedTable[TreeBasedTable].column.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|populateForRowKeySet ( Table<String, Integer, Character> table, String[] elements)
specifier|private
specifier|static
name|void
name|populateForRowKeySet
parameter_list|(
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|String
name|row
range|:
name|elements
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateForColumnKeySet ( Table<Integer, String, Character> table, String[] elements)
specifier|private
specifier|static
name|void
name|populateForColumnKeySet
parameter_list|(
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|String
name|column
range|:
name|elements
control|)
block|{
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|column
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|column
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateForValues ( Table<Integer, Character, String> table, String[] elements)
specifier|private
specifier|static
name|void
name|populateForValues
parameter_list|(
name|Table
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|,
name|String
argument_list|>
name|table
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|'a'
argument_list|,
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestCellSetGenerator
specifier|private
specifier|static
specifier|abstract
class|class
name|TestCellSetGenerator
implements|implements
name|TestSetGenerator
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"cat"
argument_list|,
literal|2
argument_list|,
literal|'b'
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create ( Object... elements)
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|createTable
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|element
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
operator|.
name|cellSet
argument_list|()
return|;
block|}
DECL|method|createTable ()
specifier|abstract
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|createTable
parameter_list|()
function_decl|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createArray (int length)
specifier|public
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
index|[]
operator|)
operator|new
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order ( List<Cell<String, Integer, Character>> insertionOrder)
specifier|public
name|List
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
block|}
DECL|class|MapTests
specifier|private
specifier|static
specifier|abstract
class|class
name|MapTests
extends|extends
name|MapInterfaceTest
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|MapTests (boolean allowsNullValues, boolean supportsPut, boolean supportsRemove, boolean supportsClear, boolean supportsIteratorRemove)
name|MapTests
parameter_list|(
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsPut
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|,
name|boolean
name|supportsIteratorRemove
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
name|allowsNullValues
argument_list|,
name|supportsPut
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|,
name|supportsIteratorRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"four"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
DECL|class|RowTests
specifier|private
specifier|static
specifier|abstract
class|class
name|RowTests
extends|extends
name|MapTests
block|{
DECL|method|RowTests (boolean allowsNullValues, boolean supportsPut, boolean supportsRemove, boolean supportsClear, boolean supportsIteratorRemove)
name|RowTests
parameter_list|(
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsPut
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|,
name|boolean
name|supportsIteratorRemove
parameter_list|)
block|{
name|super
argument_list|(
name|allowsNullValues
argument_list|,
name|supportsPut
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|,
name|supportsIteratorRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
specifier|abstract
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
function_decl|;
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|row
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|row
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO(hhchan): ArrayTable
DECL|class|ArrayRowTests
specifier|public
specifier|static
class|class
name|ArrayRowTests
extends|extends
name|RowTests
block|{
DECL|method|ArrayRowTests ()
specifier|public
name|ArrayRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
specifier|protected
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|ArrayTable
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|HashRowTests
specifier|public
specifier|static
class|class
name|HashRowTests
extends|extends
name|RowTests
block|{
DECL|method|HashRowTests ()
specifier|public
name|HashRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|HashBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TreeRowTests
specifier|public
specifier|static
class|class
name|TreeRowTests
extends|extends
name|RowTests
block|{
DECL|method|TreeRowTests ()
specifier|public
name|TreeRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|TreeBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TransposeRowTests
specifier|public
specifier|static
class|class
name|TransposeRowTests
extends|extends
name|RowTests
block|{
DECL|method|TransposeRowTests ()
specifier|public
name|TransposeRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|original
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transpose
argument_list|(
name|original
argument_list|)
return|;
block|}
block|}
DECL|field|DIVIDE_BY_2
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|DIVIDE_BY_2
init|=
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Integer
name|input
parameter_list|)
block|{
return|return
operator|(
name|input
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|input
operator|/
literal|2
return|;
block|}
block|}
decl_stmt|;
DECL|class|TransformValueRowTests
specifier|public
specifier|static
class|class
name|TransformValueRowTests
extends|extends
name|RowTests
block|{
DECL|method|TransformValueRowTests ()
specifier|public
name|TransformValueRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|DIVIDE_BY_2
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"two"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"three"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|"four"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|DIVIDE_BY_2
argument_list|)
operator|.
name|row
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
DECL|class|UnmodifiableHashRowTests
specifier|public
specifier|static
class|class
name|UnmodifiableHashRowTests
extends|extends
name|RowTests
block|{
DECL|method|UnmodifiableHashRowTests ()
specifier|public
name|UnmodifiableHashRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|row
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
DECL|class|UnmodifiableTreeRowTests
specifier|public
specifier|static
class|class
name|UnmodifiableTreeRowTests
extends|extends
name|RowTests
block|{
DECL|method|UnmodifiableTreeRowTests ()
specifier|public
name|UnmodifiableTreeRowTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|row
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
DECL|class|ColumnTests
specifier|private
specifier|static
specifier|abstract
class|class
name|ColumnTests
extends|extends
name|MapTests
block|{
DECL|method|ColumnTests (boolean allowsNullValues, boolean supportsPut, boolean supportsRemove, boolean supportsClear, boolean supportsIteratorRemove)
name|ColumnTests
parameter_list|(
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsPut
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|,
name|boolean
name|supportsIteratorRemove
parameter_list|)
block|{
name|super
argument_list|(
name|allowsNullValues
argument_list|,
name|supportsPut
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|,
name|supportsIteratorRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
specifier|abstract
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
function_decl|;
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|column
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|'a'
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|'a'
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|'a'
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|'b'
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|column
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO(hhchan): ArrayTable
DECL|class|ArrayColumnTests
specifier|public
specifier|static
class|class
name|ArrayColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|ArrayColumnTests ()
specifier|public
name|ArrayColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|ArrayTable
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|HashColumnTests
specifier|public
specifier|static
class|class
name|HashColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|HashColumnTests ()
specifier|public
name|HashColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|HashBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TreeColumnTests
specifier|public
specifier|static
class|class
name|TreeColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|TreeColumnTests ()
specifier|public
name|TreeColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|TreeBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TransposeColumnTests
specifier|public
specifier|static
class|class
name|TransposeColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|TransposeColumnTests ()
specifier|public
name|TransposeColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transpose
argument_list|(
name|original
argument_list|)
return|;
block|}
block|}
DECL|class|TransformValueColumnTests
specifier|public
specifier|static
class|class
name|TransformValueColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|TransformValueColumnTests ()
specifier|public
name|TransformValueColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|DIVIDE_BY_2
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|'a'
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|'a'
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|'a'
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|'b'
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|DIVIDE_BY_2
argument_list|)
operator|.
name|column
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
DECL|class|UnmodifiableHashColumnTests
specifier|public
specifier|static
class|class
name|UnmodifiableHashColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|UnmodifiableHashColumnTests ()
specifier|public
name|UnmodifiableHashColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|'a'
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|'a'
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|'a'
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|'b'
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
DECL|class|UnmodifiableTreeColumnTests
specifier|public
specifier|static
class|class
name|UnmodifiableTreeColumnTests
extends|extends
name|ColumnTests
block|{
DECL|method|UnmodifiableTreeColumnTests ()
specifier|public
name|UnmodifiableTreeColumnTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|makeTable
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Character
argument_list|,
name|Integer
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|'a'
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|'a'
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|'a'
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|'b'
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|column
argument_list|(
literal|'a'
argument_list|)
return|;
block|}
block|}
DECL|class|MapMapTests
specifier|private
specifier|static
specifier|abstract
class|class
name|MapMapTests
extends|extends
name|MapInterfaceTest
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
block|{
DECL|method|MapMapTests (boolean allowsNullValues, boolean supportsRemove, boolean supportsClear, boolean supportsIteratorRemove)
name|MapMapTests
parameter_list|(
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|,
name|boolean
name|supportsIteratorRemove
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
name|allowsNullValues
argument_list|,
literal|false
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|,
name|supportsIteratorRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"cat"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
comment|/**      * The version of this test supplied by {@link MapInterfaceTest} fails for      * this particular map implementation, because {@code map.get()} returns a      * view collection that changes in the course of a call to {@code remove()}.      * Thus, the expectation doesn't hold that {@code map.remove(x)} returns the      * same value which {@code map.get(x)} did immediately beforehand.      */
DECL|method|testRemove ()
annotation|@
name|Override
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|map
decl_stmt|;
specifier|final
name|String
name|keyToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToRemove
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|supportsRemove
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|map
operator|.
name|get
argument_list|(
name|keyToRemove
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|)
expr_stmt|;
comment|// This line doesn't hold - see the Javadoc comments above.
comment|// assertEquals(expectedValue, oldValue);
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|-
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{         }
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RowMapTests
specifier|private
specifier|static
specifier|abstract
class|class
name|RowMapTests
extends|extends
name|MapMapTests
block|{
DECL|method|RowMapTests (boolean allowsNullValues, boolean supportsRemove, boolean supportsClear, boolean supportsIteratorRemove)
name|RowMapTests
parameter_list|(
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|,
name|boolean
name|supportsIteratorRemove
parameter_list|)
block|{
name|super
argument_list|(
name|allowsNullValues
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|,
name|supportsIteratorRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
specifier|abstract
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
DECL|method|makePopulatedMap ()
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|populateTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowMap
argument_list|()
return|;
block|}
DECL|method|populateTable (Table<String, Integer, Character> table)
name|void
name|populateTable
parameter_list|(
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
parameter_list|)
block|{
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|rowMap
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO(hhchan): ArrayTable
DECL|class|ArrayRowMapTests
specifier|public
specifier|static
class|class
name|ArrayRowMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|ArrayRowMapTests ()
specifier|public
name|ArrayRowMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|ArrayTable
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"dog"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|HashRowMapTests
specifier|public
specifier|static
class|class
name|HashRowMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|HashRowMapTests ()
specifier|public
name|HashRowMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|HashBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TreeRowMapTests
specifier|public
specifier|static
class|class
name|TreeRowMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|TreeRowMapTests ()
specifier|public
name|TreeRowMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|TreeBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TreeRowMapHeadMapTests
specifier|public
specifier|static
class|class
name|TreeRowMapHeadMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|TreeRowMapHeadMapTests ()
specifier|public
name|TreeRowMapHeadMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
DECL|method|makePopulatedMap ()
name|makePopulatedMap
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|populateTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowMap
argument_list|()
operator|.
name|headMap
argument_list|(
literal|"x"
argument_list|)
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|rowMap
argument_list|()
operator|.
name|headMap
argument_list|(
literal|"x"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"z"
return|;
block|}
block|}
DECL|class|TreeRowMapTailMapTests
specifier|public
specifier|static
class|class
name|TreeRowMapTailMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|TreeRowMapTailMapTests ()
specifier|public
name|TreeRowMapTailMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
DECL|method|makePopulatedMap ()
name|makePopulatedMap
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|populateTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowMap
argument_list|()
operator|.
name|tailMap
argument_list|(
literal|"b"
argument_list|)
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|rowMap
argument_list|()
operator|.
name|tailMap
argument_list|(
literal|"b"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"a"
return|;
block|}
block|}
DECL|class|TreeRowMapSubMapTests
specifier|public
specifier|static
class|class
name|TreeRowMapSubMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|TreeRowMapSubMapTests ()
specifier|public
name|TreeRowMapSubMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
DECL|method|makePopulatedMap ()
name|makePopulatedMap
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|populateTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|rowMap
argument_list|()
operator|.
name|subMap
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|)
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|rowMap
argument_list|()
operator|.
name|subMap
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"z"
return|;
block|}
block|}
DECL|field|FIRST_CHARACTER
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|Character
argument_list|>
name|FIRST_CHARACTER
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Character
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Character
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|==
literal|null
condition|?
literal|null
else|:
name|input
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|class|TransformValueRowMapTests
specifier|public
specifier|static
class|class
name|TransformValueRowMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|TransformValueRowMapTests ()
specifier|public
name|TransformValueRowMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|original
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|original
argument_list|,
name|FIRST_CHARACTER
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|"apple"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|"banana"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|FIRST_CHARACTER
argument_list|)
operator|.
name|rowMap
argument_list|()
return|;
block|}
block|}
DECL|class|UnmodifiableHashRowMapTests
specifier|public
specifier|static
class|class
name|UnmodifiableHashRowMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|UnmodifiableHashRowMapTests ()
specifier|public
name|UnmodifiableHashRowMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|original
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|rowMap
argument_list|()
return|;
block|}
block|}
DECL|class|UnmodifiableTreeRowMapTests
specifier|public
specifier|static
class|class
name|UnmodifiableTreeRowMapTests
extends|extends
name|RowMapTests
block|{
DECL|method|UnmodifiableTreeRowMapTests ()
specifier|public
name|UnmodifiableTreeRowMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|original
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|rowMap
argument_list|()
return|;
block|}
block|}
DECL|class|ColumnMapTests
specifier|private
specifier|static
specifier|abstract
class|class
name|ColumnMapTests
extends|extends
name|MapMapTests
block|{
DECL|method|ColumnMapTests (boolean allowsNullValues, boolean supportsRemove, boolean supportsClear, boolean supportsIteratorRemove)
name|ColumnMapTests
parameter_list|(
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|,
name|boolean
name|supportsIteratorRemove
parameter_list|)
block|{
name|super
argument_list|(
name|allowsNullValues
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|,
name|supportsIteratorRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
specifier|abstract
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
DECL|method|makePopulatedMap ()
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|makeTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"bar"
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"foo"
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|columnMap
argument_list|()
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|makeTable
argument_list|()
operator|.
name|columnMap
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO(hhchan): ArrayTable
DECL|class|ArrayColumnMapTests
specifier|public
specifier|static
class|class
name|ArrayColumnMapTests
extends|extends
name|ColumnMapTests
block|{
DECL|method|ArrayColumnMapTests ()
specifier|public
name|ArrayColumnMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|ArrayTable
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|HashColumnMapTests
specifier|public
specifier|static
class|class
name|HashColumnMapTests
extends|extends
name|ColumnMapTests
block|{
DECL|method|HashColumnMapTests ()
specifier|public
name|HashColumnMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|HashBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TreeColumnMapTests
specifier|public
specifier|static
class|class
name|TreeColumnMapTests
extends|extends
name|ColumnMapTests
block|{
DECL|method|TreeColumnMapTests ()
specifier|public
name|TreeColumnMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
return|return
name|TreeBasedTable
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|TransformValueColumnMapTests
specifier|public
specifier|static
class|class
name|TransformValueColumnMapTests
extends|extends
name|ColumnMapTests
block|{
DECL|method|TransformValueColumnMapTests ()
specifier|public
name|TransformValueColumnMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|original
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|original
argument_list|,
name|FIRST_CHARACTER
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|,
literal|"apple"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"bar"
argument_list|,
literal|"banana"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"foo"
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|transformValues
argument_list|(
name|table
argument_list|,
name|FIRST_CHARACTER
argument_list|)
operator|.
name|columnMap
argument_list|()
return|;
block|}
block|}
DECL|class|UnmodifiableHashColumnMapTests
specifier|public
specifier|static
class|class
name|UnmodifiableHashColumnMapTests
extends|extends
name|ColumnMapTests
block|{
DECL|method|UnmodifiableHashColumnMapTests ()
specifier|public
name|UnmodifiableHashColumnMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|original
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"bar"
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"foo"
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableTable
argument_list|(
name|table
argument_list|)
operator|.
name|columnMap
argument_list|()
return|;
block|}
block|}
DECL|class|UnmodifiableTreeColumnMapTests
specifier|public
specifier|static
class|class
name|UnmodifiableTreeColumnMapTests
extends|extends
name|ColumnMapTests
block|{
DECL|method|UnmodifiableTreeColumnMapTests ()
specifier|public
name|UnmodifiableTreeColumnMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTable ()
annotation|@
name|Override
name|Table
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|makeTable
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|original
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|RowSortedTable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"bar"
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"foo"
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
return|return
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|table
argument_list|)
operator|.
name|columnMap
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

