begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|EntryTransformer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SafeTreeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SortedMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSortedMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringBiMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Test suites for wrappers in {@code Maps}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|MapsCollectionTest
specifier|public
class|class
name|MapsCollectionTest
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SafeTreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|unmodifiableNavigableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableNavigableMap[SafeTreeMap]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringBiMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|entries
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|checkArgument
argument_list|(
operator|!
name|bimap
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|unmodifiableBiMap
argument_list|(
name|bimap
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableBiMap[HashBiMap]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<>
argument_list|(
name|mapEntry
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"xxx"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"xx"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"xxxx"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"aaaaa"
argument_list|,
literal|5
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|elements
control|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|e
decl_stmt|;
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|asMap
argument_list|(
name|set
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Integer
index|[
name|length
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.asMap[Set, Function]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Integer
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<>
argument_list|(
name|mapEntry
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"aa"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"aba"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bbbb"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"ccccc"
argument_list|,
literal|5
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|NonNavigableSortedSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|elements
control|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|e
decl_stmt|;
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|asMap
argument_list|(
name|set
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o1
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.asMap[SortedSet, Function]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Integer
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<>
argument_list|(
name|mapEntry
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"aa"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"aba"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bbbb"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"ccccc"
argument_list|,
literal|5
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|elements
control|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|e
decl_stmt|;
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|checkNotNull
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|asMap
argument_list|(
name|set
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o1
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.asMap[NavigableSet, Function]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|filterSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|transformSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|filterSuite ()
specifier|static
name|TestSuite
name|filterSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"Filter"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|filterMapSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|filterBiMapSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|filterSortedMapSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|filterNavigableMapSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|filterMapSuite ()
specifier|static
name|TestSuite
name|filterMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"FilterMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterKeys
argument_list|(
name|map
argument_list|,
name|FILTER_KEYS
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterKeys[Map, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterValues
argument_list|(
name|map
argument_list|,
name|FILTER_VALUES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterValues[Map, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterEntries
argument_list|(
name|map
argument_list|,
name|FILTER_ENTRIES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterEntries[Map, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
name|map
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|map
argument_list|,
name|FILTER_ENTRIES_1
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterEntries
argument_list|(
name|map
argument_list|,
name|FILTER_ENTRIES_2
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterEntries[Maps.filterEntries[Map, Predicate], Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|filterBiMapSuite ()
specifier|static
name|TestSuite
name|filterBiMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"FilterBiMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringBiMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterKeys
argument_list|(
name|map
argument_list|,
name|FILTER_KEYS
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterKeys[BiMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringBiMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterValues
argument_list|(
name|map
argument_list|,
name|FILTER_VALUES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterValues[BiMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringBiMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterEntries
argument_list|(
name|map
argument_list|,
name|FILTER_ENTRIES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterEntries[BiMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|filterSortedMapSuite ()
specifier|static
name|TestSuite
name|filterSortedMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"FilterSortedMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|NonNavigableSortedMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterKeys
argument_list|(
name|map
argument_list|,
name|FILTER_KEYS
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterKeys[SortedMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|NonNavigableSortedMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterValues
argument_list|(
name|map
argument_list|,
name|FILTER_VALUES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterValues[SortedMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|NonNavigableSortedMap
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|ENTRIES_TO_FILTER
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterEntries
argument_list|(
name|map
argument_list|,
name|FILTER_ENTRIES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterEntries[SortedMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|filterNavigableMapSuite ()
specifier|static
name|TestSuite
name|filterNavigableMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"FilterNavigableMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"banana"
argument_list|,
literal|"toast"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"eggplant"
argument_list|,
literal|"spam"
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterKeys
argument_list|(
name|map
argument_list|,
name|FILTER_KEYS
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterKeys[NavigableMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"banana"
argument_list|,
literal|"toast"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"eggplant"
argument_list|,
literal|"spam"
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterValues
argument_list|(
name|map
argument_list|,
name|FILTER_VALUES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterValues[NavigableMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|putEntries
argument_list|(
name|map
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"banana"
argument_list|,
literal|"toast"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"eggplant"
argument_list|,
literal|"spam"
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|filterEntries
argument_list|(
name|map
argument_list|,
name|FILTER_ENTRIES
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.filterEntries[NavigableMap, Predicate]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|putEntries (Map<String, String> map, Entry<String, String>[] entries)
specifier|static
name|void
name|putEntries
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|FILTER_KEYS
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|FILTER_KEYS
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|CheckForNull
name|String
name|string
parameter_list|)
block|{
return|return
operator|!
literal|"banana"
operator|.
name|equals
argument_list|(
name|string
argument_list|)
operator|&&
operator|!
literal|"eggplant"
operator|.
name|equals
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|FILTER_VALUES
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|FILTER_VALUES
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|CheckForNull
name|String
name|string
parameter_list|)
block|{
return|return
operator|!
literal|"toast"
operator|.
name|equals
argument_list|(
name|string
argument_list|)
operator|&&
operator|!
literal|"spam"
operator|.
name|equals
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|FILTER_ENTRIES
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|FILTER_ENTRIES
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"banana"
argument_list|,
literal|"toast"
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
operator|&&
operator|!
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"eggplant"
argument_list|,
literal|"spam"
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|FILTER_ENTRIES_1
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|FILTER_ENTRIES_1
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"banana"
argument_list|,
literal|"toast"
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|FILTER_ENTRIES_2
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|FILTER_ENTRIES_2
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"eggplant"
argument_list|,
literal|"spam"
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ENTRIES_TO_FILTER
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ENTRIES_TO_FILTER
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"banana"
argument_list|,
literal|"toast"
argument_list|,
literal|"eggplant"
argument_list|,
literal|"spam"
argument_list|)
decl_stmt|;
DECL|field|NOT_NULL_ENTRY
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|NOT_NULL_ENTRY
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
decl_stmt|;
DECL|class|NonNavigableSortedSet
specifier|private
specifier|static
class|class
name|NonNavigableSortedSet
extends|extends
name|ForwardingSortedSet
argument_list|<
name|String
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|delegate
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
DECL|class|NonNavigableSortedMap
specifier|private
specifier|static
class|class
name|NonNavigableSortedMap
extends|extends
name|ForwardingSortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|delegate
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
DECL|method|encode (String str)
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|encode
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
DECL|field|DECODE_FUNCTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DECODE_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|decode
argument_list|(
name|input
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|DECODE_ENTRY_TRANSFORMER
specifier|private
specifier|static
specifier|final
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|DECODE_ENTRY_TRANSFORMER
init|=
operator|new
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|transformEntry
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|DECODE_FUNCTION
operator|.
name|apply
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|transformSuite ()
specifier|static
name|TestSuite
name|transformSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"Maps.transform"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|transformMapSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|transformSortedMapSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|transformNavigableMapSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|transformMapSuite ()
specifier|static
name|TestSuite
name|transformMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"TransformMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|transformValues
argument_list|(
name|map
argument_list|,
name|DECODE_FUNCTION
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.transformValues[Map, Function]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|transformEntries
argument_list|(
name|map
argument_list|,
name|DECODE_ENTRY_TRANSFORMER
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.transformEntries[Map, EntryTransformer]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|transformSortedMapSuite ()
specifier|static
name|TestSuite
name|transformSortedMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"TransformSortedMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|NonNavigableSortedMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|transformValues
argument_list|(
name|map
argument_list|,
name|DECODE_FUNCTION
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.transformValues[SortedMap, Function]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|NonNavigableSortedMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|transformEntries
argument_list|(
name|map
argument_list|,
name|DECODE_ENTRY_TRANSFORMER
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.transformEntries[SortedMap, EntryTransformer]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|transformNavigableMapSuite ()
specifier|static
name|TestSuite
name|transformNavigableMapSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"TransformNavigableMap"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|transformValues
argument_list|(
name|map
argument_list|,
name|DECODE_FUNCTION
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.transformValues[NavigableMap, Function]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|SafeTreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|encode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|transformEntries
argument_list|(
name|map
argument_list|,
name|DECODE_ENTRY_TRANSFORMER
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Maps.transformEntries[NavigableMap, EntryTransformer]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
block|}
end_class

end_unit

