begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableSetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetAsListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetCopyOfGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetDescendingAsListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetDescendingGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetExplicitComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetExplicitSuperclassComparatorGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetReversedOrderGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetSubsetAsListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSortedSetUnhashableGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|SetHashCodeTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link ImmutableSortedSet}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableSortedSetTest
specifier|public
class|class
name|ImmutableSortedSetTest
extends|extends
name|AbstractImmutableSetTest
block|{
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetCopyOfGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetExplicitComparator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", explicit comparator, vararg"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetExplicitSuperclassComparatorGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", explicit superclass comparator, iterable"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetReversedOrderGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", reverseOrder, iterator"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetUnhashableGenerator
argument_list|()
argument_list|)
operator|.
name|suppressing
argument_list|(
name|SetHashCodeTester
operator|.
name|getHashCodeMethods
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", unhashable"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetDescendingGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", descending"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSortedSet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetSubsetAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSortedSet.subSet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedSetDescendingAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSortedSet.descendingSet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableSortedSetTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
comment|// enum singleton pattern
DECL|enum|StringLengthComparator
specifier|private
enum|enum
name|StringLengthComparator
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|compare (String a, String b)
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|length
argument_list|()
operator|-
name|b
operator|.
name|length
argument_list|()
return|;
block|}
block|}
DECL|field|STRING_LENGTH
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|STRING_LENGTH
init|=
name|StringLengthComparator
operator|.
name|INSTANCE
decl_stmt|;
annotation|@
name|Override
DECL|method|of ()
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|()
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2, E e3)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2, E e3, E e4)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2, E e3, E e4, E e5)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|of ( E e1, E e2, E e3, E e4, E e5, E e6, E... rest)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|rest
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (E[] elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|E
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf ( Collection<? extends E> elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (Iterable<? extends E> elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (Iterator<? extends E> elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ImmutableSortedSet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty_comparator ()
specifier|public
name|void
name|testEmpty_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty_headSet ()
specifier|public
name|void
name|testEmpty_headSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|set
argument_list|,
name|set
operator|.
name|headSet
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty_tailSet ()
specifier|public
name|void
name|testEmpty_tailSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|set
argument_list|,
name|set
operator|.
name|tailSet
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty_subSet ()
specifier|public
name|void
name|testEmpty_subSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|set
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty_first ()
specifier|public
name|void
name|testEmpty_first
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
try|try
block|{
name|set
operator|.
name|first
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEmpty_last ()
specifier|public
name|void
name|testEmpty_last
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
try|try
block|{
name|set
operator|.
name|last
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testEmpty_serialization ()
specifier|public
name|void
name|testEmpty_serialization
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|set
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingle_comparator ()
specifier|public
name|void
name|testSingle_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingle_headSet ()
specifier|public
name|void
name|testSingle_headSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"g"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|headSet
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|headSet
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingle_tailSet ()
specifier|public
name|void
name|testSingle_tailSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"c"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"c"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"e"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|tailSet
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingle_subSet ()
specifier|public
name|void
name|testSingle_subSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"g"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"e"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingle_first ()
specifier|public
name|void
name|testSingle_first
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|set
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingle_last ()
specifier|public
name|void
name|testSingle_last
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|set
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSingle_serialization ()
specifier|public
name|void
name|testSingle_serialization
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|comparator
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf_ordering ()
specifier|public
name|void
name|testOf_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|/*    * Tests that we workaround GWT bug #3621 (or that it is already fixed).    *    * A call to of() with a parameter that is not a plain Object[] (here,    * Interface[]) creates a RegularImmutableSortedSet backed by an array of that    * type. Later, RegularImmutableSortedSet.toArray() calls System.arraycopy()    * to copy from that array to the destination array. This would be fine, but    * GWT has a bug: It refuses to copy from an E[] to an Object[] when E is an    * interface type.    */
comment|// TODO: test other collections for this problem
DECL|method|testOf_gwtArraycopyBug ()
specifier|public
name|void
name|testOf_gwtArraycopyBug
parameter_list|()
block|{
comment|/*      * The test requires:      *      * 1) An interface I extending Comparable<I> so that the created array is of      * an interface type. 2) An instance of a class implementing that interface      * so that we can pass non-null instances of the interface.      *      * (Currently it's safe to pass instances for which compareTo() always      * returns 0, but if we had a SingletonImmutableSortedSet, this might no      * longer be the case.)      *      * javax.naming.Name and java.util.concurrent.Delayed might work, but      * they're fairly obscure, we've invented our own interface and class.      */
name|Interface
name|a
init|=
operator|new
name|Impl
argument_list|()
decl_stmt|;
name|Interface
name|b
init|=
operator|new
name|Impl
argument_list|()
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Interface
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|Object
index|[]
name|unused1
init|=
name|set
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Object
index|[]
name|unused2
init|=
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
block|}
DECL|interface|Interface
interface|interface
name|Interface
extends|extends
name|Comparable
argument_list|<
name|Interface
argument_list|>
block|{}
DECL|class|Impl
specifier|static
class|class
name|Impl
implements|implements
name|Interface
block|{
DECL|field|nextId
specifier|static
name|int
name|nextId
decl_stmt|;
DECL|field|id
name|Integer
name|id
init|=
name|nextId
operator|++
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo (Interface other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Interface
name|other
parameter_list|)
block|{
return|return
name|id
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|Impl
operator|)
name|other
operator|)
operator|.
name|id
argument_list|)
return|;
block|}
block|}
DECL|method|testOf_ordering_dupes ()
specifier|public
name|void
name|testOf_ordering_dupes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf_comparator ()
specifier|public
name|void
name|testOf_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf_headSet ()
specifier|public
name|void
name|testOf_headSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"e"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"e"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|headSet
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|headSet
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf_tailSet ()
specifier|public
name|void
name|testOf_tailSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"e"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"e"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|tailSet
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf_subSet ()
specifier|public
name|void
name|testOf_subSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"a"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|set
operator|.
name|subSet
argument_list|(
literal|"e"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testOf_subSetSerialization ()
specifier|public
name|void
name|testOf_subSetSerialization
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf_first ()
specifier|public
name|void
name|testOf_first
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|set
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf_last ()
specifier|public
name|void
name|testOf_last
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|set
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testOf_serialization ()
specifier|public
name|void
name|testOf_serialization
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|set
argument_list|,
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|comparator
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* "Explicit" indicates an explicit comparator. */
DECL|method|testExplicit_ordering ()
specifier|public
name|void
name|testExplicit_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_ordering_dupes ()
specifier|public
name|void
name|testExplicit_ordering_dupes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"brown"
argument_list|,
literal|"fox"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|,
literal|"lazy"
argument_list|,
literal|"dog"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_contains ()
specifier|public
name|void
name|testExplicit_contains
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"quick"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"google"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"california"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CollectionIncompatibleType"
argument_list|)
comment|// testing incompatible types
DECL|method|testExplicit_containsMismatchedTypes ()
specifier|public
name|void
name|testExplicit_containsMismatchedTypes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|3.7
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicit_comparator ()
specifier|public
name|void
name|testExplicit_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|STRING_LENGTH
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicit_headSet ()
specifier|public
name|void
name|testExplicit_headSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"a"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"fish"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"fish"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"california"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|"a"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicit_tailSet ()
specifier|public
name|void
name|testExplicit_tailSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"california"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"fish"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"fish"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|"california"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicit_subSet ()
specifier|public
name|void
name|testExplicit_subSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"the"
argument_list|,
literal|"quick"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
operator|instanceof
name|ImmutableSortedSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"the"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"the"
argument_list|,
literal|"over"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"a"
argument_list|,
literal|"california"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"vermont"
argument_list|,
literal|"california"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|"aaa"
argument_list|,
literal|"zzz"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|set
operator|.
name|subSet
argument_list|(
literal|"quick"
argument_list|,
literal|"the"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testExplicit_first ()
specifier|public
name|void
name|testExplicit_first
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|set
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicit_last ()
specifier|public
name|void
name|testExplicit_last
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jumped"
argument_list|,
name|set
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testExplicitEmpty_serialization ()
specifier|public
name|void
name|testExplicitEmpty_serialization
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|set
operator|.
name|comparator
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testExplicit_serialization ()
specifier|public
name|void
name|testExplicit_serialization
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|set
argument_list|,
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|set
operator|.
name|comparator
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_ordering ()
specifier|public
name|void
name|testCopyOf_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|asList
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_ordering_dupes ()
specifier|public
name|void
name|testCopyOf_ordering_dupes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|asList
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_subSet ()
specifier|public
name|void
name|testCopyOf_subSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|subset
init|=
name|set
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|subset
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|subset
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_headSet ()
specifier|public
name|void
name|testCopyOf_headSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|headset
init|=
name|set
operator|.
name|headSet
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|headset
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|headset
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_tailSet ()
specifier|public
name|void
name|testCopyOf_tailSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|tailset
init|=
name|set
operator|.
name|tailSet
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|tailset
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tailset
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_comparator ()
specifier|public
name|void
name|testCopyOf_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|asList
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_ordering ()
specifier|public
name|void
name|testCopyOf_iterator_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|asIterator
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_ordering_dupes ()
specifier|public
name|void
name|testCopyOf_iterator_ordering_dupes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|asIterator
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_comparator ()
specifier|public
name|void
name|testCopyOf_iterator_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|asIterator
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_sortedSet_ordering ()
specifier|public
name|void
name|testCopyOf_sortedSet_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"f"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_sortedSet_comparator ()
specifier|public
name|void
name|testCopyOf_sortedSet_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|Sets
operator|.
expr|<
name|String
operator|>
name|newTreeSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfExplicit_ordering ()
specifier|public
name|void
name|testCopyOfExplicit_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|STRING_LENGTH
argument_list|,
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfExplicit_ordering_dupes ()
specifier|public
name|void
name|testCopyOfExplicit_ordering_dupes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|STRING_LENGTH
argument_list|,
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"brown"
argument_list|,
literal|"fox"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|,
literal|"lazy"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfExplicit_comparator ()
specifier|public
name|void
name|testCopyOfExplicit_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|STRING_LENGTH
argument_list|,
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|STRING_LENGTH
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfExplicit_iterator_ordering ()
specifier|public
name|void
name|testCopyOfExplicit_iterator_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|STRING_LENGTH
argument_list|,
name|asIterator
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfExplicit_iterator_ordering_dupes ()
specifier|public
name|void
name|testCopyOfExplicit_iterator_ordering_dupes
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|STRING_LENGTH
argument_list|,
name|asIterator
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"brown"
argument_list|,
literal|"fox"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|,
literal|"lazy"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfExplicit_iterator_comparator ()
specifier|public
name|void
name|testCopyOfExplicit_iterator_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|STRING_LENGTH
argument_list|,
name|asIterator
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|STRING_LENGTH
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_sortedSetIterable ()
specifier|public
name|void
name|testCopyOf_sortedSetIterable
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|input
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|STRING_LENGTH
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|input
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"the"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfSorted_natural_ordering ()
specifier|public
name|void
name|testCopyOfSorted_natural_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|input
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOfSorted
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"the"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfSorted_natural_comparator ()
specifier|public
name|void
name|testCopyOfSorted_natural_comparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|input
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOfSorted
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfSorted_explicit_ordering ()
specifier|public
name|void
name|testCopyOfSorted_explicit_ordering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|input
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|STRING_LENGTH
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|input
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOfSorted
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"over"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|STRING_LENGTH
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO(b/172823566): Use mainline testToImmutableSortedSet once CollectorTester is usable.
DECL|method|testToImmutableSortedSet_java7 ()
specifier|public
name|void
name|testToImmutableSortedSet_java7
parameter_list|()
block|{
comment|// Note that a Collector should generally enforce consistent comparator between builders
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|zis
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|zat
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|sortedSet
init|=
name|zis
operator|.
name|combine
argument_list|(
name|zat
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|sortedSet
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|// TODO(b/172823566): Use mainline testToImmutableSortedSet_customComparator once CollectorTester
comment|//  is usable to java7.
DECL|method|testToImmutableSortedSet_customComparator_java7 ()
specifier|public
name|void
name|testToImmutableSortedSet_customComparator_java7
parameter_list|()
block|{
comment|// Note that a Collector should generally enforce consistent comparator between builders.
comment|// So no tests for non-matching comparator shenanigans.
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|zis
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"ccc"
argument_list|,
literal|"bb"
argument_list|,
literal|"ccc"
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|zat
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"bb"
argument_list|,
literal|"dddd"
argument_list|,
literal|"ccc"
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|sortedSet
init|=
name|zis
operator|.
name|combine
argument_list|(
name|zat
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|sortedSet
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"bb"
argument_list|,
literal|"ccc"
argument_list|,
literal|"dddd"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testEquals_bothDefaultOrdering ()
specifier|public
name|void
name|testEquals_bothDefaultOrdering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|set
argument_list|,
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
operator|.
name|equals
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_bothExplicitOrdering ()
specifier|public
name|void
name|testEquals_bothExplicitOrdering
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"house"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"house"
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
operator|.
name|equals
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|complex
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|STRING_LENGTH
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|complex
argument_list|,
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
argument_list|,
name|complex
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_bothDefaultOrdering_StringVsInt ()
specifier|public
name|void
name|testEquals_bothDefaultOrdering_StringVsInt
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEqualLenient
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_bothExplicitOrdering_StringVsInt ()
specifier|public
name|void
name|testEquals_bothExplicitOrdering_StringVsInt
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEqualLenient
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAll_notSortedSet ()
specifier|public
name|void
name|testContainsAll_notSortedSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"f"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|"f"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAll_sameComparator ()
specifier|public
name|void
name|testContainsAll_sameComparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"f"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CollectionIncompatibleType"
argument_list|)
comment|// testing incompatible types
DECL|method|testContainsAll_sameComparator_StringVsInt ()
specifier|public
name|void
name|testContainsAll_sameComparator_StringVsInt
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|unexpected
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|unexpected
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|unexpected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAll_differentComparator ()
specifier|public
name|void
name|testContainsAll_differentComparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|comparator
init|=
name|Collections
operator|.
name|reverseOrder
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|(
name|comparator
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"f"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testDifferentComparator_serialization ()
specifier|public
name|void
name|testDifferentComparator_serialization
parameter_list|()
block|{
comment|// don't use Collections.reverseOrder(); it didn't reserialize to the same instance in JDK5
name|Comparator
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|(
name|comparator
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|set
argument_list|,
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|comparator
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReverseOrder ()
specifier|public
name|void
name|testReverseOrder
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|reverseOrder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|TO_STRING
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Object
argument_list|>
name|TO_STRING
init|=
operator|new
name|Comparator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|testSupertypeComparator ()
specifier|public
name|void
name|testSupertypeComparator
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|TO_STRING
argument_list|)
operator|.
name|add
argument_list|(
literal|3
argument_list|,
literal|12
argument_list|,
literal|101
argument_list|,
literal|44
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|101
argument_list|,
literal|12
argument_list|,
literal|3
argument_list|,
literal|44
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testSupertypeComparatorSubtypeElements ()
specifier|public
name|void
name|testSupertypeComparatorSubtypeElements
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|Number
argument_list|>
name|set
init|=
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|Number
argument_list|>
argument_list|(
name|TO_STRING
argument_list|)
operator|.
name|add
argument_list|(
literal|3
argument_list|,
literal|12
argument_list|,
literal|101
argument_list|,
literal|44
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|101
argument_list|,
literal|12
argument_list|,
literal|3
argument_list|,
literal|44
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|builder ()
argument_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|E
argument_list|>
argument_list|>
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|()
block|{
return|return
name|ImmutableSortedSet
operator|.
name|naturalOrder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getComplexBuilderSetLastElement ()
name|int
name|getComplexBuilderSetLastElement
parameter_list|()
block|{
return|return
literal|0x00FFFFFF
return|;
block|}
DECL|method|testLegacyComparable_of ()
specifier|public
name|void
name|testLegacyComparable_of
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set0
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|set0
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// using a legacy comparable
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set1
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|LegacyComparable
operator|.
name|Z
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set1
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|LegacyComparable
operator|.
name|Z
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// using a legacy comparable
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set2
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
name|LegacyComparable
operator|.
name|Z
argument_list|,
name|LegacyComparable
operator|.
name|Y
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set2
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|LegacyComparable
operator|.
name|Y
argument_list|,
name|LegacyComparable
operator|.
name|Z
argument_list|)
expr_stmt|;
block|}
DECL|method|testLegacyComparable_copyOf_collection ()
specifier|public
name|void
name|testLegacyComparable_copyOf_collection
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_BACKWARD
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_FORWARD
argument_list|,
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLegacyComparable_copyOf_iterator ()
specifier|public
name|void
name|testLegacyComparable_copyOf_iterator
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_BACKWARD
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_FORWARD
argument_list|,
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLegacyComparable_builder_natural ()
specifier|public
name|void
name|testLegacyComparable_builder_natural
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Note: IntelliJ wrongly reports an error for this statement
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|LegacyComparable
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|LegacyComparable
operator|>
name|naturalOrder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_BACKWARD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|LegacyComparable
operator|.
name|X
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|LegacyComparable
operator|.
name|Y
argument_list|,
name|LegacyComparable
operator|.
name|Z
argument_list|)
expr_stmt|;
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_FORWARD
argument_list|,
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLegacyComparable_builder_reverse ()
specifier|public
name|void
name|testLegacyComparable_builder_reverse
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Note: IntelliJ wrongly reports an error for this statement
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|LegacyComparable
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
expr|<
name|LegacyComparable
operator|>
name|reverseOrder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_FORWARD
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|LegacyComparable
operator|.
name|X
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|LegacyComparable
operator|.
name|Y
argument_list|,
name|LegacyComparable
operator|.
name|Z
argument_list|)
expr_stmt|;
name|ImmutableSortedSet
argument_list|<
name|LegacyComparable
argument_list|>
name|set
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|LegacyComparable
operator|.
name|VALUES_BACKWARD
argument_list|,
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"static-access"
block|}
argument_list|)
DECL|method|testBuilderMethod ()
specifier|public
name|void
name|testBuilderMethod
parameter_list|()
block|{
try|try
block|{
name|ImmutableSortedSet
operator|.
name|builder
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAsList ()
specifier|public
name|void
name|testAsList
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"o"
argument_list|,
literal|"u"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|set
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"o"
argument_list|,
literal|"u"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|list
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester, ImmutableSortedAsList
DECL|method|testAsListReturnTypeAndSerialization ()
specifier|public
name|void
name|testAsListReturnTypeAndSerialization
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"o"
argument_list|,
literal|"u"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|set
operator|.
name|asList
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubsetAsList ()
specifier|public
name|void
name|testSubsetAsList
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"o"
argument_list|,
literal|"u"
argument_list|)
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|set
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"o"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester, ImmutableSortedAsList
DECL|method|testSubsetAsListReturnTypeAndSerialization ()
specifier|public
name|void
name|testSubsetAsListReturnTypeAndSerialization
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"o"
argument_list|,
literal|"u"
argument_list|)
operator|.
name|subSet
argument_list|(
literal|"c"
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|set
operator|.
name|asList
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsListInconsistentComprator ()
specifier|public
name|void
name|testAsListInconsistentComprator
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_LENGTH
argument_list|)
operator|.
name|add
argument_list|(
literal|"in"
argument_list|,
literal|"the"
argument_list|,
literal|"quick"
argument_list|,
literal|"jumped"
argument_list|,
literal|"over"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|set
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|"the"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|"the"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"the"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|"chicken"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|"chicken"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"chicken"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|asIterator (E... elements)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Iterator
argument_list|<
name|E
argument_list|>
name|asIterator
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|asList
argument_list|(
name|elements
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|// In GWT, java.util.TreeSet throws ClassCastException when the comparator
comment|// throws it, unlike JDK6.  Therefore, we accept ClassCastException as a
comment|// valid result thrown by java.util.TreeSet#equals.
DECL|method|assertNotEqualLenient (TreeSet<?> unexpected, SortedSet<?> actual)
specifier|private
specifier|static
name|void
name|assertNotEqualLenient
parameter_list|(
name|TreeSet
argument_list|<
name|?
argument_list|>
name|unexpected
parameter_list|,
name|SortedSet
argument_list|<
name|?
argument_list|>
name|actual
parameter_list|)
block|{
try|try
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|unexpected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|accepted
parameter_list|)
block|{     }
block|}
DECL|method|testHeadSetInclusive ()
specifier|public
name|void
name|testHeadSetInclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testHeadSetExclusive ()
specifier|public
name|void
name|testHeadSetExclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTailSetInclusive ()
specifier|public
name|void
name|testTailSetInclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
name|i
argument_list|,
name|strings
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTailSetExclusive ()
specifier|public
name|void
name|testTailSetExclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|strings
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testFloor_emptySet ()
specifier|public
name|void
name|testFloor_emptySet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|floor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloor_elementPresent ()
specifier|public
name|void
name|testFloor_elementPresent
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"a"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"b"
block|,
literal|"i"
block|,
literal|"d"
block|,
literal|"a"
block|,
literal|"c"
block|,
literal|"k"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|floor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|floor
argument_list|(
literal|"j"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|floor
argument_list|(
literal|"q"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloor_elementAbsent ()
specifier|public
name|void
name|testFloor_elementAbsent
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"b"
block|,
literal|"i"
block|,
literal|"d"
block|,
literal|"c"
block|,
literal|"k"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|floor
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testCeiling_emptySet ()
specifier|public
name|void
name|testCeiling_emptySet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|ceiling
argument_list|(
literal|"f"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testCeiling_elementPresent ()
specifier|public
name|void
name|testCeiling_elementPresent
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"f"
block|,
literal|"i"
block|,
literal|"d"
block|,
literal|"c"
block|,
literal|"k"
block|,
literal|"p"
block|,
literal|"c"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|ceiling
argument_list|(
literal|"f"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|ceiling
argument_list|(
literal|"h"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|ceiling
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCeiling_elementAbsent ()
specifier|public
name|void
name|testCeiling_elementAbsent
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"a"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"b"
block|,
literal|"i"
block|,
literal|"d"
block|,
literal|"a"
block|,
literal|"c"
block|,
literal|"k"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|ceiling
argument_list|(
literal|"l"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubSetExclusiveExclusive ()
specifier|public
name|void
name|testSubSetExclusiveExclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|strings
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
name|strings
index|[
name|j
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|j
argument_list|)
argument_list|,
name|j
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSubSetInclusiveExclusive ()
specifier|public
name|void
name|testSubSetInclusiveExclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|strings
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
name|strings
index|[
name|j
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSubSetExclusiveInclusive ()
specifier|public
name|void
name|testSubSetExclusiveInclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|strings
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
name|strings
index|[
name|j
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|j
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSubSetInclusiveInclusive ()
specifier|public
name|void
name|testSubSetInclusiveInclusive
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
name|NUMBER_NAMES
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|strings
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
name|strings
index|[
name|j
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|sortedNumberNames
argument_list|(
name|i
argument_list|,
name|j
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|sortedNumberNames (int i, int j)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|sortedNumberNames
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|SORTED_NUMBER_NAMES
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
return|;
block|}
DECL|field|NUMBER_NAMES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|NUMBER_NAMES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|,
literal|"five"
argument_list|,
literal|"six"
argument_list|,
literal|"seven"
argument_list|)
decl_stmt|;
DECL|field|SORTED_NUMBER_NAMES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|SORTED_NUMBER_NAMES
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|immutableSortedCopy
argument_list|(
name|NUMBER_NAMES
argument_list|)
decl_stmt|;
DECL|class|SelfComparableExample
specifier|private
specifier|static
class|class
name|SelfComparableExample
implements|implements
name|Comparable
argument_list|<
name|SelfComparableExample
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compareTo (SelfComparableExample o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|SelfComparableExample
name|o
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|testBuilderGenerics_SelfComparable ()
specifier|public
name|void
name|testBuilderGenerics_SelfComparable
parameter_list|()
block|{
comment|// testing simple creation
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|SelfComparableExample
argument_list|>
name|natural
init|=
name|ImmutableSortedSet
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|natural
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|SelfComparableExample
argument_list|>
name|reverse
init|=
name|ImmutableSortedSet
operator|.
name|reverseOrder
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|reverse
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
DECL|class|SuperComparableExample
specifier|private
specifier|static
class|class
name|SuperComparableExample
extends|extends
name|SelfComparableExample
block|{}
DECL|method|testBuilderGenerics_SuperComparable ()
specifier|public
name|void
name|testBuilderGenerics_SuperComparable
parameter_list|()
block|{
comment|// testing simple creation
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|SuperComparableExample
argument_list|>
name|natural
init|=
name|ImmutableSortedSet
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|natural
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|SuperComparableExample
argument_list|>
name|reverse
init|=
name|ImmutableSortedSet
operator|.
name|reverseOrder
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|reverse
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"internals"
argument_list|)
DECL|method|testControlsArraySize ()
specifier|public
name|void
name|testControlsArraySize
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|RegularImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|(
name|RegularImmutableSortedSet
argument_list|<
name|String
argument_list|>
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegularImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|(
name|RegularImmutableList
argument_list|<
name|String
argument_list|>
operator|)
name|set
operator|.
name|elements
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|array
operator|.
name|length
operator|<=
literal|2
operator|*
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"internals"
argument_list|)
DECL|method|testReusedBuilder ()
specifier|public
name|void
name|testReusedBuilder
parameter_list|()
block|{
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|RegularImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|(
name|RegularImmutableSortedSet
argument_list|<
name|String
argument_list|>
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegularImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|(
name|RegularImmutableList
argument_list|<
name|String
argument_list|>
operator|)
name|set
operator|.
name|elements
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|array
operator|!=
name|builder
operator|.
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

