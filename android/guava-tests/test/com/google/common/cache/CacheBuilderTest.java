begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|constantLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|identityLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|countingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|nullRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|queuingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingWeighers
operator|.
name|constantWeigher
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|CountingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|QueuingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for CacheBuilder. */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|CacheBuilderTest
specifier|public
class|class
name|CacheBuilderTest
extends|extends
name|TestCase
block|{
DECL|method|testNewBuilder ()
specifier|public
name|void
name|testNewBuilder
parameter_list|()
block|{
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|loader
init|=
name|constantLoader
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|countingRemovalListener
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitialCapacity_negative ()
specifier|public
name|void
name|testInitialCapacity_negative
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|initialCapacity
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInitialCapacity_setTwice ()
specifier|public
name|void
name|testInitialCapacity_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|initialCapacity
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// CacheTesting
DECL|method|testInitialCapacity_small ()
specifier|public
name|void
name|testInitialCapacity_small
parameter_list|()
block|{
name|LoadingCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|LocalCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|CacheTesting
operator|.
name|toLocalCache
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|segments
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|segments
index|[
literal|0
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|segments
index|[
literal|1
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|segments
index|[
literal|2
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|segments
index|[
literal|3
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// CacheTesting
DECL|method|testInitialCapacity_smallest ()
specifier|public
name|void
name|testInitialCapacity_smallest
parameter_list|()
block|{
name|LoadingCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|LocalCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|CacheTesting
operator|.
name|toLocalCache
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|segments
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// 1 is as low as it goes, not 0. it feels dirty to know this/test this.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|segments
index|[
literal|0
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|segments
index|[
literal|1
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|segments
index|[
literal|2
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|segments
index|[
literal|3
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitialCapacity_large ()
specifier|public
name|void
name|testInitialCapacity_large
parameter_list|()
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// that the builder didn't blow up is enough;
comment|// don't actually create this monster!
block|}
DECL|method|testConcurrencyLevel_zero ()
specifier|public
name|void
name|testConcurrencyLevel_zero
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testConcurrencyLevel_setTwice ()
specifier|public
name|void
name|testConcurrencyLevel_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// CacheTesting
DECL|method|testConcurrencyLevel_small ()
specifier|public
name|void
name|testConcurrencyLevel_small
parameter_list|()
block|{
name|LoadingCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|LocalCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|CacheTesting
operator|.
name|toLocalCache
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|segments
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrencyLevel_large ()
specifier|public
name|void
name|testConcurrencyLevel_large
parameter_list|()
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// don't actually build this beast
block|}
DECL|method|testMaximumSize_negative ()
specifier|public
name|void
name|testMaximumSize_negative
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|maximumSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMaximumSize_setTwice ()
specifier|public
name|void
name|testMaximumSize_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|maximumSize
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// maximumWeight
DECL|method|testMaximumSize_andWeight ()
specifier|public
name|void
name|testMaximumSize_andWeight
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|maximumWeight
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// maximumWeight
DECL|method|testMaximumWeight_negative ()
specifier|public
name|void
name|testMaximumWeight_negative
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|maximumWeight
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// maximumWeight
DECL|method|testMaximumWeight_setTwice ()
specifier|public
name|void
name|testMaximumWeight_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|maximumWeight
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|builder
operator|.
name|maximumSize
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// maximumWeight
DECL|method|testMaximumWeight_withoutWeigher ()
specifier|public
name|void
name|testMaximumWeight_withoutWeigher
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// weigher
DECL|method|testWeigher_withoutMaximumWeight ()
specifier|public
name|void
name|testWeigher_withoutMaximumWeight
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weigher
argument_list|(
name|constantWeigher
argument_list|(
literal|42
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// weigher
DECL|method|testWeigher_withMaximumSize ()
specifier|public
name|void
name|testWeigher_withMaximumSize
parameter_list|()
block|{
try|try
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weigher
argument_list|(
name|constantWeigher
argument_list|(
literal|42
argument_list|)
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|1
argument_list|)
operator|.
name|weigher
argument_list|(
name|constantWeigher
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// weakKeys
DECL|method|testKeyStrengthSetTwice ()
specifier|public
name|void
name|testKeyStrengthSetTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder1
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
decl_stmt|;
try|try
block|{
name|builder1
operator|.
name|weakKeys
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// weakValues
DECL|method|testValueStrengthSetTwice ()
specifier|public
name|void
name|testValueStrengthSetTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder1
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
decl_stmt|;
try|try
block|{
name|builder1
operator|.
name|weakValues
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|builder1
operator|.
name|softValues
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder2
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
decl_stmt|;
try|try
block|{
name|builder2
operator|.
name|softValues
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|builder2
operator|.
name|weakValues
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTimeToLive_negative ()
specifier|public
name|void
name|testTimeToLive_negative
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|expireAfterWrite
argument_list|(
operator|-
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTimeToLive_small ()
specifier|public
name|void
name|testTimeToLive_small
parameter_list|()
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1
argument_list|,
name|NANOSECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// well, it didn't blow up.
block|}
DECL|method|testTimeToLive_setTwice ()
specifier|public
name|void
name|testTimeToLive_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|3600
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|expireAfterWrite
argument_list|(
literal|3600
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTimeToIdle_negative ()
specifier|public
name|void
name|testTimeToIdle_negative
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|expireAfterAccess
argument_list|(
operator|-
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTimeToIdle_small ()
specifier|public
name|void
name|testTimeToIdle_small
parameter_list|()
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|1
argument_list|,
name|NANOSECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// well, it didn't blow up.
block|}
DECL|method|testTimeToIdle_setTwice ()
specifier|public
name|void
name|testTimeToIdle_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|3600
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|expireAfterAccess
argument_list|(
literal|3600
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTimeToIdleAndToLive ()
specifier|public
name|void
name|testTimeToIdleAndToLive
parameter_list|()
block|{
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1
argument_list|,
name|NANOSECONDS
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|1
argument_list|,
name|NANOSECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// well, it didn't blow up.
block|}
annotation|@
name|GwtIncompatible
comment|// refreshAfterWrite
DECL|method|testRefresh_zero ()
specifier|public
name|void
name|testRefresh_zero
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|refreshAfterWrite
argument_list|(
literal|0
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// refreshAfterWrite
DECL|method|testRefresh_setTwice ()
specifier|public
name|void
name|testRefresh_setTwice
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|refreshAfterWrite
argument_list|(
literal|3600
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same value is not allowed
name|builder
operator|.
name|refreshAfterWrite
argument_list|(
literal|3600
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTicker_setTwice ()
specifier|public
name|void
name|testTicker_setTwice
parameter_list|()
block|{
name|Ticker
name|testTicker
init|=
name|Ticker
operator|.
name|systemTicker
argument_list|()
decl_stmt|;
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|ticker
argument_list|(
name|testTicker
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same instance is not allowed
name|builder
operator|.
name|ticker
argument_list|(
name|testTicker
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testRemovalListener_setTwice ()
specifier|public
name|void
name|testRemovalListener_setTwice
parameter_list|()
block|{
name|RemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|testListener
init|=
name|nullRemovalListener
argument_list|()
decl_stmt|;
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|testListener
argument_list|)
decl_stmt|;
try|try
block|{
comment|// even to the same instance is not allowed
name|builder
operator|=
name|builder
operator|.
name|removalListener
argument_list|(
name|testListener
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testValuesIsNotASet ()
specifier|public
name|void
name|testValuesIsNotASet
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
operator|instanceof
name|Set
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// CacheTesting
DECL|method|testNullCache ()
specifier|public
name|void
name|testNullCache
parameter_list|()
block|{
name|CountingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|nullCache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|0
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nullCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|nullCache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nullCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|checkEmpty
argument_list|(
name|nullCache
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// QueuingRemovalListener
DECL|method|testRemovalNotification_clear ()
specifier|public
name|void
name|testRemovalNotification_clear
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// If a clear() happens while a computation is pending, we should not get a removal
comment|// notification.
specifier|final
name|AtomicBoolean
name|shouldWait
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|computingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computingFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|shouldWait
operator|.
name|get
argument_list|()
condition|)
block|{
name|computingLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
block|}
decl_stmt|;
name|QueuingRemovalListener
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|computingFunction
argument_list|)
decl_stmt|;
comment|// seed the map, so its segment's count> 0
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|shouldWait
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|computationStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|computationComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|computationStarted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|computationComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for the computingEntry to be created
name|computationStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
comment|// let the computation proceed
name|computingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// don't check cache.size() until we know the get("b") call is complete
name|computationComplete
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// At this point, the listener should be holding the seed value (a -> a), and the map should
comment|// contain the computed value (b -> b), since the clear() happened before the computation
comment|// completed.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notification
init|=
name|listener
operator|.
name|remove
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// "Basher tests", where we throw a bunch of stuff at a LoadingCache and check basic invariants.
comment|/**    * This is a less carefully-controlled version of {@link #testRemovalNotification_clear} - this is    * a black-box test that tries to create lots of different thread-interleavings, and asserts that    * each computation is affected by a call to {@code clear()} (and therefore gets passed to the    * removal listener), or else is not affected by the {@code clear()} (and therefore exists in the    * cache afterward).    */
annotation|@
name|GwtIncompatible
comment|// QueuingRemovalListener
DECL|method|testRemovalNotification_clear_basher ()
specifier|public
name|void
name|testRemovalNotification_clear_basher
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// If a clear() happens close to the end of computation, one of two things should happen:
comment|// - computation ends first: the removal listener is called, and the cache does not contain the
comment|//   key/value pair
comment|// - clear() happens first: the removal listener is not called, and the cache contains the pair
name|AtomicBoolean
name|computationShouldWait
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|CountDownLatch
name|computationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QueuingRemovalListener
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|concurrencyLevel
argument_list|(
literal|20
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|DelayingIdentityLoader
argument_list|<
name|String
argument_list|>
argument_list|(
name|computationShouldWait
argument_list|,
name|computationLatch
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|nThreads
init|=
literal|100
decl_stmt|;
name|int
name|nTasks
init|=
literal|1000
decl_stmt|;
name|int
name|nSeededEntries
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedKeys
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|nTasks
operator|+
name|nSeededEntries
argument_list|)
decl_stmt|;
comment|// seed the map, so its segments have a count>0; otherwise, clear() won't visit the in-progress
comment|// entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSeededEntries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
literal|"b"
operator|+
name|i
decl_stmt|;
name|cache
operator|.
name|getUnchecked
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|computationShouldWait
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|computedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|tasksFinished
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nTasks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTasks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
init|=
literal|"a"
operator|+
name|i
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|computedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|tasksFinished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|computationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// let some computations complete
while|while
condition|(
name|computedCount
operator|.
name|get
argument_list|()
operator|<
name|nThreads
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|tasksFinished
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Check all of the removal notifications we received: they should have had correctly-associated
comment|// keys and values. (An earlier bug saw removal notifications for in-progress computations,
comment|// which had real keys with null values.)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removalNotifications
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notification
range|:
name|listener
control|)
block|{
name|removalNotifications
operator|.
name|put
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected key/value pair passed to removalListener"
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All of the seed values should have been visible, so we should have gotten removal
comment|// notifications for all of them.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSeededEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"b"
operator|+
name|i
argument_list|,
name|removalNotifications
operator|.
name|get
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Each of the values added to the map should either still be there, or have seen a removal
comment|// notification.
name|assertEquals
argument_list|(
name|expectedKeys
argument_list|,
name|Sets
operator|.
name|union
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|removalNotifications
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|intersection
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|removalNotifications
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls get() repeatedly from many different threads, and tests that all of the removed entries    * (removed because of size limits or expiration) trigger appropriate removal notifications.    */
annotation|@
name|GwtIncompatible
comment|// QueuingRemovalListener
DECL|method|testRemovalNotification_get_basher ()
specifier|public
name|void
name|testRemovalNotification_get_basher
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|nTasks
init|=
literal|1000
decl_stmt|;
name|int
name|nThreads
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|getsPerTask
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|nUniqueKeys
init|=
literal|10000
decl_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// Randoms.insecureRandom();
name|QueuingRemovalListener
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removalListener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|computeCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|exceptionCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|computeNullCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|countingIdentityLoader
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|behavior
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|behavior
operator|==
literal|0
condition|)
block|{
comment|// throw an exception
name|exceptionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fake exception for test"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|behavior
operator|==
literal|1
condition|)
block|{
comment|// return null
name|computeNullCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|behavior
operator|==
literal|2
condition|)
block|{
comment|// slight delay before returning
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|computeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|key
return|;
block|}
else|else
block|{
name|computeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|2
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|100
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|5000
argument_list|)
operator|.
name|build
argument_list|(
name|countingIdentityLoader
argument_list|)
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTasks
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|getsPerTask
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"key"
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|nUniqueKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
block|}
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|300
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Since we're not doing any more cache operations, and the cache only expires/evicts when doing
comment|// other operations, the cache and the removal queue won't change from this point on.
comment|// Verify that each received removal notification was valid
for|for
control|(
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notification
range|:
name|removalListener
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid removal notification"
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|removalListener
operator|.
name|size
argument_list|()
argument_list|,
name|stats
operator|.
name|evictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeCount
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exceptionCount
operator|.
name|get
argument_list|()
operator|+
name|computeNullCount
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// each computed value is still in the cache, or was passed to the removal listener
name|assertEquals
argument_list|(
name|computeCount
operator|.
name|get
argument_list|()
argument_list|,
name|cache
operator|.
name|size
argument_list|()
operator|+
name|removalListener
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullParameters ()
specifier|public
name|void
name|testNullParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// CacheTesting
DECL|method|testSizingDefaults ()
specifier|public
name|void
name|testSizingDefaults
parameter_list|()
block|{
name|LoadingCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|LocalCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|CacheTesting
operator|.
name|toLocalCache
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|segments
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// concurrency level
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|segments
index|[
literal|0
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// capacity / conc level
block|}
annotation|@
name|GwtIncompatible
comment|// CountDownLatch
DECL|class|DelayingIdentityLoader
specifier|static
specifier|final
class|class
name|DelayingIdentityLoader
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CacheLoader
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
block|{
DECL|field|shouldWait
specifier|private
specifier|final
name|AtomicBoolean
name|shouldWait
decl_stmt|;
DECL|field|delayLatch
specifier|private
specifier|final
name|CountDownLatch
name|delayLatch
decl_stmt|;
DECL|method|DelayingIdentityLoader (AtomicBoolean shouldWait, CountDownLatch delayLatch)
name|DelayingIdentityLoader
parameter_list|(
name|AtomicBoolean
name|shouldWait
parameter_list|,
name|CountDownLatch
name|delayLatch
parameter_list|)
block|{
name|this
operator|.
name|shouldWait
operator|=
name|shouldWait
expr_stmt|;
name|this
operator|.
name|delayLatch
operator|=
name|delayLatch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (T key)
specifier|public
name|T
name|load
parameter_list|(
name|T
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|shouldWait
operator|.
name|get
argument_list|()
condition|)
block|{
name|delayLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
block|}
block|}
end_class

end_unit

