begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALLOWED_ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALL_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALL_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|EMPTY_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|EMPTY_STATS_VARARGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_STATS_VARARGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_INTEGER_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_INTEGER_VALUES_POPULATION_VARIANCE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_INTEGER_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_LONG_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_LONG_VALUES_POPULATION_VARIANCE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_LONG_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LARGE_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_STATS_ITERATOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_STATS_SNAPSHOT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_ITERATOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_SNAPSHOT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_VARARGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|NEGATIVE_INFINITY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|NaN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|POSITIVE_INFINITY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|sqrt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ManyValues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Stats}. This tests instances created by both {@link Stats#of} and {@link  * StatsAccumulator#snapshot}.  *  * @author Pete Gillin  */
end_comment

begin_class
DECL|class|StatsTest
specifier|public
class|class
name|StatsTest
extends|extends
name|TestCase
block|{
DECL|method|testCount ()
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EMPTY_STATS_VARARGS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|EMPTY_STATS_ITERABLE
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testMean ()
specifier|public
name|void
name|testMean
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|mean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|mean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NaN
argument_list|)
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an array, we test many combinations of finite
comment|// and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|double
name|mean
init|=
name|Stats
operator|.
name|of
argument_list|(
name|values
operator|.
name|asArray
argument_list|()
argument_list|)
operator|.
name|mean
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
operator|&&
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LARGE_VALUES_STATS
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|Double
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|of
argument_list|(
name|LARGE_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LARGE_INTEGER_VALUES_STATS
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|of
argument_list|(
name|LARGE_INTEGER_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LARGE_LONG_VALUES_STATS
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|of
argument_list|(
name|LARGE_LONG_VALUES_MEAN
argument_list|)
expr_stmt|;
block|}
DECL|method|testSum ()
specifier|public
name|void
name|testSum
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EMPTY_STATS_VARARGS
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|EMPTY_STATS_ITERABLE
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
operator|*
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
operator|*
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
operator|*
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
operator|*
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testPopulationVariance ()
specifier|public
name|void
name|testPopulationVariance
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|populationVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|populationVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NaN
argument_list|)
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an iterable, we test many combinations of
comment|// finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|double
name|populationVariance
init|=
name|Stats
operator|.
name|of
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|)
operator|.
name|populationVariance
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|populationVariance
argument_list|)
operator|.
name|named
argument_list|(
literal|"population variance of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|populationVariance
argument_list|)
operator|.
name|named
argument_list|(
literal|"population variance of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LARGE_INTEGER_VALUES_STATS
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|Integer
operator|.
name|MAX_VALUE
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|of
argument_list|(
name|LARGE_INTEGER_VALUES_POPULATION_VARIANCE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LARGE_LONG_VALUES_STATS
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|Long
operator|.
name|MAX_VALUE
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|of
argument_list|(
name|LARGE_LONG_VALUES_POPULATION_VARIANCE
argument_list|)
expr_stmt|;
block|}
DECL|method|testPopulationStandardDeviation ()
specifier|public
name|void
name|testPopulationStandardDeviation
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|populationStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|populationStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSampleVariance ()
specifier|public
name|void
name|testSampleVariance
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ONE_VALUE_STATS
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|INTEGER_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|INTEGER_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSampleStandardDeviation ()
specifier|public
name|void
name|testSampleStandardDeviation
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ONE_VALUE_STATS
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|INTEGER_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|INTEGER_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMax ()
specifier|public
name|void
name|testMax
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|max
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|max
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NaN
argument_list|)
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an iterator, we test many combinations of
comment|// finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|double
name|max
init|=
name|Stats
operator|.
name|of
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|max
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|max
argument_list|)
operator|.
name|named
argument_list|(
literal|"max of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|max
argument_list|)
operator|.
name|named
argument_list|(
literal|"max of "
operator|+
name|values
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|max
argument_list|)
operator|.
name|named
argument_list|(
literal|"max of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_SNAPSHOT
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
block|}
DECL|method|testMin ()
specifier|public
name|void
name|testMin
parameter_list|()
block|{
try|try
block|{
name|EMPTY_STATS_VARARGS
operator|.
name|min
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|EMPTY_STATS_ITERABLE
operator|.
name|min
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|ONE_VALUE_STATS
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|NaN
argument_list|)
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_STATS
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_VARARGS
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERATOR
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an accumulator snapshot, we test many
comment|// combinations of finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|min
init|=
name|accumulator
operator|.
name|snapshot
argument_list|()
operator|.
name|min
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|min
argument_list|)
operator|.
name|named
argument_list|(
literal|"min of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|min
argument_list|)
operator|.
name|named
argument_list|(
literal|"min of "
operator|+
name|values
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|min
argument_list|)
operator|.
name|named
argument_list|(
literal|"min of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_VARARGS
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|INTEGER_MANY_VALUES_STATS_ITERABLE
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_ITERATOR
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|LONG_MANY_VALUES_STATS_SNAPSHOT
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsAndHashCode ()
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|5.0
argument_list|)
argument_list|,
name|Stats
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|5.0
argument_list|)
argument_list|,
name|Stats
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|5.0
argument_list|)
argument_list|)
argument_list|,
name|Stats
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|5.0
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|5.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|5.0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|1.0
argument_list|,
literal|6.0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
literal|2.0
argument_list|,
literal|6.0
argument_list|,
literal|2.0
argument_list|,
literal|6.0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|Stats
argument_list|(
literal|5
argument_list|,
operator|-
literal|5.5
argument_list|,
literal|55.5
argument_list|,
operator|-
literal|5.55
argument_list|,
literal|5.55
argument_list|)
argument_list|,
operator|new
name|Stats
argument_list|(
literal|5
argument_list|,
operator|-
literal|5.5
argument_list|,
literal|55.5
argument_list|,
operator|-
literal|5.55
argument_list|,
literal|5.55
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|Stats
argument_list|(
literal|6
argument_list|,
operator|-
literal|5.5
argument_list|,
literal|55.5
argument_list|,
operator|-
literal|5.55
argument_list|,
literal|5.55
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|Stats
argument_list|(
literal|5
argument_list|,
operator|-
literal|5.6
argument_list|,
literal|55.5
argument_list|,
operator|-
literal|5.55
argument_list|,
literal|5.55
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|Stats
argument_list|(
literal|5
argument_list|,
operator|-
literal|5.5
argument_list|,
literal|55.6
argument_list|,
operator|-
literal|5.55
argument_list|,
literal|5.55
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|Stats
argument_list|(
literal|5
argument_list|,
operator|-
literal|5.5
argument_list|,
literal|55.5
argument_list|,
operator|-
literal|5.56
argument_list|,
literal|5.55
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|Stats
argument_list|(
literal|5
argument_list|,
operator|-
literal|5.5
argument_list|,
literal|55.5
argument_list|,
operator|-
literal|5.55
argument_list|,
literal|5.56
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testSerializable ()
specifier|public
name|void
name|testSerializable
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EMPTY_STATS_VARARGS
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Stats{count=0}"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Stats{count="
operator|+
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|count
argument_list|()
operator|+
literal|", mean="
operator|+
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|mean
argument_list|()
operator|+
literal|", populationStandardDeviation="
operator|+
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|populationStandardDeviation
argument_list|()
operator|+
literal|", min="
operator|+
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|min
argument_list|()
operator|+
literal|", max="
operator|+
name|MANY_VALUES_STATS_ITERABLE
operator|.
name|max
argument_list|()
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMeanOf ()
specifier|public
name|void
name|testMeanOf
parameter_list|()
block|{
try|try
block|{
name|Stats
operator|.
name|meanOf
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Stats
operator|.
name|meanOf
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Number
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|ONE_VALUE
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|NaN
argument_list|)
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|TWO_VALUES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an array, we test many combinations of finite
comment|// and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|double
name|mean
init|=
name|Stats
operator|.
name|meanOf
argument_list|(
name|values
operator|.
name|asArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
operator|&&
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|mean
argument_list|)
operator|.
name|named
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|MANY_VALUES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|MANY_VALUES
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|INTEGER_MANY_VALUES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|Ints
operator|.
name|toArray
argument_list|(
name|INTEGER_MANY_VALUES
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|LONG_MANY_VALUES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Stats
operator|.
name|meanOf
argument_list|(
name|Longs
operator|.
name|toArray
argument_list|(
name|LONG_MANY_VALUES
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
block|}
DECL|method|testToByteArrayAndFromByteArrayRoundTrip ()
specifier|public
name|void
name|testToByteArrayAndFromByteArrayRoundTrip
parameter_list|()
block|{
for|for
control|(
name|Stats
name|stats
range|:
name|ALL_STATS
control|)
block|{
name|byte
index|[]
name|statsByteArray
init|=
name|stats
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Round trip to byte array and back
name|assertThat
argument_list|(
name|Stats
operator|.
name|fromByteArray
argument_list|(
name|statsByteArray
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromByteArray_withNullInputThrowsNullPointerException ()
specifier|public
name|void
name|testFromByteArray_withNullInputThrowsNullPointerException
parameter_list|()
block|{
try|try
block|{
name|Stats
operator|.
name|fromByteArray
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromByteArray_withEmptyArrayInputThrowsIllegalArgumentException ()
specifier|public
name|void
name|testFromByteArray_withEmptyArrayInputThrowsIllegalArgumentException
parameter_list|()
block|{
try|try
block|{
name|Stats
operator|.
name|fromByteArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromByteArray_withTooLongArrayInputThrowsIllegalArgumentException ()
specifier|public
name|void
name|testFromByteArray_withTooLongArrayInputThrowsIllegalArgumentException
parameter_list|()
block|{
name|byte
index|[]
name|buffer
init|=
name|MANY_VALUES_STATS_VARARGS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tooLongByteArray
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|buffer
operator|.
name|length
operator|+
literal|2
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|put
argument_list|(
name|buffer
argument_list|)
operator|.
name|putChar
argument_list|(
literal|'.'
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
try|try
block|{
name|Stats
operator|.
name|fromByteArray
argument_list|(
name|tooLongByteArray
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromByteArrayWithTooShortArrayInputThrowsIllegalArgumentException ()
specifier|public
name|void
name|testFromByteArrayWithTooShortArrayInputThrowsIllegalArgumentException
parameter_list|()
block|{
name|byte
index|[]
name|buffer
init|=
name|MANY_VALUES_STATS_VARARGS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tooShortByteArray
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|buffer
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|Stats
operator|.
name|BYTES
operator|-
literal|1
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
try|try
block|{
name|Stats
operator|.
name|fromByteArray
argument_list|(
name|tooShortByteArray
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

