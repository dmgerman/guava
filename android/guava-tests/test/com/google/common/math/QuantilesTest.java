begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|Quantiles
operator|.
name|median
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|Quantiles
operator|.
name|percentiles
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|Quantiles
operator|.
name|quartiles
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|NEGATIVE_INFINITY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|NaN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|POSITIVE_INFINITY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|FLOOR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|Quantiles
operator|.
name|ScaleAndIndexes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Doubles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Correspondence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Correspondence
operator|.
name|BinaryPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Quantiles}.  *  * @author Pete Gillin  */
end_comment

begin_class
DECL|class|QuantilesTest
specifier|public
class|class
name|QuantilesTest
extends|extends
name|TestCase
block|{
comment|/*    * Since Quantiles provides a fluent-style API, each test covers a chain of methods resulting in    * the computation of one or more quantiles (or in an error) rather than individual methods. The    * tests are divided into three sections:    * 1. Tests on a hardcoded dataset for chains starting with median(), quartiles(), and scale(10);    * 2. Tests on hardcoded datasets include non-finite values for chains starting with scale(10);    * 3. Tests on a mechanically generated dataset for chains starting with percentiles();    * 4. Tests of illegal usages of the API.    */
comment|/*    * Covering every combination would lead to an explosion in the number of tests. So we cover only:    * - median with compute taking a double-collection and with computeInPlace;    * - quartiles with index and with indexes taking int-varargs, and with compute taking a    *   double-collection and with computeInPlace;    * - scale with index and with indexes taking int-varargs, and with all overloads of compute    *   taking a double-collection and with computeInPlace;    * - scale with indexes taking integer-collection with compute taking a double-collection and with    *   computeInPlace;    * - (except that, for non-finite values, we don't do all combinations exhaustively);    * - percentiles with index and with indexes taking int-varargs, and with compute taking a    *   double-collection and with computeInPlace.    */
DECL|field|ALLOWED_ERROR
specifier|private
specifier|static
specifier|final
name|double
name|ALLOWED_ERROR
init|=
literal|1.0e-10
decl_stmt|;
comment|/**    * A {@link Correspondence} which accepts finite values within {@link #ALLOWED_ERROR} of each    * other.    */
DECL|field|FINITE_QUANTILE_CORRESPONDENCE
specifier|private
specifier|static
specifier|final
name|Correspondence
argument_list|<
name|Number
argument_list|,
name|Number
argument_list|>
name|FINITE_QUANTILE_CORRESPONDENCE
init|=
name|Correspondence
operator|.
name|tolerance
argument_list|(
name|ALLOWED_ERROR
argument_list|)
decl_stmt|;
comment|/**    * A {@link Correspondence} which accepts either finite values within {@link #ALLOWED_ERROR} of    * each other or identical non-finite values.    */
DECL|field|QUANTILE_CORRESPONDENCE
specifier|private
specifier|static
specifier|final
name|Correspondence
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|QUANTILE_CORRESPONDENCE
init|=
name|Correspondence
operator|.
name|from
argument_list|(
operator|new
name|BinaryPredicate
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|CheckForNull
name|Double
name|actual
parameter_list|,
annotation|@
name|CheckForNull
name|Double
name|expected
parameter_list|)
block|{
comment|// Test for equality to allow non-finite values to match; otherwise, use the finite
comment|// test.
return|return
name|actual
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
operator|||
name|FINITE_QUANTILE_CORRESPONDENCE
operator|.
name|compare
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|"is identical to or "
operator|+
name|FINITE_QUANTILE_CORRESPONDENCE
argument_list|)
decl_stmt|;
comment|// 1. Tests on a hardcoded dataset for chains starting with median(), quartiles(), and scale(10):
comment|/** The squares of the 16 integers from 0 to 15, in an arbitrary order. */
DECL|field|SIXTEEN_SQUARES_DOUBLES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|SIXTEEN_SQUARES_DOUBLES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|25.0
argument_list|,
literal|100.0
argument_list|,
literal|0.0
argument_list|,
literal|144.0
argument_list|,
literal|9.0
argument_list|,
literal|121.0
argument_list|,
literal|4.0
argument_list|,
literal|225.0
argument_list|,
literal|169.0
argument_list|,
literal|64.0
argument_list|,
literal|49.0
argument_list|,
literal|16.0
argument_list|,
literal|36.0
argument_list|,
literal|1.0
argument_list|,
literal|81.0
argument_list|,
literal|196.0
argument_list|)
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_LONGS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Long
argument_list|>
name|SIXTEEN_SQUARES_LONGS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|25L
argument_list|,
literal|100L
argument_list|,
literal|0L
argument_list|,
literal|144L
argument_list|,
literal|9L
argument_list|,
literal|121L
argument_list|,
literal|4L
argument_list|,
literal|225L
argument_list|,
literal|169L
argument_list|,
literal|64L
argument_list|,
literal|49L
argument_list|,
literal|16L
argument_list|,
literal|36L
argument_list|,
literal|1L
argument_list|,
literal|81L
argument_list|,
literal|196L
argument_list|)
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_INTEGERS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|SIXTEEN_SQUARES_INTEGERS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|25
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|144
argument_list|,
literal|9
argument_list|,
literal|121
argument_list|,
literal|4
argument_list|,
literal|225
argument_list|,
literal|169
argument_list|,
literal|64
argument_list|,
literal|49
argument_list|,
literal|16
argument_list|,
literal|36
argument_list|,
literal|1
argument_list|,
literal|81
argument_list|,
literal|196
argument_list|)
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_MIN
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_MIN
init|=
literal|0.0
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_DECILE_1
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_DECILE_1
init|=
literal|0.5
operator|*
operator|(
literal|1.0
operator|+
literal|4.0
operator|)
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_QUARTILE_1
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_QUARTILE_1
init|=
literal|0.25
operator|*
literal|9.0
operator|+
literal|0.75
operator|*
literal|16.0
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_MEDIAN
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_MEDIAN
init|=
literal|0.5
operator|*
operator|(
literal|49.0
operator|+
literal|64.0
operator|)
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_QUARTILE_3
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_QUARTILE_3
init|=
literal|0.75
operator|*
literal|121.0
operator|+
literal|0.25
operator|*
literal|144.0
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_DECILE_8
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_DECILE_8
init|=
literal|144.0
decl_stmt|;
DECL|field|SIXTEEN_SQUARES_MAX
specifier|private
specifier|static
specifier|final
name|double
name|SIXTEEN_SQUARES_MAX
init|=
literal|225.0
decl_stmt|;
DECL|method|testMedian_compute_doubleCollection ()
specifier|public
name|void
name|testMedian_compute_doubleCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|median
argument_list|()
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_MEDIAN
argument_list|)
expr_stmt|;
block|}
DECL|method|testMedian_computeInPlace ()
specifier|public
name|void
name|testMedian_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|median
argument_list|()
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_MEDIAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuartiles_index_compute_doubleCollection ()
specifier|public
name|void
name|testQuartiles_index_compute_doubleCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|quartiles
argument_list|()
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_QUARTILE_1
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuartiles_index_computeInPlace ()
specifier|public
name|void
name|testQuartiles_index_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|quartiles
argument_list|()
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_QUARTILE_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuartiles_indexes_varargs_compute_doubleCollection ()
specifier|public
name|void
name|testQuartiles_indexes_varargs_compute_doubleCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|quartiles
argument_list|()
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
name|SIXTEEN_SQUARES_QUARTILE_1
argument_list|,
literal|3
argument_list|,
name|SIXTEEN_SQUARES_QUARTILE_3
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuartiles_indexes_varargs_computeInPlace ()
specifier|public
name|void
name|testQuartiles_indexes_varargs_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|quartiles
argument_list|()
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
name|SIXTEEN_SQUARES_QUARTILE_1
argument_list|,
literal|3
argument_list|,
name|SIXTEEN_SQUARES_QUARTILE_3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_doubleCollection ()
specifier|public
name|void
name|testScale_index_compute_doubleCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_longCollection ()
specifier|public
name|void
name|testScale_index_compute_longCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_LONGS
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_integerCollection ()
specifier|public
name|void
name|testScale_index_compute_integerCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_doubleVarargs ()
specifier|public
name|void
name|testScale_index_compute_doubleVarargs
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testScale_index_compute_longVarargs ()
specifier|public
name|void
name|testScale_index_compute_longVarargs
parameter_list|()
block|{
name|long
index|[]
name|dataset
init|=
name|Longs
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_LONGS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|SIXTEEN_SQUARES_LONGS
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_intVarargs ()
specifier|public
name|void
name|testScale_index_compute_intVarargs
parameter_list|()
block|{
name|int
index|[]
name|dataset
init|=
name|Ints
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_computeInPlace ()
specifier|public
name|void
name|testScale_index_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|SIXTEEN_SQUARES_DECILE_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_computeInPlace_explicitVarargs ()
specifier|public
name|void
name|testScale_index_computeInPlace_explicitVarargs
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|5
argument_list|)
operator|.
name|computeInPlace
argument_list|(
literal|78.9
argument_list|,
literal|12.3
argument_list|,
literal|45.6
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|45.6
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_doubleCollection ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection
parameter_list|()
block|{
comment|// Note that we specify index 1 twice, which by the method contract should be ignored.
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_doubleCollection_snapshotsIndexes ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection_snapshotsIndexes
parameter_list|()
block|{
comment|// This test is the same as testScale_indexes_varargs_compute_doubleCollection except that the
comment|// array of indexes to be calculated is modified between the calls to indexes and compute: since
comment|// the contract is that it is snapshotted, this shouldn't make any difference to the result.
name|int
index|[]
name|indexes
init|=
block|{
literal|0
block|,
literal|10
block|,
literal|5
block|,
literal|1
block|,
literal|8
block|,
literal|10
block|}
decl_stmt|;
name|ScaleAndIndexes
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
name|indexes
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
name|assertThat
argument_list|(
name|intermediate
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_largeVarargs_compute_doubleCollection ()
specifier|public
name|void
name|testScale_indexes_largeVarargs_compute_doubleCollection
parameter_list|()
block|{
name|int
name|scale
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|otherIndex
init|=
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
operator|)
operator|/
literal|3
decl_stmt|;
comment|// this divides exactly
comment|// For the otherIndex calculation, we have q=Integer.MAX_VALUE, k=(Integer.MAX_VALUE-1)/3, and
comment|// N=16. Therefore k*(N-1)/q = 5-5/Integer.MAX_VALUE, which has floor 4 and fractional part
comment|// (1-5/Integer.MAX_VALUE).
name|double
name|otherValue
init|=
literal|16.0
operator|*
literal|5.0
operator|/
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|25.0
operator|*
operator|(
literal|1.0
operator|-
literal|5.0
operator|/
name|Integer
operator|.
name|MAX_VALUE
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
name|scale
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
name|scale
argument_list|,
name|otherIndex
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
name|scale
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
name|otherIndex
argument_list|,
name|otherValue
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_longCollection ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_longCollection
parameter_list|()
block|{
comment|// Note that we specify index 1 twice, which by the method contract should be ignored.
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_LONGS
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_integerCollection ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_integerCollection
parameter_list|()
block|{
comment|// Note that we specify index 1 twice, which by the method contract should be ignored.
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_indexOrderIsMaintained ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_indexOrderIsMaintained
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_doubleVarargs ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleVarargs
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_longVarargs ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_longVarargs
parameter_list|()
block|{
name|long
index|[]
name|dataset
init|=
name|Longs
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_LONGS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|SIXTEEN_SQUARES_LONGS
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_intVarargs ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_intVarargs
parameter_list|()
block|{
name|int
index|[]
name|dataset
init|=
name|Ints
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|SIXTEEN_SQUARES_INTEGERS
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_computeInPlace ()
specifier|public
name|void
name|testScale_indexes_varargs_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_computeInPlace_explicitVarargs ()
specifier|public
name|void
name|testScale_indexes_varargs_computeInPlace_explicitVarargs
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|computeInPlace
argument_list|(
literal|78.9
argument_list|,
literal|12.3
argument_list|,
literal|45.6
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|12.3
argument_list|,
literal|10
argument_list|,
literal|78.9
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_collection_compute_doubleCollection ()
specifier|public
name|void
name|testScale_indexes_collection_compute_doubleCollection
parameter_list|()
block|{
comment|// Note that we specify index 1 twice, which by the method contract should be ignored.
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|compute
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_collection_computeInPlace ()
specifier|public
name|void
name|testScale_indexes_collection_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|SIXTEEN_SQUARES_MIN
argument_list|,
literal|10
argument_list|,
name|SIXTEEN_SQUARES_MAX
argument_list|,
literal|5
argument_list|,
name|SIXTEEN_SQUARES_MEDIAN
argument_list|,
literal|1
argument_list|,
name|SIXTEEN_SQUARES_DECILE_1
argument_list|,
literal|8
argument_list|,
name|SIXTEEN_SQUARES_DECILE_8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|SIXTEEN_SQUARES_DOUBLES
argument_list|)
expr_stmt|;
block|}
comment|// 2. Tests on hardcoded datasets include non-finite values for chains starting with scale(10):
DECL|field|ONE_TO_FIVE_AND_POSITIVE_INFINITY
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|ONE_TO_FIVE_AND_POSITIVE_INFINITY
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3.0
argument_list|,
literal|5.0
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
literal|1.0
argument_list|,
literal|4.0
argument_list|,
literal|2.0
argument_list|)
decl_stmt|;
DECL|field|ONE_TO_FIVE_AND_NEGATIVE_INFINITY
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|ONE_TO_FIVE_AND_NEGATIVE_INFINITY
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3.0
argument_list|,
literal|5.0
argument_list|,
name|NEGATIVE_INFINITY
argument_list|,
literal|1.0
argument_list|,
literal|4.0
argument_list|,
literal|2.0
argument_list|)
decl_stmt|;
DECL|field|NEGATIVE_INFINITY_AND_FIVE_POSITIVE_INFINITIES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|NEGATIVE_INFINITY_AND_FIVE_POSITIVE_INFINITIES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|POSITIVE_INFINITY
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
name|NEGATIVE_INFINITY
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
DECL|field|ONE_TO_FIVE_AND_NAN
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|ONE_TO_FIVE_AND_NAN
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3.0
argument_list|,
literal|5.0
argument_list|,
name|NaN
argument_list|,
literal|1.0
argument_list|,
literal|4.0
argument_list|,
literal|2.0
argument_list|)
decl_stmt|;
DECL|method|testScale_indexes_varargs_compute_doubleCollection_positiveInfinity ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection_positiveInfinity
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
operator|.
name|compute
argument_list|(
name|ONE_TO_FIVE_AND_POSITIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|1.0
argument_list|,
literal|1
argument_list|,
literal|1.5
argument_list|,
literal|2
argument_list|,
literal|2.0
argument_list|,
literal|8
argument_list|,
literal|5.0
argument_list|,
literal|9
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
comment|// interpolating between 5.0 and POSITIVE_INFNINITY
literal|10
argument_list|,
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_doubleCollection_positiveInfinity ()
specifier|public
name|void
name|testScale_index_compute_doubleCollection_positiveInfinity
parameter_list|()
block|{
comment|// interpolating between 5.0 and POSITIVE_INFNINITY
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|9
argument_list|)
operator|.
name|compute
argument_list|(
name|ONE_TO_FIVE_AND_POSITIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_doubleCollection_negativeInfinity ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection_negativeInfinity
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
operator|.
name|compute
argument_list|(
name|ONE_TO_FIVE_AND_NEGATIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|NEGATIVE_INFINITY
argument_list|,
literal|1
argument_list|,
name|NEGATIVE_INFINITY
argument_list|,
comment|// interpolating between NEGATIVE_INFNINITY and 1.0
literal|2
argument_list|,
literal|1.0
argument_list|,
literal|8
argument_list|,
literal|4.0
argument_list|,
literal|9
argument_list|,
literal|4.5
argument_list|,
literal|10
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_doubleCollection_negativeInfinity ()
specifier|public
name|void
name|testScale_index_compute_doubleCollection_negativeInfinity
parameter_list|()
block|{
comment|// interpolating between NEGATIVE_INFNINITY and 1.0
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|1
argument_list|)
operator|.
name|compute
argument_list|(
name|ONE_TO_FIVE_AND_NEGATIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_doubleCollection_bothInfinities ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection_bothInfinities
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
operator|.
name|compute
argument_list|(
name|NEGATIVE_INFINITY_AND_FIVE_POSITIVE_INFINITIES
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|NEGATIVE_INFINITY
argument_list|,
literal|1
argument_list|,
name|NaN
argument_list|,
comment|// interpolating between NEGATIVE_ and POSITIVE_INFINITY values
literal|2
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
literal|8
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
literal|9
argument_list|,
name|POSITIVE_INFINITY
argument_list|,
comment|// interpolating between two POSITIVE_INFINITY values
literal|10
argument_list|,
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_indexes_varargs_compute_doubleCollection_nan ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection_nan
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
operator|.
name|compute
argument_list|(
name|ONE_TO_FIVE_AND_NAN
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
name|NaN
argument_list|,
literal|1
argument_list|,
name|NaN
argument_list|,
literal|2
argument_list|,
name|NaN
argument_list|,
literal|8
argument_list|,
name|NaN
argument_list|,
literal|9
argument_list|,
name|NaN
argument_list|,
literal|10
argument_list|,
name|NaN
argument_list|)
expr_stmt|;
block|}
DECL|method|testScale_index_compute_doubleCollection_nan ()
specifier|public
name|void
name|testScale_index_compute_doubleCollection_nan
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|5
argument_list|)
operator|.
name|compute
argument_list|(
name|ONE_TO_FIVE_AND_NAN
argument_list|)
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
comment|// 3. Tests on a mechanically generated dataset for chains starting with percentiles():
DECL|field|PSEUDORANDOM_DATASET_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PSEUDORANDOM_DATASET_SIZE
init|=
literal|9951
decl_stmt|;
DECL|field|PSEUDORANDOM_DATASET
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|PSEUDORANDOM_DATASET
init|=
name|generatePseudorandomDataset
argument_list|()
decl_stmt|;
DECL|field|PSEUDORANDOM_DATASET_SORTED
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|PSEUDORANDOM_DATASET_SORTED
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|immutableSortedCopy
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
decl_stmt|;
DECL|method|generatePseudorandomDataset ()
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|generatePseudorandomDataset
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|2211275185798966364L
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
name|largeDatasetBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PSEUDORANDOM_DATASET_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|largeDatasetBuilder
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextGaussian
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|largeDatasetBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|expectedLargeDatasetPercentile (int index)
specifier|private
specifier|static
name|double
name|expectedLargeDatasetPercentile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// We have q=100, k=index, and N=9951. Therefore k*(N-1)/q is 99.5*index. If index is even, that
comment|// is an integer 199*index/2. If index is odd, that is halfway between floor(199*index/2) and
comment|// ceil(199*index/2).
if|if
condition|(
name|index
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|int
name|position
init|=
name|IntMath
operator|.
name|divide
argument_list|(
literal|199
operator|*
name|index
argument_list|,
literal|2
argument_list|,
name|UNNECESSARY
argument_list|)
decl_stmt|;
return|return
name|PSEUDORANDOM_DATASET_SORTED
operator|.
name|get
argument_list|(
name|position
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|positionFloor
init|=
name|IntMath
operator|.
name|divide
argument_list|(
literal|199
operator|*
name|index
argument_list|,
literal|2
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
name|int
name|positionCeil
init|=
name|IntMath
operator|.
name|divide
argument_list|(
literal|199
operator|*
name|index
argument_list|,
literal|2
argument_list|,
name|CEILING
argument_list|)
decl_stmt|;
name|double
name|lowerValue
init|=
name|PSEUDORANDOM_DATASET_SORTED
operator|.
name|get
argument_list|(
name|positionFloor
argument_list|)
decl_stmt|;
name|double
name|upperValue
init|=
name|PSEUDORANDOM_DATASET_SORTED
operator|.
name|get
argument_list|(
name|positionCeil
argument_list|)
decl_stmt|;
return|return
operator|(
name|lowerValue
operator|+
name|upperValue
operator|)
operator|/
literal|2.0
return|;
block|}
block|}
DECL|method|testPercentiles_index_compute_doubleCollection ()
specifier|public
name|void
name|testPercentiles_index_compute_doubleCollection
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
literal|100
condition|;
name|index
operator|++
control|)
block|{
name|assertWithMessage
argument_list|(
literal|"quantile at index "
operator|+
name|index
argument_list|)
operator|.
name|that
argument_list|(
name|percentiles
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|compute
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|expectedLargeDatasetPercentile
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testPercentiles_index_computeInPlace ()
specifier|public
name|void
name|testPercentiles_index_computeInPlace
parameter_list|()
block|{
comment|// Assert that the computation gives the correct result for all possible percentiles.
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
literal|100
condition|;
name|index
operator|++
control|)
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"quantile at index "
operator|+
name|index
argument_list|)
operator|.
name|that
argument_list|(
name|percentiles
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|expectedLargeDatasetPercentile
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Assert that the dataset contains the same elements after the in-place computation (although
comment|// they may be reordered). We only do this for one index rather than for all indexes, as it is
comment|// quite expensives (quadratic in the size of PSEUDORANDOM_DATASET).
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|double
name|actual
init|=
name|percentiles
argument_list|()
operator|.
name|index
argument_list|(
literal|33
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercentiles_indexes_varargsPairs_compute_doubleCollection ()
specifier|public
name|void
name|testPercentiles_indexes_varargsPairs_compute_doubleCollection
parameter_list|()
block|{
for|for
control|(
name|int
name|index1
init|=
literal|0
init|;
name|index1
operator|<=
literal|100
condition|;
name|index1
operator|++
control|)
block|{
for|for
control|(
name|int
name|index2
init|=
literal|0
init|;
name|index2
operator|<=
literal|100
condition|;
name|index2
operator|++
control|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|expectedBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|expectedBuilder
operator|.
name|put
argument_list|(
name|index1
argument_list|,
name|expectedLargeDatasetPercentile
argument_list|(
name|index1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|index2
operator|!=
name|index1
condition|)
block|{
name|expectedBuilder
operator|.
name|put
argument_list|(
name|index2
argument_list|,
name|expectedLargeDatasetPercentile
argument_list|(
name|index2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|percentiles
argument_list|()
operator|.
name|indexes
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
operator|.
name|compute
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|expectedBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPercentiles_indexes_varargsAll_compute_doubleCollection ()
specifier|public
name|void
name|testPercentiles_indexes_varargsAll_compute_doubleCollection
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|expectedBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
literal|100
condition|;
name|index
operator|++
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|expectedBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|expectedLargeDatasetPercentile
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|770683168895677741L
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentiles
argument_list|()
operator|.
name|indexes
argument_list|(
name|Ints
operator|.
name|toArray
argument_list|(
name|indexes
argument_list|)
argument_list|)
operator|.
name|compute
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|expectedBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testPercentiles_indexes_varargsAll_computeInPlace ()
specifier|public
name|void
name|testPercentiles_indexes_varargsAll_computeInPlace
parameter_list|()
block|{
name|double
index|[]
name|dataset
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|expectedBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
literal|100
condition|;
name|index
operator|++
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|expectedBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|expectedLargeDatasetPercentile
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|770683168895677741L
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentiles
argument_list|()
operator|.
name|indexes
argument_list|(
name|Ints
operator|.
name|toArray
argument_list|(
name|indexes
argument_list|)
argument_list|)
operator|.
name|computeInPlace
argument_list|(
name|dataset
argument_list|)
argument_list|)
operator|.
name|comparingValuesUsing
argument_list|(
name|QUANTILE_CORRESPONDENCE
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|expectedBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataset
argument_list|)
operator|.
name|usingExactEquality
argument_list|()
operator|.
name|containsExactlyElementsIn
argument_list|(
name|PSEUDORANDOM_DATASET
argument_list|)
expr_stmt|;
block|}
comment|// 4. Tests of illegal usages of the API:
DECL|field|EMPTY_DATASET
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|EMPTY_DATASET
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|method|testScale_zero ()
specifier|public
name|void
name|testScale_zero
parameter_list|()
block|{
try|try
block|{
name|Quantiles
operator|.
name|scale
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_negative ()
specifier|public
name|void
name|testScale_negative
parameter_list|()
block|{
try|try
block|{
name|Quantiles
operator|.
name|scale
argument_list|(
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_negative ()
specifier|public
name|void
name|testScale_index_negative
parameter_list|()
block|{
name|Quantiles
operator|.
name|Scale
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|index
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_tooHigh ()
specifier|public
name|void
name|testScale_index_tooHigh
parameter_list|()
block|{
name|Quantiles
operator|.
name|Scale
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|index
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_negative ()
specifier|public
name|void
name|testScale_indexes_varargs_negative
parameter_list|()
block|{
name|Quantiles
operator|.
name|Scale
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_tooHigh ()
specifier|public
name|void
name|testScale_indexes_varargs_tooHigh
parameter_list|()
block|{
name|Quantiles
operator|.
name|Scale
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_collection_negative ()
specifier|public
name|void
name|testScale_indexes_collection_negative
parameter_list|()
block|{
name|Quantiles
operator|.
name|Scale
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|indexes
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_collection_tooHigh ()
specifier|public
name|void
name|testScale_indexes_collection_tooHigh
parameter_list|()
block|{
name|Quantiles
operator|.
name|Scale
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|indexes
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_compute_doubleCollection_empty ()
specifier|public
name|void
name|testScale_index_compute_doubleCollection_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndex
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
name|EMPTY_DATASET
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_compute_doubleVarargs_empty ()
specifier|public
name|void
name|testScale_index_compute_doubleVarargs_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndex
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_compute_longVarargs_empty ()
specifier|public
name|void
name|testScale_index_compute_longVarargs_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndex
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_compute_intVarargs_empty ()
specifier|public
name|void
name|testScale_index_compute_intVarargs_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndex
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_index_computeInPlace_empty ()
specifier|public
name|void
name|testScale_index_computeInPlace_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndex
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|index
argument_list|(
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|computeInPlace
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_compute_doubleCollection_empty ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleCollection_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndexes
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
name|EMPTY_DATASET
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_compute_doubleVarargs_empty ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_doubleVarargs_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndexes
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_compute_longVarargs_empty ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_longVarargs_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndexes
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_compute_intVarargs_empty ()
specifier|public
name|void
name|testScale_indexes_varargs_compute_intVarargs_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndexes
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|compute
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_varargs_computeInPlace_empty ()
specifier|public
name|void
name|testScale_indexes_varargs_computeInPlace_empty
parameter_list|()
block|{
name|Quantiles
operator|.
name|ScaleAndIndexes
name|intermediate
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|intermediate
operator|.
name|computeInPlace
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testScale_indexes_indexes_computeInPlace_empty ()
specifier|public
name|void
name|testScale_indexes_indexes_computeInPlace_empty
parameter_list|()
block|{
name|int
index|[]
name|emptyIndexes
init|=
block|{}
decl_stmt|;
try|try
block|{
name|Quantiles
operator|.
name|ScaleAndIndexes
name|unused
init|=
name|Quantiles
operator|.
name|scale
argument_list|(
literal|10
argument_list|)
operator|.
name|indexes
argument_list|(
name|emptyIndexes
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

