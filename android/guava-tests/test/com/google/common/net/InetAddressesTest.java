begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link InetAddresses}.  *  * @author Erik Kline  */
end_comment

begin_class
DECL|class|InetAddressesTest
specifier|public
class|class
name|InetAddressesTest
extends|extends
name|TestCase
block|{
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|InetAddresses
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringBogusInput ()
specifier|public
name|void
name|testForStringBogusInput
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|bogusInputs
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|"016.016.016.016"
argument_list|,
literal|"016.016.016"
argument_list|,
literal|"016.016"
argument_list|,
literal|"016"
argument_list|,
literal|"000.000.000.000"
argument_list|,
literal|"000"
argument_list|,
literal|"0x0a.0x0a.0x0a.0x0a"
argument_list|,
literal|"0x0a.0x0a.0x0a"
argument_list|,
literal|"0x0a.0x0a"
argument_list|,
literal|"0x0a"
argument_list|,
literal|"42.42.42.42.42"
argument_list|,
literal|"42.42.42"
argument_list|,
literal|"42.42"
argument_list|,
literal|"42"
argument_list|,
literal|"42..42.42"
argument_list|,
literal|"42..42.42.42"
argument_list|,
literal|"42.42.42.42."
argument_list|,
literal|"42.42.42.42..."
argument_list|,
literal|".42.42.42.42"
argument_list|,
literal|"...42.42.42.42"
argument_list|,
literal|"42.42.42.-0"
argument_list|,
literal|"42.42.42.+0"
argument_list|,
literal|"."
argument_list|,
literal|"..."
argument_list|,
literal|"bogus"
argument_list|,
literal|"bogus.com"
argument_list|,
literal|"192.168.0.1.com"
argument_list|,
literal|"12345.67899.-54321.-98765"
argument_list|,
literal|"257.0.0.0"
argument_list|,
literal|"42.42.42.-42"
argument_list|,
literal|"42.42.42.ab"
argument_list|,
literal|"3ffe::1.net"
argument_list|,
literal|"3ffe::1::1"
argument_list|,
literal|"1::2::3::4:5"
argument_list|,
literal|"::7:6:5:4:3:2:"
argument_list|,
comment|// should end with ":0"
literal|":6:5:4:3:2:1::"
argument_list|,
comment|// should begin with "0:"
literal|"2001::db:::1"
argument_list|,
literal|"FEDC:9878"
argument_list|,
literal|"+1.+2.+3.4"
argument_list|,
literal|"1.2.3.4e0"
argument_list|,
literal|"::7:6:5:4:3:2:1:0"
argument_list|,
comment|// too many parts
literal|"7:6:5:4:3:2:1:0::"
argument_list|,
comment|// too many parts
literal|"9:8:7:6:5:4:3::2:1"
argument_list|,
comment|// too many parts
literal|"0:1:2:3::4:5:6:7"
argument_list|,
comment|// :: must remove at least one 0.
literal|"3ffe:0:0:0:0:0:0:0:1"
argument_list|,
comment|// too many parts (9 instead of 8)
literal|"3ffe::10000"
argument_list|,
comment|// hextet exceeds 16 bits
literal|"3ffe::goog"
argument_list|,
literal|"3ffe::-0"
argument_list|,
literal|"3ffe::+0"
argument_list|,
literal|"3ffe::-1"
argument_list|,
literal|":"
argument_list|,
literal|":::"
argument_list|,
literal|"::1.2.3"
argument_list|,
literal|"::1.2.3.4.5"
argument_list|,
literal|"::1.2.3.4:"
argument_list|,
literal|"1.2.3.4::"
argument_list|,
literal|"2001:db8::1:"
argument_list|,
literal|":2001:db8::1"
argument_list|,
literal|":1:2:3:4:5:6:7"
argument_list|,
literal|"1:2:3:4:5:6:7:"
argument_list|,
literal|":1:2:3:4:5:6:"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bogusInput
range|:
name|bogusInputs
control|)
block|{
try|try
block|{
name|InetAddresses
operator|.
name|forString
argument_list|(
name|bogusInput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected for '"
operator|+
name|bogusInput
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|bogusInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|test3ff31 ()
specifier|public
name|void
name|test3ff31
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"3ffe:::1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
literal|"016.016.016.016"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringIPv4Input ()
specifier|public
name|void
name|testForStringIPv4Input
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|ipStr
init|=
literal|"192.168.0.1"
decl_stmt|;
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|InetAddress
name|ipv4Addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ipv4Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringIPv6Input ()
specifier|public
name|void
name|testForStringIPv6Input
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|ipStr
init|=
literal|"3ffe::1"
decl_stmt|;
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|InetAddress
name|ipv6Addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ipv6Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringIPv6EightColons ()
specifier|public
name|void
name|testForStringIPv6EightColons
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|eightColons
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"::7:6:5:4:3:2:1"
argument_list|,
literal|"::7:6:5:4:3:2:0"
argument_list|,
literal|"7:6:5:4:3:2:1::"
argument_list|,
literal|"0:6:5:4:3:2:1::"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ipString
range|:
name|eightColons
control|)
block|{
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|InetAddress
name|ipv6Addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ipv6Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConvertDottedQuadToHex ()
specifier|public
name|void
name|testConvertDottedQuadToHex
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ipStrings
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"7::0.128.0.127"
argument_list|,
literal|"7::0.128.0.128"
argument_list|,
literal|"7::128.128.0.127"
argument_list|,
literal|"7::0.128.128.127"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ipString
range|:
name|ipStrings
control|)
block|{
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|InetAddress
name|ipv6Addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ipv6Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// see https://github.com/google/guava/issues/2587
DECL|field|SCOPE_IDS
specifier|private
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|SCOPE_IDS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"eno1"
argument_list|,
literal|"en1"
argument_list|,
literal|"eth0"
argument_list|,
literal|"X"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"14"
argument_list|,
literal|"20"
argument_list|)
decl_stmt|;
DECL|method|testIPv4AddressWithScopeId ()
specifier|public
name|void
name|testIPv4AddressWithScopeId
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ipStrings
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"192.168.0.1"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ipString
range|:
name|ipStrings
control|)
block|{
for|for
control|(
name|String
name|scopeId
range|:
name|SCOPE_IDS
control|)
block|{
name|String
name|withScopeId
init|=
name|ipString
operator|+
literal|"%"
operator|+
name|scopeId
decl_stmt|;
name|assertFalse
argument_list|(
literal|"InetAddresses.isInetAddress("
operator|+
name|withScopeId
operator|+
literal|") should be false but was true"
argument_list|,
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|withScopeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDottedQuadAddressWithScopeId ()
specifier|public
name|void
name|testDottedQuadAddressWithScopeId
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ipStrings
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"7::0.128.0.127"
argument_list|,
literal|"7::0.128.0.128"
argument_list|,
literal|"7::128.128.0.127"
argument_list|,
literal|"7::0.128.128.127"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ipString
range|:
name|ipStrings
control|)
block|{
for|for
control|(
name|String
name|scopeId
range|:
name|SCOPE_IDS
control|)
block|{
name|String
name|withScopeId
init|=
name|ipString
operator|+
literal|"%"
operator|+
name|scopeId
decl_stmt|;
name|assertFalse
argument_list|(
literal|"InetAddresses.isInetAddress("
operator|+
name|withScopeId
operator|+
literal|") should be false but was true"
argument_list|,
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|withScopeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testIPv6AddressWithScopeId ()
specifier|public
name|void
name|testIPv6AddressWithScopeId
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ipStrings
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"0:0:0:0:0:0:0:1"
argument_list|,
literal|"fe80::a"
argument_list|,
literal|"fe80::1"
argument_list|,
literal|"fe80::2"
argument_list|,
literal|"fe80::42"
argument_list|,
literal|"fe80::3dd0:7f8e:57b7:34d5"
argument_list|,
literal|"fe80::71a3:2b00:ddd3:753f"
argument_list|,
literal|"fe80::8b2:d61e:e5c:b333"
argument_list|,
literal|"fe80::b059:65f4:e877:c40"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ipString
range|:
name|ipStrings
control|)
block|{
for|for
control|(
name|String
name|scopeId
range|:
name|SCOPE_IDS
control|)
block|{
name|String
name|withScopeId
init|=
name|ipString
operator|+
literal|"%"
operator|+
name|scopeId
decl_stmt|;
name|assertTrue
argument_list|(
literal|"InetAddresses.isInetAddress("
operator|+
name|withScopeId
operator|+
literal|") should be true but was false"
argument_list|,
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|withScopeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
name|withScopeId
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testToAddrStringIPv4 ()
specifier|public
name|void
name|testToAddrStringIPv4
parameter_list|()
block|{
comment|// Don't need to test IPv4 much; it just calls getHostAddress().
name|assertEquals
argument_list|(
literal|"1.2.3.4"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToAddrStringIPv6 ()
specifier|public
name|void
name|testToAddrStringIPv6
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1:2:3:4:5:6:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1:2:3:4:5:6:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001:0:0:4::8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0:0:4:0:0:0:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001::4:5:6:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0:0:4:5:6:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001:0:3:4:5:6:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0:3:4:5:6:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0:0:3::ffff"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:3:0:0:0:0:ffff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::4:0:0:0:ffff"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:4:0:0:0:ffff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::5:0:0:ffff"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:0:5:0:0:ffff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1::4:0:0:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1:0:0:4:0:0:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:0:0:0:0:0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:0:0:0:0:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001:658:22a:cafe::"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0658:022a:cafe::"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::102:304"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1.2.3.4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToUriStringIPv4 ()
specifier|public
name|void
name|testToUriStringIPv4
parameter_list|()
block|{
name|String
name|ipStr
init|=
literal|"1.2.3.4"
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1.2.3.4"
argument_list|,
name|InetAddresses
operator|.
name|toUriString
argument_list|(
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToUriStringIPv6 ()
specifier|public
name|void
name|testToUriStringIPv6
parameter_list|()
block|{
comment|// Unfortunately the InetAddress.toString() method for IPv6 addresses
comment|// does not collapse contiguous shorts of zeroes with the :: abbreviation.
name|String
name|ipStr
init|=
literal|"3ffe::1"
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[3ffe::1]"
argument_list|,
name|InetAddresses
operator|.
name|toUriString
argument_list|(
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForUriStringIPv4 ()
specifier|public
name|void
name|testForUriStringIPv4
parameter_list|()
block|{
name|Inet4Address
name|expected
init|=
operator|(
name|Inet4Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.168.1.1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"192.168.1.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForUriStringIPv6 ()
specifier|public
name|void
name|testForUriStringIPv6
parameter_list|()
block|{
name|Inet6Address
name|expected
init|=
operator|(
name|Inet6Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"3ffe:0:0:0:0:0:0:1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"[3ffe:0:0:0:0:0:0:1]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForUriStringIPv4Mapped ()
specifier|public
name|void
name|testForUriStringIPv4Mapped
parameter_list|()
block|{
name|Inet4Address
name|expected
init|=
operator|(
name|Inet4Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.0.2.1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"[::ffff:192.0.2.1]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsUriInetAddress ()
specifier|public
name|void
name|testIsUriInetAddress
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"192.168.1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"[3ffe:0:0:0:0:0:0:1]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"[::ffff:192.0.2.1]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"[192.168.1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"192.168.1.1]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"192.168.999.888"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"www.google.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"1:2e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"[3ffe:0:0:0:0:0:0:1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"3ffe:0:0:0:0:0:0:1]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"3ffe:0:0:0:0:0:0:1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isUriInetAddress
argument_list|(
literal|"::ffff:192.0.2.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForUriStringBad ()
specifier|public
name|void
name|testForUriStringBad
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"192.168.999.888"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"www.google.com"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"[1:2e]"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"[192.168.1.1]"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"192.168.1.1]"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"[192.168.1.1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"[3ffe:0:0:0:0:0:0:1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"3ffe:0:0:0:0:0:0:1]"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"3ffe:0:0:0:0:0:0:1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|InetAddresses
operator|.
name|forUriString
argument_list|(
literal|"::ffff:192.0.2.1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCompatIPv4Addresses ()
specifier|public
name|void
name|testCompatIPv4Addresses
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|nonCompatAddresses
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"3ffe::1"
argument_list|,
literal|"::"
argument_list|,
literal|"::1"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nonCompatAddress
range|:
name|nonCompatAddresses
control|)
block|{
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|nonCompatAddress
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isCompatIPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|InetAddresses
operator|.
name|getCompatIPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected for '"
operator|+
name|nonCompatAddress
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|validCompatAddresses
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"::1.2.3.4"
argument_list|,
literal|"::102:304"
argument_list|)
decl_stmt|;
name|String
name|compatStr
init|=
literal|"1.2.3.4"
decl_stmt|;
name|InetAddress
name|compat
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|compatStr
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|validCompatAddress
range|:
name|validCompatAddresses
control|)
block|{
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|validCompatAddress
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"checking '"
operator|+
name|validCompatAddress
operator|+
literal|"'"
argument_list|,
name|ip
operator|instanceof
name|Inet6Address
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checking '"
operator|+
name|validCompatAddress
operator|+
literal|"'"
argument_list|,
name|InetAddresses
operator|.
name|isCompatIPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking '"
operator|+
name|validCompatAddress
operator|+
literal|"'"
argument_list|,
name|compat
argument_list|,
name|InetAddresses
operator|.
name|getCompatIPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMappedIPv4Addresses ()
specifier|public
name|void
name|testMappedIPv4Addresses
parameter_list|()
throws|throws
name|UnknownHostException
block|{
comment|/*      * Verify that it is not possible to instantiate an Inet6Address      * from an "IPv4 mapped" IPv6 address.  Our String-based method can      * at least identify them, however.      */
name|String
name|mappedStr
init|=
literal|"::ffff:192.168.0.1"
decl_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
name|mappedStr
argument_list|)
argument_list|)
expr_stmt|;
name|InetAddress
name|mapped
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|mappedStr
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapped
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|Inet6Address
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"192.168.0.1"
argument_list|)
argument_list|,
name|mapped
argument_list|)
expr_stmt|;
comment|// check upper case
name|mappedStr
operator|=
literal|"::FFFF:192.168.0.1"
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
name|mappedStr
argument_list|)
argument_list|)
expr_stmt|;
name|mapped
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|mappedStr
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapped
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|Inet6Address
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"192.168.0.1"
argument_list|)
argument_list|,
name|mapped
argument_list|)
expr_stmt|;
name|mappedStr
operator|=
literal|"0:00:000:0000:0:ffff:1.2.3.4"
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
name|mappedStr
argument_list|)
argument_list|)
expr_stmt|;
name|mapped
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|mappedStr
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapped
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|Inet6Address
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|,
name|mapped
argument_list|)
expr_stmt|;
name|mappedStr
operator|=
literal|"::ffff:0102:0304"
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
name|mappedStr
argument_list|)
argument_list|)
expr_stmt|;
name|mapped
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|mappedStr
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapped
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|Inet6Address
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|,
name|mapped
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"::"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"::ffff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"::ffff:0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"::fffe:0:0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"::1:ffff:0:0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMappedIPv4Address
argument_list|(
literal|"192.0.2.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test6to4Addresses ()
specifier|public
name|void
name|test6to4Addresses
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|non6to4Addresses
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"::1.2.3.4"
argument_list|,
literal|"3ffe::1"
argument_list|,
literal|"::"
argument_list|,
literal|"::1"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|non6to4Address
range|:
name|non6to4Addresses
control|)
block|{
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|non6to4Address
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|is6to4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|InetAddresses
operator|.
name|get6to4IPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected for '"
operator|+
name|non6to4Address
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
name|String
name|valid6to4Address
init|=
literal|"2002:0102:0304::1"
decl_stmt|;
name|String
name|ipv4Str
init|=
literal|"1.2.3.4"
decl_stmt|;
name|InetAddress
name|ipv4
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipv4Str
argument_list|)
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|valid6to4Address
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|is6to4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ipv4
argument_list|,
name|InetAddresses
operator|.
name|get6to4IPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTeredoAddresses ()
specifier|public
name|void
name|testTeredoAddresses
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|nonTeredoAddresses
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"::1.2.3.4"
argument_list|,
literal|"3ffe::1"
argument_list|,
literal|"::"
argument_list|,
literal|"::1"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nonTeredoAddress
range|:
name|nonTeredoAddresses
control|)
block|{
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|nonTeredoAddress
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isTeredoAddress
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|InetAddresses
operator|.
name|getTeredoInfo
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected for '"
operator|+
name|nonTeredoAddress
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
name|String
name|validTeredoAddress
init|=
literal|"2001:0000:4136:e378:8000:63bf:3fff:fdd2"
decl_stmt|;
name|String
name|serverStr
init|=
literal|"65.54.227.120"
decl_stmt|;
name|String
name|clientStr
init|=
literal|"192.0.2.45"
decl_stmt|;
name|int
name|port
init|=
literal|40000
decl_stmt|;
name|int
name|flags
init|=
literal|0x8000
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|validTeredoAddress
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isTeredoAddress
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
name|InetAddresses
operator|.
name|TeredoInfo
name|teredo
init|=
name|InetAddresses
operator|.
name|getTeredoInfo
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
decl_stmt|;
name|InetAddress
name|server
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|serverStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|server
argument_list|,
name|teredo
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
name|InetAddress
name|client
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|clientStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|client
argument_list|,
name|teredo
operator|.
name|getClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|port
argument_list|,
name|teredo
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|flags
argument_list|,
name|teredo
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTeredoAddress_nullServer ()
specifier|public
name|void
name|testTeredoAddress_nullServer
parameter_list|()
block|{
name|InetAddresses
operator|.
name|TeredoInfo
name|info
init|=
operator|new
name|InetAddresses
operator|.
name|TeredoInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|80
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
name|info
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
name|info
operator|.
name|getClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|info
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|info
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsatapAddresses ()
specifier|public
name|void
name|testIsatapAddresses
parameter_list|()
block|{
name|InetAddress
name|ipv4
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|validIsatapAddresses
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"2001:db8::5efe:102:304"
argument_list|,
literal|"2001:db8::100:5efe:102:304"
argument_list|,
comment|// Private Multicast? Not likely.
literal|"2001:db8::200:5efe:102:304"
argument_list|,
literal|"2001:db8::300:5efe:102:304"
comment|// Public Multicast? Also unlikely.
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|nonIsatapAddresses
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"::1.2.3.4"
argument_list|,
literal|"3ffe::1"
argument_list|,
literal|"::"
argument_list|,
literal|"::1"
argument_list|,
literal|"2001:db8::0040:5efe:102:304"
argument_list|,
literal|"2001:db8::5ffe:102:304"
argument_list|,
literal|"2001:db8::5eff:102:304"
argument_list|,
literal|"2001:0:102:203:200:5efe:506:708"
comment|// Teredo address; not ISATAP
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|validIsatapAddress
range|:
name|validIsatapAddresses
control|)
block|{
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|validIsatapAddress
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isIsatapAddress
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking '"
operator|+
name|validIsatapAddress
operator|+
literal|"'"
argument_list|,
name|ipv4
argument_list|,
name|InetAddresses
operator|.
name|getIsatapIPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|nonIsatapAddress
range|:
name|nonIsatapAddresses
control|)
block|{
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|nonIsatapAddress
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isIsatapAddress
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|InetAddresses
operator|.
name|getIsatapIPv4Address
argument_list|(
operator|(
name|Inet6Address
operator|)
name|ip
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected for '"
operator|+
name|nonIsatapAddress
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testGetEmbeddedIPv4ClientAddress ()
specifier|public
name|void
name|testGetEmbeddedIPv4ClientAddress
parameter_list|()
block|{
name|Inet6Address
name|testIp
decl_stmt|;
comment|// Test regular global unicast address.
name|testIp
operator|=
operator|(
name|Inet6Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|hasEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ISATAP address.
name|testIp
operator|=
operator|(
name|Inet6Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::5efe:102:304"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|hasEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test compat address.
name|testIp
operator|=
operator|(
name|Inet6Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1.2.3.4"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|hasEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
name|InetAddress
name|ipv4
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ipv4
argument_list|,
name|InetAddresses
operator|.
name|getEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 6to4 address.
name|testIp
operator|=
operator|(
name|Inet6Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2002:0102:0304::1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|hasEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
name|ipv4
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ipv4
argument_list|,
name|InetAddresses
operator|.
name|getEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Teredo address.
name|testIp
operator|=
operator|(
name|Inet6Address
operator|)
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0000:4136:e378:8000:63bf:3fff:fdd2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|hasEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
name|ipv4
operator|=
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.0.2.45"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ipv4
argument_list|,
name|InetAddresses
operator|.
name|getEmbeddedIPv4ClientAddress
argument_list|(
name|testIp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetCoercedIPv4Address ()
specifier|public
name|void
name|testGetCoercedIPv4Address
parameter_list|()
block|{
comment|// Check that a coerced IPv4 address is unaltered.
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ::1 special case
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// :: special case
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test compat address (should be hashed)
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1.2.3.4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test 6to4 address (should be hashed)
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2002:0102:0304::1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 6to4 addresses differing in the embedded IPv4 address should
comment|// hash to the different values.
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2002:0102:0304::1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2002:0506:0708::1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 6to4 addresses NOT differing in the embedded IPv4 address should
comment|// hash to the same value.
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2002:0102:0304::1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2002:0102:0304::2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test Teredo address (should be hashed)
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0000:4136:e378:8000:63bf:3fff:fdd2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.0.2.45"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 Teredo addresses differing in their embedded IPv4 addresses should hash to different
comment|// values.
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0000:4136:e378:8000:63bf:3fff:fdd2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0000:4136:e378:8000:63bf:3fff:fdd3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 Teredo addresses NOT differing in the their embedded IPv4 addresses should hash to the same
comment|// value.
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0000:4136:e378:8000:63bf:3fff:fdd2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0000:5136:f378:9000:73bf:3fff:fdd2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that an address hashes in to the 224.0.0.0/3 number-space.
name|int
name|coercedInt
init|=
name|InetAddresses
operator|.
name|coerceToInteger
argument_list|(
name|InetAddresses
operator|.
name|getCoercedIPv4Address
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:4860::1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|coercedInt
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|0xe0000000
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|coercedInt
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|0xfffffffe
argument_list|)
expr_stmt|;
block|}
DECL|method|testCoerceToInteger ()
specifier|public
name|void
name|testCoerceToInteger
parameter_list|()
block|{
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|coerceToInteger
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0x7f000001
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromInteger ()
specifier|public
name|void
name|testFromInteger
parameter_list|()
block|{
name|assertThat
argument_list|(
name|InetAddresses
operator|.
name|fromInteger
argument_list|(
literal|0x7f000001
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromLittleEndianByteArray ()
specifier|public
name|void
name|testFromLittleEndianByteArray
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|assertEquals
argument_list|(
name|InetAddresses
operator|.
name|fromLittleEndianByteArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
argument_list|,
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddresses
operator|.
name|fromLittleEndianByteArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|}
argument_list|)
argument_list|,
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|16
block|,
literal|15
block|,
literal|14
block|,
literal|13
block|,
literal|12
block|,
literal|11
block|,
literal|10
block|,
literal|9
block|,
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|InetAddresses
operator|.
name|fromLittleEndianByteArray
argument_list|(
operator|new
name|byte
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testIsMaximum ()
specifier|public
name|void
name|testIsMaximum
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|address
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"255.255.255.254"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMaximum
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"255.255.255.255"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isMaximum
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isMaximum
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isMaximum
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncrementIPv4 ()
specifier|public
name|void
name|testIncrementIPv4
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|address_66_0
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.24.66.0"
argument_list|)
decl_stmt|;
name|InetAddress
name|address_66_255
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.24.66.255"
argument_list|)
decl_stmt|;
name|InetAddress
name|address_67_0
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.24.67.0"
argument_list|)
decl_stmt|;
name|InetAddress
name|address
init|=
name|address_66_0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
name|i
operator|++
control|)
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|increment
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|address_66_255
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|address
operator|=
name|InetAddresses
operator|.
name|increment
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address_67_0
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|InetAddress
name|address_ffffff
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"255.255.255.255"
argument_list|)
decl_stmt|;
name|address
operator|=
name|address_ffffff
expr_stmt|;
try|try
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|increment
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIncrementIPv6 ()
specifier|public
name|void
name|testIncrementIPv6
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|addressV6_66_0
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"2001:db8::6600"
argument_list|)
decl_stmt|;
name|InetAddress
name|addressV6_66_ff
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"2001:db8::66ff"
argument_list|)
decl_stmt|;
name|InetAddress
name|addressV6_67_0
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"2001:db8::6700"
argument_list|)
decl_stmt|;
name|InetAddress
name|address
init|=
name|addressV6_66_0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
name|i
operator|++
control|)
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|increment
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|addressV6_66_ff
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|address
operator|=
name|InetAddresses
operator|.
name|increment
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addressV6_67_0
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|InetAddress
name|addressV6_ffffff
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
argument_list|)
decl_stmt|;
name|address
operator|=
name|addressV6_ffffff
expr_stmt|;
try|try
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|increment
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testDecrementIPv4 ()
specifier|public
name|void
name|testDecrementIPv4
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|address660
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.24.66.0"
argument_list|)
decl_stmt|;
name|InetAddress
name|address66255
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.24.66.255"
argument_list|)
decl_stmt|;
name|InetAddress
name|address670
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.24.67.0"
argument_list|)
decl_stmt|;
name|InetAddress
name|address
init|=
name|address670
decl_stmt|;
name|address
operator|=
name|InetAddresses
operator|.
name|decrement
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address66255
argument_list|,
name|address
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
name|i
operator|++
control|)
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|decrement
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|address660
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|InetAddress
name|address0000
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|address
operator|=
name|address0000
expr_stmt|;
try|try
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|decrement
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testDecrementIPv6 ()
specifier|public
name|void
name|testDecrementIPv6
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|addressV6660
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"2001:db8::6600"
argument_list|)
decl_stmt|;
name|InetAddress
name|addressV666ff
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"2001:db8::66ff"
argument_list|)
decl_stmt|;
name|InetAddress
name|addressV6670
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"2001:db8::6700"
argument_list|)
decl_stmt|;
name|InetAddress
name|address
init|=
name|addressV6670
decl_stmt|;
name|address
operator|=
name|InetAddresses
operator|.
name|decrement
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addressV666ff
argument_list|,
name|address
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
name|i
operator|++
control|)
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|decrement
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|addressV6660
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|InetAddress
name|addressV6000000
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"0:0:0:0:0:0:0:0"
argument_list|)
decl_stmt|;
name|address
operator|=
name|addressV6000000
expr_stmt|;
try|try
block|{
name|address
operator|=
name|InetAddresses
operator|.
name|decrement
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromIpv4BigIntegerThrowsLessThanZero ()
specifier|public
name|void
name|testFromIpv4BigIntegerThrowsLessThanZero
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|fromIPv4BigInteger
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"BigInteger must be greater than or equal to 0"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromIpv6BigIntegerThrowsLessThanZero ()
specifier|public
name|void
name|testFromIpv6BigIntegerThrowsLessThanZero
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|fromIPv6BigInteger
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"BigInteger must be greater than or equal to 0"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromIpv4BigIntegerValid ()
specifier|public
name|void
name|testFromIpv4BigIntegerValid
parameter_list|()
block|{
name|checkBigIntegerConversion
argument_list|(
literal|"0.0.0.0"
argument_list|,
name|BigInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"0.0.0.1"
argument_list|,
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"127.255.255.255"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"255.255.255.254"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"255.255.255.255"
argument_list|,
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
literal|32
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromIpv6BigIntegerValid ()
specifier|public
name|void
name|testFromIpv6BigIntegerValid
parameter_list|()
block|{
name|checkBigIntegerConversion
argument_list|(
literal|"::"
argument_list|,
name|BigInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"::1"
argument_list|,
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"::7fff:ffff"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"::7fff:ffff:ffff:ffff"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"::ffff:ffff:ffff:ffff"
argument_list|,
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
literal|64
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
name|checkBigIntegerConversion
argument_list|(
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
argument_list|,
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
literal|128
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromIpv4BigIntegerInputTooLarge ()
specifier|public
name|void
name|testFromIpv4BigIntegerInputTooLarge
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|fromIPv4BigInteger
argument_list|(
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
literal|32
argument_list|)
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"BigInteger cannot be converted to InetAddress because it has more than 4 bytes:"
operator|+
literal|" 4294967297"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromIpv6BigIntegerInputTooLarge ()
specifier|public
name|void
name|testFromIpv6BigIntegerInputTooLarge
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|fromIPv6BigInteger
argument_list|(
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
literal|128
argument_list|)
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"BigInteger cannot be converted to InetAddress because it has more than 16 bytes:"
operator|+
literal|" 340282366920938463463374607431768211457"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Checks that the IP converts to the big integer and the big integer converts to the IP. */
DECL|method|checkBigIntegerConversion (String ip, BigInteger bigIntegerIp)
specifier|private
specifier|static
name|void
name|checkBigIntegerConversion
parameter_list|(
name|String
name|ip
parameter_list|,
name|BigInteger
name|bigIntegerIp
parameter_list|)
block|{
name|InetAddress
name|address
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
decl_stmt|;
name|boolean
name|isIpv6
init|=
name|address
operator|instanceof
name|Inet6Address
decl_stmt|;
name|assertEquals
argument_list|(
name|bigIntegerIp
argument_list|,
name|InetAddresses
operator|.
name|toBigInteger
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
argument_list|,
name|isIpv6
condition|?
name|InetAddresses
operator|.
name|fromIPv6BigInteger
argument_list|(
name|bigIntegerIp
argument_list|)
else|:
name|InetAddresses
operator|.
name|fromIPv4BigInteger
argument_list|(
name|bigIntegerIp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

