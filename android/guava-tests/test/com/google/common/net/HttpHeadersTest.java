begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for the HttpHeaders class.  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|HttpHeadersTest
specifier|public
class|class
name|HttpHeadersTest
extends|extends
name|TestCase
block|{
DECL|method|testConstantNameMatchesString ()
specifier|public
name|void
name|testConstantNameMatchesString
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Special case some of the weird HTTP Header names...
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|specialCases
init|=
name|ImmutableBiMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"ETAG"
argument_list|,
literal|"ETag"
argument_list|)
decl|.
name|put
argument_list|(
literal|"SOURCE_MAP"
argument_list|,
literal|"SourceMap"
argument_list|)
decl|.
name|put
argument_list|(
literal|"SEC_WEBSOCKET_ACCEPT"
argument_list|,
literal|"Sec-WebSocket-Accept"
argument_list|)
decl|.
name|put
argument_list|(
literal|"SEC_WEBSOCKET_EXTENSIONS"
argument_list|,
literal|"Sec-WebSocket-Extensions"
argument_list|)
decl|.
name|put
argument_list|(
literal|"SEC_WEBSOCKET_KEY"
argument_list|,
literal|"Sec-WebSocket-Key"
argument_list|)
decl|.
name|put
argument_list|(
literal|"SEC_WEBSOCKET_PROTOCOL"
argument_list|,
literal|"Sec-WebSocket-Protocol"
argument_list|)
decl|.
name|put
argument_list|(
literal|"SEC_WEBSOCKET_VERSION"
argument_list|,
literal|"Sec-WebSocket-Version"
argument_list|)
decl|.
name|put
argument_list|(
literal|"X_WEBKIT_CSP"
argument_list|,
literal|"X-WebKit-CSP"
argument_list|)
decl|.
name|put
argument_list|(
literal|"X_WEBKIT_CSP_REPORT_ONLY"
argument_list|,
literal|"X-WebKit-CSP-Report-Only"
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|uppercaseAcronyms
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"ID"
argument_list|,
literal|"DNT"
argument_list|,
literal|"DNS"
argument_list|,
literal|"HTTP2"
argument_list|,
literal|"IP"
argument_list|,
literal|"MD5"
argument_list|,
literal|"P3P"
argument_list|,
literal|"TE"
argument_list|,
literal|"UID"
argument_list|,
literal|"URL"
argument_list|,
literal|"WWW"
argument_list|,
literal|"XSS"
argument_list|)
decl_stmt|;
name|assertConstantNameMatchesString
argument_list|(
name|HttpHeaders
operator|.
name|class
argument_list|,
name|specialCases
argument_list|,
name|uppercaseAcronyms
argument_list|)
expr_stmt|;
block|}
comment|// Visible for other tests to use
DECL|method|assertConstantNameMatchesString ( Class<?> clazz, ImmutableBiMap<String, String> specialCases, ImmutableSet<String> uppercaseAcronyms)
specifier|static
name|void
name|assertConstantNameMatchesString
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|specialCases
parameter_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|uppercaseAcronyms
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
for|for
control|(
name|Field
name|field
range|:
name|relevantFields
argument_list|(
name|clazz
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|upperToHttpHeaderName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|specialCases
argument_list|,
name|uppercaseAcronyms
argument_list|)
argument_list|,
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Visible for other tests to use
DECL|method|relevantFields (Class<?> cls)
specifier|static
name|ImmutableSet
argument_list|<
name|Field
argument_list|>
name|relevantFields
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Field
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|cls
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
comment|/*        * Coverage mode generates synthetic fields.  If we ever add private        * fields, they will cause similar problems, and we may want to switch        * this check to isAccessible().        */
if|if
condition|(
operator|!
name|field
operator|.
name|isSynthetic
argument_list|()
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
DECL|field|JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
DECL|method|upperToHttpHeaderName ( String constantName, ImmutableBiMap<String, String> specialCases, ImmutableSet<String> uppercaseAcronyms)
specifier|private
specifier|static
name|String
name|upperToHttpHeaderName
parameter_list|(
name|String
name|constantName
parameter_list|,
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|specialCases
parameter_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|uppercaseAcronyms
parameter_list|)
block|{
if|if
condition|(
name|specialCases
operator|.
name|containsKey
argument_list|(
name|constantName
argument_list|)
condition|)
block|{
return|return
name|specialCases
operator|.
name|get
argument_list|(
name|constantName
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|SPLITTER
operator|.
name|split
argument_list|(
name|constantName
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|uppercaseAcronyms
operator|.
name|contains
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|part
operator|=
name|part
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|part
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
return|return
name|JOINER
operator|.
name|join
argument_list|(
name|parts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

