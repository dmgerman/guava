begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link HostAndPort}  *  * @author Paul Marks  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|HostAndPortTest
specifier|public
class|class
name|HostAndPortTest
extends|extends
name|TestCase
block|{
DECL|method|testFromStringWellFormed ()
specifier|public
name|void
name|testFromStringWellFormed
parameter_list|()
block|{
comment|// Well-formed inputs.
name|checkFromStringCase
argument_list|(
literal|"google.com"
argument_list|,
literal|80
argument_list|,
literal|"google.com"
argument_list|,
literal|80
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com"
argument_list|,
literal|80
argument_list|,
literal|"google.com"
argument_list|,
literal|80
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"192.0.2.1"
argument_list|,
literal|82
argument_list|,
literal|"192.0.2.1"
argument_list|,
literal|82
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[2001::1]"
argument_list|,
literal|84
argument_list|,
literal|"2001::1"
argument_list|,
literal|84
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"2001::3"
argument_list|,
literal|86
argument_list|,
literal|"2001::3"
argument_list|,
literal|86
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"host:"
argument_list|,
literal|80
argument_list|,
literal|"host"
argument_list|,
literal|80
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromStringBadDefaultPort ()
specifier|public
name|void
name|testFromStringBadDefaultPort
parameter_list|()
block|{
comment|// Well-formed strings with bad default ports.
name|checkFromStringCase
argument_list|(
literal|"gmail.com:81"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"gmail.com"
argument_list|,
literal|81
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"192.0.2.2:83"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"192.0.2.2"
argument_list|,
literal|83
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[2001::2]:85"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"2001::2"
argument_list|,
literal|85
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"goo.gl:65535"
argument_list|,
literal|65536
argument_list|,
literal|"goo.gl"
argument_list|,
literal|65535
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No port, bad default.
name|checkFromStringCase
argument_list|(
literal|"google.com"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"google.com"
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"192.0.2.1"
argument_list|,
literal|65536
argument_list|,
literal|"192.0.2.1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[2001::1]"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"2001::1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"2001::3"
argument_list|,
literal|65536
argument_list|,
literal|"2001::3"
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromStringUnusedDefaultPort ()
specifier|public
name|void
name|testFromStringUnusedDefaultPort
parameter_list|()
block|{
comment|// Default port, but unused.
name|checkFromStringCase
argument_list|(
literal|"gmail.com:81"
argument_list|,
literal|77
argument_list|,
literal|"gmail.com"
argument_list|,
literal|81
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"192.0.2.2:83"
argument_list|,
literal|77
argument_list|,
literal|"192.0.2.2"
argument_list|,
literal|83
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[2001::2]:85"
argument_list|,
literal|77
argument_list|,
literal|"2001::2"
argument_list|,
literal|85
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromStringBadPort ()
specifier|public
name|void
name|testFromStringBadPort
parameter_list|()
block|{
comment|// Out-of-range ports.
name|checkFromStringCase
argument_list|(
literal|"google.com:65536"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com:9999999999"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Invalid port parts.
name|checkFromStringCase
argument_list|(
literal|"google.com:port"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com:-25"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com:+25"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com:25  "
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com:25\t"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"google.com:0x25 "
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromStringUnparseableNonsense ()
specifier|public
name|void
name|testFromStringUnparseableNonsense
parameter_list|()
block|{
comment|// Some nonsense that causes parse failures.
name|checkFromStringCase
argument_list|(
literal|"[goo.gl]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[goo.gl]:80"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"["
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[]:"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[]:80"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"[]bad"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromStringParseableNonsense ()
specifier|public
name|void
name|testFromStringParseableNonsense
parameter_list|()
block|{
comment|// Examples of nonsense that gets through.
name|checkFromStringCase
argument_list|(
literal|"[[:]]"
argument_list|,
literal|86
argument_list|,
literal|"[:]"
argument_list|,
literal|86
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"x:y:z"
argument_list|,
literal|87
argument_list|,
literal|"x:y:z"
argument_list|,
literal|87
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|""
argument_list|,
literal|88
argument_list|,
literal|""
argument_list|,
literal|88
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|":"
argument_list|,
literal|99
argument_list|,
literal|""
argument_list|,
literal|99
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|":123"
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkFromStringCase
argument_list|(
literal|"\nOMG\t"
argument_list|,
literal|89
argument_list|,
literal|"\nOMG\t"
argument_list|,
literal|89
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFromStringCase ( String hpString, int defaultPort, String expectHost, int expectPort, boolean expectHasExplicitPort)
specifier|private
specifier|static
name|void
name|checkFromStringCase
parameter_list|(
name|String
name|hpString
parameter_list|,
name|int
name|defaultPort
parameter_list|,
name|String
name|expectHost
parameter_list|,
name|int
name|expectPort
parameter_list|,
name|boolean
name|expectHasExplicitPort
parameter_list|)
block|{
name|HostAndPort
name|hp
decl_stmt|;
try|try
block|{
name|hp
operator|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|hpString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Make sure we expected this.
name|assertNull
argument_list|(
name|expectHost
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertNotNull
argument_list|(
name|expectHost
argument_list|)
expr_stmt|;
comment|// Apply withDefaultPort(), yielding hp2.
specifier|final
name|boolean
name|badDefaultPort
init|=
operator|(
name|defaultPort
argument_list|<
literal|0
operator|||
name|defaultPort
argument_list|>
literal|65535
operator|)
decl_stmt|;
name|HostAndPort
name|hp2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hp2
operator|=
name|hp
operator|.
name|withDefaultPort
argument_list|(
name|defaultPort
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|badDefaultPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|badDefaultPort
argument_list|)
expr_stmt|;
block|}
comment|// Check the pre-withDefaultPort() instance.
if|if
condition|(
name|expectHasExplicitPort
condition|)
block|{
name|assertTrue
argument_list|(
name|hp
operator|.
name|hasPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectPort
argument_list|,
name|hp
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|hp
operator|.
name|hasPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hp
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
name|assertEquals
argument_list|(
name|expectHost
argument_list|,
name|hp
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectHost
argument_list|,
name|hp
operator|.
name|getHostText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the post-withDefaultPort() instance (if any).
if|if
condition|(
operator|!
name|badDefaultPort
condition|)
block|{
try|try
block|{
name|int
name|port
init|=
name|hp2
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectPort
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectPort
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// Make sure we expected this to fail.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|expectPort
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectHost
argument_list|,
name|hp2
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectHost
argument_list|,
name|hp2
operator|.
name|getHostText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromParts ()
specifier|public
name|void
name|testFromParts
parameter_list|()
block|{
name|HostAndPort
name|hp
init|=
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"gmail.com"
argument_list|,
literal|81
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"gmail.com"
argument_list|,
name|hp
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hp
operator|.
name|hasPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|81
argument_list|,
name|hp
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"gmail.com:80"
argument_list|,
literal|81
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"gmail.com"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromHost ()
specifier|public
name|void
name|testFromHost
parameter_list|()
block|{
name|HostAndPort
name|hp
init|=
name|HostAndPort
operator|.
name|fromHost
argument_list|(
literal|"gmail.com"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"gmail.com"
argument_list|,
name|hp
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hp
operator|.
name|hasPort
argument_list|()
argument_list|)
expr_stmt|;
name|hp
operator|=
name|HostAndPort
operator|.
name|fromHost
argument_list|(
literal|"[::1]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|hp
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hp
operator|.
name|hasPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HostAndPort
operator|.
name|fromHost
argument_list|(
literal|"gmail.com:80"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|HostAndPort
operator|.
name|fromHost
argument_list|(
literal|"[gmail.com]"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetPortOrDefault ()
specifier|public
name|void
name|testGetPortOrDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"host:80"
argument_list|)
operator|.
name|getPortOrDefault
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"host"
argument_list|)
operator|.
name|getPortOrDefault
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCodeAndEquals ()
specifier|public
name|void
name|testHashCodeAndEquals
parameter_list|()
block|{
name|HostAndPort
name|hp1
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"foo::123"
argument_list|)
decl_stmt|;
name|HostAndPort
name|hp2
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"foo::123"
argument_list|)
decl_stmt|;
name|HostAndPort
name|hp3
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[foo::123]"
argument_list|)
decl_stmt|;
name|HostAndPort
name|hp4
init|=
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"[foo::123]"
argument_list|,
literal|80
argument_list|)
decl_stmt|;
name|HostAndPort
name|hp5
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[foo::123]:80"
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|hp1
argument_list|,
name|hp2
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|hp3
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|hp4
argument_list|,
name|hp5
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testRequireBracketsForIPv6 ()
specifier|public
name|void
name|testRequireBracketsForIPv6
parameter_list|()
block|{
comment|// Bracketed IPv6 works fine.
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[::1]"
argument_list|)
operator|.
name|requireBracketsForIPv6
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[::1]:80"
argument_list|)
operator|.
name|requireBracketsForIPv6
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// Non-bracketed non-IPv6 works fine.
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"x"
argument_list|)
operator|.
name|requireBracketsForIPv6
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"x:80"
argument_list|)
operator|.
name|requireBracketsForIPv6
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// Non-bracketed IPv6 fails.
try|try
block|{
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"::1"
argument_list|)
operator|.
name|requireBracketsForIPv6
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
comment|// With ports.
name|assertEquals
argument_list|(
literal|"foo:101"
argument_list|,
literal|""
operator|+
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"foo:101"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|":102"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|":102"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1::2]:103"
argument_list|,
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"1::2"
argument_list|,
literal|103
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]:104"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[::1]:104"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Without ports.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|""
operator|+
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1::2]"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"1::2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[::1]"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Garbage in, garbage out.
name|assertEquals
argument_list|(
literal|"[::]]:107"
argument_list|,
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"::]"
argument_list|,
literal|107
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[:]]:108"
argument_list|,
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[[:]]:108"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"host"
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"host:80"
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|HostAndPort
operator|.
name|fromString
argument_list|(
literal|"[::1]:104"
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|HostAndPort
operator|.
name|fromParts
argument_list|(
literal|"1::2"
argument_list|,
literal|103
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

