begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/** Tests for repeated node and edge addition and removal in a {@link Graph}. */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|GraphMutationTest
specifier|public
specifier|final
class|class
name|GraphMutationTest
block|{
DECL|field|NUM_TRIALS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TRIALS
init|=
literal|50
decl_stmt|;
DECL|field|NUM_NODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODES
init|=
literal|100
decl_stmt|;
DECL|field|NUM_EDGES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_EDGES
init|=
literal|1000
decl_stmt|;
DECL|field|NODE_POOL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|NODE_POOL_SIZE
init|=
literal|1000
decl_stmt|;
comment|// must be>> NUM_NODES
annotation|@
name|Test
DECL|method|directedGraph ()
specifier|public
name|void
name|directedGraph
parameter_list|()
block|{
name|testGraphMutation
argument_list|(
name|GraphBuilder
operator|.
name|directed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|undirectedGraph ()
specifier|public
name|void
name|undirectedGraph
parameter_list|()
block|{
name|testGraphMutation
argument_list|(
name|GraphBuilder
operator|.
name|undirected
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGraphMutation (GraphBuilder<? super Integer> graphBuilder)
specifier|private
specifier|static
name|void
name|testGraphMutation
parameter_list|(
name|GraphBuilder
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|graphBuilder
parameter_list|)
block|{
name|Random
name|gen
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
comment|// Fixed seed so test results are deterministic.
for|for
control|(
name|int
name|trial
init|=
literal|0
init|;
name|trial
operator|<
name|NUM_TRIALS
condition|;
operator|++
name|trial
control|)
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
init|=
name|graphBuilder
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
while|while
condition|(
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|NUM_NODES
condition|)
block|{
name|graph
operator|.
name|addNode
argument_list|(
name|gen
operator|.
name|nextInt
argument_list|(
name|NODE_POOL_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|graph
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|NUM_EDGES
condition|)
block|{
name|graph
operator|.
name|putEdge
argument_list|(
name|getRandomElement
argument_list|(
name|nodeList
argument_list|,
name|gen
argument_list|)
argument_list|,
name|getRandomElement
argument_list|(
name|nodeList
argument_list|,
name|gen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|edgeList
init|=
operator|new
name|ArrayList
argument_list|<
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_NODES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_EDGES
argument_list|)
expr_stmt|;
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|edgeList
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|int
name|numEdgesToRemove
init|=
name|gen
operator|.
name|nextInt
argument_list|(
name|NUM_EDGES
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEdgesToRemove
condition|;
operator|++
name|i
control|)
block|{
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|edge
init|=
name|edgeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
name|edge
operator|.
name|nodeU
argument_list|()
argument_list|,
name|edge
operator|.
name|nodeV
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_NODES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_EDGES
operator|-
name|numEdgesToRemove
argument_list|)
expr_stmt|;
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|gen
argument_list|)
expr_stmt|;
name|int
name|numNodesToRemove
init|=
name|gen
operator|.
name|nextInt
argument_list|(
name|NUM_NODES
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodesToRemove
condition|;
operator|++
name|i
control|)
block|{
name|assertThat
argument_list|(
name|graph
operator|.
name|removeNode
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_NODES
operator|-
name|numNodesToRemove
argument_list|)
expr_stmt|;
comment|// Number of edges remaining is unknown (node's incident edges have been removed).
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numNodesToRemove
init|;
name|i
operator|<
name|NUM_NODES
condition|;
operator|++
name|i
control|)
block|{
name|assertThat
argument_list|(
name|graph
operator|.
name|removeNode
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// no edges can remain if there's no nodes
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|gen
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|node
range|:
name|nodeList
control|)
block|{
name|assertThat
argument_list|(
name|graph
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|edgeList
argument_list|,
name|gen
argument_list|)
expr_stmt|;
for|for
control|(
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|edge
range|:
name|edgeList
control|)
block|{
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdge
argument_list|(
name|edge
operator|.
name|nodeU
argument_list|()
argument_list|,
name|edge
operator|.
name|nodeV
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_NODES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|NUM_EDGES
argument_list|)
expr_stmt|;
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|graph
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRandomElement (L list, Random gen)
specifier|private
specifier|static
parameter_list|<
name|L
extends|extends
name|List
argument_list|<
name|T
argument_list|>
operator|&
name|RandomAccess
parameter_list|,
name|T
parameter_list|>
name|T
name|getRandomElement
parameter_list|(
name|L
name|list
parameter_list|,
name|Random
name|gen
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|gen
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

