begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|ENDPOINTS_MISMATCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|assertStronglyEquivalent
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/** Tests for {@link ConfigurableMutableValueGraph} and related functionality. */
end_comment

begin_comment
comment|// TODO(user): Expand coverage and move to proper test suite.
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|ValueGraphTest
specifier|public
specifier|final
class|class
name|ValueGraphTest
block|{
DECL|field|DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT
init|=
literal|"default"
decl_stmt|;
DECL|field|graph
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|graph
decl_stmt|;
annotation|@
name|After
DECL|method|validateGraphState ()
specifier|public
name|void
name|validateGraphState
parameter_list|()
block|{
name|assertStronglyEquivalent
argument_list|(
name|graph
argument_list|,
name|Graphs
operator|.
name|copyOf
argument_list|(
name|graph
argument_list|)
argument_list|)
expr_stmt|;
name|assertStronglyEquivalent
argument_list|(
name|graph
argument_list|,
name|ImmutableValueGraph
operator|.
name|copyOf
argument_list|(
name|graph
argument_list|)
argument_list|)
expr_stmt|;
name|Graph
argument_list|<
name|Integer
argument_list|>
name|asGraph
init|=
name|graph
operator|.
name|asGraph
argument_list|()
decl_stmt|;
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|asGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|edges
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|isDirected
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|isDirected
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|degree
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|degree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|otherNode
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|boolean
name|hasEdge
init|=
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hasEdge
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|hasEdgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|hasEdge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|!
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|,
name|DEFAULT
argument_list|)
operator|.
name|equals
argument_list|(
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|hasEdge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|directedGraph ()
specifier|public
name|void
name|directedGraph
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"valueC"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|"valueD"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueD"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueD"
argument_list|)
expr_stmt|;
name|String
name|toString
init|=
name|graph
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueD"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|undirectedGraph ()
specifier|public
name|void
name|undirectedGraph
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
comment|// overwrites valueA in undirected case
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"valueC"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|"valueD"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueD"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueD"
argument_list|)
expr_stmt|;
name|String
name|toString
init|=
name|graph
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"valueD"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_directed_correct ()
specifier|public
name|void
name|hasEdgeConnecting_directed_correct
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_directed_backwards ()
specifier|public
name|void
name|hasEdgeConnecting_directed_backwards
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_directed_mismatch ()
specifier|public
name|void
name|hasEdgeConnecting_directed_mismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_undirected_correct ()
specifier|public
name|void
name|hasEdgeConnecting_undirected_correct
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_undirected_backwards ()
specifier|public
name|void
name|hasEdgeConnecting_undirected_backwards
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_undirected_mismatch ()
specifier|public
name|void
name|hasEdgeConnecting_undirected_mismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeValueOrDefault_directed_correct ()
specifier|public
name|void
name|edgeValueOrDefault_directed_correct
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeValueOrDefault_directed_backwards ()
specifier|public
name|void
name|edgeValueOrDefault_directed_backwards
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeValueOrDefault_directed_mismatch ()
specifier|public
name|void
name|edgeValueOrDefault_directed_mismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|unused
init|=
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|unused
operator|=
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException: "
operator|+
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edgeValueOrDefault_undirected_correct ()
specifier|public
name|void
name|edgeValueOrDefault_undirected_correct
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeValueOrDefault_undirected_backwards ()
specifier|public
name|void
name|edgeValueOrDefault_undirected_backwards
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeValueOrDefault_undirected_mismatch ()
specifier|public
name|void
name|edgeValueOrDefault_undirected_mismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdgeValue_directed ()
specifier|public
name|void
name|putEdgeValue_directed
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueC"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueD"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdgeValue_directed_orderMismatch ()
specifier|public
name|void
name|putEdgeValue_directed_orderMismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|graph
operator|.
name|putEdgeValue
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"irrelevant"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException: "
operator|+
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|putEdgeValue_undirected_orderMismatch ()
specifier|public
name|void
name|putEdgeValue_undirected_orderMismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"irrelevant"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdgeValue_undirected ()
specifier|public
name|void
name|putEdgeValue_undirected
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueC"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueD"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_directed ()
specifier|public
name|void
name|removeEdge_directed
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_undirected ()
specifier|public
name|void
name|removeEdge_undirected
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_directed_orderMismatch ()
specifier|public
name|void
name|removeEdge_directed_orderMismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"1->2"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"2->1"
argument_list|)
expr_stmt|;
try|try
block|{
name|graph
operator|.
name|removeEdge
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|removeEdge
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException: "
operator|+
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|removeEdge_undirected_orderMismatch ()
specifier|public
name|void
name|removeEdge_undirected_orderMismatch
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"1-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"1-2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeValue_missing ()
specifier|public
name|void
name|edgeValue_missing
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|removeEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edgeValueOrDefault
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|equivalence_considersEdgeValue ()
specifier|public
name|void
name|equivalence_considersEdgeValue
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|otherGraph
init|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|otherGraph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|otherGraph
argument_list|)
expr_stmt|;
name|otherGraph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|otherGraph
argument_list|)
expr_stmt|;
comment|// values differ
block|}
annotation|@
name|Test
DECL|method|incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_directed ()
specifier|public
name|void
name|incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_directed
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|incidentEdgeOrder
argument_list|(
name|ElementOrder
operator|.
name|stable
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"2-1"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"2-3"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"1-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_undirected ()
specifier|public
name|void
name|incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_undirected
parameter_list|()
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|incidentEdgeOrder
argument_list|(
name|ElementOrder
operator|.
name|stable
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"2-3"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"2-1"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|"2-4"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"1-2"
argument_list|)
expr_stmt|;
comment|// Duplicate nodes, different value
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|unordered
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concurrentIteration ()
specifier|public
name|void
name|concurrentIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|graph
operator|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdgeValue
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|int
name|threadCount
init|=
literal|20
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|Integer
name|first
init|=
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|node
range|:
name|graph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|graph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
decl_stmt|;
block|}
comment|/*                    * Also look up an earlier node so that, if the graph is using MapRetrievalCache,                    * we read one of the fields declared in that class.                    */
name|Set
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|graph
operator|.
name|successors
argument_list|(
name|first
argument_list|)
decl_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// For more about this test, see the equivalent in AbstractNetworkTest.
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
operator|.
name|build
argument_list|()
control|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

