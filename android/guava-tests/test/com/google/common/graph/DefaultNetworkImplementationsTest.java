begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|AbstractNetworkTest
operator|.
name|ERROR_MODIFIABLE_COLLECTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|ERROR_NODE_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|EdgeType
operator|.
name|DIRECTED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|EdgeType
operator|.
name|UNDIRECTED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|assertNodeNotInGraphErrorMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|EdgeType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test for {@link Network} methods which have default implementations.  * Currently those implementations are in {@link AbstractNetwork}; in future they might be in  * {@link Network} itself, once we are willing to use Java 8 default methods.  */
end_comment

begin_class
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): Figure out Android JUnit 4 support. Does it work with Gingerbread? @RunWith?
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|DefaultNetworkImplementationsTest
specifier|public
specifier|final
class|class
name|DefaultNetworkImplementationsTest
block|{
DECL|field|network
specifier|private
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
decl_stmt|;
DECL|field|networkForTest
specifier|private
name|NetworkForTest
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|networkForTest
decl_stmt|;
DECL|field|N1
specifier|private
specifier|static
specifier|final
name|Integer
name|N1
init|=
literal|1
decl_stmt|;
DECL|field|N2
specifier|private
specifier|static
specifier|final
name|Integer
name|N2
init|=
literal|2
decl_stmt|;
DECL|field|NODE_NOT_IN_GRAPH
specifier|private
specifier|static
specifier|final
name|Integer
name|NODE_NOT_IN_GRAPH
init|=
literal|1000
decl_stmt|;
DECL|field|E11
specifier|private
specifier|static
specifier|final
name|String
name|E11
init|=
literal|"1-1"
decl_stmt|;
DECL|field|E11_A
specifier|private
specifier|static
specifier|final
name|String
name|E11_A
init|=
literal|"1-1a"
decl_stmt|;
DECL|field|E12
specifier|private
specifier|static
specifier|final
name|String
name|E12
init|=
literal|"1-2"
decl_stmt|;
DECL|field|E12_A
specifier|private
specifier|static
specifier|final
name|String
name|E12_A
init|=
literal|"1-2a"
decl_stmt|;
DECL|field|E21
specifier|private
specifier|static
specifier|final
name|String
name|E21
init|=
literal|"2-1"
decl_stmt|;
DECL|field|E23
specifier|private
specifier|static
specifier|final
name|String
name|E23
init|=
literal|"2-3"
decl_stmt|;
annotation|@
name|Parameters
DECL|method|parameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|UNDIRECTED
block|}
block|,
block|{
name|DIRECTED
block|}
block|,         }
argument_list|)
return|;
block|}
DECL|field|edgeType
specifier|private
specifier|final
name|EdgeType
name|edgeType
decl_stmt|;
DECL|method|DefaultNetworkImplementationsTest (EdgeType edgeType)
specifier|public
name|DefaultNetworkImplementationsTest
parameter_list|(
name|EdgeType
name|edgeType
parameter_list|)
block|{
name|this
operator|.
name|edgeType
operator|=
name|edgeType
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
operator|(
name|edgeType
operator|==
name|EdgeType
operator|.
name|DIRECTED
operator|)
condition|?
name|NetworkBuilder
operator|.
name|directed
argument_list|()
else|:
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
decl_stmt|;
name|network
operator|=
name|builder
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|networkForTest
operator|=
name|NetworkForTest
operator|.
name|from
argument_list|(
name|network
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_disconnectedNodes ()
specifier|public
name|void
name|edgesConnecting_disconnectedNodes
parameter_list|()
block|{
name|network
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|network
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_nodesNotInGraph ()
specifier|public
name|void
name|edgesConnecting_nodesNotInGraph
parameter_list|()
block|{
name|network
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|network
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
try|try
block|{
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_checkReturnedSetMutability ()
specifier|public
name|void
name|edgesConnecting_checkReturnedSetMutability
parameter_list|()
block|{
name|network
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|network
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|edgesConnecting
init|=
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|edgesConnecting
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edgesConnecting
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_oneEdge ()
specifier|public
name|void
name|edgesConnecting_oneEdge
parameter_list|()
block|{
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
if|if
condition|(
name|edgeType
operator|==
name|EdgeType
operator|.
name|DIRECTED
condition|)
block|{
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_selfLoop ()
specifier|public
name|void
name|edgesConnecting_selfLoop
parameter_list|()
block|{
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_parallelEdges ()
specifier|public
name|void
name|edgesConnecting_parallelEdges
parameter_list|()
block|{
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
if|if
condition|(
name|edgeType
operator|==
name|EdgeType
operator|.
name|DIRECTED
condition|)
block|{
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E21
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkForTest
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|,
name|E21
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_parallelSelfLoopEdges ()
specifier|public
name|void
name|edgesConnecting_parallelSelfLoopEdges
parameter_list|()
block|{
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
block|}
DECL|class|NetworkForTest
specifier|private
specifier|static
class|class
name|NetworkForTest
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
extends|extends
name|AbstractNetwork
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
block|{
DECL|field|network
specifier|private
specifier|final
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
decl_stmt|;
DECL|method|NetworkForTest (Network<N, E> network)
name|NetworkForTest
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
name|this
operator|.
name|network
operator|=
name|network
expr_stmt|;
block|}
DECL|method|from (Network<N, E> network)
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|NetworkForTest
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|from
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
return|return
operator|new
name|NetworkForTest
argument_list|<>
argument_list|(
name|network
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodes ()
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|nodes
parameter_list|()
block|{
return|return
name|network
operator|.
name|nodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|edges ()
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|edges
parameter_list|()
block|{
return|return
name|network
operator|.
name|edges
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isDirected ()
specifier|public
name|boolean
name|isDirected
parameter_list|()
block|{
return|return
name|network
operator|.
name|isDirected
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|allowsParallelEdges ()
specifier|public
name|boolean
name|allowsParallelEdges
parameter_list|()
block|{
return|return
name|network
operator|.
name|allowsParallelEdges
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|allowsSelfLoops ()
specifier|public
name|boolean
name|allowsSelfLoops
parameter_list|()
block|{
return|return
name|network
operator|.
name|allowsSelfLoops
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodeOrder ()
specifier|public
name|ElementOrder
argument_list|<
name|N
argument_list|>
name|nodeOrder
parameter_list|()
block|{
return|return
name|network
operator|.
name|nodeOrder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|edgeOrder ()
specifier|public
name|ElementOrder
argument_list|<
name|E
argument_list|>
name|edgeOrder
parameter_list|()
block|{
return|return
name|network
operator|.
name|edgeOrder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentNodes (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|adjacentNodes
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|predecessors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|predecessors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|network
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|successors (N node)
specifier|public
name|Set
argument_list|<
name|N
argument_list|>
name|successors
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|incidentEdges (N node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|incidentEdges
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inEdges (N node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|inEdges
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|outEdges (N node)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|outEdges
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|incidentNodes (E edge)
specifier|public
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|incidentNodes
parameter_list|(
name|E
name|edge
parameter_list|)
block|{
return|return
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|adjacentEdges (E edge)
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|adjacentEdges
parameter_list|(
name|E
name|edge
parameter_list|)
block|{
return|return
name|network
operator|.
name|adjacentEdges
argument_list|(
name|edge
argument_list|)
return|;
block|}
comment|// _don't_ override edge*Connecting*; we want the behavior from AbstractNetwork
block|}
block|}
end_class

end_unit

