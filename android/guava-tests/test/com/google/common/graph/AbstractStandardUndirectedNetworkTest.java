begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Abstract base class for testing undirected {@link Network} implementations defined in this  * package.  */
end_comment

begin_class
DECL|class|AbstractStandardUndirectedNetworkTest
specifier|public
specifier|abstract
class|class
name|AbstractStandardUndirectedNetworkTest
extends|extends
name|AbstractNetworkTest
block|{
DECL|field|ENDPOINTS_N1N2
specifier|private
specifier|static
specifier|final
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|ENDPOINTS_N1N2
init|=
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
DECL|field|ENDPOINTS_N2N1
specifier|private
specifier|static
specifier|final
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|ENDPOINTS_N2N1
init|=
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|validateUndirectedEdges ()
specifier|public
name|void
name|validateUndirectedEdges
parameter_list|()
block|{
for|for
control|(
name|Integer
name|node
range|:
name|network
operator|.
name|nodes
argument_list|()
control|)
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|,
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|,
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|adjacentNode
range|:
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|node
argument_list|,
name|adjacentNode
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|adjacentNode
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|nodes_checkReturnedSetMutability ()
specifier|public
name|void
name|nodes_checkReturnedSetMutability
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|network
operator|.
name|nodes
argument_list|()
decl_stmt|;
try|try
block|{
name|nodes
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|edges_checkReturnedSetMutability ()
specifier|public
name|void
name|edges_checkReturnedSetMutability
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|edges
init|=
name|network
operator|.
name|edges
argument_list|()
decl_stmt|;
try|try
block|{
name|edges
operator|.
name|add
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edges
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|incidentEdges_checkReturnedSetMutability ()
specifier|public
name|void
name|incidentEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|incidentEdges
init|=
name|network
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|incidentEdges
operator|.
name|add
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|incidentEdges
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|adjacentNodes_checkReturnedSetMutability ()
specifier|public
name|void
name|adjacentNodes_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|adjacentNodes
init|=
name|network
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|adjacentNodes
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|adjacentNodes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|adjacentEdges_checkReturnedSetMutability ()
specifier|public
name|void
name|adjacentEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|adjacentEdges
init|=
name|network
operator|.
name|adjacentEdges
argument_list|(
name|E12
argument_list|)
decl_stmt|;
try|try
block|{
name|adjacentEdges
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|,
name|E23
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentEdges
argument_list|(
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|adjacentEdges
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|edgesConnecting_checkReturnedSetMutability ()
specifier|public
name|void
name|edgesConnecting_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|edgesConnecting
init|=
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|edgesConnecting
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edgesConnecting
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|inEdges_checkReturnedSetMutability ()
specifier|public
name|void
name|inEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|inEdges
init|=
name|network
operator|.
name|inEdges
argument_list|(
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|inEdges
operator|.
name|add
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|inEdges
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|outEdges_checkReturnedSetMutability ()
specifier|public
name|void
name|outEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|outEdges
init|=
name|network
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|outEdges
operator|.
name|add
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|outEdges
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|predecessors_checkReturnedSetMutability ()
specifier|public
name|void
name|predecessors_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|predecessors
init|=
name|network
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|predecessors
operator|.
name|add
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|predecessors
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|successors_checkReturnedSetMutability ()
specifier|public
name|void
name|successors_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|successors
init|=
name|network
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|successors
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_COLLECTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|successors
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edges_containsOrderMismatch ()
specifier|public
name|void
name|edges_containsOrderMismatch
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|asGraph
argument_list|()
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ENDPOINTS_N2N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|asGraph
argument_list|()
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ENDPOINTS_N1N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgeConnectingOrNull_orderMismatch ()
specifier|public
name|void
name|edgeConnectingOrNull_orderMismatch
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeConnectingOrNull
argument_list|(
name|ENDPOINTS_N2N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeConnectingOrNull
argument_list|(
name|ENDPOINTS_N1N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_oneEdge ()
specifier|public
name|void
name|edgesConnecting_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inEdges_oneEdge ()
specifier|public
name|void
name|inEdges_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outEdges_oneEdge ()
specifier|public
name|void
name|outEdges_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|predecessors_oneEdge ()
specifier|public
name|void
name|predecessors_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|successors_oneEdge ()
specifier|public
name|void
name|successors_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inDegree_oneEdge ()
specifier|public
name|void
name|inDegree_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outDegree_oneEdge ()
specifier|public
name|void
name|outDegree_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outDegree
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edges_selfLoop ()
specifier|public
name|void
name|edges_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_selfLoop ()
specifier|public
name|void
name|incidentEdges_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentNodes_selfLoop ()
specifier|public
name|void
name|incidentNodes_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|E11
argument_list|)
operator|.
name|nodeU
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|E11
argument_list|)
operator|.
name|nodeV
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentNodes_selfLoop ()
specifier|public
name|void
name|adjacentNodes_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_selfLoop ()
specifier|public
name|void
name|adjacentEdges_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentEdges
argument_list|(
name|E11
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_selfLoop ()
specifier|public
name|void
name|edgesConnecting_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inEdges_selfLoop ()
specifier|public
name|void
name|inEdges_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|,
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outEdges_selfLoop ()
specifier|public
name|void
name|outEdges_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|,
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|predecessors_selfLoop ()
specifier|public
name|void
name|predecessors_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|successors_selfLoop ()
specifier|public
name|void
name|successors_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|degree_selfLoop ()
specifier|public
name|void
name|degree_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|degree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|degree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inDegree_selfLoop ()
specifier|public
name|void
name|inDegree_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outDegree_selfLoop ()
specifier|public
name|void
name|outDegree_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// Element Mutation
annotation|@
name|Test
DECL|method|addEdge_existingNodes ()
specifier|public
name|void
name|addEdge_existingNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Adding nodes initially for safety (insulating from possible future
comment|// modifications to proxy methods)
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_existingEdgeBetweenSameNodes ()
specifier|public
name|void
name|addEdge_existingEdgeBetweenSameNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|edges
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edges
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_existingEdgeBetweenDifferentNodes ()
specifier|public
name|void
name|addEdge_existingEdgeBetweenDifferentNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Edge between totally different nodes
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N4
argument_list|,
name|N5
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_EXISTING_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_REUSE_EDGE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addEdge_parallelEdge_notAllowed ()
specifier|public
name|void
name|addEdge_parallelEdge_notAllowed
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsParallelEdges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addEdge_parallelEdge_allowsParallelEdges ()
specifier|public
name|void
name|addEdge_parallelEdge_allowsParallelEdges
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsParallelEdges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|,
name|E21
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_orderMismatch ()
specifier|public
name|void
name|addEdge_orderMismatch
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|endpoints
init|=
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|endpoints
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_selfLoop_notAllowed ()
specifier|public
name|void
name|addEdge_selfLoop_notAllowed
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ERROR_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test checks an implementation dependent feature. It tests that the method {@code addEdge}    * will silently add the missing nodes to the graph, then add the edge connecting them. We are not    * using the proxy methods here as we want to test {@code addEdge} when the end-points are not    * elements of the graph.    */
annotation|@
name|Test
DECL|method|addEdge_nodesNotInGraph ()
specifier|public
name|void
name|addEdge_nodesNotInGraph
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|networkAsMutableNetwork
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N5
argument_list|,
name|E15
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|,
name|E41
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|,
name|E23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N5
argument_list|,
name|N4
argument_list|,
name|N2
argument_list|,
name|N3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E15
argument_list|,
name|E41
argument_list|,
name|E23
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N5
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E15
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E41
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E23
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N3
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_selfLoop ()
specifier|public
name|void
name|addEdge_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_existingSelfLoopEdgeBetweenSameNodes ()
specifier|public
name|void
name|addEdge_existingSelfLoopEdgeBetweenSameNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|edges
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_existingEdgeBetweenDifferentNodes_selfLoops ()
specifier|public
name|void
name|addEdge_existingEdgeBetweenDifferentNodes_selfLoops
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reusing an existing self-loop edge to connect different nodes succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_REUSE_EDGE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reusing an existing self-loop edge to make a different self-loop edge succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_REUSE_EDGE
argument_list|)
expr_stmt|;
block|}
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reusing an existing edge to add a self-loop edge between different nodes succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_REUSE_EDGE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addEdge_parallelSelfLoopEdge_notAllowed ()
specifier|public
name|void
name|addEdge_parallelSelfLoopEdge_notAllowed
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsParallelEdges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding a parallel self-loop edge succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addEdge_parallelSelfLoopEdge_allowsParallelEdges ()
specifier|public
name|void
name|addEdge_parallelSelfLoopEdge_allowsParallelEdges
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsParallelEdges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNode_existingNodeWithSelfLoopEdge ()
specifier|public
name|void
name|removeNode_existingNodeWithSelfLoopEdge
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeNode
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_existingSelfLoopEdge ()
specifier|public
name|void
name|removeEdge_existingSelfLoopEdge
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeEdge
argument_list|(
name|E11
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

