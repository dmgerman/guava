begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/** Tests for a directed {@link ConfigurableMutableGraph} with stable incident edge order. */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|ConfigurableDirectedGraphWithStableOrderTest
specifier|public
class|class
name|ConfigurableDirectedGraphWithStableOrderTest
extends|extends
name|ConfigurableSimpleDirectedGraphTest
block|{
annotation|@
name|Override
DECL|method|createGraph ()
specifier|public
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|createGraph
parameter_list|()
block|{
return|return
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|incidentEdgeOrder
argument_list|(
name|ElementOrder
operator|.
name|stable
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Note: Stable order means that the ordering doesn't change between iterations and versions.
comment|// Ideally, the ordering in test should never be updated.
annotation|@
name|Test
DECL|method|edges_returnsInStableOrder ()
specifier|public
name|void
name|edges_returnsInStableOrder
parameter_list|()
block|{
name|populateStarShapedGraph
argument_list|(
name|graphAsMutableGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentNodes_returnsInConnectingEdgeInsertionOrder ()
specifier|public
name|void
name|adjacentNodes_returnsInConnectingEdgeInsertionOrder
parameter_list|()
block|{
name|populateStarShapedGraph
argument_list|(
name|graphAsMutableGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|predecessors_returnsInConnectingEdgeInsertionOrder ()
specifier|public
name|void
name|predecessors_returnsInConnectingEdgeInsertionOrder
parameter_list|()
block|{
name|populateStarShapedGraph
argument_list|(
name|graphAsMutableGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|successors_returnsInConnectingEdgeInsertionOrder ()
specifier|public
name|void
name|successors_returnsInConnectingEdgeInsertionOrder
parameter_list|()
block|{
name|populateStarShapedGraph
argument_list|(
name|graphAsMutableGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|// Note: Stable order means that the ordering doesn't change between iterations and versions.
comment|// Ideally, the ordering in test should never be updated.
annotation|@
name|Test
DECL|method|incidentEdges_returnsInEdgeInsertionOrder ()
specifier|public
name|void
name|incidentEdges_returnsInEdgeInsertionOrder
parameter_list|()
block|{
name|populateStarShapedGraph
argument_list|(
name|graphAsMutableGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|/**    * Populates the given graph with nodes and edges in a star shape with node `1` in the middle.    *    *<p>Note that the edges are added in a shuffled order to properly test the effect of the    * insertion order.    */
DECL|method|populateStarShapedGraph (MutableGraph<Integer> graph)
specifier|private
specifier|static
name|void
name|populateStarShapedGraph
parameter_list|(
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
parameter_list|)
block|{
name|graph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

