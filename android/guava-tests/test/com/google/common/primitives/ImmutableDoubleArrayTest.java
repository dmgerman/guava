begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
operator|.
name|reserialize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ObjectArrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/** @author Kevin Bourrillion */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableDoubleArrayTest
specifier|public
class|class
name|ImmutableDoubleArrayTest
extends|extends
name|TestCase
block|{
comment|// Test all creation paths very lazily: by assuming asList() works
DECL|method|testOf0 ()
specifier|public
name|void
name|testOf0
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf1 ()
specifier|public
name|void
name|testOf1
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testOf2 ()
specifier|public
name|void
name|testOf2
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf3 ()
specifier|public
name|void
name|testOf3
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf4 ()
specifier|public
name|void
name|testOf4
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|,
literal|6.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf5 ()
specifier|public
name|void
name|testOf5
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|,
literal|6.0
argument_list|,
literal|10.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf6 ()
specifier|public
name|void
name|testOf6
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|,
literal|6.0
argument_list|,
literal|10.0
argument_list|,
literal|15.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf7 ()
specifier|public
name|void
name|testOf7
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|21
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|,
literal|6.0
argument_list|,
literal|10.0
argument_list|,
literal|15.0
argument_list|,
literal|21.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_array_empty ()
specifier|public
name|void
name|testCopyOf_array_empty
parameter_list|()
block|{
comment|/*      * We don't guarantee the same-as property, so we aren't obligated to test it. However, it's      * useful in testing - when two things are the same then one can't have bugs the other doesn't.      */
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
operator|new
name|double
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_array_nonempty ()
specifier|public
name|void
name|testCopyOf_array_nonempty
parameter_list|()
block|{
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|3
block|}
decl_stmt|;
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|array
index|[
literal|2
index|]
operator|=
literal|2
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_iterable_notCollection_empty ()
specifier|public
name|void
name|testCopyOf_iterable_notCollection_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Double
argument_list|>
name|iterable
init|=
name|iterable
argument_list|(
name|Collections
operator|.
expr|<
name|Double
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterable_notCollection_nonempty ()
specifier|public
name|void
name|testCopyOf_iterable_notCollection_nonempty
parameter_list|()
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
decl_stmt|;
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|(
name|list
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_iterable_collection_empty ()
specifier|public
name|void
name|testCopyOf_iterable_collection_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Double
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterable_collection_nonempty ()
specifier|public
name|void
name|testCopyOf_iterable_collection_nonempty
parameter_list|()
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
decl_stmt|;
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
operator|(
name|Iterable
argument_list|<
name|Double
argument_list|>
operator|)
name|list
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_empty ()
specifier|public
name|void
name|testCopyOf_collection_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|Double
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_nonempty ()
specifier|public
name|void
name|testCopyOf_collection_nonempty
parameter_list|()
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
decl_stmt|;
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|3.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_presize_zero ()
specifier|public
name|void
name|testBuilder_presize_zero
parameter_list|()
block|{
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
init|=
name|ImmutableDoubleArray
operator|.
name|builder
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|5.0
argument_list|)
expr_stmt|;
name|ImmutableDoubleArray
name|array
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|array
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_presize_negative ()
specifier|public
name|void
name|testBuilder_presize_negative
parameter_list|()
block|{
try|try
block|{
name|ImmutableDoubleArray
operator|.
name|builder
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
comment|/**    * If there's a bug in builder growth, we wouldn't know how to expose it. So, brute force the hell    * out of it for a while and see what happens.    */
DECL|method|testBuilder_bruteForce ()
specifier|public
name|void
name|testBuilder_bruteForce
parameter_list|()
block|{
for|for
control|(
name|double
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
init|=
name|ImmutableDoubleArray
operator|.
name|builder
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|<
literal|1000
condition|)
block|{
name|BuilderOp
name|op
init|=
name|BuilderOp
operator|.
name|randomOp
argument_list|()
decl_stmt|;
name|op
operator|.
name|doIt
argument_list|(
name|builder
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
name|ImmutableDoubleArray
name|iia
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iia
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|iia
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|double
operator|)
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|enum|BuilderOp
specifier|private
enum|enum
name|BuilderOp
block|{
DECL|enumConstant|ADD_ONE
name|ADD_ONE
block|{
annotation|@
name|Override
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ADD_ARRAY
name|ADD_ARRAY
block|{
annotation|@
name|Override
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|counter
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|addAll
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ADD_COLLECTION
name|ADD_COLLECTION
block|{
annotation|@
name|Override
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|num
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|double
operator|)
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ADD_ITERABLE
name|ADD_ITERABLE
block|{
annotation|@
name|Override
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|num
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|double
operator|)
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAll
argument_list|(
name|iterable
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ADD_IIA
name|ADD_IIA
block|{
annotation|@
name|Override
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|counter
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|addAll
argument_list|(
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ADD_LARGER_ARRAY
name|ADD_LARGER_ARRAY
block|{
annotation|@
name|Override
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|+
literal|200
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|counter
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|addAll
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
block|,     ;
DECL|field|values
specifier|static
specifier|final
name|BuilderOp
index|[]
name|values
init|=
name|values
argument_list|()
decl_stmt|;
DECL|method|randomOp ()
specifier|static
name|BuilderOp
name|randomOp
parameter_list|()
block|{
return|return
name|values
index|[
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
return|;
block|}
DECL|method|doIt (ImmutableDoubleArray.Builder builder, AtomicInteger counter)
specifier|abstract
name|void
name|doIt
parameter_list|(
name|ImmutableDoubleArray
operator|.
name|Builder
name|builder
parameter_list|,
name|AtomicInteger
name|counter
parameter_list|)
function_decl|;
block|}
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
DECL|method|testLength ()
specifier|public
name|void
name|testLength
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_good ()
specifier|public
name|void
name|testGet_good
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_bad ()
specifier|public
name|void
name|testGet_bad
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|iia
operator|.
name|get
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iia
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
name|iia
operator|=
name|iia
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|iia
operator|.
name|get
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIndexOf ()
specifier|public
name|void
name|testIndexOf
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|13
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|13
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_specialValues ()
specifier|public
name|void
name|testIndexOf_specialValues
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
operator|-
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
literal|0.0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|indexOf
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastIndexOf ()
specifier|public
name|void
name|testLastIndexOf
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|lastIndexOf
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|lastIndexOf
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|lastIndexOf
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|13
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|13
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|contains
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|13
argument_list|)
operator|.
name|contains
argument_list|(
literal|13
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
operator|.
name|contains
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubArray ()
specifier|public
name|void
name|testSubArray
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia0
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
decl_stmt|;
name|ImmutableDoubleArray
name|iia1
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ImmutableDoubleArray
name|iia3
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|25
argument_list|,
literal|125
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia0
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia1
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia1
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia1
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iia3
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5.0
argument_list|,
literal|25.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|iia3
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|25.0
argument_list|,
literal|125.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
try|try
block|{
name|iia3
operator|.
name|subArray
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iia3
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
comment|/*    * Whenever an implementation uses `instanceof` on a parameter instance, the test has to know that    * (so much for "black box") and try instances that both do and don't pass the check. The "don't"    * half of that is more awkward to arrange...    */
DECL|method|iterable (final Collection<T> collection)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
comment|// return collection::iterator;
return|return
operator|new
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|collection
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|reserialize
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
comment|/**    * This is probably a weird and hacky way to test what we're really trying to test, but hey, it    * caught a bug.    */
DECL|method|testTrimmed ()
specifier|public
name|void
name|testTrimmed
parameter_list|()
block|{
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertDoesntActuallyTrim
argument_list|(
name|iia
argument_list|)
expr_stmt|;
name|assertDoesntActuallyTrim
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertActuallyTrims
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertActuallyTrims
argument_list|(
name|iia
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableDoubleArray
name|rightSized
init|=
name|ImmutableDoubleArray
operator|.
name|builder
argument_list|(
literal|3
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
literal|1
argument_list|)
operator|.
name|add
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertDoesntActuallyTrim
argument_list|(
name|rightSized
argument_list|)
expr_stmt|;
name|ImmutableDoubleArray
name|overSized
init|=
name|ImmutableDoubleArray
operator|.
name|builder
argument_list|(
literal|3
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertActuallyTrims
argument_list|(
name|overSized
argument_list|)
expr_stmt|;
name|ImmutableDoubleArray
name|underSized
init|=
name|ImmutableDoubleArray
operator|.
name|builder
argument_list|(
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
literal|1
argument_list|)
operator|.
name|add
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertActuallyTrims
argument_list|(
name|underSized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|assertThat
argument_list|(
name|reserialize
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reserialize
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|ImmutableDoubleArray
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableDoubleArray
name|iia
init|=
name|ImmutableDoubleArray
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
operator|.
name|subArray
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ImmutableDoubleArray
name|iia2
init|=
name|reserialize
argument_list|(
name|iia
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iia2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|iia
argument_list|)
expr_stmt|;
name|assertDoesntActuallyTrim
argument_list|(
name|iia2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertActuallyTrims (ImmutableDoubleArray iia)
specifier|private
specifier|static
name|void
name|assertActuallyTrims
parameter_list|(
name|ImmutableDoubleArray
name|iia
parameter_list|)
block|{
name|ImmutableDoubleArray
name|trimmed
init|=
name|iia
operator|.
name|trimmed
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|)
operator|.
name|isNotSameAs
argument_list|(
name|iia
argument_list|)
expr_stmt|;
comment|// Yes, this is apparently how you check array equality in Truth
name|assertThat
argument_list|(
name|trimmed
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|iia
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDoesntActuallyTrim (ImmutableDoubleArray iia)
specifier|private
specifier|static
name|void
name|assertDoesntActuallyTrim
parameter_list|(
name|ImmutableDoubleArray
name|iia
parameter_list|)
block|{
name|assertThat
argument_list|(
name|iia
operator|.
name|trimmed
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|iia
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|List
argument_list|<
name|ListTestSuiteBuilder
argument_list|<
name|Double
argument_list|>
argument_list|>
name|builders
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableDoubleArrayAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableDoubleArray.asList"
argument_list|)
argument_list|,
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableDoubleArrayHeadSubListAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableDoubleArray.asList, head subList"
argument_list|)
argument_list|,
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableDoubleArrayTailSubListAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableDoubleArray.asList, tail subList"
argument_list|)
argument_list|,
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableDoubleArrayMiddleSubListAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableDoubleArray.asList, middle subList"
argument_list|)
argument_list|)
decl_stmt|;
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
for|for
control|(
name|ListTestSuiteBuilder
argument_list|<
name|Double
argument_list|>
name|builder
range|:
name|builders
control|)
block|{
name|suite
operator|.
name|addTest
argument_list|(
name|builder
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ZERO
argument_list|,
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|RESTRICTS_ELEMENTS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableDoubleArrayTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|method|makeArray (Double[] values)
specifier|private
specifier|static
name|ImmutableDoubleArray
name|makeArray
parameter_list|(
name|Double
index|[]
name|values
parameter_list|)
block|{
return|return
name|ImmutableDoubleArray
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
comment|// Test generators.  To let the GWT test suite generator access them, they need to be public named
comment|// classes with a public default constructor (not that we run these suites under GWT yet).
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|class|ImmutableDoubleArrayAsListGenerator
specifier|public
specifier|static
specifier|final
class|class
name|ImmutableDoubleArrayAsListGenerator
extends|extends
name|TestDoubleListGenerator
block|{
annotation|@
name|Override
DECL|method|create (Double[] elements)
specifier|protected
name|List
argument_list|<
name|Double
argument_list|>
name|create
parameter_list|(
name|Double
index|[]
name|elements
parameter_list|)
block|{
return|return
name|makeArray
argument_list|(
name|elements
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|class|ImmutableDoubleArrayHeadSubListAsListGenerator
specifier|public
specifier|static
specifier|final
class|class
name|ImmutableDoubleArrayHeadSubListAsListGenerator
extends|extends
name|TestDoubleListGenerator
block|{
annotation|@
name|Override
DECL|method|create (Double[] elements)
specifier|protected
name|List
argument_list|<
name|Double
argument_list|>
name|create
parameter_list|(
name|Double
index|[]
name|elements
parameter_list|)
block|{
name|Double
index|[]
name|suffix
init|=
block|{
name|Double
operator|.
name|MIN_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|Double
index|[]
name|all
init|=
name|concat
argument_list|(
name|elements
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
return|return
name|makeArray
argument_list|(
name|all
argument_list|)
operator|.
name|subArray
argument_list|(
literal|0
argument_list|,
name|elements
operator|.
name|length
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|class|ImmutableDoubleArrayTailSubListAsListGenerator
specifier|public
specifier|static
specifier|final
class|class
name|ImmutableDoubleArrayTailSubListAsListGenerator
extends|extends
name|TestDoubleListGenerator
block|{
annotation|@
name|Override
DECL|method|create (Double[] elements)
specifier|protected
name|List
argument_list|<
name|Double
argument_list|>
name|create
parameter_list|(
name|Double
index|[]
name|elements
parameter_list|)
block|{
name|Double
index|[]
name|prefix
init|=
block|{
literal|86.0
block|,
literal|99.0
block|}
decl_stmt|;
name|Double
index|[]
name|all
init|=
name|concat
argument_list|(
name|prefix
argument_list|,
name|elements
argument_list|)
decl_stmt|;
return|return
name|makeArray
argument_list|(
name|all
argument_list|)
operator|.
name|subArray
argument_list|(
literal|2
argument_list|,
name|elements
operator|.
name|length
operator|+
literal|2
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|class|ImmutableDoubleArrayMiddleSubListAsListGenerator
specifier|public
specifier|static
specifier|final
class|class
name|ImmutableDoubleArrayMiddleSubListAsListGenerator
extends|extends
name|TestDoubleListGenerator
block|{
annotation|@
name|Override
DECL|method|create (Double[] elements)
specifier|protected
name|List
argument_list|<
name|Double
argument_list|>
name|create
parameter_list|(
name|Double
index|[]
name|elements
parameter_list|)
block|{
name|Double
index|[]
name|prefix
init|=
block|{
name|Double
operator|.
name|MIN_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|Double
index|[]
name|suffix
init|=
block|{
literal|86.0
block|,
literal|99.0
block|}
decl_stmt|;
name|Double
index|[]
name|all
init|=
name|concat
argument_list|(
name|concat
argument_list|(
name|prefix
argument_list|,
name|elements
argument_list|)
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
return|return
name|makeArray
argument_list|(
name|all
argument_list|)
operator|.
name|subArray
argument_list|(
literal|2
argument_list|,
name|elements
operator|.
name|length
operator|+
literal|2
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|method|concat (Double[] a, Double[] b)
specifier|private
specifier|static
name|Double
index|[]
name|concat
parameter_list|(
name|Double
index|[]
name|a
parameter_list|,
name|Double
index|[]
name|b
parameter_list|)
block|{
return|return
name|ObjectArrays
operator|.
name|concat
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|Double
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|class|TestDoubleListGenerator
specifier|public
specifier|abstract
specifier|static
class|class
name|TestDoubleListGenerator
implements|implements
name|TestListGenerator
argument_list|<
name|Double
argument_list|>
block|{
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Double
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleDoubles
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|List
argument_list|<
name|Double
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Double
index|[]
name|array
init|=
operator|new
name|Double
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|elements
control|)
block|{
name|array
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|Double
operator|)
name|e
expr_stmt|;
block|}
return|return
name|create
argument_list|(
name|array
argument_list|)
return|;
block|}
comment|/**      * Creates a new collection containing the given elements; implement this method instead of      * {@link #create(Object...)}.      */
DECL|method|create (Double[] elements)
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Double
argument_list|>
name|create
parameter_list|(
name|Double
index|[]
name|elements
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Double
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Double
index|[
name|length
index|]
return|;
block|}
comment|/** Returns the original element list, unchanged. */
annotation|@
name|Override
DECL|method|order (List<Double> insertionOrder)
specifier|public
name|List
argument_list|<
name|Double
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// used only from suite
DECL|class|SampleDoubles
specifier|public
specifier|static
class|class
name|SampleDoubles
extends|extends
name|SampleElements
argument_list|<
name|Double
argument_list|>
block|{
DECL|method|SampleDoubles ()
specifier|public
name|SampleDoubles
parameter_list|()
block|{
name|super
argument_list|(
operator|-
literal|0.0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|*
literal|3.0
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

