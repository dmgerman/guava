begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Base test case class for I/O tests.  *  * @author Chris Nokleberg  * @author Colin Decker  */
end_comment

begin_class
DECL|class|IoTestCase
specifier|public
specifier|abstract
class|class
name|IoTestCase
extends|extends
name|TestCase
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|IoTestCase
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|I18N
specifier|static
specifier|final
name|String
name|I18N
init|=
literal|"\u00CE\u00F1\u0163\u00E9\u0072\u00F1\u00E5\u0163\u00EE\u00F6"
operator|+
literal|"\u00F1\u00E5\u013C\u00EE\u017E\u00E5\u0163\u00EE\u00F6\u00F1"
decl_stmt|;
DECL|field|ASCII
specifier|static
specifier|final
name|String
name|ASCII
init|=
literal|" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
operator|+
literal|"[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
decl_stmt|;
DECL|field|testDir
specifier|private
name|File
name|testDir
decl_stmt|;
DECL|field|tempDir
specifier|private
name|File
name|tempDir
decl_stmt|;
DECL|field|filesToDelete
specifier|private
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|filesToDelete
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
for|for
control|(
name|File
name|file
range|:
name|filesToDelete
control|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|delete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
name|filesToDelete
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getTestDir ()
specifier|private
name|File
name|getTestDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testDir
operator|!=
literal|null
condition|)
block|{
return|return
name|testDir
return|;
block|}
name|URL
name|testFileUrl
init|=
name|IoTestCase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"testdata/i18n.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testFileUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to locate testdata directory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|testFileUrl
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
name|testFileUrl
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|testDir
operator|=
name|testFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
comment|// the testdata directory
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// probably URISyntaxException or IllegalArgumentException
comment|// fall back to copying URLs to files in the testDir == null block below
block|}
block|}
if|if
condition|(
name|testDir
operator|==
literal|null
condition|)
block|{
comment|// testdata resources aren't file:// urls, so create a directory to store them in and then
comment|// copy the resources to the filesystem as needed
name|testDir
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
block|}
return|return
name|testDir
return|;
block|}
comment|/** Returns the file with the given name under the testdata directory. */
DECL|method|getTestFile (String name)
specifier|protected
specifier|final
name|File
name|getTestFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|URL
name|resourceUrl
init|=
name|IoTestCase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"testdata/"
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceUrl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|copy
argument_list|(
name|resourceUrl
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
comment|/**    * Creates a new temp dir for testing. The returned directory and all contents of it will be    * deleted in the tear-down for this test.    */
DECL|method|createTempDir ()
specifier|protected
specifier|final
name|File
name|createTempDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"IoTestCase"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempFile
operator|.
name|delete
argument_list|()
operator|||
operator|!
name|tempFile
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to create temp dir"
argument_list|)
throw|;
block|}
name|filesToDelete
operator|.
name|add
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
return|return
name|tempFile
return|;
block|}
comment|/**    * Gets a temp dir for testing. The returned directory and all contents of it will be deleted in    * the tear-down for this test. Subsequent invocations of this method will return the same    * directory.    */
DECL|method|getTempDir ()
specifier|protected
specifier|final
name|File
name|getTempDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tempDir
operator|==
literal|null
condition|)
block|{
name|tempDir
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
block|}
return|return
name|tempDir
return|;
block|}
comment|/**    * Creates a new temp file in the temp directory returned by {@link #getTempDir()}. The file will    * be deleted in the tear-down for this test.    */
DECL|method|createTempFile ()
specifier|protected
specifier|final
name|File
name|createTempFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
name|getTempDir
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a byte array of length size that has values 0 .. size - 1. */
DECL|method|newPreFilledByteArray (int size)
specifier|static
name|byte
index|[]
name|newPreFilledByteArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|newPreFilledByteArray
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/** Returns a byte array of length size that has values offset .. offset + size - 1. */
DECL|method|newPreFilledByteArray (int offset, int size)
specifier|static
name|byte
index|[]
name|newPreFilledByteArray
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
DECL|method|copy (URL url, File file)
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
name|URL
name|url
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
for|for
control|(
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
init|;
name|read
operator|!=
operator|-
literal|1
condition|;
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|delete (File file)
specifier|private
name|boolean
name|delete
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|delete
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"couldn't delete file: {0}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|}
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

