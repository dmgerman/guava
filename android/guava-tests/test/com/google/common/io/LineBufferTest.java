begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link LineBuffer} and {@link LineReader}.  *  * @author Chris Nokleberg  */
end_comment

begin_class
annotation|@
name|AndroidIncompatible
comment|// occasionally very slow
DECL|class|LineBufferTest
specifier|public
class|class
name|LineBufferTest
extends|extends
name|IoTestCase
block|{
DECL|method|testProcess ()
specifier|public
name|void
name|testProcess
parameter_list|()
throws|throws
name|IOException
block|{
name|bufferHelper
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\r\n"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\n\r"
argument_list|,
literal|"\n"
argument_list|,
literal|"\r"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\r"
argument_list|,
literal|"\r"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\n\n"
argument_list|,
literal|"\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\r\n\r\n"
argument_list|,
literal|"\r\n"
argument_list|,
literal|"\r\n"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\r\r"
argument_list|,
literal|"\r"
argument_list|,
literal|"\r"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\ra\r\n\n\r\r"
argument_list|,
literal|"\r"
argument_list|,
literal|"a\r\n"
argument_list|,
literal|"\n"
argument_list|,
literal|"\r"
argument_list|,
literal|"\r"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"no newlines at all"
argument_list|,
literal|"no newlines at all"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"two lines\nbut no newline at end"
argument_list|,
literal|"two lines\n"
argument_list|,
literal|"but no newline at end"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"\nempty first line\nno newline at end"
argument_list|,
literal|"\n"
argument_list|,
literal|"empty first line\n"
argument_list|,
literal|"no newline at end"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"three\rlines\rno newline at end"
argument_list|,
literal|"three\r"
argument_list|,
literal|"lines\r"
argument_list|,
literal|"no newline at end"
argument_list|)
expr_stmt|;
name|bufferHelper
argument_list|(
literal|"mixed\nline\rendings\r\n"
argument_list|,
literal|"mixed\n"
argument_list|,
literal|"line\r"
argument_list|,
literal|"endings\r\n"
argument_list|)
expr_stmt|;
block|}
DECL|field|CHUNK_SIZES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|CHUNK_SIZES
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
DECL|method|bufferHelper (String input, String... expect)
specifier|private
specifier|static
name|void
name|bufferHelper
parameter_list|(
name|String
name|input
parameter_list|,
name|String
modifier|...
name|expect
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectProcess
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expect
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectRead
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|expectProcess
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|replaceAll
argument_list|(
literal|"[\\r\\n]"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|chunk
range|:
name|CHUNK_SIZES
control|)
block|{
name|chunk
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|chunk
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectProcess
argument_list|,
name|bufferHelper
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectRead
argument_list|,
name|readUsingJava
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectRead
argument_list|,
name|readUsingReader
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectRead
argument_list|,
name|readUsingReader
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|bufferHelper (String input, int chunk)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|bufferHelper
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|chunk
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|LineBuffer
name|lineBuf
init|=
operator|new
name|LineBuffer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|handleLine
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|end
parameter_list|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
operator|+
name|end
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|input
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|off
operator|<
name|chars
operator|.
name|length
condition|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|chars
operator|.
name|length
argument_list|,
name|off
operator|+
name|chunk
argument_list|)
operator|-
name|off
decl_stmt|;
name|lineBuf
operator|.
name|add
argument_list|(
name|chars
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|off
operator|+=
name|len
expr_stmt|;
block|}
name|lineBuf
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
name|lines
return|;
block|}
DECL|method|readUsingJava (String input, int chunk)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readUsingJava
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|chunk
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
name|getChunkedReader
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|lines
return|;
block|}
DECL|method|readUsingReader (String input, int chunk, boolean asReader)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readUsingReader
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|chunk
parameter_list|,
name|boolean
name|asReader
parameter_list|)
throws|throws
name|IOException
block|{
name|Readable
name|readable
init|=
name|asReader
condition|?
name|getChunkedReader
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|)
else|:
name|getChunkedReadable
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|)
decl_stmt|;
name|LineReader
name|r
init|=
operator|new
name|LineReader
argument_list|(
name|readable
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
comment|// Returns a Readable that is *not* a Reader.
DECL|method|getChunkedReadable (String input, int chunk)
specifier|private
specifier|static
name|Readable
name|getChunkedReadable
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|chunk
parameter_list|)
block|{
specifier|final
name|Reader
name|reader
init|=
name|getChunkedReader
argument_list|(
name|input
argument_list|,
name|chunk
argument_list|)
decl_stmt|;
return|return
operator|new
name|Readable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|CharBuffer
name|cbuf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|read
argument_list|(
name|cbuf
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getChunkedReader (String input, final int chunk)
specifier|private
specifier|static
name|Reader
name|getChunkedReader
parameter_list|(
name|String
name|input
parameter_list|,
specifier|final
name|int
name|chunk
parameter_list|)
block|{
return|return
operator|new
name|FilterReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|chunk
argument_list|,
name|len
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

