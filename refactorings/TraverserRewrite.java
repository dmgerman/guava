begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeTraverser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Traverser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|refaster
operator|.
name|annotation
operator|.
name|AfterTemplate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|refaster
operator|.
name|annotation
operator|.
name|BeforeTemplate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|refaster
operator|.
name|annotation
operator|.
name|Placeholder
import|;
end_import

begin_comment
comment|/**  * Refaster rules to rewrite usages of {@code com.google.common.collect.TreeTraverser} in terms of  * {@code com.google.common.graph.Traverser}.  */
end_comment

begin_class
DECL|class|TraverserRewrite
specifier|public
class|class
name|TraverserRewrite
block|{
DECL|class|TreeTraverserPreOrder
specifier|abstract
class|class
name|TreeTraverserPreOrder
parameter_list|<
name|N
parameter_list|>
block|{
annotation|@
name|Placeholder
DECL|method|getChildren (N node)
specifier|abstract
name|Iterable
argument_list|<
name|N
argument_list|>
name|getChildren
parameter_list|(
name|N
name|node
parameter_list|)
function_decl|;
annotation|@
name|BeforeTemplate
DECL|method|before1 (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|before1
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
name|TreeTraverser
operator|.
name|using
argument_list|(
parameter_list|(
name|N
name|node
parameter_list|)
lambda|->
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|preOrderTraversal
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|BeforeTemplate
DECL|method|before2 (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|before2
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
operator|new
name|TreeTraverser
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|N
argument_list|>
name|children
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|getChildren
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
operator|.
name|preOrderTraversal
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|AfterTemplate
DECL|method|after (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|after
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
name|Traverser
operator|.
name|forTree
argument_list|(
parameter_list|(
name|N
name|node
parameter_list|)
lambda|->
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|depthFirstPreOrder
argument_list|(
name|root
argument_list|)
return|;
block|}
block|}
DECL|class|TreeTraverserPostOrder
specifier|abstract
class|class
name|TreeTraverserPostOrder
parameter_list|<
name|N
parameter_list|>
block|{
annotation|@
name|Placeholder
DECL|method|getChildren (N node)
specifier|abstract
name|Iterable
argument_list|<
name|N
argument_list|>
name|getChildren
parameter_list|(
name|N
name|node
parameter_list|)
function_decl|;
annotation|@
name|BeforeTemplate
DECL|method|before1 (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|before1
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
name|TreeTraverser
operator|.
name|using
argument_list|(
parameter_list|(
name|N
name|node
parameter_list|)
lambda|->
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|postOrderTraversal
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|BeforeTemplate
DECL|method|before2 (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|before2
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
operator|new
name|TreeTraverser
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|N
argument_list|>
name|children
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|getChildren
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
operator|.
name|postOrderTraversal
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|AfterTemplate
DECL|method|after (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|after
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
name|Traverser
operator|.
name|forTree
argument_list|(
parameter_list|(
name|N
name|node
parameter_list|)
lambda|->
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|depthFirstPostOrder
argument_list|(
name|root
argument_list|)
return|;
block|}
block|}
DECL|class|TreeTraverserBreadthFirst
specifier|abstract
class|class
name|TreeTraverserBreadthFirst
parameter_list|<
name|N
parameter_list|>
block|{
annotation|@
name|Placeholder
DECL|method|getChildren (N node)
specifier|abstract
name|Iterable
argument_list|<
name|N
argument_list|>
name|getChildren
parameter_list|(
name|N
name|node
parameter_list|)
function_decl|;
annotation|@
name|BeforeTemplate
DECL|method|before1 (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|before1
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
name|TreeTraverser
operator|.
name|using
argument_list|(
parameter_list|(
name|N
name|node
parameter_list|)
lambda|->
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|breadthFirstTraversal
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|BeforeTemplate
DECL|method|before2 (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|before2
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
operator|new
name|TreeTraverser
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|N
argument_list|>
name|children
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|getChildren
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
operator|.
name|breadthFirstTraversal
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|AfterTemplate
DECL|method|after (N root)
name|Iterable
argument_list|<
name|N
argument_list|>
name|after
parameter_list|(
name|N
name|root
parameter_list|)
block|{
return|return
name|Traverser
operator|.
name|forTree
argument_list|(
parameter_list|(
name|N
name|node
parameter_list|)
lambda|->
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|breadthFirst
argument_list|(
name|root
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

