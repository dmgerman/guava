begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * A test for the basic asserts.  *   * @author cgruber@google.com (Christian Edward Gruber)  *  */
end_comment

begin_class
DECL|class|AssertTest
specifier|public
class|class
name|AssertTest
extends|extends
name|TestCase
block|{
DECL|method|testStupidBoilerplateTestToMakeCoberturaShutUp ()
specifier|public
name|void
name|testStupidBoilerplateTestToMakeCoberturaShutUp
parameter_list|()
block|{
operator|new
name|Assert
argument_list|()
expr_stmt|;
block|}
DECL|method|testFail ()
specifier|public
name|void
name|testFail
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to fail as expected."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// success!
block|}
block|}
DECL|method|testFailWithMessage ()
specifier|public
name|void
name|testFailWithMessage
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Message"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to fail as expected."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Message"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Assert.fail threw exception but message was not the expected content."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testAssertTrueSuccessfully ()
specifier|public
name|void
name|testAssertTrueSuccessfully
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertTrueSuccessfullyWithMessage ()
specifier|public
name|void
name|testAssertTrueSuccessfullyWithMessage
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"This message should never appear."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertTrueButFail ()
specifier|public
name|void
name|testAssertTrueButFail
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to throw AssertionFailed exception appropriately."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// success!
block|}
block|}
DECL|method|testAssertTrueButFailWithMessage ()
specifier|public
name|void
name|testAssertTrueButFailWithMessage
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Message"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to throw AssertionFailed exception appropriately."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Message"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Assert.assertTrue threw exception but message was not the expected content."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testAssertFalseSuccessfully ()
specifier|public
name|void
name|testAssertFalseSuccessfully
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"This message should never appear."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertFalseSuccessfullyWithMessage ()
specifier|public
name|void
name|testAssertFalseSuccessfullyWithMessage
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertFalseSuccessfullyButFail ()
specifier|public
name|void
name|testAssertFalseSuccessfullyButFail
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to throw AssertionFailed exception appropriately."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// success!
block|}
block|}
DECL|method|testAssertFalseButFailWithMessage ()
specifier|public
name|void
name|testAssertFalseButFailWithMessage
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Message"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to throw AssertionFailed exception appropriately."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Message"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Assert.assertTrue threw exception but message was not the expected content."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testAssertNullAndSucceed ()
specifier|public
name|void
name|testAssertNullAndSucceed
parameter_list|()
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertNullAndFail ()
specifier|public
name|void
name|testAssertNullAndFail
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
DECL|method|testAssertNotNullAndSucceed ()
specifier|public
name|void
name|testAssertNotNullAndSucceed
parameter_list|()
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertNotNullAndFail ()
specifier|public
name|void
name|testAssertNotNullAndFail
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
block|}
end_class

end_unit

