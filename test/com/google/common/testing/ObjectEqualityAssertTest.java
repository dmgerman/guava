begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * A test for object equality assertions.  *   * @author cgruber@google.com (Christian Edward Gruber)  *  */
end_comment

begin_class
DECL|class|ObjectEqualityAssertTest
specifier|public
class|class
name|ObjectEqualityAssertTest
extends|extends
name|TestCase
block|{
comment|//
comment|// Test Identity/Sameness Assertions
comment|//
DECL|method|testAssertSameSuccessfully ()
specifier|public
name|void
name|testAssertSameSuccessfully
parameter_list|()
block|{
name|Object
name|o1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|o1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSameButFail ()
specifier|public
name|void
name|testAssertSameButFail
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
DECL|method|testAssertNotSameSuccessfully ()
specifier|public
name|void
name|testAssertNotSameSuccessfully
parameter_list|()
block|{
name|Assert
operator|.
name|assertNotSame
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertNotSameButFail ()
specifier|public
name|void
name|testAssertNotSameButFail
parameter_list|()
block|{
try|try
block|{
name|Object
name|o1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|o1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
comment|//
comment|// Test Equality Assertions
comment|//
DECL|method|testEqualsObjectSuccessfullyWithUniqueObjects ()
specifier|public
name|void
name|testEqualsObjectSuccessfullyWithUniqueObjects
parameter_list|()
block|{
name|String
name|s1
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'t'
argument_list|)
operator|.
name|append
argument_list|(
literal|"est"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|s2
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"te"
argument_list|)
operator|.
name|append
argument_list|(
literal|"st"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsObjectSuccessfullyWithIdenticalObjects ()
specifier|public
name|void
name|testEqualsObjectSuccessfullyWithIdenticalObjects
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"test"
decl_stmt|,
name|s2
init|=
name|s1
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsObjectButFailWithUncomparableObjects ()
specifier|public
name|void
name|testEqualsObjectButFailWithUncomparableObjects
parameter_list|()
block|{
name|Object
name|o1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|,
name|o2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
DECL|method|testEqualsObjectButFailWithUniqueComparableObjects ()
specifier|public
name|void
name|testEqualsObjectButFailWithUniqueComparableObjects
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"test1"
decl_stmt|,
name|s2
init|=
literal|"test2"
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
comment|//
comment|// Test Inequality Assertions
comment|//
DECL|method|testNotEqualsObjectSuccessfullyWithUniqueComparableObjects ()
specifier|public
name|void
name|testNotEqualsObjectSuccessfullyWithUniqueComparableObjects
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"test1"
decl_stmt|,
name|s2
init|=
literal|"test2"
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsObjectButFailWithUncomparableObjects ()
specifier|public
name|void
name|testNotEqualsObjectButFailWithUncomparableObjects
parameter_list|()
block|{
name|Object
name|o1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|,
name|o2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsObjectSuccessfullyWithSameObjects ()
specifier|public
name|void
name|testNotEqualsObjectSuccessfullyWithSameObjects
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"test"
decl_stmt|,
name|s2
init|=
name|s1
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
DECL|method|testNotEqualsObjectButFail ()
specifier|public
name|void
name|testNotEqualsObjectButFail
parameter_list|()
block|{
name|String
name|s1
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'t'
argument_list|)
operator|.
name|append
argument_list|(
literal|"est"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|s2
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"te"
argument_list|)
operator|.
name|append
argument_list|(
literal|"st"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Success!
block|}
block|}
block|}
end_class

end_unit

