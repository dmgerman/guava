begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * diOBJECTibuted under the License is diOBJECTibuted on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Equivalences}.  *   * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|EquivalencesTest
specifier|public
class|class
name|EquivalencesTest
extends|extends
name|TestCase
block|{
DECL|field|OBJECT
specifier|private
specifier|static
specifier|final
name|Object
name|OBJECT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|testEquivalenceEqualsEquivalent ()
specifier|public
name|void
name|testEquivalenceEqualsEquivalent
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|equivalent
argument_list|(
name|OBJECT
argument_list|,
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|equivalent
argument_list|(
name|OBJECT
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|equivalent
argument_list|(
literal|null
argument_list|,
name|OBJECT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected a NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEquivalenceEqualsHash ()
specifier|public
name|void
name|testEquivalenceEqualsHash
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|OBJECT
operator|.
name|hashCode
argument_list|()
argument_list|,
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|hash
argument_list|(
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|hash
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected a NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEquivalenceIdentityEquivalent ()
specifier|public
name|void
name|testEquivalenceIdentityEquivalent
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Equivalences
operator|.
name|identity
argument_list|()
operator|.
name|equivalent
argument_list|(
name|OBJECT
argument_list|,
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Equivalences
operator|.
name|identity
argument_list|()
operator|.
name|equivalent
argument_list|(
literal|"x"
argument_list|,
operator|new
name|String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Equivalences
operator|.
name|identity
argument_list|()
operator|.
name|equivalent
argument_list|(
operator|new
name|String
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|equivalent
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Equivalences
operator|.
name|equals
argument_list|()
operator|.
name|equivalent
argument_list|(
literal|null
argument_list|,
name|OBJECT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected a NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEquivalenceIdentityHash ()
specifier|public
name|void
name|testEquivalenceIdentityHash
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|OBJECT
argument_list|)
argument_list|,
name|Equivalences
operator|.
name|identity
argument_list|()
operator|.
name|hash
argument_list|(
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Equivalences
operator|.
name|identity
argument_list|()
operator|.
name|hash
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquivalenceNullAwareEqualsEquivalent ()
specifier|public
name|void
name|testEquivalenceNullAwareEqualsEquivalent
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Equivalences
operator|.
name|nullAwareEquals
argument_list|()
operator|.
name|equivalent
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Equivalences
operator|.
name|nullAwareEquals
argument_list|()
operator|.
name|equivalent
argument_list|(
name|OBJECT
argument_list|,
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Equivalences
operator|.
name|nullAwareEquals
argument_list|()
operator|.
name|equivalent
argument_list|(
name|OBJECT
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquivalenceNullAwareEqualsHash ()
specifier|public
name|void
name|testEquivalenceNullAwareEqualsHash
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|OBJECT
operator|.
name|hashCode
argument_list|()
argument_list|,
name|Equivalences
operator|.
name|nullAwareEquals
argument_list|()
operator|.
name|hash
argument_list|(
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Equivalences
operator|.
name|nullAwareEquals
argument_list|()
operator|.
name|hash
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

