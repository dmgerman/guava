begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|MULTIGRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): Figure out Android JUnit 4 support. Does it work with Gingerbread? @RunWith?
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|GraphEqualsTest
specifier|public
specifier|final
class|class
name|GraphEqualsTest
block|{
DECL|field|N1
specifier|private
specifier|static
specifier|final
name|Integer
name|N1
init|=
literal|1
decl_stmt|;
DECL|field|N2
specifier|private
specifier|static
specifier|final
name|Integer
name|N2
init|=
literal|2
decl_stmt|;
DECL|field|N3
specifier|private
specifier|static
specifier|final
name|Integer
name|N3
init|=
literal|3
decl_stmt|;
DECL|field|E12
specifier|private
specifier|static
specifier|final
name|String
name|E12
init|=
literal|"1-2"
decl_stmt|;
DECL|field|E12_A
specifier|private
specifier|static
specifier|final
name|String
name|E12_A
init|=
literal|"1-2a"
decl_stmt|;
DECL|field|E13
specifier|private
specifier|static
specifier|final
name|String
name|E13
init|=
literal|"1-3"
decl_stmt|;
DECL|enum|GraphType
enum|enum
name|GraphType
block|{
DECL|enumConstant|UNDIRECTED
name|UNDIRECTED
block|,
DECL|enumConstant|DIRECTED
name|DIRECTED
block|,
DECL|enumConstant|HYPER
name|HYPER
comment|// not yet used because we don't yet have a Hypergraph implementation
block|}
DECL|field|graphType
specifier|private
specifier|final
name|GraphType
name|graphType
decl_stmt|;
DECL|field|graph
specifier|private
specifier|final
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|graph
decl_stmt|;
comment|// add parameters: directed/undirected
annotation|@
name|Parameters
DECL|method|parameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|GraphType
operator|.
name|UNDIRECTED
block|}
block|,
block|{
name|GraphType
operator|.
name|DIRECTED
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|GraphEqualsTest (GraphType graphType)
specifier|public
name|GraphEqualsTest
parameter_list|(
name|GraphType
name|graphType
parameter_list|)
block|{
name|this
operator|.
name|graphType
operator|=
name|graphType
expr_stmt|;
name|this
operator|.
name|graph
operator|=
name|createGraph
argument_list|()
expr_stmt|;
block|}
DECL|method|createGraph ()
specifier|private
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|createGraph
parameter_list|()
block|{
return|return
name|createGraph
argument_list|(
name|Graphs
operator|.
name|config
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createGraph (GraphConfig config)
specifier|private
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|createGraph
parameter_list|(
name|GraphConfig
name|config
parameter_list|)
block|{
switch|switch
condition|(
name|graphType
condition|)
block|{
case|case
name|UNDIRECTED
case|:
return|return
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|config
argument_list|)
return|;
case|case
name|DIRECTED
case|:
return|return
name|Graphs
operator|.
name|createDirected
argument_list|(
name|config
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected graph type: "
operator|+
name|graphType
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|equals_nodeSetsDiffer ()
specifier|public
name|void
name|equals_nodeSetsDiffer
parameter_list|()
block|{
name|graph
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g2
init|=
name|createGraph
argument_list|()
decl_stmt|;
name|g2
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|equals
argument_list|(
name|g2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
comment|// Node sets are the same, but edge sets differ.
annotation|@
name|Test
DECL|method|equals_edgeSetsDiffer ()
specifier|public
name|void
name|equals_edgeSetsDiffer
parameter_list|()
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g2
init|=
name|createGraph
argument_list|()
decl_stmt|;
name|g2
operator|.
name|addEdge
argument_list|(
name|E13
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|equals
argument_list|(
name|g2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
comment|// Node/edge sets are the same, but types differ.
annotation|@
name|Test
DECL|method|equals_typesDiffer ()
specifier|public
name|void
name|equals_typesDiffer
parameter_list|()
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// Whatever graphType specifies, pick another type.
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g2
decl_stmt|;
switch|switch
condition|(
name|graphType
condition|)
block|{
case|case
name|UNDIRECTED
case|:
name|g2
operator|=
name|Graphs
operator|.
name|createDirected
argument_list|()
expr_stmt|;
break|break;
case|case
name|DIRECTED
case|:
name|g2
operator|=
name|Graphs
operator|.
name|createUndirected
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected graph type: "
operator|+
name|graphType
argument_list|)
throw|;
block|}
name|g2
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|equals
argument_list|(
name|g2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
comment|// Node/edge sets and graph type are the same, but node/edge connections differ.
annotation|@
name|Test
DECL|method|equals_connectionsDiffer ()
specifier|public
name|void
name|equals_connectionsDiffer
parameter_list|()
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
name|E13
argument_list|,
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g2
init|=
name|createGraph
argument_list|()
decl_stmt|;
comment|// connect E13 to N1 and N2, and E12 to N1 and N3 => not equal
name|g2
operator|.
name|addEdge
argument_list|(
name|E13
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|equals
argument_list|(
name|g2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
comment|// Node/edge sets, graph type, and node/edge connections are the same, but GraphConfigs differ.
comment|// (In this case the graphs are considered equal; the config differences are irrelevant.)
annotation|@
name|Test
DECL|method|equals_configsDiffer ()
specifier|public
name|void
name|equals_configsDiffer
parameter_list|()
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g2
init|=
name|createGraph
argument_list|(
name|MULTIGRAPH
operator|.
name|noSelfLoops
argument_list|()
argument_list|)
decl_stmt|;
name|g2
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|equals
argument_list|(
name|g2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
comment|// Node/edge sets, graph type, and node/edge connections are the same, but edge order differs.
comment|// (In this case the graphs are considered equal; the edge add orderings are irrelevant.)
annotation|@
name|Test
DECL|method|equals_edgeAddOrdersDiffer ()
specifier|public
name|void
name|equals_edgeAddOrdersDiffer
parameter_list|()
block|{
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g1
init|=
name|createGraph
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|g2
init|=
name|createGraph
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// for ug1, add e12 first, then e12_a
name|g1
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|g1
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// for ug2, add e12_a first, then e12
name|g2
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|g1
operator|.
name|equals
argument_list|(
name|g2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

