begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableGraph} and {@link ImmutableGraph.Builder} that are not ready covered by  * {@link StandardImmutableDirectedGraphTest}.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|StandardImmutableGraphAdditionalTest
specifier|public
class|class
name|StandardImmutableGraphAdditionalTest
block|{
annotation|@
name|Test
DECL|method|immutableGraph ()
specifier|public
name|void
name|immutableGraph
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|String
argument_list|>
name|mutableGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|mutableGraph
operator|.
name|addNode
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|ImmutableGraph
argument_list|<
name|String
argument_list|>
name|immutableGraph
init|=
name|ImmutableGraph
operator|.
name|copyOf
argument_list|(
name|mutableGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|immutableGraph
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|MutableValueGraph
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|immutableGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|mutableGraph
argument_list|)
expr_stmt|;
name|mutableGraph
operator|.
name|addNode
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|immutableGraph
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|mutableGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOfImmutableGraph_optimized ()
specifier|public
name|void
name|copyOfImmutableGraph_optimized
parameter_list|()
block|{
name|Graph
argument_list|<
name|String
argument_list|>
name|graph1
init|=
name|ImmutableGraph
operator|.
name|copyOf
argument_list|(
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
operator|<
name|String
operator|>
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Graph
argument_list|<
name|String
argument_list|>
name|graph2
init|=
name|ImmutableGraph
operator|.
name|copyOf
argument_list|(
name|graph1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|graph2
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|graph1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|immutableGraphBuilder_appliesGraphBuilderConfig ()
specifier|public
name|void
name|immutableGraphBuilder_appliesGraphBuilderConfig
parameter_list|()
block|{
name|ImmutableGraph
argument_list|<
name|String
argument_list|>
name|emptyGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|)
operator|.
name|immutable
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emptyGraph
operator|.
name|isDirected
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|emptyGraph
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|emptyGraph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the ImmutableGraph.Builder doesn't change when the creating GraphBuilder changes.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|immutableGraphBuilder_copiesGraphBuilder ()
specifier|public
name|void
name|immutableGraphBuilder_copiesGraphBuilder
parameter_list|()
block|{
name|GraphBuilder
argument_list|<
name|String
argument_list|>
name|graphBuilder
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
operator|<
name|String
operator|>
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableGraph
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|immutableGraphBuilder
init|=
name|graphBuilder
operator|.
name|immutable
argument_list|()
decl_stmt|;
comment|// Update GraphBuilder, but this shouldn't impact immutableGraphBuilder
name|graphBuilder
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
expr|<
name|String
operator|>
name|unordered
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableGraph
argument_list|<
name|String
argument_list|>
name|emptyGraph
init|=
name|immutableGraphBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emptyGraph
operator|.
name|isDirected
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|emptyGraph
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|emptyGraph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_incidentEdgeOrder ()
specifier|public
name|void
name|copyOf_incidentEdgeOrder
parameter_list|()
block|{
name|ImmutableGraph
argument_list|<
name|Object
argument_list|>
name|graph
init|=
name|ImmutableGraph
operator|.
name|copyOf
argument_list|(
name|GraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|stable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_fromUnorderedGraph_incidentEdgeOrder ()
specifier|public
name|void
name|copyOf_fromUnorderedGraph_incidentEdgeOrder
parameter_list|()
block|{
name|ImmutableGraph
argument_list|<
name|Object
argument_list|>
name|graph
init|=
name|ImmutableGraph
operator|.
name|copyOf
argument_list|(
name|GraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|incidentEdgeOrder
argument_list|(
name|ElementOrder
operator|.
name|unordered
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|stable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|immutableGraphBuilder_addNode ()
specifier|public
name|void
name|immutableGraphBuilder_addNode
parameter_list|()
block|{
name|ImmutableGraph
argument_list|<
name|String
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
operator|<
name|String
operator|>
name|immutable
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"A"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|immutableGraphBuilder_putEdgeFromNodes ()
specifier|public
name|void
name|immutableGraphBuilder_putEdgeFromNodes
parameter_list|()
block|{
name|ImmutableGraph
argument_list|<
name|String
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
operator|<
name|String
operator|>
name|immutable
argument_list|()
operator|.
name|putEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|immutableGraphBuilder_putEdgeFromEndpointPair ()
specifier|public
name|void
name|immutableGraphBuilder_putEdgeFromEndpointPair
parameter_list|()
block|{
name|ImmutableGraph
argument_list|<
name|String
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
operator|<
name|String
operator|>
name|immutable
argument_list|()
operator|.
name|putEdge
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

