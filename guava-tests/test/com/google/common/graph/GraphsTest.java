begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|adjacentEdges
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|inducedSubgraph
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|reachableNodes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|transitiveClosure
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Graphs}. Tests assume that the implementation of the method  * {@code addEdge} adds the missing nodes to the graph, then adds the edge between them.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|GraphsTest
specifier|public
class|class
name|GraphsTest
block|{
DECL|field|N1
specifier|private
specifier|static
specifier|final
name|Integer
name|N1
init|=
literal|1
decl_stmt|;
DECL|field|N2
specifier|private
specifier|static
specifier|final
name|Integer
name|N2
init|=
literal|2
decl_stmt|;
DECL|field|N3
specifier|private
specifier|static
specifier|final
name|Integer
name|N3
init|=
literal|3
decl_stmt|;
DECL|field|N4
specifier|private
specifier|static
specifier|final
name|Integer
name|N4
init|=
literal|4
decl_stmt|;
DECL|field|E11
specifier|private
specifier|static
specifier|final
name|String
name|E11
init|=
literal|"1-1"
decl_stmt|;
DECL|field|E11_A
specifier|private
specifier|static
specifier|final
name|String
name|E11_A
init|=
literal|"1-1a"
decl_stmt|;
DECL|field|E12
specifier|private
specifier|static
specifier|final
name|String
name|E12
init|=
literal|"1-2"
decl_stmt|;
DECL|field|E12_A
specifier|private
specifier|static
specifier|final
name|String
name|E12_A
init|=
literal|"1-2a"
decl_stmt|;
DECL|field|E12_B
specifier|private
specifier|static
specifier|final
name|String
name|E12_B
init|=
literal|"1-2b"
decl_stmt|;
DECL|field|E21
specifier|private
specifier|static
specifier|final
name|String
name|E21
init|=
literal|"2-1"
decl_stmt|;
DECL|field|E23
specifier|private
specifier|static
specifier|final
name|String
name|E23
init|=
literal|"2-2"
decl_stmt|;
DECL|field|E13
specifier|private
specifier|static
specifier|final
name|String
name|E13
init|=
literal|"1-3"
decl_stmt|;
DECL|field|E31
specifier|private
specifier|static
specifier|final
name|String
name|E31
init|=
literal|"3-1"
decl_stmt|;
DECL|field|E34
specifier|private
specifier|static
specifier|final
name|String
name|E34
init|=
literal|"3-4"
decl_stmt|;
DECL|field|E44
specifier|private
specifier|static
specifier|final
name|String
name|E44
init|=
literal|"4-4"
decl_stmt|;
DECL|field|NODE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|NODE_COUNT
init|=
literal|20
decl_stmt|;
DECL|field|EDGE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|EDGE_COUNT
init|=
literal|20
decl_stmt|;
comment|// TODO(user): Consider adding both error messages from here and {@link AbstractNetworkTest}
comment|// in one class (may be a utility class for error messages).
DECL|field|ERROR_PARALLEL_EDGE
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_PARALLEL_EDGE
init|=
literal|"connected by a different edge"
decl_stmt|;
DECL|field|ERROR_NEGATIVE_NODE_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_NEGATIVE_NODE_COUNT
init|=
literal|"expected number of nodes can't be negative"
decl_stmt|;
DECL|field|ERROR_NEGATIVE_EDGE_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_NEGATIVE_EDGE_COUNT
init|=
literal|"expected number of edges can't be negative"
decl_stmt|;
DECL|field|ERROR_ADDED_PARALLEL_EDGE
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_ADDED_PARALLEL_EDGE
init|=
literal|"Should not be allowed to add a parallel edge."
decl_stmt|;
DECL|field|ERROR_ADDED_SELF_LOOP
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_ADDED_SELF_LOOP
init|=
literal|"Should not be allowed to add a self-loop edge."
decl_stmt|;
DECL|field|ERROR_SELF_LOOP
specifier|static
specifier|final
name|String
name|ERROR_SELF_LOOP
init|=
literal|"self-loops are not allowed"
decl_stmt|;
annotation|@
name|Test
DECL|method|transitiveClosure_directedGraph ()
specifier|public
name|void
name|transitiveClosure_directedGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedClosure
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|checkTransitiveClosure
argument_list|(
name|directedGraph
argument_list|,
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|transitiveClosure_undirectedGraph ()
specifier|public
name|void
name|transitiveClosure_undirectedGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|undirectedGraph
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedClosure
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|checkTransitiveClosure
argument_list|(
name|undirectedGraph
argument_list|,
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|transitiveClosure_directedPathGraph ()
specifier|public
name|void
name|transitiveClosure_directedPathGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedClosure
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|checkTransitiveClosure
argument_list|(
name|directedGraph
argument_list|,
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|transitiveClosure_undirectedPathGraph ()
specifier|public
name|void
name|transitiveClosure_undirectedPathGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|undirectedGraph
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedClosure
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|checkTransitiveClosure
argument_list|(
name|undirectedGraph
argument_list|,
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|transitiveClosure_directedCycleGraph ()
specifier|public
name|void
name|transitiveClosure_directedCycleGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedClosure
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|checkTransitiveClosure
argument_list|(
name|directedGraph
argument_list|,
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|transitiveClosure_undirectedCycleGraph ()
specifier|public
name|void
name|transitiveClosure_undirectedCycleGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|undirectedGraph
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedClosure
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedClosure
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|checkTransitiveClosure
argument_list|(
name|undirectedGraph
argument_list|,
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parallelEdges_directed ()
specifier|public
name|void
name|parallelEdges_directed
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|directedGraph
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|directedGraph
argument_list|,
name|E12_A
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|directedGraph
argument_list|,
name|E21
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parallelEdges_selfLoop_directed ()
specifier|public
name|void
name|parallelEdges_selfLoop_directed
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|directedGraph
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|directedGraph
argument_list|,
name|E11_A
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parallelEdges_undirected ()
specifier|public
name|void
name|parallelEdges_undirected
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12_A
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E12_A
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E21
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parallelEdges_selfLoop_undirected ()
specifier|public
name|void
name|parallelEdges_selfLoop_undirected
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11_A
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E11_A
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parallelEdges_unmodifiableView ()
specifier|public
name|void
name|parallelEdges_unmodifiableView
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parallelEdges
init|=
name|Graphs
operator|.
name|parallelEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E12
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parallelEdges
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12_A
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_B
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parallelEdges
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12_A
argument_list|,
name|E12_B
argument_list|)
expr_stmt|;
try|try
block|{
name|parallelEdges
operator|.
name|add
argument_list|(
name|E21
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Set returned by parallelEdges() should be unmodifiable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_bothEndpoints ()
specifier|public
name|void
name|adjacentEdges_bothEndpoints
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|,
name|E23
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N1
argument_list|,
name|E31
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|,
name|E34
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|(
name|directedGraph
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E31
argument_list|,
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_selfLoop ()
specifier|public
name|void
name|adjacentEdges_selfLoop
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|,
name|E23
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11_A
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_parallelEdges ()
specifier|public
name|void
name|adjacentEdges_parallelEdges
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_B
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|,
name|E34
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12_A
argument_list|,
name|E12_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_noAdjacentEdges ()
specifier|public
name|void
name|adjacentEdges_noAdjacentEdges
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|,
name|E34
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|(
name|directedGraph
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_unmodifiableView ()
specifier|public
name|void
name|adjacentEdges_unmodifiableView
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|adjacentEdges
init|=
name|adjacentEdges
argument_list|(
name|undirectedGraph
argument_list|,
name|E12
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|,
name|E23
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E23
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N1
argument_list|,
name|E31
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|adjacentEdges
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E23
argument_list|,
name|E31
argument_list|)
expr_stmt|;
try|try
block|{
name|adjacentEdges
operator|.
name|add
argument_list|(
name|E34
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Set returned by adjacentEdges() should be unmodifiable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|inducedSubgraph_Graph ()
specifier|public
name|void
name|inducedSubgraph_Graph
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|nodeSubset
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|N4
argument_list|)
decl_stmt|;
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
comment|// only incident to one node in nodeSubset
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// not incident to any node in nodeSubset
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|expectedSubgraph
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedSubgraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedSubgraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedSubgraph
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inducedSubgraph
argument_list|(
name|directedGraph
argument_list|,
name|nodeSubset
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedSubgraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inducedSubgraph_ValueGraph ()
specifier|public
name|void
name|inducedSubgraph_ValueGraph
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|nodeSubset
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|N4
argument_list|)
decl_stmt|;
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|,
name|E13
argument_list|)
expr_stmt|;
comment|// only incident to one node in nodeSubset
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|,
name|E44
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|"5-6"
argument_list|)
expr_stmt|;
comment|// not incident to any node in nodeSubset
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedSubgraph
init|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedSubgraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|expectedSubgraph
operator|.
name|putEdgeValue
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|expectedSubgraph
operator|.
name|putEdgeValue
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|,
name|E44
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inducedSubgraph
argument_list|(
name|directedGraph
argument_list|,
name|nodeSubset
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedSubgraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inducedSubgraph_Network ()
specifier|public
name|void
name|inducedSubgraph_Network
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|nodeSubset
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|N4
argument_list|)
decl_stmt|;
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|,
name|E13
argument_list|)
expr_stmt|;
comment|// only incident to one node in nodeSubset
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|,
name|E44
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|"5-6"
argument_list|)
expr_stmt|;
comment|// not incident to any node in nodeSubset
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedSubgraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedSubgraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|expectedSubgraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|expectedSubgraph
operator|.
name|addEdge
argument_list|(
name|N4
argument_list|,
name|N4
argument_list|,
name|E44
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inducedSubgraph
argument_list|(
name|directedGraph
argument_list|,
name|nodeSubset
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedSubgraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inducedSubgraph_nodeNotInGraph ()
specifier|public
name|void
name|inducedSubgraph_nodeNotInGraph
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|inducedSubgraph
argument_list|(
name|undirectedGraph
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected getting induced subgraph with node not in original graph"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|copyOf_nullArgument ()
specifier|public
name|void
name|copyOf_nullArgument
parameter_list|()
block|{
try|try
block|{
name|copyOf
argument_list|(
operator|(
name|BasicGraph
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected a null graph"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|copyOf_directedGraph ()
specifier|public
name|void
name|copyOf_directedGraph
parameter_list|()
block|{
name|BasicGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|BasicGraph
argument_list|<
name|Integer
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|directedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|directedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_undirectedGraph ()
specifier|public
name|void
name|copyOf_undirectedGraph
parameter_list|()
block|{
name|BasicGraph
argument_list|<
name|Integer
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|BasicGraph
argument_list|<
name|Integer
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|undirectedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|undirectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_directedValueGraph ()
specifier|public
name|void
name|copyOf_directedValueGraph
parameter_list|()
block|{
name|ValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestValueGraph
argument_list|()
decl_stmt|;
name|ValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|directedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|directedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_undirectedValueGraph ()
specifier|public
name|void
name|copyOf_undirectedValueGraph
parameter_list|()
block|{
name|ValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestValueGraph
argument_list|()
decl_stmt|;
name|ValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|undirectedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|undirectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_directedNetwork ()
specifier|public
name|void
name|copyOf_directedNetwork
parameter_list|()
block|{
name|Network
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestNetwork
argument_list|()
decl_stmt|;
name|Network
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|directedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|directedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_undirectedNetwork ()
specifier|public
name|void
name|copyOf_undirectedNetwork
parameter_list|()
block|{
name|Network
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestNetwork
argument_list|()
decl_stmt|;
name|Network
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|undirectedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|undirectedGraph
argument_list|)
expr_stmt|;
block|}
comment|// Graph creation tests
annotation|@
name|Test
DECL|method|createDirected ()
specifier|public
name|void
name|createDirected
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// By default, parallel edges are not allowed.
try|try
block|{
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
comment|// By default, self-loop edges are allowed.
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected ()
specifier|public
name|void
name|createUndirected
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
comment|// By default, parallel edges are not allowed.
try|try
block|{
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
comment|// By default, self-loop edges are allowed.
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDirected_multigraph ()
specifier|public
name|void
name|createDirected_multigraph
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedMultigraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected_multigraph ()
specifier|public
name|void
name|createUndirected_multigraph
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedMultigraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|,
name|E21
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDirected_expectedNodeCount ()
specifier|public
name|void
name|createDirected_expectedNodeCount
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected_expectedNodeCount ()
specifier|public
name|void
name|createUndirected_expectedNodeCount
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builder_expectedNodeCount_negative ()
specifier|public
name|void
name|builder_expectedNodeCount_negative
parameter_list|()
block|{
try|try
block|{
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NEGATIVE_NODE_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_NEGATIVE_NODE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createDirected_expectedEdgeCount ()
specifier|public
name|void
name|createDirected_expectedEdgeCount
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected_expectedEdgeCount ()
specifier|public
name|void
name|createUndirected_expectedEdgeCount
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builder_expectedEdgeCount_negative ()
specifier|public
name|void
name|builder_expectedEdgeCount_negative
parameter_list|()
block|{
try|try
block|{
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NEGATIVE_EDGE_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_NEGATIVE_EDGE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createDirected_noSelfLoops ()
specifier|public
name|void
name|createDirected_noSelfLoops
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createUndirected_noSelfLoops ()
specifier|public
name|void
name|createUndirected_noSelfLoops
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkTransitiveClosure ( BasicGraph<N> originalGraph, BasicGraph<N> expectedClosure)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|>
name|void
name|checkTransitiveClosure
parameter_list|(
name|BasicGraph
argument_list|<
name|N
argument_list|>
name|originalGraph
parameter_list|,
name|BasicGraph
argument_list|<
name|N
argument_list|>
name|expectedClosure
parameter_list|)
block|{
for|for
control|(
name|N
name|node
range|:
name|originalGraph
operator|.
name|nodes
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|reachableNodes
argument_list|(
name|originalGraph
argument_list|,
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedClosure
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|transitiveClosure
argument_list|(
name|originalGraph
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedClosure
argument_list|)
expr_stmt|;
block|}
DECL|method|buildDirectedTestGraph ()
specifier|private
specifier|static
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|buildDirectedTestGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|BasicGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
return|return
name|directedGraph
return|;
block|}
DECL|method|buildUndirectedTestGraph ()
specifier|private
specifier|static
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|buildUndirectedTestGraph
parameter_list|()
block|{
name|MutableBasicGraph
argument_list|<
name|Integer
argument_list|>
name|undirectedGraph
init|=
name|BasicGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
return|return
name|undirectedGraph
return|;
block|}
DECL|method|buildDirectedTestValueGraph ()
specifier|private
specifier|static
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|buildDirectedTestValueGraph
parameter_list|()
block|{
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
return|return
name|directedGraph
return|;
block|}
DECL|method|buildUndirectedTestValueGraph ()
specifier|private
specifier|static
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|buildUndirectedTestValueGraph
parameter_list|()
block|{
name|MutableValueGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|putEdgeValue
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
comment|// overwrites E12
return|return
name|undirectedGraph
return|;
block|}
DECL|method|buildDirectedTestNetwork ()
specifier|private
specifier|static
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|buildDirectedTestNetwork
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
return|return
name|directedGraph
return|;
block|}
DECL|method|buildUndirectedTestNetwork ()
specifier|private
specifier|static
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|buildUndirectedTestNetwork
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|allowsSelfLoops
argument_list|(
literal|true
argument_list|)
operator|.
name|allowsParallelEdges
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|,
name|E11_A
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12_A
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|,
name|E21
argument_list|)
expr_stmt|;
return|return
name|undirectedGraph
return|;
block|}
block|}
end_class

end_unit

