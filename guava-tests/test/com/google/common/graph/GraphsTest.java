begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|MULTIGRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|addEdge
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|config
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|mergeEdgesFrom
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|mergeNodesFrom
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|oppositeNode
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|Graphs
operator|.
name|selfLoopPredicate
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Graphs}. Tests assume that the implementation of the method  * {@code addEdge} adds the missing nodes to the graph, then adds the edge between them.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|GraphsTest
specifier|public
class|class
name|GraphsTest
block|{
DECL|field|N1
specifier|private
specifier|static
specifier|final
name|Integer
name|N1
init|=
literal|1
decl_stmt|;
DECL|field|N2
specifier|private
specifier|static
specifier|final
name|Integer
name|N2
init|=
literal|2
decl_stmt|;
DECL|field|N3
specifier|private
specifier|static
specifier|final
name|Integer
name|N3
init|=
literal|3
decl_stmt|;
DECL|field|N4
specifier|private
specifier|static
specifier|final
name|Integer
name|N4
init|=
literal|4
decl_stmt|;
DECL|field|E11
specifier|private
specifier|static
specifier|final
name|String
name|E11
init|=
literal|"1-1"
decl_stmt|;
DECL|field|E11_A
specifier|private
specifier|static
specifier|final
name|String
name|E11_A
init|=
literal|"1-1a"
decl_stmt|;
DECL|field|E12
specifier|private
specifier|static
specifier|final
name|String
name|E12
init|=
literal|"1-2"
decl_stmt|;
DECL|field|E12_A
specifier|private
specifier|static
specifier|final
name|String
name|E12_A
init|=
literal|"1-2a"
decl_stmt|;
DECL|field|E21
specifier|private
specifier|static
specifier|final
name|String
name|E21
init|=
literal|"2-1"
decl_stmt|;
DECL|field|E22
specifier|private
specifier|static
specifier|final
name|String
name|E22
init|=
literal|"2-2"
decl_stmt|;
DECL|field|E13
specifier|private
specifier|static
specifier|final
name|String
name|E13
init|=
literal|"1-3"
decl_stmt|;
DECL|field|E44
specifier|private
specifier|static
specifier|final
name|String
name|E44
init|=
literal|"4-4"
decl_stmt|;
DECL|field|NODE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|NODE_COUNT
init|=
literal|20
decl_stmt|;
DECL|field|EDGE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|EDGE_COUNT
init|=
literal|20
decl_stmt|;
comment|// TODO(user): Consider adding both error messages from here and {@link AbstractGraphTest}
comment|// in one class (may be a utility class for error messages).
DECL|field|ERROR_PARALLEL_EDGE
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_PARALLEL_EDGE
init|=
literal|"connected by a different edge"
decl_stmt|;
DECL|field|ERROR_NEGATIVE_NODE_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_NEGATIVE_NODE_COUNT
init|=
literal|"expected number of nodes can't be negative"
decl_stmt|;
DECL|field|ERROR_NEGATIVE_EDGE_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_NEGATIVE_EDGE_COUNT
init|=
literal|"expected number of edges can't be negative"
decl_stmt|;
DECL|field|ERROR_ADDED_PARALLEL_EDGE
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_ADDED_PARALLEL_EDGE
init|=
literal|"Should not be allowed to add a parallel edge."
decl_stmt|;
DECL|field|ERROR_ADDED_SELF_LOOP
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_ADDED_SELF_LOOP
init|=
literal|"Should not be allowed to add a self-loop edge."
decl_stmt|;
DECL|field|ERROR_SELF_LOOP
specifier|static
specifier|final
name|String
name|ERROR_SELF_LOOP
init|=
literal|"self-loops are not allowed"
decl_stmt|;
annotation|@
name|Test
DECL|method|oppositeNode_basic ()
specifier|public
name|void
name|oppositeNode_basic
parameter_list|()
block|{
name|List
argument_list|<
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|testGraphs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createDirected
argument_list|()
argument_list|,
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createUndirected
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|graph
range|:
name|testGraphs
control|)
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|oppositeNode_parallelEdge ()
specifier|public
name|void
name|oppositeNode_parallelEdge
parameter_list|()
block|{
name|List
argument_list|<
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|testGraphs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createDirected
argument_list|(
name|MULTIGRAPH
argument_list|)
argument_list|,
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createUndirected
argument_list|(
name|MULTIGRAPH
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|graph
range|:
name|testGraphs
control|)
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12_A
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12_A
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|oppositeNode_selfLoop ()
specifier|public
name|void
name|oppositeNode_selfLoop
parameter_list|()
block|{
name|List
argument_list|<
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|testGraphs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createDirected
argument_list|()
argument_list|,
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createUndirected
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|graph
range|:
name|testGraphs
control|)
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E11
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|oppositeNode_nodeNotIncident ()
specifier|public
name|void
name|oppositeNode_nodeNotIncident
parameter_list|()
block|{
name|List
argument_list|<
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|testGraphs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createDirected
argument_list|()
argument_list|,
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createUndirected
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Graph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|graph
range|:
name|testGraphs
control|)
block|{
name|graph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
name|E13
argument_list|,
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
try|try
block|{
name|oppositeNode
argument_list|(
name|graph
argument_list|,
name|E12
argument_list|,
name|N3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected oppositeNode() called without a node incident to edge"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|Test
DECL|method|createDirected ()
specifier|public
name|void
name|createDirected
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// By default, parallel edges are not allowed.
try|try
block|{
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
comment|// By default, self-loop edges are allowed.
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected ()
specifier|public
name|void
name|createUndirected
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
comment|// By default, parallel edges are not allowed.
try|try
block|{
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_PARALLEL_EDGE
argument_list|)
expr_stmt|;
block|}
comment|// By default, self-loop edges are allowed.
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDirected_multigraph ()
specifier|public
name|void
name|createDirected_multigraph
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedMultigraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|config
argument_list|()
operator|.
name|multigraph
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedMultigraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected_multigraph ()
specifier|public
name|void
name|createUndirected_multigraph
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedMultigraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|Graphs
operator|.
name|MULTIGRAPH
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedMultigraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|,
name|E12_A
argument_list|,
name|E21
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDirected_expectedNodeCount ()
specifier|public
name|void
name|createDirected_expectedNodeCount
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|config
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected_expectedNodeCount ()
specifier|public
name|void
name|createUndirected_expectedNodeCount
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|config
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|config_expectedNodeCount_negative ()
specifier|public
name|void
name|config_expectedNodeCount_negative
parameter_list|()
block|{
try|try
block|{
name|config
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NEGATIVE_NODE_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_NEGATIVE_NODE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|config_expectedNodeCount_overridden ()
specifier|public
name|void
name|config_expectedNodeCount_overridden
parameter_list|()
block|{
name|GraphConfig
name|oldConfig
init|=
name|config
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldConfig
operator|.
name|getExpectedNodeCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NODE_COUNT
argument_list|)
expr_stmt|;
name|GraphConfig
name|newConfig
init|=
name|oldConfig
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldConfig
operator|.
name|getExpectedNodeCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NODE_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newConfig
operator|.
name|getExpectedNodeCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NODE_COUNT
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDirected_expectedEdgeCount ()
specifier|public
name|void
name|createDirected_expectedEdgeCount
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|config
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUndirected_expectedEdgeCount ()
specifier|public
name|void
name|createUndirected_expectedEdgeCount
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|config
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|undirectedGraph
operator|.
name|edgesConnecting
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|config_expectedEdgeCount_negative ()
specifier|public
name|void
name|config_expectedEdgeCount_negative
parameter_list|()
block|{
try|try
block|{
name|config
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NEGATIVE_EDGE_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_NEGATIVE_EDGE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|config_expectedEdgeCount_overridden ()
specifier|public
name|void
name|config_expectedEdgeCount_overridden
parameter_list|()
block|{
name|GraphConfig
name|oldConfig
init|=
name|config
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldConfig
operator|.
name|getExpectedEdgeCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|EDGE_COUNT
argument_list|)
expr_stmt|;
name|GraphConfig
name|newConfig
init|=
name|oldConfig
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldConfig
operator|.
name|getExpectedEdgeCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|EDGE_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newConfig
operator|.
name|getExpectedEdgeCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|EDGE_COUNT
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDirected_noSelfLoops ()
specifier|public
name|void
name|createDirected_noSelfLoops
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|config
argument_list|()
operator|.
name|noSelfLoops
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createUndirected_noSelfLoops ()
specifier|public
name|void
name|createUndirected_noSelfLoops
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|config
argument_list|()
operator|.
name|noSelfLoops
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|ERROR_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Note that this test works precisely because config() returns a new object every time.
annotation|@
name|Test
DECL|method|config_immutability ()
specifier|public
name|void
name|config_immutability
parameter_list|()
block|{
name|GraphConfig
name|unused
init|=
name|config
argument_list|()
operator|.
name|multigraph
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|config
argument_list|()
operator|.
name|isMultigraph
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|unused
operator|=
name|config
argument_list|()
operator|.
name|expectedNodeCount
argument_list|(
name|NODE_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
argument_list|()
operator|.
name|getExpectedNodeCount
argument_list|()
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|unused
operator|=
name|config
argument_list|()
operator|.
name|expectedEdgeCount
argument_list|(
name|EDGE_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
argument_list|()
operator|.
name|getExpectedEdgeCount
argument_list|()
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|unused
operator|=
name|config
argument_list|()
operator|.
name|noSelfLoops
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|config
argument_list|()
operator|.
name|isSelfLoopsAllowed
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_nullGraph ()
specifier|public
name|void
name|addEdge_nullGraph
parameter_list|()
block|{
try|try
block|{
name|addEdge
argument_list|(
literal|null
argument_list|,
name|E11
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected null graph"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|addEdge_nullNodes ()
specifier|public
name|void
name|addEdge_nullNodes
parameter_list|()
block|{
try|try
block|{
name|addEdge
argument_list|(
name|Graphs
operator|.
name|createDirected
argument_list|()
argument_list|,
name|E11
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected null nodes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|addEdge_tooManyNodes ()
specifier|public
name|void
name|addEdge_tooManyNodes
parameter_list|()
block|{
try|try
block|{
name|addEdge
argument_list|(
name|Graphs
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|createDirected
argument_list|()
argument_list|,
name|E11
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|N3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected adding an edge to a Graph with> 2 nodes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|addEdge_notEnoughNodes ()
specifier|public
name|void
name|addEdge_notEnoughNodes
parameter_list|()
block|{
try|try
block|{
name|addEdge
argument_list|(
name|Graphs
operator|.
name|createDirected
argument_list|()
argument_list|,
name|E11
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected adding an edge to a Graph with< 1 nodes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|addEdge_selfLoop ()
specifier|public
name|void
name|addEdge_selfLoop
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|addEdge
argument_list|(
name|directedGraph
argument_list|,
name|E11
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E11
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|incidentNodes
argument_list|(
name|E11
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_basic ()
specifier|public
name|void
name|addEdge_basic
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|addEdge
argument_list|(
name|directedGraph
argument_list|,
name|E12
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|directedGraph
operator|.
name|incidentNodes
argument_list|(
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_nullArgument ()
specifier|public
name|void
name|copyOf_nullArgument
parameter_list|()
block|{
try|try
block|{
name|copyOf
argument_list|(
operator|(
name|DirectedGraph
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected a null graph"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|copyOf
argument_list|(
operator|(
name|UndirectedGraph
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected a null graph"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|copyOf_directedGraph ()
specifier|public
name|void
name|copyOf_directedGraph
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|directedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|directedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_undirectedGraph ()
specifier|public
name|void
name|copyOf_undirectedGraph
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|copyOf
argument_list|(
name|undirectedGraph
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|undirectedGraph
argument_list|)
expr_stmt|;
block|}
comment|// TODO: add a test for copyOf_hypergraph() once we have a Hypergraph implementation
annotation|@
name|Test
DECL|method|copyOf_filtered_undirected ()
specifier|public
name|void
name|copyOf_filtered_undirected
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|nodePredicate
init|=
name|connectedNodePredicate
argument_list|(
name|undirectedGraph
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|edgePredicate
init|=
name|Predicates
operator|.
name|not
argument_list|(
name|selfLoopPredicate
argument_list|(
name|undirectedGraph
argument_list|)
argument_list|)
decl_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|filteredCopy
init|=
name|copyOf
argument_list|(
name|undirectedGraph
argument_list|,
name|nodePredicate
argument_list|,
name|edgePredicate
argument_list|)
decl_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredCopy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyOf_filtered_directed ()
specifier|public
name|void
name|copyOf_filtered_directed
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|nodePredicate
init|=
name|connectedNodePredicate
argument_list|(
name|directedGraph
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|edgePredicate
init|=
name|Predicates
operator|.
name|not
argument_list|(
name|selfLoopPredicate
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
decl_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|filteredCopy
init|=
name|copyOf
argument_list|(
name|directedGraph
argument_list|,
name|nodePredicate
argument_list|,
name|edgePredicate
argument_list|)
decl_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredCopy
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeNodesFrom_directed ()
specifier|public
name|void
name|mergeNodesFrom_directed
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|mergeNodesFrom
argument_list|(
name|directedGraph
argument_list|,
name|actualGraph
argument_list|)
expr_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeNodesFrom_filtered_directed ()
specifier|public
name|void
name|mergeNodesFrom_filtered_directed
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|nodePredicate
init|=
name|connectedNodePredicate
argument_list|(
name|directedGraph
argument_list|)
decl_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
comment|// ensure that we don't remove nodes that don't pass the predicate
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
comment|// ensure that a pre-existing node is not affected by the merging
name|mergeNodesFrom
argument_list|(
name|directedGraph
argument_list|,
name|actualGraph
argument_list|,
name|nodePredicate
argument_list|)
expr_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|()
decl_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
comment|// N3 is not expected because it's not connected
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeEdgesFrom_directed ()
specifier|public
name|void
name|mergeEdgesFrom_directed
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|mergeEdgesFrom
argument_list|(
name|directedGraph
argument_list|,
name|actualGraph
argument_list|)
expr_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeEdgesFrom_filtered_directed ()
specifier|public
name|void
name|mergeEdgesFrom_filtered_directed
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|buildDirectedTestGraph
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|edgePredicate
init|=
name|Predicates
operator|.
name|not
argument_list|(
name|selfLoopPredicate
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
decl_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
comment|// existing (redundant) self-loops should be retained
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// existing (novel) self-loops should be retained
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E44
argument_list|,
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
comment|// existing self-loops for unrelated nodes should be retained
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// existing edges should be unaffected
name|mergeEdgesFrom
argument_list|(
name|directedGraph
argument_list|,
name|actualGraph
argument_list|,
name|edgePredicate
argument_list|)
expr_stmt|;
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// all pre-existing edges should still be there...
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E44
argument_list|,
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// ...as well as the new ones from the source graph
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeNodesFrom_undirected ()
specifier|public
name|void
name|mergeNodesFrom_undirected
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|()
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|mergeNodesFrom
argument_list|(
name|undirectedGraph
argument_list|,
name|actualGraph
argument_list|)
expr_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|()
decl_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeNodesFrom_filtered_undirected ()
specifier|public
name|void
name|mergeNodesFrom_filtered_undirected
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|nodePredicate
init|=
name|connectedNodePredicate
argument_list|(
name|undirectedGraph
argument_list|)
decl_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|()
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
comment|// ensure that we don't remove nodes that don't pass the predicate
name|actualGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
comment|// ensure that a pre-existing node is not affected by the merging
name|mergeNodesFrom
argument_list|(
name|undirectedGraph
argument_list|,
name|actualGraph
argument_list|,
name|nodePredicate
argument_list|)
expr_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|()
decl_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
comment|// N3 is not expected because it's not connected
name|expectedGraph
operator|.
name|addNode
argument_list|(
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeEdgesFrom_undirected ()
specifier|public
name|void
name|mergeEdgesFrom_undirected
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|mergeEdgesFrom
argument_list|(
name|undirectedGraph
argument_list|,
name|actualGraph
argument_list|)
expr_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeEdgesFrom_filtered_undirected ()
specifier|public
name|void
name|mergeEdgesFrom_filtered_undirected
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|buildUndirectedTestGraph
argument_list|()
decl_stmt|;
name|undirectedGraph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|edgePredicate
init|=
name|Predicates
operator|.
name|not
argument_list|(
name|selfLoopPredicate
argument_list|(
name|undirectedGraph
argument_list|)
argument_list|)
decl_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|actualGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// prepopulate actualGraph to make sure that existing elements don't interfere with the merging
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
comment|// existing (redundant) self-loops should be retained
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// existing (novel) self-loops should be retained
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E44
argument_list|,
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
comment|// existing self-loops for unrelated nodes should be retained
name|actualGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// existing edges should be unaffected
name|mergeEdgesFrom
argument_list|(
name|undirectedGraph
argument_list|,
name|actualGraph
argument_list|,
name|edgePredicate
argument_list|)
expr_stmt|;
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
comment|// all pre-existing edges should still be there...
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E22
argument_list|,
name|N2
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E44
argument_list|,
name|N4
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
comment|// ...as well as the new ones from the source graph
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualGraph
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGraph
argument_list|)
expr_stmt|;
block|}
DECL|method|buildDirectedTestGraph ()
specifier|private
specifier|static
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|buildDirectedTestGraph
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|directedGraph
init|=
name|Graphs
operator|.
name|createDirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E11_A
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
return|return
name|directedGraph
return|;
block|}
DECL|method|buildUndirectedTestGraph ()
specifier|private
specifier|static
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|buildUndirectedTestGraph
parameter_list|()
block|{
name|UndirectedGraph
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|undirectedGraph
init|=
name|Graphs
operator|.
name|createUndirected
argument_list|(
name|MULTIGRAPH
argument_list|)
decl_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E11
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E11_A
argument_list|,
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E12_A
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|undirectedGraph
operator|.
name|addEdge
argument_list|(
name|E21
argument_list|,
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
return|return
name|undirectedGraph
return|;
block|}
DECL|method|connectedNodePredicate (final Graph<N, ?> graph)
specifier|private
specifier|static
parameter_list|<
name|N
parameter_list|>
name|Predicate
argument_list|<
name|N
argument_list|>
name|connectedNodePredicate
parameter_list|(
specifier|final
name|Graph
argument_list|<
name|N
argument_list|,
name|?
argument_list|>
name|graph
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|graph
argument_list|,
literal|"graph"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Predicate
argument_list|<
name|N
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|N
name|node
parameter_list|)
block|{
return|return
name|graph
operator|.
name|degree
argument_list|(
name|node
argument_list|)
operator|>
literal|0
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

