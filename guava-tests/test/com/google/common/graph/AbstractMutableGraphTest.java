begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Abstract base class for testing mutable implementations of {@link Graph}  * interface.  *  *<p>This class is responsible for testing mutation methods. Some test cases are left  * for the subclasses to handle:  *<ul>  *<li>Mutation test cases related to whether the graph is directed or undirected.  *<li>Test cases related to the specific implementation of the mutation methods.  *</ul>  *  */
end_comment

begin_class
DECL|class|AbstractMutableGraphTest
specifier|public
specifier|abstract
class|class
name|AbstractMutableGraphTest
extends|extends
name|AbstractGraphTest
block|{
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addNode (Integer n)
specifier|final
name|boolean
name|addNode
parameter_list|(
name|Integer
name|n
parameter_list|)
block|{
return|return
name|graph
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/**    * Explicitly adds the supplied incident nodes to the graph (they need not be    * elements of the graph), then adds the edge connecting them.    */
annotation|@
name|Override
annotation|@
name|CanIgnoreReturnValue
DECL|method|addEdge (String e, Integer n1, Integer n2)
specifier|final
name|boolean
name|addEdge
parameter_list|(
name|String
name|e
parameter_list|,
name|Integer
name|n1
parameter_list|,
name|Integer
name|n2
parameter_list|)
block|{
name|graph
operator|.
name|addNode
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|n2
argument_list|)
expr_stmt|;
return|return
name|graph
operator|.
name|addEdge
argument_list|(
name|e
argument_list|,
name|n1
argument_list|,
name|n2
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|addNode_newNode ()
specifier|public
name|void
name|addNode_newNode
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|addNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNode_existingNode ()
specifier|public
name|void
name|addNode_existingNode
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|addNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNode_existingNode ()
specifier|public
name|void
name|removeNode_existingNode
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|E41
argument_list|,
name|N4
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|graph
operator|.
name|removeNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E41
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNode_invalidArgument ()
specifier|public
name|void
name|removeNode_invalidArgument
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|graph
operator|.
name|removeNode
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_invalidArgument ()
specifier|public
name|void
name|removeEdge_invalidArgument
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|edges
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|graph
operator|.
name|removeEdge
argument_list|(
name|EDGE_NOT_IN_GRAPH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edges
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

