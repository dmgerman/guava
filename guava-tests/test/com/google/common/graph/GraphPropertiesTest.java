begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphProperties
operator|.
name|isCyclic
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/**  * Tests for {@link GraphProperties}.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|GraphPropertiesTest
specifier|public
class|class
name|GraphPropertiesTest
block|{
annotation|@
name|Test
DECL|method|isCyclic_emptyGraph ()
specifier|public
name|void
name|isCyclic_emptyGraph
parameter_list|()
block|{
name|Graph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_isolatedNodes ()
specifier|public
name|void
name|isCyclic_isolatedNodes
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_oneEdge ()
specifier|public
name|void
name|isCyclic_oneEdge
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_selfLoopEdge ()
specifier|public
name|void
name|isCyclic_selfLoopEdge
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_twoAcyclicEdges ()
specifier|public
name|void
name|isCyclic_twoAcyclicEdges
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_twoCyclicEdges ()
specifier|public
name|void
name|isCyclic_twoCyclicEdges
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_threeAcyclicEdges ()
specifier|public
name|void
name|isCyclic_threeAcyclicEdges
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_threeCyclicEdges ()
specifier|public
name|void
name|isCyclic_threeCyclicEdges
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_disconnectedCyclicGraph ()
specifier|public
name|void
name|isCyclic_disconnectedCyclicGraph
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|addNode
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isCyclic_multipleCycles ()
specifier|public
name|void
name|isCyclic_multipleCycles
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|directedGraph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|directedGraph
operator|.
name|putEdge
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isCyclic
argument_list|(
name|directedGraph
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

