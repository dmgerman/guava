begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|ElementOrder
operator|.
name|insertion
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|ElementOrder
operator|.
name|unordered
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_comment
comment|/**  * Tests for ordering the elements of graphs.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|ElementOrderTest
specifier|public
specifier|final
class|class
name|ElementOrderTest
block|{
comment|// Node order tests
annotation|@
name|Test
DECL|method|nodeOrder_none ()
specifier|public
name|void
name|nodeOrder_none
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|unordered
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|unordered
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nodeOrder_insertion ()
specifier|public
name|void
name|nodeOrder_insertion
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|insertion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addNodes
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|// The default ordering is INSERTION unless otherwise specified.
annotation|@
name|Test
DECL|method|nodeOrder_default ()
specifier|public
name|void
name|nodeOrder_default
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|addNodes
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nodeOrder_natural ()
specifier|public
name|void
name|nodeOrder_natural
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addNodes
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nodeOrder_sorted ()
specifier|public
name|void
name|nodeOrder_sorted
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addNodes
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|// Edge order tests
annotation|@
name|Test
DECL|method|edgeOrder_none ()
specifier|public
name|void
name|edgeOrder_none
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|edgeOrder
argument_list|(
name|unordered
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|unordered
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
block|}
annotation|@
name|Test
DECL|method|edgeOrder_insertion ()
specifier|public
name|void
name|edgeOrder_insertion
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|edgeOrder
argument_list|(
name|insertion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addEdges
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"i"
argument_list|,
literal|"e"
argument_list|,
literal|"p"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
block|}
comment|// The default ordering is INSERTION unless otherwise specified.
annotation|@
name|Test
DECL|method|edgeOrder_default ()
specifier|public
name|void
name|edgeOrder_default
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|addEdges
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"i"
argument_list|,
literal|"e"
argument_list|,
literal|"p"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
block|}
annotation|@
name|Test
DECL|method|edgeOrder_natural ()
specifier|public
name|void
name|edgeOrder_natural
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|edgeOrder
argument_list|(
name|ElementOrder
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addEdges
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"e"
argument_list|,
literal|"i"
argument_list|,
literal|"p"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
block|}
annotation|@
name|Test
DECL|method|edgeOrder_sorted ()
specifier|public
name|void
name|edgeOrder_sorted
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|edgeOrder
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addEdges
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"p"
argument_list|,
literal|"i"
argument_list|,
literal|"e"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|insertion
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
block|}
comment|// Combined node and edge order tests
annotation|@
name|Test
DECL|method|nodeOrderUnorderedandEdgesSorted ()
specifier|public
name|void
name|nodeOrderUnorderedandEdgesSorted
parameter_list|()
block|{
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|unordered
argument_list|()
argument_list|)
operator|.
name|edgeOrder
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addEdges
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"p"
argument_list|,
literal|"i"
argument_list|,
literal|"e"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|unordered
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// Sorting of user-defined classes
annotation|@
name|Test
DECL|method|customComparator ()
specifier|public
name|void
name|customComparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|NonComparableSuperClass
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|NonComparableSuperClass
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|NonComparableSuperClass
name|left
parameter_list|,
name|NonComparableSuperClass
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|value
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|MutableGraph
argument_list|<
name|NonComparableSuperClass
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
name|sorted
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NonComparableSuperClass
name|node1
init|=
operator|new
name|NonComparableSuperClass
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NonComparableSuperClass
name|node3
init|=
operator|new
name|NonComparableSuperClass
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|NonComparableSuperClass
name|node5
init|=
operator|new
name|NonComparableSuperClass
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|NonComparableSuperClass
name|node7
init|=
operator|new
name|NonComparableSuperClass
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node7
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node5
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|node1
argument_list|,
name|node3
argument_list|,
name|node5
argument_list|,
name|node7
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|customComparable ()
specifier|public
name|void
name|customComparable
parameter_list|()
block|{
name|MutableGraph
argument_list|<
name|ComparableSubClass
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|nodeOrder
argument_list|(
name|ElementOrder
operator|.
expr|<
name|ComparableSubClass
operator|>
name|natural
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ComparableSubClass
name|node2
init|=
operator|new
name|ComparableSubClass
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ComparableSubClass
name|node4
init|=
operator|new
name|ComparableSubClass
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|ComparableSubClass
name|node6
init|=
operator|new
name|ComparableSubClass
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|ComparableSubClass
name|node8
init|=
operator|new
name|ComparableSubClass
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node4
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node6
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|node8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|node2
argument_list|,
name|node4
argument_list|,
name|node6
argument_list|,
name|node8
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|addNodes (MutableGraph<Integer> graph)
specifier|private
specifier|static
name|void
name|addNodes
parameter_list|(
name|MutableGraph
argument_list|<
name|Integer
argument_list|>
name|graph
parameter_list|)
block|{
name|graph
operator|.
name|addNode
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|addEdges (MutableNetwork<Integer, String> network)
specifier|private
specifier|static
name|void
name|addEdges
parameter_list|(
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
parameter_list|)
block|{
name|network
operator|.
name|addEdge
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
block|}
DECL|class|NonComparableSuperClass
specifier|private
specifier|static
class|class
name|NonComparableSuperClass
block|{
DECL|field|value
specifier|final
name|Integer
name|value
decl_stmt|;
DECL|method|NonComparableSuperClass (Integer value)
name|NonComparableSuperClass
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"value="
operator|+
name|value
return|;
block|}
block|}
DECL|class|ComparableSubClass
specifier|private
specifier|static
class|class
name|ComparableSubClass
extends|extends
name|NonComparableSuperClass
implements|implements
name|Comparable
argument_list|<
name|NonComparableSuperClass
argument_list|>
block|{
DECL|method|ComparableSubClass (Integer value)
name|ComparableSubClass
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (NonComparableSuperClass other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|NonComparableSuperClass
name|other
parameter_list|)
block|{
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

