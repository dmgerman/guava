begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Chars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|TraverserTest
specifier|public
class|class
name|TraverserTest
block|{
comment|/**    * The undirected graph in the {@link Traverser#breadthFirst(Object)} javadoc:    *    *<pre>{@code    * b ---- a ---- d    * |      |    * |      |    * e ---- c ---- f    * }</pre>    */
DECL|field|JAVADOC_GRAPH
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|JAVADOC_GRAPH
init|=
name|createUndirectedGraph
argument_list|(
literal|"ba"
argument_list|,
literal|"ad"
argument_list|,
literal|"be"
argument_list|,
literal|"ac"
argument_list|,
literal|"ec"
argument_list|,
literal|"cf"
argument_list|)
decl_stmt|;
comment|/**    * A diamond shaped directed graph (arrows going down):    *    *<pre>{@code    *   a    *  / \    * b   c    *  \ /    *   d    * }</pre>    */
DECL|field|DIAMOND_GRAPH
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|DIAMOND_GRAPH
init|=
name|createDirectedGraph
argument_list|(
literal|"ab"
argument_list|,
literal|"ac"
argument_list|,
literal|"bd"
argument_list|,
literal|"cd"
argument_list|)
decl_stmt|;
comment|/**    * Same as {@link #DIAMOND_GRAPH}, but with an extra c->a edge and some self edges:    *    *<pre>{@code    *   a<>    *  / \\    * b   c    *  \ /    *   d<>    * }</pre>    *    * {@code<>} indicates a self-loop    */
DECL|field|MULTI_GRAPH
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|MULTI_GRAPH
init|=
name|createDirectedGraph
argument_list|(
literal|"aa"
argument_list|,
literal|"dd"
argument_list|,
literal|"ab"
argument_list|,
literal|"ac"
argument_list|,
literal|"ca"
argument_list|,
literal|"cd"
argument_list|,
literal|"bd"
argument_list|)
decl_stmt|;
comment|/** A directed graph with a single cycle: a -> b -> c -> d -> a. */
DECL|field|CYCLE_GRAPH
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|CYCLE_GRAPH
init|=
name|createDirectedGraph
argument_list|(
literal|"ab"
argument_list|,
literal|"bc"
argument_list|,
literal|"cd"
argument_list|,
literal|"da"
argument_list|)
decl_stmt|;
comment|/**    * Same as {@link #CYCLE_GRAPH}, but with an extra a->c edge.    *    *<pre>{@code    * |--------------|    * v              |    * a -> b -> c -> d    * |         ^    * |---------|    * }</pre>    */
DECL|field|TWO_CYCLES_GRAPH
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|TWO_CYCLES_GRAPH
init|=
name|createDirectedGraph
argument_list|(
literal|"ab"
argument_list|,
literal|"ac"
argument_list|,
literal|"bc"
argument_list|,
literal|"cd"
argument_list|,
literal|"da"
argument_list|)
decl_stmt|;
comment|/**    * A tree-shaped graph that looks as follows (all edges are directed facing downwards):    *    *<pre>{@code    *        h    *       /|\    *      / | \    *     /  |  \    *    d   e   g    *   /|\      |    *  / | \     |    * a  b  c    f    * }</pre>    */
DECL|field|TREE
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|TREE
init|=
name|createDirectedGraph
argument_list|(
literal|"hd"
argument_list|,
literal|"he"
argument_list|,
literal|"hg"
argument_list|,
literal|"da"
argument_list|,
literal|"db"
argument_list|,
literal|"dc"
argument_list|,
literal|"gf"
argument_list|)
decl_stmt|;
comment|/**    * A graph that is not a tree (for example, it has two antiparallel edge between {@code e} and    * {@code f} and thus has a cycle) but is a valid input to {@link Traverser#forTree} when starting    * e.g. at node {@code a} (all edges without an arrow are directed facing downwards):    *    *<pre>{@code    *     a    *    /    *   b   e<----> f    *  / \ /    * c   d    * }</pre>    */
DECL|field|CYCLIC_GRAPH_CONTAINING_TREE
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|CYCLIC_GRAPH_CONTAINING_TREE
init|=
name|createDirectedGraph
argument_list|(
literal|"ab"
argument_list|,
literal|"bc"
argument_list|,
literal|"bd"
argument_list|,
literal|"ed"
argument_list|,
literal|"ef"
argument_list|,
literal|"fe"
argument_list|)
decl_stmt|;
comment|/**    * A graph that is not a tree (for example, {@code h} is reachable from {@code f} via both {@code    * e} and {@code g}) but is a valid input to {@link Traverser#forTree} when starting e.g. at node    * {@code a} (all edges are directed facing downwards):    *    *<pre>{@code    *     a   f    *    /   / \    *   b   e   g    *  / \ / \ /    * c   d   h    * }</pre>    */
DECL|field|GRAPH_CONTAINING_TREE_AND_DIAMOND
specifier|private
specifier|static
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|GRAPH_CONTAINING_TREE_AND_DIAMOND
init|=
name|createDirectedGraph
argument_list|(
literal|"ab"
argument_list|,
literal|"fe"
argument_list|,
literal|"fg"
argument_list|,
literal|"bc"
argument_list|,
literal|"bd"
argument_list|,
literal|"ed"
argument_list|,
literal|"eh"
argument_list|,
literal|"gh"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_javadocExample_canBeIteratedMultipleTimes ()
specifier|public
name|void
name|forGraph_breadthFirst_javadocExample_canBeIteratedMultipleTimes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|JAVADOC_GRAPH
argument_list|)
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|result
argument_list|,
literal|"abcdef"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|result
argument_list|,
literal|"abcdef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_diamond ()
specifier|public
name|void
name|forGraph_breadthFirst_diamond
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|DIAMOND_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_multiGraph ()
specifier|public
name|void
name|forGraph_breadthFirst_multiGraph
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|MULTI_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cadb"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_cycle ()
specifier|public
name|void
name|forGraph_breadthFirst_cycle
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|CYCLE_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcda"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cdab"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_twoCycles ()
specifier|public
name|void
name|forGraph_breadthFirst_twoCycles
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|TWO_CYCLES_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcda"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cdab"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_tree ()
specifier|public
name|void
name|forGraph_breadthFirst_tree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'h'
argument_list|)
argument_list|,
literal|"hdegabcf"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the elements of the iterable are calculated on the fly. Concretely, that means that    * {@link SuccessorsFunction#successors(Object)} can only be called for a subset of all nodes.    */
annotation|@
name|Test
DECL|method|forGraph_breadthFirst_iterableIsLazy ()
specifier|public
name|void
name|forGraph_breadthFirst_iterableIsLazy
parameter_list|()
block|{
name|RequestSavingGraph
name|graph
init|=
operator|new
name|RequestSavingGraph
argument_list|(
name|DIAMOND_GRAPH
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|graph
argument_list|)
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
comment|// Iterate again to see if calculation is done again
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_javadocExample_canBeIteratedMultipleTimes ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_javadocExample_canBeIteratedMultipleTimes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|JAVADOC_GRAPH
argument_list|)
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|result
argument_list|,
literal|"abecfd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|result
argument_list|,
literal|"abecfd"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_diamond ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_diamond
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|DIAMOND_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abdc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_multigraph ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_multigraph
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|MULTI_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abdc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cabd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_cycle ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_cycle
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|CYCLE_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcda"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cdab"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_twoCycles ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_twoCycles
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|TWO_CYCLES_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcda"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"cdab"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_tree ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_tree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'h'
argument_list|)
argument_list|,
literal|"hdabcegf"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPreOrder_iterableIsLazy ()
specifier|public
name|void
name|forGraph_depthFirstPreOrder_iterableIsLazy
parameter_list|()
block|{
name|RequestSavingGraph
name|graph
init|=
operator|new
name|RequestSavingGraph
argument_list|(
name|DIAMOND_GRAPH
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|graph
argument_list|)
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
comment|// Iterate again to see if calculation is done again
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'b'
argument_list|,
literal|'d'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_javadocExample_canBeIteratedMultipleTimes ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_javadocExample_canBeIteratedMultipleTimes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|JAVADOC_GRAPH
argument_list|)
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|result
argument_list|,
literal|"fcebda"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|result
argument_list|,
literal|"fcebda"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_diamond ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_diamond
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|DIAMOND_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"dbca"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"db"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"dc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_multigraph ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_multigraph
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|MULTI_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"dbca"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"db"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"dbac"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_cycle ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_cycle
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|CYCLE_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"dcba"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"adcb"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"badc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"cbad"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_twoCycles ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_twoCycles
parameter_list|()
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|TWO_CYCLES_GRAPH
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"dcba"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"adcb"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'c'
argument_list|)
argument_list|,
literal|"badc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"cbad"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_tree ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_tree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'h'
argument_list|)
argument_list|,
literal|"abcdefgh"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forGraph_depthFirstPostOrder_iterableIsLazy ()
specifier|public
name|void
name|forGraph_depthFirstPostOrder_iterableIsLazy
parameter_list|()
block|{
name|RequestSavingGraph
name|graph
init|=
operator|new
name|RequestSavingGraph
argument_list|(
name|DIAMOND_GRAPH
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|graph
argument_list|)
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"db"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
comment|// Iterate again to see if calculation is done again
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"db"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'b'
argument_list|,
literal|'d'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|forTree_acceptsDirectedGraph ()
specifier|public
name|void
name|forTree_acceptsDirectedGraph
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableGraph
argument_list|<
name|String
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Traverser
operator|.
name|forTree
argument_list|(
name|graph
argument_list|)
expr_stmt|;
comment|// Does not throw
block|}
annotation|@
name|Test
DECL|method|forTree_withUndirectedGraph_throws ()
specifier|public
name|void
name|forTree_withUndirectedGraph_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableGraph
argument_list|<
name|String
argument_list|>
name|graph
init|=
name|GraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|graph
operator|.
name|putEdge
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
try|try
block|{
name|Traverser
operator|.
name|forTree
argument_list|(
name|graph
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|forTree_acceptsDirectedValueGraph ()
specifier|public
name|void
name|forTree_acceptsDirectedValueGraph
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableValueGraph
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|valueGraph
init|=
name|ValueGraphBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|valueGraph
operator|.
name|putEdgeValue
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Traverser
operator|.
name|forTree
argument_list|(
name|valueGraph
argument_list|)
expr_stmt|;
comment|// Does not throw
block|}
annotation|@
name|Test
DECL|method|forTree_withUndirectedValueGraph_throws ()
specifier|public
name|void
name|forTree_withUndirectedValueGraph_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableValueGraph
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|valueGraph
init|=
name|ValueGraphBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|valueGraph
operator|.
name|putEdgeValue
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
try|try
block|{
name|Traverser
operator|.
name|forTree
argument_list|(
name|valueGraph
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|forTree_acceptsDirectedNetwork ()
specifier|public
name|void
name|forTree_acceptsDirectedNetwork
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableNetwork
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|directed
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Traverser
operator|.
name|forTree
argument_list|(
name|network
argument_list|)
expr_stmt|;
comment|// Does not throw
block|}
annotation|@
name|Test
DECL|method|forTree_withUndirectedNetwork_throws ()
specifier|public
name|void
name|forTree_withUndirectedNetwork_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|MutableNetwork
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|network
init|=
name|NetworkBuilder
operator|.
name|undirected
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|network
operator|.
name|addEdge
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
try|try
block|{
name|Traverser
operator|.
name|forTree
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|forTree_breadthFirst_tree ()
specifier|public
name|void
name|forTree_breadthFirst_tree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'h'
argument_list|)
argument_list|,
literal|"hdegabcf"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_breadthFirst_cyclicGraphContainingTree ()
specifier|public
name|void
name|forTree_breadthFirst_cyclicGraphContainingTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|CYCLIC_GRAPH_CONTAINING_TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_breadthFirst_graphContainingTreeAndDiamond ()
specifier|public
name|void
name|forTree_breadthFirst_graphContainingTreeAndDiamond
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|GRAPH_CONTAINING_TREE_AND_DIAMOND
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|breadthFirst
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_breadthFirst_iterableIsLazy ()
specifier|public
name|void
name|forTree_breadthFirst_iterableIsLazy
parameter_list|()
block|{
name|RequestSavingGraph
name|graph
init|=
operator|new
name|RequestSavingGraph
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|graph
argument_list|)
operator|.
name|breadthFirst
argument_list|(
literal|'h'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"hd"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'h'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
comment|// Iterate again to see if calculation is done again
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"hd"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'h'
argument_list|,
literal|'h'
argument_list|,
literal|'d'
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPreOrder_tree ()
specifier|public
name|void
name|forTree_depthFirstPreOrder_tree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'h'
argument_list|)
argument_list|,
literal|"hdabcegf"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPreOrder_cyclicGraphContainingTree ()
specifier|public
name|void
name|forTree_depthFirstPreOrder_cyclicGraphContainingTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|CYCLIC_GRAPH_CONTAINING_TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPreOrder_graphContainingTreeAndDiamond ()
specifier|public
name|void
name|forTree_depthFirstPreOrder_graphContainingTreeAndDiamond
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|GRAPH_CONTAINING_TREE_AND_DIAMOND
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"bcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPreOrder_iterableIsLazy ()
specifier|public
name|void
name|forTree_depthFirstPreOrder_iterableIsLazy
parameter_list|()
block|{
name|RequestSavingGraph
name|graph
init|=
operator|new
name|RequestSavingGraph
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|graph
argument_list|)
operator|.
name|depthFirstPreOrder
argument_list|(
literal|'h'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"hd"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'h'
argument_list|,
literal|'d'
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
comment|// Iterate again to see if calculation is done again
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"hd"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'h'
argument_list|,
literal|'h'
argument_list|,
literal|'d'
argument_list|,
literal|'d'
argument_list|,
literal|'a'
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPostOrder_tree ()
specifier|public
name|void
name|forTree_depthFirstPostOrder_tree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'h'
argument_list|)
argument_list|,
literal|"abcdefgh"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPostOrder_cyclicGraphContainingTree ()
specifier|public
name|void
name|forTree_depthFirstPostOrder_cyclicGraphContainingTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|CYCLIC_GRAPH_CONTAINING_TREE
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"cdba"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"cdb"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPostOrder_graphContainingTreeAndDiamond ()
specifier|public
name|void
name|forTree_depthFirstPostOrder_graphContainingTreeAndDiamond
parameter_list|()
throws|throws
name|Exception
block|{
name|Traverser
argument_list|<
name|Character
argument_list|>
name|traverser
init|=
name|Traverser
operator|.
name|forTree
argument_list|(
name|GRAPH_CONTAINING_TREE_AND_DIAMOND
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"cdba"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'b'
argument_list|)
argument_list|,
literal|"cdb"
argument_list|)
expr_stmt|;
name|assertEqualCharNodes
argument_list|(
name|traverser
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'d'
argument_list|)
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forTree_depthFirstPostOrder_iterableIsLazy ()
specifier|public
name|void
name|forTree_depthFirstPostOrder_iterableIsLazy
parameter_list|()
block|{
name|RequestSavingGraph
name|graph
init|=
operator|new
name|RequestSavingGraph
argument_list|(
name|TREE
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
init|=
name|Traverser
operator|.
name|forGraph
argument_list|(
name|graph
argument_list|)
operator|.
name|depthFirstPostOrder
argument_list|(
literal|'h'
argument_list|)
decl_stmt|;
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'h'
argument_list|,
literal|'d'
argument_list|,
literal|'a'
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
comment|// Iterate again to see if calculation is done again
name|assertEqualCharNodes
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|requestedNodes
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'h'
argument_list|,
literal|'h'
argument_list|,
literal|'d'
argument_list|,
literal|'d'
argument_list|,
literal|'a'
argument_list|,
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
block|}
DECL|method|createDirectedGraph (String... edges)
specifier|private
specifier|static
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|createDirectedGraph
parameter_list|(
name|String
modifier|...
name|edges
parameter_list|)
block|{
return|return
name|createGraph
argument_list|(
comment|/* directed = */
literal|true
argument_list|,
name|edges
argument_list|)
return|;
block|}
DECL|method|createUndirectedGraph (String... edges)
specifier|private
specifier|static
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|createUndirectedGraph
parameter_list|(
name|String
modifier|...
name|edges
parameter_list|)
block|{
return|return
name|createGraph
argument_list|(
comment|/* directed = */
literal|false
argument_list|,
name|edges
argument_list|)
return|;
block|}
comment|/**    * Creates a graph from a list of node pairs (encoded as strings, e.g. "ab" means that this graph    * has an edge between 'a' and 'b').    *    *<p>The {@code successors} are always returned in alphabetical order.    */
DECL|method|createGraph (boolean directed, String... edges)
specifier|private
specifier|static
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|createGraph
parameter_list|(
name|boolean
name|directed
parameter_list|,
name|String
modifier|...
name|edges
parameter_list|)
block|{
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
name|graphMapBuilder
init|=
name|ImmutableMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|edge
range|:
name|edges
control|)
block|{
name|checkArgument
argument_list|(
name|edge
operator|.
name|length
argument_list|()
operator|==
literal|2
argument_list|,
literal|"Expecting each edge to consist of 2 characters but got %s"
argument_list|,
name|edge
argument_list|)
expr_stmt|;
name|char
name|node1
init|=
name|edge
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|char
name|node2
init|=
name|edge
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|graphMapBuilder
operator|.
name|put
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|directed
condition|)
block|{
name|graphMapBuilder
operator|.
name|put
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ImmutableMultimap
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
name|graphMap
init|=
name|graphMapBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Character
argument_list|>
name|successors
parameter_list|(
name|Character
name|node
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|immutableSortedCopy
argument_list|(
name|graphMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|assertEqualCharNodes (Iterable<Character> result, String expectedCharacters)
specifier|private
specifier|static
name|void
name|assertEqualCharNodes
parameter_list|(
name|Iterable
argument_list|<
name|Character
argument_list|>
name|result
parameter_list|,
name|String
name|expectedCharacters
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Chars
operator|.
name|asList
argument_list|(
name|expectedCharacters
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|class|RequestSavingGraph
specifier|private
specifier|static
class|class
name|RequestSavingGraph
implements|implements
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|delegate
decl_stmt|;
DECL|field|requestedNodes
specifier|final
name|Multiset
argument_list|<
name|Character
argument_list|>
name|requestedNodes
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|method|RequestSavingGraph (SuccessorsFunction<Character> delegate)
name|RequestSavingGraph
parameter_list|(
name|SuccessorsFunction
argument_list|<
name|Character
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|successors (Character node)
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Character
argument_list|>
name|successors
parameter_list|(
name|Character
name|node
parameter_list|)
block|{
name|requestedNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|delegate
operator|.
name|successors
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

