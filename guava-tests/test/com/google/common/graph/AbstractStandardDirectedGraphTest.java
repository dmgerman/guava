begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|GraphConstants
operator|.
name|ENDPOINTS_MISMATCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Abstract base class for testing directed {@link Graph} implementations defined in this package.  */
end_comment

begin_class
DECL|class|AbstractStandardDirectedGraphTest
specifier|public
specifier|abstract
class|class
name|AbstractStandardDirectedGraphTest
extends|extends
name|AbstractGraphTest
block|{
DECL|method|allowsSelfLoops ()
specifier|abstract
name|boolean
name|allowsSelfLoops
parameter_list|()
function_decl|;
DECL|method|incidentEdgeOrder ()
specifier|abstract
name|ElementOrder
argument_list|<
name|Integer
argument_list|>
name|incidentEdgeOrder
parameter_list|()
function_decl|;
annotation|@
name|Override
annotation|@
name|Test
DECL|method|nodes_checkReturnedSetMutability ()
specifier|public
name|void
name|nodes_checkReturnedSetMutability
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|graph
operator|.
name|nodes
argument_list|()
decl_stmt|;
try|try
block|{
name|nodes
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_SET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|adjacentNodes_checkReturnedSetMutability ()
specifier|public
name|void
name|adjacentNodes_checkReturnedSetMutability
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|adjacentNodes
init|=
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|adjacentNodes
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_SET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|adjacentNodes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|predecessors_checkReturnedSetMutability ()
specifier|public
name|void
name|predecessors_checkReturnedSetMutability
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|predecessors
init|=
name|graph
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|predecessors
operator|.
name|add
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_SET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|predecessors
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|successors_checkReturnedSetMutability ()
specifier|public
name|void
name|successors_checkReturnedSetMutability
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|successors
init|=
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|successors
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_SET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|successors
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|incidentEdges_checkReturnedSetMutability ()
specifier|public
name|void
name|incidentEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|incidentEdges
init|=
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
decl_stmt|;
try|try
block|{
name|incidentEdges
operator|.
name|add
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_MODIFIABLE_SET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|incidentEdges
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|predecessors_oneEdge ()
specifier|public
name|void
name|predecessors_oneEdge
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
comment|// Edge direction handled correctly
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|successors_oneEdge ()
specifier|public
name|void
name|successors_oneEdge
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|)
expr_stmt|;
comment|// Edge direction handled correctly
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_oneEdge ()
specifier|public
name|void
name|incidentEdges_oneEdge
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|expectedEndpoints
init|=
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedEndpoints
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedEndpoints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inDegree_oneEdge ()
specifier|public
name|void
name|inDegree_oneEdge
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|inDegree
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Edge direction handled correctly
name|assertThat
argument_list|(
name|graph
operator|.
name|inDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outDegree_oneEdge ()
specifier|public
name|void
name|outDegree_oneEdge
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|outDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Edge direction handled correctly
name|assertThat
argument_list|(
name|graph
operator|.
name|outDegree
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_correct ()
specifier|public
name|void
name|hasEdgeConnecting_correct
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_backwards ()
specifier|public
name|void
name|hasEdgeConnecting_backwards
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_mismatch ()
specifier|public
name|void
name|hasEdgeConnecting_mismatch
parameter_list|()
block|{
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|hasEdgeConnecting
argument_list|(
name|EndpointPair
operator|.
name|unordered
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentNodes_selfLoop ()
specifier|public
name|void
name|adjacentNodes_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|predecessors_selfLoop ()
specifier|public
name|void
name|predecessors_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|successors_selfLoop ()
specifier|public
name|void
name|successors_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_selfLoop ()
specifier|public
name|void
name|incidentEdges_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|degree_selfLoop ()
specifier|public
name|void
name|degree_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|degree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|degree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inDegree_selfLoop ()
specifier|public
name|void
name|inDegree_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|inDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|inDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outDegree_selfLoop ()
specifier|public
name|void
name|outDegree_selfLoop
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|outDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|outDegree
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// Stable order tests
comment|// Note: Stable order means that the ordering doesn't change between iterations and versions.
comment|// Ideally, the ordering in test should never be updated.
annotation|@
name|Test
DECL|method|stableIncidentEdgeOrder_edges_returnsInStableOrder ()
specifier|public
name|void
name|stableIncidentEdgeOrder_edges_returnsInStableOrder
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|incidentEdgeOrder
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|Type
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|populateStarShapedGraph
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder ()
specifier|public
name|void
name|stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|incidentEdgeOrder
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|Type
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|populateStarShapedGraph
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|adjacentNodes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder ()
specifier|public
name|void
name|stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|incidentEdgeOrder
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|Type
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|populateStarShapedGraph
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder ()
specifier|public
name|void
name|stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|incidentEdgeOrder
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|Type
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|populateStarShapedGraph
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder ()
specifier|public
name|void
name|stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|incidentEdgeOrder
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|Type
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|populateStarShapedGraph
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder ()
specifier|public
name|void
name|stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|incidentEdgeOrder
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ElementOrder
operator|.
name|Type
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|incidentEdges
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|EndpointPair
operator|.
name|ordered
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|/**    * Populates the graph with nodes and edges in a star shape with node `1` in the middle.    *    *<p>Note that the edges are added in a shuffled order to properly test the effect of the    * insertion order.    */
DECL|method|populateStarShapedGraph ()
specifier|private
name|void
name|populateStarShapedGraph
parameter_list|()
block|{
name|putEdge
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Element Mutation
annotation|@
name|Test
DECL|method|putEdge_existingNodes ()
specifier|public
name|void
name|putEdge_existingNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Adding nodes initially for safety (insulating from possible future
comment|// modifications to proxy methods)
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdge_existingEdgeBetweenSameNodes ()
specifier|public
name|void
name|putEdge_existingEdgeBetweenSameNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdge_orderMismatch ()
specifier|public
name|void
name|putEdge_orderMismatch
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|endpoints
init|=
name|EndpointPair
operator|.
name|unordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException: "
operator|+
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that the method {@code putEdge} will silently add the missing nodes to the graph, then    * add the edge connecting them. We are not using the proxy methods here as we want to test {@code    * putEdge} when the end-points are not elements of the graph.    */
annotation|@
name|Test
DECL|method|putEdge_nodesNotInGraph ()
specifier|public
name|void
name|putEdge_nodesNotInGraph
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|graphAsMutableGraph
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N5
argument_list|,
name|N4
argument_list|,
name|N2
argument_list|,
name|N3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N3
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N4
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N5
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdge_doesntAllowSelfLoops ()
specifier|public
name|void
name|putEdge_doesntAllowSelfLoops
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_ADDED_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ERROR_SELF_LOOP
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|putEdge_allowsSelfLoops ()
specifier|public
name|void
name|putEdge_allowsSelfLoops
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putEdge_existingSelfLoopEdgeBetweenSameNodes ()
specifier|public
name|void
name|putEdge_existingSelfLoopEdgeBetweenSameNodes
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_antiparallelEdges ()
specifier|public
name|void
name|removeEdge_antiparallelEdges
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|removeEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|removeEdge
argument_list|(
name|N2
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_orderMismatch ()
specifier|public
name|void
name|removeEdge_orderMismatch
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|endpoints
init|=
name|EndpointPair
operator|.
name|unordered
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
decl_stmt|;
try|try
block|{
name|graphAsMutableGraph
operator|.
name|removeEdge
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException: "
operator|+
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|ENDPOINTS_MISMATCH
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|removeNode_existingNodeWithSelfLoopEdge ()
specifier|public
name|void
name|removeNode_existingNodeWithSelfLoopEdge
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|removeNode
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_existingSelfLoopEdge ()
specifier|public
name|void
name|removeEdge_existingSelfLoopEdge
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|putEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graphAsMutableGraph
operator|.
name|removeEdge
argument_list|(
name|N1
argument_list|,
name|N1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

