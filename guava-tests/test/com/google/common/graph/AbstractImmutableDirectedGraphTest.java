begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Abstract base class for testing immutable implementations of the {@link DirectedGraph}  * interface.  *  *<p>This class is testing that all mutation methods called directly  * on the immutable graph will throw {@code UnsupportedOperationException}. Also,  * it tests the builder mutation methods {@code addNode} and {@code addEdge}.  * Any other test cases should be either included in the superclasses or subclasses.  *  */
end_comment

begin_class
DECL|class|AbstractImmutableDirectedGraphTest
specifier|public
specifier|abstract
class|class
name|AbstractImmutableDirectedGraphTest
extends|extends
name|AbstractDirectedGraphTest
block|{
DECL|field|expectedException
annotation|@
name|Rule
specifier|public
specifier|final
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Test
DECL|method|nodes_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|nodes_checkReturnedSetMutability
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|nodes
argument_list|()
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|edges_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|edges_checkReturnedSetMutability
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|edges
argument_list|()
operator|.
name|add
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|incidentEdges_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|incidentEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
operator|.
name|add
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|incidentNodes_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|incidentNodes_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|incidentNodes
argument_list|(
name|E12
argument_list|)
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|adjacentNodes_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|adjacentNodes_checkReturnedSetMutability
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|adjacentEdges_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|adjacentEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|adjacentEdges
argument_list|(
name|E12
argument_list|)
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|edgesConnecting_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|edgesConnecting_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|inEdges_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|inEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|inEdges
argument_list|(
name|N2
argument_list|)
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|outEdges_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|outEdges_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
operator|.
name|add
argument_list|(
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|predecessors_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|predecessors_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|predecessors
argument_list|(
name|N2
argument_list|)
operator|.
name|add
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|successors_checkReturnedSetMutability ()
specifier|public
specifier|final
name|void
name|successors_checkReturnedSetMutability
parameter_list|()
block|{
name|addEdge
argument_list|(
name|E12
argument_list|,
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
operator|.
name|add
argument_list|(
name|N2
argument_list|)
expr_stmt|;
block|}
comment|// Builder mutation methods only support addition, not removal, so these tests would fail.
annotation|@
name|Override
annotation|@
name|Test
DECL|method|removeNode_existingNode ()
specifier|public
name|void
name|removeNode_existingNode
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeNode_existingNode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeNode_invalidArgument ()
specifier|public
name|void
name|removeNode_invalidArgument
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeNode_invalidArgument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|removeEdge_existingEdge ()
specifier|public
name|void
name|removeEdge_existingEdge
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeEdge_existingEdge
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|removeEdge_oneOfMany ()
specifier|public
name|void
name|removeEdge_oneOfMany
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeEdge_oneOfMany
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|removeEdge_invalidArgument ()
specifier|public
name|void
name|removeEdge_invalidArgument
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeEdge_invalidArgument
argument_list|()
expr_stmt|;
block|}
comment|// Test that adding to the graph directly (as opposed to via the proxy methods) is not supported.
annotation|@
name|Test
DECL|method|addNode_immutable ()
specifier|public
name|void
name|addNode_immutable
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addNode
argument_list|(
name|N3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEdge_immutable ()
specifier|public
name|void
name|addEdge_immutable
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
name|E13
argument_list|,
name|N1
argument_list|,
name|N3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

