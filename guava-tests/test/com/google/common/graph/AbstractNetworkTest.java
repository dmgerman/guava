begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.graph
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|ERROR_NODE_NOT_IN_GRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|assertEdgeNotInGraphErrorMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|assertNodeNotInGraphErrorMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|assertStronglyEquivalent
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|graph
operator|.
name|TestUtil
operator|.
name|sanityCheckSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Abstract base class for testing implementations of {@link Network} interface. Network instances  * created for testing should have Integer node and String edge objects.  *  *<p>Test cases that should be handled similarly in any graph implementation are included in this  * class. For example, testing that {@code nodes()} method returns the set of the nodes in the  * graph. The following test cases are left for the subclasses to handle:  *  *<ul>  *<li>Test cases related to whether the graph is directed, undirected, mutable, or immutable.  *<li>Test cases related to the specific implementation of the {@link Network} interface.  *</ul>  *  * TODO(user): Make this class generic (using<N, E>) for all node and edge types.  * TODO(user): Differentiate between directed and undirected edge strings.  */
end_comment

begin_class
DECL|class|AbstractNetworkTest
specifier|public
specifier|abstract
class|class
name|AbstractNetworkTest
block|{
DECL|field|network
name|Network
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|network
decl_stmt|;
comment|/**    * The same reference as {@link #network}, except as a mutable network. This field is null in case    * {@link #createGraph()} didn't return a mutable network.    */
DECL|field|networkAsMutableNetwork
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|networkAsMutableNetwork
decl_stmt|;
DECL|field|N1
specifier|static
specifier|final
name|Integer
name|N1
init|=
literal|1
decl_stmt|;
DECL|field|N2
specifier|static
specifier|final
name|Integer
name|N2
init|=
literal|2
decl_stmt|;
DECL|field|N3
specifier|static
specifier|final
name|Integer
name|N3
init|=
literal|3
decl_stmt|;
DECL|field|N4
specifier|static
specifier|final
name|Integer
name|N4
init|=
literal|4
decl_stmt|;
DECL|field|N5
specifier|static
specifier|final
name|Integer
name|N5
init|=
literal|5
decl_stmt|;
DECL|field|NODE_NOT_IN_GRAPH
specifier|static
specifier|final
name|Integer
name|NODE_NOT_IN_GRAPH
init|=
literal|1000
decl_stmt|;
DECL|field|E11
specifier|static
specifier|final
name|String
name|E11
init|=
literal|"1-1"
decl_stmt|;
DECL|field|E11_A
specifier|static
specifier|final
name|String
name|E11_A
init|=
literal|"1-1a"
decl_stmt|;
DECL|field|E12
specifier|static
specifier|final
name|String
name|E12
init|=
literal|"1-2"
decl_stmt|;
DECL|field|E12_A
specifier|static
specifier|final
name|String
name|E12_A
init|=
literal|"1-2a"
decl_stmt|;
DECL|field|E12_B
specifier|static
specifier|final
name|String
name|E12_B
init|=
literal|"1-2b"
decl_stmt|;
DECL|field|E21
specifier|static
specifier|final
name|String
name|E21
init|=
literal|"2-1"
decl_stmt|;
DECL|field|E13
specifier|static
specifier|final
name|String
name|E13
init|=
literal|"1-3"
decl_stmt|;
DECL|field|E14
specifier|static
specifier|final
name|String
name|E14
init|=
literal|"1-4"
decl_stmt|;
DECL|field|E23
specifier|static
specifier|final
name|String
name|E23
init|=
literal|"2-3"
decl_stmt|;
DECL|field|E31
specifier|static
specifier|final
name|String
name|E31
init|=
literal|"3-1"
decl_stmt|;
DECL|field|E34
specifier|static
specifier|final
name|String
name|E34
init|=
literal|"3-4"
decl_stmt|;
DECL|field|E41
specifier|static
specifier|final
name|String
name|E41
init|=
literal|"4-1"
decl_stmt|;
DECL|field|E15
specifier|static
specifier|final
name|String
name|E15
init|=
literal|"1-5"
decl_stmt|;
DECL|field|EDGE_NOT_IN_GRAPH
specifier|static
specifier|final
name|String
name|EDGE_NOT_IN_GRAPH
init|=
literal|"edgeNotInGraph"
decl_stmt|;
comment|// TODO(user): Consider separating Strings that we've defined here to capture
comment|// identifiable substrings of expected error messages, from Strings that we've defined
comment|// here to provide error messages.
comment|// TODO(user): Some Strings used in the subclasses can be added as static Strings
comment|// here too.
DECL|field|ERROR_PARALLEL_EDGE
specifier|static
specifier|final
name|String
name|ERROR_PARALLEL_EDGE
init|=
literal|"connected by a different edge"
decl_stmt|;
DECL|field|ERROR_REUSE_EDGE
specifier|static
specifier|final
name|String
name|ERROR_REUSE_EDGE
init|=
literal|"it cannot be reused to connect"
decl_stmt|;
DECL|field|ERROR_MODIFIABLE_COLLECTION
specifier|static
specifier|final
name|String
name|ERROR_MODIFIABLE_COLLECTION
init|=
literal|"Collection returned is unexpectedly modifiable"
decl_stmt|;
DECL|field|ERROR_SELF_LOOP
specifier|static
specifier|final
name|String
name|ERROR_SELF_LOOP
init|=
literal|"self-loops are not allowed"
decl_stmt|;
DECL|field|ERROR_EDGE_NOT_IN_GRAPH
specifier|static
specifier|final
name|String
name|ERROR_EDGE_NOT_IN_GRAPH
init|=
literal|"Should not be allowed to pass an edge that is not an element of the graph."
decl_stmt|;
DECL|field|ERROR_ADDED_SELF_LOOP
specifier|static
specifier|final
name|String
name|ERROR_ADDED_SELF_LOOP
init|=
literal|"Should not be allowed to add a self-loop edge."
decl_stmt|;
DECL|field|ERROR_ADDED_PARALLEL_EDGE
specifier|static
specifier|final
name|String
name|ERROR_ADDED_PARALLEL_EDGE
init|=
literal|"Should not be allowed to add a parallel edge."
decl_stmt|;
DECL|field|ERROR_ADDED_EXISTING_EDGE
specifier|static
specifier|final
name|String
name|ERROR_ADDED_EXISTING_EDGE
init|=
literal|"Reusing an existing edge to connect different nodes succeeded"
decl_stmt|;
comment|/** Creates and returns an instance of the graph to be tested. */
DECL|method|createGraph ()
specifier|public
specifier|abstract
name|Network
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|createGraph
parameter_list|()
function_decl|;
comment|/**    * A proxy method that adds the node {@code n} to the graph being tested. In case of Immutable    * graph implementations, this method should replace {@link #network} with a new graph that    * includes this node.    */
DECL|method|addNode (Integer n)
specifier|abstract
name|void
name|addNode
parameter_list|(
name|Integer
name|n
parameter_list|)
function_decl|;
comment|/**    * A proxy method that adds the edge {@code e} to the graph being tested. In case of Immutable    * graph implementations, this method should replace {@link #network} with a new graph that    * includes this edge.    */
DECL|method|addEdge (Integer n1, Integer n2, String e)
specifier|abstract
name|void
name|addEdge
parameter_list|(
name|Integer
name|n1
parameter_list|,
name|Integer
name|n2
parameter_list|,
name|String
name|e
parameter_list|)
function_decl|;
DECL|method|addEdge (EndpointPair<Integer> endpoints, String e)
specifier|final
name|void
name|addEdge
parameter_list|(
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|endpoints
parameter_list|,
name|String
name|e
parameter_list|)
block|{
name|addEdge
argument_list|(
name|endpoints
operator|.
name|nodeU
argument_list|()
argument_list|,
name|endpoints
operator|.
name|nodeV
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|graphIsMutable ()
specifier|final
name|boolean
name|graphIsMutable
parameter_list|()
block|{
return|return
name|networkAsMutableNetwork
operator|!=
literal|null
return|;
block|}
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|network
operator|=
name|createGraph
argument_list|()
expr_stmt|;
if|if
condition|(
name|network
operator|instanceof
name|MutableNetwork
condition|)
block|{
name|networkAsMutableNetwork
operator|=
operator|(
name|MutableNetwork
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
operator|)
name|network
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|validateNetworkState ()
specifier|public
name|void
name|validateNetworkState
parameter_list|()
block|{
name|validateNetwork
argument_list|(
name|network
argument_list|)
expr_stmt|;
block|}
DECL|method|validateNetwork (Network<N, E> network)
specifier|static
parameter_list|<
name|N
parameter_list|,
name|E
parameter_list|>
name|void
name|validateNetwork
parameter_list|(
name|Network
argument_list|<
name|N
argument_list|,
name|E
argument_list|>
name|network
parameter_list|)
block|{
name|assertStronglyEquivalent
argument_list|(
name|network
argument_list|,
name|Graphs
operator|.
name|copyOf
argument_list|(
name|network
argument_list|)
argument_list|)
expr_stmt|;
name|assertStronglyEquivalent
argument_list|(
name|network
argument_list|,
name|ImmutableNetwork
operator|.
name|copyOf
argument_list|(
name|network
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|networkString
init|=
name|network
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|networkString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"isDirected: "
operator|+
name|network
operator|.
name|isDirected
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"allowsParallelEdges: "
operator|+
name|network
operator|.
name|allowsParallelEdges
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkString
argument_list|)
operator|.
name|contains
argument_list|(
literal|"allowsSelfLoops: "
operator|+
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nodeStart
init|=
name|networkString
operator|.
name|indexOf
argument_list|(
literal|"nodes:"
argument_list|)
decl_stmt|;
name|int
name|edgeStart
init|=
name|networkString
operator|.
name|indexOf
argument_list|(
literal|"edges:"
argument_list|)
decl_stmt|;
name|String
name|nodeString
init|=
name|networkString
operator|.
name|substring
argument_list|(
name|nodeStart
argument_list|,
name|edgeStart
argument_list|)
decl_stmt|;
name|String
name|edgeString
init|=
name|networkString
operator|.
name|substring
argument_list|(
name|edgeStart
argument_list|)
decl_stmt|;
name|Graph
argument_list|<
name|N
argument_list|>
name|asGraph
init|=
name|network
operator|.
name|asGraph
argument_list|()
decl_stmt|;
name|AbstractGraphTest
operator|.
name|validateGraph
argument_list|(
name|asGraph
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|asGraph
operator|.
name|edges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodeOrder
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|nodeOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|isDirected
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|isDirected
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|allowsSelfLoops
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|E
name|edge
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
control|)
block|{
comment|// TODO(b/27817069): Consider verifying the edge's incident nodes in the string.
name|assertThat
argument_list|(
name|edgeString
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|EndpointPair
argument_list|<
name|N
argument_list|>
name|endpointPair
init|=
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
decl_stmt|;
name|N
name|nodeU
init|=
name|endpointPair
operator|.
name|nodeU
argument_list|()
decl_stmt|;
name|N
name|nodeV
init|=
name|endpointPair
operator|.
name|nodeV
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|asGraph
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|EndpointPair
operator|.
name|of
argument_list|(
name|network
argument_list|,
name|nodeU
argument_list|,
name|nodeV
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|nodeU
argument_list|,
name|nodeV
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|nodeU
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|nodeV
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|nodeU
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|nodeV
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|nodeU
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|nodeU
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|nodeV
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|nodeU
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|nodeV
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|nodeU
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|nodeV
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|nodeV
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
for|for
control|(
name|N
name|incidentNode
range|:
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|incidentNode
argument_list|)
expr_stmt|;
for|for
control|(
name|E
name|adjacentEdge
range|:
name|network
operator|.
name|incidentEdges
argument_list|(
name|incidentNode
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|edge
operator|.
name|equals
argument_list|(
name|adjacentEdge
argument_list|)
operator|||
name|network
operator|.
name|adjacentEdges
argument_list|(
name|edge
argument_list|)
operator|.
name|contains
argument_list|(
name|adjacentEdge
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|N
name|node
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|nodeString
argument_list|)
operator|.
name|contains
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|asGraph
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|selfLoopCount
init|=
name|network
operator|.
name|edgesConnecting
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|selfLoopCount
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|degree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|network
operator|.
name|isDirected
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|selfLoopCount
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
operator|+
name|network
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|network
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inDegree
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|degree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outDegree
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|network
operator|.
name|degree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|N
name|otherNode
range|:
name|network
operator|.
name|nodes
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|edgesConnecting
init|=
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|edgesConnecting
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|assertThat
argument_list|(
name|network
operator|.
name|edgeConnectingOrNull
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|E
name|edge
init|=
name|edgesConnecting
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeConnectingOrNull
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
break|break;
default|default:
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|network
operator|.
name|edgeConnectingOrNull
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{             }
try|try
block|{
name|network
operator|.
name|edgeConnecting
argument_list|(
name|node
argument_list|,
name|otherNode
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{             }
block|}
name|boolean
name|isSelfLoop
init|=
name|node
operator|.
name|equals
argument_list|(
name|otherNode
argument_list|)
decl_stmt|;
name|boolean
name|connected
init|=
operator|!
name|edgesConnecting
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|network
operator|.
name|isDirected
argument_list|()
operator|||
operator|!
name|isSelfLoop
condition|)
block|{
name|assertThat
argument_list|(
name|edgesConnecting
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Sets
operator|.
name|intersection
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|,
name|network
operator|.
name|inEdges
argument_list|(
name|otherNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|network
operator|.
name|allowsParallelEdges
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|edgesConnecting
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|network
operator|.
name|allowsSelfLoops
argument_list|()
operator|&&
name|isSelfLoop
condition|)
block|{
name|assertThat
argument_list|(
name|connected
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
operator|.
name|contains
argument_list|(
name|otherNode
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|connected
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|otherNode
argument_list|)
operator|.
name|contains
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|connected
argument_list|)
expr_stmt|;
for|for
control|(
name|E
name|edge
range|:
name|edgesConnecting
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|edge
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|EndpointPair
operator|.
name|of
argument_list|(
name|network
argument_list|,
name|node
argument_list|,
name|otherNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|otherNode
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|N
name|adjacentNode
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
operator|.
name|contains
argument_list|(
name|adjacentNode
argument_list|)
operator|||
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
operator|.
name|contains
argument_list|(
name|adjacentNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|network
operator|.
name|edgesConnecting
argument_list|(
name|node
argument_list|,
name|adjacentNode
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|network
operator|.
name|edgesConnecting
argument_list|(
name|adjacentNode
argument_list|,
name|node
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|N
name|predecessor
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|predecessor
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|predecessor
argument_list|,
name|node
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|N
name|successor
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|successor
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|node
argument_list|,
name|successor
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|E
name|incidentEdge
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
operator|.
name|contains
argument_list|(
name|incidentEdge
argument_list|)
operator|||
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
operator|.
name|contains
argument_list|(
name|incidentEdge
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|incidentEdge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|incidentEdge
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|E
name|inEdge
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|inEdge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|inEdge
argument_list|)
operator|.
name|adjacentNode
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|inEdge
argument_list|)
expr_stmt|;
if|if
condition|(
name|network
operator|.
name|isDirected
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|inEdge
argument_list|)
operator|.
name|target
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|E
name|outEdge
range|:
name|sanityCheckSet
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|node
argument_list|)
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|outEdge
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|outEdge
argument_list|)
operator|.
name|adjacentNode
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|outEdge
argument_list|)
expr_stmt|;
if|if
condition|(
name|network
operator|.
name|isDirected
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|outEdge
argument_list|)
operator|.
name|source
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Verifies that the {@code Set} returned by {@code nodes} has the expected mutability property    * (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|nodes_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|nodes_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code edges} has the expected mutability property    * (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|edges_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|edges_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code incidentEdges} has the expected mutability    * property (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|incidentEdges_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|incidentEdges_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code adjacentNodes} has the expected mutability    * property (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|adjacentNodes_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|adjacentNodes_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code adjacentEdges} has the expected mutability    * property (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|adjacentEdges_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|adjacentEdges_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code edgesConnecting} has the expected mutability    * property (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|edgesConnecting_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|edgesConnecting_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code inEdges} has the expected mutability property    * (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|inEdges_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|inEdges_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code outEdges} has the expected mutability property    * (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|outEdges_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|outEdges_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code predecessors} has the expected mutability    * property (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|predecessors_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|predecessors_checkReturnedSetMutability
parameter_list|()
function_decl|;
comment|/**    * Verifies that the {@code Set} returned by {@code successors} has the expected mutability    * property (see the {@code Network} documentation for more information).    */
annotation|@
name|Test
DECL|method|successors_checkReturnedSetMutability ()
specifier|public
specifier|abstract
name|void
name|successors_checkReturnedSetMutability
parameter_list|()
function_decl|;
annotation|@
name|Test
DECL|method|nodes_oneNode ()
specifier|public
name|void
name|nodes_oneNode
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nodes_noNodes ()
specifier|public
name|void
name|nodes_noNodes
parameter_list|()
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edges_oneEdge ()
specifier|public
name|void
name|edges_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edges_noEdges ()
specifier|public
name|void
name|edges_noEdges
parameter_list|()
block|{
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Network with no edges, given disconnected nodes
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_oneEdge ()
specifier|public
name|void
name|incidentEdges_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_isolatedNode ()
specifier|public
name|void
name|incidentEdges_isolatedNode
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentEdges_nodeNotInGraph ()
specifier|public
name|void
name|incidentEdges_nodeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|incidentEdges
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|incidentNodes_oneEdge ()
specifier|public
name|void
name|incidentNodes_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|incidentNodes
argument_list|(
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|incidentNodes_edgeNotInGraph ()
specifier|public
name|void
name|incidentNodes_edgeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|incidentNodes
argument_list|(
name|EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEdgeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|adjacentNodes_oneEdge ()
specifier|public
name|void
name|adjacentNodes_oneEdge
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|N2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentNodes_noAdjacentNodes ()
specifier|public
name|void
name|adjacentNodes_noAdjacentNodes
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentNodes_nodeNotInGraph ()
specifier|public
name|void
name|adjacentNodes_nodeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|adjacentNodes
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_bothEndpoints ()
specifier|public
name|void
name|adjacentEdges_bothEndpoints
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N2
argument_list|,
name|N3
argument_list|,
name|E23
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N1
argument_list|,
name|E31
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|,
name|E34
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentEdges
argument_list|(
name|E12
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E31
argument_list|,
name|E23
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_noAdjacentEdges ()
specifier|public
name|void
name|adjacentEdges_noAdjacentEdges
parameter_list|()
block|{
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N3
argument_list|,
name|N4
argument_list|,
name|E34
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|adjacentEdges
argument_list|(
name|E12
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adjacentEdges_edgeNotInGraph ()
specifier|public
name|void
name|adjacentEdges_edgeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|adjacentEdges
argument_list|(
name|EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEdgeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_disconnectedNodes ()
specifier|public
name|void
name|edgesConnecting_disconnectedNodes
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|edgesConnecting_nodesNotInGraph ()
specifier|public
name|void
name|edgesConnecting_nodesNotInGraph
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
try|try
block|{
name|network
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|network
operator|.
name|edgesConnecting
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|,
name|N2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|network
operator|.
name|edgesConnecting
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|hasEdgeConnecting_disconnectedNodes ()
specifier|public
name|void
name|hasEdgeConnecting_disconnectedNodes
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasEdgesConnecting_nodesNotInGraph ()
specifier|public
name|void
name|hasEdgesConnecting_nodesNotInGraph
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|addNode
argument_list|(
name|N2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|N1
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|hasEdgeConnecting
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|,
name|NODE_NOT_IN_GRAPH
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inEdges_noInEdges ()
specifier|public
name|void
name|inEdges_noInEdges
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|inEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inEdges_nodeNotInGraph ()
specifier|public
name|void
name|inEdges_nodeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|inEdges
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|outEdges_noOutEdges ()
specifier|public
name|void
name|outEdges_noOutEdges
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|outEdges
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|outEdges_nodeNotInGraph ()
specifier|public
name|void
name|outEdges_nodeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|outEdges
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|predecessors_noPredecessors ()
specifier|public
name|void
name|predecessors_noPredecessors
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|predecessors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|predecessors_nodeNotInGraph ()
specifier|public
name|void
name|predecessors_nodeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|predecessors
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|successors_noSuccessors ()
specifier|public
name|void
name|successors_noSuccessors
parameter_list|()
block|{
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|network
operator|.
name|successors
argument_list|(
name|N1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|successors_nodeNotInGraph ()
specifier|public
name|void
name|successors_nodeNotInGraph
parameter_list|()
block|{
try|try
block|{
name|network
operator|.
name|successors
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|addNode_newNode ()
specifier|public
name|void
name|addNode_newNode
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|N1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNode_existingNode ()
specifier|public
name|void
name|addNode_existingNode
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|networkAsMutableNetwork
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|networkAsMutableNetwork
operator|.
name|addNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNode_existingNode ()
specifier|public
name|void
name|removeNode_existingNode
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N4
argument_list|,
name|N1
argument_list|,
name|E41
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|N2
argument_list|,
name|N4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E41
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNode_nodeNotPresent ()
specifier|public
name|void
name|removeNode_nodeNotPresent
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|networkAsMutableNetwork
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeNode
argument_list|(
name|NODE_NOT_IN_GRAPH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNode_queryAfterRemoval ()
specifier|public
name|void
name|removeNode_queryAfterRemoval
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addNode
argument_list|(
name|N1
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Set
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|networkAsMutableNetwork
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
decl_stmt|;
comment|// ensure cache (if any) is populated
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeNode
argument_list|(
name|N1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|adjacentNodes
argument_list|(
name|N1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_NODE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertNodeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|removeEdge_existingEdge ()
specifier|public
name|void
name|removeEdge_existingEdge
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeEdge
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeEdge
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edgesConnecting
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_oneOfMany ()
specifier|public
name|void
name|removeEdge_oneOfMany
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N3
argument_list|,
name|E13
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N4
argument_list|,
name|E14
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E13
argument_list|,
name|E14
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeEdge
argument_list|(
name|E13
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|E12
argument_list|,
name|E14
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_edgeNotPresent ()
specifier|public
name|void
name|removeEdge_edgeNotPresent
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|edges
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeEdge
argument_list|(
name|EDGE_NOT_IN_GRAPH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|networkAsMutableNetwork
operator|.
name|edges
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|edges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeEdge_queryAfterRemoval ()
specifier|public
name|void
name|removeEdge_queryAfterRemoval
parameter_list|()
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|graphIsMutable
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addEdge
argument_list|(
name|N1
argument_list|,
name|N2
argument_list|,
name|E12
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|EndpointPair
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|networkAsMutableNetwork
operator|.
name|incidentNodes
argument_list|(
name|E12
argument_list|)
decl_stmt|;
comment|// ensure cache (if any) is populated
name|assertTrue
argument_list|(
name|networkAsMutableNetwork
operator|.
name|removeEdge
argument_list|(
name|E12
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|networkAsMutableNetwork
operator|.
name|incidentNodes
argument_list|(
name|E12
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERROR_EDGE_NOT_IN_GRAPH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEdgeNotInGraphErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|concurrentIteration ()
specifier|public
name|void
name|concurrentIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|addEdge
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|addEdge
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|int
name|threadCount
init|=
literal|20
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|Integer
name|first
init|=
name|network
operator|.
name|nodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|node
range|:
name|network
operator|.
name|nodes
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|network
operator|.
name|successors
argument_list|(
name|node
argument_list|)
decl_stmt|;
block|}
comment|/*                    * Also look up an earlier node so that, if the graph is using MapRetrievalCache,                    * we read one of the fields declared in that class.                    */
name|Set
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|network
operator|.
name|successors
argument_list|(
name|first
argument_list|)
decl_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * It's unlikely that any operations would fail by throwing an exception, but let's check them      * just to be safe.      *      * The real purpose of this test is to produce a TSAN failure if MapIteratorCache is unsafe for      * reads from multiple threads -- unsafe, in fact, even in the absence of a concurrent write.      * The specific problem we had was unsafe reads of lastEntryReturnedBySomeIterator. (To fix the      * problem, we've since marked that field as volatile.)      *      * When MapIteratorCache is used from Immutable* classes, the TSAN failure doesn't indicate a      * real problem: The Entry objects are ImmutableMap entries, whose fields are all final and thus      * safe to read even when the Entry object is unsafely published. But with a mutable graph, the      * Entry object is likely to have a non-final value field, which is not safe to read when      * unsafely published. (The Entry object might even be newly created by each iterator.next()      * call, so we can't assume that writes to the Entry have been safely published by some other      * synchronization actions.)      *      * All that said: I haven't actually managed to make this particular test produce a TSAN error      * for the field accesses in MapIteratorCache. This teset *has* found other TSAN errors,      * including in MapRetrievalCache, so I'm not sure why this one is different. I did at least      * confirm that my change to MapIteratorCache fixes the TSAN error in the (larger) test it was      * originally reported in.      */
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
operator|.
name|build
argument_list|()
control|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

