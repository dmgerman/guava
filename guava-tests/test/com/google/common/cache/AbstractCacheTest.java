begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|AbstractCache
operator|.
name|SimpleStatsCounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|AbstractCache
operator|.
name|StatsCounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractCache}.  *  * @author Charles Fry  */
end_comment

begin_class
DECL|class|AbstractCacheTest
specifier|public
class|class
name|AbstractCacheTest
extends|extends
name|TestCase
block|{
DECL|method|testGetAllPresent ()
specifier|public
name|void
name|testGetAllPresent
parameter_list|()
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|valueRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AbstractCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|valueRef
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|getIfPresent
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|valueRef
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidateAll ()
specifier|public
name|void
name|testInvalidateAll
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|invalidated
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
operator|new
name|AbstractCache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|invalidate
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|invalidated
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|toInvalidate
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|(
name|toInvalidate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|toInvalidate
argument_list|,
name|invalidated
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptySimpleStats ()
specifier|public
name|void
name|testEmptySimpleStats
parameter_list|()
block|{
name|StatsCounter
name|counter
init|=
operator|new
name|SimpleStatsCounter
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|counter
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|requestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|stats
operator|.
name|hitRate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|missRate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|totalLoadTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|averageLoadPenalty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|evictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleSimpleStats ()
specifier|public
name|void
name|testSingleSimpleStats
parameter_list|()
block|{
name|StatsCounter
name|counter
init|=
operator|new
name|SimpleStatsCounter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|.
name|recordHits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|13
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|.
name|recordLoadSuccess
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|.
name|recordLoadException
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|.
name|recordMisses
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|27
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|.
name|recordEviction
argument_list|()
expr_stmt|;
block|}
name|CacheStats
name|stats
init|=
name|counter
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|int
name|requestCount
init|=
literal|11
operator|+
literal|23
decl_stmt|;
name|assertEquals
argument_list|(
name|requestCount
argument_list|,
name|stats
operator|.
name|requestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11.0
operator|/
name|requestCount
argument_list|,
name|stats
operator|.
name|hitRate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|missCount
init|=
literal|23
decl_stmt|;
name|assertEquals
argument_list|(
name|missCount
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|double
operator|)
name|missCount
operator|)
operator|/
name|requestCount
argument_list|,
name|stats
operator|.
name|missRate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
operator|+
literal|17
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|214
argument_list|,
name|stats
operator|.
name|totalLoadTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|214.0
operator|/
operator|(
literal|13
operator|+
literal|17
operator|)
argument_list|,
name|stats
operator|.
name|averageLoadPenalty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|stats
operator|.
name|evictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleStatsIncrementBy ()
specifier|public
name|void
name|testSimpleStatsIncrementBy
parameter_list|()
block|{
name|long
name|totalLoadTime
init|=
literal|0
decl_stmt|;
name|SimpleStatsCounter
name|counter1
init|=
operator|new
name|SimpleStatsCounter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|counter1
operator|.
name|recordHits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|13
condition|;
name|i
operator|++
control|)
block|{
name|counter1
operator|.
name|recordLoadSuccess
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|totalLoadTime
operator|+=
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|counter1
operator|.
name|recordLoadException
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|totalLoadTime
operator|+=
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
block|{
name|counter1
operator|.
name|recordMisses
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
block|{
name|counter1
operator|.
name|recordEviction
argument_list|()
expr_stmt|;
block|}
name|SimpleStatsCounter
name|counter2
init|=
operator|new
name|SimpleStatsCounter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|27
condition|;
name|i
operator|++
control|)
block|{
name|counter2
operator|.
name|recordHits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|31
condition|;
name|i
operator|++
control|)
block|{
name|counter2
operator|.
name|recordLoadSuccess
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|totalLoadTime
operator|+=
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|37
condition|;
name|i
operator|++
control|)
block|{
name|counter2
operator|.
name|recordLoadException
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|totalLoadTime
operator|+=
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|41
condition|;
name|i
operator|++
control|)
block|{
name|counter2
operator|.
name|recordMisses
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|43
condition|;
name|i
operator|++
control|)
block|{
name|counter2
operator|.
name|recordEviction
argument_list|()
expr_stmt|;
block|}
name|counter1
operator|.
name|incrementBy
argument_list|(
name|counter2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|CacheStats
argument_list|(
literal|38
argument_list|,
literal|60
argument_list|,
literal|44
argument_list|,
literal|54
argument_list|,
name|totalLoadTime
argument_list|,
literal|66
argument_list|)
argument_list|,
name|counter1
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

