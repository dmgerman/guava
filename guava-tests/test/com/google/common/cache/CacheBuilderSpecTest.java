begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilderSpec
operator|.
name|parse
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingWeighers
operator|.
name|constantWeigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LocalCache
operator|.
name|Strength
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Tests CacheBuilderSpec.  * TODO(user): tests of a few invalid input conditions, boundary conditions.  *  * @author Adam Winer  */
end_comment

begin_class
DECL|class|CacheBuilderSpecTest
specifier|public
class|class
name|CacheBuilderSpecTest
extends|extends
name|TestCase
block|{
DECL|method|testParse_empty ()
specifier|public
name|void
name|testParse_empty
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_initialCapacity ()
specifier|public
name|void
name|testParse_initialCapacity
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"initialCapacity=10"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|spec
operator|.
name|initialCapacity
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|10
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_initialCapacityRepeated ()
specifier|public
name|void
name|testParse_initialCapacityRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"initialCapacity=10, initialCapacity=20"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_maximumSize ()
specifier|public
name|void
name|testParse_maximumSize
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"maximumSize=9000"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9000
argument_list|,
name|spec
operator|.
name|maximumSize
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|9000
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_maximumSizeRepeated ()
specifier|public
name|void
name|testParse_maximumSizeRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"maximumSize=10, maximumSize=20"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_maximumWeight ()
specifier|public
name|void
name|testParse_maximumWeight
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"maximumWeight=9000"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9000
argument_list|,
name|spec
operator|.
name|maximumWeight
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
literal|9000
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_maximumWeightRepeated ()
specifier|public
name|void
name|testParse_maximumWeightRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"maximumWeight=10, maximumWeight=20"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_maximumSizeAndMaximumWeight ()
specifier|public
name|void
name|testParse_maximumSizeAndMaximumWeight
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"maximumSize=10, maximumWeight=20"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_concurrencyLevel ()
specifier|public
name|void
name|testParse_concurrencyLevel
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"concurrencyLevel=32"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32
argument_list|,
name|spec
operator|.
name|concurrencyLevel
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|32
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_concurrencyLevelRepeated ()
specifier|public
name|void
name|testParse_concurrencyLevelRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"concurrencyLevel=10, concurrencyLevel=20"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_weakKeys ()
specifier|public
name|void
name|testParse_weakKeys
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"weakKeys"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|WEAK
argument_list|,
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_weakKeysCannotHaveValue ()
specifier|public
name|void
name|testParse_weakKeysCannotHaveValue
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"weakKeys=true"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_repeatedKeyStrength ()
specifier|public
name|void
name|testParse_repeatedKeyStrength
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"weakKeys, weakKeys"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_softValues ()
specifier|public
name|void
name|testParse_softValues
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"softValues"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|SOFT
argument_list|,
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_softValuesCannotHaveValue ()
specifier|public
name|void
name|testParse_softValuesCannotHaveValue
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"softValues=true"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_weakValues ()
specifier|public
name|void
name|testParse_weakValues
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"weakValues"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|WEAK
argument_list|,
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_weakValuesCannotHaveValue ()
specifier|public
name|void
name|testParse_weakValuesCannotHaveValue
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"weakValues=true"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_repeatedValueStrength ()
specifier|public
name|void
name|testParse_repeatedValueStrength
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"softValues, softValues"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|parse
argument_list|(
literal|"softValues, weakValues"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|parse
argument_list|(
literal|"weakValues, softValues"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|parse
argument_list|(
literal|"weakValues, weakValues"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_writeExpirationDays ()
specifier|public
name|void
name|testParse_writeExpirationDays
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterWrite=10d"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|DAYS
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_writeExpirationHours ()
specifier|public
name|void
name|testParse_writeExpirationHours
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterWrite=150h"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|HOURS
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|150L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|150L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_writeExpirationMinutes ()
specifier|public
name|void
name|testParse_writeExpirationMinutes
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterWrite=10m"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_writeExpirationSeconds ()
specifier|public
name|void
name|testParse_writeExpirationSeconds
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterWrite=10s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_writeExpirationRepeated ()
specifier|public
name|void
name|testParse_writeExpirationRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"expireAfterWrite=10s,expireAfterWrite=10m"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_accessExpirationDays ()
specifier|public
name|void
name|testParse_accessExpirationDays
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterAccess=10d"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|DAYS
argument_list|,
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|accessExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_accessExpirationHours ()
specifier|public
name|void
name|testParse_accessExpirationHours
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterAccess=150h"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|HOURS
argument_list|,
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|150L
argument_list|,
name|spec
operator|.
name|accessExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|150L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_accessExpirationMinutes ()
specifier|public
name|void
name|testParse_accessExpirationMinutes
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterAccess=10m"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|accessExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_accessExpirationSeconds ()
specifier|public
name|void
name|testParse_accessExpirationSeconds
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterAccess=10s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|accessExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_accessExpirationRepeated ()
specifier|public
name|void
name|testParse_accessExpirationRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"expireAfterAccess=10s,expireAfterAccess=10m"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_recordStats ()
specifier|public
name|void
name|testParse_recordStats
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"recordStats"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|spec
operator|.
name|recordStats
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_recordStatsValueSpecified ()
specifier|public
name|void
name|testParse_recordStatsValueSpecified
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"recordStats=True"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_recordStatsRepeated ()
specifier|public
name|void
name|testParse_recordStatsRepeated
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"recordStats,recordStats"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_accessExpirationAndWriteExpiration ()
specifier|public
name|void
name|testParse_accessExpirationAndWriteExpiration
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"expireAfterAccess=10s,expireAfterWrite=9m"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|accessExpirationDuration
argument_list|)
expr_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|9L
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_multipleKeys ()
specifier|public
name|void
name|testParse_multipleKeys
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|"initialCapacity=10,maximumSize=20,concurrencyLevel=30,"
operator|+
literal|"weakKeys,weakValues,expireAfterAccess=10m,expireAfterWrite=1h"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|spec
operator|.
name|initialCapacity
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|spec
operator|.
name|maximumSize
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|spec
operator|.
name|concurrencyLevel
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|WEAK
argument_list|,
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|WEAK
argument_list|,
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|HOURS
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|spec
operator|.
name|accessExpirationDuration
argument_list|)
expr_stmt|;
name|CacheBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|expected
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|10
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|20
argument_list|)
operator|.
name|concurrencyLevel
argument_list|(
literal|30
argument_list|)
operator|.
name|weakKeys
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|expected
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_whitespaceAllowed ()
specifier|public
name|void
name|testParse_whitespaceAllowed
parameter_list|()
block|{
name|CacheBuilderSpec
name|spec
init|=
name|parse
argument_list|(
literal|" initialCapacity=10,\nmaximumSize=20,\t\r"
operator|+
literal|"weakKeys \t ,softValues \n , \r  expireAfterWrite \t =  15s\n\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|spec
operator|.
name|initialCapacity
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|spec
operator|.
name|maximumSize
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|WEAK
argument_list|,
name|spec
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strength
operator|.
name|SOFT
argument_list|,
name|spec
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|spec
operator|.
name|writeExpirationTimeUnit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15L
argument_list|,
name|spec
operator|.
name|writeExpirationDuration
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|accessExpirationTimeUnit
argument_list|)
expr_stmt|;
name|CacheBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|expected
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|10
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|20
argument_list|)
operator|.
name|weakKeys
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|15L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|expected
argument_list|,
name|CacheBuilder
operator|.
name|from
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_unknownKey ()
specifier|public
name|void
name|testParse_unknownKey
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"foo=17"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testParse_extraCommaIsInvalid ()
specifier|public
name|void
name|testParse_extraCommaIsInvalid
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"weakKeys,"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|parse
argument_list|(
literal|",weakKeys"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|parse
argument_list|(
literal|"weakKeys,,softValues"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testEqualsAndHashCode ()
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|""
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"concurrencyLevel=7"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"concurrencyLevel=7"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"concurrencyLevel=15"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"concurrencyLevel=15"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"initialCapacity=7"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"initialCapacity=7"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"initialCapacity=15"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"initialCapacity=15"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"maximumSize=7"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"maximumSize=7"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"maximumSize=15"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"maximumSize=15"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"maximumWeight=7"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"maximumWeight=7"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"maximumWeight=15"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"maximumWeight=15"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"expireAfterAccess=60s"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"expireAfterAccess=1m"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"expireAfterAccess=60m"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"expireAfterAccess=1h"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"expireAfterWrite=60s"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"expireAfterWrite=1m"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"expireAfterWrite=60m"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"expireAfterWrite=1h"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"weakKeys"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"weakKeys"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"softValues"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"softValues"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"weakValues"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"weakValues"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parse
argument_list|(
literal|"recordStats"
argument_list|)
argument_list|,
name|parse
argument_list|(
literal|"recordStats"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaximumWeight_withWeigher ()
specifier|public
name|void
name|testMaximumWeight_withWeigher
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|from
argument_list|(
name|parse
argument_list|(
literal|"maximumWeight=9000"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|weigher
argument_list|(
name|constantWeigher
argument_list|(
literal|42
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaximumWeight_withoutWeigher ()
specifier|public
name|void
name|testMaximumWeight_withoutWeigher
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|from
argument_list|(
name|parse
argument_list|(
literal|"maximumWeight=9000"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testMaximumSize_withWeigher ()
specifier|public
name|void
name|testMaximumSize_withWeigher
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|from
argument_list|(
name|parse
argument_list|(
literal|"maximumSize=9000"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|weigher
argument_list|(
name|constantWeigher
argument_list|(
literal|42
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaximumSize_withoutWeigher ()
specifier|public
name|void
name|testMaximumSize_withoutWeigher
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|from
argument_list|(
name|parse
argument_list|(
literal|"maximumSize=9000"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisableCaching ()
specifier|public
name|void
name|testDisableCaching
parameter_list|()
block|{
comment|// Functional test: assert that CacheBuilderSpec.disableCaching()
comment|// disables caching.  It's irrelevant how it does so.
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|from
argument_list|(
name|CacheBuilderSpec
operator|.
name|disableCaching
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCacheBuilderFrom_string ()
specifier|public
name|void
name|testCacheBuilderFrom_string
parameter_list|()
block|{
name|CacheBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|fromString
init|=
name|CacheBuilder
operator|.
name|from
argument_list|(
literal|"initialCapacity=10,maximumSize=20,concurrencyLevel=30,"
operator|+
literal|"weakKeys,weakValues,expireAfterAccess=10m"
argument_list|)
decl_stmt|;
name|CacheBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|expected
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|initialCapacity
argument_list|(
literal|10
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|20
argument_list|)
operator|.
name|concurrencyLevel
argument_list|(
literal|30
argument_list|)
operator|.
name|weakKeys
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|assertCacheBuilderEquivalence
argument_list|(
name|expected
argument_list|,
name|fromString
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCacheBuilderEquivalence (CacheBuilder<?, ?> a, CacheBuilder<?, ?> b)
specifier|private
specifier|static
name|void
name|assertCacheBuilderEquivalence
parameter_list|(
name|CacheBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|a
parameter_list|,
name|CacheBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"concurrencyLevel"
argument_list|,
name|a
operator|.
name|concurrencyLevel
argument_list|,
name|b
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expireAfterAccessNanos"
argument_list|,
name|a
operator|.
name|expireAfterAccessNanos
argument_list|,
name|b
operator|.
name|expireAfterAccessNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expireAfterWriteNanos"
argument_list|,
name|a
operator|.
name|expireAfterWriteNanos
argument_list|,
name|b
operator|.
name|expireAfterWriteNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"initialCapacity"
argument_list|,
name|a
operator|.
name|initialCapacity
argument_list|,
name|b
operator|.
name|initialCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maximumSize"
argument_list|,
name|a
operator|.
name|maximumSize
argument_list|,
name|b
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maximumWeight"
argument_list|,
name|a
operator|.
name|maximumWeight
argument_list|,
name|b
operator|.
name|maximumWeight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"refreshNanos"
argument_list|,
name|a
operator|.
name|refreshNanos
argument_list|,
name|b
operator|.
name|refreshNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keyEquivalence"
argument_list|,
name|a
operator|.
name|keyEquivalence
argument_list|,
name|b
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keyStrength"
argument_list|,
name|a
operator|.
name|keyStrength
argument_list|,
name|b
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"removalListener"
argument_list|,
name|a
operator|.
name|removalListener
argument_list|,
name|b
operator|.
name|removalListener
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"weigher"
argument_list|,
name|a
operator|.
name|weigher
argument_list|,
name|b
operator|.
name|weigher
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueEquivalence"
argument_list|,
name|a
operator|.
name|valueEquivalence
argument_list|,
name|b
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueStrength"
argument_list|,
name|a
operator|.
name|valueStrength
argument_list|,
name|b
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"statsCounterSupplier"
argument_list|,
name|a
operator|.
name|statsCounterSupplier
argument_list|,
name|b
operator|.
name|statsCounterSupplier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ticker"
argument_list|,
name|a
operator|.
name|ticker
argument_list|,
name|b
operator|.
name|ticker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"recordStats"
argument_list|,
name|a
operator|.
name|isRecordingStats
argument_list|()
argument_list|,
name|b
operator|.
name|isRecordingStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

