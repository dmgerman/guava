begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|identityLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|countingRemovalListener
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|IdentityLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|CountingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|FakeTicker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callables
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Tests relating to cache expiration: make sure entries expire at the right times, make sure  * expired entries don't show up, etc.  *  * @author mike nonemacher  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|// tests of deprecated method
DECL|class|CacheExpirationTest
specifier|public
class|class
name|CacheExpirationTest
extends|extends
name|TestCase
block|{
DECL|field|EXPIRING_TIME
specifier|private
specifier|static
specifier|final
name|long
name|EXPIRING_TIME
init|=
literal|1000
decl_stmt|;
DECL|field|VALUE_PREFIX
specifier|private
specifier|static
specifier|final
name|int
name|VALUE_PREFIX
init|=
literal|12345
decl_stmt|;
DECL|field|KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|KEY_PREFIX
init|=
literal|"key prefix:"
decl_stmt|;
DECL|method|testExpiration_expireAfterWrite ()
specifier|public
name|void
name|testExpiration_expireAfterWrite
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|checkExpiration
argument_list|(
name|cache
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpiration_expireAfterAccess ()
specifier|public
name|void
name|testExpiration_expireAfterAccess
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|checkExpiration
argument_list|(
name|cache
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExpiration (Cache<String, Integer> cache, WatchedCreatorLoader loader, FakeTicker ticker, CountingRemovalListener<String, Integer> removalListener)
specifier|private
name|void
name|checkExpiration
parameter_list|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
parameter_list|,
name|WatchedCreatorLoader
name|loader
parameter_list|,
name|FakeTicker
name|ticker
parameter_list|,
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|VALUE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|loader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|VALUE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Creator should not have been called @#"
operator|+
name|i
argument_list|,
name|loader
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CacheTesting
operator|.
name|expireEntries
argument_list|(
operator|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cache
argument_list|,
name|EXPIRING_TIME
argument_list|,
name|ticker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Map must be empty by now"
argument_list|,
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eviction notifications must be received"
argument_list|,
literal|10
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|expireEntries
argument_list|(
operator|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cache
argument_list|,
name|EXPIRING_TIME
argument_list|,
name|ticker
argument_list|)
expr_stmt|;
comment|// ensure that no new notifications are sent
name|assertEquals
argument_list|(
literal|"Eviction notifications must be received"
argument_list|,
literal|10
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpiringGet_expireAfterWrite ()
specifier|public
name|void
name|testExpiringGet_expireAfterWrite
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|runExpirationTest
argument_list|(
name|cache
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpiringGet_expireAfterAccess ()
specifier|public
name|void
name|testExpiringGet_expireAfterAccess
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|runExpirationTest
argument_list|(
name|cache
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
block|}
DECL|method|runExpirationTest (Cache<String, Integer> cache, WatchedCreatorLoader loader, FakeTicker ticker, CountingRemovalListener<String, Integer> removalListener)
specifier|private
name|void
name|runExpirationTest
parameter_list|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
parameter_list|,
name|WatchedCreatorLoader
name|loader
parameter_list|,
name|FakeTicker
name|ticker
parameter_list|,
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|VALUE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|loader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|VALUE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Loader should NOT have been called @#"
operator|+
name|i
argument_list|,
name|loader
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// wait for entries to expire, but don't call expireEntries
name|ticker
operator|.
name|advance
argument_list|(
name|EXPIRING_TIME
operator|*
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// add a single unexpired entry
name|cache
operator|.
name|getUnchecked
argument_list|(
name|KEY_PREFIX
operator|+
literal|11
argument_list|)
expr_stmt|;
comment|// collections views shouldn't expose expired entries
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|expireEntries
argument_list|(
operator|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cache
argument_list|,
name|EXPIRING_TIME
argument_list|,
name|ticker
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|VALUE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|KEY_PREFIX
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Creator should have been called @#"
operator|+
name|i
argument_list|,
name|loader
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// expire new values we just created
name|CacheTesting
operator|.
name|expireEntries
argument_list|(
operator|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cache
argument_list|,
name|EXPIRING_TIME
argument_list|,
name|ticker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Eviction notifications must be received"
argument_list|,
literal|21
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|expireEntries
argument_list|(
operator|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cache
argument_list|,
name|EXPIRING_TIME
argument_list|,
name|ticker
argument_list|)
expr_stmt|;
comment|// ensure that no new notifications are sent
name|assertEquals
argument_list|(
literal|"Eviction notifications must be received"
argument_list|,
literal|21
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener_expireAfterWrite ()
specifier|public
name|void
name|testRemovalListener_expireAfterWrite
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|evictionCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|applyCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|totalSum
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|RemovalListener
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|removalListener
init|=
operator|new
name|RemovalListener
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|notification
parameter_list|)
block|{
if|if
condition|(
name|notification
operator|.
name|wasEvicted
argument_list|()
condition|)
block|{
name|evictionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|totalSum
operator|.
name|addAndGet
argument_list|(
name|notification
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AtomicInteger
name|load
parameter_list|(
name|Integer
name|key
parameter_list|)
block|{
name|applyCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|AtomicInteger
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
comment|// Increment 100 times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|10
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|evictionCount
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|,
name|applyCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|10
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|totalSum
operator|.
name|get
argument_list|()
operator|+
name|remaining
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalScheduler_expireAfterWrite ()
specifier|public
name|void
name|testRemovalScheduler_expireAfterWrite
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|runRemovalScheduler
argument_list|(
name|cache
argument_list|,
name|removalListener
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|KEY_PREFIX
argument_list|,
name|EXPIRING_TIME
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalScheduler_expireAfterAccess ()
specifier|public
name|void
name|testRemovalScheduler_expireAfterAccess
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|runRemovalScheduler
argument_list|(
name|cache
argument_list|,
name|removalListener
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|KEY_PREFIX
argument_list|,
name|EXPIRING_TIME
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalScheduler_expireAfterBoth ()
specifier|public
name|void
name|testRemovalScheduler_expireAfterBoth
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|WatchedCreatorLoader
name|loader
init|=
operator|new
name|WatchedCreatorLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
name|EXPIRING_TIME
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|runRemovalScheduler
argument_list|(
name|cache
argument_list|,
name|removalListener
argument_list|,
name|loader
argument_list|,
name|ticker
argument_list|,
name|KEY_PREFIX
argument_list|,
name|EXPIRING_TIME
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpirationOrder_access ()
specifier|public
name|void
name|testExpirationOrder_access
parameter_list|()
block|{
comment|// test lru within a single segment
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|IdentityLoader
argument_list|<
name|Integer
argument_list|>
name|loader
init|=
name|identityLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 0 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// reorder
name|getAll
argument_list|(
name|cache
argument_list|,
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|2
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 3 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// reorder
name|getAll
argument_list|(
name|cache
argument_list|,
name|asList
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 4 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 6 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 8 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpirationOrder_write ()
specifier|public
name|void
name|testExpirationOrder_write
parameter_list|()
throws|throws
name|ExecutionException
block|{
comment|// test lru within a single segment
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|IdentityLoader
argument_list|<
name|Integer
argument_list|>
name|loader
init|=
name|identityLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|10
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// 0 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// get doesn't stop 1 from expiring
name|getAll
argument_list|(
name|cache
argument_list|,
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// get(K, Callable) doesn't stop 2 from expiring
name|cache
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|Callables
operator|.
name|returning
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// asMap.put saves 3
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// asMap.replace saves 4
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|replace
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// 5 expires
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpirationOrder_writeAccess ()
specifier|public
name|void
name|testExpirationOrder_writeAccess
parameter_list|()
throws|throws
name|ExecutionException
block|{
comment|// test lru within a single segment
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|IdentityLoader
argument_list|<
name|Integer
argument_list|>
name|loader
init|=
name|identityLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|4
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|2
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// get saves 1, 3; 0, 2, 4 expire
name|getAll
argument_list|(
name|cache
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// get saves 6, 8; 5, 7, 9 expire
name|getAll
argument_list|(
name|cache
argument_list|,
name|asList
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// get fails to save 1, put saves 3
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|getAll
argument_list|(
name|cache
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// get(K, Callable) fails to save 8, replace saves 6
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|replace
argument_list|(
literal|6
argument_list|,
operator|-
literal|6
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|8
argument_list|,
name|Callables
operator|.
name|returning
argument_list|(
operator|-
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|drainRecencyQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|keySet
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|runRemovalScheduler (Cache<String, Integer> cache, CountingRemovalListener<String, Integer> removalListener, WatchedCreatorLoader loader, FakeTicker ticker, String keyPrefix, long ttl)
specifier|private
name|void
name|runRemovalScheduler
parameter_list|(
name|Cache
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cache
parameter_list|,
name|CountingRemovalListener
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|removalListener
parameter_list|,
name|WatchedCreatorLoader
name|loader
parameter_list|,
name|FakeTicker
name|ticker
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|long
name|ttl
parameter_list|)
block|{
name|int
name|shift1
init|=
literal|10
operator|+
name|VALUE_PREFIX
decl_stmt|;
name|loader
operator|.
name|setValuePrefix
argument_list|(
name|shift1
argument_list|)
expr_stmt|;
comment|// fill with initial data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
operator|+
name|shift1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|keyPrefix
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|CacheTesting
operator|.
name|expirationQueueSize
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait, so that entries have just 10 ms to live
name|ticker
operator|.
name|advance
argument_list|(
name|ttl
operator|*
literal|2
operator|/
literal|3
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|CacheTesting
operator|.
name|expirationQueueSize
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|shift2
init|=
name|shift1
operator|+
literal|10
decl_stmt|;
name|loader
operator|.
name|setValuePrefix
argument_list|(
name|shift2
argument_list|)
expr_stmt|;
comment|// fill with new data - has to live for 20 ms more
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|keyPrefix
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"key: "
operator|+
name|keyPrefix
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
operator|+
name|shift2
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|keyPrefix
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|CacheTesting
operator|.
name|expirationQueueSize
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// these are the invalidated ones
comment|// old timeouts must expire after this wait
name|ticker
operator|.
name|advance
argument_list|(
name|ttl
operator|*
literal|2
operator|/
literal|3
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|CacheTesting
operator|.
name|expirationQueueSize
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that new values are still there - they still have 10 ms to live
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|loader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
operator|+
name|shift2
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|keyPrefix
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Creator should NOT have been called @#"
operator|+
name|i
argument_list|,
name|loader
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAll (Cache<Integer, Integer> cache, List<Integer> keys)
specifier|private
name|void
name|getAll
parameter_list|(
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|)
block|{
for|for
control|(
name|int
name|i
range|:
name|keys
control|)
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WatchedCreatorLoader
specifier|private
specifier|static
class|class
name|WatchedCreatorLoader
extends|extends
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|field|wasCalled
name|boolean
name|wasCalled
init|=
literal|false
decl_stmt|;
comment|// must be set in load()
DECL|field|keyPrefix
name|String
name|keyPrefix
init|=
name|KEY_PREFIX
decl_stmt|;
DECL|field|valuePrefix
name|int
name|valuePrefix
init|=
name|VALUE_PREFIX
decl_stmt|;
DECL|method|WatchedCreatorLoader ()
specifier|public
name|WatchedCreatorLoader
parameter_list|()
block|{     }
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|wasCalled
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|wasCalled ()
specifier|public
name|boolean
name|wasCalled
parameter_list|()
block|{
return|return
name|wasCalled
return|;
block|}
DECL|method|setKeyPrefix (String keyPrefix)
specifier|public
name|void
name|setKeyPrefix
parameter_list|(
name|String
name|keyPrefix
parameter_list|)
block|{
name|this
operator|.
name|keyPrefix
operator|=
name|keyPrefix
expr_stmt|;
block|}
DECL|method|setValuePrefix (int valuePrefix)
specifier|public
name|void
name|setValuePrefix
parameter_list|(
name|int
name|valuePrefix
parameter_list|)
block|{
name|this
operator|.
name|valuePrefix
operator|=
name|valuePrefix
expr_stmt|;
block|}
DECL|method|load (String key)
annotation|@
name|Override
specifier|public
name|Integer
name|load
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|wasCalled
operator|=
literal|true
expr_stmt|;
return|return
name|valuePrefix
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

