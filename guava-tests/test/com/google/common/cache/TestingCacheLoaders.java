begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Utility {@link CacheLoader} implementations intended for use in testing.  *  * @author schmoe@google.com (mike nonemacher)  */
end_comment

begin_class
DECL|class|TestingCacheLoaders
class|class
name|TestingCacheLoaders
block|{
comment|/**    * Returns a {@link CacheLoader} that returns the given {@code constant} for every request.    */
DECL|method|constantLoader (V constant)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ConstantLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|constantLoader
parameter_list|(
name|V
name|constant
parameter_list|)
block|{
return|return
operator|new
name|ConstantLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|constant
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link CacheLoader} that throws the given error for every request.    */
DECL|method|errorLoader (final Error e)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|errorLoader
parameter_list|(
specifier|final
name|Error
name|e
parameter_list|)
block|{
return|return
operator|new
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a {@link CacheLoader} that throws the given exception for every request.    */
DECL|method|exceptionLoader (final Exception e)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|exceptionLoader
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a {@link CacheLoader} that returns the key for every request.    */
DECL|method|identityLoader ()
specifier|static
parameter_list|<
name|T
parameter_list|>
name|IdentityLoader
argument_list|<
name|T
argument_list|>
name|identityLoader
parameter_list|()
block|{
return|return
operator|new
name|IdentityLoader
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a {@code new Object()} for every request, and increments a counter for every request.    * The count is accessible via {@link #getCount}.    */
DECL|class|CountingLoader
specifier|static
class|class
name|CountingLoader
extends|extends
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|count
specifier|private
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|load (Object from)
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|from
parameter_list|)
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
operator|.
name|get
argument_list|()
return|;
block|}
block|}
DECL|class|ConstantLoader
specifier|static
specifier|final
class|class
name|ConstantLoader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|constant
specifier|private
specifier|final
name|V
name|constant
decl_stmt|;
DECL|method|ConstantLoader (V constant)
name|ConstantLoader
parameter_list|(
name|V
name|constant
parameter_list|)
block|{
name|this
operator|.
name|constant
operator|=
name|constant
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (K key)
specifier|public
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|constant
return|;
block|}
block|}
DECL|class|IdentityLoader
specifier|static
specifier|final
class|class
name|IdentityLoader
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CacheLoader
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
block|{
annotation|@
name|Override
DECL|method|load (T key)
specifier|public
name|T
name|load
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
name|key
return|;
block|}
block|}
block|}
end_class

end_unit

