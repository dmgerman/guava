begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|constantLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|errorLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|exceptionLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|identityLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|countingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|CountingLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|CountingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_comment
comment|/**  * Tests relating to cache computation: concurrent computation, exceptions in computation, etc.  *  * @author mike nonemacher  */
end_comment

begin_class
DECL|class|CacheComputationTest
specifier|public
class|class
name|CacheComputationTest
extends|extends
name|TestCase
block|{
DECL|method|testCompute ()
specifier|public
name|void
name|testCompute
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// callable is not called
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|throwing
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|Callables
operator|.
name|returning
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeNull ()
specifier|public
name|void
name|testComputeNull
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|constantLoader
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|Callables
operator|.
name|returning
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeError ()
specifier|public
name|void
name|testComputeError
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Error
name|e
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|errorLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Error
name|callableError
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
block|{
throw|throw
name|callableError
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableError
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeCheckedException ()
specifier|public
name|void
name|testComputeCheckedException
parameter_list|()
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|callableException
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|throwing
argument_list|(
name|callableException
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableException
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeUncheckedException ()
specifier|public
name|void
name|testComputeUncheckedException
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|callableException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|throwing
argument_list|(
name|callableException
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableException
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecomputeAfterFailure ()
specifier|public
name|void
name|testRecomputeAfterFailure
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|failOnceFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|Integer
name|key
parameter_list|)
block|{
if|if
condition|(
name|count
operator|.
name|getAndIncrement
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"exception to trigger failure on first load()"
argument_list|)
throw|;
block|}
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|build
argument_list|(
name|failOnceFunction
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecomputeAfterValueReclamation ()
specifier|public
name|void
name|testRecomputeAfterValueReclamation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|CountingLoader
name|countingLoader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|build
argument_list|(
name|countingLoader
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|int
name|iterations
init|=
literal|10
decl_stmt|;
name|WeakReference
argument_list|<
name|Object
argument_list|>
name|ref
init|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|expectedComputations
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
comment|// The entry should get garbage collected and recomputed.
name|Object
name|oldValue
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
name|expectedComputations
operator|++
expr_stmt|;
block|}
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oldValue
operator|=
literal|null
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedComputations
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
comment|// The entry should get garbage collected and recomputed.
name|Object
name|oldValue
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
name|expectedComputations
operator|++
expr_stmt|;
block|}
name|cache
operator|.
name|refresh
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oldValue
operator|=
literal|null
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedComputations
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecomputeAfterSimulatedValueReclamation ()
specifier|public
name|void
name|testRecomputeAfterSimulatedValueReclamation
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|countingLoader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
operator|.
name|build
argument_list|(
name|countingLoader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateValueReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// this blocks if computation can't deal with partially-collected values
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateValueReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecomputeAfterSimulatedKeyReclamation ()
specifier|public
name|void
name|testRecomputeAfterSimulatedKeyReclamation
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|countingLoader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakKeys
argument_list|()
operator|.
name|build
argument_list|(
name|countingLoader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateKeyReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// this blocks if computation can't deal with partially-collected values
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateKeyReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure Cache correctly wraps ExecutionExceptions and UncheckedExecutionExceptions.    */
DECL|method|testComputationExceptionWithCause ()
specifier|public
name|void
name|testComputationExceptionWithCause
parameter_list|()
block|{
specifier|final
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
specifier|final
name|UncheckedExecutionException
name|uee
init|=
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
specifier|final
name|ExecutionException
name|ee
init|=
operator|new
name|ExecutionException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheUnchecked
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|exceptionLoader
argument_list|(
name|uee
argument_list|)
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheChecked
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|exceptionLoader
argument_list|(
name|ee
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|cacheUnchecked
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheUnchecked
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtUee
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtUee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheUnchecked
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheChecked
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheChecked
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtUee
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtUee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheChecked
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConcurrentComputation ()
specifier|public
name|void
name|testConcurrentComputation
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testConcurrentComputation
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrentExpirationComputation ()
specifier|public
name|void
name|testConcurrentExpirationComputation
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testConcurrentComputation
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrentComputation (CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentComputation
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|testConcurrentComputationDefault
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|testConcurrentComputationNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|testConcurrentComputationUncheckedException
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|testConcurrentComputationCheckedException
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a successful concurrent computation, only one thread does the work, but all the threads get    * the same result.    */
DECL|method|testConcurrentComputationDefault (CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentComputationDefault
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|resultArray
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
literal|"result("
operator|+
name|i
operator|+
literal|") didn't match expected"
argument_list|,
name|result
argument_list|,
name|resultArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * On a concurrent computation that returns null, all threads should get a NullPointerException,    * with the loader only called once. The result should not be cached (a later request should call    * the loader again).    */
DECL|method|testConcurrentComputationNull (CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentComputationNull
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
comment|// subsequent calls should call the loader again, not get the old exception
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a concurrent computation that throws an unchecked exception, all threads should get the    * (wrapped) exception, with the loader called only once. The result should not be cached (a later    * request should call the loader again).    */
DECL|method|testConcurrentComputationUncheckedException ( CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentComputationUncheckedException
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RuntimeException
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// doConcurrentGet alternates between calling getUnchecked and calling get, but an unchecked
comment|// exception thrown by the loader is always wrapped as an UncheckedExecutionException.
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|UncheckedExecutionException
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
operator|(
operator|(
name|UncheckedExecutionException
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// subsequent calls should call the loader again, not get the old exception
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a concurrent computation that throws a checked exception, all threads should get the    * (wrapped) exception, with the loader called only once. The result should not be cached (a later    * request should call the loader again).    */
DECL|method|testConcurrentComputationCheckedException ( CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentComputationCheckedException
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IOException
name|e
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// doConcurrentGet alternates between calling getUnchecked and calling get. If we call get(),
comment|// we should get an ExecutionException; if we call getUnchecked(), we should get an
comment|// UncheckedExecutionException.
name|int
name|mod
init|=
name|i
operator|%
literal|3
decl_stmt|;
if|if
condition|(
name|mod
operator|==
literal|0
operator|||
name|mod
operator|==
literal|2
condition|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|ExecutionException
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
operator|(
operator|(
name|ExecutionException
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|UncheckedExecutionException
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
operator|(
operator|(
name|UncheckedExecutionException
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// subsequent calls should call the loader again, not get the old exception
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test-helper method that performs {@code nThreads} concurrent calls to {@code cache.get(key)}    * or {@code cache.getUnchecked(key)}, and returns a List containing each of the results. The    * result for any given call to {@code cache.get} or {@code cache.getUnchecked} is the value    * returned, or the exception thrown.    *    *<p>As we iterate from {@code 0} to {@code nThreads}, threads with an even index will call    * {@code getUnchecked}, and threads with an odd index will call {@code get}. If the cache throws    * exceptions, this difference may be visible in the returned List.    */
DECL|method|doConcurrentGet (final Cache<K, ?> cache, final K key, int nThreads, final CountDownLatch gettersStartedSignal)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|List
argument_list|<
name|Object
argument_list|>
name|doConcurrentGet
parameter_list|(
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|cache
parameter_list|,
specifier|final
name|K
name|key
parameter_list|,
name|int
name|nThreads
parameter_list|,
specifier|final
name|CountDownLatch
name|gettersStartedSignal
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicReferenceArray
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|Object
argument_list|>
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|gettersComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|gettersStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|mod
init|=
name|index
operator|%
literal|3
decl_stmt|;
if|if
condition|(
name|mod
operator|==
literal|0
condition|)
block|{
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mod
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|result
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|gettersComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we want to wait until each thread is WAITING - one thread waiting inside CacheLoader.load
comment|// (in startSignal.await()), and the others waiting for that thread's result.
while|while
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
operator|&&
name|thread
operator|.
name|getState
argument_list|()
operator|!=
name|Thread
operator|.
name|State
operator|.
name|WAITING
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
name|gettersStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|gettersComplete
operator|.
name|await
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|resultList
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nThreads
condition|;
name|i
operator|++
control|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultList
return|;
block|}
DECL|method|testAsMapDuringComputation ()
specifier|public
name|void
name|testAsMapDuringComputation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|CountDownLatch
name|getStartedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|letGetFinishSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|getFinishedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|getKey
init|=
literal|"get"
decl_stmt|;
specifier|final
name|String
name|refreshKey
init|=
literal|"refresh"
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|getStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|letGetFinishSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|refreshKey
argument_list|,
name|refreshKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|refreshKey
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|getStartedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// computation is in progress; asMap shouldn't have changed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|refreshKey
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// let computation complete
name|letGetFinishSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|getFinishedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// asMap view should have been updated
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidateDuringComputation ()
specifier|public
name|void
name|testInvalidateDuringComputation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// computation starts; invalidate() is called on the key being computed, computation finishes
specifier|final
name|CountDownLatch
name|computationStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|letGetFinishSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|getFinishedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|getKey
init|=
literal|"get"
decl_stmt|;
specifier|final
name|String
name|refreshKey
init|=
literal|"refresh"
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|computationStarted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|letGetFinishSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|refreshKey
argument_list|,
name|refreshKey
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|computationStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// let computation complete
name|letGetFinishSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|getFinishedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// results should be visible
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpandDuringComputation ()
specifier|public
name|void
name|testExpandDuringComputation
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|count
init|=
literal|3
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// tells the computing thread when to start computing
specifier|final
name|CountDownLatch
name|computeSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when computation is pending
specifier|final
name|CountDownLatch
name|secondSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the second get has started
specifier|final
name|CountDownLatch
name|thirdSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the third get has started
specifier|final
name|CountDownLatch
name|fourthSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the test when all gets have returned
specifier|final
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|secondSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|computeSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
literal|"foo"
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"bar"
decl_stmt|;
comment|// start computing thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for computation to start
name|secondSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// start waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|thirdSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the second get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|thirdSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// Expand!
name|CacheTesting
operator|.
name|forceExpandSegment
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// start another waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fourthSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the third get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|fourthSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let computation finish
name|computeSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|callCount
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpandDuringRefresh ()
specifier|public
name|void
name|testExpandDuringRefresh
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// tells the computing thread when to start computing
specifier|final
name|CountDownLatch
name|computeSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when computation is pending
specifier|final
name|CountDownLatch
name|secondSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the second get has started
specifier|final
name|CountDownLatch
name|thirdSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the third get has started
specifier|final
name|CountDownLatch
name|fourthSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the test when all gets have returned
specifier|final
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|secondSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|computeSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"bar"
decl_stmt|;
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// start computing thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for computation to start
name|secondSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// start waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|thirdSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the second get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|thirdSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// Expand!
name|CacheTesting
operator|.
name|forceExpandSegment
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// start another waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fourthSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the third get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|fourthSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let computation finish
name|computeSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|callCount
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|+
name|suffix
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|throwing (final Exception exception)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Callable
argument_list|<
name|T
argument_list|>
name|throwing
parameter_list|(
specifier|final
name|Exception
name|exception
parameter_list|)
block|{
return|return
operator|new
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

