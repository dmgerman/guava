begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LocalCacheAsMap
operator|.
name|Strength
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Helper class for creating {@link CacheBuilder} instances with all combinations of several sets of  * parameters.  *  * @author mike nonemacher  */
end_comment

begin_class
DECL|class|CacheBuilderFactory
class|class
name|CacheBuilderFactory
block|{
comment|// Default values contain only 'null', which means don't call the CacheBuilder method (just give
comment|// the CacheBuilder default).
DECL|field|concurrencyLevels
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|concurrencyLevels
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|(
name|Integer
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|field|initialCapacities
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|initialCapacities
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|(
name|Integer
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|field|maximumSizes
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|maximumSizes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|(
name|Integer
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|field|expirations
specifier|private
name|Set
argument_list|<
name|ExpirationSpec
argument_list|>
name|expirations
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|(
name|ExpirationSpec
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|field|keyStrengths
specifier|private
name|Set
argument_list|<
name|Strength
argument_list|>
name|keyStrengths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|(
name|Strength
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|field|valueStrengths
specifier|private
name|Set
argument_list|<
name|Strength
argument_list|>
name|valueStrengths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|(
name|Strength
operator|)
literal|null
argument_list|)
decl_stmt|;
DECL|method|withConcurrencyLevels (Set<Integer> concurrencyLevels)
name|CacheBuilderFactory
name|withConcurrencyLevels
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|concurrencyLevels
parameter_list|)
block|{
name|this
operator|.
name|concurrencyLevels
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|concurrencyLevels
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withInitialCapacities (Set<Integer> initialCapacities)
name|CacheBuilderFactory
name|withInitialCapacities
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|initialCapacities
parameter_list|)
block|{
name|this
operator|.
name|initialCapacities
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|initialCapacities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withMaximumSizes (Set<Integer> maximumSizes)
name|CacheBuilderFactory
name|withMaximumSizes
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|maximumSizes
parameter_list|)
block|{
name|this
operator|.
name|maximumSizes
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|maximumSizes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withExpirations (Set<ExpirationSpec> expirations)
name|CacheBuilderFactory
name|withExpirations
parameter_list|(
name|Set
argument_list|<
name|ExpirationSpec
argument_list|>
name|expirations
parameter_list|)
block|{
name|this
operator|.
name|expirations
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|expirations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withKeyStrengths (Set<Strength> keyStrengths)
name|CacheBuilderFactory
name|withKeyStrengths
parameter_list|(
name|Set
argument_list|<
name|Strength
argument_list|>
name|keyStrengths
parameter_list|)
block|{
name|this
operator|.
name|keyStrengths
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|keyStrengths
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|this
operator|.
name|keyStrengths
operator|.
name|contains
argument_list|(
name|Strength
operator|.
name|SOFT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withValueStrengths (Set<Strength> valueStrengths)
name|CacheBuilderFactory
name|withValueStrengths
parameter_list|(
name|Set
argument_list|<
name|Strength
argument_list|>
name|valueStrengths
parameter_list|)
block|{
name|this
operator|.
name|valueStrengths
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|valueStrengths
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|buildAllPermutations ()
name|Iterable
argument_list|<
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|buildAllPermutations
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterable
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|combinations
init|=
name|buildCartesianProduct
argument_list|(
name|concurrencyLevels
argument_list|,
name|initialCapacities
argument_list|,
name|maximumSizes
argument_list|,
name|expirations
argument_list|,
name|keyStrengths
argument_list|,
name|valueStrengths
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|combinations
argument_list|,
operator|new
name|Function
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|combination
parameter_list|)
block|{
return|return
name|createCacheBuilder
argument_list|(
operator|(
name|Integer
operator|)
name|combination
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|combination
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|combination
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
name|ExpirationSpec
operator|)
name|combination
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|Strength
operator|)
name|combination
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
name|Strength
operator|)
name|combination
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|field|NULLABLE_TO_OPTIONAL
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Object
argument_list|,
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
name|NULLABLE_TO_OPTIONAL
init|=
operator|new
name|Function
argument_list|<
name|Object
argument_list|,
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|fromNullable
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|OPTIONAL_TO_NULLABLE
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|OPTIONAL_TO_NULLABLE
init|=
operator|new
name|Function
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|Optional
argument_list|<
name|?
argument_list|>
name|optional
parameter_list|)
block|{
return|return
name|optional
operator|.
name|orNull
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/**    * Sets.cartesianProduct doesn't allow sets that contain null, but we want null to mean    * "don't call the associated CacheBuilder method" - that is, get the default CacheBuilder    * behavior. This method wraps the elements in the input sets (which may contain null) as    * Optionals, calls Sets.cartesianProduct with those, then transforms the result to unwrap    * the Optionals.     */
DECL|method|buildCartesianProduct (Set<?>.... sets)
specifier|private
name|Iterable
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|buildCartesianProduct
parameter_list|(
name|Set
argument_list|<
name|?
argument_list|>
modifier|...
name|sets
parameter_list|)
block|{
name|List
argument_list|<
name|Set
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|optionalSets
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|sets
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|?
argument_list|>
name|set
range|:
name|sets
control|)
block|{
name|Set
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
name|optionalSet
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|set
argument_list|,
name|NULLABLE_TO_OPTIONAL
argument_list|)
argument_list|)
decl_stmt|;
name|optionalSets
operator|.
name|add
argument_list|(
name|optionalSet
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|List
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|cartesianProduct
init|=
name|Sets
operator|.
name|cartesianProduct
argument_list|(
name|optionalSets
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|cartesianProduct
argument_list|,
operator|new
name|Function
argument_list|<
name|List
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|Optional
argument_list|<
name|?
argument_list|>
argument_list|>
name|objs
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|objs
argument_list|,
name|OPTIONAL_TO_NULLABLE
argument_list|)
return|;
block|}
block|}
block|)
function|;
block|}
end_class

begin_function
DECL|method|createCacheBuilder ( Integer concurrencyLevel, Integer initialCapacity, Integer maximumSize, ExpirationSpec expiration, Strength keyStrength, Strength valueStrength)
specifier|private
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|createCacheBuilder
parameter_list|(
name|Integer
name|concurrencyLevel
parameter_list|,
name|Integer
name|initialCapacity
parameter_list|,
name|Integer
name|maximumSize
parameter_list|,
name|ExpirationSpec
name|expiration
parameter_list|,
name|Strength
name|keyStrength
parameter_list|,
name|Strength
name|valueStrength
parameter_list|)
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|concurrencyLevel
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|initialCapacity
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|initialCapacity
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maximumSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|maximumSize
argument_list|(
name|maximumSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expiration
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|expiration
operator|.
name|expireAfterAccessMillis
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|expireAfterAccess
argument_list|(
name|expiration
operator|.
name|expireAfterAccessMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expiration
operator|.
name|expireAfterWriteMillis
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|expireAfterWrite
argument_list|(
name|expiration
operator|.
name|expireAfterWriteMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyStrength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setKeyStrength
argument_list|(
name|keyStrength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueStrength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setValueStrength
argument_list|(
name|valueStrength
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
end_function

begin_comment
comment|/**    * CacheBuilder doesn't allow expireAfterAccess and expireAfterWrite, so this encapsulates a    * single expiration specification. It has an {@code expireAfterAccess} and an    * {@code expireAfterWrite}, at least one of which will be null.    */
end_comment

begin_class
DECL|class|ExpirationSpec
specifier|static
class|class
name|ExpirationSpec
block|{
annotation|@
name|Nullable
DECL|field|expireAfterAccessMillis
specifier|private
specifier|final
name|Long
name|expireAfterAccessMillis
decl_stmt|;
annotation|@
name|Nullable
DECL|field|expireAfterWriteMillis
specifier|private
specifier|final
name|Long
name|expireAfterWriteMillis
decl_stmt|;
DECL|method|ExpirationSpec (Long expireAfterAccessMillis, Long expireAfterWriteMillis)
specifier|private
name|ExpirationSpec
parameter_list|(
name|Long
name|expireAfterAccessMillis
parameter_list|,
name|Long
name|expireAfterWriteMillis
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expireAfterAccessMillis
operator|==
literal|null
operator|||
name|expireAfterWriteMillis
operator|==
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|expireAfterAccessMillis
operator|=
name|expireAfterAccessMillis
expr_stmt|;
name|this
operator|.
name|expireAfterWriteMillis
operator|=
name|expireAfterWriteMillis
expr_stmt|;
block|}
DECL|method|afterAccess (long afterAccess, TimeUnit unit)
specifier|public
specifier|static
name|ExpirationSpec
name|afterAccess
parameter_list|(
name|long
name|afterAccess
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|ExpirationSpec
argument_list|(
name|unit
operator|.
name|toMillis
argument_list|(
name|afterAccess
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|afterWrite (long afterWrite, TimeUnit unit)
specifier|public
specifier|static
name|ExpirationSpec
name|afterWrite
parameter_list|(
name|long
name|afterWrite
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|ExpirationSpec
argument_list|(
literal|null
argument_list|,
name|unit
operator|.
name|toMillis
argument_list|(
name|afterWrite
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|expireAfterAccessMillis
argument_list|,
name|expireAfterWriteMillis
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ExpirationSpec
condition|)
block|{
name|ExpirationSpec
name|that
init|=
operator|(
name|ExpirationSpec
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|this
operator|.
name|expireAfterAccessMillis
argument_list|,
name|that
operator|.
name|expireAfterAccessMillis
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|this
operator|.
name|expireAfterWriteMillis
argument_list|,
name|that
operator|.
name|expireAfterWriteMillis
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"expireAfterAccessMillis"
argument_list|,
name|expireAfterAccessMillis
argument_list|)
operator|.
name|add
argument_list|(
literal|"expireAfterWriteMillis"
argument_list|,
name|expireAfterWriteMillis
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

unit|}
end_unit

