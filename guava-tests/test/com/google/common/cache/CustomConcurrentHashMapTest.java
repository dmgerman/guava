begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|DISCARDING_QUEUE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|DRAIN_THRESHOLD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|nullEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|unset
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|identityLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|countingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|queuingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingWeighers
operator|.
name|constantWeigher
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|LoadingValueReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|EntryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|ReferenceEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|Strength
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|ValueReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|CountingLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|CountingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|QueuingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|FakeTicker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_comment
comment|/**  * @author Charles Fry  */
end_comment

begin_class
DECL|class|CustomConcurrentHashMapTest
specifier|public
class|class
name|CustomConcurrentHashMapTest
extends|extends
name|TestCase
block|{
DECL|field|SMALL_MAX_SIZE
specifier|static
specifier|final
name|int
name|SMALL_MAX_SIZE
init|=
name|DRAIN_THRESHOLD
operator|*
literal|5
decl_stmt|;
DECL|method|makeMap (CacheBuilder<K, V> builder)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeMap
parameter_list|(
name|CacheBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|)
block|{
return|return
operator|new
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|builder
argument_list|,
name|CacheBuilder
operator|.
name|DEFAULT_STATS_COUNTER
argument_list|,
name|CacheLoader
operator|.
name|from
argument_list|(
name|Suppliers
operator|.
expr|<
name|V
operator|>
name|ofInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|makeComputingMap ( CacheBuilder<K, V> builder, CacheLoader<? super K, V> loader)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeComputingMap
parameter_list|(
name|CacheBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|,
name|CacheLoader
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|loader
parameter_list|)
block|{
return|return
operator|new
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|builder
argument_list|,
name|CacheBuilder
operator|.
name|DEFAULT_STATS_COUNTER
argument_list|,
name|loader
argument_list|)
return|;
block|}
DECL|method|createCacheBuilder ()
specifier|private
specifier|static
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|createCacheBuilder
parameter_list|()
block|{
return|return
operator|new
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
return|;
block|}
comment|// constructor tests
DECL|method|testDefaults ()
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Strength
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Strength
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|keyStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|valueStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|expireAfterAccessNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|expireAfterWriteNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CacheBuilder
operator|.
name|UNSET_INT
argument_list|,
name|map
operator|.
name|maxWeight
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|EntryFactory
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|entryFactory
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CacheBuilder
operator|.
name|NullListener
operator|.
name|INSTANCE
argument_list|,
name|map
operator|.
name|removalListener
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|DISCARDING_QUEUE
argument_list|,
name|map
operator|.
name|removalNotificationQueue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ticker
operator|.
name|systemTicker
argument_list|()
argument_list|,
name|map
operator|.
name|ticker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
comment|// concurrency level
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|segments
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// initial capacity / concurrency level
name|assertEquals
argument_list|(
literal|16
operator|/
name|map
operator|.
name|segments
operator|.
name|length
argument_list|,
name|map
operator|.
name|segments
index|[
literal|0
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|evictsBySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|expires
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|expiresAfterWrite
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|expiresAfterAccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputingFunction ()
specifier|public
name|void
name|testComputingFunction
parameter_list|()
block|{
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|from
parameter_list|)
block|{
return|return
name|from
return|;
block|}
block|}
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|loader
argument_list|,
name|map
operator|.
name|loader
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetKeyEquivalence ()
specifier|public
name|void
name|testSetKeyEquivalence
parameter_list|()
block|{
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|testEquivalence
init|=
operator|new
name|Equivalence
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|doEquivalent
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doHash
parameter_list|(
name|Object
name|t
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|keyEquivalence
argument_list|(
name|testEquivalence
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|testEquivalence
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|valueStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetValueEquivalence ()
specifier|public
name|void
name|testSetValueEquivalence
parameter_list|()
block|{
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|testEquivalence
init|=
operator|new
name|Equivalence
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|doEquivalent
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doHash
parameter_list|(
name|Object
name|t
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|valueEquivalence
argument_list|(
name|testEquivalence
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|testEquivalence
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|keyStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetConcurrencyLevel ()
specifier|public
name|void
name|testSetConcurrencyLevel
parameter_list|()
block|{
comment|// round up to nearest power of two
name|checkConcurrencyLevel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
DECL|method|checkConcurrencyLevel (int concurrencyLevel, int segmentCount)
specifier|private
specifier|static
name|void
name|checkConcurrencyLevel
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|,
name|int
name|segmentCount
parameter_list|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segmentCount
argument_list|,
name|map
operator|.
name|segments
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInitialCapacity ()
specifier|public
name|void
name|testSetInitialCapacity
parameter_list|()
block|{
comment|// share capacity over each segment, then round up to nearest power of two
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInitialCapacity ( int concurrencyLevel, int initialCapacity, int segmentSize)
specifier|private
specifier|static
name|void
name|checkInitialCapacity
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|int
name|segmentSize
parameter_list|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|initialCapacity
argument_list|(
name|initialCapacity
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|segmentSize
argument_list|,
name|map
operator|.
name|segments
index|[
name|i
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetMaximumSize ()
specifier|public
name|void
name|testSetMaximumSize
parameter_list|()
block|{
comment|// vary maximumSize wrt concurrencyLevel
for|for
control|(
name|int
name|maxSize
init|=
literal|1
init|;
name|maxSize
operator|<
literal|8
condition|;
name|maxSize
operator|++
control|)
block|{
name|checkMaximumSize
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
name|checkMaximumSize
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// vary initial capacity wrt maximumSize
for|for
control|(
name|int
name|capacity
init|=
literal|0
init|;
name|capacity
operator|<
literal|8
condition|;
name|capacity
operator|++
control|)
block|{
name|checkMaximumSize
argument_list|(
literal|1
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|2
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|4
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|8
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkMaximumSize (int concurrencyLevel, int initialCapacity, long maxSize)
specifier|private
specifier|static
name|void
name|checkMaximumSize
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|initialCapacity
argument_list|(
name|initialCapacity
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|maxSize
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalCapacity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|totalCapacity
operator|+=
name|map
operator|.
name|segments
index|[
name|i
index|]
operator|.
name|maxSegmentWeight
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"totalCapacity="
operator|+
name|totalCapacity
operator|+
literal|", maxSize="
operator|+
name|maxSize
argument_list|,
name|totalCapacity
operator|==
name|maxSize
argument_list|)
expr_stmt|;
name|map
operator|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|initialCapacity
argument_list|(
name|initialCapacity
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxSize
argument_list|)
operator|.
name|weigher
argument_list|(
name|constantWeigher
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|totalCapacity
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|totalCapacity
operator|+=
name|map
operator|.
name|segments
index|[
name|i
index|]
operator|.
name|maxSegmentWeight
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"totalCapacity="
operator|+
name|totalCapacity
operator|+
literal|", maxSize="
operator|+
name|maxSize
argument_list|,
name|totalCapacity
operator|==
name|maxSize
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetWeakKeys ()
specifier|public
name|void
name|testSetWeakKeys
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
argument_list|)
decl_stmt|;
name|checkStrength
argument_list|(
name|map
argument_list|,
name|Strength
operator|.
name|WEAK
argument_list|,
name|Strength
operator|.
name|STRONG
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|EntryFactory
operator|.
name|WEAK
argument_list|,
name|map
operator|.
name|entryFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetWeakValues ()
specifier|public
name|void
name|testSetWeakValues
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|checkStrength
argument_list|(
name|map
argument_list|,
name|Strength
operator|.
name|STRONG
argument_list|,
name|Strength
operator|.
name|WEAK
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|EntryFactory
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|entryFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetSoftValues ()
specifier|public
name|void
name|testSetSoftValues
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
argument_list|)
decl_stmt|;
name|checkStrength
argument_list|(
name|map
argument_list|,
name|Strength
operator|.
name|STRONG
argument_list|,
name|Strength
operator|.
name|SOFT
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|EntryFactory
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|entryFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStrength ( CustomConcurrentHashMap<Object, Object> map, Strength keyStrength, Strength valueStrength)
specifier|private
specifier|static
name|void
name|checkStrength
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|Strength
name|keyStrength
parameter_list|,
name|Strength
name|valueStrength
parameter_list|)
block|{
name|assertSame
argument_list|(
name|keyStrength
argument_list|,
name|map
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueStrength
argument_list|,
name|map
operator|.
name|valueStrength
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetExpireAfterWrite ()
specifier|public
name|void
name|testSetExpireAfterWrite
parameter_list|()
block|{
name|long
name|duration
init|=
literal|42
decl_stmt|;
name|TimeUnit
name|unit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unit
operator|.
name|toNanos
argument_list|(
name|duration
argument_list|)
argument_list|,
name|map
operator|.
name|expireAfterWriteNanos
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetExpireAfterAccess ()
specifier|public
name|void
name|testSetExpireAfterAccess
parameter_list|()
block|{
name|long
name|duration
init|=
literal|42
decl_stmt|;
name|TimeUnit
name|unit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unit
operator|.
name|toNanos
argument_list|(
name|duration
argument_list|)
argument_list|,
name|map
operator|.
name|expireAfterAccessNanos
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetRemovalListener ()
specifier|public
name|void
name|testSetRemovalListener
parameter_list|()
block|{
name|RemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|testListener
init|=
name|TestingRemovalListeners
operator|.
name|nullRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|testListener
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|testListener
argument_list|,
name|map
operator|.
name|removalListener
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetTicker ()
specifier|public
name|void
name|testSetTicker
parameter_list|()
block|{
name|Ticker
name|testTicker
init|=
operator|new
name|Ticker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|read
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|ticker
argument_list|(
name|testTicker
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|testTicker
argument_list|,
name|map
operator|.
name|ticker
argument_list|)
expr_stmt|;
block|}
comment|// computation tests
DECL|method|testCompute ()
specifier|public
name|void
name|testCompute
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|loader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecordReadOnCompute ()
specifier|public
name|void
name|testRecordReadOnCompute
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|loader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEvictingMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|writeOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|readOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SMALL_MAX_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|writeOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|readOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|readOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// access some of the elements
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|reads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|readOrder
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|map
operator|.
name|getOrLoad
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|reads
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|size
argument_list|()
operator|<=
name|DRAIN_THRESHOLD
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|undrainedIndex
init|=
name|reads
operator|.
name|size
argument_list|()
operator|-
name|segment
operator|.
name|recencyQueue
operator|.
name|size
argument_list|()
decl_stmt|;
name|checkAndDrainRecencyQueue
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|reads
operator|.
name|subList
argument_list|(
name|undrainedIndex
argument_list|,
name|reads
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|readOrder
operator|.
name|addAll
argument_list|(
name|reads
argument_list|)
expr_stmt|;
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|readOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testComputeExistingEntry ()
specifier|public
name|void
name|testComputeExistingEntry
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|loader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputePartiallyCollectedKey ()
specifier|public
name|void
name|testComputePartiallyCollectedKey
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountingLoader
name|loader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|builder
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearKey
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputePartiallyCollectedValue ()
specifier|public
name|void
name|testComputePartiallyCollectedValue
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountingLoader
name|loader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|builder
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|valueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeExpiredEntry ()
specifier|public
name|void
name|testComputeExpiredEntry
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|createCacheBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|CountingLoader
name|loader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|builder
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|one
init|=
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|two
init|=
name|map
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyEntry_computing ()
specifier|public
name|void
name|testCopyEntry_computing
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|computingSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|computedObject
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|computingSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|computedObject
return|;
block|}
block|}
decl_stmt|;
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
decl_stmt|;
specifier|final
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|builder
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|one
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|map
operator|.
name|getOrLoad
argument_list|(
name|one
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|computingSignal
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|map
operator|.
name|getOrLoad
argument_list|(
name|one
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|one
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|newEntry
init|=
name|segment
operator|.
name|copyEntry
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|LoadingValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueReference
init|=
operator|(
name|LoadingValueReference
operator|)
name|newEntry
operator|.
name|getValueReference
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|valueReference
operator|.
name|loadedValue
argument_list|)
expr_stmt|;
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|assertNotNull
argument_list|(
name|map
operator|.
name|putIfAbsent
argument_list|(
name|one
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// force notifications
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|computedObject
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|one
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener_replaced_computing ()
specifier|public
name|void
name|testRemovalListener_replaced_computing
parameter_list|()
block|{
comment|// TODO(user): May be a good candidate to play with the MultithreadedTestCase
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|computingSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|computedObject
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|computingSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|computedObject
return|;
block|}
block|}
decl_stmt|;
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|createCacheBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
decl_stmt|;
specifier|final
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeComputingMap
argument_list|(
name|builder
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|map
operator|.
name|getOrLoad
argument_list|(
name|one
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|computingSignal
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|assertNotNull
argument_list|(
name|map
operator|.
name|putIfAbsent
argument_list|(
name|one
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// force notifications
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|computedObject
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Removal listener tests
DECL|method|testRemovalListener_explicit ()
specifier|public
name|void
name|testRemovalListener_explicit
parameter_list|()
block|{
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|three
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|four
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|five
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|six
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|two
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|two
argument_list|,
name|three
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|three
argument_list|,
name|four
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|three
argument_list|,
name|four
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|four
argument_list|,
name|five
argument_list|)
expr_stmt|;
name|i
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|four
argument_list|,
name|five
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|five
argument_list|,
name|six
argument_list|)
expr_stmt|;
name|i
operator|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|five
argument_list|,
name|six
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener_replaced ()
specifier|public
name|void
name|testRemovalListener_replaced
parameter_list|()
block|{
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|three
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|four
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|five
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|six
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|two
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|newMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|one
argument_list|,
name|four
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|newMap
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|three
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
name|one
argument_list|,
name|five
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|four
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
name|one
argument_list|,
name|five
argument_list|,
name|six
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|five
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener_collected ()
specifier|public
name|void
name|testRemovalListener_collected
parameter_list|()
block|{
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|softValues
argument_list|()
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|three
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|one
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|one
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|map
operator|.
name|reclaimValue
argument_list|(
name|entry
operator|.
name|getValueReference
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|two
argument_list|,
name|RemovalCause
operator|.
name|COLLECTED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener_expired ()
specifier|public
name|void
name|testRemovalListener_expired
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|three
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|four
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|five
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|three
argument_list|,
name|four
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|four
argument_list|,
name|five
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|two
argument_list|,
name|RemovalCause
operator|.
name|EXPIRED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener_size ()
specifier|public
name|void
name|testRemovalListener_size
parameter_list|()
block|{
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|queuingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|2
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|three
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|four
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|three
argument_list|,
name|four
argument_list|)
expr_stmt|;
name|assertNotified
argument_list|(
name|listener
argument_list|,
name|one
argument_list|,
name|two
argument_list|,
name|RemovalCause
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotified ( QueuingRemovalListener<K, V> listener, K key, V value, RemovalCause cause)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertNotified
parameter_list|(
name|QueuingRemovalListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|listener
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|RemovalCause
name|cause
parameter_list|)
block|{
name|RemovalNotification
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|notification
init|=
name|listener
operator|.
name|remove
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Segment core tests
DECL|method|testNewEntry ()
specifier|public
name|void
name|testNewEntry
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEntryTypeMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryOne
init|=
name|map
operator|.
name|newEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRefOne
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|entryOne
argument_list|,
name|valueOne
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|valueOne
argument_list|,
name|valueRefOne
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|entryOne
operator|.
name|setValueReference
argument_list|(
name|valueRefOne
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyOne
argument_list|,
name|entryOne
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashOne
argument_list|,
name|entryOne
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entryOne
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueRefOne
argument_list|,
name|entryOne
operator|.
name|getValueReference
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryTwo
init|=
name|map
operator|.
name|newEntry
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
name|entryOne
argument_list|)
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRefTwo
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|entryTwo
argument_list|,
name|valueTwo
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|valueTwo
argument_list|,
name|valueRefTwo
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|entryTwo
operator|.
name|setValueReference
argument_list|(
name|valueRefTwo
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyTwo
argument_list|,
name|entryTwo
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashTwo
argument_list|,
name|entryTwo
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entryOne
argument_list|,
name|entryTwo
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueRefTwo
argument_list|,
name|entryTwo
operator|.
name|getValueReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyEntry ()
specifier|public
name|void
name|testCopyEntry
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEntryTypeMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryOne
init|=
name|map
operator|.
name|newEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|entryOne
operator|.
name|setValueReference
argument_list|(
name|map
operator|.
name|newValueReference
argument_list|(
name|entryOne
argument_list|,
name|valueOne
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryTwo
init|=
name|map
operator|.
name|newEntry
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
name|entryOne
argument_list|)
decl_stmt|;
name|entryTwo
operator|.
name|setValueReference
argument_list|(
name|map
operator|.
name|newValueReference
argument_list|(
name|entryTwo
argument_list|,
name|valueTwo
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|evictsBySize
argument_list|()
condition|)
block|{
name|CustomConcurrentHashMap
operator|.
name|connectEvictables
argument_list|(
name|entryOne
argument_list|,
name|entryTwo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|expires
argument_list|()
condition|)
block|{
name|CustomConcurrentHashMap
operator|.
name|connectExpirables
argument_list|(
name|entryOne
argument_list|,
name|entryTwo
argument_list|)
expr_stmt|;
block|}
name|assertConnected
argument_list|(
name|map
argument_list|,
name|entryOne
argument_list|,
name|entryTwo
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|copyOne
init|=
name|map
operator|.
name|copyEntry
argument_list|(
name|entryOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|keyOne
argument_list|,
name|entryOne
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashOne
argument_list|,
name|entryOne
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entryOne
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueOne
argument_list|,
name|copyOne
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertConnected
argument_list|(
name|map
argument_list|,
name|copyOne
argument_list|,
name|entryTwo
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|copyTwo
init|=
name|map
operator|.
name|copyEntry
argument_list|(
name|entryTwo
argument_list|,
name|copyOne
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|keyTwo
argument_list|,
name|copyTwo
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashTwo
argument_list|,
name|copyTwo
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copyOne
argument_list|,
name|copyTwo
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueTwo
argument_list|,
name|copyTwo
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertConnected
argument_list|(
name|map
argument_list|,
name|copyOne
argument_list|,
name|copyTwo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertConnected ( CustomConcurrentHashMap<K, V> map, ReferenceEntry<K, V> one, ReferenceEntry<K, V> two)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertConnected
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|one
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|two
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|evictsBySize
argument_list|()
condition|)
block|{
name|assertSame
argument_list|(
name|two
argument_list|,
name|one
operator|.
name|getNextEvictable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|expires
argument_list|()
condition|)
block|{
name|assertSame
argument_list|(
name|two
argument_list|,
name|one
operator|.
name|getNextExpirable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentGetAndContains ()
specifier|public
name|void
name|testSegmentGetAndContains
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|map
operator|.
name|newEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|entry
argument_list|,
name|value
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// count == 0
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// count == 1
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't see absent values now that count> 0
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// null key
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|nullEntry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|Object
name|nullValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|nullValueRef
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|nullEntry
argument_list|,
name|nullValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|nullEntry
operator|.
name|setValueReference
argument_list|(
name|nullValueRef
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|nullEntry
argument_list|)
expr_stmt|;
comment|// skip the null key
name|assertSame
argument_list|(
name|value
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|nullValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// hash collision
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dummy
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|Object
name|dummyValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dummyValueRef
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|dummy
argument_list|,
name|dummyValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|setValueReference
argument_list|(
name|dummyValueRef
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|dummyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// key collision
name|dummy
operator|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|dummyValue
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|dummyValueRef
operator|=
name|map
operator|.
name|newValueReference
argument_list|(
name|dummy
argument_list|,
name|dummyValue
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setValueReference
argument_list|(
name|dummyValueRef
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// returns the most recent entry
name|assertSame
argument_list|(
name|dummyValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|dummyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// expired
name|dummy
operator|.
name|setExpirationTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|dummyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentReplaceValue ()
specifier|public
name|void
name|testSegmentReplaceValue
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|oldValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|oldValue
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertFalse
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same value
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// different value
name|assertFalse
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentReplace ()
specifier|public
name|void
name|testSegmentReplace
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|oldValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|oldValue
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertNull
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentPut ()
specifier|public
name|void
name|testSegmentPut
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|oldValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|oldValue
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentPutIfAbsent ()
specifier|public
name|void
name|testSegmentPutIfAbsent
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|oldValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|oldValue
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentPut_expand ()
specifier|public
name|void
name|testSegmentPut_expand
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|1024
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
operator|>
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentPut_evict ()
specifier|public
name|void
name|testSegmentPut_evict
parameter_list|()
block|{
name|int
name|maxSize
init|=
literal|10
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|maxSize
argument_list|)
argument_list|)
decl_stmt|;
comment|// manually add elements to avoid eviction
name|int
name|originalCount
init|=
literal|1024
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|originalMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|originalMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|maxSize
condition|)
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|originalMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentRemove ()
specifier|public
name|void
name|testSegmentRemove
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|oldValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|oldValue
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentRemoveValue ()
specifier|public
name|void
name|testSegmentRemoveValue
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|oldValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|oldValue
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same value
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// different value
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpand ()
specifier|public
name|void
name|testExpand
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// manually add elements to avoid expansion
name|int
name|originalCount
init|=
literal|1024
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// chain all entries together as we only have a single bucket
name|entry
operator|=
name|map
operator|.
name|newEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|entry
argument_list|,
name|value
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
name|originalCount
expr_stmt|;
name|ImmutableMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|originalMap
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|originalMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|originalCount
operator|*
literal|2
condition|;
name|i
operator|*=
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|segment
operator|.
name|expand
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|countLiveEntries
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testReclaimKey ()
specifier|public
name|void
name|testReclaimKey
parameter_list|()
block|{
name|CountingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// create 3 objects and chain them together
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryOne
init|=
name|createDummyEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
name|valueOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryTwo
init|=
name|createDummyEntry
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
name|valueTwo
argument_list|,
name|entryOne
argument_list|)
decl_stmt|;
name|Object
name|keyThree
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueThree
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashThree
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyThree
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryThree
init|=
name|createDummyEntry
argument_list|(
name|keyThree
argument_list|,
name|hashThree
argument_list|,
name|valueThree
argument_list|,
name|entryTwo
argument_list|)
decl_stmt|;
comment|// absent
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|reclaimKey
argument_list|(
name|entryOne
argument_list|,
name|hashOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entryOne
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|reclaimKey
argument_list|(
name|entryTwo
argument_list|,
name|hashTwo
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entryTwo
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|reclaimKey
argument_list|(
name|entryThree
argument_list|,
name|hashThree
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// present
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entryOne
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|reclaimKey
argument_list|(
name|entryOne
argument_list|,
name|hashOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyOne
argument_list|,
name|listener
operator|.
name|getLastEvictedKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueOne
argument_list|,
name|listener
operator|.
name|getLastEvictedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|removalNotificationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|evictionQueue
operator|.
name|contains
argument_list|(
name|entryOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|contains
argument_list|(
name|entryOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveFromChain ()
specifier|public
name|void
name|testRemoveFromChain
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// create 3 objects and chain them together
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryOne
init|=
name|createDummyEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
name|valueOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryTwo
init|=
name|createDummyEntry
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
name|valueTwo
argument_list|,
name|entryOne
argument_list|)
decl_stmt|;
name|Object
name|keyThree
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueThree
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashThree
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyThree
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryThree
init|=
name|createDummyEntry
argument_list|(
name|keyThree
argument_list|,
name|hashThree
argument_list|,
name|valueThree
argument_list|,
name|entryTwo
argument_list|)
decl_stmt|;
comment|// alone
name|assertNull
argument_list|(
name|segment
operator|.
name|removeFromChain
argument_list|(
name|entryOne
argument_list|,
name|entryOne
argument_list|)
argument_list|)
expr_stmt|;
comment|// head
name|assertSame
argument_list|(
name|entryOne
argument_list|,
name|segment
operator|.
name|removeFromChain
argument_list|(
name|entryTwo
argument_list|,
name|entryTwo
argument_list|)
argument_list|)
expr_stmt|;
comment|// middle
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|newFirst
init|=
name|segment
operator|.
name|removeFromChain
argument_list|(
name|entryThree
argument_list|,
name|entryTwo
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|keyThree
argument_list|,
name|newFirst
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueThree
argument_list|,
name|newFirst
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashThree
argument_list|,
name|newFirst
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entryOne
argument_list|,
name|newFirst
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// tail (remaining entries are copied in reverse order)
name|newFirst
operator|=
name|segment
operator|.
name|removeFromChain
argument_list|(
name|entryThree
argument_list|,
name|entryOne
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyTwo
argument_list|,
name|newFirst
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueTwo
argument_list|,
name|newFirst
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashTwo
argument_list|,
name|newFirst
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|newFirst
operator|=
name|newFirst
operator|.
name|getNext
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|keyThree
argument_list|,
name|newFirst
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueThree
argument_list|,
name|newFirst
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashThree
argument_list|,
name|newFirst
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|newFirst
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpand_cleanup ()
specifier|public
name|void
name|testExpand_cleanup
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// manually add elements to avoid expansion
comment|// 1/3 null keys, 1/3 null values
name|int
name|originalCount
init|=
literal|1024
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|(
name|i
operator|%
literal|3
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|1
condition|)
block|{
name|key
operator|=
literal|null
expr_stmt|;
block|}
comment|// chain all entries together as we only have a single bucket
name|entry
operator|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
name|originalCount
expr_stmt|;
name|int
name|liveCount
init|=
name|originalCount
operator|/
literal|3
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveCount
argument_list|,
name|countLiveEntries
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|originalMap
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|liveCount
argument_list|,
name|originalMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// can't compare map contents until cleanup occurs
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|originalCount
operator|*
literal|2
condition|;
name|i
operator|*=
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|segment
operator|.
name|expand
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveCount
argument_list|,
name|countLiveEntries
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// expansion cleanup is sloppy, with a goal of avoiding unnecessary copies
name|assertTrue
argument_list|(
name|segment
operator|.
name|count
operator|>=
name|liveCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|count
operator|<=
name|originalCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countLiveEntries (CustomConcurrentHashMap<K, V> map)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|countLiveEntries
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
range|:
name|map
operator|.
name|segments
control|)
block|{
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
init|=
name|table
operator|.
name|get
argument_list|(
name|i
argument_list|)
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|getNext
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|isLive
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|createDummyEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|segment
operator|.
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|readCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|segment
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|evictionQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|segment
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|evictionQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|readCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveEntry ()
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|countingRemovalListener
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|createDummyEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// remove absent
name|assertFalse
argument_list|(
name|segment
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|,
name|hash
argument_list|,
name|RemovalCause
operator|.
name|COLLECTED
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove live
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|,
name|hash
argument_list|,
name|RemovalCause
operator|.
name|COLLECTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotificationEnqueued
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|removalNotificationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|evictionQueue
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReclaimValue ()
specifier|public
name|void
name|testReclaimValue
parameter_list|()
block|{
name|CountingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
comment|// reclaim absent
name|assertFalse
argument_list|(
name|segment
operator|.
name|reclaimValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
comment|// reclaim live
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|reclaimValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|listener
operator|.
name|getLastEvictedKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|listener
operator|.
name|getLastEvictedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|removalNotificationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|evictionQueue
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// reclaim wrong value reference
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|otherValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|otherValueRef
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|reclaimValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|reclaimValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|otherValueRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|listener
operator|.
name|getLastEvictedKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|listener
operator|.
name|getLastEvictedValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearValue ()
specifier|public
name|void
name|testClearValue
parameter_list|()
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|countingRemovalListener
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|DummyEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
comment|// clear absent
name|assertFalse
argument_list|(
name|segment
operator|.
name|clearValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
comment|// clear live
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// don't increment count; this is used during computation
name|assertTrue
argument_list|(
name|segment
operator|.
name|clearValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
comment|// no notification sent with clearValue
name|assertTrue
argument_list|(
name|map
operator|.
name|removalNotificationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|evictionQueue
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// clear wrong value reference
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|DummyValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|otherValueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|otherValueRef
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|clearValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|clearValue
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotificationEnqueued ( CustomConcurrentHashMap<K, V> map, K key, V value, int hash)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertNotificationEnqueued
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
name|RemovalNotification
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|notification
init|=
name|map
operator|.
name|removalNotificationQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Segment eviction tests
DECL|method|testDrainRecencyQueueOnWrite ()
specifier|public
name|void
name|testDrainRecencyQueueOnWrite
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEvictingMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|recencyQueue
operator|!=
name|DISCARDING_QUEUE
condition|)
block|{
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainRecencyQueueOnRead ()
specifier|public
name|void
name|testDrainRecencyQueueOnRead
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEvictingMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|recencyQueue
operator|!=
name|DISCARDING_QUEUE
condition|)
block|{
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// repeated get of the same key
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|size
argument_list|()
operator|<=
name|DRAIN_THRESHOLD
argument_list|)
expr_stmt|;
block|}
comment|// get over many different keys
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|size
argument_list|()
operator|<=
name|DRAIN_THRESHOLD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRecordRead ()
specifier|public
name|void
name|testRecordRead
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEvictingMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|writeOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|readOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|createDummyEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// must recordRead for drainRecencyQueue to believe this entry is live
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|readOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|readOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// access some of the elements
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|reads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|readOrder
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|segment
operator|.
name|recordRead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|reads
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|checkAndDrainRecencyQueue
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|reads
argument_list|)
expr_stmt|;
name|readOrder
operator|.
name|addAll
argument_list|(
name|reads
argument_list|)
expr_stmt|;
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|readOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRecordReadOnGet ()
specifier|public
name|void
name|testRecordReadOnGet
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEvictingMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|writeOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|readOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|writeOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|readOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|readOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// access some of the elements
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|reads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|readOrder
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|reads
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|recencyQueue
operator|.
name|size
argument_list|()
operator|<=
name|DRAIN_THRESHOLD
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|undrainedIndex
init|=
name|reads
operator|.
name|size
argument_list|()
operator|-
name|segment
operator|.
name|recencyQueue
operator|.
name|size
argument_list|()
decl_stmt|;
name|checkAndDrainRecencyQueue
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|reads
operator|.
name|subList
argument_list|(
name|undrainedIndex
argument_list|,
name|reads
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|readOrder
operator|.
name|addAll
argument_list|(
name|reads
argument_list|)
expr_stmt|;
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|readOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRecordWrite ()
specifier|public
name|void
name|testRecordWrite
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allEvictingMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|writeOrder
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DRAIN_THRESHOLD
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|createDummyEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// must recordRead for drainRecencyQueue to believe this entry is live
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeOrder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|writeOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// access some of the elements
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|writes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|writeOrder
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writes
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|writeOrder
operator|.
name|addAll
argument_list|(
name|writes
argument_list|)
expr_stmt|;
name|checkEvictionQueues
argument_list|(
name|map
argument_list|,
name|segment
argument_list|,
name|writeOrder
argument_list|,
name|writeOrder
argument_list|)
expr_stmt|;
name|checkExpirationTimes
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkAndDrainRecencyQueue (CustomConcurrentHashMap<K, V> map, Segment<K, V> segment, List<ReferenceEntry<K, V>> reads)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|checkAndDrainRecencyQueue
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
parameter_list|,
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|reads
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|evictsBySize
argument_list|()
operator|||
name|map
operator|.
name|expiresAfterAccess
argument_list|()
condition|)
block|{
name|assertSameEntries
argument_list|(
name|reads
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|segment
operator|.
name|recencyQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|drainRecencyQueue
argument_list|()
expr_stmt|;
block|}
DECL|method|checkEvictionQueues (CustomConcurrentHashMap<K, V> map, Segment<K, V> segment, List<ReferenceEntry<K, V>> readOrder, List<ReferenceEntry<K, V>> writeOrder)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|checkEvictionQueues
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
parameter_list|,
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|readOrder
parameter_list|,
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|writeOrder
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|evictsBySize
argument_list|()
condition|)
block|{
name|assertSameEntries
argument_list|(
name|readOrder
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|segment
operator|.
name|evictionQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|expiresAfterAccess
argument_list|()
condition|)
block|{
name|assertSameEntries
argument_list|(
name|readOrder
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|segment
operator|.
name|expirationQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|expiresAfterWrite
argument_list|()
condition|)
block|{
name|assertSameEntries
argument_list|(
name|writeOrder
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|segment
operator|.
name|expirationQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSameEntries (List<ReferenceEntry<K, V>> expectedEntries, List<ReferenceEntry<K, V>> actualEntries)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertSameEntries
parameter_list|(
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|expectedEntries
parameter_list|,
name|List
argument_list|<
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|actualEntries
parameter_list|)
block|{
name|int
name|size
init|=
name|expectedEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|actualEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|expectedEntry
init|=
name|expectedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|actualEntry
init|=
name|actualEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|actualEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|expectedEntry
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|actualEntry
operator|.
name|getValueReference
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkExpirationTimes (CustomConcurrentHashMap<K, V> map)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|checkExpirationTimes
parameter_list|(
name|CustomConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|expires
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|segment
range|:
name|map
operator|.
name|segments
control|)
block|{
name|long
name|lastExpirationTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
range|:
name|segment
operator|.
name|recencyQueue
control|)
block|{
name|long
name|expirationTime
init|=
name|e
operator|.
name|getExpirationTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expirationTime
operator|>=
name|lastExpirationTime
argument_list|)
expr_stmt|;
name|lastExpirationTime
operator|=
name|expirationTime
expr_stmt|;
block|}
name|lastExpirationTime
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
range|:
name|segment
operator|.
name|expirationQueue
control|)
block|{
name|long
name|expirationTime
init|=
name|e
operator|.
name|getExpirationTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expirationTime
operator|>=
name|lastExpirationTime
argument_list|)
expr_stmt|;
name|lastExpirationTime
operator|=
name|expirationTime
expr_stmt|;
block|}
block|}
block|}
DECL|method|testExpireAfterWrite ()
specifier|public
name|void
name|testExpireAfterWrite
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|map
operator|.
name|getEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isLive
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expirationQueue
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|segment
operator|.
name|recordRead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|segment
operator|.
name|recordRead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpireAfterAccess ()
specifier|public
name|void
name|testExpireAfterAccess
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|map
operator|.
name|getEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isLive
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expirationQueue
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|segment
operator|.
name|recordRead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|segment
operator|.
name|recordRead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|segment
operator|.
name|recordRead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|expirationQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|expireEntries
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|expirationQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEvictEntries ()
specifier|public
name|void
name|testEvictEntries
parameter_list|()
block|{
name|int
name|maxSize
init|=
literal|10
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|maxSize
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// manually add elements to avoid eviction
name|int
name|originalCount
init|=
literal|1024
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|originalMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|first
init|=
name|table
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|entry
operator|=
name|map
operator|.
name|newEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueRef
init|=
name|map
operator|.
name|newValueReference
argument_list|(
name|entry
argument_list|,
name|value
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
name|segment
operator|.
name|recordWrite
argument_list|(
name|entry
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|originalMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|count
operator|=
name|originalCount
expr_stmt|;
name|segment
operator|.
name|totalWeight
operator|=
name|originalCount
expr_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|originalMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
operator|-
name|maxSize
condition|;
name|i
operator|++
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|segment
operator|.
name|evictEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|// reference queues
DECL|method|testDrainKeyReferenceQueueOnWrite ()
specifier|public
name|void
name|testDrainKeyReferenceQueueOnWrite
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|usesKeyReferences
argument_list|()
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
operator|)
name|entry
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|keyReferenceQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainValueReferenceQueueOnWrite ()
specifier|public
name|void
name|testDrainValueReferenceQueueOnWrite
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|usesValueReferences
argument_list|()
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueReference
init|=
name|entry
operator|.
name|getValueReference
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
operator|)
name|valueReference
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|valueReferenceQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainKeyReferenceQueueOnRead ()
specifier|public
name|void
name|testDrainKeyReferenceQueueOnRead
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|usesKeyReferences
argument_list|()
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
operator|)
name|entry
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SMALL_MAX_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|keyTwo
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|keyReferenceQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainValueReferenceQueueOnRead ()
specifier|public
name|void
name|testDrainValueReferenceQueueOnRead
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|builder
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|usesValueReferences
argument_list|()
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|ReferenceEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
name|ValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|valueReference
init|=
name|entry
operator|.
name|getValueReference
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
operator|)
name|valueReference
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SMALL_MAX_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|keyTwo
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|valueReferenceQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNullParameters ()
specifier|public
name|void
name|testNullParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|makeMap
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|identityLoader
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|makeComputingMap
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// createMock
DECL|method|testSerializationProxy ()
specifier|public
name|void
name|testSerializationProxy
parameter_list|()
block|{
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|SerializableCacheLoader
argument_list|()
decl_stmt|;
name|RemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
init|=
operator|new
name|SerializableRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SerializableWeigher
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|weigher
init|=
operator|new
name|SerializableWeigher
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Ticker
name|ticker
init|=
operator|new
name|SerializableTicker
argument_list|()
decl_stmt|;
name|LocalCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|one
init|=
operator|(
name|LocalCache
operator|)
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|123
argument_list|,
name|NANOSECONDS
argument_list|)
operator|.
name|maximumWeight
argument_list|(
literal|789
argument_list|)
operator|.
name|weigher
argument_list|(
name|weigher
argument_list|)
operator|.
name|concurrencyLevel
argument_list|(
literal|12
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
comment|// add a non-serializable entry
name|one
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|one
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|one
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LocalCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|two
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|one
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|two
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|two
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mapOne
init|=
name|one
operator|.
name|map
decl_stmt|;
name|CustomConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mapTwo
init|=
name|two
operator|.
name|map
decl_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|loader
argument_list|,
name|mapTwo
operator|.
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|keyStrength
argument_list|,
name|mapTwo
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|keyStrength
argument_list|,
name|mapTwo
operator|.
name|keyStrength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|valueEquivalence
argument_list|,
name|mapTwo
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|valueEquivalence
argument_list|,
name|mapTwo
operator|.
name|valueEquivalence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|maxWeight
argument_list|,
name|mapTwo
operator|.
name|maxWeight
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|weigher
argument_list|,
name|mapTwo
operator|.
name|weigher
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|expireAfterAccessNanos
argument_list|,
name|mapTwo
operator|.
name|expireAfterAccessNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|expireAfterWriteNanos
argument_list|,
name|mapTwo
operator|.
name|expireAfterWriteNanos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|removalListener
argument_list|,
name|mapTwo
operator|.
name|removalListener
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapOne
operator|.
name|ticker
argument_list|,
name|mapTwo
operator|.
name|ticker
argument_list|)
expr_stmt|;
block|}
comment|// utility methods
comment|/**    * Returns an iterable containing all combinations of maximumSize, expireAfterAccess/Write,    * weakKeys and weak/softValues.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|allEntryTypeMakers ()
specifier|private
specifier|static
name|Iterable
argument_list|<
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|allEntryTypeMakers
parameter_list|()
block|{
name|List
argument_list|<
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|result
init|=
name|newArrayList
argument_list|(
name|allKeyValueStrengthMakers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|builder
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|builder
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|builder
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|builder
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|allKeyValueStrengthMakers
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|builder
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns an iterable containing all combinations of maximumSize and expireAfterAccess/Write.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|allEvictingMakers ()
specifier|static
name|Iterable
argument_list|<
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|allEvictingMakers
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|createCacheBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|99999
argument_list|,
name|SECONDS
argument_list|)
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
name|SMALL_MAX_SIZE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|SMALL_MAX_SIZE
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
name|SMALL_MAX_SIZE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an iterable containing all combinations weakKeys and weak/softValues.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|allKeyValueStrengthMakers ()
specifier|private
specifier|static
name|Iterable
argument_list|<
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|allKeyValueStrengthMakers
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|createCacheBuilder
argument_list|()
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|,
name|createCacheBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|softValues
argument_list|()
argument_list|)
return|;
block|}
comment|// entries and values
DECL|method|createDummyEntry ( K key, int hash, V value, ReferenceEntry<K, V> next)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|DummyEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createDummyEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|int
name|hash
parameter_list|,
name|V
name|value
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|)
block|{
name|DummyEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|DummyEntry
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|next
argument_list|)
decl_stmt|;
name|DummyValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|valueRef
init|=
name|DummyValueReference
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setValueReference
argument_list|(
name|valueRef
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|class|DummyEntry
specifier|static
class|class
name|DummyEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
DECL|field|hash
specifier|private
specifier|final
name|int
name|hash
decl_stmt|;
DECL|field|next
specifier|private
specifier|final
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
decl_stmt|;
DECL|method|DummyEntry (K key, int hash, ReferenceEntry<K, V> next)
specifier|public
name|DummyEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|int
name|hash
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
DECL|method|create (K key, int hash, ReferenceEntry<K, V> next)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|DummyEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|K
name|key
parameter_list|,
name|int
name|hash
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|)
block|{
return|return
operator|new
name|DummyEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|next
argument_list|)
return|;
block|}
DECL|method|clearKey ()
specifier|public
name|void
name|clearKey
parameter_list|()
block|{
name|this
operator|.
name|key
operator|=
literal|null
expr_stmt|;
block|}
DECL|field|valueReference
specifier|private
name|ValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|valueReference
init|=
name|unset
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getValueReference ()
specifier|public
name|ValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getValueReference
parameter_list|()
block|{
return|return
name|valueReference
return|;
block|}
annotation|@
name|Override
DECL|method|setValueReference (ValueReference<K, V> valueReference)
specifier|public
name|void
name|setValueReference
parameter_list|(
name|ValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|valueReference
parameter_list|)
block|{
name|this
operator|.
name|valueReference
operator|=
name|valueReference
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|getHash ()
specifier|public
name|int
name|getHash
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|field|expirationTime
specifier|private
name|long
name|expirationTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
annotation|@
name|Override
DECL|method|getExpirationTime ()
specifier|public
name|long
name|getExpirationTime
parameter_list|()
block|{
return|return
name|expirationTime
return|;
block|}
annotation|@
name|Override
DECL|method|setExpirationTime (long time)
specifier|public
name|void
name|setExpirationTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|expirationTime
operator|=
name|time
expr_stmt|;
block|}
DECL|field|nextExpirable
specifier|private
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextExpirable
init|=
name|nullEntry
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getNextExpirable ()
specifier|public
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextExpirable
parameter_list|()
block|{
return|return
name|nextExpirable
return|;
block|}
annotation|@
name|Override
DECL|method|setNextExpirable (ReferenceEntry<K, V> next)
specifier|public
name|void
name|setNextExpirable
parameter_list|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|)
block|{
name|this
operator|.
name|nextExpirable
operator|=
name|next
expr_stmt|;
block|}
DECL|field|previousExpirable
specifier|private
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previousExpirable
init|=
name|nullEntry
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getPreviousExpirable ()
specifier|public
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getPreviousExpirable
parameter_list|()
block|{
return|return
name|previousExpirable
return|;
block|}
annotation|@
name|Override
DECL|method|setPreviousExpirable (ReferenceEntry<K, V> previous)
specifier|public
name|void
name|setPreviousExpirable
parameter_list|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
parameter_list|)
block|{
name|this
operator|.
name|previousExpirable
operator|=
name|previous
expr_stmt|;
block|}
DECL|field|nextEvictable
specifier|private
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextEvictable
init|=
name|nullEntry
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getNextEvictable ()
specifier|public
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getNextEvictable
parameter_list|()
block|{
return|return
name|nextEvictable
return|;
block|}
annotation|@
name|Override
DECL|method|setNextEvictable (ReferenceEntry<K, V> next)
specifier|public
name|void
name|setNextEvictable
parameter_list|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|)
block|{
name|this
operator|.
name|nextEvictable
operator|=
name|next
expr_stmt|;
block|}
DECL|field|previousEvictable
specifier|private
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previousEvictable
init|=
name|nullEntry
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getPreviousEvictable ()
specifier|public
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getPreviousEvictable
parameter_list|()
block|{
return|return
name|previousEvictable
return|;
block|}
annotation|@
name|Override
DECL|method|setPreviousEvictable (ReferenceEntry<K, V> previous)
specifier|public
name|void
name|setPreviousEvictable
parameter_list|(
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|previous
parameter_list|)
block|{
name|this
operator|.
name|previousEvictable
operator|=
name|previous
expr_stmt|;
block|}
block|}
DECL|class|DummyValueReference
specifier|static
class|class
name|DummyValueReference
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|entry
specifier|final
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
decl_stmt|;
DECL|field|value
specifier|private
name|V
name|value
decl_stmt|;
DECL|method|DummyValueReference (V value, ReferenceEntry<K, V> entry)
specifier|public
name|DummyValueReference
parameter_list|(
name|V
name|value
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
DECL|method|create (V value, ReferenceEntry<K, V> entry)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|DummyValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|V
name|value
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|DummyValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getWeight ()
specifier|public
name|int
name|getWeight
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getEntry ()
specifier|public
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getEntry
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
annotation|@
name|Override
DECL|method|copyFor (ReferenceQueue<V> queue, ReferenceEntry<K, V> entry)
specifier|public
name|ValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyFor
parameter_list|(
name|ReferenceQueue
argument_list|<
name|V
argument_list|>
name|queue
parameter_list|,
name|ReferenceEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|new
name|DummyValueReference
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|value
argument_list|,
name|entry
argument_list|)
return|;
block|}
DECL|field|computing
name|boolean
name|computing
init|=
literal|false
decl_stmt|;
DECL|method|setComputing (boolean computing)
specifier|public
name|void
name|setComputing
parameter_list|(
name|boolean
name|computing
parameter_list|)
block|{
name|this
operator|.
name|computing
operator|=
name|computing
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isLoading ()
specifier|public
name|boolean
name|isLoading
parameter_list|()
block|{
return|return
name|computing
return|;
block|}
annotation|@
name|Override
DECL|method|waitForValue ()
specifier|public
name|V
name|waitForValue
parameter_list|()
block|{
return|return
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|notifyNewValue (V newValue)
specifier|public
name|void
name|notifyNewValue
parameter_list|(
name|V
name|newValue
parameter_list|)
block|{}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|SerializableCacheLoader
specifier|private
specifier|static
class|class
name|SerializableCacheLoader
extends|extends
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
implements|implements
name|Serializable
block|{
DECL|method|load (Object key)
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|SerializableCacheLoader
operator|)
return|;
block|}
block|}
DECL|class|SerializableRemovalListener
specifier|private
specifier|static
class|class
name|SerializableRemovalListener
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RemovalListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
DECL|method|onRemoval (RemovalNotification<K, V> notification)
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|notification
parameter_list|)
block|{}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|SerializableRemovalListener
operator|)
return|;
block|}
block|}
DECL|class|SerializableTicker
specifier|private
specifier|static
class|class
name|SerializableTicker
extends|extends
name|Ticker
implements|implements
name|Serializable
block|{
DECL|method|read ()
specifier|public
name|long
name|read
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|SerializableTicker
operator|)
return|;
block|}
block|}
DECL|class|SerializableWeigher
specifier|private
specifier|static
class|class
name|SerializableWeigher
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Weigher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
DECL|method|weigh (K key, V value)
specifier|public
name|int
name|weigh
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
literal|42
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|SerializableWeigher
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

