begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|FakeTicker
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test suite for {@link CacheBuilder}.  *  * @author Jon Donovan  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|CacheBuilderGwtTest
specifier|public
class|class
name|CacheBuilderGwtTest
extends|extends
name|TestCase
block|{
DECL|field|fakeTicker
specifier|private
name|FakeTicker
name|fakeTicker
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|fakeTicker
operator|=
operator|new
name|FakeTicker
argument_list|()
expr_stmt|;
block|}
DECL|method|testLoader ()
specifier|public
name|void
name|testLoader
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Integer
argument_list|>
name|loader
init|=
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|++
name|i
return|;
block|}
block|}
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|20
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|34
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSizeConstraint ()
specifier|public
name|void
name|testSizeConstraint
parameter_list|()
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Order required to remove dependence on acces order / write order constraint.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|30
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|40
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|30
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|40
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadingCache ()
specifier|public
name|void
name|testLoadingCache
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Integer
name|load
parameter_list|(
name|Integer
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|i
operator|++
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|cache
operator|.
name|getAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|54
argument_list|,
literal|443
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|443
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|,
name|cache
operator|.
name|apply
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpireAfterAccess ()
specifier|public
name|void
name|testExpireAfterAccess
parameter_list|()
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|999
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|30
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|30
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpireAfterWrite ()
specifier|public
name|void
name|testExpireAfterWrite
parameter_list|()
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|999
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|200
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|1001
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// TODO(user): 1000
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpireAfterWriteAndAccess ()
specifier|public
name|void
name|testExpireAfterWriteAndAccess
parameter_list|()
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|499
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|200
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|200
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// TODO(user): 499
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|501
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// TODO(user): 500
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapMethods ()
specifier|public
name|void
name|testMapMethods
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|asMap
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|52
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|replace
argument_list|(
literal|2
argument_list|,
literal|79
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|replace
argument_list|(
literal|3
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|79
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|79
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|replace
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|replace
argument_list|(
literal|2
argument_list|,
literal|52
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|79
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|79
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|remove
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|remove
argument_list|(
literal|2
argument_list|,
literal|79
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|putIfAbsent
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|putIfAbsent
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovalListener ()
specifier|public
name|void
name|testRemovalListener
parameter_list|()
block|{
specifier|final
name|int
index|[]
name|stats
init|=
operator|new
name|int
index|[
literal|4
index|]
decl_stmt|;
name|RemovalListener
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|countingListener
init|=
operator|new
name|RemovalListener
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|notification
parameter_list|)
block|{
switch|switch
condition|(
name|notification
operator|.
name|getCause
argument_list|()
condition|)
block|{
case|case
name|EXPIRED
case|:
name|stats
index|[
literal|0
index|]
operator|++
expr_stmt|;
break|break;
case|case
name|EXPLICIT
case|:
name|stats
index|[
literal|1
index|]
operator|++
expr_stmt|;
break|break;
case|case
name|REPLACED
case|:
name|stats
index|[
literal|2
index|]
operator|++
expr_stmt|;
break|break;
case|case
name|SIZE
case|:
name|stats
index|[
literal|3
index|]
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No collected exceptions in GWT CacheBuilder."
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|countingListener
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Add more than two elements to increment size removals.
name|cache
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|98
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|56
argument_list|,
literal|76
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|23
argument_list|,
literal|84
argument_list|)
expr_stmt|;
comment|// Replace the two present elements.
name|cache
operator|.
name|put
argument_list|(
literal|23
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|56
argument_list|,
literal|49
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|23
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|56
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Expire the two present elements.
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|1001
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|56
argument_list|)
expr_stmt|;
comment|// Add two elements and invalidate them.
name|cache
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAll ()
specifier|public
name|void
name|testPutAll
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|putAll
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|,
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|90
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|,
literal|30
argument_list|,
literal|20
argument_list|,
literal|60
argument_list|,
literal|70
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|70
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidate ()
specifier|public
name|void
name|testInvalidate
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|654
argument_list|,
literal|2675
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2456
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
literal|654
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|654
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2456
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidateAll ()
specifier|public
name|void
name|testInvalidateAll
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|654
argument_list|,
literal|2675
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2456
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|654
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2456
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|654
argument_list|,
literal|2675
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2456
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|654
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2456
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap_containsValue ()
specifier|public
name|void
name|testAsMap_containsValue
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|20000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|654
argument_list|,
literal|2675
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|10000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2456
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|10001
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsValue
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsValue
argument_list|(
literal|56
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsValue
argument_list|(
literal|2675
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap_containsKey ()
specifier|public
name|void
name|testAsMap_containsKey
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|20000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|654
argument_list|,
literal|2675
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|10000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2456
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|10001
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2456
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|654
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMapValues_contains ()
specifier|public
name|void
name|testAsMapValues_contains
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|501
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMapKeySet ()
specifier|public
name|void
name|testAsMapKeySet
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|501
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|foundKeys
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|current
range|:
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|foundKeys
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|20
argument_list|,
literal|5
argument_list|)
argument_list|,
name|foundKeys
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMapKeySet_contains ()
specifier|public
name|void
name|testAsMapKeySet_contains
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|501
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMapEntrySet ()
specifier|public
name|void
name|testAsMapEntrySet
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fakeTicker
operator|.
name|advance
argument_list|(
literal|501
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|current
range|:
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sum
operator|+=
name|current
operator|.
name|getKey
argument_list|()
operator|+
name|current
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|57
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMapValues_iteratorRemove ()
specifier|public
name|void
name|testAsMapValues_iteratorRemove
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|fakeTicker
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

