begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|Strength
operator|.
name|STRONG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|countingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|immutableEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CustomConcurrentHashMap
operator|.
name|Strength
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|CountingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_comment
comment|/**  * Tests of basic {@link Cache} operations with all possible combinations of key& value strengths.  *  * @author mike nonemacher  */
end_comment

begin_class
DECL|class|CacheReferencesTest
specifier|public
class|class
name|CacheReferencesTest
extends|extends
name|TestCase
block|{
DECL|field|KEY_TO_STRING_LOADER
specifier|private
specifier|static
specifier|final
name|CacheLoader
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
name|KEY_TO_STRING_LOADER
init|=
operator|new
name|CacheLoader
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|factoryWithAllKeyStrengths ()
specifier|private
name|CacheBuilderFactory
name|factoryWithAllKeyStrengths
parameter_list|()
block|{
return|return
operator|new
name|CacheBuilderFactory
argument_list|()
operator|.
name|withKeyStrengths
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|STRONG
argument_list|,
name|Strength
operator|.
name|WEAK
argument_list|)
argument_list|)
operator|.
name|withValueStrengths
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|STRONG
argument_list|,
name|Strength
operator|.
name|WEAK
argument_list|,
name|Strength
operator|.
name|SOFT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|caches ()
specifier|private
name|Iterable
argument_list|<
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
argument_list|>
name|caches
parameter_list|()
block|{
name|CacheBuilderFactory
name|factory
init|=
name|factoryWithAllKeyStrengths
argument_list|()
decl_stmt|;
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|factory
operator|.
name|buildAllPermutations
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
name|apply
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|(
name|KEY_TO_STRING_LOADER
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|testContainsKeyAndValue ()
specifier|public
name|void
name|testContainsKeyAndValue
parameter_list|()
block|{
for|for
control|(
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
name|cache
range|:
name|caches
argument_list|()
control|)
block|{
comment|// maintain strong refs so these won't be collected, regardless of cache's key/value strength
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
for|for
control|(
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
name|cache
range|:
name|caches
argument_list|()
control|)
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testKeySetEntrySetValues ()
specifier|public
name|void
name|testKeySetEntrySetValues
parameter_list|()
block|{
for|for
control|(
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
name|cache
range|:
name|caches
argument_list|()
control|)
block|{
name|Key
name|key1
init|=
operator|new
name|Key
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value1
init|=
name|key1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Key
name|key2
init|=
operator|new
name|Key
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value2
init|=
name|key2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value1
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value2
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|immutableEntry
argument_list|(
name|key1
argument_list|,
name|value1
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
name|key2
argument_list|,
name|value2
argument_list|)
argument_list|)
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidate ()
specifier|public
name|void
name|testInvalidate
parameter_list|()
block|{
for|for
control|(
name|Cache
argument_list|<
name|Key
argument_list|,
name|String
argument_list|>
name|cache
range|:
name|caches
argument_list|()
control|)
block|{
name|Key
name|key1
init|=
operator|new
name|Key
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value1
init|=
name|key1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Key
name|key2
init|=
operator|new
name|Key
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value2
init|=
name|key2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value1
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value2
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|key2
argument_list|)
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|immutableEntry
argument_list|(
name|key2
argument_list|,
name|value2
argument_list|)
argument_list|)
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCleanupOnReferenceCollection ()
specifier|public
name|void
name|testCleanupOnReferenceCollection
parameter_list|()
block|{
for|for
control|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
range|:
name|factoryWithAllKeyStrengths
argument_list|()
operator|.
name|buildAllPermutations
argument_list|()
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|keyStrength
operator|==
name|STRONG
operator|&&
name|builder
operator|.
name|valueStrength
operator|==
name|STRONG
condition|)
block|{
continue|continue;
block|}
name|CountingRemovalListener
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|toStringLoader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|Integer
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|build
argument_list|(
name|toStringLoader
argument_list|)
decl_stmt|;
comment|// ints in [-128, 127] have their wrappers precomputed and cached, so they won't be GCed
name|Integer
name|key1
init|=
literal|1001
decl_stmt|;
name|Integer
name|key2
init|=
literal|1002
decl_stmt|;
name|String
name|value1
init|=
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key1
argument_list|)
decl_stmt|;
name|String
name|value2
init|=
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key2
argument_list|)
decl_stmt|;
comment|// make (key1, value1) eligible for collection
name|key1
operator|=
literal|null
expr_stmt|;
name|value1
operator|=
literal|null
expr_stmt|;
name|assertCleanup
argument_list|(
name|cache
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
comment|// make sure the GC isn't going to see key2 or value2 as dead in assertCleanup
name|assertSame
argument_list|(
name|value2
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCleanup ( Cache<Integer, String> cache, CountingRemovalListener<Integer, String> removalListener)
specifier|private
name|void
name|assertCleanup
parameter_list|(
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
parameter_list|,
name|CountingRemovalListener
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|removalListener
parameter_list|)
block|{
comment|// initialSize will most likely be 2, but it's possible for the GC to have already run, so we'll
comment|// observe a size of 1
name|long
name|initialSize
init|=
name|cache
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|initialSize
operator|==
literal|1
operator|||
name|initialSize
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// wait up to 5s
name|byte
index|[]
name|filler
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|CacheTesting
operator|.
name|drainReferenceQueues
argument_list|(
name|cache
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
try|try
block|{
comment|// Fill up heap so soft references get cleared.
name|filler
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|filler
operator|.
name|length
argument_list|,
name|filler
operator|.
name|length
operator|*
literal|2
argument_list|)
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{}
block|}
name|CacheTesting
operator|.
name|processPendingNotifications
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// A simple type whose .toString() will return the same value each time, but without maintaining
comment|// a strong reference to that value.
DECL|class|Key
specifier|static
class|class
name|Key
block|{
DECL|field|value
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
DECL|field|toString
specifier|private
name|WeakReference
argument_list|<
name|String
argument_list|>
name|toString
decl_stmt|;
DECL|method|Key (int value)
name|Key
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
decl_stmt|;
if|if
condition|(
name|toString
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|toString
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
name|s
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|toString
operator|=
operator|new
name|WeakReference
argument_list|<
name|String
argument_list|>
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
block|}
end_class

end_unit

