begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractLoadingCache}.  *  * @author Charles Fry  */
end_comment

begin_class
DECL|class|AbstractLoadingCacheTest
specifier|public
class|class
name|AbstractLoadingCacheTest
extends|extends
name|TestCase
block|{
DECL|method|testGetUnchecked_checked ()
specifier|public
name|void
name|testGetUnchecked_checked
parameter_list|()
block|{
specifier|final
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|valueRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AbstractLoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|Object
name|v
init|=
name|valueRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|valueRef
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|valueRef
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetUnchecked_unchecked ()
specifier|public
name|void
name|testGetUnchecked_unchecked
parameter_list|()
block|{
specifier|final
name|RuntimeException
name|cause
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|valueRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AbstractLoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|Object
name|v
init|=
name|valueRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|valueRef
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|valueRef
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetUnchecked_error ()
specifier|public
name|void
name|testGetUnchecked_error
parameter_list|()
block|{
specifier|final
name|Error
name|cause
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|valueRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AbstractLoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|Object
name|v
init|=
name|valueRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExecutionError
argument_list|(
name|cause
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|valueRef
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|valueRef
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetUnchecked_otherThrowable ()
specifier|public
name|void
name|testGetUnchecked_otherThrowable
parameter_list|()
block|{
specifier|final
name|Throwable
name|cause
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|valueRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AbstractLoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|Object
name|v
init|=
name|valueRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|valueRef
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|cause
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|valueRef
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

