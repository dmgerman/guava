begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheTesting
operator|.
name|checkEmpty
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|constantLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|exceptionLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|queuingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
operator|.
name|InvalidCacheLoadException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|QueuingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * {@link LoadingCache} tests for caches with a maximum size of zero.  *  * @author mike nonemacher  */
end_comment

begin_class
DECL|class|NullCacheTest
specifier|public
class|class
name|NullCacheTest
extends|extends
name|TestCase
block|{
DECL|field|listener
name|QueuingRemovalListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|listener
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|listener
operator|=
name|queuingRemovalListener
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|Object
name|computed
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|0
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|constantLoader
argument_list|(
name|computed
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|computed
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|RemovalNotification
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|notification
init|=
name|listener
operator|.
name|remove
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|computed
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RemovalCause
operator|.
name|SIZE
argument_list|,
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkEmpty
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_expireAfterWrite ()
specifier|public
name|void
name|testGet_expireAfterWrite
parameter_list|()
block|{
name|Object
name|computed
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|0
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|constantLoader
argument_list|(
name|computed
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|computed
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|RemovalNotification
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|notification
init|=
name|listener
operator|.
name|remove
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|computed
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RemovalCause
operator|.
name|SIZE
argument_list|,
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkEmpty
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_expireAfterAccess ()
specifier|public
name|void
name|testGet_expireAfterAccess
parameter_list|()
block|{
name|Object
name|computed
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|0
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|constantLoader
argument_list|(
name|computed
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|computed
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|RemovalNotification
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|notification
init|=
name|listener
operator|.
name|remove
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|computed
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RemovalCause
operator|.
name|SIZE
argument_list|,
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkEmpty
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_computeNull ()
specifier|public
name|void
name|testGet_computeNull
parameter_list|()
block|{
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|0
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|constantLoader
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|e
parameter_list|)
block|{
comment|/* expected */
block|}
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkEmpty
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_runtimeException ()
specifier|public
name|void
name|testGet_runtimeException
parameter_list|()
block|{
specifier|final
name|RuntimeException
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|0
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|build
argument_list|(
name|exceptionLoader
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|map
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|uee
parameter_list|)
block|{
name|assertThat
argument_list|(
name|uee
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|listener
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkEmpty
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

