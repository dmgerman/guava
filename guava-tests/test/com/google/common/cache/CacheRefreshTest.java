begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|incrementingLoader
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|IncrementingLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|FakeTicker
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests relating to automatic cache refreshing.  *  * @author Charles Fry  */
end_comment

begin_class
DECL|class|CacheRefreshTest
specifier|public
class|class
name|CacheRefreshTest
extends|extends
name|TestCase
block|{
DECL|method|testAutoRefresh ()
specifier|public
name|void
name|testAutoRefresh
parameter_list|()
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|IncrementingLoader
name|loader
init|=
name|incrementingLoader
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|refreshAfterWrite
argument_list|(
literal|3
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|6
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|lenientParsing
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|int
name|expectedLoads
init|=
literal|0
decl_stmt|;
name|int
name|expectedReloads
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLoads
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// refresh 0
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedReloads
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// write to 1 to delay its refresh
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// refresh 2
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedReloads
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// refresh 0 and 1
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedReloads
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedReloads
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoads
argument_list|,
name|loader
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReloads
argument_list|,
name|loader
operator|.
name|getReloadCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

