begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|bulkLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|constantLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|errorLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|exceptionLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|identityLoader
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|countingRemovalListener
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
operator|.
name|InvalidCacheLoadException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|CountingLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingCacheLoaders
operator|.
name|IdentityLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|TestingRemovalListeners
operator|.
name|CountingRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|FakeTicker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|TestLogHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_comment
comment|/**  * Tests relating to cache loading: concurrent loading, exceptions during loading, etc.  *  * @author mike nonemacher  */
end_comment

begin_class
DECL|class|CacheLoadingTest
specifier|public
class|class
name|CacheLoadingTest
extends|extends
name|TestCase
block|{
DECL|field|logHandler
name|TestLogHandler
name|logHandler
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|logHandler
operator|=
operator|new
name|TestLogHandler
argument_list|()
expr_stmt|;
name|LocalCache
operator|.
name|logger
operator|.
name|addHandler
argument_list|(
name|logHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// TODO(cpovirk): run tests in other thread instead of messing with main thread interrupt status
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|LocalCache
operator|.
name|logger
operator|.
name|removeHandler
argument_list|(
name|logHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|popLoggedThrowable ()
specifier|private
name|Throwable
name|popLoggedThrowable
parameter_list|()
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|logRecords
init|=
name|logHandler
operator|.
name|getStoredLogRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logRecords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LogRecord
name|logRecord
init|=
name|logRecords
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logHandler
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|logRecord
operator|.
name|getThrown
argument_list|()
return|;
block|}
DECL|method|checkNothingLogged ()
specifier|private
name|void
name|checkNothingLogged
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|logHandler
operator|.
name|getStoredLogRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkLoggedCause (Throwable t)
specifier|private
name|void
name|checkLoggedCause
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|assertSame
argument_list|(
name|t
argument_list|,
name|popLoggedThrowable
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkLoggedInvalidLoad ()
specifier|private
name|void
name|checkLoggedInvalidLoad
parameter_list|()
block|{
name|assertThat
argument_list|(
name|popLoggedThrowable
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|InvalidCacheLoadException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoad ()
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// callable is not called
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|throwing
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|Callables
operator|.
name|returning
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReload ()
specifier|public
name|void
name|testReload
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|two
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|two
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefresh ()
specifier|public
name|void
name|testRefresh
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|two
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|two
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|two
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefresh_getIfPresent ()
specifier|public
name|void
name|testRefresh_getIfPresent
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|two
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|two
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|two
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|two
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoad_default ()
specifier|public
name|void
name|testBulkLoad_default
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|LoadingCache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|TestingCacheLoaders
operator|.
expr|<
name|Integer
operator|>
name|identityLoader
argument_list|()
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// duplicate keys are ignored, and don't impact stats
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoad_loadAll ()
specifier|public
name|void
name|testBulkLoad_loadAll
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|IdentityLoader
argument_list|<
name|Integer
argument_list|>
name|backingLoader
init|=
name|identityLoader
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|loader
init|=
name|bulkLoader
argument_list|(
name|backingLoader
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// duplicate keys are ignored, and don't impact stats
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoad_extra ()
specifier|public
name|void
name|testBulkLoad_extra
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keys
control|)
block|{
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// add extra entries
name|result
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
index|[]
name|lookupKeys
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|result
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|key
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBulkLoad_clobber ()
specifier|public
name|void
name|testBulkLoad_clobber
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|extraKey
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|extraValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keys
control|)
block|{
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraValue
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraKey
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|extraKey
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|lookupKeys
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|result
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|extraValue
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoad_clobberNullValue ()
specifier|public
name|void
name|testBulkLoad_clobberNullValue
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|extraKey
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|extraValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keys
control|)
block|{
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|extraValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraKey
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|extraKey
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|lookupKeys
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
for|for
control|(
name|Object
name|key
range|:
name|lookupKeys
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|extraValue
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|extraValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoad_clobberNullKey ()
specifier|public
name|void
name|testBulkLoad_clobberNullKey
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|extraKey
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|extraValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keys
control|)
block|{
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|extraKey
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraKey
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|extraKey
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|lookupKeys
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
for|for
control|(
name|Object
name|key
range|:
name|lookupKeys
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|extraValue
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsValue
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoad_partial ()
specifier|public
name|void
name|testBulkLoad_partial
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|extraKey
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|extraValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// ignore request keys
name|result
operator|.
name|put
argument_list|(
name|extraKey
argument_list|,
name|extraValue
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
index|[]
name|lookupKeys
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
name|lookupKeys
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|assertSame
argument_list|(
name|extraValue
argument_list|,
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|extraKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadNull ()
specifier|public
name|void
name|testLoadNull
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|constantLoader
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedInvalidLoad
argument_list|()
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|Callables
operator|.
name|returning
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadNull ()
specifier|public
name|void
name|testReloadNull
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedInvalidLoad
argument_list|()
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadNullFuture ()
specifier|public
name|void
name|testReloadNullFuture
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedInvalidLoad
argument_list|()
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshNull ()
specifier|public
name|void
name|testRefreshNull
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// refreshed
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoadNull ()
specifier|public
name|void
name|testBulkLoadNull
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|constantLoader
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoadNullMap ()
specifier|public
name|void
name|testBulkLoadNullMap
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|keys
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadError ()
specifier|public
name|void
name|testLoadError
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Error
name|e
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|errorLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Error
name|callableError
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
block|{
throw|throw
name|callableError
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableError
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadError ()
specifier|public
name|void
name|testReloadError
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Error
name|e
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadFutureError ()
specifier|public
name|void
name|testReloadFutureError
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Error
name|e
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshError ()
specifier|public
name|void
name|testRefreshError
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Error
name|e
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// refreshed
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoadError ()
specifier|public
name|void
name|testBulkLoadError
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Error
name|e
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|errorLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadCheckedException ()
specifier|public
name|void
name|testLoadCheckedException
parameter_list|()
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|callableException
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|throwing
argument_list|(
name|callableException
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableException
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadInterruptedException ()
specifier|public
name|void
name|testLoadInterruptedException
parameter_list|()
block|{
name|Exception
name|e
init|=
operator|new
name|InterruptedException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sanity check:
name|assertFalse
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|callableException
init|=
operator|new
name|InterruptedException
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|throwing
argument_list|(
name|callableException
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableException
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadCheckedException ()
specifier|public
name|void
name|testReloadCheckedException
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadFutureCheckedException ()
specifier|public
name|void
name|testReloadFutureCheckedException
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshCheckedException ()
specifier|public
name|void
name|testRefreshCheckedException
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// refreshed
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoadCheckedException ()
specifier|public
name|void
name|testBulkLoadCheckedException
parameter_list|()
block|{
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoadInterruptedException ()
specifier|public
name|void
name|testBulkLoadInterruptedException
parameter_list|()
block|{
name|Exception
name|e
init|=
operator|new
name|InterruptedException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadUncheckedException ()
specifier|public
name|void
name|testLoadUncheckedException
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|callableException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|throwing
argument_list|(
name|callableException
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|callableException
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadUncheckedException ()
specifier|public
name|void
name|testReloadUncheckedException
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadFutureUncheckedException ()
specifier|public
name|void
name|testReloadFutureUncheckedException
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshUncheckedException ()
specifier|public
name|void
name|testRefreshUncheckedException
parameter_list|()
block|{
specifier|final
name|Object
name|one
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|one
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Object
argument_list|>
name|reload
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// refreshed
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|1
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|one
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkLoadUncheckedException ()
specifier|public
name|void
name|testBulkLoadUncheckedException
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|loader
init|=
name|exceptionLoader
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|CacheStats
name|stats
init|=
name|cache
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|cache
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|missCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|loadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|loadExceptionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|hitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadAfterFailure ()
specifier|public
name|void
name|testReloadAfterFailure
parameter_list|()
throws|throws
name|ExecutionException
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|e
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"exception to trigger failure on first load()"
argument_list|)
decl_stmt|;
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|failOnceFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|Integer
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|count
operator|.
name|getAndIncrement
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|CountingRemovalListener
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|removalListener
init|=
name|countingRemovalListener
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|removalListener
argument_list|(
name|removalListener
argument_list|)
operator|.
name|build
argument_list|(
name|failOnceFunction
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|ue
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|ue
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|removalListener
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadAfterValueReclamation ()
specifier|public
name|void
name|testReloadAfterValueReclamation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|CountingLoader
name|countingLoader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|build
argument_list|(
name|countingLoader
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|int
name|iterations
init|=
literal|10
decl_stmt|;
name|WeakReference
argument_list|<
name|Object
argument_list|>
name|ref
init|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|expectedComputations
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
comment|// The entry should get garbage collected and recomputed.
name|Object
name|oldValue
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
name|expectedComputations
operator|++
expr_stmt|;
block|}
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oldValue
operator|=
literal|null
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedComputations
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
comment|// The entry should get garbage collected and recomputed.
name|Object
name|oldValue
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
name|expectedComputations
operator|++
expr_stmt|;
block|}
name|cache
operator|.
name|refresh
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oldValue
operator|=
literal|null
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedComputations
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadAfterSimulatedValueReclamation ()
specifier|public
name|void
name|testReloadAfterSimulatedValueReclamation
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|countingLoader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
operator|.
name|build
argument_list|(
name|countingLoader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateValueReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// this blocks if computation can't deal with partially-collected values
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateValueReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadAfterSimulatedKeyReclamation ()
specifier|public
name|void
name|testReloadAfterSimulatedKeyReclamation
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CountingLoader
name|countingLoader
init|=
operator|new
name|CountingLoader
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakKeys
argument_list|()
operator|.
name|build
argument_list|(
name|countingLoader
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateKeyReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// this blocks if computation can't deal with partially-collected values
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|CacheTesting
operator|.
name|simulateKeyReclamation
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countingLoader
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure LoadingCache correctly wraps ExecutionExceptions and UncheckedExecutionExceptions.    */
DECL|method|testLoadingExceptionWithCause ()
specifier|public
name|void
name|testLoadingExceptionWithCause
parameter_list|()
block|{
specifier|final
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
specifier|final
name|UncheckedExecutionException
name|uee
init|=
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
specifier|final
name|ExecutionException
name|ee
init|=
operator|new
name|ExecutionException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheUnchecked
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|exceptionLoader
argument_list|(
name|uee
argument_list|)
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheChecked
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|exceptionLoader
argument_list|(
name|ee
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|cacheUnchecked
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheUnchecked
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtUee
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtUee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cacheUnchecked
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|uee
argument_list|)
expr_stmt|;
try|try
block|{
name|cacheUnchecked
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheChecked
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheChecked
operator|.
name|getUnchecked
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtUee
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtUee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cacheChecked
operator|.
name|refresh
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|checkLoggedCause
argument_list|(
name|ee
argument_list|)
expr_stmt|;
try|try
block|{
name|cacheChecked
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBulkLoadingExceptionWithCause ()
specifier|public
name|void
name|testBulkLoadingExceptionWithCause
parameter_list|()
block|{
specifier|final
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
specifier|final
name|UncheckedExecutionException
name|uee
init|=
operator|new
name|UncheckedExecutionException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
specifier|final
name|ExecutionException
name|ee
init|=
operator|new
name|ExecutionException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheUnchecked
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|exceptionLoader
argument_list|(
name|uee
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheChecked
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|bulkLoader
argument_list|(
name|exceptionLoader
argument_list|(
name|ee
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|cacheUnchecked
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|uee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cacheChecked
operator|.
name|getAll
argument_list|(
name|asList
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|caughtEe
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ee
argument_list|,
name|caughtEe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConcurrentLoading ()
specifier|public
name|void
name|testConcurrentLoading
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testConcurrentLoading
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrentExpirationLoading ()
specifier|public
name|void
name|testConcurrentExpirationLoading
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testConcurrentLoading
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrentLoading (CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentLoading
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|testConcurrentLoadingDefault
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|testConcurrentLoadingNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|testConcurrentLoadingUncheckedException
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|testConcurrentLoadingCheckedException
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a successful concurrent computation, only one thread does the work, but all the threads get    * the same result.    */
DECL|method|testConcurrentLoadingDefault (CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentLoadingDefault
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|resultArray
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
literal|"result("
operator|+
name|i
operator|+
literal|") didn't match expected"
argument_list|,
name|result
argument_list|,
name|resultArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * On a concurrent computation that returns null, all threads should get an    * InvalidCacheLoadException, with the loader only called once. The result should not be cached    * (a later request should call the loader again).    */
DECL|method|testConcurrentLoadingNull (CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentLoadingNull
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|InvalidCacheLoadException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// subsequent calls should call the loader again, not get the old exception
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCacheLoadException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a concurrent computation that throws an unchecked exception, all threads should get the    * (wrapped) exception, with the loader called only once. The result should not be cached (a later    * request should call the loader again).    */
DECL|method|testConcurrentLoadingUncheckedException ( CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentLoadingUncheckedException
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RuntimeException
name|e
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// doConcurrentGet alternates between calling getUnchecked and calling get, but an unchecked
comment|// exception thrown by the loader is always wrapped as an UncheckedExecutionException.
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UncheckedExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
operator|(
operator|(
name|UncheckedExecutionException
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// subsequent calls should call the loader again, not get the old exception
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * On a concurrent computation that throws a checked exception, all threads should get the    * (wrapped) exception, with the loader called only once. The result should not be cached (a later    * request should call the loader again).    */
DECL|method|testConcurrentLoadingCheckedException ( CacheBuilder<Object, Object> builder)
specifier|private
specifier|static
name|void
name|testConcurrentLoadingCheckedException
parameter_list|(
name|CacheBuilder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IOException
name|e
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|doConcurrentGet
argument_list|(
name|cache
argument_list|,
literal|"bar"
argument_list|,
name|count
argument_list|,
name|startSignal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// doConcurrentGet alternates between calling getUnchecked and calling get. If we call get(),
comment|// we should get an ExecutionException; if we call getUnchecked(), we should get an
comment|// UncheckedExecutionException.
name|int
name|mod
init|=
name|i
operator|%
literal|3
decl_stmt|;
if|if
condition|(
name|mod
operator|==
literal|0
operator|||
name|mod
operator|==
literal|2
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|ExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
operator|(
operator|(
name|ExecutionException
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UncheckedExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
operator|(
operator|(
name|UncheckedExecutionException
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// subsequent calls should call the loader again, not get the old exception
try|try
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|callCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test-helper method that performs {@code nThreads} concurrent calls to {@code cache.get(key)}    * or {@code cache.getUnchecked(key)}, and returns a List containing each of the results. The    * result for any given call to {@code cache.get} or {@code cache.getUnchecked} is the value    * returned, or the exception thrown.    *    *<p>As we iterate from {@code 0} to {@code nThreads}, threads with an even index will call    * {@code getUnchecked}, and threads with an odd index will call {@code get}. If the cache throws    * exceptions, this difference may be visible in the returned List.    */
DECL|method|doConcurrentGet (final LoadingCache<K, ?> cache, final K key, int nThreads, final CountDownLatch gettersStartedSignal)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|List
argument_list|<
name|Object
argument_list|>
name|doConcurrentGet
parameter_list|(
specifier|final
name|LoadingCache
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|cache
parameter_list|,
specifier|final
name|K
name|key
parameter_list|,
name|int
name|nThreads
parameter_list|,
specifier|final
name|CountDownLatch
name|gettersStartedSignal
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicReferenceArray
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|Object
argument_list|>
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|gettersComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|gettersStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|mod
init|=
name|index
operator|%
literal|3
decl_stmt|;
if|if
condition|(
name|mod
operator|==
literal|0
condition|)
block|{
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mod
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|result
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|gettersComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we want to wait until each thread is WAITING - one thread waiting inside CacheLoader.load
comment|// (in startSignal.await()), and the others waiting for that thread's result.
while|while
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
operator|&&
name|thread
operator|.
name|getState
argument_list|()
operator|!=
name|Thread
operator|.
name|State
operator|.
name|WAITING
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
name|gettersStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|gettersComplete
operator|.
name|await
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|resultList
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nThreads
condition|;
name|i
operator|++
control|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultList
return|;
block|}
DECL|method|testAsMapDuringLoading ()
specifier|public
name|void
name|testAsMapDuringLoading
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|CountDownLatch
name|getStartedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|letGetFinishSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|getFinishedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|getKey
init|=
literal|"get"
decl_stmt|;
specifier|final
name|String
name|refreshKey
init|=
literal|"refresh"
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|getStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|letGetFinishSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|refreshKey
argument_list|,
name|refreshKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|refreshKey
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|getStartedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// computation is in progress; asMap shouldn't have changed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|refreshKey
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// let computation complete
name|letGetFinishSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|getFinishedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
comment|// asMap view should have been updated
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidateDuringLoading ()
specifier|public
name|void
name|testInvalidateDuringLoading
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// computation starts; invalidate() is called on the key being computed, computation finishes
specifier|final
name|CountDownLatch
name|computationStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|letGetFinishSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|getFinishedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|getKey
init|=
literal|"get"
decl_stmt|;
specifier|final
name|String
name|refreshKey
init|=
literal|"refresh"
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|computationStarted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|letGetFinishSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|refreshKey
argument_list|,
name|refreshKey
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|computationStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// let computation complete
name|letGetFinishSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|getFinishedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
comment|// results should be visible
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidateAndReloadDuringLoading ()
specifier|public
name|void
name|testInvalidateAndReloadDuringLoading
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// computation starts; clear() is called, computation finishes
specifier|final
name|CountDownLatch
name|computationStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|letGetFinishSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|getFinishedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|String
name|getKey
init|=
literal|"get"
decl_stmt|;
specifier|final
name|String
name|refreshKey
init|=
literal|"refresh"
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|computationStarted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|letGetFinishSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|refreshKey
argument_list|,
name|refreshKey
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|computationStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// start new computations
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|getUnchecked
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|refreshKey
argument_list|)
expr_stmt|;
name|getFinishedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// let computation complete
name|letGetFinishSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|getFinishedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
comment|// results should be visible
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|getKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshKey
operator|+
name|suffix
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|refreshKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpandDuringLoading ()
specifier|public
name|void
name|testExpandDuringLoading
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|count
init|=
literal|3
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// tells the computing thread when to start computing
specifier|final
name|CountDownLatch
name|computeSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when computation is pending
specifier|final
name|CountDownLatch
name|secondSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the second get has started
specifier|final
name|CountDownLatch
name|thirdSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the third get has started
specifier|final
name|CountDownLatch
name|fourthSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the test when all gets have returned
specifier|final
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|secondSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|computeSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
literal|"foo"
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"bar"
decl_stmt|;
comment|// start computing thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for computation to start
name|secondSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// start waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|thirdSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the second get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|thirdSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// Expand!
name|CacheTesting
operator|.
name|forceExpandSegment
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// start another waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fourthSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the third get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|fourthSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let computation finish
name|computeSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|callCount
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barfoo"
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test ignored because it is extremely flaky in CI builds
specifier|public
name|void
DECL|method|ignoreTestExpandDuringRefresh ()
name|ignoreTestExpandDuringRefresh
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|AtomicInteger
name|callCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// tells the computing thread when to start computing
specifier|final
name|CountDownLatch
name|computeSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when computation is pending
specifier|final
name|CountDownLatch
name|secondSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the second get has started
specifier|final
name|CountDownLatch
name|thirdSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the main thread when the third get has started
specifier|final
name|CountDownLatch
name|fourthSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// tells the test when all gets have returned
specifier|final
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
name|suffix
init|=
literal|"Suffix"
decl_stmt|;
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|computeFunction
init|=
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|callCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|secondSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|computeSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|key
operator|+
name|suffix
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|computeFunction
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"bar"
decl_stmt|;
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// start computing thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cache
operator|.
name|refresh
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for computation to start
name|secondSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|checkNothingLogged
argument_list|()
expr_stmt|;
comment|// start waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|thirdSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the second get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|thirdSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// Expand!
name|CacheTesting
operator|.
name|forceExpandSegment
argument_list|(
name|cache
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// start another waiting thread
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fourthSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give the third get a chance to run; it is okay for this to be racy
comment|// as the end result should be the same either way
name|fourthSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let computation finish
name|computeSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|callCount
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|+
name|suffix
argument_list|,
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|throwing (final Exception exception)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Callable
argument_list|<
name|T
argument_list|>
name|throwing
parameter_list|(
specifier|final
name|Exception
name|exception
parameter_list|)
block|{
return|return
operator|new
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

