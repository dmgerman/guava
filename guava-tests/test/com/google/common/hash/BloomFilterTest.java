begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|BloomFilterStrategies
operator|.
name|LockFreeBitArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|LongMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for SimpleGenericBloomFilter and derived BloomFilter views.  *  * @author Dimitris Andreou  */
end_comment

begin_class
DECL|class|BloomFilterTest
specifier|public
class|class
name|BloomFilterTest
extends|extends
name|TestCase
block|{
DECL|field|NUM_PUTS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_PUTS
init|=
literal|100_000
decl_stmt|;
DECL|field|random
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
name|random
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Random
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Random
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|GOLDEN_PRESENT_KEY
specifier|private
specifier|static
specifier|final
name|int
name|GOLDEN_PRESENT_KEY
init|=
name|random
operator|.
name|get
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
annotation|@
name|AndroidIncompatible
comment|// OutOfMemoryError
DECL|method|testLargeBloomFilterDoesntOverflow ()
specifier|public
name|void
name|testLargeBloomFilterDoesntOverflow
parameter_list|()
block|{
name|long
name|numBits
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|numBits
operator|++
expr_stmt|;
name|LockFreeBitArray
name|bitArray
init|=
operator|new
name|LockFreeBitArray
argument_list|(
name|numBits
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"BitArray.bitSize() must return a positive number, but was "
operator|+
name|bitArray
operator|.
name|bitSize
argument_list|()
argument_list|,
name|bitArray
operator|.
name|bitSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Ideally we would also test the bitSize() overflow of this BF, but it runs out of heap space
comment|// BloomFilter.create(Funnels.unencodedCharsFunnel(), 244412641, 1e-11);
block|}
comment|/**    * Asserts that {@link BloomFilter#approximateElementCount} is within 1 percent of the expected    * value.    */
DECL|method|assertApproximateElementCountGuess (BloomFilter<?> bf, int sizeGuess)
specifier|private
specifier|static
name|void
name|assertApproximateElementCountGuess
parameter_list|(
name|BloomFilter
argument_list|<
name|?
argument_list|>
name|bf
parameter_list|,
name|int
name|sizeGuess
parameter_list|)
block|{
name|assertThat
argument_list|(
name|bf
operator|.
name|approximateElementCount
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
call|(
name|long
call|)
argument_list|(
name|sizeGuess
operator|*
literal|0.99
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bf
operator|.
name|approximateElementCount
argument_list|()
argument_list|)
operator|.
name|isAtMost
argument_list|(
call|(
name|long
call|)
argument_list|(
name|sizeGuess
operator|*
literal|1.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAndCheckMitz32BloomFilterWithKnownFalsePositives ()
specifier|public
name|void
name|testCreateAndCheckMitz32BloomFilterWithKnownFalsePositives
parameter_list|()
block|{
name|int
name|numInsertions
init|=
literal|1000000
decl_stmt|;
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
literal|0.03
argument_list|,
name|BloomFilterStrategies
operator|.
name|MURMUR128_MITZ_32
argument_list|)
decl_stmt|;
comment|// Insert "numInsertions" even numbers into the BF.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertApproximateElementCountGuess
argument_list|(
name|bf
argument_list|,
name|numInsertions
argument_list|)
expr_stmt|;
comment|// Assert that the BF "might" have all of the even numbers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now we check for known false positives using a set of known false positives.
comment|// (These are all of the false positives under 900.)
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|49
argument_list|,
literal|51
argument_list|,
literal|59
argument_list|,
literal|163
argument_list|,
literal|199
argument_list|,
literal|321
argument_list|,
literal|325
argument_list|,
literal|363
argument_list|,
literal|367
argument_list|,
literal|469
argument_list|,
literal|545
argument_list|,
literal|561
argument_list|,
literal|727
argument_list|,
literal|769
argument_list|,
literal|773
argument_list|,
literal|781
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|900
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|falsePositives
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"BF should not contain "
operator|+
name|i
argument_list|,
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that there are exactly 29824 false positives for this BF.
name|int
name|knownNumberOfFalsePositives
init|=
literal|29824
decl_stmt|;
name|int
name|numFpp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|numFpp
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|knownNumberOfFalsePositives
argument_list|,
name|numFpp
argument_list|)
expr_stmt|;
name|double
name|expectedReportedFpp
init|=
operator|(
name|double
operator|)
name|knownNumberOfFalsePositives
operator|/
name|numInsertions
decl_stmt|;
name|double
name|actualReportedFpp
init|=
name|bf
operator|.
name|expectedFpp
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedReportedFpp
argument_list|,
name|actualReportedFpp
argument_list|,
literal|0.00015
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAndCheckBloomFilterWithKnownFalsePositives64 ()
specifier|public
name|void
name|testCreateAndCheckBloomFilterWithKnownFalsePositives64
parameter_list|()
block|{
name|int
name|numInsertions
init|=
literal|1000000
decl_stmt|;
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
literal|0.03
argument_list|,
name|BloomFilterStrategies
operator|.
name|MURMUR128_MITZ_64
argument_list|)
decl_stmt|;
comment|// Insert "numInsertions" even numbers into the BF.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertApproximateElementCountGuess
argument_list|(
name|bf
argument_list|,
name|numInsertions
argument_list|)
expr_stmt|;
comment|// Assert that the BF "might" have all of the even numbers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now we check for known false positives using a set of known false positives.
comment|// (These are all of the false positives under 900.)
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|15
argument_list|,
literal|25
argument_list|,
literal|287
argument_list|,
literal|319
argument_list|,
literal|381
argument_list|,
literal|399
argument_list|,
literal|421
argument_list|,
literal|465
argument_list|,
literal|529
argument_list|,
literal|697
argument_list|,
literal|767
argument_list|,
literal|857
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|900
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|falsePositives
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"BF should not contain "
operator|+
name|i
argument_list|,
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that there are exactly 30104 false positives for this BF.
name|int
name|knownNumberOfFalsePositives
init|=
literal|30104
decl_stmt|;
name|int
name|numFpp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|numFpp
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|knownNumberOfFalsePositives
argument_list|,
name|numFpp
argument_list|)
expr_stmt|;
name|double
name|expectedReportedFpp
init|=
operator|(
name|double
operator|)
name|knownNumberOfFalsePositives
operator|/
name|numInsertions
decl_stmt|;
name|double
name|actualReportedFpp
init|=
name|bf
operator|.
name|expectedFpp
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedReportedFpp
argument_list|,
name|actualReportedFpp
argument_list|,
literal|0.00033
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAndCheckBloomFilterWithKnownUtf8FalsePositives64 ()
specifier|public
name|void
name|testCreateAndCheckBloomFilterWithKnownUtf8FalsePositives64
parameter_list|()
block|{
name|int
name|numInsertions
init|=
literal|1000000
decl_stmt|;
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|numInsertions
argument_list|,
literal|0.03
argument_list|,
name|BloomFilterStrategies
operator|.
name|MURMUR128_MITZ_64
argument_list|)
decl_stmt|;
comment|// Insert "numInsertions" even numbers into the BF.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertApproximateElementCountGuess
argument_list|(
name|bf
argument_list|,
name|numInsertions
argument_list|)
expr_stmt|;
comment|// Assert that the BF "might" have all of the even numbers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now we check for known false positives using a set of known false positives.
comment|// (These are all of the false positives under 900.)
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|129
argument_list|,
literal|471
argument_list|,
literal|723
argument_list|,
literal|89
argument_list|,
literal|751
argument_list|,
literal|835
argument_list|,
literal|871
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|900
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|falsePositives
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"BF should not contain "
operator|+
name|i
argument_list|,
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that there are exactly 29763 false positives for this BF.
name|int
name|knownNumberOfFalsePositives
init|=
literal|29763
decl_stmt|;
name|int
name|numFpp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numInsertions
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|numFpp
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|knownNumberOfFalsePositives
argument_list|,
name|numFpp
argument_list|)
expr_stmt|;
name|double
name|expectedReportedFpp
init|=
operator|(
name|double
operator|)
name|knownNumberOfFalsePositives
operator|/
name|numInsertions
decl_stmt|;
name|double
name|actualReportedFpp
init|=
name|bf
operator|.
name|expectedFpp
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedReportedFpp
argument_list|,
name|actualReportedFpp
argument_list|,
literal|0.00033
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sanity checking with many combinations of false positive rates and expected insertions    */
DECL|method|testBasic ()
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
for|for
control|(
name|double
name|fpr
init|=
literal|0.0000001
init|;
name|fpr
operator|<
literal|0.1
condition|;
name|fpr
operator|*=
literal|10
control|)
block|{
for|for
control|(
name|int
name|expectedInsertions
init|=
literal|1
init|;
name|expectedInsertions
operator|<=
literal|10000
condition|;
name|expectedInsertions
operator|*=
literal|10
control|)
block|{
name|checkSanity
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|HashTestUtils
operator|.
name|BAD_FUNNEL
argument_list|,
name|expectedInsertions
argument_list|,
name|fpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPreconditions ()
specifier|public
name|void
name|testPreconditions
parameter_list|()
block|{
try|try
block|{
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|0.03
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testFailureWhenMoreThan255HashFunctionsAreNeeded ()
specifier|public
name|void
name|testFailureWhenMoreThan255HashFunctionsAreNeeded
parameter_list|()
block|{
try|try
block|{
name|int
name|n
init|=
literal|1000
decl_stmt|;
name|double
name|p
init|=
literal|0.00000000000000000000000000000000000000000000000000000000000000000000000000000001
decl_stmt|;
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
name|n
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|BloomFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that we never get an optimal hashes number of zero.    */
DECL|method|testOptimalHashes ()
specifier|public
name|void
name|testOptimalHashes
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<
literal|1000
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
literal|1000
condition|;
name|m
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// https://code.google.com/p/guava-libraries/issues/detail?id=1781
DECL|method|testOptimalNumOfHashFunctionsRounding ()
specifier|public
name|void
name|testOptimalNumOfHashFunctionsRounding
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|319
argument_list|,
literal|3072
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that we always get a non-negative optimal size.    */
DECL|method|testOptimalSize ()
specifier|public
name|void
name|testOptimalSize
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<
literal|1000
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|double
name|fpp
init|=
name|Double
operator|.
name|MIN_VALUE
init|;
name|fpp
operator|<
literal|1.0
condition|;
name|fpp
operator|+=
literal|0.001
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|n
argument_list|,
name|fpp
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// some random values
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|repeats
init|=
literal|0
init|;
name|repeats
operator|<
literal|10000
condition|;
name|repeats
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
argument_list|,
name|random
operator|.
name|nextDouble
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// and some crazy values (this used to be capped to Integer.MAX_VALUE, now it can go bigger
name|assertEquals
argument_list|(
literal|3327428144502L
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|HashTestUtils
operator|.
name|BAD_FUNNEL
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"we can't represent such a large BF!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Could not create BloomFilter of 3327428144502 bits"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// OutOfMemoryError
DECL|method|testLargeNumberOfInsertions ()
specifier|public
name|void
name|testLargeNumberOfInsertions
parameter_list|()
block|{
comment|// We use horrible FPPs here to keep Java from OOM'ing
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|,
literal|0.28
argument_list|)
decl_stmt|;
name|unused
operator|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|45L
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0.99
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSanity (BloomFilter<Object> bf)
specifier|private
specifier|static
name|void
name|checkSanity
parameter_list|(
name|BloomFilter
argument_list|<
name|Object
argument_list|>
name|bf
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf
operator|.
name|apply
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|bf
operator|.
name|put
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|apply
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopy ()
specifier|public
name|void
name|testCopy
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|original
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|original
operator|.
name|copy
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpectedFpp ()
specifier|public
name|void
name|testExpectedFpp
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|Object
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|HashTestUtils
operator|.
name|BAD_FUNNEL
argument_list|,
literal|10
argument_list|,
literal|0.03
argument_list|)
decl_stmt|;
name|double
name|fpp
init|=
name|bf
operator|.
name|expectedFpp
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|fpp
argument_list|)
expr_stmt|;
comment|// usually completed in less than 200 iterations
while|while
condition|(
name|fpp
operator|!=
literal|1.0
condition|)
block|{
name|boolean
name|changed
init|=
name|bf
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|newFpp
init|=
name|bf
operator|.
name|expectedFpp
argument_list|()
decl_stmt|;
comment|// if changed, the new fpp is strictly higher, otherwise it is the same
name|assertTrue
argument_list|(
name|changed
condition|?
name|newFpp
operator|>
name|fpp
else|:
name|newFpp
operator|==
name|fpp
argument_list|)
expr_stmt|;
name|fpp
operator|=
name|newFpp
expr_stmt|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testBitSize ()
specifier|public
name|void
name|testBitSize
parameter_list|()
block|{
name|double
name|fpp
init|=
literal|0.03
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|numBits
init|=
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|i
argument_list|,
name|fpp
argument_list|)
decl_stmt|;
name|int
name|arraySize
init|=
name|Ints
operator|.
name|checkedCast
argument_list|(
name|LongMath
operator|.
name|divide
argument_list|(
name|numBits
argument_list|,
literal|64
argument_list|,
name|RoundingMode
operator|.
name|CEILING
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|arraySize
operator|*
name|Long
operator|.
name|SIZE
argument_list|,
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
name|i
argument_list|,
name|fpp
argument_list|)
operator|.
name|bitSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testApproximateElementCount ()
specifier|public
name|void
name|testApproximateElementCount
parameter_list|()
block|{
name|int
name|numInsertions
init|=
literal|1000
decl_stmt|;
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
name|numInsertions
argument_list|)
decl_stmt|;
name|bf
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|++
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertApproximateElementCountGuess
argument_list|(
name|bf
argument_list|,
name|numInsertions
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_empty ()
specifier|public
name|void
name|testEquals_empty
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.01
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.02
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|0.01
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|0.02
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.01
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.02
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|0.01
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|0.02
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testCollector ()
specifier|public
name|void
name|testCollector
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf1
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|bf1
operator|.
name|put
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|bf1
operator|.
name|put
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bf1
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|collect
argument_list|(
name|BloomFilter
operator|.
name|toBloomFilter
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bf1
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|collect
argument_list|(
name|BloomFilter
operator|.
name|toBloomFilter
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf1
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|bf1
operator|.
name|put
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|bf1
operator|.
name|put
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf2
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|bf2
operator|.
name|put
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|bf2
operator|.
name|put
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|bf1
argument_list|,
name|bf2
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
name|bf2
operator|.
name|put
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|bf1
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|bf2
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsWithCustomFunnel ()
specifier|public
name|void
name|testEqualsWithCustomFunnel
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|Long
argument_list|>
name|bf1
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
operator|new
name|CustomFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BloomFilter
argument_list|<
name|Long
argument_list|>
name|bf2
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
operator|new
name|CustomFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bf1
argument_list|,
name|bf2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerializationWithCustomFunnel ()
specifier|public
name|void
name|testSerializationWithCustomFunnel
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
operator|new
name|CustomFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|CustomFunnel
specifier|private
specifier|static
specifier|final
class|class
name|CustomFunnel
implements|implements
name|Funnel
argument_list|<
name|Long
argument_list|>
block|{
annotation|@
name|Override
DECL|method|funnel (Long value, PrimitiveSink into)
specifier|public
name|void
name|funnel
parameter_list|(
name|Long
name|value
parameter_list|,
name|PrimitiveSink
name|into
parameter_list|)
block|{
name|into
operator|.
name|putLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
return|return
operator|(
name|object
operator|instanceof
name|CustomFunnel
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
DECL|method|testPutReturnValue ()
specifier|public
name|void
name|testPutReturnValue
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|BloomFilter
argument_list|<
name|String
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|String
name|value
init|=
operator|new
name|Object
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|mightContain
init|=
name|bf
operator|.
name|mightContain
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|boolean
name|put
init|=
name|bf
operator|.
name|put
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mightContain
operator|!=
name|put
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPutAll ()
specifier|public
name|void
name|testPutAll
parameter_list|()
block|{
name|int
name|element1
init|=
literal|1
decl_stmt|;
name|int
name|element2
init|=
literal|2
decl_stmt|;
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bf1
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|bf1
operator|.
name|put
argument_list|(
name|element1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf1
operator|.
name|mightContain
argument_list|(
name|element1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf1
operator|.
name|mightContain
argument_list|(
name|element2
argument_list|)
argument_list|)
expr_stmt|;
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bf2
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|bf2
operator|.
name|put
argument_list|(
name|element2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf2
operator|.
name|mightContain
argument_list|(
name|element1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf2
operator|.
name|mightContain
argument_list|(
name|element2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf1
operator|.
name|isCompatible
argument_list|(
name|bf2
argument_list|)
argument_list|)
expr_stmt|;
name|bf1
operator|.
name|putAll
argument_list|(
name|bf2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf1
operator|.
name|mightContain
argument_list|(
name|element1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf1
operator|.
name|mightContain
argument_list|(
name|element2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf2
operator|.
name|mightContain
argument_list|(
name|element1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf2
operator|.
name|mightContain
argument_list|(
name|element2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAllDifferentSizes ()
specifier|public
name|void
name|testPutAllDifferentSizes
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bf1
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bf2
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|bf1
operator|.
name|isCompatible
argument_list|(
name|bf2
argument_list|)
argument_list|)
expr_stmt|;
name|bf1
operator|.
name|putAll
argument_list|(
name|bf2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|assertFalse
argument_list|(
name|bf2
operator|.
name|isCompatible
argument_list|(
name|bf1
argument_list|)
argument_list|)
expr_stmt|;
name|bf2
operator|.
name|putAll
argument_list|(
name|bf1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPutAllWithSelf ()
specifier|public
name|void
name|testPutAllWithSelf
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bf1
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|bf1
operator|.
name|isCompatible
argument_list|(
name|bf1
argument_list|)
argument_list|)
expr_stmt|;
name|bf1
operator|.
name|putAll
argument_list|(
name|bf1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testJavaSerialization ()
specifier|public
name|void
name|testJavaSerialization
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|byte
index|[]
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BloomFilter
argument_list|<
name|byte
index|[]
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|bf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|copy
operator|.
name|mightContain
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|bf
operator|.
name|expectedFpp
argument_list|()
argument_list|,
name|copy
operator|.
name|expectedFpp
argument_list|()
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|bf
argument_list|)
expr_stmt|;
block|}
DECL|method|testCustomSerialization ()
specifier|public
name|void
name|testCustomSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Funnel
argument_list|<
name|byte
index|[]
argument_list|>
name|funnel
init|=
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
decl_stmt|;
name|BloomFilter
argument_list|<
name|byte
index|[]
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|funnel
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bf
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bf
argument_list|,
name|BloomFilter
operator|.
name|readFrom
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|funnel
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test will fail whenever someone updates/reorders the BloomFilterStrategies constants.    * Only appending a new constant is allowed.    */
DECL|method|testBloomFilterStrategies ()
specifier|public
name|void
name|testBloomFilterStrategies
parameter_list|()
block|{
name|assertThat
argument_list|(
name|BloomFilterStrategies
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BloomFilterStrategies
operator|.
name|MURMUR128_MITZ_32
argument_list|,
name|BloomFilterStrategies
operator|.
name|values
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BloomFilterStrategies
operator|.
name|MURMUR128_MITZ_64
argument_list|,
name|BloomFilterStrategies
operator|.
name|values
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoRaceConditions ()
specifier|public
name|void
name|testNoRaceConditions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BloomFilter
argument_list|<
name|Integer
argument_list|>
name|bloomFilter
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
literal|15_000_000
argument_list|,
literal|0.01
argument_list|)
decl_stmt|;
comment|// This check has to be BEFORE the loop because the random insertions can
comment|// flip GOLDEN_PRESENT_KEY to true even if it wasn't explicitly inserted
comment|// (false positive).
name|assertThat
argument_list|(
name|bloomFilter
operator|.
name|mightContain
argument_list|(
name|GOLDEN_PRESENT_KEY
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PUTS
condition|;
name|i
operator|++
control|)
block|{
name|bloomFilter
operator|.
name|put
argument_list|(
name|getNonGoldenRandomKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bloomFilter
operator|.
name|put
argument_list|(
name|GOLDEN_PRESENT_KEY
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
literal|12
decl_stmt|;
specifier|final
name|double
name|safetyFalsePositiveRate
init|=
literal|0.1
decl_stmt|;
specifier|final
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
do|do
block|{
comment|// We can't have a GOLDEN_NOT_PRESENT_KEY because false positives are
comment|// possible! It's false negatives that can't happen.
name|assertThat
argument_list|(
name|bloomFilter
operator|.
name|mightContain
argument_list|(
name|GOLDEN_PRESENT_KEY
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|int
name|key
init|=
name|getNonGoldenRandomKey
argument_list|()
decl_stmt|;
comment|// We can't check that the key is mightContain() == false before the
comment|// put() because the key could have already been generated *or* the
comment|// bloom filter might say true even when it's not there (false
comment|// positive).
name|bloomFilter
operator|.
name|put
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// False negative should *never* happen.
name|assertThat
argument_list|(
name|bloomFilter
operator|.
name|mightContain
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// If this check ever fails, that means we need to either bump the
comment|// number of expected insertions or don't run the test for so long.
comment|// Don't forget, the bloom filter slowly saturates over time and the
comment|// expected false positive probability goes up!
name|assertThat
argument_list|(
name|bloomFilter
operator|.
name|expectedFpp
argument_list|()
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|safetyFalsePositiveRate
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|<
literal|1
condition|)
do|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
name|runThreadsAndReturnExceptions
argument_list|(
name|numThreads
argument_list|,
name|task
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exceptions
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|runThreadsAndReturnExceptions (int numThreads, Runnable task)
specifier|private
specifier|static
name|List
argument_list|<
name|Throwable
argument_list|>
name|runThreadsAndReturnExceptions
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|Runnable
name|task
parameter_list|)
block|{
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|exceptions
return|;
block|}
DECL|method|getNonGoldenRandomKey ()
specifier|private
specifier|static
name|int
name|getNonGoldenRandomKey
parameter_list|()
block|{
name|int
name|key
decl_stmt|;
do|do
block|{
name|key
operator|=
name|random
operator|.
name|get
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|key
operator|==
name|GOLDEN_PRESENT_KEY
condition|)
do|;
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

