begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Tests for SimpleGenericBloomFilter and derived BloomFilter views.  *   * @author andreou@google.com (Dimitris Andreou)  */
end_comment

begin_class
DECL|class|BloomFilterTest
specifier|public
class|class
name|BloomFilterTest
extends|extends
name|TestCase
block|{
comment|/**    * Sanity checking with many combinations of false positive rates and expected insertions    */
DECL|method|testBasic ()
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
for|for
control|(
name|double
name|fpr
init|=
literal|0.0000001
init|;
name|fpr
operator|<
literal|0.1
condition|;
name|fpr
operator|*=
literal|10
control|)
block|{
for|for
control|(
name|int
name|expectedInsertions
init|=
literal|1
init|;
name|expectedInsertions
operator|<=
literal|10000
condition|;
name|expectedInsertions
operator|*=
literal|10
control|)
block|{
name|checkSanity
argument_list|(
name|BloomFilter
operator|.
name|create
argument_list|(
name|HashTestUtils
operator|.
name|BAD_FUNNEL
argument_list|,
name|expectedInsertions
argument_list|,
name|fpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests that we never get an optimal hashes number of zero.     */
DECL|method|testOptimalHashes ()
specifier|public
name|void
name|testOptimalHashes
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<
literal|1000
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
literal|1000
condition|;
name|m
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests that we always get a non-negative optimal size.      */
DECL|method|testOptimalSize ()
specifier|public
name|void
name|testOptimalSize
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<
literal|1000
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|double
name|fpp
init|=
name|Double
operator|.
name|MIN_VALUE
init|;
name|fpp
operator|<
literal|1.0
condition|;
name|fpp
operator|+=
literal|0.001
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|n
argument_list|,
name|fpp
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// some random values
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|repeats
init|=
literal|0
init|;
name|repeats
operator|<
literal|10000
condition|;
name|repeats
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
argument_list|,
name|random
operator|.
name|nextDouble
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// and some crazy values
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSanity (BloomFilter<Object> bf)
specifier|private
name|void
name|checkSanity
parameter_list|(
name|BloomFilter
argument_list|<
name|Object
argument_list|>
name|bf
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|bf
operator|.
name|put
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|BloomFilter
argument_list|<
name|byte
index|[]
argument_list|>
name|bf
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|bf
operator|.
name|put
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bf
operator|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|bf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|bf
operator|.
name|mightContain
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

