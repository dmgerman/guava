begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2011 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for HashFunctions.  *  * @author andreou@google.com (Dimitris Andreou)  */
end_comment

begin_class
DECL|class|HashFunctionsTest
specifier|public
class|class
name|HashFunctionsTest
extends|extends
name|TestCase
block|{
DECL|method|testMd5 ()
specifier|public
name|void
name|testMd5
parameter_list|()
block|{
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMurmur3_138 ()
specifier|public
name|void
name|testMurmur3_138
parameter_list|()
block|{
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMurmur3_32 ()
specifier|public
name|void
name|testMurmur3_32
parameter_list|()
block|{
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGoodFastHash ()
specifier|public
name|void
name|testGoodFastHash
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|HashFunction
name|hasher
init|=
name|Hashing
operator|.
name|goodFastHash
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hasher
operator|.
name|bits
argument_list|()
operator|>=
name|i
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|hasher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks that a Hasher returns the same HashCode when given the same input, and also    * that the collision rate looks sane.    */
DECL|method|assertInvariants (HashFunction hashFunction)
specifier|private
specifier|static
name|void
name|assertInvariants
parameter_list|(
name|HashFunction
name|hashFunction
parameter_list|)
block|{
name|int
name|objects
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|HashCode
argument_list|>
name|hashcodes
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|objects
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|HashCode
name|hashcode1
init|=
name|hashFunction
operator|.
name|newHasher
argument_list|()
operator|.
name|putObject
argument_list|(
name|o
argument_list|,
name|HashTestUtils
operator|.
name|BAD_FUNNEL
argument_list|)
operator|.
name|hash
argument_list|()
decl_stmt|;
name|HashCode
name|hashcode2
init|=
name|hashFunction
operator|.
name|newHasher
argument_list|()
operator|.
name|putObject
argument_list|(
name|o
argument_list|,
name|HashTestUtils
operator|.
name|BAD_FUNNEL
argument_list|)
operator|.
name|hash
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|hashcode1
argument_list|,
name|hashcode2
argument_list|)
expr_stmt|;
comment|// idempotent
name|assertEquals
argument_list|(
name|hashFunction
operator|.
name|bits
argument_list|()
argument_list|,
name|hashcode1
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashFunction
operator|.
name|bits
argument_list|()
argument_list|,
name|hashcode1
operator|.
name|asBytes
argument_list|()
operator|.
name|length
operator|*
literal|8
argument_list|)
expr_stmt|;
name|hashcodes
operator|.
name|add
argument_list|(
name|hashcode1
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hashcodes
operator|.
name|size
argument_list|()
operator|>
name|objects
operator|*
literal|0.95
argument_list|)
expr_stmt|;
comment|// quite relaxed test
name|assertHashBytesThrowsCorrectExceptions
argument_list|(
name|hashFunction
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHashBytesThrowsCorrectExceptions (HashFunction hashFunction)
specifier|private
specifier|static
name|void
name|assertHashBytesThrowsCorrectExceptions
parameter_list|(
name|HashFunction
name|hashFunction
parameter_list|)
block|{
name|hashFunction
operator|.
name|hashBytes
argument_list|(
operator|new
name|byte
index|[
literal|64
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|hashFunction
operator|.
name|hashBytes
argument_list|(
operator|new
name|byte
index|[
literal|128
index|]
argument_list|,
operator|-
literal|1
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ok
parameter_list|)
block|{}
try|try
block|{
name|hashFunction
operator|.
name|hashBytes
argument_list|(
operator|new
name|byte
index|[
literal|128
index|]
argument_list|,
literal|64
argument_list|,
literal|256
comment|/* too long len */
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ok
parameter_list|)
block|{}
try|try
block|{
name|hashFunction
operator|.
name|hashBytes
argument_list|(
operator|new
name|byte
index|[
literal|64
index|]
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ok
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

