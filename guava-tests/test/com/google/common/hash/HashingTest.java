begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
operator|.
name|ConcatenatedHashFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicLongMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Hashing}.  *  * @author Dimitris Andreou  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|HashingTest
specifier|public
class|class
name|HashingTest
extends|extends
name|TestCase
block|{
DECL|method|testMd5 ()
specifier|public
name|void
name|testMd5
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.4
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.md5()"
argument_list|,
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSha1 ()
specifier|public
name|void
name|testSha1
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.4
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.sha1()"
argument_list|,
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSha256 ()
specifier|public
name|void
name|testSha256
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.4
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.sha256()"
argument_list|,
name|Hashing
operator|.
name|sha256
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSha512 ()
specifier|public
name|void
name|testSha512
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|0.4
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.sha512()"
argument_list|,
name|Hashing
operator|.
name|sha512
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCrc32 ()
specifier|public
name|void
name|testCrc32
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|crc32
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.crc32()"
argument_list|,
name|Hashing
operator|.
name|crc32
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdler32 ()
specifier|public
name|void
name|testAdler32
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|adler32
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.adler32()"
argument_list|,
name|Hashing
operator|.
name|adler32
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMurmur3_128 ()
specifier|public
name|void
name|testMurmur3_128
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|check2BitAvalanche
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|,
literal|250
argument_list|,
literal|0.20
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|,
literal|250
argument_list|,
literal|0.17
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.murmur3_128(0)"
argument_list|,
name|Hashing
operator|.
name|murmur3_128
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMurmur3_32 ()
specifier|public
name|void
name|testMurmur3_32
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|check2BitAvalanche
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|,
literal|250
argument_list|,
literal|0.20
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|,
literal|250
argument_list|,
literal|0.17
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.murmur3_32(0)"
argument_list|,
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGoodFastHash ()
specifier|public
name|void
name|testGoodFastHash
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|+=
literal|17
control|)
block|{
name|HashFunction
name|hasher
init|=
name|Hashing
operator|.
name|goodFastHash
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hasher
operator|.
name|bits
argument_list|()
operator|>=
name|i
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|hasher
argument_list|)
expr_stmt|;
block|}
block|}
comment|// goodFastHash(32) uses Murmur3_32. Use the same epsilon bounds.
DECL|method|testGoodFastHash32 ()
specifier|public
name|void
name|testGoodFastHash32
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|check2BitAvalanche
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|32
argument_list|)
argument_list|,
literal|250
argument_list|,
literal|0.20
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|32
argument_list|)
argument_list|,
literal|250
argument_list|,
literal|0.17
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// goodFastHash(128) uses Murmur3_128. Use the same epsilon bounds.
DECL|method|testGoodFastHash128 ()
specifier|public
name|void
name|testGoodFastHash128
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|check2BitAvalanche
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|128
argument_list|)
argument_list|,
literal|250
argument_list|,
literal|0.20
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|128
argument_list|)
argument_list|,
literal|250
argument_list|,
literal|0.17
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// goodFastHash(256) uses Murmur3_128. Use the same epsilon bounds.
DECL|method|testGoodFastHash256 ()
specifier|public
name|void
name|testGoodFastHash256
parameter_list|()
block|{
name|HashTestUtils
operator|.
name|check2BitAvalanche
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|256
argument_list|)
argument_list|,
literal|250
argument_list|,
literal|0.20
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkAvalanche
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|256
argument_list|)
argument_list|,
literal|250
argument_list|,
literal|0.17
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNo2BitCharacteristics
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|checkNoFunnels
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|HashTestUtils
operator|.
name|assertInvariants
argument_list|(
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|256
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsistentHash_correctness ()
specifier|public
name|void
name|testConsistentHash_correctness
parameter_list|()
block|{
name|long
index|[]
name|interestingValues
init|=
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
decl_stmt|;
for|for
control|(
name|long
name|h
range|:
name|interestingValues
control|)
block|{
name|checkConsistentHashCorrectness
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|7
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|checkConsistentHashCorrectness
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkConsistentHashCorrectness (long hashCode)
specifier|private
name|void
name|checkConsistentHashCorrectness
parameter_list|(
name|long
name|hashCode
parameter_list|)
block|{
name|int
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|shards
init|=
literal|1
init|;
name|shards
operator|<=
literal|100000
condition|;
name|shards
operator|++
control|)
block|{
name|int
name|b
init|=
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|hashCode
argument_list|,
name|shards
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|last
condition|)
block|{
name|assertEquals
argument_list|(
name|shards
operator|-
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|last
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
DECL|method|testConsistentHash_probabilities ()
specifier|public
name|void
name|testConsistentHash_probabilities
parameter_list|()
block|{
name|AtomicLongMap
argument_list|<
name|Integer
argument_list|>
name|map
init|=
name|AtomicLongMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|9
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERS
condition|;
name|i
operator|++
control|)
block|{
name|countRemaps
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|shard
init|=
literal|2
init|;
name|shard
operator|<=
name|MAX_SHARDS
condition|;
name|shard
operator|++
control|)
block|{
comment|// Rough: don't exceed 1.2x the expected number of remaps by more than 20
name|assertTrue
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|shard
argument_list|)
operator|<=
literal|1.2
operator|*
name|ITERS
operator|/
name|shard
operator|+
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countRemaps (long h, AtomicLongMap<Integer> map)
specifier|private
name|void
name|countRemaps
parameter_list|(
name|long
name|h
parameter_list|,
name|AtomicLongMap
argument_list|<
name|Integer
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|shards
init|=
literal|2
init|;
name|shards
operator|<=
name|MAX_SHARDS
condition|;
name|shards
operator|++
control|)
block|{
name|int
name|chosen
init|=
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|h
argument_list|,
name|shards
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosen
operator|!=
name|last
condition|)
block|{
name|map
operator|.
name|incrementAndGet
argument_list|(
name|shards
argument_list|)
expr_stmt|;
name|last
operator|=
name|chosen
expr_stmt|;
block|}
block|}
block|}
DECL|field|ITERS
specifier|private
specifier|static
specifier|final
name|int
name|ITERS
init|=
literal|10000
decl_stmt|;
DECL|field|MAX_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SHARDS
init|=
literal|500
decl_stmt|;
DECL|method|testConsistentHash_outOfRange ()
specifier|public
name|void
name|testConsistentHash_outOfRange
parameter_list|()
block|{
try|try
block|{
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|5L
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testConsistentHash_ofHashCode ()
specifier|public
name|void
name|testConsistentHash_ofHashCode
parameter_list|()
block|{
name|checkSameResult
argument_list|(
name|HashCodes
operator|.
name|fromLong
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkSameResult
argument_list|(
name|HashCodes
operator|.
name|fromLong
argument_list|(
literal|0x9999999999999999L
argument_list|)
argument_list|,
literal|0x9999999999999999L
argument_list|)
expr_stmt|;
name|checkSameResult
argument_list|(
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|0x99999999
argument_list|)
argument_list|,
literal|0x0000000099999999L
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSameResult (HashCode hashCode, long equivLong)
specifier|public
name|void
name|checkSameResult
parameter_list|(
name|HashCode
name|hashCode
parameter_list|,
name|long
name|equivLong
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|equivLong
argument_list|,
literal|5555
argument_list|)
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|hashCode
argument_list|,
literal|5555
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check a few "golden" values to see that implementations across languages    * are equivalent.    */
DECL|method|testConsistentHash_linearCongruentialGeneratorCompatibility ()
specifier|public
name|void
name|testConsistentHash_linearCongruentialGeneratorCompatibility
parameter_list|()
block|{
name|int
index|[]
name|golden100
init|=
block|{
literal|0
block|,
literal|55
block|,
literal|62
block|,
literal|8
block|,
literal|45
block|,
literal|59
block|,
literal|86
block|,
literal|97
block|,
literal|82
block|,
literal|59
block|,
literal|73
block|,
literal|37
block|,
literal|17
block|,
literal|56
block|,
literal|86
block|,
literal|21
block|,
literal|90
block|,
literal|37
block|,
literal|38
block|,
literal|83
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|golden100
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|golden100
index|[
name|i
index|]
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|i
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|10863919174838991L
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|2016238256797177309L
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|1673758223894951030L
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|80343
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|2
argument_list|,
literal|100001
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22152
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|2201
argument_list|,
literal|100001
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15018
argument_list|,
name|Hashing
operator|.
name|consistentHash
argument_list|(
literal|2202
argument_list|,
literal|100001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|MAX_PERCENT_SPREAD
specifier|private
specifier|static
specifier|final
name|double
name|MAX_PERCENT_SPREAD
init|=
literal|0.5
decl_stmt|;
DECL|field|RANDOM_SEED
specifier|private
specifier|static
specifier|final
name|long
name|RANDOM_SEED
init|=
literal|177L
decl_stmt|;
DECL|method|testCombineOrdered_empty ()
specifier|public
name|void
name|testCombineOrdered_empty
parameter_list|()
block|{
try|try
block|{
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|Collections
operator|.
expr|<
name|HashCode
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCombineOrdered_differentBitLengths ()
specifier|public
name|void
name|testCombineOrdered_differentBitLengths
parameter_list|()
block|{
try|try
block|{
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|32
argument_list|)
argument_list|,
name|HashCodes
operator|.
name|fromLong
argument_list|(
literal|32L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCombineOrdered ()
specifier|public
name|void
name|testCombineOrdered
parameter_list|()
block|{
name|HashCode
name|hash31
init|=
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|31
argument_list|)
decl_stmt|;
name|HashCode
name|hash32
init|=
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hash32
argument_list|,
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCodes
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
argument_list|,
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|,
name|hash32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCodes
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xa0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
argument_list|,
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|,
name|hash32
argument_list|,
name|hash32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash31
argument_list|,
name|hash32
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|,
name|hash31
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCombineOrdered_randomHashCodes ()
specifier|public
name|void
name|testCombineOrdered_randomHashCodes
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HashCode
argument_list|>
name|hashCodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|hashCodes
operator|.
name|add
argument_list|(
name|HashCodes
operator|.
name|fromLong
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashCode
name|hashCode1
init|=
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|hashCodes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|hashCodes
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|HashCode
name|hashCode2
init|=
name|Hashing
operator|.
name|combineOrdered
argument_list|(
name|hashCodes
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hashCode1
operator|.
name|equals
argument_list|(
name|hashCode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCombineUnordered_empty ()
specifier|public
name|void
name|testCombineUnordered_empty
parameter_list|()
block|{
try|try
block|{
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|Collections
operator|.
expr|<
name|HashCode
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCombineUnordered_differentBitLengths ()
specifier|public
name|void
name|testCombineUnordered_differentBitLengths
parameter_list|()
block|{
try|try
block|{
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|32
argument_list|)
argument_list|,
name|HashCodes
operator|.
name|fromLong
argument_list|(
literal|32L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCombineUnordered ()
specifier|public
name|void
name|testCombineUnordered
parameter_list|()
block|{
name|HashCode
name|hash31
init|=
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|31
argument_list|)
decl_stmt|;
name|HashCode
name|hash32
init|=
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hash32
argument_list|,
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|64
argument_list|)
argument_list|,
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|,
name|hash32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|96
argument_list|)
argument_list|,
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|,
name|hash32
argument_list|,
name|hash32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash31
argument_list|,
name|hash32
argument_list|)
argument_list|)
argument_list|,
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hash32
argument_list|,
name|hash31
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCombineUnordered_randomHashCodes ()
specifier|public
name|void
name|testCombineUnordered_randomHashCodes
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HashCode
argument_list|>
name|hashCodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|hashCodes
operator|.
name|add
argument_list|(
name|HashCodes
operator|.
name|fromLong
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashCode
name|hashCode1
init|=
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|hashCodes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|hashCodes
argument_list|)
expr_stmt|;
name|HashCode
name|hashCode2
init|=
name|Hashing
operator|.
name|combineUnordered
argument_list|(
name|hashCodes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hashCode1
argument_list|,
name|hashCode2
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatenatedHashFunction_bits ()
specifier|public
name|void
name|testConcatenatedHashFunction_bits
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|bits
argument_list|()
argument_list|,
operator|new
name|ConcatenatedHashFunction
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|bits
argument_list|()
operator|+
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|bits
argument_list|()
argument_list|,
operator|new
name|ConcatenatedHashFunction
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|bits
argument_list|()
operator|+
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|bits
argument_list|()
operator|+
name|Hashing
operator|.
name|murmur3_128
argument_list|()
operator|.
name|bits
argument_list|()
argument_list|,
operator|new
name|ConcatenatedHashFunction
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|,
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatenatedHashFunction_makeHash ()
specifier|public
name|void
name|testConcatenatedHashFunction_makeHash
parameter_list|()
block|{
name|byte
index|[]
name|md5Hash
init|=
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|hashLong
argument_list|(
literal|42L
argument_list|)
operator|.
name|asBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|murmur3Hash
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|hashLong
argument_list|(
literal|42L
argument_list|)
operator|.
name|asBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|combined
init|=
operator|new
name|byte
index|[
name|md5Hash
operator|.
name|length
operator|+
name|murmur3Hash
operator|.
name|length
index|]
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|combined
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|md5Hash
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|murmur3Hash
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCodes
operator|.
name|fromBytes
argument_list|(
name|combined
argument_list|)
argument_list|,
operator|new
name|ConcatenatedHashFunction
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|)
operator|.
name|hashLong
argument_list|(
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|EMPTY_STRING
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
DECL|field|TQBFJOTLD
specifier|private
specifier|static
specifier|final
name|String
name|TQBFJOTLD
init|=
literal|"The quick brown fox jumps over the lazy dog"
decl_stmt|;
DECL|field|TQBFJOTLDP
specifier|private
specifier|static
specifier|final
name|String
name|TQBFJOTLDP
init|=
literal|"The quick brown fox jumps over the lazy dog."
decl_stmt|;
DECL|field|KNOWN_HASHES
specifier|private
specifier|static
specifier|final
name|ImmutableTable
argument_list|<
name|HashFunction
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|KNOWN_HASHES
init|=
name|ImmutableTable
operator|.
expr|<
name|HashFunction
decl_stmt|,
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|adler32
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"01000000"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|adler32
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"da0fdc5b"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|adler32
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"0810e46b"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"d41d8cd98f00b204e9800998ecf8427e"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"9e107d9d372bb6826bd81d3542a419d6"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"e4d909c290d0fb1ca068ffaddf22cbd0"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"00000000000000000000000000000000"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"6c1b07bc7bbc4be347939ac4a93c437a"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|murmur3_128
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"c902e99e1f4899cde7b68789a3a15d69"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"00000000"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"23f74f2e"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|murmur3_32
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"fc8bc4d5"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"da39a3ee5e6b4b0d3255bfef95601890afd80709"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"2fd4e1c67a2d28fced849ee1bb76e7391b93eb12"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"408d94384216f890ff7a0c3528e8bed1e0b01621"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
operator|+
literal|"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb64"
operator|+
literal|"2e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"91ea1245f20d46ae9a037a989f54f1f790f0a47607eeb8a14d12890cea77a1bb"
operator|+
literal|"c6c7ed9cf205e67b7f2b8fd4c7dfd3a7a8617e45f3c463d481c7e586c39ac1ed"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|crc32
argument_list|()
argument_list|,
name|EMPTY_STRING
argument_list|,
literal|"00000000"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|crc32
argument_list|()
argument_list|,
name|TQBFJOTLD
argument_list|,
literal|"39a34f41"
argument_list|)
decl|.
name|put
argument_list|(
name|Hashing
operator|.
name|crc32
argument_list|()
argument_list|,
name|TQBFJOTLDP
argument_list|,
literal|"e9259051"
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
DECL|method|testAllHashFunctionsHaveKnownHashes ()
specifier|public
name|void
name|testAllHashFunctionsHaveKnownHashes
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Method
name|method
range|:
name|Hashing
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|HashFunction
operator|.
name|class
argument_list|)
operator|&&
comment|// must return HashFunction
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// only the seed-less grapes^W hash functions
name|HashFunction
name|hashFunction
init|=
operator|(
name|HashFunction
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|Hashing
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be 3 entries in KNOWN_HASHES for "
operator|+
name|hashFunction
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|KNOWN_HASHES
operator|.
name|row
argument_list|(
name|hashFunction
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testKnownUtf8Hashing ()
specifier|public
name|void
name|testKnownUtf8Hashing
parameter_list|()
block|{
for|for
control|(
name|Cell
argument_list|<
name|HashFunction
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|cell
range|:
name|KNOWN_HASHES
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|HashFunction
name|func
init|=
name|cell
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|String
name|input
init|=
name|cell
operator|.
name|getColumnKey
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|cell
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Known hash for hash(%s, UTF_8) failed"
argument_list|,
name|input
argument_list|)
argument_list|,
name|expected
argument_list|,
name|func
operator|.
name|hashString
argument_list|(
name|input
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|setDefault
argument_list|(
name|HashCode
operator|.
name|class
argument_list|,
name|HashCodes
operator|.
name|fromInt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Hashing
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

