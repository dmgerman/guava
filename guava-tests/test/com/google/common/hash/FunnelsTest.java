begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|AbstractStreamingHashFunction
operator|.
name|AbstractStreamingHasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Tests for HashExtractors.  *  * @author Dimitris Andreou  */
end_comment

begin_class
DECL|class|FunnelsTest
specifier|public
class|class
name|FunnelsTest
extends|extends
name|TestCase
block|{
DECL|method|testForBytes ()
specifier|public
name|void
name|testForBytes
parameter_list|()
block|{
name|PrimitiveSink
name|primitiveSink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
operator|.
name|funnel
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|primitiveSink
argument_list|)
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testForBytes_null ()
specifier|public
name|void
name|testForBytes_null
parameter_list|()
block|{
name|assertNullsThrowException
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStrings ()
specifier|public
name|void
name|testForStrings
parameter_list|()
block|{
name|PrimitiveSink
name|primitiveSink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
operator|.
name|funnel
argument_list|(
literal|"test"
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|primitiveSink
argument_list|)
operator|.
name|putUnencodedChars
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStrings_null ()
specifier|public
name|void
name|testForStrings_null
parameter_list|()
block|{
name|assertNullsThrowException
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringsCharset ()
specifier|public
name|void
name|testForStringsCharset
parameter_list|()
block|{
for|for
control|(
name|Charset
name|charset
range|:
name|Charset
operator|.
name|availableCharsets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|PrimitiveSink
name|primitiveSink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|charset
argument_list|)
operator|.
name|funnel
argument_list|(
literal|"test"
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|primitiveSink
argument_list|)
operator|.
name|putString
argument_list|(
literal|"test"
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testForStringsCharset_null ()
specifier|public
name|void
name|testForStringsCharset_null
parameter_list|()
block|{
for|for
control|(
name|Charset
name|charset
range|:
name|Charset
operator|.
name|availableCharsets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertNullsThrowException
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testForInts ()
specifier|public
name|void
name|testForInts
parameter_list|()
block|{
name|Integer
name|value
init|=
literal|1234
decl_stmt|;
name|PrimitiveSink
name|primitiveSink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Funnels
operator|.
name|integerFunnel
argument_list|()
operator|.
name|funnel
argument_list|(
name|value
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|primitiveSink
argument_list|)
operator|.
name|putInt
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
block|}
DECL|method|testForInts_null ()
specifier|public
name|void
name|testForInts_null
parameter_list|()
block|{
name|assertNullsThrowException
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testForLongs ()
specifier|public
name|void
name|testForLongs
parameter_list|()
block|{
name|Long
name|value
init|=
literal|1234L
decl_stmt|;
name|PrimitiveSink
name|primitiveSink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Funnels
operator|.
name|longFunnel
argument_list|()
operator|.
name|funnel
argument_list|(
name|value
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|primitiveSink
argument_list|)
operator|.
name|putLong
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
block|}
DECL|method|testForLongs_null ()
specifier|public
name|void
name|testForLongs_null
parameter_list|()
block|{
name|assertNullsThrowException
argument_list|(
name|Funnels
operator|.
name|longFunnel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSequential ()
specifier|public
name|void
name|testSequential
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Funnel
argument_list|<
name|Object
argument_list|>
name|elementFunnel
init|=
name|mock
argument_list|(
name|Funnel
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrimitiveSink
name|primitiveSink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|Funnel
argument_list|<
name|Iterable
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|sequential
init|=
name|Funnels
operator|.
name|sequentialFunnel
argument_list|(
name|elementFunnel
argument_list|)
decl_stmt|;
name|sequential
operator|.
name|funnel
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|,
literal|"quux"
argument_list|)
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|elementFunnel
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|elementFunnel
argument_list|)
operator|.
name|funnel
argument_list|(
literal|"foo"
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|elementFunnel
argument_list|)
operator|.
name|funnel
argument_list|(
literal|"bar"
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|elementFunnel
argument_list|)
operator|.
name|funnel
argument_list|(
literal|"baz"
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|elementFunnel
argument_list|)
operator|.
name|funnel
argument_list|(
literal|"quux"
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNullsThrowException (Funnel<?> funnel)
specifier|private
specifier|static
name|void
name|assertNullsThrowException
parameter_list|(
name|Funnel
argument_list|<
name|?
argument_list|>
name|funnel
parameter_list|)
block|{
name|PrimitiveSink
name|primitiveSink
init|=
operator|new
name|AbstractStreamingHasher
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
block|{
annotation|@
name|Override
name|HashCode
name|makeHash
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|process
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
while|while
condition|(
name|bb
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|bb
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|funnel
operator|.
name|funnel
argument_list|(
literal|null
argument_list|,
name|primitiveSink
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ok
parameter_list|)
block|{}
block|}
DECL|method|testAsOutputStream ()
specifier|public
name|void
name|testAsOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveSink
name|sink
init|=
name|mock
argument_list|(
name|PrimitiveSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|Funnels
operator|.
name|asOutputStream
argument_list|(
name|sink
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|255
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sink
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|255
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sink
argument_list|)
operator|.
name|putBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sink
argument_list|)
operator|.
name|putBytes
argument_list|(
name|bytes
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|assertSame
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Funnels
operator|.
name|longFunnel
argument_list|()
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|longFunnel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Funnels
operator|.
name|sequentialFunnel
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|sequentialFunnel
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|byteArrayFunnel
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|longFunnel
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|unencodedCharsFunnel
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|sequentialFunnel
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|Funnels
operator|.
name|sequentialFunnel
argument_list|(
name|Funnels
operator|.
name|integerFunnel
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Funnels
operator|.
name|sequentialFunnel
argument_list|(
name|Funnels
operator|.
name|longFunnel
argument_list|()
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

