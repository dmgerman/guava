begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
operator|.
name|base16
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|security
operator|.
name|jca
operator|.
name|ProviderList
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|security
operator|.
name|jca
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_comment
comment|/**  * Tests for the MacHashFunction.  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|MacHashFunctionTest
specifier|public
class|class
name|MacHashFunctionTest
extends|extends
name|TestCase
block|{
DECL|field|INPUTS
specifier|private
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|INPUTS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|"Z"
argument_list|,
literal|"foobar"
argument_list|)
decl_stmt|;
DECL|field|MD5_KEY
specifier|private
specifier|static
specifier|final
name|SecretKey
name|MD5_KEY
init|=
operator|new
name|SecretKeySpec
argument_list|(
literal|"secret key"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|"HmacMD5"
argument_list|)
decl_stmt|;
DECL|field|SHA1_KEY
specifier|private
specifier|static
specifier|final
name|SecretKey
name|SHA1_KEY
init|=
operator|new
name|SecretKeySpec
argument_list|(
literal|"secret key"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|"HmacSHA1"
argument_list|)
decl_stmt|;
DECL|field|SHA256_KEY
specifier|private
specifier|static
specifier|final
name|SecretKey
name|SHA256_KEY
init|=
operator|new
name|SecretKeySpec
argument_list|(
literal|"secret key"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|"HmacSHA256"
argument_list|)
decl_stmt|;
DECL|field|SHA512_KEY
specifier|private
specifier|static
specifier|final
name|SecretKey
name|SHA512_KEY
init|=
operator|new
name|SecretKeySpec
argument_list|(
literal|"secret key"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|"HmacSHA512"
argument_list|)
decl_stmt|;
comment|// From http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#Mac
DECL|field|ALGORITHMS
specifier|private
specifier|static
specifier|final
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|,
name|HashFunction
argument_list|>
name|ALGORITHMS
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|,
name|HashFunction
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"HmacMD5"
argument_list|,
name|MD5_KEY
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"HmacSHA1"
argument_list|,
name|SHA1_KEY
argument_list|,
name|Hashing
operator|.
name|hmacSha1
argument_list|(
name|SHA1_KEY
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"HmacSHA256"
argument_list|,
name|SHA256_KEY
argument_list|,
name|Hashing
operator|.
name|hmacSha256
argument_list|(
name|SHA256_KEY
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"HmacSHA512"
argument_list|,
name|SHA512_KEY
argument_list|,
name|Hashing
operator|.
name|hmacSha512
argument_list|(
name|SHA512_KEY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|setDefault
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"HmacMD5"
argument_list|)
operator|.
name|setDefault
argument_list|(
name|Key
operator|.
name|class
argument_list|,
name|MD5_KEY
argument_list|)
decl_stmt|;
name|tester
operator|.
name|testAllPublicConstructors
argument_list|(
name|MacHashFunction
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
operator|new
name|MacHashFunction
argument_list|(
literal|"HmacMD5"
argument_list|,
name|MD5_KEY
argument_list|,
literal|"toString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashing ()
specifier|public
name|void
name|testHashing
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|stringToTest
range|:
name|INPUTS
control|)
block|{
for|for
control|(
name|Table
operator|.
name|Cell
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|,
name|HashFunction
argument_list|>
name|cell
range|:
name|ALGORITHMS
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|String
name|algorithm
init|=
name|cell
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|SecretKey
name|key
init|=
name|cell
operator|.
name|getColumnKey
argument_list|()
decl_stmt|;
name|HashFunction
name|hashFunc
init|=
name|cell
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertMacHashing
argument_list|(
name|HashTestUtils
operator|.
name|ascii
argument_list|(
name|stringToTest
argument_list|)
argument_list|,
name|algorithm
argument_list|,
name|key
argument_list|,
name|hashFunc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|testNoProviders ()
specifier|public
name|void
name|testNoProviders
parameter_list|()
block|{
name|ProviderList
name|providers
init|=
name|Providers
operator|.
name|getProviderList
argument_list|()
decl_stmt|;
name|Providers
operator|.
name|setProviderList
argument_list|(
name|ProviderList
operator|.
name|newList
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ISE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
finally|finally
block|{
name|Providers
operator|.
name|setProviderList
argument_list|(
name|providers
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultipleUpdates ()
specifier|public
name|void
name|testMultipleUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacSHA1"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|SHA1_KEY
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
literal|"hello"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
literal|"world"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
argument_list|,
name|Hashing
operator|.
name|hmacSha1
argument_list|(
name|SHA1_KEY
argument_list|)
operator|.
name|newHasher
argument_list|()
operator|.
name|putString
argument_list|(
literal|"hello"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|putString
argument_list|(
literal|"world"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleUpdatesDoFinal ()
specifier|public
name|void
name|testMultipleUpdatesDoFinal
parameter_list|()
throws|throws
name|Exception
block|{
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacSHA1"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|SHA1_KEY
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
literal|"hello"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
literal|"world"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|(
literal|"!!!"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Hashing
operator|.
name|hmacSha1
argument_list|(
name|SHA1_KEY
argument_list|)
operator|.
name|newHasher
argument_list|()
operator|.
name|putString
argument_list|(
literal|"hello"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|putString
argument_list|(
literal|"world"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|putString
argument_list|(
literal|"!!!"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|testCustomKey ()
specifier|public
name|void
name|testCustomKey
parameter_list|()
throws|throws
name|Exception
block|{
name|SecretKey
name|customKey
init|=
operator|new
name|SecretKey
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
literal|"HmacMD5"
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEncoded
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|8
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
literal|"RAW"
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ad262969c53bc16032f160081c4a07a0"
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|customKey
argument_list|)
operator|.
name|hashString
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|testBadKey_emptyKey ()
specifier|public
name|void
name|testBadKey_emptyKey
parameter_list|()
throws|throws
name|Exception
block|{
name|SecretKey
name|badKey
init|=
operator|new
name|SecretKey
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
literal|"HmacMD5"
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEncoded
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
literal|"RAW"
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|badKey
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEmptyInputs ()
specifier|public
name|void
name|testEmptyInputs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|knownOutput
init|=
literal|"8cbf764cbe2e4623d99a41354adfd390"
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacMD5"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|MD5_KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
operator|.
name|newHasher
argument_list|()
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyInputs_mixedAlgorithms ()
specifier|public
name|void
name|testEmptyInputs_mixedAlgorithms
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|knownOutput
init|=
literal|"8cbf764cbe2e4623d99a41354adfd390"
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacMD5"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|SHA1_KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|SHA1_KEY
argument_list|)
operator|.
name|newHasher
argument_list|()
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKnownInputs ()
specifier|public
name|void
name|testKnownInputs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|knownOutput
init|=
literal|"9753980fe94daa8ecaa82216519393a9"
decl_stmt|;
name|String
name|input
init|=
literal|"The quick brown fox jumps over the lazy dog"
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacMD5"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|MD5_KEY
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
operator|.
name|hashString
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKnownInputs_mixedAlgorithms ()
specifier|public
name|void
name|testKnownInputs_mixedAlgorithms
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|knownOutput
init|=
literal|"9753980fe94daa8ecaa82216519393a9"
decl_stmt|;
name|String
name|input
init|=
literal|"The quick brown fox jumps over the lazy dog"
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacMD5"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|SHA1_KEY
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|SHA1_KEY
argument_list|)
operator|.
name|hashString
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|knownOutput
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|SHA1_KEY
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAfterHash ()
specifier|public
name|void
name|testPutAfterHash
parameter_list|()
block|{
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"9753980fe94daa8ecaa82216519393a9"
argument_list|,
name|hasher
operator|.
name|putString
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hasher
operator|.
name|putInt
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckReturnValue"
argument_list|)
DECL|method|testHashTwice ()
specifier|public
name|void
name|testHashTwice
parameter_list|()
block|{
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"9753980fe94daa8ecaa82216519393a9"
argument_list|,
name|hasher
operator|.
name|putString
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hasher
operator|.
name|hash
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|byte
index|[]
name|keyData
init|=
literal|"secret key"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacMd5(Key[algorithm=HmacMD5, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|MD5_KEY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacMd5(Key[algorithm=HmacMD5, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|keyData
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacSha1(Key[algorithm=HmacSHA1, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacSha1
argument_list|(
name|SHA1_KEY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacSha1(Key[algorithm=HmacSHA1, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacSha1
argument_list|(
name|keyData
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacSha256(Key[algorithm=HmacSHA256, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacSha256
argument_list|(
name|SHA256_KEY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacSha256(Key[algorithm=HmacSHA256, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacSha256
argument_list|(
name|keyData
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacSha512(Key[algorithm=HmacSHA512, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacSha512
argument_list|(
name|SHA512_KEY
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.hmacSha512(Key[algorithm=HmacSHA512, format=RAW])"
argument_list|,
name|Hashing
operator|.
name|hmacSha512
argument_list|(
name|keyData
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMacHashing ( byte[] input, String algorithm, SecretKey key, HashFunction hashFunc)
specifier|private
specifier|static
name|void
name|assertMacHashing
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|SecretKey
name|key
parameter_list|,
name|HashFunction
name|hashFunc
parameter_list|)
throws|throws
name|Exception
block|{
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|()
argument_list|)
argument_list|,
name|hashFunc
operator|.
name|hashBytes
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashCode
operator|.
name|fromBytes
argument_list|(
name|mac
operator|.
name|doFinal
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|,
name|hashFunc
operator|.
name|hashBytes
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tests from RFC2022: https://tools.ietf.org/html/rfc2202
DECL|method|testRfc2202_hmacSha1_case1 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case1
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|20
argument_list|,
literal|0x0b
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Hi There"
decl_stmt|;
name|checkSha1
argument_list|(
literal|"b617318655057264e28bc0b6fb378c8ef146be00"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacSha1_case2 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case2
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
literal|"Jefe"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"what do ya want for nothing?"
decl_stmt|;
name|checkSha1
argument_list|(
literal|"effcdf6ae5eb2fa2d27416d5f184df9c259a7c79"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacSha1_case3 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case3
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|20
argument_list|,
literal|0xaa
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|fillByteArray
argument_list|(
literal|50
argument_list|,
literal|0xdd
argument_list|)
decl_stmt|;
name|checkSha1
argument_list|(
literal|"125d7342b9ac11cd91a39af48aa17b4f63f175d3"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacSha1_case4 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case4
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|base16
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|decode
argument_list|(
literal|"0102030405060708090a0b0c0d0e0f10111213141516171819"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|fillByteArray
argument_list|(
literal|50
argument_list|,
literal|0xcd
argument_list|)
decl_stmt|;
name|checkSha1
argument_list|(
literal|"4c9007f4026250c6bc8414f9bf50c86c2d7235da"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacSha1_case5 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case5
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|20
argument_list|,
literal|0x0c
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Test With Truncation"
decl_stmt|;
name|checkSha1
argument_list|(
literal|"4c1a03424b55e07fe7f27be1d58bb9324a9a5a04"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacSha1_case6 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case6
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|80
argument_list|,
literal|0xaa
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Test Using Larger Than Block-Size Key - Hash Key First"
decl_stmt|;
name|checkSha1
argument_list|(
literal|"aa4ae5e15272d00e95705637ce8a3b55ed402112"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacSha1_case7 ()
specifier|public
name|void
name|testRfc2202_hmacSha1_case7
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|80
argument_list|,
literal|0xaa
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
decl_stmt|;
name|checkSha1
argument_list|(
literal|"e8e99d0f45237d786d6bbaa7965c7808bbff1a91"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case1 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case1
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|16
argument_list|,
literal|0x0b
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Hi There"
decl_stmt|;
name|checkMd5
argument_list|(
literal|"9294727a3638bb1c13f48ef8158bfc9d"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case2 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case2
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
literal|"Jefe"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"what do ya want for nothing?"
decl_stmt|;
name|checkMd5
argument_list|(
literal|"750c783e6ab0b503eaa86e310a5db738"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case3 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case3
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|16
argument_list|,
literal|0xaa
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|fillByteArray
argument_list|(
literal|50
argument_list|,
literal|0xdd
argument_list|)
decl_stmt|;
name|checkMd5
argument_list|(
literal|"56be34521d144c88dbb8c733f0e8b3f6"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case4 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case4
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|base16
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|decode
argument_list|(
literal|"0102030405060708090a0b0c0d0e0f10111213141516171819"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|fillByteArray
argument_list|(
literal|50
argument_list|,
literal|0xcd
argument_list|)
decl_stmt|;
name|checkMd5
argument_list|(
literal|"697eaf0aca3a3aea3a75164746ffaa79"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case5 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case5
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|16
argument_list|,
literal|0x0c
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Test With Truncation"
decl_stmt|;
name|checkMd5
argument_list|(
literal|"56461ef2342edc00f9bab995690efd4c"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case6 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case6
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|80
argument_list|,
literal|0xaa
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Test Using Larger Than Block-Size Key - Hash Key First"
decl_stmt|;
name|checkMd5
argument_list|(
literal|"6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testRfc2202_hmacMd5_case7 ()
specifier|public
name|void
name|testRfc2202_hmacMd5_case7
parameter_list|()
block|{
name|byte
index|[]
name|key
init|=
name|fillByteArray
argument_list|(
literal|80
argument_list|,
literal|0xaa
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
decl_stmt|;
name|checkMd5
argument_list|(
literal|"6f630fad67cda0ee1fb1f562db3aa53e"
argument_list|,
name|key
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSha1 (String expected, byte[] key, String data)
specifier|private
specifier|static
name|void
name|checkSha1
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|checkSha1
argument_list|(
name|expected
argument_list|,
name|key
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSha1 (String expected, byte[] key, byte[] data)
specifier|private
specifier|static
name|void
name|checkSha1
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|checkHmac
argument_list|(
name|expected
argument_list|,
name|Hashing
operator|.
name|hmacSha1
argument_list|(
name|key
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMd5 (String expected, byte[] key, String data)
specifier|private
specifier|static
name|void
name|checkMd5
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|checkMd5
argument_list|(
name|expected
argument_list|,
name|key
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMd5 (String expected, byte[] key, byte[] data)
specifier|private
specifier|static
name|void
name|checkMd5
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|checkHmac
argument_list|(
name|expected
argument_list|,
name|Hashing
operator|.
name|hmacMd5
argument_list|(
name|key
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHmac (String expected, HashFunction hashFunc, byte[] data)
specifier|private
specifier|static
name|void
name|checkHmac
parameter_list|(
name|String
name|expected
parameter_list|,
name|HashFunction
name|hashFunc
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|HashCode
operator|.
name|fromString
argument_list|(
name|expected
argument_list|)
argument_list|,
name|hashFunc
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fillByteArray (int size, int toFillWith)
specifier|private
specifier|static
name|byte
index|[]
name|fillByteArray
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|toFillWith
parameter_list|)
block|{
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
name|toFillWith
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
block|}
end_class

end_unit

