begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|ISO_8859_1
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Unit test for FarmHashFingerprint64.  *  * @author Kyle Maddison  * @author Geoff Pike  */
end_comment

begin_class
DECL|class|FarmHashFingerprint64Test
specifier|public
class|class
name|FarmHashFingerprint64Test
extends|extends
name|TestCase
block|{
DECL|field|HASH_FN
specifier|private
specifier|static
specifier|final
name|HashFunction
name|HASH_FN
init|=
name|Hashing
operator|.
name|farmHashFingerprint64
argument_list|()
decl_stmt|;
comment|// If this test fails, all bets are off
DECL|method|testReallySimpleFingerprints ()
specifier|public
name|void
name|testReallySimpleFingerprints
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|8581389452482819506L
argument_list|,
name|fingerprint
argument_list|(
literal|"test"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 32 characters long
name|assertEquals
argument_list|(
operator|-
literal|4196240717365766262L
argument_list|,
name|fingerprint
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
literal|"test"
argument_list|,
literal|8
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 256 characters long
name|assertEquals
argument_list|(
literal|3500507768004279527L
argument_list|,
name|fingerprint
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
literal|"test"
argument_list|,
literal|64
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringsConsistency ()
specifier|public
name|void
name|testStringsConsistency
parameter_list|()
block|{
for|for
control|(
name|String
name|s
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|"some"
argument_list|,
literal|"test"
argument_list|,
literal|"strings"
argument_list|,
literal|"to"
argument_list|,
literal|"try"
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|HASH_FN
operator|.
name|newHasher
argument_list|()
operator|.
name|putUnencodedChars
argument_list|(
name|s
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|,
name|HASH_FN
operator|.
name|hashUnencodedChars
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUtf8 ()
specifier|public
name|void
name|testUtf8
parameter_list|()
block|{
name|char
index|[]
name|charsA
init|=
operator|new
name|char
index|[
literal|128
index|]
decl_stmt|;
name|char
index|[]
name|charsB
init|=
operator|new
name|char
index|[
literal|128
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charsA
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|100
condition|)
block|{
name|charsA
index|[
name|i
index|]
operator|=
literal|'a'
expr_stmt|;
name|charsB
index|[
name|i
index|]
operator|=
literal|'a'
expr_stmt|;
block|}
else|else
block|{
comment|// Both two-byte characters, but must be different
name|charsA
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|0x0180
operator|+
name|i
argument_list|)
expr_stmt|;
name|charsB
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|0x0280
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|stringA
init|=
operator|new
name|String
argument_list|(
name|charsA
argument_list|)
decl_stmt|;
name|String
name|stringB
init|=
operator|new
name|String
argument_list|(
name|charsB
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stringA
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|stringB
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|HASH_FN
operator|.
name|hashUnencodedChars
argument_list|(
name|stringA
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|HASH_FN
operator|.
name|hashUnencodedChars
argument_list|(
name|stringB
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fingerprint
argument_list|(
name|stringA
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|fingerprint
argument_list|(
name|stringB
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ISO 8859-1 only has 0-255 (ubyte) representation so throws away UTF-8 characters
comment|// greater than 127 (ie with their top bit set).
comment|// Don't attempt to do this in real code.
name|assertEquals
argument_list|(
name|fingerprint
argument_list|(
name|stringA
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
argument_list|)
argument_list|,
name|fingerprint
argument_list|(
name|stringB
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutNonChars ()
specifier|public
name|void
name|testPutNonChars
parameter_list|()
block|{
name|Hasher
name|hasher
init|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
decl_stmt|;
comment|// Expected data is 0x0100010100000000
name|hasher
operator|.
name|putBoolean
argument_list|(
literal|true
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|true
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|false
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|true
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|false
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|false
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|false
argument_list|)
operator|.
name|putBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|long
name|hashCode
init|=
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
decl_stmt|;
name|hasher
operator|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
expr_stmt|;
name|hasher
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x01
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x01
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x01
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashCode
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|hasher
operator|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
expr_stmt|;
name|hasher
operator|.
name|putChar
argument_list|(
operator|(
name|char
operator|)
literal|0x0101
argument_list|)
operator|.
name|putChar
argument_list|(
operator|(
name|char
operator|)
literal|0x0100
argument_list|)
operator|.
name|putChar
argument_list|(
operator|(
name|char
operator|)
literal|0x0000
argument_list|)
operator|.
name|putChar
argument_list|(
operator|(
name|char
operator|)
literal|0x0000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashCode
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|hasher
operator|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
expr_stmt|;
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x01
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashCode
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|hasher
operator|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
expr_stmt|;
name|hasher
operator|.
name|putLong
argument_list|(
literal|0x0000000001000101L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashCode
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|hasher
operator|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
expr_stmt|;
name|hasher
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0101
argument_list|)
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0100
argument_list|)
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0000
argument_list|)
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashCode
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashFloatIsStable ()
specifier|public
name|void
name|testHashFloatIsStable
parameter_list|()
block|{
comment|// Just a spot check.  Better than nothing.
name|Hasher
name|hasher
init|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putFloat
argument_list|(
literal|0x01000101f
argument_list|)
operator|.
name|putFloat
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x49f9d18ee8ae1b28L
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|hasher
operator|=
name|HASH_FN
operator|.
name|newHasher
argument_list|()
expr_stmt|;
name|hasher
operator|.
name|putDouble
argument_list|(
literal|0x0000000001000101d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x388ee898bad75cbfL
argument_list|,
name|hasher
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Convenience method to compute a fingerprint on a full bytes array. */
DECL|method|fingerprint (byte[] bytes)
specifier|private
specifier|static
name|long
name|fingerprint
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|fingerprint
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Convenience method to compute a fingerprint on a subset of a byte array. */
DECL|method|fingerprint (byte[] bytes, int length)
specifier|private
specifier|static
name|long
name|fingerprint
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|HASH_FN
operator|.
name|hashBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
comment|/**    * Tests that the Java port of FarmHashFingerprint64 provides the same results on buffers up to    * 800 bytes long as the C++ reference implementation.    */
DECL|method|testMultipleLengths ()
specifier|public
name|void
name|testMultipleLengths
parameter_list|()
block|{
name|int
name|iterations
init|=
literal|800
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|iterations
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|bufLen
init|=
literal|0
decl_stmt|;
name|long
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|h
operator|^=
name|fingerprint
argument_list|(
name|buf
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|h
operator|=
name|remix
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|buf
index|[
name|bufLen
operator|++
index|]
operator|=
name|getChar
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|^=
name|fingerprint
argument_list|(
name|buf
argument_list|,
name|i
operator|*
name|i
operator|%
name|bufLen
argument_list|)
expr_stmt|;
name|h
operator|=
name|remix
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|buf
index|[
name|bufLen
operator|++
index|]
operator|=
name|getChar
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|^=
name|fingerprint
argument_list|(
name|buf
argument_list|,
name|i
operator|*
name|i
operator|*
name|i
operator|%
name|bufLen
argument_list|)
expr_stmt|;
name|h
operator|=
name|remix
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|buf
index|[
name|bufLen
operator|++
index|]
operator|=
name|getChar
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|h
operator|^=
name|fingerprint
argument_list|(
name|buf
argument_list|,
name|bufLen
argument_list|)
expr_stmt|;
name|h
operator|=
name|remix
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|buf
index|[
name|bufLen
operator|++
index|]
operator|=
name|getChar
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|int
name|x0
init|=
name|buf
index|[
name|bufLen
operator|-
literal|1
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|x1
init|=
name|buf
index|[
name|bufLen
operator|-
literal|2
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|x2
init|=
name|buf
index|[
name|bufLen
operator|-
literal|3
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|x3
init|=
name|buf
index|[
name|bufLen
operator|/
literal|2
index|]
operator|&
literal|0xff
decl_stmt|;
name|buf
index|[
operator|(
operator|(
name|x0
operator|<<
literal|16
operator|)
operator|+
operator|(
name|x1
operator|<<
literal|8
operator|)
operator|+
name|x2
operator|)
operator|%
name|bufLen
index|]
operator|^=
name|x3
expr_stmt|;
name|buf
index|[
operator|(
operator|(
name|x1
operator|<<
literal|16
operator|)
operator|+
operator|(
name|x2
operator|<<
literal|8
operator|)
operator|+
name|x3
operator|)
operator|%
name|bufLen
index|]
operator|^=
name|i
operator|%
literal|256
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0x7a1d67c50ec7e167L
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
DECL|method|remix (long h)
specifier|private
specifier|static
name|long
name|remix
parameter_list|(
name|long
name|h
parameter_list|)
block|{
name|h
operator|^=
name|h
operator|>>>
literal|41
expr_stmt|;
name|h
operator|*=
literal|949921979
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|method|getChar (long h)
specifier|private
specifier|static
name|byte
name|getChar
parameter_list|(
name|long
name|h
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
literal|'a'
operator|+
operator|(
operator|(
name|h
operator|&
literal|0xfffff
operator|)
operator|%
literal|26
operator|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

