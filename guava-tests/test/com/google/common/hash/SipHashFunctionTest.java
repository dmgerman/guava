begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link SipHashFunction}.  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|SipHashFunctionTest
specifier|public
class|class
name|SipHashFunctionTest
extends|extends
name|TestCase
block|{
comment|// From https://131002.net/siphash/siphash24.c
comment|// k = 00 01 02 ...
DECL|field|K0
specifier|private
specifier|static
specifier|final
name|long
name|K0
init|=
literal|0x0706050403020100L
decl_stmt|;
DECL|field|K1
specifier|private
specifier|static
specifier|final
name|long
name|K1
init|=
literal|0x0f0e0d0c0b0a0908L
decl_stmt|;
DECL|field|SIP_WITH_KEY
specifier|private
specifier|static
specifier|final
name|HashFunction
name|SIP_WITH_KEY
init|=
name|Hashing
operator|.
name|sipHash24
argument_list|(
name|K0
argument_list|,
name|K1
argument_list|)
decl_stmt|;
DECL|field|SIP_WITHOUT_KEY
specifier|private
specifier|static
specifier|final
name|HashFunction
name|SIP_WITHOUT_KEY
init|=
name|Hashing
operator|.
name|sipHash24
argument_list|()
decl_stmt|;
comment|// These constants were originally ported from https://www.131002.net/siphash/siphash24.c. See:
comment|// https://github.com/nahi/siphash-java-inline/blob/master/src/test/java/org/jruby/util/SipHashInlineTest.java
DECL|field|EXPECTED
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|EXPECTED
init|=
operator|new
name|long
index|[]
block|{
literal|0x726fdb47dd0e0e31L
block|,
literal|0x74f839c593dc67fdL
block|,
literal|0x0d6c8009d9a94f5aL
block|,
literal|0x85676696d7fb7e2dL
block|,
literal|0xcf2794e0277187b7L
block|,
literal|0x18765564cd99a68dL
block|,
literal|0xcbc9466e58fee3ceL
block|,
literal|0xab0200f58b01d137L
block|,
literal|0x93f5f5799a932462L
block|,
literal|0x9e0082df0ba9e4b0L
block|,
literal|0x7a5dbbc594ddb9f3L
block|,
literal|0xf4b32f46226bada7L
block|,
literal|0x751e8fbc860ee5fbL
block|,
literal|0x14ea5627c0843d90L
block|,
literal|0xf723ca908e7af2eeL
block|,
literal|0xa129ca6149be45e5L
block|,
literal|0x3f2acc7f57c29bdbL
block|,
literal|0x699ae9f52cbe4794L
block|,
literal|0x4bc1b3f0968dd39cL
block|,
literal|0xbb6dc91da77961bdL
block|,
literal|0xbed65cf21aa2ee98L
block|,
literal|0xd0f2cbb02e3b67c7L
block|,
literal|0x93536795e3a33e88L
block|,
literal|0xa80c038ccd5ccec8L
block|,
literal|0xb8ad50c6f649af94L
block|,
literal|0xbce192de8a85b8eaL
block|,
literal|0x17d835b85bbb15f3L
block|,
literal|0x2f2e6163076bcfadL
block|,
literal|0xde4daaaca71dc9a5L
block|,
literal|0xa6a2506687956571L
block|,
literal|0xad87a3535c49ef28L
block|,
literal|0x32d892fad841c342L
block|,
literal|0x7127512f72f27cceL
block|,
literal|0xa7f32346f95978e3L
block|,
literal|0x12e0b01abb051238L
block|,
literal|0x15e034d40fa197aeL
block|,
literal|0x314dffbe0815a3b4L
block|,
literal|0x027990f029623981L
block|,
literal|0xcadcd4e59ef40c4dL
block|,
literal|0x9abfd8766a33735cL
block|,
literal|0x0e3ea96b5304a7d0L
block|,
literal|0xad0c42d6fc585992L
block|,
literal|0x187306c89bc215a9L
block|,
literal|0xd4a60abcf3792b95L
block|,
literal|0xf935451de4f21df2L
block|,
literal|0xa9538f0419755787L
block|,
literal|0xdb9acddff56ca510L
block|,
literal|0xd06c98cd5c0975ebL
block|,
literal|0xe612a3cb9ecba951L
block|,
literal|0xc766e62cfcadaf96L
block|,
literal|0xee64435a9752fe72L
block|,
literal|0xa192d576b245165aL
block|,
literal|0x0a8787bf8ecb74b2L
block|,
literal|0x81b3e73d20b49b6fL
block|,
literal|0x7fa8220ba3b2eceaL
block|,
literal|0x245731c13ca42499L
block|,
literal|0xb78dbfaf3a8d83bdL
block|,
literal|0xea1ad565322a1a0bL
block|,
literal|0x60e61c23a3795013L
block|,
literal|0x6606d7e446282b93L
block|,
literal|0x6ca4ecb15c5f91e1L
block|,
literal|0x9f626da15c9625f3L
block|,
literal|0xe51b38608ef25f57L
block|,
literal|0x958a324ceb064572L
block|}
decl_stmt|;
DECL|method|testVectors ()
specifier|public
name|void
name|testVectors
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|EXPECTED
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|msg
init|=
operator|new
name|byte
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
block|{
name|msg
index|[
name|j
index|]
operator|=
operator|(
name|byte
operator|)
name|j
expr_stmt|;
block|}
name|assertSip
argument_list|(
name|msg
argument_list|,
name|EXPECTED
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This test data comes from "SipHash: a fast short-input PRF", "Appendix A: Test values".
comment|// It can be downloaded here: https://131002.net/siphash/siphash.pdf
DECL|method|test15ByteStringFromSipHashPaper ()
specifier|public
name|void
name|test15ByteStringFromSipHashPaper
parameter_list|()
block|{
name|byte
index|[]
name|message
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x0a
block|,
literal|0x0b
block|,
literal|0x0c
block|,
literal|0x0d
block|,
literal|0x0e
block|}
decl_stmt|;
name|long
name|k0
init|=
literal|0x0706050403020100L
decl_stmt|;
name|long
name|k1
init|=
literal|0x0f0e0d0c0b0a0908L
decl_stmt|;
name|assertEquals
argument_list|(
literal|0xa129ca6149be45e5L
argument_list|,
name|Hashing
operator|.
name|sipHash24
argument_list|(
name|k0
argument_list|,
name|k1
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|message
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// From https://github.com/BrandonHaynes/siphash-csharp/blob/master/tests/Tests.cs
DECL|method|testKnownValues ()
specifier|public
name|void
name|testKnownValues
parameter_list|()
block|{
name|assertSip
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0x726fdb47dd0e0e31L
argument_list|)
expr_stmt|;
name|assertSip
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x61
block|}
argument_list|,
literal|0x2ba3e8e9a71148caL
argument_list|)
expr_stmt|;
name|assertSip
argument_list|(
operator|new
name|byte
index|[
literal|1000000
index|]
argument_list|,
literal|0x28205108397aa742L
argument_list|)
expr_stmt|;
name|assertSip
argument_list|(
literal|"12345678"
argument_list|,
literal|0x02130609caea37ebL
argument_list|)
expr_stmt|;
name|assertSip
argument_list|(
literal|"abcdef"
argument_list|,
literal|0x2a6e77e733c7c05dL
argument_list|)
expr_stmt|;
name|assertSip
argument_list|(
literal|"SipHash"
argument_list|,
literal|0x8325093242a96f60L
argument_list|)
expr_stmt|;
block|}
comment|// Test for common pitfall regarding sign extension.
comment|// For example: (long) data[i++] | (long) data[i++]<< 8 | ...
comment|// If data[i] == (byte) 0x80, the first cast will sign-extend it to 0xffffffffffffff80,
comment|// masking the remaining seven bytes.
comment|// To test this, we give an input where bit 7 is not cleared. For example:
comment|// (1) 00 01 02 03 04 05 06 07 80
comment|// (2) 00 01 02 03 04 05 06 07 81
comment|// (3) 00 01 02 03 04 05 06 07 ff (or anything in between)
comment|// A fault implementation will generate collisions for these inputs.
DECL|method|testCollisionsDueToIncorrectSignExtension ()
specifier|public
name|void
name|testCollisionsDueToIncorrectSignExtension
parameter_list|()
block|{
name|byte
index|[]
name|col1
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0x80
block|}
decl_stmt|;
name|byte
index|[]
name|col2
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0x81
block|}
decl_stmt|;
name|byte
index|[]
name|col3
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0xff
block|}
decl_stmt|;
name|ImmutableSet
argument_list|<
name|HashCode
argument_list|>
name|hashCodes
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|SIP_WITH_KEY
operator|.
name|hashBytes
argument_list|(
name|col1
argument_list|)
argument_list|,
name|SIP_WITH_KEY
operator|.
name|hashBytes
argument_list|(
name|col2
argument_list|)
argument_list|,
name|SIP_WITH_KEY
operator|.
name|hashBytes
argument_list|(
name|col3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hashCodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Hashing.sipHash24("
operator|+
name|K0
operator|+
literal|", "
operator|+
name|K1
operator|+
literal|")"
argument_list|,
name|SIP_WITH_KEY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.sipHash24("
operator|+
name|K0
operator|+
literal|", "
operator|+
name|K1
operator|+
literal|")"
argument_list|,
name|SIP_WITHOUT_KEY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hashing.sipHash24(20, 13)"
argument_list|,
name|Hashing
operator|.
name|sipHash24
argument_list|(
literal|20
argument_list|,
literal|13
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSip (String input, long expected)
specifier|private
specifier|static
name|void
name|assertSip
parameter_list|(
name|String
name|input
parameter_list|,
name|long
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITH_KEY
operator|.
name|hashString
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITH_KEY
operator|.
name|newHasher
argument_list|()
operator|.
name|putString
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITHOUT_KEY
operator|.
name|hashString
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITHOUT_KEY
operator|.
name|newHasher
argument_list|()
operator|.
name|putString
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSip (byte[] input, long expected)
specifier|private
specifier|static
name|void
name|assertSip
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|long
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITH_KEY
operator|.
name|hashBytes
argument_list|(
name|input
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITH_KEY
operator|.
name|newHasher
argument_list|()
operator|.
name|putBytes
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITHOUT_KEY
operator|.
name|hashBytes
argument_list|(
name|input
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|SIP_WITHOUT_KEY
operator|.
name|newHasher
argument_list|()
operator|.
name|putBytes
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

