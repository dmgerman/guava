begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
operator|.
name|ChecksumType
operator|.
name|ADLER_32
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
operator|.
name|ChecksumType
operator|.
name|CRC_32
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * Tests for ChecksumHashFunction.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|ChecksumHashFunctionTest
specifier|public
class|class
name|ChecksumHashFunctionTest
extends|extends
name|TestCase
block|{
DECL|method|testCrc32_equalsChecksumValue ()
specifier|public
name|void
name|testCrc32_equalsChecksumValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertChecksum
argument_list|(
name|CRC_32
argument_list|,
literal|32
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertChecksum
argument_list|(
name|CRC_32
argument_list|,
literal|32
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|assertChecksum
argument_list|(
name|CRC_32
argument_list|,
literal|32
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdler32_equalsChecksumValue ()
specifier|public
name|void
name|testAdler32_equalsChecksumValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertChecksum
argument_list|(
name|ADLER_32
argument_list|,
literal|32
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertChecksum
argument_list|(
name|ADLER_32
argument_list|,
literal|32
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|assertChecksum
argument_list|(
name|ADLER_32
argument_list|,
literal|32
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCrc32_knownValues ()
specifier|public
name|void
name|testCrc32_knownValues
parameter_list|()
throws|throws
name|Exception
block|{
name|assertHash32
argument_list|(
literal|0x1C8600E3
argument_list|,
name|CRC_32
argument_list|,
literal|"hell"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x3610A686
argument_list|,
name|CRC_32
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0xED81F9F6
argument_list|,
name|CRC_32
argument_list|,
literal|"hello "
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x4850DDC2
argument_list|,
name|CRC_32
argument_list|,
literal|"hello w"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x7A2D6005
argument_list|,
name|CRC_32
argument_list|,
literal|"hello wo"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x1C192672
argument_list|,
name|CRC_32
argument_list|,
literal|"hello wor"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x414FA339
argument_list|,
name|CRC_32
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x4400B5BC
argument_list|,
name|CRC_32
argument_list|,
literal|"The quick brown fox jumps over the lazy cog"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdler32_knownValues ()
specifier|public
name|void
name|testAdler32_knownValues
parameter_list|()
throws|throws
name|Exception
block|{
name|assertHash32
argument_list|(
literal|0x041701A6
argument_list|,
name|ADLER_32
argument_list|,
literal|"hell"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x062C0215
argument_list|,
name|ADLER_32
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x08610235
argument_list|,
name|ADLER_32
argument_list|,
literal|"hello "
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x0B0D02AC
argument_list|,
name|ADLER_32
argument_list|,
literal|"hello w"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x0E28031B
argument_list|,
name|ADLER_32
argument_list|,
literal|"hello wo"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x11B5038D
argument_list|,
name|ADLER_32
argument_list|,
literal|"hello wor"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x5BDC0FDA
argument_list|,
name|ADLER_32
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|assertHash32
argument_list|(
literal|0x5BD90FD9
argument_list|,
name|ADLER_32
argument_list|,
literal|"The quick brown fox jumps over the lazy cog"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChecksum (Supplier<Checksum> supplier, int bits, String input)
specifier|private
specifier|static
name|void
name|assertChecksum
parameter_list|(
name|Supplier
argument_list|<
name|Checksum
argument_list|>
name|supplier
parameter_list|,
name|int
name|bits
parameter_list|,
name|String
name|input
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|HashTestUtils
operator|.
name|ascii
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Checksum
name|checksum
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|value
init|=
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|HashCode
name|hashCode
init|=
operator|new
name|ChecksumHashFunction
argument_list|(
name|supplier
argument_list|,
name|bits
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|hashCode
operator|.
name|padToLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHash32 (int expected, Supplier<Checksum> supplier, String input)
specifier|private
specifier|static
name|void
name|assertHash32
parameter_list|(
name|int
name|expected
parameter_list|,
name|Supplier
argument_list|<
name|Checksum
argument_list|>
name|supplier
parameter_list|,
name|String
name|input
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|HashTestUtils
operator|.
name|ascii
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|ChecksumHashFunction
argument_list|(
name|supplier
argument_list|,
literal|32
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|bytes
argument_list|)
operator|.
name|asInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

