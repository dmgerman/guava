begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_16LE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Tests for AbstractByteHasher.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|AbstractByteHasherTest
specifier|public
class|class
name|AbstractByteHasherTest
extends|extends
name|TestCase
block|{
DECL|method|testBytes ()
specifier|public
name|void
name|testBytes
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
comment|// byte order insignificant here
name|byte
index|[]
name|expected
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|hasher
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|putByte
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|8
block|}
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|testShort ()
specifier|public
name|void
name|testShort
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0201
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testInt ()
specifier|public
name|void
name|testInt
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putInt
argument_list|(
literal|0x04030201
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testLong ()
specifier|public
name|void
name|testLong
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putLong
argument_list|(
literal|0x0807060504030201L
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testChar ()
specifier|public
name|void
name|testChar
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putChar
argument_list|(
operator|(
name|char
operator|)
literal|0x0201
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testString ()
specifier|public
name|void
name|testString
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|64
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_16LE
argument_list|)
decl_stmt|;
comment|// so all random strings are valid
name|assertEquals
argument_list|(
operator|new
name|TestHasher
argument_list|()
operator|.
name|putString
argument_list|(
name|s
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|,
operator|new
name|TestHasher
argument_list|()
operator|.
name|putBytes
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|UTF_16LE
argument_list|)
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TestHasher
argument_list|()
operator|.
name|putString
argument_list|(
name|s
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|,
operator|new
name|TestHasher
argument_list|()
operator|.
name|putString
argument_list|(
name|s
argument_list|,
name|UTF_16LE
argument_list|)
operator|.
name|hash
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFloat ()
specifier|public
name|void
name|testFloat
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putFloat
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x04030201
argument_list|)
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDouble ()
specifier|public
name|void
name|testDouble
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|putDouble
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0x0807060504030201L
argument_list|)
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|assertBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCorrectExceptions ()
specifier|public
name|void
name|testCorrectExceptions
parameter_list|()
block|{
name|TestHasher
name|hasher
init|=
operator|new
name|TestHasher
argument_list|()
decl_stmt|;
try|try
block|{
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|hasher
operator|.
name|putBytes
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
DECL|class|TestHasher
specifier|private
class|class
name|TestHasher
extends|extends
name|AbstractByteHasher
block|{
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|update (byte b)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (byte[] b, int off, int len)
specifier|protected
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|bytes ()
name|byte
index|[]
name|bytes
parameter_list|()
block|{
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|assertBytes (byte[] expected)
name|void
name|assertBytes
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hash ()
specifier|public
name|HashCode
name|hash
parameter_list|()
block|{
return|return
name|HashCode
operator|.
name|fromBytesNoCopy
argument_list|(
name|bytes
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

