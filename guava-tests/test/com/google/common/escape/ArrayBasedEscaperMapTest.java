begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.escape
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** @author David Beaumont */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|ArrayBasedEscaperMapTest
specifier|public
class|class
name|ArrayBasedEscaperMapTest
extends|extends
name|TestCase
block|{
DECL|method|testNullMap ()
specifier|public
name|void
name|testNullMap
parameter_list|()
block|{
try|try
block|{
name|ArrayBasedEscaperMap
operator|.
name|create
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception did not occur"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testEmptyMap ()
specifier|public
name|void
name|testEmptyMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
name|ArrayBasedEscaperMap
name|fem
init|=
name|ArrayBasedEscaperMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
comment|// Non-null array of zero length.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fem
operator|.
name|getReplacementArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapLength ()
specifier|public
name|void
name|testMapLength
parameter_list|()
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|'a'
argument_list|,
literal|"first"
argument_list|,
literal|'z'
argument_list|,
literal|"last"
argument_list|)
decl_stmt|;
name|ArrayBasedEscaperMap
name|fem
init|=
name|ArrayBasedEscaperMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
comment|// Array length is highest character value + 1
name|assertEquals
argument_list|(
literal|'z'
operator|+
literal|1
argument_list|,
name|fem
operator|.
name|getReplacementArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapping ()
specifier|public
name|void
name|testMapping
parameter_list|()
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|'\0'
argument_list|,
literal|"zero"
argument_list|,
literal|'a'
argument_list|,
literal|"first"
argument_list|,
literal|'b'
argument_list|,
literal|"second"
argument_list|,
literal|'z'
argument_list|,
literal|"last"
argument_list|,
literal|'\uFFFF'
argument_list|,
literal|"biggest"
argument_list|)
decl_stmt|;
name|ArrayBasedEscaperMap
name|fem
init|=
name|ArrayBasedEscaperMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|char
index|[]
index|[]
name|replacementArray
init|=
name|fem
operator|.
name|getReplacementArray
argument_list|()
decl_stmt|;
comment|// Array length is highest character value + 1
name|assertEquals
argument_list|(
literal|65536
argument_list|,
name|replacementArray
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// The final element should always be non null.
name|assertNotNull
argument_list|(
name|replacementArray
index|[
name|replacementArray
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Exhaustively check all mappings (an int index avoids wrapping).
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|replacementArray
operator|.
name|length
condition|;
operator|++
name|n
control|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|replacementArray
index|[
name|n
index|]
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|replacementArray
index|[
name|n
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

