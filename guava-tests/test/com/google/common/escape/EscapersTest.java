begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.escape
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|testing
operator|.
name|EscaperAsserts
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author David Beaumont  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|EscapersTest
specifier|public
class|class
name|EscapersTest
extends|extends
name|TestCase
block|{
DECL|method|testNullEscaper ()
specifier|public
name|void
name|testNullEscaper
parameter_list|()
throws|throws
name|IOException
block|{
name|Escaper
name|escaper
init|=
name|Escapers
operator|.
name|nullEscaper
argument_list|()
decl_stmt|;
name|EscaperAsserts
operator|.
name|assertBasic
argument_list|(
name|escaper
argument_list|)
expr_stmt|;
name|String
name|s
init|=
literal|"\0\n\t\\az09~\uD800\uDC00\uFFFF"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"null escaper should have no effect"
argument_list|,
name|s
argument_list|,
name|escaper
operator|.
name|escape
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderInitialStateNoReplacement ()
specifier|public
name|void
name|testBuilderInitialStateNoReplacement
parameter_list|()
block|{
comment|// Unsafe characters aren't modified by default (unsafeReplacement == null).
name|Escaper
name|escaper
init|=
name|Escapers
operator|.
name|builder
argument_list|()
operator|.
name|setSafeRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The Quick Brown Fox"
argument_list|,
name|escaper
operator|.
name|escape
argument_list|(
literal|"The Quick Brown Fox"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderInitialStateNoneUnsafe ()
specifier|public
name|void
name|testBuilderInitialStateNoneUnsafe
parameter_list|()
block|{
comment|// No characters are unsafe by default (safeMin == 0, safeMax == 0xFFFF).
name|Escaper
name|escaper
init|=
name|Escapers
operator|.
name|builder
argument_list|()
operator|.
name|setUnsafeReplacement
argument_list|(
literal|"X"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\0\uFFFF"
argument_list|,
name|escaper
operator|.
name|escape
argument_list|(
literal|"\0\uFFFF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderRetainsState ()
specifier|public
name|void
name|testBuilderRetainsState
parameter_list|()
block|{
comment|// Setting a safe range and unsafe replacement works as expected.
name|Escapers
operator|.
name|Builder
name|builder
init|=
name|Escapers
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSafeRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUnsafeReplacement
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XheXXuickXXrownXXoxX"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|escape
argument_list|(
literal|"The Quick Brown Fox!"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Explicit replacements take priority over unsafe characters.
name|builder
operator|.
name|addEscape
argument_list|(
literal|' '
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addEscape
argument_list|(
literal|'!'
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Xhe_Xuick_Xrown_Xox_"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|escape
argument_list|(
literal|"The Quick Brown Fox!"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Explicit replacements take priority over safe characters.
name|builder
operator|.
name|setSafeRange
argument_list|(
literal|' '
argument_list|,
literal|'~'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The_Quick_Brown_Fox_"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|escape
argument_list|(
literal|"The Quick Brown Fox!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderCreatesIndependentEscapers ()
specifier|public
name|void
name|testBuilderCreatesIndependentEscapers
parameter_list|()
block|{
comment|// Setup a simple builder and create the first escaper.
name|Escapers
operator|.
name|Builder
name|builder
init|=
name|Escapers
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSafeRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUnsafeReplacement
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addEscape
argument_list|(
literal|' '
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|Escaper
name|first
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Modify one of the existing mappings before creating a new escaper.
name|builder
operator|.
name|addEscape
argument_list|(
literal|' '
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addEscape
argument_list|(
literal|'!'
argument_list|,
literal|"$"
argument_list|)
expr_stmt|;
name|Escaper
name|second
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// This should have no effect on existing escapers.
name|builder
operator|.
name|addEscape
argument_list|(
literal|' '
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
comment|// Test both escapers after modifying the builder.
name|assertEquals
argument_list|(
literal|"Xhe_Xuick_Xrown_XoxX"
argument_list|,
name|first
operator|.
name|escape
argument_list|(
literal|"The Quick Brown Fox!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Xhe-Xuick-Xrown-Xox$"
argument_list|,
name|second
operator|.
name|escape
argument_list|(
literal|"The Quick Brown Fox!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsUnicodeEscaper ()
specifier|public
name|void
name|testAsUnicodeEscaper
parameter_list|()
throws|throws
name|IOException
block|{
name|CharEscaper
name|charEscaper
init|=
name|createSimpleCharEscaper
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|Character
argument_list|,
name|char
index|[]
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|"<hello>"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|'\uD800'
argument_list|,
literal|"<hi>"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|'\uDC00'
argument_list|,
literal|"<lo>"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|UnicodeEscaper
name|unicodeEscaper
init|=
name|Escapers
operator|.
name|asUnicodeEscaper
argument_list|(
name|charEscaper
argument_list|)
decl_stmt|;
name|EscaperAsserts
operator|.
name|assertBasic
argument_list|(
name|unicodeEscaper
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello><hi><lo>"
argument_list|,
name|charEscaper
operator|.
name|escape
argument_list|(
literal|"x\uD800\uDC00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello><hi><lo>"
argument_list|,
name|unicodeEscaper
operator|.
name|escape
argument_list|(
literal|"x\uD800\uDC00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that wrapped escapers acquire good Unicode semantics.
name|assertEquals
argument_list|(
literal|"<hi><hello><lo>"
argument_list|,
name|charEscaper
operator|.
name|escape
argument_list|(
literal|"\uD800x\uDC00"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|unicodeEscaper
operator|.
name|escape
argument_list|(
literal|"\uD800x\uDC00"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed for bad Unicode input"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// pass
block|}
name|assertEquals
argument_list|(
literal|"<lo><hi>"
argument_list|,
name|charEscaper
operator|.
name|escape
argument_list|(
literal|"\uDC00\uD800"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|unicodeEscaper
operator|.
name|escape
argument_list|(
literal|"\uDC00\uD800"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed for bad Unicode input"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
comment|// A trival non-optimized escaper for testing.
DECL|method|createSimpleCharEscaper ( final ImmutableMap<Character, char[]> replacementMap)
specifier|static
name|CharEscaper
name|createSimpleCharEscaper
parameter_list|(
specifier|final
name|ImmutableMap
argument_list|<
name|Character
argument_list|,
name|char
index|[]
argument_list|>
name|replacementMap
parameter_list|)
block|{
return|return
operator|new
name|CharEscaper
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|char
index|[]
name|escape
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|replacementMap
operator|.
name|get
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// A trival non-optimized escaper for testing.
DECL|method|createSimpleUnicodeEscaper ( final ImmutableMap<Integer, char[]> replacementMap)
specifier|static
name|UnicodeEscaper
name|createSimpleUnicodeEscaper
parameter_list|(
specifier|final
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|char
index|[]
argument_list|>
name|replacementMap
parameter_list|)
block|{
return|return
operator|new
name|UnicodeEscaper
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|char
index|[]
name|escape
parameter_list|(
name|int
name|cp
parameter_list|)
block|{
return|return
name|replacementMap
operator|.
name|get
argument_list|(
name|cp
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

