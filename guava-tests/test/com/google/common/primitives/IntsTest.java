begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Ints}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"cast"
argument_list|)
comment|// redundant casts are intentional and harmless
DECL|class|IntsTest
specifier|public
class|class
name|IntsTest
extends|extends
name|TestCase
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|EMPTY
init|=
block|{}
decl_stmt|;
DECL|field|ARRAY1
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ARRAY1
init|=
block|{
operator|(
name|int
operator|)
literal|1
block|}
decl_stmt|;
DECL|field|ARRAY234
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ARRAY234
init|=
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
decl_stmt|;
DECL|field|LEAST
specifier|private
specifier|static
specifier|final
name|int
name|LEAST
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|GREATEST
specifier|private
specifier|static
specifier|final
name|int
name|GREATEST
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|VALUES
init|=
block|{
name|LEAST
block|,
operator|(
name|int
operator|)
operator|-
literal|1
block|,
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|1
block|,
name|GREATEST
block|}
decl_stmt|;
DECL|method|testHashCode ()
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
for|for
control|(
name|int
name|value
range|:
name|VALUES
control|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|Ints
operator|.
name|hashCode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckedCast ()
specifier|public
name|void
name|testCheckedCast
parameter_list|()
block|{
for|for
control|(
name|int
name|value
range|:
name|VALUES
control|)
block|{
name|assertEquals
argument_list|(
name|value
argument_list|,
name|Ints
operator|.
name|checkedCast
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertCastFails
argument_list|(
name|GREATEST
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|assertCastFails
argument_list|(
name|LEAST
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|assertCastFails
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertCastFails
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testSaturatedCast ()
specifier|public
name|void
name|testSaturatedCast
parameter_list|()
block|{
for|for
control|(
name|int
name|value
range|:
name|VALUES
control|)
block|{
name|assertEquals
argument_list|(
name|value
argument_list|,
name|Ints
operator|.
name|saturatedCast
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|GREATEST
operator|+
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|LEAST
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCastFails (long value)
specifier|private
specifier|static
name|void
name|assertCastFails
parameter_list|(
name|long
name|value
parameter_list|)
block|{
try|try
block|{
name|int
name|unused
init|=
name|Ints
operator|.
name|checkedCast
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Cast to int should have failed: "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|value
operator|+
literal|" not found in exception text: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCompare ()
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|VALUES
control|)
block|{
for|for
control|(
name|int
name|y
range|:
name|VALUES
control|)
block|{
comment|// note: spec requires only that the sign is the same
name|assertEquals
argument_list|(
name|x
operator|+
literal|", "
operator|+
name|y
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|compareTo
argument_list|(
name|y
argument_list|)
argument_list|,
name|Ints
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
name|EMPTY
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
name|ARRAY1
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
operator|-
literal|1
block|}
argument_list|,
operator|(
name|int
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Ints
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf ()
specifier|public
name|void
name|testIndexOf
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|EMPTY
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY1
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
operator|-
literal|1
block|}
argument_list|,
operator|(
name|int
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|}
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_arrayTarget ()
specifier|public
name|void
name|testIndexOf_arrayTarget
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|EMPTY
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|EMPTY
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|indexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|4
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastIndexOf ()
specifier|public
name|void
name|testLastIndexOf
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
name|EMPTY
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY1
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
operator|-
literal|1
block|}
argument_list|,
operator|(
name|int
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|int
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Ints
operator|.
name|lastIndexOf
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|}
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMax_noArgs ()
specifier|public
name|void
name|testMax_noArgs
parameter_list|()
block|{
try|try
block|{
name|int
name|unused
init|=
name|Ints
operator|.
name|max
argument_list|()
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMax ()
specifier|public
name|void
name|testMax
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Ints
operator|.
name|max
argument_list|(
name|LEAST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Ints
operator|.
name|max
argument_list|(
name|GREATEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|9
argument_list|,
name|Ints
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
literal|8
argument_list|,
operator|(
name|int
operator|)
literal|6
argument_list|,
operator|(
name|int
operator|)
literal|7
argument_list|,
operator|(
name|int
operator|)
literal|5
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|,
operator|(
name|int
operator|)
literal|0
argument_list|,
operator|(
name|int
operator|)
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMin_noArgs ()
specifier|public
name|void
name|testMin_noArgs
parameter_list|()
block|{
try|try
block|{
name|int
name|unused
init|=
name|Ints
operator|.
name|min
argument_list|()
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMin ()
specifier|public
name|void
name|testMin
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Ints
operator|.
name|min
argument_list|(
name|LEAST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Ints
operator|.
name|min
argument_list|(
name|GREATEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
name|Ints
operator|.
name|min
argument_list|(
operator|(
name|int
operator|)
literal|8
argument_list|,
operator|(
name|int
operator|)
literal|6
argument_list|,
operator|(
name|int
operator|)
literal|7
argument_list|,
operator|(
name|int
operator|)
literal|5
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|,
operator|(
name|int
operator|)
literal|0
argument_list|,
operator|(
name|int
operator|)
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcat ()
specifier|public
name|void
name|testConcat
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Ints
operator|.
name|concat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|EMPTY
argument_list|,
name|EMPTY
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ARRAY1
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ARRAY1
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ARRAY1
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|EMPTY
argument_list|,
name|ARRAY1
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|1
block|}
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY1
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|,
operator|(
name|int
operator|)
literal|4
block|}
argument_list|,
name|Ints
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Ints.toByteArray"
argument_list|)
DECL|method|testToByteArray ()
specifier|public
name|void
name|testToByteArray
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|}
argument_list|,
name|Ints
operator|.
name|toByteArray
argument_list|(
literal|0x12131415
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|}
argument_list|,
name|Ints
operator|.
name|toByteArray
argument_list|(
literal|0xFFEEDDCC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Ints.fromByteArray"
argument_list|)
DECL|method|testFromByteArray ()
specifier|public
name|void
name|testFromByteArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0x12131415
argument_list|,
name|Ints
operator|.
name|fromByteArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x33
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xFFEEDDCC
argument_list|,
name|Ints
operator|.
name|fromByteArray
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Ints.fromByteArray"
argument_list|)
DECL|method|testFromByteArrayFails ()
specifier|public
name|void
name|testFromByteArrayFails
parameter_list|()
block|{
try|try
block|{
name|int
name|unused
init|=
name|Ints
operator|.
name|fromByteArray
argument_list|(
operator|new
name|byte
index|[
name|Ints
operator|.
name|BYTES
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Ints.fromBytes"
argument_list|)
DECL|method|testFromBytes ()
specifier|public
name|void
name|testFromBytes
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0x12131415
argument_list|,
name|Ints
operator|.
name|fromBytes
argument_list|(
operator|(
name|byte
operator|)
literal|0x12
argument_list|,
operator|(
name|byte
operator|)
literal|0x13
argument_list|,
operator|(
name|byte
operator|)
literal|0x14
argument_list|,
operator|(
name|byte
operator|)
literal|0x15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xFFEEDDCC
argument_list|,
name|Ints
operator|.
name|fromBytes
argument_list|(
operator|(
name|byte
operator|)
literal|0xFF
argument_list|,
operator|(
name|byte
operator|)
literal|0xEE
argument_list|,
operator|(
name|byte
operator|)
literal|0xDD
argument_list|,
operator|(
name|byte
operator|)
literal|0xCC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Ints.fromByteArray, Ints.toByteArray"
argument_list|)
DECL|method|testByteArrayRoundTrips ()
specifier|public
name|void
name|testByteArrayRoundTrips
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|Ints
operator|.
name|BYTES
index|]
decl_stmt|;
comment|// total overkill, but, it takes 0.1 sec so why not...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|num
init|=
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|num
argument_list|,
name|Ints
operator|.
name|fromByteArray
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|num
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|Ints
operator|.
name|toByteArray
argument_list|(
name|Ints
operator|.
name|fromByteArray
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEnsureCapacity ()
specifier|public
name|void
name|testEnsureCapacity
parameter_list|()
block|{
name|assertSame
argument_list|(
name|EMPTY
argument_list|,
name|Ints
operator|.
name|ensureCapacity
argument_list|(
name|EMPTY
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ARRAY1
argument_list|,
name|Ints
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ARRAY1
argument_list|,
name|Ints
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|0
block|}
argument_list|,
name|Ints
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureCapacity_fail ()
specifier|public
name|void
name|testEnsureCapacity_fail
parameter_list|()
block|{
try|try
block|{
name|int
index|[]
name|unused
init|=
name|Ints
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
comment|// notice that this should even fail when no growth was needed
name|int
index|[]
name|unused
init|=
name|Ints
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testJoin ()
specifier|public
name|void
name|testJoin
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Ints
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|Ints
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,2"
argument_list|,
name|Ints
operator|.
name|join
argument_list|(
literal|","
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|Ints
operator|.
name|join
argument_list|(
literal|""
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLexicographicalComparator ()
specifier|public
name|void
name|testLexicographicalComparator
parameter_list|()
block|{
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|ordered
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|,
operator|new
name|int
index|[]
block|{
name|LEAST
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|LEAST
block|,
name|LEAST
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|LEAST
block|,
operator|(
name|int
operator|)
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|1
block|,
name|LEAST
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|GREATEST
block|,
name|GREATEST
operator|-
operator|(
name|int
operator|)
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|GREATEST
block|,
name|GREATEST
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|GREATEST
block|,
name|GREATEST
block|,
name|GREATEST
block|}
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|int
index|[]
argument_list|>
name|comparator
init|=
name|Ints
operator|.
name|lexicographicalComparator
argument_list|()
decl_stmt|;
name|Helpers
operator|.
name|testComparator
argument_list|(
name|comparator
argument_list|,
name|ordered
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testLexicographicalComparatorSerializable ()
specifier|public
name|void
name|testLexicographicalComparatorSerializable
parameter_list|()
block|{
name|Comparator
argument_list|<
name|int
index|[]
argument_list|>
name|comparator
init|=
name|Ints
operator|.
name|lexicographicalComparator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|comparator
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testStringConverterSerialization ()
specifier|public
name|void
name|testStringConverterSerialization
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|Ints
operator|.
name|stringConverter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray ()
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
comment|// need explicit type parameter to avoid javac warning!?
name|List
argument_list|<
name|Integer
argument_list|>
name|none
init|=
name|Arrays
operator|.
expr|<
name|Integer
operator|>
name|asList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|none
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|one
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ARRAY1
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|one
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|array
init|=
block|{
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|0xdeadbeef
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|three
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|0xdeadbeef
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|three
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|Ints
operator|.
name|asList
argument_list|(
name|array
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray_threadSafe ()
specifier|public
name|void
name|testToArray_threadSafe
parameter_list|()
block|{
for|for
control|(
name|int
name|delta
range|:
operator|new
name|int
index|[]
block|{
operator|+
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|}
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VALUES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Ints
operator|.
name|asList
argument_list|(
name|VALUES
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|misleadingSize
init|=
name|Helpers
operator|.
name|misleadingSizeCollection
argument_list|(
name|delta
argument_list|)
decl_stmt|;
name|misleadingSize
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|int
index|[]
name|arr
init|=
name|Ints
operator|.
name|toArray
argument_list|(
name|misleadingSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|VALUES
index|[
name|j
index|]
argument_list|,
name|arr
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testToArray_withNull ()
specifier|public
name|void
name|testToArray_withNull
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|int
index|[]
name|unused
init|=
name|Ints
operator|.
name|toArray
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToArray_withConversion ()
specifier|public
name|void
name|testToArray_withConversion
parameter_list|()
block|{
name|int
index|[]
name|array
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|List
argument_list|<
name|Byte
argument_list|>
name|bytes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Short
argument_list|>
name|shorts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ints
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|floats
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|float
operator|)
literal|0
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|long
operator|)
literal|0
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|doubles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|shorts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|ints
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|floats
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|longs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|doubles
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList_isAView ()
specifier|public
name|void
name|testAsList_isAView
parameter_list|()
block|{
name|int
index|[]
name|array
init|=
block|{
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|1
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Ints
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|1
block|}
argument_list|,
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|array
index|[
literal|1
index|]
operator|=
operator|(
name|int
operator|)
literal|3
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|int
operator|)
literal|2
argument_list|,
operator|(
name|int
operator|)
literal|3
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList_toArray_roundTrip ()
specifier|public
name|void
name|testAsList_toArray_roundTrip
parameter_list|()
block|{
name|int
index|[]
name|array
init|=
block|{
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|2
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Ints
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|int
index|[]
name|newArray
init|=
name|Ints
operator|.
name|toArray
argument_list|(
name|list
argument_list|)
decl_stmt|;
comment|// Make sure it returned a copy
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|2
block|}
argument_list|,
name|newArray
argument_list|)
argument_list|)
expr_stmt|;
name|newArray
index|[
literal|1
index|]
operator|=
operator|(
name|int
operator|)
literal|5
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This test stems from a real bug found by andrewk
DECL|method|testAsList_subList_toArray_roundTrip ()
specifier|public
name|void
name|testAsList_subList_toArray_roundTrip
parameter_list|()
block|{
name|int
index|[]
name|array
init|=
block|{
operator|(
name|int
operator|)
literal|0
block|,
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|2
block|,
operator|(
name|int
operator|)
literal|3
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Ints
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{
operator|(
name|int
operator|)
literal|1
block|,
operator|(
name|int
operator|)
literal|2
block|}
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|,
name|Ints
operator|.
name|toArray
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsListEmpty ()
specifier|public
name|void
name|testAsListEmpty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Ints
operator|.
name|asList
argument_list|(
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Ints
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringConverter_convert ()
specifier|public
name|void
name|testStringConverter_convert
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|converter
init|=
name|Ints
operator|.
name|stringConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|1
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|0
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|Integer
call|)
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|255
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"0xff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|255
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"0xFF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|Integer
call|)
argument_list|(
operator|-
literal|255
argument_list|)
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"-0xFF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|255
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"#0000FF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|438
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"0666"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringConverter_convertError ()
specifier|public
name|void
name|testStringConverter_convertError
parameter_list|()
block|{
try|try
block|{
name|int
name|unused
init|=
name|Ints
operator|.
name|stringConverter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"notanumber"
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testStringConverter_nullConversions ()
specifier|public
name|void
name|testStringConverter_nullConversions
parameter_list|()
block|{
name|assertNull
argument_list|(
name|Ints
operator|.
name|stringConverter
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Ints
operator|.
name|stringConverter
argument_list|()
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringConverter_reverse ()
specifier|public
name|void
name|testStringConverter_reverse
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|converter
init|=
name|Ints
operator|.
name|stringConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"255"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"255"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-255"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
operator|-
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"438"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|0666
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testStringConverter_nullPointerTester ()
specifier|public
name|void
name|testStringConverter_nullPointerTester
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|Ints
operator|.
name|stringConverter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryParse ()
specifier|public
name|void
name|testTryParse
parameter_list|()
block|{
name|tryParseAndAssertEquals
argument_list|(
literal|0
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
literal|0
argument_list|,
literal|"-0"
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
literal|1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
operator|-
literal|1
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
literal|8900
argument_list|,
literal|"8900"
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
operator|-
literal|8900
argument_list|,
literal|"-8900"
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|GREATEST
argument_list|)
argument_list|)
expr_stmt|;
name|tryParseAndAssertEquals
argument_list|(
name|LEAST
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|LEAST
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Ints
operator|.
name|tryParse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"+1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"9999999999999999"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max integer + 1"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|GREATEST
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max integer * 10"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|GREATEST
operator|)
operator|*
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Min integer - 1"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|LEAST
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Min integer * 10"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|LEAST
operator|)
operator|*
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max long"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Min long"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"\u0662\u06f3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Applies {@link Ints#tryParse(String)} to the given string and asserts that    * the result is as expected.    */
DECL|method|tryParseAndAssertEquals (Integer expected, String value)
specifier|private
specifier|static
name|void
name|tryParseAndAssertEquals
parameter_list|(
name|Integer
name|expected
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryParse_radix ()
specifier|public
name|void
name|testTryParse_radix
parameter_list|()
block|{
for|for
control|(
name|int
name|radix
init|=
name|Character
operator|.
name|MIN_RADIX
init|;
name|radix
operator|<=
name|Character
operator|.
name|MAX_RADIX
condition|;
name|radix
operator|++
control|)
block|{
name|radixEncodeParseAndAssertEquals
argument_list|(
literal|0
argument_list|,
name|radix
argument_list|)
expr_stmt|;
name|radixEncodeParseAndAssertEquals
argument_list|(
literal|8000
argument_list|,
name|radix
argument_list|)
expr_stmt|;
name|radixEncodeParseAndAssertEquals
argument_list|(
operator|-
literal|8000
argument_list|,
name|radix
argument_list|)
expr_stmt|;
name|radixEncodeParseAndAssertEquals
argument_list|(
name|GREATEST
argument_list|,
name|radix
argument_list|)
expr_stmt|;
name|radixEncodeParseAndAssertEquals
argument_list|(
name|LEAST
argument_list|,
name|radix
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Radix: "
operator|+
name|radix
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"9999999999999999"
argument_list|,
name|radix
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Radix: "
operator|+
name|radix
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
name|long
operator|)
name|GREATEST
operator|+
literal|1
argument_list|,
name|radix
argument_list|)
argument_list|,
name|radix
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Radix: "
operator|+
name|radix
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
name|long
operator|)
name|LEAST
operator|-
literal|1
argument_list|,
name|radix
argument_list|)
argument_list|,
name|radix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Hex string and dec parm"
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"FFFF"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mixed hex case"
argument_list|,
literal|65535
argument_list|,
operator|(
name|int
operator|)
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"ffFF"
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Encodes the an integer as a string with given radix, then uses    * {@link Ints#tryParse(String, int)} to parse the result. Asserts the result    * is the same as what we started with.    */
DECL|method|radixEncodeParseAndAssertEquals (Integer value, int radix)
specifier|private
specifier|static
name|void
name|radixEncodeParseAndAssertEquals
parameter_list|(
name|Integer
name|value
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Radix: "
operator|+
name|radix
argument_list|,
name|value
argument_list|,
name|Ints
operator|.
name|tryParse
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|,
name|radix
argument_list|)
argument_list|,
name|radix
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryParse_radixTooBig ()
specifier|public
name|void
name|testTryParse_radixTooBig
parameter_list|()
block|{
try|try
block|{
name|Integer
name|unused
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"0"
argument_list|,
name|Character
operator|.
name|MAX_RADIX
operator|+
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTryParse_radixTooSmall ()
specifier|public
name|void
name|testTryParse_radixTooSmall
parameter_list|()
block|{
try|try
block|{
name|Integer
name|unused
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
literal|"0"
argument_list|,
name|Character
operator|.
name|MIN_RADIX
operator|-
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

