begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|SourceSinkFactory
operator|.
name|ByteSinkFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|SourceSinkFactory
operator|.
name|CharSinkFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * A generator of {@code TestSuite} instances for testing {@code ByteSink} implementations.  * Generates tests of a all methods on a {@code ByteSink} given various inputs written to it as well  * as sub-suites for testing the {@code CharSink} view in the same way.  *  * @author Colin Decker  */
end_comment

begin_class
annotation|@
name|AndroidIncompatible
comment|// Android doesn't understand tests that lack default constructors.
DECL|class|ByteSinkTester
specifier|public
class|class
name|ByteSinkTester
extends|extends
name|SourceSinkTester
argument_list|<
name|ByteSink
argument_list|,
name|byte
index|[]
argument_list|,
name|ByteSinkFactory
argument_list|>
block|{
DECL|field|testMethods
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Method
argument_list|>
name|testMethods
init|=
name|getTestMethods
argument_list|(
name|ByteSinkTester
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|tests (String name, ByteSinkFactory factory)
specifier|static
name|TestSuite
name|tests
parameter_list|(
name|String
name|name
parameter_list|,
name|ByteSinkFactory
name|factory
parameter_list|)
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|TEST_STRINGS
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|desc
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TestSuite
name|stringSuite
init|=
name|suiteForString
argument_list|(
name|name
argument_list|,
name|factory
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|stringSuite
argument_list|)
expr_stmt|;
block|}
return|return
name|suite
return|;
block|}
DECL|method|suiteForString (String name, ByteSinkFactory factory, String string, String desc)
specifier|private
specifier|static
name|TestSuite
name|suiteForString
parameter_list|(
name|String
name|name
parameter_list|,
name|ByteSinkFactory
name|factory
parameter_list|,
name|String
name|string
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|TestSuite
name|suite
init|=
name|suiteForBytes
argument_list|(
name|name
argument_list|,
name|factory
argument_list|,
name|desc
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
name|CharSinkFactory
name|charSinkFactory
init|=
name|SourceSinkFactories
operator|.
name|asCharSinkFactory
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSinkTester
operator|.
name|suiteForString
argument_list|(
name|name
operator|+
literal|".asCharSink[Charset]"
argument_list|,
name|charSinkFactory
argument_list|,
name|string
argument_list|,
name|desc
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|suiteForBytes (String name, ByteSinkFactory factory, String desc, byte[] bytes)
specifier|private
specifier|static
name|TestSuite
name|suiteForBytes
parameter_list|(
name|String
name|name
parameter_list|,
name|ByteSinkFactory
name|factory
parameter_list|,
name|String
name|desc
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|name
operator|+
literal|" ["
operator|+
name|desc
operator|+
literal|"]"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|testMethods
control|)
block|{
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|ByteSinkTester
argument_list|(
name|factory
argument_list|,
name|bytes
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|suite
return|;
block|}
DECL|field|sink
specifier|private
name|ByteSink
name|sink
decl_stmt|;
DECL|method|ByteSinkTester (ByteSinkFactory factory, byte[] data, String suiteName, String caseDesc, Method method)
name|ByteSinkTester
parameter_list|(
name|ByteSinkFactory
name|factory
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|suiteName
parameter_list|,
name|String
name|caseDesc
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|,
name|data
argument_list|,
name|suiteName
argument_list|,
name|caseDesc
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|sink
operator|=
name|factory
operator|.
name|createSink
argument_list|()
expr_stmt|;
block|}
DECL|method|testOpenStream ()
specifier|public
name|void
name|testOpenStream
parameter_list|()
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|sink
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertContainsExpectedBytes
argument_list|()
expr_stmt|;
block|}
DECL|method|testOpenBufferedStream ()
specifier|public
name|void
name|testOpenBufferedStream
parameter_list|()
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|sink
operator|.
name|openBufferedStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertContainsExpectedBytes
argument_list|()
expr_stmt|;
block|}
DECL|method|testWrite ()
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|sink
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertContainsExpectedBytes
argument_list|()
expr_stmt|;
block|}
DECL|method|testWriteFrom_inputStream ()
specifier|public
name|void
name|testWriteFrom_inputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|sink
operator|.
name|writeFrom
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsExpectedBytes
argument_list|()
expr_stmt|;
block|}
DECL|method|assertContainsExpectedBytes ()
specifier|private
name|void
name|assertContainsExpectedBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|factory
operator|.
name|getSinkContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

