begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * A byte source for testing that has configurable behavior.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|TestByteSource
specifier|public
specifier|final
class|class
name|TestByteSource
extends|extends
name|ByteSource
implements|implements
name|TestStreamSupplier
block|{
DECL|field|bytes
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|TestOption
argument_list|>
name|options
decl_stmt|;
DECL|field|inputStreamOpened
specifier|private
name|boolean
name|inputStreamOpened
decl_stmt|;
DECL|field|inputStreamClosed
specifier|private
name|boolean
name|inputStreamClosed
decl_stmt|;
DECL|method|TestByteSource (byte[] bytes, TestOption... options)
name|TestByteSource
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|TestOption
modifier|...
name|options
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|checkNotNull
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|wasStreamOpened ()
specifier|public
name|boolean
name|wasStreamOpened
parameter_list|()
block|{
return|return
name|inputStreamOpened
return|;
block|}
annotation|@
name|Override
DECL|method|wasStreamClosed ()
specifier|public
name|boolean
name|wasStreamClosed
parameter_list|()
block|{
return|return
name|inputStreamClosed
return|;
block|}
annotation|@
name|Override
DECL|method|openStream ()
specifier|public
name|InputStream
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
name|inputStreamOpened
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|RandomAmountInputStream
argument_list|(
operator|new
name|In
argument_list|()
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
return|;
block|}
DECL|class|In
specifier|private
specifier|final
class|class
name|In
extends|extends
name|TestInputStream
block|{
DECL|method|In ()
specifier|public
name|In
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|inputStreamClosed
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

