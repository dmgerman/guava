begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The purpose of the CheckCloseSupplier is to report when all closeable objects  * supplied by the delegate supplier are closed. To do this, the factory method  * returns a decorated version of the {@code delegate} supplied in the  * constructor. The decoration mechanism is left up to the subclass via the  * abstract {@link #wrap} method.  *  *<p>The decorated object returned from {@link #wrap} should ideally override  * its {@code close} method to not only call {@code super.close()} but to also  * call {@code callback.delegateClosed()}.  *  * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|CheckCloseSupplier
specifier|abstract
class|class
name|CheckCloseSupplier
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|open
specifier|private
specifier|final
name|Set
argument_list|<
name|Callback
argument_list|>
name|open
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|class|Input
specifier|abstract
specifier|static
class|class
name|Input
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CheckCloseSupplier
argument_list|<
name|T
argument_list|>
implements|implements
name|InputSupplier
argument_list|<
name|T
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|InputSupplier
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|delegate
decl_stmt|;
DECL|method|Input (InputSupplier<? extends T> delegate)
specifier|public
name|Input
parameter_list|(
name|InputSupplier
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|getInput ()
annotation|@
name|Override
specifier|public
name|T
name|getInput
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wrap
argument_list|(
name|delegate
operator|.
name|getInput
argument_list|()
argument_list|,
name|newCallback
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Output
specifier|abstract
specifier|static
class|class
name|Output
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CheckCloseSupplier
argument_list|<
name|T
argument_list|>
implements|implements
name|OutputSupplier
argument_list|<
name|T
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|OutputSupplier
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|delegate
decl_stmt|;
DECL|method|Output (OutputSupplier<? extends T> delegate)
specifier|public
name|Output
parameter_list|(
name|OutputSupplier
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|getOutput ()
annotation|@
name|Override
specifier|public
name|T
name|getOutput
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wrap
argument_list|(
name|delegate
operator|.
name|getOutput
argument_list|()
argument_list|,
name|newCallback
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Callback
specifier|public
specifier|final
class|class
name|Callback
block|{
DECL|method|delegateClosed ()
specifier|public
name|void
name|delegateClosed
parameter_list|()
block|{
name|open
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newCallback ()
specifier|protected
name|Callback
name|newCallback
parameter_list|()
block|{
name|Callback
name|callback
init|=
operator|new
name|Callback
argument_list|()
decl_stmt|;
name|open
operator|.
name|add
argument_list|(
name|callback
argument_list|)
expr_stmt|;
return|return
name|callback
return|;
block|}
comment|/**    * Subclasses should wrap the given object and call    * {@link Callback#delegateClosed} when the close method of the delegate is    * called, to inform the supplier that the underlying    * {@code Closeable} is not longer open.    *    * @param object the object to wrap.    * @param callback the object that the wrapper should call to signal that the    */
DECL|method|wrap (T object, Callback callback)
specifier|protected
specifier|abstract
name|T
name|wrap
parameter_list|(
name|T
name|object
parameter_list|,
name|Callback
name|callback
parameter_list|)
function_decl|;
comment|/** Returns true if all the closeables have been closed closed */
DECL|method|areClosed ()
specifier|public
name|boolean
name|areClosed
parameter_list|()
block|{
return|return
name|open
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

