begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|TestLogHandler
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Closer}.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|CloserTest
specifier|public
class|class
name|CloserTest
extends|extends
name|TestCase
block|{
DECL|field|suppressor
specifier|private
name|TestSuppressor
name|suppressor
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|suppressor
operator|=
operator|new
name|TestSuppressor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressUnderAndroid
comment|// TODO(cpovirk): Look up Build.VERSION.SDK_INT reflectively.
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|javaVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
name|String
name|secondPart
init|=
name|Iterables
operator|.
name|get
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
operator|.
name|split
argument_list|(
name|javaVersion
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|versionNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|secondPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionNumber
operator|<
literal|7
condition|)
block|{
name|assertThat
argument_list|(
name|closer
operator|.
name|suppressor
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|Closer
operator|.
name|LoggingSuppressor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|closer
operator|.
name|suppressor
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|Closer
operator|.
name|SuppressingSuppressor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNoExceptionsThrown ()
specifier|public
name|void
name|testNoExceptionsThrown
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
name|TestCloseable
name|c3
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suppressor
operator|.
name|suppressions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionThrown_fromTryBlock ()
specifier|public
name|void
name|testExceptionThrown_fromTryBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
throw|throw
name|exception
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suppressor
operator|.
name|suppressions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionThrown_whenCreatingCloseables ()
specifier|public
name|void
name|testExceptionThrown_whenCreatingCloseables
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|TestCloseable
name|c1
init|=
literal|null
decl_stmt|;
name|TestCloseable
name|c2
init|=
literal|null
decl_stmt|;
name|TestCloseable
name|c3
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|c1
operator|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
expr_stmt|;
name|c3
operator|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnCreate
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suppressor
operator|.
name|suppressions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionThrown_whileClosingLastCloseable ()
specifier|public
name|void
name|testExceptionThrown_whileClosingLastCloseable
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
comment|// c1 is added first, closed last
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suppressor
operator|.
name|suppressions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionThrown_whileClosingFirstCloseable ()
specifier|public
name|void
name|testExceptionThrown_whileClosingFirstCloseable
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
comment|// c2 is added last, closed first
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|normal
argument_list|()
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|exception
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|suppressor
operator|.
name|suppressions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloseExceptionsSuppressed_whenExceptionThrownFromTryBlock ()
specifier|public
name|void
name|testCloseExceptionsSuppressed_whenExceptionThrownFromTryBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|IOException
name|tryException
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|IOException
name|c1Exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|IOException
name|c2Exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c1Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c2Exception
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
throw|throw
name|tryException
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|tryException
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSuppressed
argument_list|(
operator|new
name|Suppression
argument_list|(
name|c2
argument_list|,
name|tryException
argument_list|,
name|c2Exception
argument_list|)
argument_list|,
operator|new
name|Suppression
argument_list|(
name|c1
argument_list|,
name|tryException
argument_list|,
name|c1Exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloseExceptionsSuppressed_whenExceptionThrownClosingFirstCloseable ()
specifier|public
name|void
name|testCloseExceptionsSuppressed_whenExceptionThrownClosingFirstCloseable
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|IOException
name|c1Exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|IOException
name|c2Exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|IOException
name|c3Exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c1Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c2Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c3
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c3Exception
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|c3Exception
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSuppressed
argument_list|(
operator|new
name|Suppression
argument_list|(
name|c2
argument_list|,
name|c3Exception
argument_list|,
name|c2Exception
argument_list|)
argument_list|,
operator|new
name|Suppression
argument_list|(
name|c1
argument_list|,
name|c3Exception
argument_list|,
name|c1Exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRuntimeExceptions ()
specifier|public
name|void
name|testRuntimeExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|RuntimeException
name|tryException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|RuntimeException
name|c1Exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|RuntimeException
name|c2Exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c1Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c2Exception
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
throw|throw
name|tryException
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|tryException
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSuppressed
argument_list|(
operator|new
name|Suppression
argument_list|(
name|c2
argument_list|,
name|tryException
argument_list|,
name|c2Exception
argument_list|)
argument_list|,
operator|new
name|Suppression
argument_list|(
name|c1
argument_list|,
name|tryException
argument_list|,
name|c1Exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testErrors ()
specifier|public
name|void
name|testErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
name|suppressor
argument_list|)
decl_stmt|;
name|Error
name|c1Exception
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|Error
name|c2Exception
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|Error
name|c3Exception
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c1Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c2Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c3
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c3Exception
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|c3Exception
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSuppressed
argument_list|(
operator|new
name|Suppression
argument_list|(
name|c2
argument_list|,
name|c3Exception
argument_list|,
name|c2Exception
argument_list|)
argument_list|,
operator|new
name|Suppression
argument_list|(
name|c1
argument_list|,
name|c3Exception
argument_list|,
name|c1Exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoggingSuppressor ()
specifier|public
specifier|static
name|void
name|testLoggingSuppressor
parameter_list|()
throws|throws
name|IOException
block|{
name|TestLogHandler
name|logHandler
init|=
operator|new
name|TestLogHandler
argument_list|()
decl_stmt|;
name|Closeables
operator|.
name|logger
operator|.
name|addHandler
argument_list|(
name|logHandler
argument_list|)
expr_stmt|;
try|try
block|{
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
operator|new
name|Closer
operator|.
name|LoggingSuppressor
argument_list|()
argument_list|)
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"thrown"
argument_list|)
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
name|assertTrue
argument_list|(
name|logHandler
operator|.
name|getStoredLogRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logHandler
operator|.
name|getStoredLogRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LogRecord
name|record
init|=
name|logHandler
operator|.
name|getStoredLogRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Suppressing exception thrown when closing "
operator|+
name|c2
argument_list|,
name|record
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|=
name|logHandler
operator|.
name|getStoredLogRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Suppressing exception thrown when closing "
operator|+
name|c1
argument_list|,
name|record
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|logger
operator|.
name|removeHandler
argument_list|(
name|logHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSuppressingSuppressorIfPossible ()
specifier|public
specifier|static
name|void
name|testSuppressingSuppressorIfPossible
parameter_list|()
throws|throws
name|IOException
block|{
comment|// can't test the JDK7 suppressor when not running on JDK7
if|if
condition|(
operator|!
name|Closer
operator|.
name|SuppressingSuppressor
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|(
operator|new
name|Closer
operator|.
name|SuppressingSuppressor
argument_list|()
argument_list|)
decl_stmt|;
name|IOException
name|thrownException
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|IOException
name|c1Exception
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|RuntimeException
name|c2Exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|TestCloseable
name|c1
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c1Exception
argument_list|)
argument_list|)
decl_stmt|;
name|TestCloseable
name|c2
init|=
name|closer
operator|.
name|register
argument_list|(
name|TestCloseable
operator|.
name|throwsOnClose
argument_list|(
name|c2Exception
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
throw|throw
name|thrownException
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|thrownException
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
throw|;
block|}
finally|finally
block|{
name|assertThat
argument_list|(
name|getSuppressed
argument_list|(
name|thrownException
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
name|thrownException
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Throwable
argument_list|>
name|suppressed
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|getSuppressed
argument_list|(
name|thrownException
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|suppressed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|c1Exception
argument_list|,
name|c2Exception
argument_list|)
argument_list|,
name|suppressed
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullCloseable ()
specifier|public
name|void
name|testNullCloseable
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getSuppressed (Throwable throwable)
specifier|static
name|Throwable
index|[]
name|getSuppressed
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
try|try
block|{
name|Method
name|getSuppressed
init|=
name|Throwable
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getSuppressed"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Throwable
index|[]
operator|)
name|getSuppressed
operator|.
name|invoke
argument_list|(
name|throwable
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
comment|// only called if running on JDK7
block|}
block|}
comment|/**    * Asserts that an exception was thrown when trying to close each of the given throwables and that    * each such exception was suppressed because of the given thrown exception.    */
DECL|method|assertSuppressed (Suppression... expected)
specifier|private
name|void
name|assertSuppressed
parameter_list|(
name|Suppression
modifier|...
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|suppressor
operator|.
name|suppressions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Suppressor that records suppressions.    */
DECL|class|TestSuppressor
specifier|private
specifier|static
class|class
name|TestSuppressor
implements|implements
name|Closer
operator|.
name|Suppressor
block|{
DECL|field|suppressions
specifier|private
specifier|final
name|List
argument_list|<
name|Suppression
argument_list|>
name|suppressions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|suppress (Closeable closeable, Throwable thrown, Throwable suppressed)
specifier|public
name|void
name|suppress
parameter_list|(
name|Closeable
name|closeable
parameter_list|,
name|Throwable
name|thrown
parameter_list|,
name|Throwable
name|suppressed
parameter_list|)
block|{
name|suppressions
operator|.
name|add
argument_list|(
operator|new
name|Suppression
argument_list|(
name|closeable
argument_list|,
name|thrown
argument_list|,
name|suppressed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Record of a call to suppress.    */
DECL|class|Suppression
specifier|private
specifier|static
class|class
name|Suppression
block|{
DECL|field|closeable
specifier|private
specifier|final
name|Closeable
name|closeable
decl_stmt|;
DECL|field|thrown
specifier|private
specifier|final
name|Throwable
name|thrown
decl_stmt|;
DECL|field|suppressed
specifier|private
specifier|final
name|Throwable
name|suppressed
decl_stmt|;
DECL|method|Suppression (Closeable closeable, Throwable thrown, Throwable suppressed)
specifier|private
name|Suppression
parameter_list|(
name|Closeable
name|closeable
parameter_list|,
name|Throwable
name|thrown
parameter_list|,
name|Throwable
name|suppressed
parameter_list|)
block|{
name|this
operator|.
name|closeable
operator|=
name|closeable
expr_stmt|;
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
name|this
operator|.
name|suppressed
operator|=
name|suppressed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Suppression
condition|)
block|{
name|Suppression
name|other
init|=
operator|(
name|Suppression
operator|)
name|obj
decl_stmt|;
return|return
name|closeable
operator|.
name|equals
argument_list|(
name|other
operator|.
name|closeable
argument_list|)
operator|&&
name|thrown
operator|.
name|equals
argument_list|(
name|other
operator|.
name|thrown
argument_list|)
operator|&&
name|suppressed
operator|.
name|equals
argument_list|(
name|other
operator|.
name|suppressed
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|closeable
argument_list|,
name|thrown
argument_list|,
name|suppressed
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"closeable"
argument_list|,
name|closeable
argument_list|)
operator|.
name|add
argument_list|(
literal|"thrown"
argument_list|,
name|thrown
argument_list|)
operator|.
name|add
argument_list|(
literal|"suppressed"
argument_list|,
name|suppressed
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|TestCloseable
specifier|private
specifier|static
class|class
name|TestCloseable
implements|implements
name|Closeable
block|{
DECL|field|throwOnClose
specifier|private
specifier|final
name|Throwable
name|throwOnClose
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|normal ()
specifier|static
name|TestCloseable
name|normal
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestCloseable
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|throwsOnClose (Throwable throwOnClose)
specifier|static
name|TestCloseable
name|throwsOnClose
parameter_list|(
name|Throwable
name|throwOnClose
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestCloseable
argument_list|(
name|throwOnClose
argument_list|)
return|;
block|}
DECL|method|throwsOnCreate ()
specifier|static
name|TestCloseable
name|throwsOnCreate
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
DECL|method|TestCloseable (@ullable Throwable throwOnClose)
specifier|private
name|TestCloseable
parameter_list|(
annotation|@
name|Nullable
name|Throwable
name|throwOnClose
parameter_list|)
block|{
name|this
operator|.
name|throwOnClose
operator|=
name|throwOnClose
expr_stmt|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|throwOnClose
operator|!=
literal|null
condition|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|throwOnClose
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|throwOnClose
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

