begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ByteStreams}.  *  * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|ByteStreamsTest
specifier|public
class|class
name|ByteStreamsTest
extends|extends
name|IoTestCase
block|{
comment|// Provides an InputStream that throws an IOException on every read.
DECL|field|BROKEN_READ
specifier|static
specifier|final
name|InputSupplier
argument_list|<
name|InputStream
argument_list|>
name|BROKEN_READ
init|=
operator|new
name|InputSupplier
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|getInput
parameter_list|()
block|{
return|return
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"broken read"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// Provides an OutputStream that throws an IOException on every write.
DECL|field|BROKEN_WRITE
specifier|static
specifier|final
name|OutputSupplier
argument_list|<
name|OutputStream
argument_list|>
name|BROKEN_WRITE
init|=
operator|new
name|OutputSupplier
argument_list|<
name|OutputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutput
parameter_list|()
block|{
return|return
operator|new
name|OutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"broken write"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
DECL|method|testByteSuppliers ()
specifier|public
name|void
name|testByteSuppliers
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|range
init|=
name|newPreFilledByteArray
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|range
argument_list|,
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|range
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|subRange
init|=
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|range
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|subRange
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|subRange
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|149
argument_list|,
name|subRange
index|[
name|subRange
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqual ()
specifier|public
name|void
name|testEqual
parameter_list|()
throws|throws
name|IOException
block|{
name|equalHelper
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|equalHelper
argument_list|(
literal|false
argument_list|,
literal|400
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|equalHelper
argument_list|(
literal|false
argument_list|,
literal|0x2000
argument_list|,
literal|0x2001
argument_list|)
expr_stmt|;
name|equalHelper
argument_list|(
literal|false
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
name|byte
index|[]
name|mutate
init|=
name|newPreFilledByteArray
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|mutate
index|[
literal|9000
index|]
operator|=
literal|0
expr_stmt|;
name|equalHelper
argument_list|(
literal|false
argument_list|,
name|mutate
argument_list|,
name|newPreFilledByteArray
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|equalHelper
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|equalHelper
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|equalHelper
argument_list|(
literal|true
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|tenK
init|=
name|newPreFilledByteArray
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|equalHelper
argument_list|(
literal|true
argument_list|,
name|tenK
argument_list|,
name|tenK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ByteStreams
operator|.
name|equal
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|tenK
argument_list|)
argument_list|,
operator|new
name|InputSupplier
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|getInput
parameter_list|()
block|{
return|return
operator|new
name|RandomAmountInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tenK
argument_list|)
argument_list|,
operator|new
name|Random
argument_list|(
literal|301
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|equalHelper (boolean expect, int size1, int size2)
specifier|private
name|void
name|equalHelper
parameter_list|(
name|boolean
name|expect
parameter_list|,
name|int
name|size1
parameter_list|,
name|int
name|size2
parameter_list|)
throws|throws
name|IOException
block|{
name|equalHelper
argument_list|(
name|expect
argument_list|,
name|newPreFilledByteArray
argument_list|(
name|size1
argument_list|)
argument_list|,
name|newPreFilledByteArray
argument_list|(
name|size2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|equalHelper (boolean expect, byte[] a, byte[] b)
specifier|private
name|void
name|equalHelper
parameter_list|(
name|boolean
name|expect
parameter_list|,
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|ByteStreams
operator|.
name|equal
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|a
argument_list|)
argument_list|,
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlwaysCloses ()
specifier|public
name|void
name|testAlwaysCloses
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|range
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|CheckCloseSupplier
operator|.
name|Input
argument_list|<
name|InputStream
argument_list|>
name|okRead
init|=
name|newCheckInput
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|range
argument_list|)
argument_list|)
decl_stmt|;
name|CheckCloseSupplier
operator|.
name|Output
argument_list|<
name|OutputStream
argument_list|>
name|okWrite
init|=
name|newCheckOutput
argument_list|(
operator|new
name|OutputSupplier
argument_list|<
name|OutputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutput
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayOutputStream
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CheckCloseSupplier
operator|.
name|Input
argument_list|<
name|InputStream
argument_list|>
name|brokenRead
init|=
name|newCheckInput
argument_list|(
name|BROKEN_READ
argument_list|)
decl_stmt|;
name|CheckCloseSupplier
operator|.
name|Output
argument_list|<
name|OutputStream
argument_list|>
name|brokenWrite
init|=
name|newCheckOutput
argument_list|(
name|BROKEN_WRITE
argument_list|)
decl_stmt|;
comment|// copy, both suppliers
name|ByteStreams
operator|.
name|copy
argument_list|(
name|okRead
argument_list|,
name|okWrite
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|okRead
argument_list|,
name|brokenWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken write"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|brokenRead
argument_list|,
name|okWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|brokenRead
argument_list|,
name|brokenWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// copy, input supplier
name|OutputStream
name|out
init|=
name|okWrite
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|okRead
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|okWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|brokenWrite
operator|.
name|getOutput
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|okRead
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken write"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|okWrite
operator|.
name|getOutput
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|brokenRead
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|okWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|brokenWrite
operator|.
name|getOutput
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|brokenRead
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// copy, output supplier
name|InputStream
name|in
init|=
name|okRead
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|okWrite
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|okRead
operator|.
name|getInput
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|brokenWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken write"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|brokenRead
operator|.
name|getInput
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|okWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|brokenRead
operator|.
name|getInput
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|brokenWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// toByteArray
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|range
argument_list|,
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|okRead
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|okRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|brokenRead
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// equal
try|try
block|{
name|ByteStreams
operator|.
name|equal
argument_list|(
name|brokenRead
argument_list|,
name|okRead
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|equal
argument_list|(
name|okRead
argument_list|,
name|brokenRead
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken read"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenRead
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// write
try|try
block|{
name|ByteStreams
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|,
name|brokenWrite
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"broken write"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|brokenWrite
operator|.
name|areClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteBytes ()
specifier|public
name|void
name|testWriteBytes
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|ByteStreams
operator|.
name|write
argument_list|(
name|expected
argument_list|,
operator|new
name|OutputSupplier
argument_list|<
name|OutputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutput
parameter_list|()
block|{
return|return
name|out
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopy ()
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|long
name|num
init|=
name|ByteStreams
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|expected
argument_list|)
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyChannel ()
specifier|public
name|void
name|testCopyChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|expected
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|WritableByteChannel
name|outChannel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ReadableByteChannel
name|inChannel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|expected
argument_list|)
argument_list|)
decl_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|inChannel
argument_list|,
name|outChannel
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadFully ()
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
literal|null
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|5
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{     }
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|newPreFilledByteArray
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkipFully ()
specifier|public
name|void
name|testSkipFully
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|skipHelper
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
operator|new
name|SlowSkipper
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
operator|new
name|SlowSkipper
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|skipHelper
argument_list|(
literal|101
argument_list|,
literal|0
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|skipHelper (long n, int expect, InputStream in)
specifier|private
name|void
name|skipHelper
parameter_list|(
name|long
name|n
parameter_list|,
name|int
name|expect
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteStreams
operator|.
name|skipFully
argument_list|(
name|in
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// TODO(user): rename; violates rule that only immutable things can be all caps
DECL|field|BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BYTES
init|=
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x34
block|,
literal|0x56
block|,
literal|0x78
block|,
literal|0x76
block|,
literal|0x54
block|,
literal|0x32
block|,
literal|0x10
block|}
decl_stmt|;
DECL|method|testNewDataInput_empty ()
specifier|public
name|void
name|testNewDataInput_empty
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|b
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataInput_normal ()
specifier|public
name|void
name|testNewDataInput_normal
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x12345678
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x76543210
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataInput_readFully ()
specifier|public
name|void
name|testNewDataInput_readFully
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|BYTES
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BYTES
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readFullyAndThenSome ()
specifier|public
name|void
name|testNewDataInput_readFullyAndThenSome
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|BYTES
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNewDataInput_readFullyWithOffset ()
specifier|public
name|void
name|testNewDataInput_readFullyWithOffset
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BYTES
index|[
literal|0
index|]
argument_list|,
name|actual
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BYTES
index|[
literal|1
index|]
argument_list|,
name|actual
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readBoolean ()
specifier|public
name|void
name|testNewDataInput_readBoolean
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readByte ()
specifier|public
name|void
name|testNewDataInput_readByte
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BYTES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BYTES
index|[
name|i
index|]
argument_list|,
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNewDataInput_readUnsignedByte ()
specifier|public
name|void
name|testNewDataInput_readUnsignedByte
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BYTES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BYTES
index|[
name|i
index|]
argument_list|,
name|in
operator|.
name|readUnsignedByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNewDataInput_offset ()
specifier|public
name|void
name|testNewDataInput_offset
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|BYTES
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x56787654
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataInput_skip ()
specifier|public
name|void
name|testNewDataInput_skip
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
operator|new
name|byte
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|skipBytes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataOutput_empty ()
specifier|public
name|void
name|testNewDataOutput_empty
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeInt ()
specifier|public
name|void
name|testNewDataOutput_writeInt
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x76543210
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|BYTES
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_sized ()
specifier|public
name|void
name|testNewDataOutput_sized
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x76543210
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|BYTES
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeLong ()
specifier|public
name|void
name|testNewDataOutput_writeLong
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
literal|0x1234567876543210L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|BYTES
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeByteArray ()
specifier|public
name|void
name|testNewDataOutput_writeByteArray
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|BYTES
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|BYTES
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeByte ()
specifier|public
name|void
name|testNewDataOutput_writeByte
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0x12
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
literal|0x34
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x34
block|}
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeByteOffset ()
specifier|public
name|void
name|testNewDataOutput_writeByteOffset
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|BYTES
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
name|BYTES
index|[
literal|4
index|]
block|,
name|BYTES
index|[
literal|5
index|]
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeBoolean ()
specifier|public
name|void
name|testNewDataOutput_writeBoolean
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|0
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeChar ()
specifier|public
name|void
name|testNewDataOutput_writeChar
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeChars ()
specifier|public
name|void
name|testNewDataOutput_writeChars
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"r\u00C9sum\u00C9"
argument_list|)
expr_stmt|;
comment|// need to remove byte order mark before comparing
name|byte
index|[]
name|expected
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
literal|"r\u00C9sum\u00C9"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_16
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeUTF ()
specifier|public
name|void
name|testNewDataOutput_writeUTF
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
literal|"r\u00C9sum\u00C9"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"r\u00C9sum\u00C9"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// writeUTF writes the length of the string in 2 bytes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|actual
argument_list|,
literal|2
argument_list|,
name|actual
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeShort ()
specifier|public
name|void
name|testNewDataOutput_writeShort
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
literal|0x1234
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x34
block|}
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeDouble ()
specifier|public
name|void
name|testNewDataOutput_writeDouble
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0x1234567876543210L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BYTES
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeFloat ()
specifier|public
name|void
name|testNewDataOutput_writeFloat
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x12345678
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x76543210
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BYTES
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLength ()
specifier|public
name|void
name|testLength
parameter_list|()
throws|throws
name|IOException
block|{
name|lengthHelper
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lengthHelper
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|lengthHelper
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lengthHelper
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ByteStreams
operator|.
name|length
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|lengthHelper (final long skipLimit)
specifier|private
name|void
name|lengthHelper
parameter_list|(
specifier|final
name|long
name|skipLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|ByteStreams
operator|.
name|length
argument_list|(
operator|new
name|InputSupplier
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|getInput
parameter_list|()
block|{
return|return
operator|new
name|SlowSkipper
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|100
index|]
argument_list|)
argument_list|,
name|skipLimit
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlice ()
specifier|public
name|void
name|testSlice
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test preconditions
name|InputSupplier
argument_list|<
name|?
extends|extends
name|InputStream
argument_list|>
name|supplier
init|=
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|slice
argument_list|(
name|supplier
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|slice
argument_list|(
name|supplier
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|slice
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|sliceHelper
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|,
literal|95
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|sliceHelper
argument_list|(
literal|100
argument_list|,
literal|101
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|expected
parameter_list|)
block|{     }
block|}
comment|/**    * @param input the size of the input stream    * @param offset the first argument to {@link ByteStreams#slice}    * @param length the second argument to {@link ByteStreams#slice}    * @param expectRead the number of bytes we expect to read    */
DECL|method|sliceHelper ( int input, int offset, long length, int expectRead)
specifier|private
specifier|static
name|void
name|sliceHelper
parameter_list|(
name|int
name|input
parameter_list|,
name|int
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|expectRead
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expectRead
operator|==
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|input
argument_list|,
name|offset
operator|+
name|length
argument_list|)
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|InputSupplier
argument_list|<
name|?
extends|extends
name|InputStream
argument_list|>
name|supplier
init|=
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|newPreFilledByteArray
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|newPreFilledByteArray
argument_list|(
name|offset
argument_list|,
name|expectRead
argument_list|)
argument_list|,
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|ByteStreams
operator|.
name|slice
argument_list|(
name|supplier
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newTestStream (int n)
specifier|private
specifier|static
name|InputStream
name|newTestStream
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|newPreFilledByteArray
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newCheckInput ( InputSupplier<? extends InputStream> delegate)
specifier|private
specifier|static
name|CheckCloseSupplier
operator|.
name|Input
argument_list|<
name|InputStream
argument_list|>
name|newCheckInput
parameter_list|(
name|InputSupplier
argument_list|<
name|?
extends|extends
name|InputStream
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|CheckCloseSupplier
operator|.
name|Input
argument_list|<
name|InputStream
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|InputStream
name|wrap
parameter_list|(
name|InputStream
name|object
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
return|return
operator|new
name|FilterInputStream
argument_list|(
name|object
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|callback
operator|.
name|delegateClosed
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|newCheckOutput ( OutputSupplier<? extends OutputStream> delegate)
specifier|private
specifier|static
name|CheckCloseSupplier
operator|.
name|Output
argument_list|<
name|OutputStream
argument_list|>
name|newCheckOutput
parameter_list|(
name|OutputSupplier
argument_list|<
name|?
extends|extends
name|OutputStream
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|CheckCloseSupplier
operator|.
name|Output
argument_list|<
name|OutputStream
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|OutputStream
name|wrap
parameter_list|(
name|OutputStream
name|object
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
return|return
operator|new
name|FilterOutputStream
argument_list|(
name|object
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|callback
operator|.
name|delegateClosed
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Stream that will skip a maximum number of bytes at a time. */
DECL|class|SlowSkipper
specifier|private
specifier|static
class|class
name|SlowSkipper
extends|extends
name|FilterInputStream
block|{
DECL|field|max
specifier|private
specifier|final
name|long
name|max
decl_stmt|;
DECL|method|SlowSkipper (InputStream in, long max)
specifier|public
name|SlowSkipper
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|skip (long n)
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|skip
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|max
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|testByteProcessorStopEarly ()
specifier|public
name|void
name|testByteProcessorStopEarly
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|array
init|=
name|newPreFilledByteArray
argument_list|(
literal|6000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|42
argument_list|,
name|ByteStreams
operator|.
name|readBytes
argument_list|(
name|ByteStreams
operator|.
name|newInputStreamSupplier
argument_list|(
name|array
argument_list|)
argument_list|,
operator|new
name|ByteProcessor
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|processBytes
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|copyOfRange
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|)
argument_list|,
name|newPreFilledByteArray
argument_list|(
literal|4096
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getResult
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyOfRange (byte[] in, int from, int to)
specifier|private
specifier|static
name|byte
index|[]
name|copyOfRange
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|to
operator|-
name|from
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|to
operator|-
name|from
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|from
operator|+
name|i
index|]
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|assertEquals (byte[] expected, byte[] actual)
specifier|private
specifier|static
name|void
name|assertEquals
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Bytes
operator|.
name|asList
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

