begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ByteStreams}.  *  * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|ByteStreamsTest
specifier|public
class|class
name|ByteStreamsTest
extends|extends
name|IoTestCase
block|{
DECL|method|testCopyChannel ()
specifier|public
name|void
name|testCopyChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|expected
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|WritableByteChannel
name|outChannel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ReadableByteChannel
name|inChannel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|expected
argument_list|)
argument_list|)
decl_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|inChannel
argument_list|,
name|outChannel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadFully ()
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
literal|null
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|5
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{     }
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newPreFilledByteArray
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|newTestStream
argument_list|(
literal|10
argument_list|)
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkipFully ()
specifier|public
name|void
name|testSkipFully
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|newPreFilledByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|skipHelper
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
operator|new
name|SlowSkipper
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
operator|new
name|SlowSkipper
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|skipHelper
argument_list|(
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|skipHelper
argument_list|(
literal|101
argument_list|,
literal|0
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|skipHelper (long n, int expect, InputStream in)
specifier|private
specifier|static
name|void
name|skipHelper
parameter_list|(
name|long
name|n
parameter_list|,
name|int
name|expect
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteStreams
operator|.
name|skipFully
argument_list|(
name|in
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|bytes
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x34
block|,
literal|0x56
block|,
literal|0x78
block|,
literal|0x76
block|,
literal|0x54
block|,
literal|0x32
block|,
literal|0x10
block|}
decl_stmt|;
DECL|method|testNewDataInput_empty ()
specifier|public
name|void
name|testNewDataInput_empty
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|b
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataInput_normal ()
specifier|public
name|void
name|testNewDataInput_normal
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x12345678
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x76543210
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataInput_readFully ()
specifier|public
name|void
name|testNewDataInput_readFully
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readFullyAndThenSome ()
specifier|public
name|void
name|testNewDataInput_readFullyAndThenSome
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNewDataInput_readFullyWithOffset ()
specifier|public
name|void
name|testNewDataInput_readFullyWithOffset
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
index|[
literal|0
index|]
argument_list|,
name|actual
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
index|[
literal|1
index|]
argument_list|,
name|actual
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readLine ()
specifier|public
name|void
name|testNewDataInput_readLine
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
literal|"This is a line\r\nThis too\rand this\nand also this"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"This is a line"
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This too"
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"and this"
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"and also this"
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readFloat ()
specifier|public
name|void
name|testNewDataInput_readFloat
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
block|{
literal|0x12
block|,
literal|0x34
block|,
literal|0x56
block|,
literal|0x78
block|,
literal|0x76
block|,
literal|0x54
block|,
literal|0x32
block|,
literal|0x10
block|}
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x12345678
argument_list|)
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x76543210
argument_list|)
argument_list|,
name|in
operator|.
name|readFloat
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readDouble ()
specifier|public
name|void
name|testNewDataInput_readDouble
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
block|{
literal|0x12
block|,
literal|0x34
block|,
literal|0x56
block|,
literal|0x78
block|,
literal|0x76
block|,
literal|0x54
block|,
literal|0x32
block|,
literal|0x10
block|}
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0x1234567876543210L
argument_list|)
argument_list|,
name|in
operator|.
name|readDouble
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readUTF ()
specifier|public
name|void
name|testNewDataInput_readUTF
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|17
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|15
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
literal|"Kilroy was here"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Kilroy was here"
argument_list|,
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readChar ()
specifier|public
name|void
name|testNewDataInput_readChar
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
literal|"qed"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'q'
argument_list|,
name|in
operator|.
name|readChar
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'e'
argument_list|,
name|in
operator|.
name|readChar
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'d'
argument_list|,
name|in
operator|.
name|readChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readUnsignedShort ()
specifier|public
name|void
name|testNewDataInput_readUnsignedShort
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x12
block|,
literal|0x34
block|}
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|readUnsignedShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|readUnsignedShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65535
argument_list|,
name|in
operator|.
name|readUnsignedShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x1234
argument_list|,
name|in
operator|.
name|readUnsignedShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readLong ()
specifier|public
name|void
name|testNewDataInput_readLong
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
block|{
literal|0x12
block|,
literal|0x34
block|,
literal|0x56
block|,
literal|0x78
block|,
literal|0x76
block|,
literal|0x54
block|,
literal|0x32
block|,
literal|0x10
block|}
decl_stmt|;
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x1234567876543210L
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readBoolean ()
specifier|public
name|void
name|testNewDataInput_readBoolean
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataInput_readByte ()
specifier|public
name|void
name|testNewDataInput_readByte
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNewDataInput_readUnsignedByte ()
specifier|public
name|void
name|testNewDataInput_readUnsignedByte
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|in
operator|.
name|readUnsignedByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNewDataInput_offset ()
specifier|public
name|void
name|testNewDataInput_offset
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|bytes
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x56787654
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataInput_skip ()
specifier|public
name|void
name|testNewDataInput_skip
parameter_list|()
block|{
name|ByteArrayDataInput
name|in
init|=
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
operator|new
name|byte
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|skipBytes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewDataOutput_empty ()
specifier|public
name|void
name|testNewDataOutput_empty
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeInt ()
specifier|public
name|void
name|testNewDataOutput_writeInt
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x76543210
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_sized ()
specifier|public
name|void
name|testNewDataOutput_sized
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0x76543210
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeLong ()
specifier|public
name|void
name|testNewDataOutput_writeLong
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
literal|0x1234567876543210L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeByteArray ()
specifier|public
name|void
name|testNewDataOutput_writeByteArray
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeByte ()
specifier|public
name|void
name|testNewDataOutput_writeByte
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0x12
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
literal|0x34
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x34
block|}
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeByteOffset ()
specifier|public
name|void
name|testNewDataOutput_writeByteOffset
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
name|bytes
index|[
literal|4
index|]
block|,
name|bytes
index|[
literal|5
index|]
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeBoolean ()
specifier|public
name|void
name|testNewDataOutput_writeBoolean
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|0
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeChar ()
specifier|public
name|void
name|testNewDataOutput_writeChar
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|97
block|}
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeChars ()
specifier|public
name|void
name|testNewDataOutput_writeChars
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"r\u00C9sum\u00C9"
argument_list|)
expr_stmt|;
comment|// need to remove byte order mark before comparing
name|byte
index|[]
name|expected
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
literal|"r\u00C9sum\u00C9"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_16
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeUTF ()
specifier|public
name|void
name|testNewDataOutput_writeUTF
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
literal|"r\u00C9sum\u00C9"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"r\u00C9sum\u00C9"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// writeUTF writes the length of the string in 2 bytes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|actual
argument_list|,
literal|2
argument_list|,
name|actual
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeShort ()
specifier|public
name|void
name|testNewDataOutput_writeShort
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
literal|0x1234
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x34
block|}
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeDouble ()
specifier|public
name|void
name|testNewDataOutput_writeDouble
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
literal|0x1234567876543210L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewDataOutput_writeFloat ()
specifier|public
name|void
name|testNewDataOutput_writeFloat
parameter_list|()
block|{
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x12345678
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
literal|0x76543210
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newTestStream (int n)
specifier|private
specifier|static
name|InputStream
name|newTestStream
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|newPreFilledByteArray
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
comment|/** Stream that will skip a maximum number of bytes at a time. */
DECL|class|SlowSkipper
specifier|private
specifier|static
class|class
name|SlowSkipper
extends|extends
name|FilterInputStream
block|{
DECL|field|max
specifier|private
specifier|final
name|long
name|max
decl_stmt|;
DECL|method|SlowSkipper (InputStream in, long max)
specifier|public
name|SlowSkipper
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|skip (long n)
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|skip
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|max
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|testReadBytes ()
specifier|public
name|void
name|testReadBytes
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|array
init|=
name|newPreFilledByteArray
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|array
argument_list|,
name|ByteStreams
operator|.
name|readBytes
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|array
argument_list|)
argument_list|,
operator|new
name|TestByteProcessor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestByteProcessor
specifier|private
class|class
name|TestByteProcessor
implements|implements
name|ByteProcessor
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|processBytes (byte[] buf, int off, int len)
specifier|public
name|boolean
name|processBytes
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
specifier|public
name|byte
index|[]
name|getResult
parameter_list|()
block|{
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
DECL|method|testByteProcessorStopEarly ()
specifier|public
name|void
name|testByteProcessorStopEarly
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|array
init|=
name|newPreFilledByteArray
argument_list|(
literal|6000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|42
argument_list|,
name|ByteStreams
operator|.
name|readBytes
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|array
argument_list|)
argument_list|,
operator|new
name|ByteProcessor
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|processBytes
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|copyOfRange
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|off
operator|+
name|len
argument_list|)
argument_list|,
name|newPreFilledByteArray
argument_list|(
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getResult
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullOutputStream ()
specifier|public
name|void
name|testNullOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a null output stream
name|OutputStream
name|nos
init|=
name|ByteStreams
operator|.
name|nullOutputStream
argument_list|()
decl_stmt|;
comment|// write to the output stream
name|nos
operator|.
name|write
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"Test string for NullOutputStream"
decl_stmt|;
name|nos
operator|.
name|write
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|nos
operator|.
name|write
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// nothing really to assert?
name|assertSame
argument_list|(
name|ByteStreams
operator|.
name|nullOutputStream
argument_list|()
argument_list|,
name|ByteStreams
operator|.
name|nullOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit ()
specifier|public
name|void
name|testLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
name|ByteStreams
operator|.
name|limit
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// also test available
name|lin
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|read
init|=
name|lin
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|small
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|small
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|small
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|(
name|small
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|small
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|small
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit_mark ()
specifier|public
name|void
name|testLimit_mark
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
name|ByteStreams
operator|.
name|limit
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|lin
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|lin
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit_skip ()
specifier|public
name|void
name|testLimit_skip
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
name|ByteStreams
operator|.
name|limit
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// also test available
name|lin
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|lin
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|lin
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit_markNotSet ()
specifier|public
name|void
name|testLimit_markNotSet
parameter_list|()
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
name|ByteStreams
operator|.
name|limit
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Mark not set"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLimit_markNotSupported ()
specifier|public
name|void
name|testLimit_markNotSupported
parameter_list|()
block|{
name|InputStream
name|lin
init|=
name|ByteStreams
operator|.
name|limit
argument_list|(
operator|new
name|UnmarkableInputStream
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Mark not supported"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UnmarkableInputStream
specifier|private
specifier|static
class|class
name|UnmarkableInputStream
extends|extends
name|InputStream
block|{
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|copyOfRange (byte[] in, int from, int to)
specifier|private
specifier|static
name|byte
index|[]
name|copyOfRange
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|to
operator|-
name|from
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|to
operator|-
name|from
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|from
operator|+
name|i
index|]
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|assertEquals (byte[] expected, byte[] actual)
specifier|private
specifier|static
name|void
name|assertEquals
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

