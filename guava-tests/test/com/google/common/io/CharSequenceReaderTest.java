begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link CharSequenceReader}.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|CharSequenceReaderTest
specifier|public
class|class
name|CharSequenceReaderTest
extends|extends
name|TestCase
block|{
DECL|method|testReadEmptyString ()
specifier|public
name|void
name|testReadEmptyString
parameter_list|()
throws|throws
name|IOException
block|{
name|assertReadsCorrectly
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadsStringsCorrectly ()
specifier|public
name|void
name|testReadsStringsCorrectly
parameter_list|()
throws|throws
name|IOException
block|{
name|assertReadsCorrectly
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertReadsCorrectly
argument_list|(
literal|"abcde"
argument_list|)
expr_stmt|;
name|assertReadsCorrectly
argument_list|(
literal|"abcdefghijkl"
argument_list|)
expr_stmt|;
name|assertReadsCorrectly
argument_list|(
literal|""
operator|+
literal|"abcdefghijklmnopqrstuvwxyz\n"
operator|+
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ\r"
operator|+
literal|"0123456789\r\n"
operator|+
literal|"!@#$%^&*()-=_+\t[]{};':\",./<>?\\| "
argument_list|)
expr_stmt|;
block|}
DECL|method|testMarkAndReset ()
specifier|public
name|void
name|testMarkAndReset
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|string
init|=
literal|"abcdefghijklmnopqrstuvwxyz"
decl_stmt|;
name|CharSequenceReader
name|reader
init|=
operator|new
name|CharSequenceReader
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|markSupported
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|string
argument_list|,
name|readFully
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// reset and read again
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|string
argument_list|,
name|readFully
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// reset, skip, mark, then read the rest
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|reader
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|string
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|,
name|readFully
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// reset to the mark and then read the rest
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|string
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|,
name|readFully
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalArguments ()
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
throws|throws
name|IOException
block|{
name|CharSequenceReader
name|reader
init|=
operator|new
name|CharSequenceReader
argument_list|(
literal|"12345"
argument_list|)
decl_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|skip
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|mark
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMethodsThrowWhenClosed ()
specifier|public
name|void
name|testMethodsThrowWhenClosed
parameter_list|()
throws|throws
name|IOException
block|{
name|CharSequenceReader
name|reader
init|=
operator|new
name|CharSequenceReader
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
operator|new
name|char
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
operator|new
name|char
index|[
literal|10
index|]
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|skip
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|ready
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|mark
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
block|}
comment|/**    * Creates a CharSequenceReader wrapping the given CharSequence and tests that the reader produces    * the same sequence when read using each type of read method it provides.    */
DECL|method|assertReadsCorrectly (CharSequence charSequence)
specifier|private
specifier|static
name|void
name|assertReadsCorrectly
parameter_list|(
name|CharSequence
name|charSequence
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|expected
init|=
name|charSequence
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// read char by char
name|CharSequenceReader
name|reader
init|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// read all to one array
name|reader
operator|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
expr_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
name|expected
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|String
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// read in chunks to fixed array
name|reader
operator|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|char
index|[
literal|5
index|]
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// read all to one CharBuffer
name|reader
operator|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
expr_stmt|;
name|CharBuffer
name|buf2
init|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
name|expected
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|buf2
argument_list|)
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|flip
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|buf2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// read in chunks to fixed CharBuffer
name|reader
operator|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
expr_stmt|;
name|buf2
operator|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|read
argument_list|(
name|buf2
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buf2
operator|.
name|flip
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buf2
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// skip fully
name|reader
operator|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|reader
operator|.
name|skip
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// skip 5 and read the rest
if|if
condition|(
name|expected
operator|.
name|length
argument_list|()
operator|>
literal|5
condition|)
block|{
name|reader
operator|=
operator|new
name|CharSequenceReader
argument_list|(
name|charSequence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|reader
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|char
index|[
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|5
index|]
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|length
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|assertFullyRead
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertFullyRead (CharSequenceReader reader)
specifier|private
specifier|static
name|void
name|assertFullyRead
parameter_list|(
name|CharSequenceReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|reader
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|reader
operator|.
name|read
argument_list|(
operator|new
name|char
index|[
literal|10
index|]
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|skip
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readFully (CharSequenceReader reader)
specifier|private
specifier|static
name|String
name|readFully
parameter_list|(
name|CharSequenceReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

