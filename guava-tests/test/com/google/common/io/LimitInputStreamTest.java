begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * @author Charles Fry  */
end_comment

begin_class
DECL|class|LimitInputStreamTest
specifier|public
class|class
name|LimitInputStreamTest
extends|extends
name|IoTestCase
block|{
DECL|method|testLimit ()
specifier|public
name|void
name|testLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
operator|new
name|LimitInputStream
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// also test available
name|lin
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|read
init|=
name|lin
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|small
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|small
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|small
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|(
name|small
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|small
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|small
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testMark ()
specifier|public
name|void
name|testMark
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
operator|new
name|LimitInputStream
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|lin
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|0
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|lin
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|big
index|[
literal|1
index|]
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip ()
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|big
init|=
name|newPreFilledByteArray
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|InputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|big
argument_list|)
decl_stmt|;
name|InputStream
name|lin
init|=
operator|new
name|LimitInputStream
argument_list|(
name|bin
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// also test available
name|lin
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|lin
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|lin
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|lin
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lin
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

