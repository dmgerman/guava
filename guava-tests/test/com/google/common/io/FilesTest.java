begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
operator|.
name|MapMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Files}.  *  *<p>Note: {@link Files#fileTraverser()} is tested in {@link FilesFileTraverserTest}.  *  * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|FilesTest
specifier|public
class|class
name|FilesTest
extends|extends
name|IoTestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|TestSuite
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ByteSourceTester
operator|.
name|tests
argument_list|(
literal|"Files.asByteSource[File]"
argument_list|,
name|SourceSinkFactories
operator|.
name|fileByteSourceFactory
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ByteSinkTester
operator|.
name|tests
argument_list|(
literal|"Files.asByteSink[File]"
argument_list|,
name|SourceSinkFactories
operator|.
name|fileByteSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ByteSinkTester
operator|.
name|tests
argument_list|(
literal|"Files.asByteSink[File, APPEND]"
argument_list|,
name|SourceSinkFactories
operator|.
name|appendingFileByteSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSourceTester
operator|.
name|tests
argument_list|(
literal|"Files.asCharSource[File, Charset]"
argument_list|,
name|SourceSinkFactories
operator|.
name|fileCharSourceFactory
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSinkTester
operator|.
name|tests
argument_list|(
literal|"Files.asCharSink[File, Charset]"
argument_list|,
name|SourceSinkFactories
operator|.
name|fileCharSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSinkTester
operator|.
name|tests
argument_list|(
literal|"Files.asCharSink[File, Charset, APPEND]"
argument_list|,
name|SourceSinkFactories
operator|.
name|appendingFileCharSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|FilesTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testRoundTripSources ()
specifier|public
name|void
name|testRoundTripSources
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|ByteSource
name|byteSource
init|=
name|Files
operator|.
name|asByteSource
argument_list|(
name|asciiFile
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|byteSource
argument_list|,
name|byteSource
operator|.
name|asCharSource
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|asByteSource
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToByteArray ()
specifier|public
name|void
name|testToByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ASCII
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|,
name|Files
operator|.
name|toByteArray
argument_list|(
name|asciiFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|I18N
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|Files
operator|.
name|toByteArray
argument_list|(
name|i18nFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|I18N
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|Files
operator|.
name|asByteSource
argument_list|(
name|i18nFile
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A {@link File} that provides a specialized value for {@link File#length()}. */
DECL|class|BadLengthFile
specifier|private
specifier|static
class|class
name|BadLengthFile
extends|extends
name|File
block|{
DECL|field|badLength
specifier|private
specifier|final
name|long
name|badLength
decl_stmt|;
DECL|method|BadLengthFile (File delegate, long badLength)
specifier|public
name|BadLengthFile
parameter_list|(
name|File
name|delegate
parameter_list|,
name|long
name|badLength
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|badLength
operator|=
name|badLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|badLength
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ASCII
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|asciiFile
argument_list|,
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|i18nFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|toString
argument_list|(
name|i18nFile
argument_list|,
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|I18N
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteString ()
specifier|public
name|void
name|testWriteString
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|I18N
argument_list|,
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteBytes ()
specifier|public
name|void
name|testWriteBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|newPreFilledByteArray
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|Files
operator|.
name|toByteArray
argument_list|(
name|temp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAppendString ()
specifier|public
name|void
name|testAppendString
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|append
argument_list|(
name|I18N
argument_list|,
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|append
argument_list|(
name|I18N
argument_list|,
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
operator|+
name|I18N
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|append
argument_list|(
name|I18N
argument_list|,
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
operator|+
name|I18N
operator|+
name|I18N
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyToOutputStream ()
specifier|public
name|void
name|testCopyToOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|i18nFile
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
argument_list|,
name|out
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyToAppendable ()
specifier|public
name|void
name|testCopyToAppendable
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|i18nFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyFile ()
specifier|public
name|void
name|testCopyFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|i18nFile
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|I18N
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyEqualFiles ()
specifier|public
name|void
name|testCopyEqualFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp1
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|File
name|temp2
init|=
name|file
argument_list|(
name|temp1
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|temp1
argument_list|,
name|temp2
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|ASCII
argument_list|,
name|temp1
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|copy
argument_list|(
name|temp1
argument_list|,
name|temp2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IAE to be thrown but wasn't"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
name|ASCII
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp1
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopySameFile ()
specifier|public
name|void
name|testCopySameFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|ASCII
argument_list|,
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|copy
argument_list|(
name|temp
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IAE to be thrown but wasn't"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
name|ASCII
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyIdenticalFiles ()
specifier|public
name|void
name|testCopyIdenticalFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp1
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|ASCII
argument_list|,
name|temp1
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|File
name|temp2
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|ASCII
argument_list|,
name|temp2
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|temp1
argument_list|,
name|temp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ASCII
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|temp2
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqual ()
specifier|public
name|void
name|testEqual
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|asciiFile
argument_list|,
name|i18nFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|asciiFile
argument_list|,
name|asciiFile
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|asciiFile
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|asciiFile
argument_list|,
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|i18nFile
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|i18nFile
argument_list|,
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|asciiFile
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|RandomAccessFile
name|rf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|temp
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|rf
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rf
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|asciiFile
operator|.
name|length
argument_list|()
argument_list|,
name|temp
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|asciiFile
argument_list|,
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|asByteSource
argument_list|(
name|asciiFile
argument_list|)
operator|.
name|contentEquals
argument_list|(
name|Files
operator|.
name|asByteSource
argument_list|(
name|asciiFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0-length files have special treatment (/proc, etc.)
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|asciiFile
argument_list|,
operator|new
name|BadLengthFile
argument_list|(
name|asciiFile
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewReader ()
specifier|public
name|void
name|testNewReader
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|newReader
argument_list|(
name|asciiFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Files
operator|.
name|newReader
argument_list|(
literal|null
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|BufferedReader
name|r
init|=
name|Files
operator|.
name|newReader
argument_list|(
name|asciiFile
argument_list|,
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ASCII
argument_list|,
name|r
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNewWriter ()
specifier|public
name|void
name|testNewWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|newWriter
argument_list|(
name|temp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Files
operator|.
name|newWriter
argument_list|(
literal|null
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|BufferedWriter
name|w
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
name|w
operator|.
name|write
argument_list|(
name|I18N
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|i18nFile
argument_list|,
name|temp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTouch ()
specifier|public
name|void
name|testTouch
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|touch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|touch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|touch
argument_list|(
operator|new
name|File
argument_list|(
name|temp
operator|.
name|getPath
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|setLastModified
parameter_list|(
name|long
name|t
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testTouchTime ()
specifier|public
name|void
name|testTouchTime
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|setLastModified
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|temp
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|touch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|temp
operator|.
name|lastModified
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirs_root ()
specifier|public
name|void
name|testCreateParentDirs_root
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|root
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|file
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirs_relativePath ()
specifier|public
name|void
name|testCreateParentDirs_relativePath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|file
argument_list|(
literal|"nonexistent.file"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|file
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirs_noParentsNeeded ()
specifier|public
name|void
name|testCreateParentDirs_noParentsNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|file
argument_list|(
name|getTempDir
argument_list|()
argument_list|,
literal|"nonexistent.file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirs_oneParentNeeded ()
specifier|public
name|void
name|testCreateParentDirs_oneParentNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|file
argument_list|(
name|getTempDir
argument_list|()
argument_list|,
literal|"parent"
argument_list|,
literal|"nonexistent.file"
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|parent
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parent
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|parent
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCreateParentDirs_multipleParentsNeeded ()
specifier|public
name|void
name|testCreateParentDirs_multipleParentsNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|file
argument_list|(
name|getTempDir
argument_list|()
argument_list|,
literal|"grandparent"
argument_list|,
literal|"parent"
argument_list|,
literal|"nonexistent.file"
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|grandparent
init|=
name|parent
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|grandparent
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parent
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirs_nonDirectoryParentExists ()
specifier|public
name|void
name|testCreateParentDirs_nonDirectoryParentExists
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|parent
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|parent
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|file
argument_list|(
name|parent
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createParentDirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCreateTempDir ()
specifier|public
name|void
name|testCreateTempDir
parameter_list|()
block|{
name|File
name|temp
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|temp
operator|.
name|listFiles
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMove ()
specifier|public
name|void
name|testMove
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|File
name|temp1
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|File
name|temp2
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|i18nFile
argument_list|,
name|temp1
argument_list|)
expr_stmt|;
name|moveHelper
argument_list|(
literal|true
argument_list|,
name|temp1
argument_list|,
name|temp2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|temp2
argument_list|,
name|i18nFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoveViaCopy ()
specifier|public
name|void
name|testMoveViaCopy
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|File
name|temp1
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|File
name|temp2
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|i18nFile
argument_list|,
name|temp1
argument_list|)
expr_stmt|;
name|moveHelper
argument_list|(
literal|true
argument_list|,
operator|new
name|UnmovableFile
argument_list|(
name|temp1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|temp2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|temp2
argument_list|,
name|i18nFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoveFailures ()
specifier|public
name|void
name|testMoveFailures
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp1
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|File
name|temp2
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|moveHelper
argument_list|(
literal|false
argument_list|,
operator|new
name|UnmovableFile
argument_list|(
name|temp1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|temp2
argument_list|)
expr_stmt|;
name|moveHelper
argument_list|(
literal|false
argument_list|,
operator|new
name|UnmovableFile
argument_list|(
name|temp1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|UnmovableFile
argument_list|(
name|temp2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|moveHelper
argument_list|(
literal|false
argument_list|,
name|asciiFile
argument_list|,
name|asciiFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|moveHelper (boolean success, File from, File to)
specifier|private
name|void
name|moveHelper
parameter_list|(
name|boolean
name|success
parameter_list|,
name|File
name|from
parameter_list|,
name|File
name|to
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|assertFalse
argument_list|(
name|from
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|to
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|possiblyExpected
parameter_list|)
block|{
if|if
condition|(
name|success
condition|)
block|{
throw|throw
name|possiblyExpected
throw|;
block|}
block|}
block|}
DECL|class|UnmovableFile
specifier|private
specifier|static
class|class
name|UnmovableFile
extends|extends
name|File
block|{
DECL|field|canRename
specifier|private
specifier|final
name|boolean
name|canRename
decl_stmt|;
DECL|field|canDelete
specifier|private
specifier|final
name|boolean
name|canDelete
decl_stmt|;
DECL|method|UnmovableFile (File file, boolean canRename, boolean canDelete)
specifier|public
name|UnmovableFile
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|canRename
parameter_list|,
name|boolean
name|canDelete
parameter_list|)
block|{
name|super
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|canRename
operator|=
name|canRename
expr_stmt|;
name|this
operator|.
name|canDelete
operator|=
name|canDelete
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renameTo (File to)
specifier|public
name|boolean
name|renameTo
parameter_list|(
name|File
name|to
parameter_list|)
block|{
return|return
name|canRename
operator|&&
name|super
operator|.
name|renameTo
argument_list|(
name|to
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete ()
specifier|public
name|boolean
name|delete
parameter_list|()
block|{
return|return
name|canDelete
operator|&&
name|super
operator|.
name|delete
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|testLineReading ()
specifier|public
name|void
name|testLineReading
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Files
operator|.
name|readFirstLine
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|readLines
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|w
init|=
operator|new
name|PrintWriter
argument_list|(
name|Files
operator|.
name|newWriter
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|" world  "
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|Files
operator|.
name|readFirstLine
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"hello"
argument_list|,
literal|""
argument_list|,
literal|" world  "
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Files
operator|.
name|readLines
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadLines_withLineProcessor ()
specifier|public
name|void
name|testReadLines_withLineProcessor
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|LineProcessor
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|collect
init|=
operator|new
name|LineProcessor
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|collector
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|processLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|collector
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
block|{
return|return
name|collector
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|readLines
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|collect
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|PrintWriter
name|w
init|=
operator|new
name|PrintWriter
argument_list|(
name|Files
operator|.
name|newWriter
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|" world  "
argument_list|)
expr_stmt|;
name|w
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Files
operator|.
name|readLines
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|collect
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collect
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"hello"
argument_list|,
literal|""
argument_list|,
literal|" world  "
argument_list|,
literal|""
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|LineProcessor
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|collectNonEmptyLines
init|=
operator|new
name|LineProcessor
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|collector
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|processLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|collector
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
block|{
return|return
name|collector
return|;
block|}
block|}
decl_stmt|;
name|Files
operator|.
name|readLines
argument_list|(
name|temp
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|collectNonEmptyLines
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collectNonEmptyLines
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"hello"
argument_list|,
literal|" world  "
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|temp
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHash ()
specifier|public
name|void
name|testHash
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|File
name|i18nFile
init|=
name|getTestFile
argument_list|(
literal|"i18n.txt"
argument_list|)
decl_stmt|;
name|String
name|init
init|=
literal|"d41d8cd98f00b204e9800998ecf8427e"
decl_stmt|;
name|assertEquals
argument_list|(
name|init
argument_list|,
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|hash
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|asciiHash
init|=
literal|"e5df5a39f2b8cb71b24e1d8038f93131"
decl_stmt|;
name|assertEquals
argument_list|(
name|asciiHash
argument_list|,
name|Files
operator|.
name|hash
argument_list|(
name|asciiFile
argument_list|,
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|i18nHash
init|=
literal|"7fa826962ce2079c8334cd4ebf33aea4"
decl_stmt|;
name|assertEquals
argument_list|(
name|i18nHash
argument_list|,
name|Files
operator|.
name|hash
argument_list|(
name|i18nFile
argument_list|,
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap ()
specifier|public
name|void
name|testMap
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test data
name|int
name|size
init|=
literal|1024
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|newPreFilledByteArray
argument_list|(
name|size
argument_list|)
decl_stmt|;
comment|// Setup
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// Test
name|MappedByteBuffer
name|actual
init|=
name|Files
operator|.
name|map
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// Verify
name|ByteBuffer
name|expected
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ByteBuffers should be equal."
argument_list|,
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_noSuchFile ()
specifier|public
name|void
name|testMap_noSuchFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|boolean
name|deleted
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
comment|// Test
try|try
block|{
name|Files
operator|.
name|map
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown FileNotFoundException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMap_readWrite ()
specifier|public
name|void
name|testMap_readWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test data
name|int
name|size
init|=
literal|1024
decl_stmt|;
name|byte
index|[]
name|expectedBytes
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|newPreFilledByteArray
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|// Setup
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|expectedBytes
argument_list|)
expr_stmt|;
comment|// Test
name|MappedByteBuffer
name|map
init|=
name|Files
operator|.
name|map
argument_list|(
name|file
argument_list|,
name|MapMode
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|expectedBytes
argument_list|)
expr_stmt|;
comment|// Verify
name|byte
index|[]
name|actualBytes
init|=
name|Files
operator|.
name|toByteArray
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_readWrite_creates ()
specifier|public
name|void
name|testMap_readWrite_creates
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test data
name|int
name|size
init|=
literal|1024
decl_stmt|;
name|byte
index|[]
name|expectedBytes
init|=
name|newPreFilledByteArray
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|// Setup
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|boolean
name|deleted
init|=
name|file
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test
name|MappedByteBuffer
name|map
init|=
name|Files
operator|.
name|map
argument_list|(
name|file
argument_list|,
name|MapMode
operator|.
name|READ_WRITE
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|expectedBytes
argument_list|)
expr_stmt|;
comment|// Verify
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actualBytes
init|=
name|Files
operator|.
name|toByteArray
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap_readWrite_max_value_plus_1 ()
specifier|public
name|void
name|testMap_readWrite_max_value_plus_1
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
comment|// Test
try|try
block|{
name|Files
operator|.
name|map
argument_list|(
name|file
argument_list|,
name|MapMode
operator|.
name|READ_WRITE
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw when size exceeds Integer.MAX_VALUE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetFileExtension ()
specifier|public
name|void
name|testGetFileExtension
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|".txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"blah.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"blah..txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|".blah.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"/tmp/blah.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"gz"
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"blah.tar.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"..."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"blah."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|".blah."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"/foo.bar/blah"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getFileExtension
argument_list|(
literal|"/foo/.bar/blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetNameWithoutExtension ()
specifier|public
name|void
name|testGetNameWithoutExtension
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|".txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"blah.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah."
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"blah..txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|".blah.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"/tmp/blah.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah.tar"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"blah.tar.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"."
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".."
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"..."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"blah."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|".blah."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"/foo.bar/blah"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|Files
operator|.
name|getNameWithoutExtension
argument_list|(
literal|"/foo/.bar/blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadBytes ()
specifier|public
name|void
name|testReadBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|processor
init|=
operator|new
name|ByteProcessor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|processBytes
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getResult
parameter_list|()
block|{
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
name|Files
operator|.
name|readBytes
argument_list|(
name|asciiFile
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|asList
argument_list|(
name|Files
operator|.
name|toByteArray
argument_list|(
name|asciiFile
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|asList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadBytes_returnFalse ()
specifier|public
name|void
name|testReadBytes_returnFalse
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|processor
init|=
operator|new
name|ByteProcessor
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|processBytes
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getResult
parameter_list|()
block|{
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
name|Files
operator|.
name|readBytes
argument_list|(
name|asciiFile
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testPredicates ()
specifier|public
name|void
name|testPredicates
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|asciiFile
init|=
name|getTestFile
argument_list|(
literal|"ascii.txt"
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
name|asciiFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|()
operator|.
name|apply
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|isFile
argument_list|()
operator|.
name|apply
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|()
operator|.
name|apply
argument_list|(
name|asciiFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isFile
argument_list|()
operator|.
name|apply
argument_list|(
name|asciiFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a root path for the file system. */
DECL|method|root ()
specifier|private
specifier|static
name|File
name|root
parameter_list|()
block|{
return|return
name|File
operator|.
name|listRoots
argument_list|()
index|[
literal|0
index|]
return|;
block|}
comment|/** Returns a {@code File} object for the given path parts. */
DECL|method|file (String first, String... more)
specifier|private
specifier|static
name|File
name|file
parameter_list|(
name|String
name|first
parameter_list|,
name|String
modifier|...
name|more
parameter_list|)
block|{
return|return
name|file
argument_list|(
operator|new
name|File
argument_list|(
name|first
argument_list|)
argument_list|,
name|more
argument_list|)
return|;
block|}
comment|/** Returns a {@code File} object for the given path parts. */
DECL|method|file (File first, String... more)
specifier|private
specifier|static
name|File
name|file
parameter_list|(
name|File
name|first
parameter_list|,
name|String
modifier|...
name|more
parameter_list|)
block|{
comment|// not very efficient, but should definitely be correct
name|File
name|file
init|=
name|first
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|more
control|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
end_class

end_unit

