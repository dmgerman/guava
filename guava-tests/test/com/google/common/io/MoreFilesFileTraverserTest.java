begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Jimfs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MoreFiles#fileTraverser()}.  *  * @author Jens Nyman  */
end_comment

begin_class
DECL|class|MoreFilesFileTraverserTest
specifier|public
class|class
name|MoreFilesFileTraverserTest
extends|extends
name|TestCase
block|{
DECL|field|rootDir
specifier|private
name|Path
name|rootDir
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|rootDir
operator|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|rootDir
operator|.
name|getFileSystem
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileTraverser_emptyDirectory ()
specifier|public
name|void
name|testFileTraverser_emptyDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|rootDir
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_nonExistingFile ()
specifier|public
name|void
name|testFileTraverser_nonExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|rootDir
operator|.
name|resolve
argument_list|(
literal|"file-that-doesnt-exist"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_file ()
specifier|public
name|void
name|testFileTraverser_file
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|newFile
argument_list|(
literal|"some-file"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_singleFile ()
specifier|public
name|void
name|testFileTraverser_singleFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|newFile
argument_list|(
literal|"some-file"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|rootDir
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|rootDir
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_singleDirectory ()
specifier|public
name|void
name|testFileTraverser_singleDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|newDir
argument_list|(
literal|"some-dir"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|rootDir
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|rootDir
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_multipleFilesAndDirectories ()
specifier|public
name|void
name|testFileTraverser_multipleFilesAndDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|fileA
init|=
name|newFile
argument_list|(
literal|"file-a"
argument_list|)
decl_stmt|;
name|Path
name|fileB
init|=
name|newFile
argument_list|(
literal|"file-b"
argument_list|)
decl_stmt|;
name|Path
name|dir1
init|=
name|newDir
argument_list|(
literal|"dir-1"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
name|newDir
argument_list|(
literal|"dir-2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|rootDir
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|rootDir
argument_list|,
name|fileA
argument_list|,
name|fileB
argument_list|,
name|dir1
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_multipleDirectoryLayers_breadthFirstStartsWithTopLayer ()
specifier|public
name|void
name|testFileTraverser_multipleDirectoryLayers_breadthFirstStartsWithTopLayer
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|fileA
init|=
name|newFile
argument_list|(
literal|"file-a"
argument_list|)
decl_stmt|;
name|Path
name|dir1
init|=
name|newDir
argument_list|(
literal|"dir-1"
argument_list|)
decl_stmt|;
name|newFile
argument_list|(
literal|"dir-1/file-b"
argument_list|)
expr_stmt|;
name|newFile
argument_list|(
literal|"dir-1/dir-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|rootDir
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|rootDir
argument_list|,
name|fileA
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTraverser_multipleDirectoryLayers_traversalReturnsAll ()
specifier|public
name|void
name|testFileTraverser_multipleDirectoryLayers_traversalReturnsAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|fileA
init|=
name|newFile
argument_list|(
literal|"file-a"
argument_list|)
decl_stmt|;
name|Path
name|dir1
init|=
name|newDir
argument_list|(
literal|"dir-1"
argument_list|)
decl_stmt|;
name|Path
name|fileB
init|=
name|newFile
argument_list|(
literal|"dir-1/file-b"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
name|newFile
argument_list|(
literal|"dir-1/dir-2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|fileTraverser
argument_list|()
operator|.
name|breadthFirst
argument_list|(
name|rootDir
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|rootDir
argument_list|,
name|fileA
argument_list|,
name|fileB
argument_list|,
name|dir1
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|newDir (String name)
specifier|private
name|Path
name|newDir
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|rootDir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
annotation|@
name|CanIgnoreReturnValue
DECL|method|newFile (String name)
specifier|private
name|Path
name|newFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
name|rootDir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|MoreFiles
operator|.
name|touch
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
block|}
end_class

end_unit

