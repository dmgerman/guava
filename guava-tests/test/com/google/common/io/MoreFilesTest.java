begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|RecursiveDeleteOption
operator|.
name|ALLOW_INSECURE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Feature
operator|.
name|SECURE_DIRECTORY_STREAM
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Feature
operator|.
name|SYMBOLIC_LINKS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|LinkOption
operator|.
name|NOFOLLOW_LINKS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ObjectArrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Jimfs
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MoreFiles}.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|MoreFilesTest
specifier|public
class|class
name|MoreFilesTest
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|TestSuite
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ByteSourceTester
operator|.
name|tests
argument_list|(
literal|"MoreFiles.asByteSource[Path]"
argument_list|,
name|SourceSinkFactories
operator|.
name|pathByteSourceFactory
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ByteSinkTester
operator|.
name|tests
argument_list|(
literal|"MoreFiles.asByteSink[Path]"
argument_list|,
name|SourceSinkFactories
operator|.
name|pathByteSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ByteSinkTester
operator|.
name|tests
argument_list|(
literal|"MoreFiles.asByteSink[Path, APPEND]"
argument_list|,
name|SourceSinkFactories
operator|.
name|appendingPathByteSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSourceTester
operator|.
name|tests
argument_list|(
literal|"MoreFiles.asCharSource[Path, Charset]"
argument_list|,
name|SourceSinkFactories
operator|.
name|pathCharSourceFactory
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSinkTester
operator|.
name|tests
argument_list|(
literal|"MoreFiles.asCharSink[Path, Charset]"
argument_list|,
name|SourceSinkFactories
operator|.
name|pathCharSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CharSinkTester
operator|.
name|tests
argument_list|(
literal|"MoreFiles.asCharSink[Path, Charset, APPEND]"
argument_list|,
name|SourceSinkFactories
operator|.
name|appendingPathCharSinkFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|MoreFilesTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|field|FS
specifier|private
specifier|static
specifier|final
name|FileSystem
name|FS
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
decl_stmt|;
DECL|method|root ()
specifier|private
specifier|static
name|Path
name|root
parameter_list|()
block|{
return|return
name|FS
operator|.
name|getRootDirectories
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
DECL|field|tempDir
specifier|private
name|Path
name|tempDir
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tempDir
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"MoreFilesTest"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|tempDir
operator|!=
literal|null
condition|)
block|{
comment|// delete tempDir and its contents
name|Files
operator|.
name|walkFileTree
argument_list|(
name|tempDir
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|postVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exc
operator|!=
literal|null
condition|)
block|{
return|return
name|FileVisitResult
operator|.
name|TERMINATE
return|;
block|}
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTempFile ()
specifier|private
name|Path
name|createTempFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Files
operator|.
name|createTempFile
argument_list|(
name|tempDir
argument_list|,
literal|"test"
argument_list|,
literal|".test"
argument_list|)
return|;
block|}
DECL|method|testByteSource_size_ofDirectory ()
specifier|public
name|void
name|testByteSource_size_ofDirectory
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|ByteSource
name|source
init|=
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|sizeIfKnown
argument_list|()
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
try|try
block|{
name|source
operator|.
name|size
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testByteSource_size_ofSymlinkToDirectory ()
specifier|public
name|void
name|testByteSource_size_ofSymlinkToDirectory
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Path
name|link
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|link
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|ByteSource
name|source
init|=
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|sizeIfKnown
argument_list|()
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
try|try
block|{
name|source
operator|.
name|size
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testByteSource_size_ofSymlinkToRegularFile ()
specifier|public
name|void
name|testByteSource_size_ofSymlinkToRegularFile
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|file
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|Path
name|link
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|link
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|ByteSource
name|source
init|=
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
operator|(
name|long
operator|)
name|source
operator|.
name|sizeIfKnown
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|source
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testByteSource_size_ofSymlinkToRegularFile_nofollowLinks ()
specifier|public
name|void
name|testByteSource_size_ofSymlinkToRegularFile_nofollowLinks
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|file
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|Path
name|link
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|link
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|ByteSource
name|source
init|=
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|link
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|sizeIfKnown
argument_list|()
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
try|try
block|{
name|source
operator|.
name|size
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testEqual ()
specifier|public
name|void
name|testEqual
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|fooPath
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|barPath
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|MoreFiles
operator|.
name|asCharSink
argument_list|(
name|fooPath
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|write
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|asCharSink
argument_list|(
name|barPath
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|write
argument_list|(
literal|"barbar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooPath
argument_list|,
name|barPath
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooPath
argument_list|,
name|fooPath
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|fooPath
argument_list|)
operator|.
name|contentEquals
argument_list|(
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|fooPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|Path
name|fooCopy
init|=
name|Files
operator|.
name|copy
argument_list|(
name|fooPath
argument_list|,
name|fs
operator|.
name|getPath
argument_list|(
literal|"fooCopy"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|isSameFile
argument_list|(
name|fooPath
argument_list|,
name|fooCopy
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooPath
argument_list|,
name|fooCopy
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|MoreFiles
operator|.
name|asCharSink
argument_list|(
name|fooCopy
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|write
argument_list|(
literal|"boo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|fooPath
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MoreFiles
operator|.
name|asByteSource
argument_list|(
name|fooCopy
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooPath
argument_list|,
name|fooCopy
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// should also assert that a Path that erroneously reports a size 0 can still be compared,
comment|// not sure how to do that with the Path API
block|}
block|}
DECL|method|testEqual_links ()
specifier|public
name|void
name|testEqual_links
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
init|)
block|{
name|Path
name|fooPath
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|MoreFiles
operator|.
name|asCharSink
argument_list|(
name|fooPath
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|write
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|Path
name|fooSymlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"symlink"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|fooSymlink
argument_list|,
name|fooPath
argument_list|)
expr_stmt|;
name|Path
name|fooHardlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"hardlink"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createLink
argument_list|(
name|fooHardlink
argument_list|,
name|fooPath
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooPath
argument_list|,
name|fooSymlink
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooPath
argument_list|,
name|fooHardlink
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MoreFiles
operator|.
name|equal
argument_list|(
name|fooSymlink
argument_list|,
name|fooHardlink
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTouch ()
specifier|public
name|void
name|testTouch
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|touch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|touch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTouchTime ()
specifier|public
name|void
name|testTouchTime
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|temp
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|setLastModifiedTime
argument_list|(
name|temp
argument_list|,
name|FileTime
operator|.
name|fromMillis
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|temp
argument_list|)
operator|.
name|toMillis
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|touch
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|temp
argument_list|)
operator|.
name|toMillis
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirectories_root ()
specifier|public
name|void
name|testCreateParentDirectories_root
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
name|root
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|toRealPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// test that there's no exception
block|}
DECL|method|testCreateParentDirectories_relativePath ()
specifier|public
name|void
name|testCreateParentDirectories_relativePath
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|FS
operator|.
name|getPath
argument_list|(
literal|"nonexistent.file"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// test that there's no exception
block|}
DECL|method|testCreateParentDirectories_noParentsNeeded ()
specifier|public
name|void
name|testCreateParentDirectories_noParentsNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"nonexistent.file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// test that there's no exception
block|}
DECL|method|testCreateParentDirectories_oneParentNeeded ()
specifier|public
name|void
name|testCreateParentDirectories_oneParentNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"parent/nonexistent.file"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirectories_multipleParentsNeeded ()
specifier|public
name|void
name|testCreateParentDirectories_multipleParentsNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"grandparent/parent/nonexistent.file"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|grandparent
init|=
name|parent
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|grandparent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|grandparent
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateParentDirectories_noPermission ()
specifier|public
name|void
name|testCreateParentDirectories_noPermission
parameter_list|()
block|{
name|Path
name|file
init|=
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"parent/nonexistent.file"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// Cleanup in case parent creation was [erroneously] successful.
name|Files
operator|.
name|delete
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCreateParentDirectories_nonDirectoryParentExists ()
specifier|public
name|void
name|testCreateParentDirectories_nonDirectoryParentExists
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|parent
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCreateParentDirectories_symlinkParentExists ()
specifier|public
name|void
name|testCreateParentDirectories_symlinkParentExists
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|symlink
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"linkToDir"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|symlink
argument_list|,
name|root
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|symlink
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|MoreFiles
operator|.
name|createParentDirectories
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFileExtension ()
specifier|public
name|void
name|testGetFileExtension
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah..txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".blah.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"txt"
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"tmp/blah.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"gz"
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah.tar.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|root
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"..."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".blah."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"foo.bar/blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getFileExtension
argument_list|(
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"foo/.bar/blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetNameWithoutExtension ()
specifier|public
name|void
name|testGetNameWithoutExtension
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah."
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah..txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".blah.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"tmp/blah.txt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah.tar"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah.tar.gz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|root
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"."
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".."
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"..."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|"blah."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|FS
operator|.
name|getPath
argument_list|(
literal|".blah."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"foo.bar/blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|MoreFiles
operator|.
name|getNameWithoutExtension
argument_list|(
name|root
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"foo/.bar/blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPredicates ()
specifier|public
name|void
name|testPredicates
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MoreFiles
operator|.
name|isDirectory
argument_list|()
operator|.
name|apply
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MoreFiles
operator|.
name|isRegularFile
argument_list|()
operator|.
name|apply
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MoreFiles
operator|.
name|isDirectory
argument_list|()
operator|.
name|apply
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MoreFiles
operator|.
name|isRegularFile
argument_list|()
operator|.
name|apply
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|symlinkToDir
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"symlinkToDir"
argument_list|)
decl_stmt|;
name|Path
name|symlinkToFile
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"symlinkToFile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|symlinkToDir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|symlinkToFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MoreFiles
operator|.
name|isDirectory
argument_list|()
operator|.
name|apply
argument_list|(
name|symlinkToDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MoreFiles
operator|.
name|isRegularFile
argument_list|()
operator|.
name|apply
argument_list|(
name|symlinkToDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MoreFiles
operator|.
name|isDirectory
argument_list|()
operator|.
name|apply
argument_list|(
name|symlinkToFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MoreFiles
operator|.
name|isRegularFile
argument_list|()
operator|.
name|apply
argument_list|(
name|symlinkToFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MoreFiles
operator|.
name|isDirectory
argument_list|(
name|NOFOLLOW_LINKS
argument_list|)
operator|.
name|apply
argument_list|(
name|symlinkToDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MoreFiles
operator|.
name|isRegularFile
argument_list|(
name|NOFOLLOW_LINKS
argument_list|)
operator|.
name|apply
argument_list|(
name|symlinkToFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new file system for testing that supports the given features in addition to    * supporting symbolic links. The file system is created initially having the following file    * structure:    *    *<pre>    *   /    *      work/    *         dir/    *            a    *            b/    *               g    *               h -> ../a    *               i/    *                  j/    *                     k    *                     l/    *            c    *            d -> b/i    *            e/    *            f -> /dontdelete    *      dontdelete/    *         a    *         b/    *         c    *      symlinktodir -> work/dir    *</pre>    */
DECL|method|newTestFileSystem (Feature... supportedFeatures)
specifier|static
name|FileSystem
name|newTestFileSystem
parameter_list|(
name|Feature
modifier|...
name|supportedFeatures
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setSupportedFeatures
argument_list|(
name|ObjectArrays
operator|.
name|concat
argument_list|(
name|SYMBOLIC_LINKS
argument_list|,
name|supportedFeatures
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/b/i/j/l"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/a"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/c"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/d"
argument_list|)
argument_list|,
name|fs
operator|.
name|getPath
argument_list|(
literal|"b/i"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/e"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/f"
argument_list|)
argument_list|,
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/b/g"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/b/h"
argument_list|)
argument_list|,
name|fs
operator|.
name|getPath
argument_list|(
literal|"../a"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/b/i/j/k"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete/a"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete/b"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete/c"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/symlinktodir"
argument_list|)
argument_list|,
name|fs
operator|.
name|getPath
argument_list|(
literal|"work/dir"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|testDirectoryDeletion_basic ()
specifier|public
name|void
name|testDirectoryDeletion_basic
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DirectoryDeleteMethod
name|method
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DirectoryDeleteMethod
operator|.
name|class
argument_list|)
control|)
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|(
name|SECURE_DIRECTORY_STREAM
argument_list|)
init|)
block|{
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|delete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|method
operator|.
name|assertDeleteSucceeded
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contents of /dontdelete deleted by delete method "
operator|+
name|method
argument_list|,
literal|3
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDirectoryDeletion_emptyDir ()
specifier|public
name|void
name|testDirectoryDeletion_emptyDir
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DirectoryDeleteMethod
name|method
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DirectoryDeleteMethod
operator|.
name|class
argument_list|)
control|)
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|(
name|SECURE_DIRECTORY_STREAM
argument_list|)
init|)
block|{
name|Path
name|emptyDir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|emptyDir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|delete
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
name|method
operator|.
name|assertDeleteSucceeded
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDeleteRecursively_symlinkToDir ()
specifier|public
name|void
name|testDeleteRecursively_symlinkToDir
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|(
name|SECURE_DIRECTORY_STREAM
argument_list|)
init|)
block|{
name|Path
name|symlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/symlinktodir"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|deleteRecursively
argument_list|(
name|symlink
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|symlink
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeleteDirectoryContents_symlinkToDir ()
specifier|public
name|void
name|testDeleteDirectoryContents_symlinkToDir
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|(
name|SECURE_DIRECTORY_STREAM
argument_list|)
init|)
block|{
name|Path
name|symlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/symlinktodir"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|symlink
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|deleteDirectoryContents
argument_list|(
name|symlink
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|symlink
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|symlink
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|symlink
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDirectoryDeletion_sdsNotSupported_fails ()
specifier|public
name|void
name|testDirectoryDeletion_sdsNotSupported_fails
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DirectoryDeleteMethod
name|method
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DirectoryDeleteMethod
operator|.
name|class
argument_list|)
control|)
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|()
init|)
block|{
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|method
operator|.
name|delete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected InsecureRecursiveDeleteException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InsecureRecursiveDeleteException
name|expected
parameter_list|)
block|{         }
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDirectoryDeletion_sdsNotSupported_allowInsecure ()
specifier|public
name|void
name|testDirectoryDeletion_sdsNotSupported_allowInsecure
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DirectoryDeleteMethod
name|method
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DirectoryDeleteMethod
operator|.
name|class
argument_list|)
control|)
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|()
init|)
block|{
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
name|ALLOW_INSECURE
argument_list|)
expr_stmt|;
name|method
operator|.
name|assertDeleteSucceeded
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contents of /dontdelete deleted by delete method "
operator|+
name|method
argument_list|,
literal|3
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDeleteRecursively_symlinkToDir_sdsNotSupported_allowInsecure ()
specifier|public
name|void
name|testDeleteRecursively_symlinkToDir_sdsNotSupported_allowInsecure
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|()
init|)
block|{
name|Path
name|symlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/symlinktodir"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|deleteRecursively
argument_list|(
name|symlink
argument_list|,
name|ALLOW_INSECURE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|symlink
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeleteDirectoryContents_symlinkToDir_sdsNotSupported_allowInsecure ()
specifier|public
name|void
name|testDeleteDirectoryContents_symlinkToDir_sdsNotSupported_allowInsecure
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|()
init|)
block|{
name|Path
name|symlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/symlinktodir"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|deleteDirectoryContents
argument_list|(
name|symlink
argument_list|,
name|ALLOW_INSECURE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test attempts to create a situation in which one thread is constantly changing a file    * from being a real directory to being a symlink to another directory. It then calls    * deleteDirectoryContents thousands of times on a directory whose subtree contains the file    * that's switching between directory and symlink to try to ensure that under no circumstance    * does deleteDirectoryContents follow the symlink to the other directory and delete that    * directory's contents.    *    *<p>We can only test this with a file system that supports SecureDirectoryStream, because it's    * not possible to protect against this if the file system doesn't.    */
DECL|method|testDirectoryDeletion_directorySymlinkRace ()
specifier|public
name|void
name|testDirectoryDeletion_directorySymlinkRace
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DirectoryDeleteMethod
name|method
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DirectoryDeleteMethod
operator|.
name|class
argument_list|)
control|)
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|(
name|SECURE_DIRECTORY_STREAM
argument_list|)
init|)
block|{
name|Path
name|dirToDelete
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/b/i"
argument_list|)
decl_stmt|;
name|Path
name|changingFile
init|=
name|dirToDelete
operator|.
name|resolve
argument_list|(
literal|"j/l"
argument_list|)
decl_stmt|;
name|Path
name|symlinkTarget
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/dontdelete"
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|startDirectorySymlinkSwitching
argument_list|(
name|changingFile
argument_list|,
name|symlinkTarget
argument_list|,
name|executor
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|changingFile
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirToDelete
operator|.
name|resolve
argument_list|(
literal|"j/k"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|expected
parameter_list|)
block|{
comment|// if a file already exists, that's fine... just continue
block|}
try|try
block|{
name|method
operator|.
name|delete
argument_list|(
name|dirToDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|expected
parameter_list|)
block|{
comment|// the delete method may or may not throw an exception, but if it does that's fine
comment|// and expected
block|}
comment|// this test is mainly checking that the contents of /dontdelete aren't deleted under
comment|// any circumstances
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|symlinkTarget
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDeleteRecursively_nonDirectoryFile ()
specifier|public
name|void
name|testDeleteRecursively_nonDirectoryFile
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|newTestFileSystem
argument_list|(
name|SECURE_DIRECTORY_STREAM
argument_list|)
init|)
block|{
name|Path
name|file
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"dir/a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|file
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|deleteRecursively
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|symlink
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/symlinktodir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isSymbolicLink
argument_list|(
name|symlink
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|realSymlinkTarget
init|=
name|symlink
operator|.
name|toRealPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|realSymlinkTarget
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|MoreFiles
operator|.
name|deleteRecursively
argument_list|(
name|symlink
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|symlink
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|realSymlinkTarget
argument_list|,
name|NOFOLLOW_LINKS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Starts a new task on the given executor that switches (deletes and replaces) a file between    * being a directory and being a symlink. The given {@code file} is the file that should switch    * between being a directory and being a symlink, while the given {@code target} is the target    * the symlink should have.    */
DECL|method|startDirectorySymlinkSwitching ( final Path file, final Path target, ExecutorService executor)
specifier|private
specifier|static
name|void
name|startDirectorySymlinkSwitching
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|Path
name|target
parameter_list|,
name|ExecutorService
name|executor
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// go/futurereturn-lsc
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|createSymlink
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
comment|// trying to switch between a real directory and a symlink (dir -> /a)
if|if
condition|(
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|createSymlink
condition|)
block|{
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|file
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|createDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|createSymlink
operator|=
operator|!
name|createSymlink
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|tolerated
parameter_list|)
block|{
comment|// it's expected that some of these will fail
block|}
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
block|}
comment|/**    * Enum defining the two MoreFiles methods that delete directory contents.    */
DECL|enum|DirectoryDeleteMethod
specifier|private
enum|enum
name|DirectoryDeleteMethod
block|{
DECL|enumConstant|DELETE_DIRECTORY_CONTENTS
name|DELETE_DIRECTORY_CONTENTS
block|{
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|RecursiveDeleteOption
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|MoreFiles
operator|.
name|deleteDirectoryContents
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertDeleteSucceeded
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"contents of directory "
operator|+
name|path
operator|+
literal|" not deleted with delete method "
operator|+
name|this
argument_list|,
literal|0
argument_list|,
name|MoreFiles
operator|.
name|listFiles
argument_list|(
name|path
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|DELETE_RECURSIVELY
name|DELETE_RECURSIVELY
block|{
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|RecursiveDeleteOption
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|MoreFiles
operator|.
name|deleteRecursively
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertDeleteSucceeded
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
literal|"file "
operator|+
name|path
operator|+
literal|" not deleted with delete method "
operator|+
name|this
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|delete (Path path, RecursiveDeleteOption... options)
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|RecursiveDeleteOption
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|assertDeleteSucceeded (Path path)
specifier|public
specifier|abstract
name|void
name|assertDeleteSucceeded
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

