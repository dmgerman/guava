begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|TestOption
operator|.
name|CLOSE_THROWS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|TestOption
operator|.
name|OPEN_THROWS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|TestOption
operator|.
name|READ_THROWS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|TestOption
operator|.
name|WRITE_THROWS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_comment
comment|/**  * Tests for the default implementations of {@code CharSink} methods.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|CharSinkTest
specifier|public
class|class
name|CharSinkTest
extends|extends
name|IoTestCase
block|{
DECL|field|STRING
specifier|private
specifier|static
specifier|final
name|String
name|STRING
init|=
name|ASCII
operator|+
name|I18N
decl_stmt|;
DECL|field|sink
specifier|private
name|TestCharSink
name|sink
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|sink
operator|=
operator|new
name|TestCharSink
argument_list|()
expr_stmt|;
block|}
DECL|method|testOpenBufferedStream ()
specifier|public
name|void
name|testOpenBufferedStream
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedWriter
name|writer
init|=
name|sink
operator|.
name|openBufferedStream
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|sink
operator|.
name|wasStreamOpened
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|sink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING
argument_list|,
name|sink
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWrite_string ()
specifier|public
name|void
name|testWrite_string
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|sink
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|sink
operator|.
name|write
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sink
operator|.
name|wasStreamOpened
argument_list|()
operator|&&
name|sink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING
argument_list|,
name|sink
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteFrom_reader ()
specifier|public
name|void
name|testWriteFrom_reader
parameter_list|()
throws|throws
name|IOException
block|{
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
name|sink
operator|.
name|writeFrom
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sink
operator|.
name|wasStreamOpened
argument_list|()
operator|&&
name|sink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING
argument_list|,
name|sink
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteFromStream_doesNotCloseThatStream ()
specifier|public
name|void
name|testWriteFromStream_doesNotCloseThatStream
parameter_list|()
throws|throws
name|IOException
block|{
name|TestReader
name|in
init|=
operator|new
name|TestReader
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|in
operator|.
name|closed
argument_list|()
argument_list|)
expr_stmt|;
name|sink
operator|.
name|writeFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|in
operator|.
name|closed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteLines_withSpecificSeparator ()
specifier|public
name|void
name|testWriteLines_withSpecificSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|sink
operator|.
name|writeLines
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo\nbar\nbaz\n"
argument_list|,
name|sink
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteLines_withDefaultSeparator ()
specifier|public
name|void
name|testWriteLines_withDefaultSeparator
parameter_list|()
throws|throws
name|IOException
block|{
name|sink
operator|.
name|writeLines
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
operator|+
name|separator
operator|+
literal|"bar"
operator|+
name|separator
operator|+
literal|"baz"
operator|+
name|separator
argument_list|,
name|sink
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosesOnErrors_copyingFromCharSourceThatThrows ()
specifier|public
name|void
name|testClosesOnErrors_copyingFromCharSourceThatThrows
parameter_list|()
block|{
for|for
control|(
name|TestOption
name|option
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|OPEN_THROWS
argument_list|,
name|READ_THROWS
argument_list|,
name|CLOSE_THROWS
argument_list|)
control|)
block|{
name|TestCharSource
name|failSource
init|=
operator|new
name|TestCharSource
argument_list|(
name|STRING
argument_list|,
name|option
argument_list|)
decl_stmt|;
name|TestCharSink
name|okSink
init|=
operator|new
name|TestCharSink
argument_list|()
decl_stmt|;
try|try
block|{
name|failSource
operator|.
name|copyTo
argument_list|(
name|okSink
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{       }
comment|// ensure writer was closed IF it was opened (depends on implementation whether or not it's
comment|// opened at all if source.newReader() throws).
name|assertTrue
argument_list|(
literal|"stream not closed when copying from source with option: "
operator|+
name|option
argument_list|,
operator|!
name|okSink
operator|.
name|wasStreamOpened
argument_list|()
operator|||
name|okSink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testClosesOnErrors_whenWriteThrows ()
specifier|public
name|void
name|testClosesOnErrors_whenWriteThrows
parameter_list|()
block|{
name|TestCharSink
name|failSink
init|=
operator|new
name|TestCharSink
argument_list|(
name|WRITE_THROWS
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|TestCharSource
argument_list|(
name|STRING
argument_list|)
operator|.
name|copyTo
argument_list|(
name|failSink
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
name|failSink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosesOnErrors_whenWritingFromReaderThatThrows ()
specifier|public
name|void
name|testClosesOnErrors_whenWritingFromReaderThatThrows
parameter_list|()
block|{
name|TestCharSink
name|okSink
init|=
operator|new
name|TestCharSink
argument_list|()
decl_stmt|;
try|try
block|{
name|okSink
operator|.
name|writeFrom
argument_list|(
operator|new
name|TestReader
argument_list|(
name|READ_THROWS
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
name|okSink
operator|.
name|wasStreamClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

