begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
operator|.
name|base16
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
operator|.
name|base32
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
operator|.
name|base32Hex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
operator|.
name|base64
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
operator|.
name|DecodingException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Tests for {@code BaseEncoding}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|BaseEncodingTest
specifier|public
class|class
name|BaseEncodingTest
extends|extends
name|TestCase
block|{
DECL|method|testSeparatorsExplicitly ()
specifier|public
name|void
name|testSeparatorsExplicitly
parameter_list|()
block|{
name|testEncodes
argument_list|(
name|base64
argument_list|()
operator|.
name|withSeparator
argument_list|(
literal|"\n"
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9\nvYm\nFy"
argument_list|)
expr_stmt|;
name|testEncodes
argument_list|(
name|base64
argument_list|()
operator|.
name|withSeparator
argument_list|(
literal|"$"
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9v$YmFy"
argument_list|)
expr_stmt|;
name|testEncodes
argument_list|(
name|base32
argument_list|()
operator|.
name|withSeparator
argument_list|(
literal|"*"
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|"MZXW*6YTB*OI==*===="
argument_list|)
expr_stmt|;
block|}
DECL|method|testSeparatorSameAsPadChar ()
specifier|public
name|void
name|testSeparatorSameAsPadChar
parameter_list|()
block|{
try|try
block|{
name|BaseEncoding
name|unused
init|=
name|base64
argument_list|()
operator|.
name|withSeparator
argument_list|(
literal|"="
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|BaseEncoding
name|unused
init|=
name|base64
argument_list|()
operator|.
name|withPadChar
argument_list|(
literal|'#'
argument_list|)
operator|.
name|withSeparator
argument_list|(
literal|"!#!"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testAtMostOneSeparator ()
specifier|public
name|void
name|testAtMostOneSeparator
parameter_list|()
block|{
name|BaseEncoding
name|separated
init|=
name|base64
argument_list|()
operator|.
name|withSeparator
argument_list|(
literal|"\n"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|BaseEncoding
name|unused
init|=
name|separated
operator|.
name|withSeparator
argument_list|(
literal|"$"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBase64 ()
specifier|public
name|void
name|testBase64
parameter_list|()
block|{
comment|// The following test vectors are specified in RFC 4648 itself
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"Zg=="
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"Zm8="
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"Zm9v"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"Zm9vYg=="
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"Zm9vYmE="
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testBase64Streaming ()
specifier|public
name|void
name|testBase64Streaming
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The following test vectors are specified in RFC 4648 itself
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"Zg=="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"Zm8="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"Zm9v"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"Zm9vYg=="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"Zm9vYmE="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase64LenientPadding ()
specifier|public
name|void
name|testBase64LenientPadding
parameter_list|()
block|{
name|testDecodes
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"Zg"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"Zg="
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"Zg=="
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
comment|// proper padding length
name|testDecodes
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"Zg==="
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"Zg===="
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase64InvalidDecodings ()
specifier|public
name|void
name|testBase64InvalidDecodings
parameter_list|()
block|{
comment|// These contain bytes not in the decodabet.
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"A\u007f"
argument_list|,
literal|"Unrecognized character: 0x7f"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"Wf2!"
argument_list|,
literal|"Unrecognized character: !"
argument_list|)
expr_stmt|;
comment|// This sentence just isn't base64() encoded.
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"let's not talk of love or chains!"
argument_list|)
expr_stmt|;
comment|// A 4n+1 length string is never legal base64().
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"12345"
argument_list|,
literal|"Invalid input length 5"
argument_list|)
expr_stmt|;
comment|// These have a combination of invalid length, unrecognized characters and wrong padding.
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"AB=C"
argument_list|,
literal|"Unrecognized character: ="
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"A=BCD"
argument_list|,
literal|"Invalid input length 5"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"?"
argument_list|,
literal|"Invalid input length 1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase64CannotUpperCase ()
specifier|public
name|void
name|testBase64CannotUpperCase
parameter_list|()
block|{
try|try
block|{
name|BaseEncoding
name|unused
init|=
name|base64
argument_list|()
operator|.
name|upperCase
argument_list|()
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testBase64CannotLowerCase ()
specifier|public
name|void
name|testBase64CannotLowerCase
parameter_list|()
block|{
try|try
block|{
name|BaseEncoding
name|unused
init|=
name|base64
argument_list|()
operator|.
name|lowerCase
argument_list|()
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testBase64AlternatePadding ()
specifier|public
name|void
name|testBase64AlternatePadding
parameter_list|()
block|{
name|BaseEncoding
name|enc
init|=
name|base64
argument_list|()
operator|.
name|withPadChar
argument_list|(
literal|'~'
argument_list|)
decl_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"f"
argument_list|,
literal|"Zg~~"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fo"
argument_list|,
literal|"Zm8~"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foo"
argument_list|,
literal|"Zm9v"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foob"
argument_list|,
literal|"Zm9vYg~~"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fooba"
argument_list|,
literal|"Zm9vYmE~"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testBase64StreamingAlternatePadding ()
specifier|public
name|void
name|testBase64StreamingAlternatePadding
parameter_list|()
throws|throws
name|IOException
block|{
name|BaseEncoding
name|enc
init|=
name|base64
argument_list|()
operator|.
name|withPadChar
argument_list|(
literal|'~'
argument_list|)
decl_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"f"
argument_list|,
literal|"Zg~~"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fo"
argument_list|,
literal|"Zm8~"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foo"
argument_list|,
literal|"Zm9v"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foob"
argument_list|,
literal|"Zm9vYg~~"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fooba"
argument_list|,
literal|"Zm9vYmE~"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase64OmitPadding ()
specifier|public
name|void
name|testBase64OmitPadding
parameter_list|()
block|{
name|BaseEncoding
name|enc
init|=
name|base64
argument_list|()
operator|.
name|omitPadding
argument_list|()
decl_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"f"
argument_list|,
literal|"Zg"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fo"
argument_list|,
literal|"Zm8"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foo"
argument_list|,
literal|"Zm9v"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foob"
argument_list|,
literal|"Zm9vYg"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fooba"
argument_list|,
literal|"Zm9vYmE"
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testBase64StreamingOmitPadding ()
specifier|public
name|void
name|testBase64StreamingOmitPadding
parameter_list|()
throws|throws
name|IOException
block|{
name|BaseEncoding
name|enc
init|=
name|base64
argument_list|()
operator|.
name|omitPadding
argument_list|()
decl_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"f"
argument_list|,
literal|"Zg"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fo"
argument_list|,
literal|"Zm8"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foo"
argument_list|,
literal|"Zm9v"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foob"
argument_list|,
literal|"Zm9vYg"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"fooba"
argument_list|,
literal|"Zm9vYmE"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|enc
argument_list|,
literal|"foobar"
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase64Offset ()
specifier|public
name|void
name|testBase64Offset
parameter_list|()
block|{
name|testEncodesWithOffset
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|"Zm9vYmFy"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"b29iYXI="
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"b2Jh"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"Yg=="
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base64
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32 ()
specifier|public
name|void
name|testBase32
parameter_list|()
block|{
comment|// The following test vectors are specified in RFC 4648 itself
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"MY======"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"MZXQ===="
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"MZXW6==="
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"MZXW6YQ="
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"MZXW6YTB"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"MZXW6YTBOI======"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testBase32Streaming ()
specifier|public
name|void
name|testBase32Streaming
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The following test vectors are specified in RFC 4648 itself
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"MY======"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"MZXQ===="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"MZXW6==="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"MZXW6YQ="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"MZXW6YTB"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"MZXW6YTBOI======"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32LenientPadding ()
specifier|public
name|void
name|testBase32LenientPadding
parameter_list|()
block|{
name|testDecodes
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"MZXW6"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"MZXW6="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"MZXW6=="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"MZXW6==="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// proper padding length
name|testDecodes
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"MZXW6===="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"MZXW6====="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32AlternatePadding ()
specifier|public
name|void
name|testBase32AlternatePadding
parameter_list|()
block|{
name|BaseEncoding
name|enc
init|=
name|base32
argument_list|()
operator|.
name|withPadChar
argument_list|(
literal|'~'
argument_list|)
decl_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|"f"
argument_list|,
literal|"MY~~~~~~"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|"fo"
argument_list|,
literal|"MZXQ~~~~"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|"foo"
argument_list|,
literal|"MZXW6~~~"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|"foob"
argument_list|,
literal|"MZXW6YQ~"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|"fooba"
argument_list|,
literal|"MZXW6YTB"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|enc
argument_list|,
literal|"foobar"
argument_list|,
literal|"MZXW6YTBOI~~~~~~"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32InvalidDecodings ()
specifier|public
name|void
name|testBase32InvalidDecodings
parameter_list|()
block|{
comment|// These contain bytes not in the decodabet.
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"A "
argument_list|,
literal|"Unrecognized character: 0x20"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"Wf2!"
argument_list|,
literal|"Unrecognized character: f"
argument_list|)
expr_stmt|;
comment|// This sentence just isn't base32() encoded.
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"let's not talk of love or chains!"
argument_list|)
expr_stmt|;
comment|// An 8n+{1,3,6} length string is never legal base32.
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"A"
argument_list|,
literal|"Invalid input length 1"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"ABC"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"ABCDEF"
argument_list|)
expr_stmt|;
comment|// These have a combination of invalid length, unrecognized characters and wrong padding.
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"AB=C"
argument_list|,
literal|"Unrecognized character: ="
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"A=BCDE"
argument_list|,
literal|"Invalid input length 6"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"?"
argument_list|,
literal|"Invalid input length 1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32UpperCaseIsNoOp ()
specifier|public
name|void
name|testBase32UpperCaseIsNoOp
parameter_list|()
block|{
name|assertSame
argument_list|(
name|base32
argument_list|()
argument_list|,
name|base32
argument_list|()
operator|.
name|upperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32Offset ()
specifier|public
name|void
name|testBase32Offset
parameter_list|()
block|{
name|testEncodesWithOffset
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|"MZXW6YTBOI======"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"N5XWEYLS"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"N5RGC==="
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"MI======"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base32
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32Hex ()
specifier|public
name|void
name|testBase32Hex
parameter_list|()
block|{
comment|// The following test vectors are specified in RFC 4648 itself
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"CO======"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"CPNG===="
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"CPNMU==="
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"CPNMUOG="
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"CPNMUOJ1"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"CPNMUOJ1E8======"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testBase32HexStreaming ()
specifier|public
name|void
name|testBase32HexStreaming
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The following test vectors are specified in RFC 4648 itself
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"CO======"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"CPNG===="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"CPNMU==="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"CPNMUOG="
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"CPNMUOJ1"
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithCasing
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"CPNMUOJ1E8======"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32HexLenientPadding ()
specifier|public
name|void
name|testBase32HexLenientPadding
parameter_list|()
block|{
name|testDecodes
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"CPNMU"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"CPNMU="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"CPNMU=="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"CPNMU==="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// proper padding length
name|testDecodes
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"CPNMU===="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"CPNMU====="
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32HexInvalidDecodings ()
specifier|public
name|void
name|testBase32HexInvalidDecodings
parameter_list|()
block|{
comment|// These contain bytes not in the decodabet.
name|assertFailsToDecode
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"A\u007f"
argument_list|,
literal|"Unrecognized character: 0x7f"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"Wf2!"
argument_list|,
literal|"Unrecognized character: W"
argument_list|)
expr_stmt|;
comment|// This sentence just isn't base32 encoded.
name|assertFailsToDecode
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"let's not talk of love or chains!"
argument_list|)
expr_stmt|;
comment|// An 8n+{1,3,6} length string is never legal base32.
name|assertFailsToDecode
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"ABC"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
literal|"ABCDEF"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase32HexUpperCaseIsNoOp ()
specifier|public
name|void
name|testBase32HexUpperCaseIsNoOp
parameter_list|()
block|{
name|assertSame
argument_list|(
name|base32Hex
argument_list|()
argument_list|,
name|base32Hex
argument_list|()
operator|.
name|upperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase16 ()
specifier|public
name|void
name|testBase16
parameter_list|()
block|{
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"f"
argument_list|,
literal|"66"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"fo"
argument_list|,
literal|"666F"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"666F6F"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foob"
argument_list|,
literal|"666F6F62"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"fooba"
argument_list|,
literal|"666F6F6261"
argument_list|)
expr_stmt|;
name|testEncodingWithCasing
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|"666F6F626172"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase16UpperCaseIsNoOp ()
specifier|public
name|void
name|testBase16UpperCaseIsNoOp
parameter_list|()
block|{
name|assertSame
argument_list|(
name|base16
argument_list|()
argument_list|,
name|base16
argument_list|()
operator|.
name|upperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase16InvalidDecodings ()
specifier|public
name|void
name|testBase16InvalidDecodings
parameter_list|()
block|{
comment|// These contain bytes not in the decodabet.
name|assertFailsToDecode
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"\n\n"
argument_list|,
literal|"Unrecognized character: 0xa"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"EFGH"
argument_list|,
literal|"Unrecognized character: G"
argument_list|)
expr_stmt|;
comment|// Valid base16 strings always have an even length.
name|assertFailsToDecode
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"A"
argument_list|,
literal|"Invalid input length 1"
argument_list|)
expr_stmt|;
name|assertFailsToDecode
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"ABC"
argument_list|)
expr_stmt|;
comment|// These have a combination of invalid length and unrecognized characters.
name|assertFailsToDecode
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"?"
argument_list|,
literal|"Invalid input length 1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBase16Offset ()
specifier|public
name|void
name|testBase16Offset
parameter_list|()
block|{
name|testEncodesWithOffset
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|"666F6F626172"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"6F6F626172"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"6F6261"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"62"
argument_list|)
expr_stmt|;
name|testEncodesWithOffset
argument_list|(
name|base16
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncodingWithCasing ( BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testEncodingWithCasing
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
name|testEncodingWithSeparators
argument_list|(
name|encoding
argument_list|,
name|decoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|encoding
operator|.
name|upperCase
argument_list|()
argument_list|,
name|decoded
argument_list|,
name|Ascii
operator|.
name|toUpperCase
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|testEncodingWithSeparators
argument_list|(
name|encoding
operator|.
name|lowerCase
argument_list|()
argument_list|,
name|decoded
argument_list|,
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncodingWithSeparators ( BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testEncodingWithSeparators
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
name|testEncoding
argument_list|(
name|encoding
argument_list|,
name|decoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
comment|// test separators work
for|for
control|(
name|int
name|sepLength
init|=
literal|3
init|;
name|sepLength
operator|<=
literal|5
condition|;
name|sepLength
operator|++
control|)
block|{
for|for
control|(
name|String
name|separator
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|","
argument_list|,
literal|"\n"
argument_list|,
literal|";;"
argument_list|,
literal|""
argument_list|)
control|)
block|{
name|testEncoding
argument_list|(
name|encoding
operator|.
name|withSeparator
argument_list|(
name|separator
argument_list|,
name|sepLength
argument_list|)
argument_list|,
name|decoded
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
name|separator
argument_list|)
operator|.
name|join
argument_list|(
name|Splitter
operator|.
name|fixedLength
argument_list|(
name|sepLength
argument_list|)
operator|.
name|split
argument_list|(
name|encoded
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEncoding (BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testEncoding
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
name|testEncodes
argument_list|(
name|encoding
argument_list|,
name|decoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|testDecodes
argument_list|(
name|encoding
argument_list|,
name|encoded
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncodes (BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testEncodes
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
name|assertThat
argument_list|(
name|encoding
operator|.
name|encode
argument_list|(
name|decoded
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncodesWithOffset ( BaseEncoding encoding, String decoded, int offset, int len, String encoded)
specifier|private
specifier|static
name|void
name|testEncodesWithOffset
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
name|assertThat
argument_list|(
name|encoding
operator|.
name|encode
argument_list|(
name|decoded
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecodes (BaseEncoding encoding, String encoded, String decoded)
specifier|private
specifier|static
name|void
name|testDecodes
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|encoded
parameter_list|,
name|String
name|decoded
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|encoding
operator|.
name|canDecode
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|encoding
operator|.
name|decode
argument_list|(
name|encoded
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|decoded
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailsToDecode (BaseEncoding encoding, String cannotDecode)
specifier|private
specifier|static
name|void
name|assertFailsToDecode
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|cannotDecode
parameter_list|)
block|{
name|assertFailsToDecode
argument_list|(
name|encoding
argument_list|,
name|cannotDecode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailsToDecode ( BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage)
specifier|private
specifier|static
name|void
name|assertFailsToDecode
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|cannotDecode
parameter_list|,
annotation|@
name|Nullable
name|String
name|expectedMessage
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|encoding
operator|.
name|canDecode
argument_list|(
name|cannotDecode
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|unused
init|=
name|encoding
operator|.
name|decode
argument_list|(
name|cannotDecode
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expectedMessage
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|hasMessage
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|byte
index|[]
name|unused
init|=
name|encoding
operator|.
name|decodeChecked
argument_list|(
name|cannotDecode
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected DecodingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DecodingException
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expectedMessage
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testStreamingEncodingWithCasing ( BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testStreamingEncodingWithCasing
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
throws|throws
name|IOException
block|{
name|testStreamingEncodingWithSeparators
argument_list|(
name|encoding
argument_list|,
name|decoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|encoding
operator|.
name|upperCase
argument_list|()
argument_list|,
name|decoded
argument_list|,
name|Ascii
operator|.
name|toUpperCase
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|testStreamingEncodingWithSeparators
argument_list|(
name|encoding
operator|.
name|lowerCase
argument_list|()
argument_list|,
name|decoded
argument_list|,
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testStreamingEncodingWithSeparators ( BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testStreamingEncodingWithSeparators
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
throws|throws
name|IOException
block|{
name|testStreamingEncoding
argument_list|(
name|encoding
argument_list|,
name|decoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
comment|// test separators work
for|for
control|(
name|int
name|sepLength
init|=
literal|3
init|;
name|sepLength
operator|<=
literal|5
condition|;
name|sepLength
operator|++
control|)
block|{
for|for
control|(
name|String
name|separator
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|","
argument_list|,
literal|"\n"
argument_list|,
literal|";;"
argument_list|,
literal|""
argument_list|)
control|)
block|{
name|testStreamingEncoding
argument_list|(
name|encoding
operator|.
name|withSeparator
argument_list|(
name|separator
argument_list|,
name|sepLength
argument_list|)
argument_list|,
name|decoded
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
name|separator
argument_list|)
operator|.
name|join
argument_list|(
name|Splitter
operator|.
name|fixedLength
argument_list|(
name|sepLength
argument_list|)
operator|.
name|split
argument_list|(
name|encoded
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// Reader/Writer
DECL|method|testStreamingEncoding (BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testStreamingEncoding
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
throws|throws
name|IOException
block|{
name|testStreamingEncodes
argument_list|(
name|encoding
argument_list|,
name|decoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|testStreamingDecodes
argument_list|(
name|encoding
argument_list|,
name|encoded
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Writer
DECL|method|testStreamingEncodes (BaseEncoding encoding, String decoded, String encoded)
specifier|private
specifier|static
name|void
name|testStreamingEncodes
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|decoded
parameter_list|,
name|String
name|encoded
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|OutputStream
name|encodingStream
init|=
name|encoding
operator|.
name|encodingStream
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|encodingStream
operator|.
name|write
argument_list|(
name|decoded
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|encodingStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Reader
DECL|method|testStreamingDecodes (BaseEncoding encoding, String encoded, String decoded)
specifier|private
specifier|static
name|void
name|testStreamingDecodes
parameter_list|(
name|BaseEncoding
name|encoding
parameter_list|,
name|String
name|encoded
parameter_list|,
name|String
name|decoded
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|decoded
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|InputStream
name|decodingStream
init|=
name|encoding
operator|.
name|decodingStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|encoded
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|decodingStream
operator|.
name|read
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|bytes
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|decodingStream
operator|.
name|read
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|decodingStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"BaseEncoding.base64().withPadChar(=)"
argument_list|,
name|base64
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BaseEncoding.base32Hex().omitPadding()"
argument_list|,
name|base32Hex
argument_list|()
operator|.
name|omitPadding
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BaseEncoding.base32().lowerCase().withPadChar($)"
argument_list|,
name|base32
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|withPadChar
argument_list|(
literal|'$'
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BaseEncoding.base16().withSeparator(\"\n\", 10)"
argument_list|,
name|base16
argument_list|()
operator|.
name|withSeparator
argument_list|(
literal|"\n"
argument_list|,
literal|10
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

