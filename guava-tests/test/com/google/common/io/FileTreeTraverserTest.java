begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Files#fileTreeViewer}.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|FileTreeTraverserTest
specifier|public
class|class
name|FileTreeTraverserTest
extends|extends
name|TestCase
block|{
DECL|field|dir
specifier|private
name|File
name|dir
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|=
name|Files
operator|.
name|createTempDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// we aren't creating any files in subdirs
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileTreeViewer_emptyDir ()
specifier|public
name|void
name|testFileTreeViewer_emptyDir
parameter_list|()
throws|throws
name|IOException
block|{
name|assertDirChildren
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileTreeViewer_singleFile ()
specifier|public
name|void
name|testFileTreeViewer_singleFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|newFile
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertDirChildren
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTreeViewer_singleDir ()
specifier|public
name|void
name|testFileTreeViewer_singleDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|newDir
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertDirChildren
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileTreeViewer_multipleFiles ()
specifier|public
name|void
name|testFileTreeViewer_multipleFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|a
init|=
name|newFile
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|File
name|b
init|=
name|newDir
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|File
name|c
init|=
name|newFile
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|File
name|d
init|=
name|newDir
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|assertDirChildren
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|newDir (String name)
specifier|private
name|File
name|newDir
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|file
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|newFile (String name)
specifier|private
name|File
name|newFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|assertDirChildren (File... files)
specifier|private
name|void
name|assertDirChildren
parameter_list|(
name|File
modifier|...
name|files
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|files
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Files
operator|.
name|fileTreeTraverser
argument_list|()
operator|.
name|children
argument_list|(
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

