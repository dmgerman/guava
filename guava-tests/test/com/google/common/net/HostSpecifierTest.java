begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * {@link TestCase} for {@link HostSpecifier}.  This is a relatively  * cursory test, as HostSpecifier is a thin wrapper around  * {@link InetAddresses} and {@link InternetDomainName}; the unit tests for  * those classes explore numerous corner cases.  The intent here is to  * confirm that everything is wired up properly.  *  * @author Craig Berry  */
end_comment

begin_class
DECL|class|HostSpecifierTest
specifier|public
specifier|final
class|class
name|HostSpecifierTest
extends|extends
name|TestCase
block|{
DECL|field|GOOD_IPS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|GOOD_IPS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"2001:db8::1"
argument_list|,
literal|"[2001:db8::1]"
argument_list|)
decl_stmt|;
DECL|field|BAD_IPS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BAD_IPS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"1.2.3"
argument_list|,
literal|"2001:db8::1::::::0"
argument_list|,
literal|"[2001:db8::1"
argument_list|,
literal|"[::]:80"
argument_list|)
decl_stmt|;
DECL|field|GOOD_DOMAINS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|GOOD_DOMAINS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"com"
argument_list|,
literal|"google.com"
argument_list|,
literal|"foo.co.uk"
argument_list|)
decl_stmt|;
DECL|field|BAD_DOMAINS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BAD_DOMAINS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo.blah"
argument_list|,
literal|""
argument_list|,
literal|"[google.com]"
argument_list|)
decl_stmt|;
DECL|method|testGoodIpAddresses ()
specifier|public
name|void
name|testGoodIpAddresses
parameter_list|()
throws|throws
name|ParseException
block|{
for|for
control|(
name|String
name|spec
range|:
name|GOOD_IPS
control|)
block|{
name|assertGood
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadIpAddresses ()
specifier|public
name|void
name|testBadIpAddresses
parameter_list|()
block|{
for|for
control|(
name|String
name|spec
range|:
name|BAD_IPS
control|)
block|{
name|assertBad
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGoodDomains ()
specifier|public
name|void
name|testGoodDomains
parameter_list|()
throws|throws
name|ParseException
block|{
for|for
control|(
name|String
name|spec
range|:
name|GOOD_DOMAINS
control|)
block|{
name|assertGood
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadDomains ()
specifier|public
name|void
name|testBadDomains
parameter_list|()
block|{
for|for
control|(
name|String
name|spec
range|:
name|BAD_DOMAINS
control|)
block|{
name|assertBad
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEquality ()
specifier|public
name|void
name|testEquality
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|spec
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|,
name|spec
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|spec
argument_list|(
literal|"2001:db8::1"
argument_list|)
argument_list|,
name|spec
argument_list|(
literal|"2001:db8::1"
argument_list|)
argument_list|,
name|spec
argument_list|(
literal|"[2001:db8::1]"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|spec
argument_list|(
literal|"2001:db8::2"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|spec
argument_list|(
literal|"google.com"
argument_list|)
argument_list|,
name|spec
argument_list|(
literal|"google.com"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|spec
argument_list|(
literal|"www.google.com"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|spec (String specifier)
specifier|private
specifier|static
name|HostSpecifier
name|spec
parameter_list|(
name|String
name|specifier
parameter_list|)
block|{
return|return
name|HostSpecifier
operator|.
name|fromValid
argument_list|(
name|specifier
argument_list|)
return|;
block|}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
specifier|final
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|HostSpecifier
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|HostSpecifier
operator|.
name|fromValid
argument_list|(
literal|"google.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGood (String spec)
specifier|private
name|void
name|assertGood
parameter_list|(
name|String
name|spec
parameter_list|)
throws|throws
name|ParseException
block|{
name|HostSpecifier
operator|.
name|fromValid
argument_list|(
name|spec
argument_list|)
expr_stmt|;
comment|// Throws exception if not working correctly
name|HostSpecifier
operator|.
name|from
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HostSpecifier
operator|.
name|isValid
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBad (String spec)
specifier|private
name|void
name|assertBad
parameter_list|(
name|String
name|spec
parameter_list|)
block|{
try|try
block|{
name|HostSpecifier
operator|.
name|fromValid
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IllegalArgumentException: "
operator|+
name|spec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// Expected outcome
block|}
try|try
block|{
name|HostSpecifier
operator|.
name|from
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown ParseException: "
operator|+
name|spec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|HostSpecifier
operator|.
name|isValid
argument_list|(
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

