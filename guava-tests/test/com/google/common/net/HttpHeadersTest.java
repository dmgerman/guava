begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_comment
comment|/**  * Tests for the HttpHeaders class.  *  * @author Kurt Aflred Kluever  */
end_comment

begin_class
DECL|class|HttpHeadersTest
specifier|public
class|class
name|HttpHeadersTest
extends|extends
name|TestCase
block|{
DECL|method|testConstantNameMatchesString ()
specifier|public
name|void
name|testConstantNameMatchesString
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Field
name|field
range|:
name|HttpHeaders
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
comment|/*        * Coverage mode generates synthetic fields.  If we ever add private        * fields, they will cause similar problems, and we may want to switch        * this check to isAccessible().        */
if|if
condition|(
operator|!
name|field
operator|.
name|isSynthetic
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|upperToHttpHeaderName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|upperToHttpHeaderName (String constantName)
specifier|private
specifier|static
name|String
name|upperToHttpHeaderName
parameter_list|(
name|String
name|constantName
parameter_list|)
block|{
comment|// Special case some of the weird HTTP Header names...
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"TE"
argument_list|)
condition|)
block|{
return|return
literal|"TE"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"CONTENT_MD5"
argument_list|)
condition|)
block|{
return|return
literal|"Content-MD5"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"ETAG"
argument_list|)
condition|)
block|{
return|return
literal|"ETag"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"P3P"
argument_list|)
condition|)
block|{
return|return
literal|"P3P"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"WWW_AUTHENTICATE"
argument_list|)
condition|)
block|{
return|return
literal|"WWW-Authenticate"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"X_XSS_PROTECTION"
argument_list|)
condition|)
block|{
return|return
literal|"X-XSS-Protection"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"X_USER_IP"
argument_list|)
condition|)
block|{
return|return
literal|"X-User-IP"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"DNT"
argument_list|)
condition|)
block|{
return|return
literal|"DNT"
return|;
block|}
elseif|else
if|if
condition|(
name|constantName
operator|.
name|equals
argument_list|(
literal|"LAST_EVENT_ID"
argument_list|)
condition|)
block|{
return|return
literal|"Last-Event-ID"
return|;
block|}
name|boolean
name|toLower
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|constantName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|constantName
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|toLower
condition|?
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
else|:
name|c
argument_list|)
expr_stmt|;
name|toLower
operator|=
operator|(
name|c
operator|!=
literal|'-'
operator|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

