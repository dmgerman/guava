begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Strings}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|StringsTest
specifier|public
class|class
name|StringsTest
extends|extends
name|TestCase
block|{
DECL|method|testNullToEmpty ()
specifier|public
name|void
name|testNullToEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|nullToEmpty
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|nullToEmpty
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Strings
operator|.
name|nullToEmpty
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyToNull ()
specifier|public
name|void
name|testEmptyToNull
parameter_list|()
block|{
name|assertNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Strings
operator|.
name|emptyToNull
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsNullOrEmpty ()
specifier|public
name|void
name|testIsNullOrEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPadStart_noPadding ()
specifier|public
name|void
name|testPadStart_noPadding
parameter_list|()
block|{
name|assertSame
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"x"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"x"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"xx"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"xx"
argument_list|,
literal|0
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"xx"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"xx"
argument_list|,
literal|2
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPadStart_somePadding ()
specifier|public
name|void
name|testPadStart_somePadding
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"-"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"--"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-x"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"x"
argument_list|,
literal|2
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"--x"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"x"
argument_list|,
literal|3
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-xx"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"xx"
argument_list|,
literal|3
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPadStart_negativeMinLength ()
specifier|public
name|void
name|testPadStart_negativeMinLength
parameter_list|()
block|{
name|assertSame
argument_list|(
literal|"x"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|"x"
argument_list|,
operator|-
literal|1
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: could remove if we got NPT working in GWT somehow
DECL|method|testPadStart_null ()
specifier|public
name|void
name|testPadStart_null
parameter_list|()
block|{
try|try
block|{
name|String
name|unused
init|=
name|Strings
operator|.
name|padStart
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|,
literal|'0'
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPadEnd_noPadding ()
specifier|public
name|void
name|testPadEnd_noPadding
parameter_list|()
block|{
name|assertSame
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"x"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"x"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"xx"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"xx"
argument_list|,
literal|0
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"xx"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"xx"
argument_list|,
literal|2
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPadEnd_somePadding ()
specifier|public
name|void
name|testPadEnd_somePadding
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"-"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"--"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x-"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"x"
argument_list|,
literal|2
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x--"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"x"
argument_list|,
literal|3
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xx-"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"xx"
argument_list|,
literal|3
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPadEnd_negativeMinLength ()
specifier|public
name|void
name|testPadEnd_negativeMinLength
parameter_list|()
block|{
name|assertSame
argument_list|(
literal|"x"
argument_list|,
name|Strings
operator|.
name|padEnd
argument_list|(
literal|"x"
argument_list|,
operator|-
literal|1
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: could remove if we got NPT working in GWT somehow
DECL|method|testPadEnd_null ()
specifier|public
name|void
name|testPadEnd_null
parameter_list|()
block|{
try|try
block|{
name|String
name|unused
init|=
name|Strings
operator|.
name|padEnd
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|,
literal|'0'
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testRepeat ()
specifier|public
name|void
name|testRepeat
parameter_list|()
block|{
name|String
name|input
init|=
literal|"20"
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
name|input
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"20"
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
name|input
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2020"
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
name|input
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"202020"
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
name|input
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
literal|""
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|Strings
operator|.
name|repeat
argument_list|(
name|input
argument_list|,
name|i
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|unused
init|=
name|Strings
operator|.
name|repeat
argument_list|(
literal|"x"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
comment|// Massive string
name|String
name|unused
init|=
name|Strings
operator|.
name|repeat
argument_list|(
literal|"12345678"
argument_list|,
operator|(
literal|1
operator|<<
literal|30
operator|)
operator|+
literal|3
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
comment|// TODO: could remove if we got NPT working in GWT somehow
DECL|method|testRepeat_null ()
specifier|public
name|void
name|testRepeat_null
parameter_list|()
block|{
try|try
block|{
name|String
name|unused
init|=
name|Strings
operator|.
name|repeat
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCommonPrefix ()
specifier|public
name|void
name|testCommonPrefix
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|""
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abcde"
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"xyz"
argument_list|,
literal|"abcde"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"xyz"
argument_list|,
literal|"abcxyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aa"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"aa"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
literal|"abcxyz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Identical valid surrogate pairs.
name|assertEquals
argument_list|(
literal|"abc\uD8AB\uDCAB"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc\uD8AB\uDCABdef"
argument_list|,
literal|"abc\uD8AB\uDCABxyz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Differing valid surrogate pairs.
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc\uD8AB\uDCABdef"
argument_list|,
literal|"abc\uD8AB\uDCACxyz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// One invalid pair.
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc\uD8AB\uDCABdef"
argument_list|,
literal|"abc\uD8AB\uD8ABxyz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two identical invalid pairs.
name|assertEquals
argument_list|(
literal|"abc\uD8AB\uD8AC"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc\uD8AB\uD8ACdef"
argument_list|,
literal|"abc\uD8AB\uD8ACxyz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two differing invalid pairs.
name|assertEquals
argument_list|(
literal|"abc\uD8AB"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"abc\uD8AB\uD8ABdef"
argument_list|,
literal|"abc\uD8AB\uD8ACxyz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// One orphan high surrogate.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"\uD8AB\uDCAB"
argument_list|,
literal|"\uD8AB"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two orphan high surrogates.
name|assertEquals
argument_list|(
literal|"\uD8AB"
argument_list|,
name|Strings
operator|.
name|commonPrefix
argument_list|(
literal|"\uD8AB"
argument_list|,
literal|"\uD8AB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonSuffix ()
specifier|public
name|void
name|testCommonSuffix
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|""
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abcde"
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"xyz"
argument_list|,
literal|"abcde"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"xyz"
argument_list|,
literal|"xyzabc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc"
argument_list|,
literal|"ccccc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aa"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"aa"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"xyzabc"
argument_list|)
argument_list|,
literal|"xxxabc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Identical valid surrogate pairs.
name|assertEquals
argument_list|(
literal|"\uD8AB\uDCABdef"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc\uD8AB\uDCABdef"
argument_list|,
literal|"xyz\uD8AB\uDCABdef"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Differing valid surrogate pairs.
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc\uD8AB\uDCABdef"
argument_list|,
literal|"abc\uD8AC\uDCABdef"
argument_list|)
argument_list|)
expr_stmt|;
comment|// One invalid pair.
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc\uD8AB\uDCABdef"
argument_list|,
literal|"xyz\uDCAB\uDCABdef"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two identical invalid pairs.
name|assertEquals
argument_list|(
literal|"\uD8AB\uD8ABdef"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc\uD8AB\uD8ABdef"
argument_list|,
literal|"xyz\uD8AB\uD8ABdef"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two differing invalid pairs.
name|assertEquals
argument_list|(
literal|"\uDCABdef"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"abc\uDCAB\uDCABdef"
argument_list|,
literal|"abc\uDCAC\uDCABdef"
argument_list|)
argument_list|)
expr_stmt|;
comment|// One orphan low surrogate.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"x\uD8AB\uDCAB"
argument_list|,
literal|"\uDCAB"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two orphan low surrogates.
name|assertEquals
argument_list|(
literal|"\uDCAB"
argument_list|,
name|Strings
operator|.
name|commonSuffix
argument_list|(
literal|"\uDCAB"
argument_list|,
literal|"\uDCAB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidSurrogatePairAt ()
specifier|public
name|void
name|testValidSurrogatePairAt
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8AB\uDCAB"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"abc\uD8AB\uDCAB"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"abc\uD8AB\uDCABxyz"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8AB\uD8AB"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uDCAB\uDCAB"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8AB\uDCAB"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8AB\uDCAB"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8AB\uDCAB"
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8AB\uDCAB"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"x\uDCAB"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|validSurrogatePairAt
argument_list|(
literal|"\uD8ABx"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Strings
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

