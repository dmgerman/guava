begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_comment
comment|/**  * Common benchmarking utilities.  *  * @author Christopher Swenson  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|BenchmarkHelpers
class|class
name|BenchmarkHelpers
block|{
DECL|field|WHITESPACE_CHARACTERS
specifier|private
specifier|static
specifier|final
name|String
name|WHITESPACE_CHARACTERS
init|=
literal|"\u00a0\u180e\u202f\t\n\013\f\r \u0085"
operator|+
literal|"\u1680\u2028\u2029\u205f\u3000\u2000\u2001\u2002\u2003\u2004\u2005"
operator|+
literal|"\u2006\u2007\u2008\u2009\u200a"
decl_stmt|;
DECL|field|ASCII_CHARACTERS
specifier|private
specifier|static
specifier|final
name|String
name|ASCII_CHARACTERS
decl_stmt|;
static|static
block|{
name|int
name|spaceInAscii
init|=
literal|32
decl_stmt|;
name|int
name|sevenBitAsciiMax
init|=
literal|128
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|sevenBitAsciiMax
operator|-
name|spaceInAscii
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ch
init|=
name|spaceInAscii
init|;
name|ch
operator|<
name|sevenBitAsciiMax
condition|;
name|ch
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|ASCII_CHARACTERS
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|field|ALL_DIGITS
specifier|private
specifier|static
specifier|final
name|String
name|ALL_DIGITS
decl_stmt|;
static|static
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|zeros
init|=
literal|"0\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6\u0c66"
operator|+
literal|"\u0ce6\u0d66\u0e50\u0ed0\u0f20\u1040\u1090\u17e0\u1810\u1946"
operator|+
literal|"\u19d0\u1b50\u1bb0\u1c40\u1c50\ua620\ua8d0\ua900\uaa50\uff10"
decl_stmt|;
for|for
control|(
name|char
name|base
range|:
name|zeros
operator|.
name|toCharArray
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
literal|10
condition|;
name|offset
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|base
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ALL_DIGITS
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sample CharMatcher instances for benchmarking.     */
DECL|enum|SampleMatcherConfig
specifier|public
enum|enum
name|SampleMatcherConfig
block|{
DECL|enumConstant|WHITESPACE
DECL|enumConstant|CharMatcher.whitespace
DECL|enumConstant|WHITESPACE_CHARACTERS
name|WHITESPACE
argument_list|(
name|CharMatcher
operator|.
name|whitespace
argument_list|()
argument_list|,
name|WHITESPACE_CHARACTERS
argument_list|)
block|,
DECL|enumConstant|HASH
DECL|enumConstant|CharMatcher.is
name|HASH
argument_list|(
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|,
literal|"#"
argument_list|)
block|,
DECL|enumConstant|ASCII
DECL|enumConstant|CharMatcher.ascii
DECL|enumConstant|ASCII_CHARACTERS
name|ASCII
argument_list|(
name|CharMatcher
operator|.
name|ascii
argument_list|()
argument_list|,
name|ASCII_CHARACTERS
argument_list|)
block|,
DECL|enumConstant|WESTERN_DIGIT
name|WESTERN_DIGIT
argument_list|(
literal|"0123456789"
argument_list|)
block|,
DECL|enumConstant|ALL_DIGIT
DECL|enumConstant|CharMatcher.digit
DECL|enumConstant|ALL_DIGITS
name|ALL_DIGIT
argument_list|(
name|CharMatcher
operator|.
name|digit
argument_list|()
argument_list|,
name|ALL_DIGITS
argument_list|)
block|,
DECL|enumConstant|OPS_5
name|OPS_5
argument_list|(
literal|"+-*/%"
argument_list|)
block|,
DECL|enumConstant|HEX_16
DECL|enumConstant|CharMatcher.inRange
DECL|enumConstant|or
DECL|enumConstant|CharMatcher.inRange
name|HEX_16
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'F'
argument_list|)
argument_list|)
argument_list|,
literal|"0123456789ABCDEF"
argument_list|)
block|,
DECL|enumConstant|HEX_22
DECL|enumConstant|CharMatcher.inRange
name|HEX_22
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
DECL|enumConstant|or
DECL|enumConstant|CharMatcher.inRange
DECL|enumConstant|or
DECL|enumConstant|CharMatcher.inRange
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'F'
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'a'
argument_list|,
literal|'f'
argument_list|)
argument_list|)
argument_list|,
literal|"0123456789ABCDEFabcdef"
argument_list|)
block|,
DECL|enumConstant|GERMAN_59
DECL|enumConstant|CharMatcher.inRange
name|GERMAN_59
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
DECL|enumConstant|or
DECL|enumConstant|CharMatcher.inRange
DECL|enumConstant|or
DECL|enumConstant|CharMatcher.anyOf
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"Ã¤Ã¶Ã¼ÃÃÃÃ"
argument_list|)
argument_list|)
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZÃ¤Ã¶Ã¼ÃÃÃÃ"
argument_list|)
block|;
DECL|field|matcher
specifier|public
specifier|final
name|CharMatcher
name|matcher
decl_stmt|;
DECL|field|matchingChars
specifier|public
specifier|final
name|String
name|matchingChars
decl_stmt|;
DECL|method|SampleMatcherConfig (String matchingChars)
name|SampleMatcherConfig
parameter_list|(
name|String
name|matchingChars
parameter_list|)
block|{
name|this
argument_list|(
name|CharMatcher
operator|.
name|anyOf
argument_list|(
name|matchingChars
argument_list|)
argument_list|,
name|matchingChars
argument_list|)
expr_stmt|;
block|}
DECL|method|SampleMatcherConfig (CharMatcher matcher, String matchingChars)
name|SampleMatcherConfig
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|matchingChars
parameter_list|)
block|{
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
name|this
operator|.
name|matchingChars
operator|=
name|matchingChars
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

