begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Verify
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Verify
operator|.
name|verifyNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link com.google.common.base.Verify}.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|VerifyTest
specifier|public
class|class
name|VerifyTest
extends|extends
name|TestCase
block|{
DECL|method|testVerify_simple_success ()
specifier|public
name|void
name|testVerify_simple_success
parameter_list|()
block|{
name|verify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerify_simple_failure ()
specifier|public
name|void
name|testVerify_simple_failure
parameter_list|()
block|{
try|try
block|{
name|verify
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VerifyException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testVerify_simpleMessage_success ()
specifier|public
name|void
name|testVerify_simpleMessage_success
parameter_list|()
block|{
name|verify
argument_list|(
literal|true
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerify_simpleMessage_failure ()
specifier|public
name|void
name|testVerify_simpleMessage_failure
parameter_list|()
block|{
try|try
block|{
name|verify
argument_list|(
literal|false
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VerifyException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"message"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testVerify_complexMessage_success ()
specifier|public
name|void
name|testVerify_complexMessage_success
parameter_list|()
block|{
name|verify
argument_list|(
literal|true
argument_list|,
literal|"%s"
argument_list|,
name|IGNORE_ME
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerify_complexMessage_failure ()
specifier|public
name|void
name|testVerify_complexMessage_failure
parameter_list|()
block|{
try|try
block|{
name|verify
argument_list|(
literal|false
argument_list|,
name|FORMAT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VerifyException
name|expected
parameter_list|)
block|{
name|checkMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|NON_NULL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|NON_NULL_STRING
init|=
literal|"foo"
decl_stmt|;
DECL|method|testVerifyNotNull_simple_success ()
specifier|public
name|void
name|testVerifyNotNull_simple_success
parameter_list|()
block|{
name|String
name|result
init|=
name|verifyNotNull
argument_list|(
name|NON_NULL_STRING
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NON_NULL_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerifyNotNull_simple_failure ()
specifier|public
name|void
name|testVerifyNotNull_simple_failure
parameter_list|()
block|{
try|try
block|{
name|verifyNotNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VerifyException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testVerifyNotNull_complexMessage_success ()
specifier|public
name|void
name|testVerifyNotNull_complexMessage_success
parameter_list|()
block|{
name|String
name|result
init|=
name|verifyNotNull
argument_list|(
name|NON_NULL_STRING
argument_list|,
literal|"%s"
argument_list|,
name|IGNORE_ME
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NON_NULL_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerifyNotNull_simpleMessage_failure ()
specifier|public
name|void
name|testVerifyNotNull_simpleMessage_failure
parameter_list|()
block|{
try|try
block|{
name|verifyNotNull
argument_list|(
literal|null
argument_list|,
name|FORMAT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VerifyException
name|expected
parameter_list|)
block|{
name|checkMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|IGNORE_ME
specifier|private
specifier|static
specifier|final
name|Object
name|IGNORE_ME
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
DECL|field|FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT
init|=
literal|"I ate %s pies."
decl_stmt|;
DECL|method|checkMessage (Exception e)
specifier|private
specifier|static
name|void
name|checkMessage
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"I ate 5 pies."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

