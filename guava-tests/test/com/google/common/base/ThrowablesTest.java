begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
operator|.
name|getStackTraceAsString
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
operator|.
name|quote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Throwables}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// this warning is silly for exceptions in tests
DECL|class|ThrowablesTest
specifier|public
class|class
name|ThrowablesTest
extends|extends
name|TestCase
block|{
DECL|method|testPropagateIfPossible_NoneDeclared_NoneThrown ()
specifier|public
name|void
name|testPropagateIfPossible_NoneDeclared_NoneThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatDoesntThrowAnything
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect no exception to be thrown
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
block|}
DECL|method|testPropagateIfPossible_NoneDeclared_UncheckedThrown ()
specifier|public
name|void
name|testPropagateIfPossible_NoneDeclared_UncheckedThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatThrowsUnchecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the unchecked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeUncheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_NoneDeclared_UndeclaredThrown ()
specifier|public
name|void
name|testPropagateIfPossible_NoneDeclared_UndeclaredThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatThrowsUndeclaredChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the undeclared exception to have been chained inside another
try|try
block|{
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeChainingException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_OneDeclared_NoneThrown ()
specifier|public
name|void
name|testPropagateIfPossible_OneDeclared_NoneThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatDoesntThrowAnything
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// yes, this block is never reached, but for purposes of illustration
comment|// we're keeping it the same in each test
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect no exception to be thrown
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
block|}
DECL|method|testPropagateIfPossible_OneDeclared_UncheckedThrown ()
specifier|public
name|void
name|testPropagateIfPossible_OneDeclared_UncheckedThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatThrowsUnchecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the unchecked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeUncheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_OneDeclared_CheckedThrown ()
specifier|public
name|void
name|testPropagateIfPossible_OneDeclared_CheckedThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatThrowsChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the checked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeCheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_OneDeclared_UndeclaredThrown ()
specifier|public
name|void
name|testPropagateIfPossible_OneDeclared_UndeclaredThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatThrowsUndeclaredChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the undeclared exception to have been chained inside another
try|try
block|{
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeChainingException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_TwoDeclared_NoneThrown ()
specifier|public
name|void
name|testPropagateIfPossible_TwoDeclared_NoneThrown
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|twoDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{
try|try
block|{
name|methodThatDoesntThrowAnything
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|,
name|SomeOtherCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect no exception to be thrown
name|sample
operator|.
name|twoDeclared
argument_list|()
expr_stmt|;
block|}
DECL|method|testPropagateIfPossible_TwoDeclared_UncheckedThrown ()
specifier|public
name|void
name|testPropagateIfPossible_TwoDeclared_UncheckedThrown
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|twoDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{
try|try
block|{
name|methodThatThrowsUnchecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|,
name|SomeOtherCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the unchecked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|twoDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeUncheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_TwoDeclared_CheckedThrown ()
specifier|public
name|void
name|testPropagateIfPossible_TwoDeclared_CheckedThrown
parameter_list|()
throws|throws
name|SomeOtherCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|twoDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{
try|try
block|{
name|methodThatThrowsChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|,
name|SomeOtherCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the checked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|twoDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeCheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfPossible_TwoDeclared_OtherCheckedThrown ()
specifier|public
name|void
name|testPropagateIfPossible_TwoDeclared_OtherCheckedThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|twoDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{
try|try
block|{
name|methodThatThrowsOtherChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|,
name|SomeOtherCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SomeChainingException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the checked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|twoDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeOtherCheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropageIfPossible_null ()
specifier|public
name|void
name|testPropageIfPossible_null
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
literal|null
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
literal|null
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|,
name|SomeUncheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testPropagate_NoneDeclared_NoneThrown ()
specifier|public
name|void
name|testPropagate_NoneDeclared_NoneThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatDoesntThrowAnything
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect no exception to be thrown
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
block|}
DECL|method|testPropagate_NoneDeclared_UncheckedThrown ()
specifier|public
name|void
name|testPropagate_NoneDeclared_UncheckedThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatThrowsUnchecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the unchecked exception to propagate as-is
try|try
block|{
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeUncheckedException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagate_NoneDeclared_ErrorThrown ()
specifier|public
name|void
name|testPropagate_NoneDeclared_ErrorThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the error to propagate as-is
try|try
block|{
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPropagate_NoneDeclared_CheckedThrown ()
specifier|public
name|void
name|testPropagate_NoneDeclared_CheckedThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|noneDeclared
parameter_list|()
block|{
try|try
block|{
name|methodThatThrowsChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect the undeclared exception to have been chained inside another
try|try
block|{
name|sample
operator|.
name|noneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SomeCheckedException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPropagateIfInstanceOf_NoneThrown ()
specifier|public
name|void
name|testPropagateIfInstanceOf_NoneThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatDoesntThrowAnything
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfInstanceOf
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect no exception to be thrown
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
block|}
DECL|method|testPropagateIfInstanceOf_DeclaredThrown ()
specifier|public
name|void
name|testPropagateIfInstanceOf_DeclaredThrown
parameter_list|()
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatThrowsChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfInstanceOf
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect declared exception to be thrown as-is
try|try
block|{
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeCheckedException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfInstanceOf_UncheckedThrown ()
specifier|public
name|void
name|testPropagateIfInstanceOf_UncheckedThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatThrowsUnchecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfInstanceOf
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect unchecked exception to be thrown as-is
try|try
block|{
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SomeUncheckedException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|testPropagateIfInstanceOf_UndeclaredThrown ()
specifier|public
name|void
name|testPropagateIfInstanceOf_UndeclaredThrown
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Sample
name|sample
init|=
operator|new
name|Sample
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
try|try
block|{
name|methodThatThrowsOtherChecked
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfInstanceOf
argument_list|(
name|t
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// Expect undeclared exception wrapped by RuntimeException to be thrown
try|try
block|{
name|sample
operator|.
name|oneDeclared
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SomeOtherCheckedException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPropageIfInstanceOf_null ()
specifier|public
name|void
name|testPropageIfInstanceOf_null
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
name|Throwables
operator|.
name|propagateIfInstanceOf
argument_list|(
literal|null
argument_list|,
name|SomeCheckedException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRootCause_NoCause ()
specifier|public
name|void
name|testGetRootCause_NoCause
parameter_list|()
block|{
name|SomeCheckedException
name|exception
init|=
operator|new
name|SomeCheckedException
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|exception
argument_list|,
name|Throwables
operator|.
name|getRootCause
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRootCause_SingleWrapped ()
specifier|public
name|void
name|testGetRootCause_SingleWrapped
parameter_list|()
block|{
name|SomeCheckedException
name|cause
init|=
operator|new
name|SomeCheckedException
argument_list|()
decl_stmt|;
name|SomeChainingException
name|exception
init|=
operator|new
name|SomeChainingException
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|Throwables
operator|.
name|getRootCause
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetRootCause_DoubleWrapped ()
specifier|public
name|void
name|testGetRootCause_DoubleWrapped
parameter_list|()
block|{
name|SomeCheckedException
name|cause
init|=
operator|new
name|SomeCheckedException
argument_list|()
decl_stmt|;
name|SomeChainingException
name|exception
init|=
operator|new
name|SomeChainingException
argument_list|(
operator|new
name|SomeChainingException
argument_list|(
name|cause
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cause
argument_list|,
name|Throwables
operator|.
name|getRootCause
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|SomeError
specifier|private
specifier|static
class|class
name|SomeError
extends|extends
name|Error
block|{}
DECL|class|SomeCheckedException
specifier|private
specifier|static
class|class
name|SomeCheckedException
extends|extends
name|Exception
block|{}
DECL|class|SomeOtherCheckedException
specifier|private
specifier|static
class|class
name|SomeOtherCheckedException
extends|extends
name|Exception
block|{}
DECL|class|SomeUncheckedException
specifier|private
specifier|static
class|class
name|SomeUncheckedException
extends|extends
name|RuntimeException
block|{}
DECL|class|SomeUndeclaredCheckedException
specifier|private
specifier|static
class|class
name|SomeUndeclaredCheckedException
extends|extends
name|Exception
block|{}
DECL|class|SomeChainingException
specifier|private
specifier|static
class|class
name|SomeChainingException
extends|extends
name|RuntimeException
block|{
DECL|method|SomeChainingException (Throwable cause)
specifier|public
name|SomeChainingException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Sample
specifier|static
class|class
name|Sample
block|{
DECL|method|noneDeclared ()
name|void
name|noneDeclared
parameter_list|()
block|{}
comment|/*      * Subclasses of Sample will define methods with these signatures that throw      * these exceptions, so we must declare them in the throws clause here.      * Eclipse doesn't think being thrown from a subclass's non-public,      * non-protected method with the same signature counts as being "used."      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|oneDeclared ()
name|void
name|oneDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|twoDeclared ()
name|void
name|twoDeclared
parameter_list|()
throws|throws
name|SomeCheckedException
throws|,
name|SomeOtherCheckedException
block|{}
block|}
DECL|method|methodThatDoesntThrowAnything ()
specifier|static
name|void
name|methodThatDoesntThrowAnything
parameter_list|()
block|{}
DECL|method|methodThatThrowsError ()
specifier|static
name|void
name|methodThatThrowsError
parameter_list|()
block|{
throw|throw
operator|new
name|SomeError
argument_list|()
throw|;
block|}
DECL|method|methodThatThrowsUnchecked ()
specifier|static
name|void
name|methodThatThrowsUnchecked
parameter_list|()
block|{
throw|throw
operator|new
name|SomeUncheckedException
argument_list|()
throw|;
block|}
DECL|method|methodThatThrowsChecked ()
specifier|static
name|void
name|methodThatThrowsChecked
parameter_list|()
throws|throws
name|SomeCheckedException
block|{
throw|throw
operator|new
name|SomeCheckedException
argument_list|()
throw|;
block|}
DECL|method|methodThatThrowsOtherChecked ()
specifier|static
name|void
name|methodThatThrowsOtherChecked
parameter_list|()
throws|throws
name|SomeOtherCheckedException
block|{
throw|throw
operator|new
name|SomeOtherCheckedException
argument_list|()
throw|;
block|}
DECL|method|methodThatThrowsUndeclaredChecked ()
specifier|static
name|void
name|methodThatThrowsUndeclaredChecked
parameter_list|()
throws|throws
name|SomeUndeclaredCheckedException
block|{
throw|throw
operator|new
name|SomeUndeclaredCheckedException
argument_list|()
throw|;
block|}
DECL|method|testGetStackTraceAsString ()
specifier|public
name|void
name|testGetStackTraceAsString
parameter_list|()
block|{
class|class
name|StackTraceException
extends|extends
name|Exception
block|{
name|StackTraceException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|StackTraceException
name|e
init|=
operator|new
name|StackTraceException
argument_list|(
literal|"my message"
argument_list|)
decl_stmt|;
name|String
name|firstLine
init|=
name|quote
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|secondLine
init|=
literal|"\\s*at "
operator|+
name|ThrowablesTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"\\..*"
decl_stmt|;
name|String
name|moreLines
init|=
literal|"(?:.*\n?)*"
decl_stmt|;
name|String
name|expected
init|=
name|firstLine
operator|+
literal|"\n"
operator|+
name|secondLine
operator|+
literal|"\n"
operator|+
name|moreLines
decl_stmt|;
name|assertTrue
argument_list|(
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
operator|.
name|matches
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetCausalChain ()
specifier|public
name|void
name|testGetCausalChain
parameter_list|()
block|{
name|FileNotFoundException
name|fnfe
init|=
operator|new
name|FileNotFoundException
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
name|fnfe
argument_list|)
decl_stmt|;
name|RuntimeException
name|re
init|=
operator|new
name|RuntimeException
argument_list|(
name|iae
argument_list|)
decl_stmt|;
name|IllegalStateException
name|ex
init|=
operator|new
name|IllegalStateException
argument_list|(
name|re
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
name|ex
argument_list|,
name|re
argument_list|,
name|iae
argument_list|,
name|fnfe
argument_list|)
argument_list|,
name|Throwables
operator|.
name|getCausalChain
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|fnfe
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|Throwables
operator|.
name|getCausalChain
argument_list|(
name|fnfe
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Throwables
operator|.
name|getCausalChain
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have throw NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|List
argument_list|<
name|Throwable
argument_list|>
name|causes
init|=
name|Throwables
operator|.
name|getCausalChain
argument_list|(
name|ex
argument_list|)
decl_stmt|;
try|try
block|{
name|causes
operator|.
name|add
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"List should be unmodifiable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Throwables
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

