begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
operator|.
name|toStringFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Converter}.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|ConverterTest
specifier|public
class|class
name|ConverterTest
extends|extends
name|TestCase
block|{
DECL|field|STR_TO_LONG
specifier|private
specifier|static
specifier|final
name|Converter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|STR_TO_LONG
init|=
operator|new
name|Converter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|doForward
parameter_list|(
name|String
name|object
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|doBackward
parameter_list|(
name|Long
name|object
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"string2long"
return|;
block|}
block|}
decl_stmt|;
DECL|field|LONG_VAL
specifier|private
specifier|static
specifier|final
name|Long
name|LONG_VAL
init|=
literal|12345L
decl_stmt|;
DECL|field|STR_VAL
specifier|private
specifier|static
specifier|final
name|String
name|STR_VAL
init|=
literal|"12345"
decl_stmt|;
DECL|field|STRINGS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|STRINGS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"123"
argument_list|,
literal|"456"
argument_list|)
decl_stmt|;
DECL|field|LONGS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Long
argument_list|>
name|LONGS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
DECL|method|testConverter ()
specifier|public
name|void
name|testConverter
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LONG_VAL
argument_list|,
name|STR_TO_LONG
operator|.
name|convert
argument_list|(
name|STR_VAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STR_VAL
argument_list|,
name|STR_TO_LONG
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|LONG_VAL
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|Long
argument_list|>
name|convertedValues
init|=
name|STR_TO_LONG
operator|.
name|convertAll
argument_list|(
name|STRINGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LONGS
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|convertedValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertAllIsView ()
specifier|public
name|void
name|testConvertAllIsView
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|mutableList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"789"
argument_list|,
literal|"123"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Long
argument_list|>
name|convertedValues
init|=
name|STR_TO_LONG
operator|.
name|convertAll
argument_list|(
name|mutableList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|789L
argument_list|,
literal|123L
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|convertedValues
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
init|=
name|convertedValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"123"
argument_list|)
argument_list|,
name|mutableList
argument_list|)
expr_stmt|;
block|}
DECL|method|testReverse ()
specifier|public
name|void
name|testReverse
parameter_list|()
block|{
name|Converter
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|reverseConverter
init|=
name|STR_TO_LONG
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|STR_VAL
argument_list|,
name|reverseConverter
operator|.
name|convert
argument_list|(
name|LONG_VAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LONG_VAL
argument_list|,
name|reverseConverter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|STR_VAL
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|convertedValues
init|=
name|reverseConverter
operator|.
name|convertAll
argument_list|(
name|LONGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|STRINGS
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|convertedValues
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|STR_TO_LONG
argument_list|,
name|reverseConverter
operator|.
name|reverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2long.reverse()"
argument_list|,
name|reverseConverter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|STR_TO_LONG
argument_list|,
name|STR_TO_LONG
operator|.
name|reverse
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|STR_TO_LONG
operator|.
name|reverse
argument_list|()
argument_list|,
name|STR_TO_LONG
operator|.
name|reverse
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testReverseReverse ()
specifier|public
name|void
name|testReverseReverse
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|converter
init|=
name|STR_TO_LONG
decl_stmt|;
name|assertEquals
argument_list|(
name|converter
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testApply ()
specifier|public
name|void
name|testApply
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LONG_VAL
argument_list|,
name|STR_TO_LONG
operator|.
name|apply
argument_list|(
name|STR_VAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|StringWrapper
specifier|private
specifier|static
class|class
name|StringWrapper
block|{
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|StringWrapper (String value)
specifier|public
name|StringWrapper
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|method|testAndThen ()
specifier|public
name|void
name|testAndThen
parameter_list|()
block|{
name|Converter
argument_list|<
name|StringWrapper
argument_list|,
name|String
argument_list|>
name|first
init|=
operator|new
name|Converter
argument_list|<
name|StringWrapper
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doForward
parameter_list|(
name|StringWrapper
name|object
parameter_list|)
block|{
return|return
name|object
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringWrapper
name|doBackward
parameter_list|(
name|String
name|object
parameter_list|)
block|{
return|return
operator|new
name|StringWrapper
argument_list|(
name|object
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StringWrapper"
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|StringWrapper
argument_list|,
name|Long
argument_list|>
name|converter
init|=
name|first
operator|.
name|andThen
argument_list|(
name|STR_TO_LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LONG_VAL
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
operator|new
name|StringWrapper
argument_list|(
name|STR_VAL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STR_VAL
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|LONG_VAL
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"StringWrapper.andThen(string2long)"
argument_list|,
name|converter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|andThen
argument_list|(
name|STR_TO_LONG
argument_list|)
argument_list|,
name|first
operator|.
name|andThen
argument_list|(
name|STR_TO_LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIdentityConverter ()
specifier|public
name|void
name|testIdentityConverter
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stringIdentityConverter
init|=
name|Converter
operator|.
name|identity
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|stringIdentityConverter
argument_list|,
name|stringIdentityConverter
operator|.
name|reverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|STR_TO_LONG
argument_list|,
name|stringIdentityConverter
operator|.
name|andThen
argument_list|(
name|STR_TO_LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|STR_VAL
argument_list|,
name|stringIdentityConverter
operator|.
name|convert
argument_list|(
name|STR_VAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|STR_VAL
argument_list|,
name|stringIdentityConverter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|STR_VAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Converter.identity()"
argument_list|,
name|stringIdentityConverter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Converter
operator|.
name|identity
argument_list|()
argument_list|,
name|Converter
operator|.
name|identity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrom ()
specifier|public
name|void
name|testFrom
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|forward
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Function
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|backward
init|=
name|toStringFunction
argument_list|()
decl_stmt|;
name|Converter
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
name|converter
init|=
name|Converter
operator|.
expr|<
name|String
decl_stmt|,
name|Number
decl|>
name|from
argument_list|(
name|forward
argument_list|,
name|backward
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|5
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullIsPassedThrough ()
specifier|public
name|void
name|testNullIsPassedThrough
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nullsArePassed
init|=
name|sillyConverter
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"forward"
argument_list|,
name|nullsArePassed
operator|.
name|convert
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"forward"
argument_list|,
name|nullsArePassed
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"backward"
argument_list|,
name|nullsArePassed
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"backward"
argument_list|,
name|nullsArePassed
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullIsNotPassedThrough ()
specifier|public
name|void
name|testNullIsNotPassedThrough
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nullsAreHandled
init|=
name|sillyConverter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"forward"
argument_list|,
name|nullsAreHandled
operator|.
name|convert
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|nullsAreHandled
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"backward"
argument_list|,
name|nullsAreHandled
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|nullsAreHandled
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sillyConverter (final boolean handleNullAutomatically)
specifier|private
specifier|static
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sillyConverter
parameter_list|(
specifier|final
name|boolean
name|handleNullAutomatically
parameter_list|)
block|{
return|return
operator|new
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|handleNullAutomatically
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|doForward
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
literal|"forward"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|doBackward
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
literal|"backward"
return|;
block|}
block|}
return|;
block|}
DECL|method|testSerialization_identity ()
specifier|public
name|void
name|testSerialization_identity
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|identityConverter
init|=
name|Converter
operator|.
name|identity
argument_list|()
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|identityConverter
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_reverse ()
specifier|public
name|void
name|testSerialization_reverse
parameter_list|()
block|{
name|Converter
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|reverseConverter
init|=
name|Longs
operator|.
name|stringConverter
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|reverseConverter
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_andThen ()
specifier|public
name|void
name|testSerialization_andThen
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|converterA
init|=
name|Longs
operator|.
name|stringConverter
argument_list|()
decl_stmt|;
name|Converter
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|reverseConverter
init|=
name|Longs
operator|.
name|stringConverter
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|composedConverter
init|=
name|converterA
operator|.
name|andThen
argument_list|(
name|reverseConverter
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|composedConverter
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_from ()
specifier|public
name|void
name|testSerialization_from
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dumb
init|=
name|Converter
operator|.
name|from
argument_list|(
name|toStringFunction
argument_list|()
argument_list|,
name|toStringFunction
argument_list|()
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|dumb
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

