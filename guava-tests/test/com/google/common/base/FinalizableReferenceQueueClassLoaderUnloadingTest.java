begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2005 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|GcFinalization
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|testsize
operator|.
name|Sequential
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * Tests that the {@code ClassLoader} of {@link FinalizableReferenceQueue} can be unloaded. These  * tests are separate from {@link FinalizableReferenceQueueTest} so that they can be excluded from  * coverage runs, as the coverage system interferes with them.  *  * @author Eamonn McManus  */
end_comment

begin_class
DECL|class|FinalizableReferenceQueueClassLoaderUnloadingTest
specifier|public
class|class
name|FinalizableReferenceQueueClassLoaderUnloadingTest
extends|extends
name|TestCase
block|{
comment|/*    * The following tests check that the use of FinalizableReferenceQueue does not prevent the    * ClassLoader that loaded that class from later being garbage-collected. If anything continues    * to reference the FinalizableReferenceQueue class then its ClassLoader cannot be    * garbage-collected, even if there are no more instances of FinalizableReferenceQueue itself.    * The code in FinalizableReferenceQueue goes to considerable trouble to ensure that there are    * no such references and the tests here check that that trouble has not been in vain.    *    * When we reference FinalizableReferenceQueue in this test, we are referencing a class that is    * loaded by this test and that will obviously remain loaded for as long as the test is running.    * So in order to check ClassLoader garbage collection we need to create a new ClassLoader and    * make it load its own version of FinalizableReferenceQueue. Then we need to interact with that    * parallel version through reflection in order to exercise the parallel    * FinalizableReferenceQueue, and then check that the parallel ClassLoader can be    * garbage-collected after that.    */
DECL|class|MyFinalizableWeakReference
specifier|public
specifier|static
class|class
name|MyFinalizableWeakReference
extends|extends
name|FinalizableWeakReference
argument_list|<
name|Object
argument_list|>
block|{
DECL|method|MyFinalizableWeakReference (Object x, FinalizableReferenceQueue queue)
specifier|public
name|MyFinalizableWeakReference
parameter_list|(
name|Object
name|x
parameter_list|,
name|FinalizableReferenceQueue
name|queue
parameter_list|)
block|{
name|super
argument_list|(
name|x
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|finalizeReferent ()
specifier|public
name|void
name|finalizeReferent
parameter_list|()
block|{     }
block|}
DECL|class|PermissivePolicy
specifier|private
specifier|static
class|class
name|PermissivePolicy
extends|extends
name|Policy
block|{
annotation|@
name|Override
DECL|method|implies (ProtectionDomain pd, Permission perm)
specifier|public
name|boolean
name|implies
parameter_list|(
name|ProtectionDomain
name|pd
parameter_list|,
name|Permission
name|perm
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|useFrqInSeparateLoader ()
specifier|private
name|WeakReference
argument_list|<
name|ClassLoader
argument_list|>
name|useFrqInSeparateLoader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|URLClassLoader
name|myLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|URL
index|[]
name|urls
init|=
name|myLoader
operator|.
name|getURLs
argument_list|()
decl_stmt|;
name|URLClassLoader
name|sepLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|myLoader
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
comment|// sepLoader is the loader that we will use to load the parallel FinalizableReferenceQueue (FRQ)
comment|// and friends, and that we will eventually expect to see garbage-collected. The assumption
comment|// is that the ClassLoader of this test is a URLClassLoader, and that it loads FRQ itself
comment|// rather than delegating to a parent ClassLoader. If this assumption is violated the test will
comment|// fail and will need to be rewritten.
name|Class
argument_list|<
name|?
argument_list|>
name|frqC
init|=
name|FinalizableReferenceQueue
operator|.
name|class
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|sepFrqC
init|=
name|sepLoader
operator|.
name|loadClass
argument_list|(
name|frqC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sepFrqC
operator|!=
name|frqC
argument_list|)
expr_stmt|;
comment|// Check the assumptions above.
comment|// FRQ tries to load the Finalizer class (for the reference-collecting thread) in a few ways.
comment|// If the class is accessible to the system ClassLoader (ClassLoader.getSystemClassLoader())
comment|// then FRQ does not bother to load Finalizer.class through a separate ClassLoader. That happens
comment|// in our test environment, which foils the purpose of this test, so we disable the logic for
comment|// our test by setting a static field. We are changing the field in the parallel version of FRQ
comment|// and each test creates its own one of those, so there is no test interference here.
name|Class
argument_list|<
name|?
argument_list|>
name|sepFrqSystemLoaderC
init|=
name|sepLoader
operator|.
name|loadClass
argument_list|(
name|FinalizableReferenceQueue
operator|.
name|SystemLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|disabled
init|=
name|sepFrqSystemLoaderC
operator|.
name|getDeclaredField
argument_list|(
literal|"disabled"
argument_list|)
decl_stmt|;
name|disabled
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|disabled
operator|.
name|set
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now make a parallel FRQ and an associated FinalizableWeakReference to an object, in order to
comment|// exercise some classes from the parallel ClassLoader.
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|sepFrqA
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|sepFrqC
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|sepFwrC
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|sepLoader
operator|.
name|loadClass
argument_list|(
name|MyFinalizableWeakReference
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|sepFwrCons
init|=
name|sepFwrC
operator|.
name|getConstructor
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|sepFrqC
argument_list|)
decl_stmt|;
comment|// The object that we will wrap in FinalizableWeakReference is a Stopwatch.
name|Class
argument_list|<
name|?
argument_list|>
name|sepStopwatchC
init|=
name|sepLoader
operator|.
name|loadClass
argument_list|(
name|Stopwatch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|sepLoader
argument_list|,
name|sepStopwatchC
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|sepStopwatchA
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|sepStopwatchC
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|sepStopwatchRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|sepFwrCons
operator|.
name|newInstance
argument_list|(
name|sepStopwatchA
operator|.
name|get
argument_list|()
argument_list|,
name|sepFrqA
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sepStopwatchA
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clear all references to the Stopwatch and wait for it to be gc'd.
name|sepStopwatchA
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|sepStopwatchRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return a weak reference to the parallel ClassLoader. This is the reference that should
comment|// eventually become clear if there are no other references to the ClassLoader.
return|return
operator|new
name|WeakReference
argument_list|<
name|ClassLoader
argument_list|>
argument_list|(
name|sepLoader
argument_list|)
return|;
block|}
DECL|method|doTestUnloadable ()
specifier|private
name|void
name|doTestUnloadable
parameter_list|()
throws|throws
name|Exception
block|{
name|WeakReference
argument_list|<
name|ClassLoader
argument_list|>
name|loaderRef
init|=
name|useFrqInSeparateLoader
argument_list|()
decl_stmt|;
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|loaderRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Sequential
DECL|method|testUnloadableWithoutSecurityManager ()
specifier|public
name|void
name|testUnloadableWithoutSecurityManager
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
comment|// loader of that class from being garbage-collected.
name|SecurityManager
name|oldSecurityManager
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|doTestUnloadable
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|oldSecurityManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Sequential
DECL|method|testUnloadableWithSecurityManager ()
specifier|public
name|void
name|testUnloadableWithSecurityManager
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
comment|// loader of that class from being garbage-collected even if there is a SecurityManager.
comment|// The SecurityManager environment makes such leaks more likely because when you create
comment|// a URLClassLoader with a SecurityManager, the creating code's AccessControlContext is
comment|// captured, and that references the creating code's ClassLoader.
name|Policy
name|oldPolicy
init|=
name|Policy
operator|.
name|getPolicy
argument_list|()
decl_stmt|;
name|SecurityManager
name|oldSecurityManager
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
block|{
name|Policy
operator|.
name|setPolicy
argument_list|(
operator|new
name|PermissivePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|SecurityManager
argument_list|()
argument_list|)
expr_stmt|;
name|doTestUnloadable
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|oldSecurityManager
argument_list|)
expr_stmt|;
name|Policy
operator|.
name|setPolicy
argument_list|(
name|oldPolicy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

