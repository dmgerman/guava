begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|forPredicate
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|inRange
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|isNot
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
operator|.
name|noneOf
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link CharMatcher}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|CharMatcherTest
specifier|public
class|class
name|CharMatcherTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testStaticNullPointers ()
specifier|public
name|void
name|testStaticNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|CharMatcher
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|WHATEVER
specifier|private
specifier|static
specifier|final
name|CharMatcher
name|WHATEVER
init|=
operator|new
name|CharMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|char
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"You weren't supposed to actually invoke me!"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
DECL|method|testAnyAndNone_logicalOps ()
specifier|public
name|void
name|testAnyAndNone_logicalOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These are testing behavior that's never promised by the API, but since
comment|// we're lucky enough that these do pass, it saves us from having to write
comment|// more excruciating tests! Hooray!
name|assertSame
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|,
name|CharMatcher
operator|.
name|NONE
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|WHATEVER
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|and
argument_list|(
name|WHATEVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|or
argument_list|(
name|WHATEVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|,
name|CharMatcher
operator|.
name|NONE
operator|.
name|and
argument_list|(
name|WHATEVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|WHATEVER
argument_list|,
name|CharMatcher
operator|.
name|NONE
operator|.
name|or
argument_list|(
name|WHATEVER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The rest of the behavior of ANY and NONE will be covered in the tests for
comment|// the text processing methods below.
comment|// The next tests require ICU4J and have, at least for now, been sliced out
comment|// of the open-source view of the tests.
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Character.isISOControl"
argument_list|)
DECL|method|testJavaIsoControl ()
specifier|public
name|void
name|testJavaIsoControl
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<=
name|Character
operator|.
name|MAX_VALUE
condition|;
name|c
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|c
argument_list|,
name|Character
operator|.
name|isISOControl
argument_list|(
name|c
argument_list|)
argument_list|,
name|CharMatcher
operator|.
name|JAVA_ISO_CONTROL
operator|.
name|matches
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Omitting tests for the rest of the JAVA_* constants as these are defined
comment|// as extremely straightforward pass-throughs to the JDK methods.
comment|// We're testing the is(), isNot(), anyOf(), noneOf() and inRange() methods
comment|// below by testing their text-processing methods.
comment|// The organization of this test class is unusual, as it's not done by
comment|// method, but by overall "scenario". Also, the variety of actual tests we
comment|// do borders on absurd overkill. Better safe than sorry, though?
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.BitSet"
argument_list|)
DECL|method|testSetBits ()
specifier|public
name|void
name|testSetBits
parameter_list|()
block|{
name|doTestSetBits
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|is
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|isNot
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|anyOf
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|anyOf
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|anyOf
argument_list|(
literal|"xy"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|anyOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|noneOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|inRange
argument_list|(
literal|'n'
argument_list|,
literal|'q'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|forPredicate
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|CharMatcher
operator|.
name|ASCII
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|CharMatcher
operator|.
name|DIGIT
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|CharMatcher
operator|.
name|INVISIBLE
argument_list|)
expr_stmt|;
name|doTestSetBits
argument_list|(
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
operator|.
name|and
argument_list|(
name|inRange
argument_list|(
literal|'F'
argument_list|,
literal|'K'
argument_list|)
operator|.
name|negate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.BitSet"
argument_list|)
DECL|method|doTestSetBits (CharMatcher matcher)
specifier|private
name|void
name|doTestSetBits
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|)
block|{
name|BitSet
name|bitset
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|setBits
argument_list|(
name|bitset
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|Character
operator|.
name|MIN_VALUE
init|;
name|i
operator|<=
name|Character
operator|.
name|MAX_VALUE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
argument_list|,
name|bitset
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestEmpty
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|is
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|isNot
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|anyOf
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|anyOf
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|anyOf
argument_list|(
literal|"xy"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|anyOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|noneOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|inRange
argument_list|(
literal|'n'
argument_list|,
literal|'q'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestEmpty
argument_list|(
name|forPredicate
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNull ()
specifier|public
name|void
name|testNull
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNull
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|is
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|isNot
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|anyOf
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|anyOf
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|anyOf
argument_list|(
literal|"xy"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|anyOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|noneOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|inRange
argument_list|(
literal|'n'
argument_list|,
literal|'q'
argument_list|)
argument_list|)
expr_stmt|;
name|doTestNull
argument_list|(
name|forPredicate
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestEmpty (CharMatcher matcher)
specifier|private
name|void
name|doTestEmpty
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|)
throws|throws
name|Exception
block|{
name|reallyTestEmpty
argument_list|(
name|matcher
argument_list|)
expr_stmt|;
name|reallyTestEmpty
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|reallyTestEmpty
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestEmpty (CharMatcher matcher)
specifier|private
name|void
name|reallyTestEmpty
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|matcher
operator|.
name|indexIn
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|matcher
operator|.
name|indexIn
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
literal|""
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
literal|""
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|doTestNull (CharMatcher matcher)
specifier|private
name|void
name|doTestNull
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|)
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoMatches ()
specifier|public
name|void
name|testNoMatches
parameter_list|()
block|{
name|doTestNoMatches
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|is
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"bcde"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|isNot
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|anyOf
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|anyOf
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|anyOf
argument_list|(
literal|"xy"
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|anyOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|,
literal|"zxqy"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|noneOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|,
literal|"ChMa"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|inRange
argument_list|(
literal|'p'
argument_list|,
literal|'x'
argument_list|)
argument_list|,
literal|"mom"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|forPredicate
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|,
literal|"abe"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
operator|.
name|and
argument_list|(
name|inRange
argument_list|(
literal|'F'
argument_list|,
literal|'K'
argument_list|)
operator|.
name|negate
argument_list|()
argument_list|)
argument_list|,
literal|"F1a"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|CharMatcher
operator|.
name|DIGIT
argument_list|,
literal|"\tAz()"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|CharMatcher
operator|.
name|JAVA_DIGIT
argument_list|,
literal|"\tAz()"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|CharMatcher
operator|.
name|DIGIT
operator|.
name|and
argument_list|(
name|CharMatcher
operator|.
name|ASCII
argument_list|)
argument_list|,
literal|"\tAz()"
argument_list|)
expr_stmt|;
name|doTestNoMatches
argument_list|(
name|CharMatcher
operator|.
name|SINGLE_WIDTH
argument_list|,
literal|"\u05bf\u3000"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestNoMatches (CharMatcher matcher, String s)
specifier|private
name|void
name|doTestNoMatches
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|reallyTestNoMatches
argument_list|(
name|matcher
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestAllMatches
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatches
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestAllMatches
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestAllMatches
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatches
argument_list|(
name|forPredicate
argument_list|(
name|matcher
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatches
argument_list|(
name|matcher
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllMatches ()
specifier|public
name|void
name|testAllMatches
parameter_list|()
block|{
name|doTestAllMatches
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|isNot
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"bcde"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|is
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|noneOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|,
literal|"zxqy"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|anyOf
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"xxxx"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|anyOf
argument_list|(
literal|"xy"
argument_list|)
argument_list|,
literal|"xyyx"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|anyOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|,
literal|"ChMa"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|inRange
argument_list|(
literal|'m'
argument_list|,
literal|'p'
argument_list|)
argument_list|,
literal|"mom"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|forPredicate
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|,
literal|"ccc"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|CharMatcher
operator|.
name|DIGIT
argument_list|,
literal|"0123456789\u0ED0\u1B59"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|CharMatcher
operator|.
name|JAVA_DIGIT
argument_list|,
literal|"0123456789"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|CharMatcher
operator|.
name|DIGIT
operator|.
name|and
argument_list|(
name|CharMatcher
operator|.
name|ASCII
argument_list|)
argument_list|,
literal|"0123456789"
argument_list|)
expr_stmt|;
name|doTestAllMatches
argument_list|(
name|CharMatcher
operator|.
name|SINGLE_WIDTH
argument_list|,
literal|"\t0123ABCdef~\u00A0\u2111"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestAllMatches (CharMatcher matcher, String s)
specifier|private
name|void
name|doTestAllMatches
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|reallyTestAllMatches
argument_list|(
name|matcher
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatches
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestAllMatches
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatches
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatches
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestAllMatches
argument_list|(
name|forPredicate
argument_list|(
name|matcher
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestAllMatches
argument_list|(
name|matcher
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestNoMatches (CharMatcher matcher, CharSequence s)
specifier|private
name|void
name|reallyTestNoMatches
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|CharSequence
name|s
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestAllMatches (CharMatcher matcher, CharSequence s)
specifier|private
name|void
name|reallyTestAllMatches
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|CharSequence
name|s
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
literal|"z"
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
literal|"ZZ"
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeneral ()
specifier|public
name|void
name|testGeneral
parameter_list|()
block|{
name|doTestGeneral
argument_list|(
name|is
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|'a'
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|doTestGeneral
argument_list|(
name|isNot
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|'b'
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|doTestGeneral
argument_list|(
name|anyOf
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|'x'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|doTestGeneral
argument_list|(
name|anyOf
argument_list|(
literal|"xy"
argument_list|)
argument_list|,
literal|'y'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|doTestGeneral
argument_list|(
name|anyOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|,
literal|'C'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|doTestGeneral
argument_list|(
name|noneOf
argument_list|(
literal|"CharMatcher"
argument_list|)
argument_list|,
literal|'z'
argument_list|,
literal|'C'
argument_list|)
expr_stmt|;
name|doTestGeneral
argument_list|(
name|inRange
argument_list|(
literal|'p'
argument_list|,
literal|'x'
argument_list|)
argument_list|,
literal|'q'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGeneral (CharMatcher matcher, char match, char noMatch)
specifier|private
name|void
name|doTestGeneral
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|char
name|match
parameter_list|,
name|char
name|noMatch
parameter_list|)
block|{
name|doTestOneCharMatch
argument_list|(
name|matcher
argument_list|,
literal|""
operator|+
name|match
argument_list|)
expr_stmt|;
name|doTestOneCharNoMatch
argument_list|(
name|matcher
argument_list|,
literal|""
operator|+
name|noMatch
argument_list|)
expr_stmt|;
name|doTestMatchThenNoMatch
argument_list|(
name|matcher
argument_list|,
literal|""
operator|+
name|match
operator|+
name|noMatch
argument_list|)
expr_stmt|;
name|doTestNoMatchThenMatch
argument_list|(
name|matcher
argument_list|,
literal|""
operator|+
name|noMatch
operator|+
name|match
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestOneCharMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|doTestOneCharMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|reallyTestOneCharMatch
argument_list|(
name|matcher
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharNoMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharNoMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharNoMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestOneCharNoMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|doTestOneCharNoMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|reallyTestOneCharNoMatch
argument_list|(
name|matcher
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharNoMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestOneCharMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestMatchThenNoMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|doTestMatchThenNoMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|reallyTestMatchThenNoMatch
argument_list|(
name|matcher
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatchThenMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestMatchThenNoMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatchThenMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatchThenMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestNoMatchThenMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|doTestNoMatchThenMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|reallyTestNoMatchThenMatch
argument_list|(
name|matcher
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestMatchThenNoMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestNoMatchThenMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestMatchThenNoMatch
argument_list|(
name|matcher
operator|.
name|negate
argument_list|()
operator|.
name|precomputed
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|reallyTestMatchThenNoMatch
argument_list|(
name|matcher
operator|.
name|precomputed
argument_list|()
operator|.
name|negate
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestOneCharMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|reallyTestOneCharMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|apply
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"z"
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ZZ"
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestOneCharNoMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|reallyTestOneCharNoMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|apply
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|s
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|s
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|s
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|s
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestMatchThenNoMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|reallyTestMatchThenNoMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"z"
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ZZ"
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reallyTestNoMatchThenMatch (CharMatcher matcher, String s)
specifier|private
name|void
name|reallyTestNoMatchThenMatch
parameter_list|(
name|CharMatcher
name|matcher
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|matcher
operator|.
name|indexIn
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|lastIndexIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matchesAnyOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesAllOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matchesNoneOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|removeFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
literal|"z"
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
literal|"ZZ"
argument_list|,
name|matcher
operator|.
name|replaceFrom
argument_list|(
name|s
argument_list|,
literal|"ZZ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|trimFrom
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matcher
operator|.
name|countIn
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that expected is equals to out, and further, if in is    * equals to expected, then out is successfully optimized to be    * identical to in, i.e. that "in" is simply returned.    */
DECL|method|assertEqualsSame (String expected, String in, String out)
specifier|private
name|void
name|assertEqualsSame
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|.
name|equals
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|assertSame
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test collapse() a little differently than the rest, as we really want to
comment|// cover lots of different configurations of input text
DECL|method|testCollapse ()
specifier|public
name|void
name|testCollapse
parameter_list|()
block|{
comment|// collapsing groups of '-' into '_' or '-'
name|doTestCollapse
argument_list|(
literal|"-"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x-"
argument_list|,
literal|"x_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"-x"
argument_list|,
literal|"_x"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"--"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x--"
argument_list|,
literal|"x_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"--x"
argument_list|,
literal|"_x"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"-x-"
argument_list|,
literal|"_x_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x-x"
argument_list|,
literal|"x_x"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"---"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"--x-"
argument_list|,
literal|"_x_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"--xx"
argument_list|,
literal|"_xx"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"-x--"
argument_list|,
literal|"_x_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"-x-x"
argument_list|,
literal|"_x_x"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"-xx-"
argument_list|,
literal|"_xx_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x--x"
argument_list|,
literal|"x_x"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x-x-"
argument_list|,
literal|"x_x_"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x-xx"
argument_list|,
literal|"x_xx"
argument_list|)
expr_stmt|;
name|doTestCollapse
argument_list|(
literal|"x-x--xx---x----x"
argument_list|,
literal|"x_x_xx_x_x"
argument_list|)
expr_stmt|;
name|doTestCollapseWithNoChange
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestCollapseWithNoChange
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|doTestCollapseWithNoChange
argument_list|(
literal|"xx"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestCollapse (String in, String out)
specifier|private
name|void
name|doTestCollapse
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
block|{
comment|// Try a few different matchers which all match '-' and not 'x'
comment|// Try replacement chars that both do and do not change the value.
for|for
control|(
name|char
name|replacement
range|:
operator|new
name|char
index|[]
block|{
literal|'_'
block|,
literal|'-'
block|}
control|)
block|{
name|String
name|expected
init|=
name|out
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
name|replacement
argument_list|)
decl_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|isNot
argument_list|(
literal|'x'
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'x'
argument_list|)
operator|.
name|negate
argument_list|()
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|anyOf
argument_list|(
literal|"-"
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|anyOf
argument_list|(
literal|"-#"
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|anyOf
argument_list|(
literal|"-#123"
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestCollapseWithNoChange (String inout)
specifier|private
name|void
name|doTestCollapseWithNoChange
parameter_list|(
name|String
name|inout
parameter_list|)
block|{
name|assertSame
argument_list|(
name|inout
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|isNot
argument_list|(
literal|'x'
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|is
argument_list|(
literal|'x'
argument_list|)
operator|.
name|negate
argument_list|()
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|anyOf
argument_list|(
literal|"-"
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|anyOf
argument_list|(
literal|"-#"
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|anyOf
argument_list|(
literal|"-#123"
argument_list|)
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inout
argument_list|,
name|CharMatcher
operator|.
name|NONE
operator|.
name|collapseFrom
argument_list|(
name|inout
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollapse_any ()
specifier|public
name|void
name|testCollapse_any
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|collapseFrom
argument_list|(
literal|""
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_"
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|collapseFrom
argument_list|(
literal|"a"
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_"
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|collapseFrom
argument_list|(
literal|"ab"
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_"
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|collapseFrom
argument_list|(
literal|"abcd"
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimFrom ()
specifier|public
name|void
name|testTrimFrom
parameter_list|()
block|{
comment|// trimming -
name|doTestTrimFrom
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"-x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"--"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x--"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"--x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"-x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x-x"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"---"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"--x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"--xx"
argument_list|,
literal|"xx"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"-x--"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"-x-x"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"-xx-"
argument_list|,
literal|"xx"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x--x"
argument_list|,
literal|"x--x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x-x-"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x-xx"
argument_list|,
literal|"x-xx"
argument_list|)
expr_stmt|;
name|doTestTrimFrom
argument_list|(
literal|"x-x--xx---x----x"
argument_list|,
literal|"x-x--xx---x----x"
argument_list|)
expr_stmt|;
comment|// additional testing using the doc example
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|anyOf
argument_list|(
literal|"ab"
argument_list|)
operator|.
name|trimFrom
argument_list|(
literal|"abacatbab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestTrimFrom (String in, String out)
specifier|private
name|void
name|doTestTrimFrom
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
block|{
comment|// Try a few different matchers which all match '-' and not 'x'
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|isNot
argument_list|(
literal|'x'
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'x'
argument_list|)
operator|.
name|negate
argument_list|()
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-"
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-#"
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-#123"
argument_list|)
operator|.
name|trimFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimLeadingFrom ()
specifier|public
name|void
name|testTrimLeadingFrom
parameter_list|()
block|{
comment|// trimming -
name|doTestTrimLeadingFrom
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x-"
argument_list|,
literal|"x-"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"-x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"--"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x--"
argument_list|,
literal|"x--"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"--x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"-x-"
argument_list|,
literal|"x-"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x-x"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"---"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"--x-"
argument_list|,
literal|"x-"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"--xx"
argument_list|,
literal|"xx"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"-x--"
argument_list|,
literal|"x--"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"-x-x"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"-xx-"
argument_list|,
literal|"xx-"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x--x"
argument_list|,
literal|"x--x"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x-x-"
argument_list|,
literal|"x-x-"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x-xx"
argument_list|,
literal|"x-xx"
argument_list|)
expr_stmt|;
name|doTestTrimLeadingFrom
argument_list|(
literal|"x-x--xx---x----x"
argument_list|,
literal|"x-x--xx---x----x"
argument_list|)
expr_stmt|;
comment|// additional testing using the doc example
name|assertEquals
argument_list|(
literal|"catbab"
argument_list|,
name|anyOf
argument_list|(
literal|"ab"
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
literal|"abacatbab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestTrimLeadingFrom (String in, String out)
specifier|private
name|void
name|doTestTrimLeadingFrom
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
block|{
comment|// Try a few different matchers which all match '-' and not 'x'
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|isNot
argument_list|(
literal|'x'
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'x'
argument_list|)
operator|.
name|negate
argument_list|()
operator|.
name|trimLeadingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-#"
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-#123"
argument_list|)
operator|.
name|trimLeadingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimTrailingFrom ()
specifier|public
name|void
name|testTrimTrailingFrom
parameter_list|()
block|{
comment|// trimming -
name|doTestTrimTrailingFrom
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"-x"
argument_list|,
literal|"-x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"--"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x--"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"--x"
argument_list|,
literal|"--x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"-x-"
argument_list|,
literal|"-x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x-x"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"---"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"--x-"
argument_list|,
literal|"--x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"--xx"
argument_list|,
literal|"--xx"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"-x--"
argument_list|,
literal|"-x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"-x-x"
argument_list|,
literal|"-x-x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"-xx-"
argument_list|,
literal|"-xx"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x--x"
argument_list|,
literal|"x--x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x-x-"
argument_list|,
literal|"x-x"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x-xx"
argument_list|,
literal|"x-xx"
argument_list|)
expr_stmt|;
name|doTestTrimTrailingFrom
argument_list|(
literal|"x-x--xx---x----x"
argument_list|,
literal|"x-x--xx---x----x"
argument_list|)
expr_stmt|;
comment|// additional testing using the doc example
name|assertEquals
argument_list|(
literal|"abacat"
argument_list|,
name|anyOf
argument_list|(
literal|"ab"
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
literal|"abacatbab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestTrimTrailingFrom (String in, String out)
specifier|private
name|void
name|doTestTrimTrailingFrom
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
block|{
comment|// Try a few different matchers which all match '-' and not 'x'
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|isNot
argument_list|(
literal|'x'
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|is
argument_list|(
literal|'x'
argument_list|)
operator|.
name|negate
argument_list|()
operator|.
name|trimTrailingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-#"
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|anyOf
argument_list|(
literal|"-#123"
argument_list|)
operator|.
name|trimTrailingFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimAndCollapse ()
specifier|public
name|void
name|testTrimAndCollapse
parameter_list|()
block|{
comment|// collapsing groups of '-' into '_' or '-'
name|doTestTrimAndCollapse
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"-x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"--"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x--"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"--x"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"-x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x-x"
argument_list|,
literal|"x_x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"---"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"--x-"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"--xx"
argument_list|,
literal|"xx"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"-x--"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"-x-x"
argument_list|,
literal|"x_x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"-xx-"
argument_list|,
literal|"xx"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x--x"
argument_list|,
literal|"x_x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x-x-"
argument_list|,
literal|"x_x"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x-xx"
argument_list|,
literal|"x_xx"
argument_list|)
expr_stmt|;
name|doTestTrimAndCollapse
argument_list|(
literal|"x-x--xx---x----x"
argument_list|,
literal|"x_x_xx_x_x"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestTrimAndCollapse (String in, String out)
specifier|private
name|void
name|doTestTrimAndCollapse
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|)
block|{
comment|// Try a few different matchers which all match '-' and not 'x'
for|for
control|(
name|char
name|replacement
range|:
operator|new
name|char
index|[]
block|{
literal|'_'
block|,
literal|'-'
block|}
control|)
block|{
name|String
name|expected
init|=
name|out
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
name|replacement
argument_list|)
decl_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|is
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|isNot
argument_list|(
literal|'x'
argument_list|)
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|is
argument_list|(
literal|'x'
argument_list|)
operator|.
name|negate
argument_list|()
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|anyOf
argument_list|(
literal|"-"
argument_list|)
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|anyOf
argument_list|(
literal|"-#"
argument_list|)
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
name|assertEqualsSame
argument_list|(
name|expected
argument_list|,
name|in
argument_list|,
name|anyOf
argument_list|(
literal|"-#123"
argument_list|)
operator|.
name|trimAndCollapseFrom
argument_list|(
name|in
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testReplaceFrom ()
specifier|public
name|void
name|testReplaceFrom
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"yoho"
argument_list|,
name|is
argument_list|(
literal|'a'
argument_list|)
operator|.
name|replaceFrom
argument_list|(
literal|"yaha"
argument_list|,
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yh"
argument_list|,
name|is
argument_list|(
literal|'a'
argument_list|)
operator|.
name|replaceFrom
argument_list|(
literal|"yaha"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yoho"
argument_list|,
name|is
argument_list|(
literal|'a'
argument_list|)
operator|.
name|replaceFrom
argument_list|(
literal|"yaha"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yoohoo"
argument_list|,
name|is
argument_list|(
literal|'a'
argument_list|)
operator|.
name|replaceFrom
argument_list|(
literal|"yaha"
argument_list|,
literal|"oo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12&gt; 5"
argument_list|,
name|is
argument_list|(
literal|'>'
argument_list|)
operator|.
name|replaceFrom
argument_list|(
literal|"12> 5"
argument_list|,
literal|"&gt;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrecomputedOptimizations ()
specifier|public
name|void
name|testPrecomputedOptimizations
parameter_list|()
block|{
comment|// These are testing behavior that's never promised by the API.
comment|// Some matchers are so efficient that it is a waste of effort to
comment|// build a precomputed version.
name|CharMatcher
name|m1
init|=
name|is
argument_list|(
literal|'x'
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|m1
argument_list|,
name|m1
operator|.
name|precomputed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m1
operator|.
name|toString
argument_list|()
argument_list|,
name|m1
operator|.
name|precomputed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CharMatcher
name|m2
init|=
name|anyOf
argument_list|(
literal|"Az"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|m2
argument_list|,
name|m2
operator|.
name|precomputed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m2
operator|.
name|toString
argument_list|()
argument_list|,
name|m2
operator|.
name|precomputed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CharMatcher
name|m3
init|=
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|m3
argument_list|,
name|m3
operator|.
name|precomputed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m3
operator|.
name|toString
argument_list|()
argument_list|,
name|m3
operator|.
name|precomputed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CharMatcher
operator|.
name|NONE
argument_list|,
name|CharMatcher
operator|.
name|NONE
operator|.
name|precomputed
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CharMatcher
operator|.
name|ANY
argument_list|,
name|CharMatcher
operator|.
name|ANY
operator|.
name|precomputed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.BitSet"
argument_list|)
DECL|method|bitSet (String chars)
specifier|private
specifier|static
name|BitSet
name|bitSet
parameter_list|(
name|String
name|chars
parameter_list|)
block|{
return|return
name|bitSet
argument_list|(
name|chars
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.BitSet"
argument_list|)
DECL|method|bitSet (char[] chars)
specifier|private
specifier|static
name|BitSet
name|bitSet
parameter_list|(
name|char
index|[]
name|chars
parameter_list|)
block|{
name|BitSet
name|tmp
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tmp
operator|.
name|set
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.Random, java.util.BitSet"
argument_list|)
DECL|method|testSmallCharMatcher ()
specifier|public
name|void
name|testSmallCharMatcher
parameter_list|()
block|{
name|CharMatcher
name|len1
init|=
name|SmallCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"#"
argument_list|)
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|CharMatcher
name|len2
init|=
name|SmallCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"ab"
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
decl_stmt|;
name|CharMatcher
name|len3
init|=
name|SmallCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|CharMatcher
name|len4
init|=
name|SmallCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"abcd"
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|len1
operator|.
name|matches
argument_list|(
literal|'#'
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|len1
operator|.
name|matches
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len2
operator|.
name|matches
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len2
operator|.
name|matches
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'c'
init|;
name|c
operator|<
literal|'z'
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|len2
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'d'
init|;
name|c
operator|<
literal|'z'
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'e'
init|;
name|c
operator|<
literal|'z'
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|testCase
init|=
literal|0
init|;
name|testCase
operator|<
literal|100
condition|;
name|testCase
operator|++
control|)
block|{
name|char
index|[]
name|chars
init|=
name|randomChars
argument_list|(
name|rand
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|63
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|CharMatcher
name|m
init|=
name|SmallCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
name|chars
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|chars
argument_list|)
argument_list|)
decl_stmt|;
name|checkExactMatches
argument_list|(
name|m
argument_list|,
name|chars
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkExactMatches (CharMatcher m, char[] chars)
specifier|static
name|void
name|checkExactMatches
parameter_list|(
name|CharMatcher
name|m
parameter_list|,
name|char
index|[]
name|chars
parameter_list|)
block|{
name|Set
argument_list|<
name|Character
argument_list|>
name|positive
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|chars
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|positive
operator|.
name|add
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<=
name|Character
operator|.
name|MAX_VALUE
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|positive
operator|.
name|contains
argument_list|(
operator|new
name|Character
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
argument_list|)
operator|^
name|m
operator|.
name|matches
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomChars (Random rand, int size)
specifier|static
name|char
index|[]
name|randomChars
parameter_list|(
name|Random
name|rand
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Set
argument_list|<
name|Character
argument_list|>
name|chars
init|=
operator|new
name|HashSet
argument_list|<
name|Character
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|c
operator|=
operator|(
name|char
operator|)
name|rand
operator|.
name|nextInt
argument_list|(
name|Character
operator|.
name|MAX_VALUE
operator|-
name|Character
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|chars
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|chars
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|char
index|[]
name|retValue
init|=
operator|new
name|char
index|[
name|chars
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
name|retValue
index|[
name|i
operator|++
index|]
operator|=
name|c
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|retValue
argument_list|)
expr_stmt|;
return|return
name|retValue
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.util.Random, java.util.BitSet"
argument_list|)
DECL|method|testMediumCharMatcher ()
specifier|public
name|void
name|testMediumCharMatcher
parameter_list|()
block|{
name|CharMatcher
name|len1
init|=
name|MediumCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"#"
argument_list|)
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|CharMatcher
name|len2
init|=
name|MediumCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"ab"
argument_list|)
argument_list|,
literal|"ab"
argument_list|)
decl_stmt|;
name|CharMatcher
name|len3
init|=
name|MediumCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|CharMatcher
name|len4
init|=
name|MediumCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
literal|"abcd"
argument_list|)
argument_list|,
literal|"abcd"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|len1
operator|.
name|matches
argument_list|(
literal|'#'
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|len1
operator|.
name|matches
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len2
operator|.
name|matches
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len2
operator|.
name|matches
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'c'
init|;
name|c
operator|<
literal|'z'
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|len2
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'d'
init|;
name|c
operator|<
literal|'z'
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|len3
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'e'
init|;
name|c
operator|<
literal|'z'
condition|;
name|c
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|len4
operator|.
name|matches
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|testCase
init|=
literal|0
init|;
name|testCase
operator|<
literal|100
condition|;
name|testCase
operator|++
control|)
block|{
name|char
index|[]
name|chars
init|=
name|randomChars
argument_list|(
name|rand
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|1023
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|CharMatcher
name|m
init|=
name|MediumCharMatcher
operator|.
name|from
argument_list|(
name|bitSet
argument_list|(
name|chars
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|chars
argument_list|)
argument_list|)
decl_stmt|;
name|checkExactMatches
argument_list|(
name|m
argument_list|,
name|chars
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create an iterable of ints based on a string description, like,    * "1-2,3,4,rand(5, 20, 6)". The last part says to generate 6 random values    * between 5 and 20 (inclusive).    */
DECL|method|intValues (String desc)
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|intValues
parameter_list|(
name|String
name|desc
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|desc
argument_list|)
control|)
block|{
if|if
condition|(
name|part
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|part
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
name|int
name|begin
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|part
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|part
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|begin
init|;
name|j
operator|<=
name|end
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
literal|"rand"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|';'
argument_list|)
operator|.
name|split
argument_list|(
name|part
operator|.
name|substring
argument_list|(
literal|5
argument_list|,
name|part
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|minValue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxValue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|maxValue
operator|-
name|minValue
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|diff
argument_list|)
operator|+
name|minValue
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"CharMatcher.NONE"
argument_list|,
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CharMatcher.is('\\u0031')"
argument_list|,
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CharMatcher.anyOf(\"\\u0031\\u0032\")"
argument_list|,
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"12"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CharMatcher.anyOf(\"\\u0031\\u0032\\u0033\")"
argument_list|,
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"321"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CharMatcher.inRange('\\u0031', '\\u0033')"
argument_list|,
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'1'
argument_list|,
literal|'3'
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

