begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2005 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|internal
operator|.
name|Finalizer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|GcFinalization
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link FinalizableReferenceQueue}.  *  * @author Bob Lee  */
end_comment

begin_class
DECL|class|FinalizableReferenceQueueTest
specifier|public
class|class
name|FinalizableReferenceQueueTest
extends|extends
name|TestCase
block|{
DECL|field|frq
specifier|private
name|FinalizableReferenceQueue
name|frq
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|frq
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testFinalizeReferentCalled ()
specifier|public
name|void
name|testFinalizeReferentCalled
parameter_list|()
block|{
specifier|final
name|MockReference
name|reference
init|=
operator|new
name|MockReference
argument_list|(
name|frq
operator|=
operator|new
name|FinalizableReferenceQueue
argument_list|()
argument_list|)
decl_stmt|;
name|GcFinalization
operator|.
name|awaitDone
argument_list|(
operator|new
name|GcFinalization
operator|.
name|FinalizationPredicate
argument_list|()
block|{
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|reference
operator|.
name|finalizeReferentCalled
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|MockReference
specifier|static
class|class
name|MockReference
extends|extends
name|FinalizableWeakReference
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|finalizeReferentCalled
specifier|volatile
name|boolean
name|finalizeReferentCalled
decl_stmt|;
DECL|method|MockReference (FinalizableReferenceQueue frq)
name|MockReference
parameter_list|(
name|FinalizableReferenceQueue
name|frq
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|frq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finalizeReferent ()
specifier|public
name|void
name|finalizeReferent
parameter_list|()
block|{
name|finalizeReferentCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Keeps a weak reference to the underlying reference queue. When this    * reference is cleared, we know that the background thread has stopped    * and released its strong reference.    */
DECL|field|queueReference
specifier|private
name|WeakReference
argument_list|<
name|ReferenceQueue
argument_list|<
name|Object
argument_list|>
argument_list|>
name|queueReference
decl_stmt|;
DECL|method|testThatFinalizerStops ()
specifier|public
name|void
name|testThatFinalizerStops
parameter_list|()
block|{
name|weaklyReferenceQueue
argument_list|()
expr_stmt|;
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|queueReference
argument_list|)
expr_stmt|;
block|}
comment|/**    * If we don't keep a strong reference to the reference object, it won't    * be enqueued.    */
DECL|field|reference
name|FinalizableWeakReference
argument_list|<
name|Object
argument_list|>
name|reference
decl_stmt|;
comment|/**    * Create the FRQ in a method that goes out of scope so that we're sure    * it will be reclaimed.    */
DECL|method|weaklyReferenceQueue ()
specifier|private
name|void
name|weaklyReferenceQueue
parameter_list|()
block|{
name|frq
operator|=
operator|new
name|FinalizableReferenceQueue
argument_list|()
expr_stmt|;
name|queueReference
operator|=
operator|new
name|WeakReference
argument_list|<
name|ReferenceQueue
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|(
name|frq
operator|.
name|queue
argument_list|)
expr_stmt|;
comment|/*      * Queue and clear a reference for good measure. We test later on that      * the finalizer thread stopped, but we should test that it actually      * started first.      */
name|reference
operator|=
operator|new
name|FinalizableWeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|frq
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|finalizeReferent
parameter_list|()
block|{
name|reference
operator|=
literal|null
expr_stmt|;
name|frq
operator|=
literal|null
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// no concept of separate ClassLoaders
DECL|method|testDecoupledLoader ()
specifier|public
name|void
name|testDecoupledLoader
parameter_list|()
block|{
name|FinalizableReferenceQueue
operator|.
name|DecoupledLoader
name|decoupledLoader
init|=
operator|new
name|FinalizableReferenceQueue
operator|.
name|DecoupledLoader
argument_list|()
block|{
annotation|@
name|Override
name|URLClassLoader
name|newLoader
parameter_list|(
name|URL
name|base
parameter_list|)
block|{
return|return
operator|new
name|DecoupledClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|base
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|finalizerCopy
init|=
name|decoupledLoader
operator|.
name|loadFinalizer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|finalizerCopy
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|Finalizer
operator|.
name|class
argument_list|,
name|finalizerCopy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FinalizableReferenceQueue
operator|.
name|getStartFinalizer
argument_list|(
name|finalizerCopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|DecoupledClassLoader
specifier|static
class|class
name|DecoupledClassLoader
extends|extends
name|URLClassLoader
block|{
DECL|method|DecoupledClassLoader (URL[] urls)
specifier|public
name|DecoupledClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadClass (String name, boolean resolve)
specifier|protected
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resolve
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|// Force Finalizer to load from this class loader, not its parent.
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|Finalizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|findClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolve
condition|)
block|{
name|resolveClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|,
name|resolve
argument_list|)
return|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): How significant is this failure?
DECL|method|testGetFinalizerUrl ()
specifier|public
name|void
name|testGetFinalizerUrl
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"internal/Finalizer.class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFinalizeClassHasNoNestedClases ()
specifier|public
name|void
name|testFinalizeClassHasNoNestedClases
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensure that the Finalizer class has no nested classes.
comment|// See https://code.google.com/p/guava-libraries/issues/detail?id=1505
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Finalizer
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

