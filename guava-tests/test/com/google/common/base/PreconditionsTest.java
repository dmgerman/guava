begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ArbitraryInstances
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Preconditions}.  *  * @author Kevin Bourrillion  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|PreconditionsTest
specifier|public
class|class
name|PreconditionsTest
extends|extends
name|TestCase
block|{
DECL|method|testCheckArgument_simple_success ()
specifier|public
name|void
name|testCheckArgument_simple_success
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckArgument_simple_failure ()
specifier|public
name|void
name|testCheckArgument_simple_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckArgument_simpleMessage_success ()
specifier|public
name|void
name|testCheckArgument_simpleMessage_success
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|true
argument_list|,
name|IGNORE_ME
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckArgument_simpleMessage_failure ()
specifier|public
name|void
name|testCheckArgument_simpleMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|verifySimpleMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_nullMessage_failure ()
specifier|public
name|void
name|testCheckArgument_nullMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_nullMessageWithArgs_failure ()
specifier|public
name|void
name|testCheckArgument_nullMessageWithArgs_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"null [b, d]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_nullArgs_failure ()
specifier|public
name|void
name|testCheckArgument_nullArgs_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|"A %s C %s E"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"A null C null E"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_notEnoughArgs_failure ()
specifier|public
name|void
name|testCheckArgument_notEnoughArgs_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|"A %s C %s E"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"A b C %s E"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_tooManyArgs_failure ()
specifier|public
name|void
name|testCheckArgument_tooManyArgs_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|"A %s C %s E"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"A b C d E [f]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_singleNullArg_failure ()
specifier|public
name|void
name|testCheckArgument_singleNullArg_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|"A %s C"
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"A null C"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_singleNullArray_failure ()
specifier|public
name|void
name|testCheckArgument_singleNullArray_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
literal|"A %s C"
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"A (Object[])null C"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckArgument_complexMessage_success ()
specifier|public
name|void
name|testCheckArgument_complexMessage_success
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|true
argument_list|,
literal|"%s"
argument_list|,
name|IGNORE_ME
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckArgument_complexMessage_failure ()
specifier|public
name|void
name|testCheckArgument_complexMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|false
argument_list|,
name|FORMAT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|verifyComplexMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckState_simple_success ()
specifier|public
name|void
name|testCheckState_simple_success
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckState_simple_failure ()
specifier|public
name|void
name|testCheckState_simple_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckState_simpleMessage_success ()
specifier|public
name|void
name|testCheckState_simpleMessage_success
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|true
argument_list|,
name|IGNORE_ME
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckState_simpleMessage_failure ()
specifier|public
name|void
name|testCheckState_simpleMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|verifySimpleMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckState_nullMessage_failure ()
specifier|public
name|void
name|testCheckState_nullMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckState_complexMessage_success ()
specifier|public
name|void
name|testCheckState_complexMessage_success
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|true
argument_list|,
literal|"%s"
argument_list|,
name|IGNORE_ME
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckState_complexMessage_failure ()
specifier|public
name|void
name|testCheckState_complexMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|,
name|FORMAT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|verifyComplexMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|NON_NULL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|NON_NULL_STRING
init|=
literal|"foo"
decl_stmt|;
DECL|method|testCheckNotNull_simple_success ()
specifier|public
name|void
name|testCheckNotNull_simple_success
parameter_list|()
block|{
name|String
name|result
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|NON_NULL_STRING
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NON_NULL_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNotNull_simple_failure ()
specifier|public
name|void
name|testCheckNotNull_simple_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNotNull_simpleMessage_success ()
specifier|public
name|void
name|testCheckNotNull_simpleMessage_success
parameter_list|()
block|{
name|String
name|result
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|NON_NULL_STRING
argument_list|,
name|IGNORE_ME
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NON_NULL_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNotNull_simpleMessage_failure ()
specifier|public
name|void
name|testCheckNotNull_simpleMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
literal|null
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{
name|verifySimpleMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckNotNull_complexMessage_success ()
specifier|public
name|void
name|testCheckNotNull_complexMessage_success
parameter_list|()
block|{
name|String
name|result
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|NON_NULL_STRING
argument_list|,
literal|"%s"
argument_list|,
name|IGNORE_ME
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NON_NULL_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNotNull_complexMessage_failure ()
specifier|public
name|void
name|testCheckNotNull_complexMessage_failure
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
literal|null
argument_list|,
name|FORMAT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{
name|verifyComplexMessage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckElementIndex_ok ()
specifier|public
name|void
name|testCheckElementIndex_ok
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckElementIndex_badSize ()
specifier|public
name|void
name|testCheckElementIndex_badSize
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// don't care what the message text is, as this is an invalid usage of
comment|// the Preconditions class, unlike all the other exceptions it throws
block|}
block|}
DECL|method|testCheckElementIndex_negative ()
specifier|public
name|void
name|testCheckElementIndex_negative
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"index (-1) must not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckElementIndex_tooHigh ()
specifier|public
name|void
name|testCheckElementIndex_tooHigh
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"index (1) must be less than size (1)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckElementIndex_withDesc_negative ()
specifier|public
name|void
name|testCheckElementIndex_withDesc_negative
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"foo (-1) must not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckElementIndex_withDesc_tooHigh ()
specifier|public
name|void
name|testCheckElementIndex_withDesc_tooHigh
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"foo (1) must be less than size (1)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndex_ok ()
specifier|public
name|void
name|testCheckPositionIndex_ok
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositionIndex_badSize ()
specifier|public
name|void
name|testCheckPositionIndex_badSize
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// don't care what the message text is, as this is an invalid usage of
comment|// the Preconditions class, unlike all the other exceptions it throws
block|}
block|}
DECL|method|testCheckPositionIndex_negative ()
specifier|public
name|void
name|testCheckPositionIndex_negative
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"index (-1) must not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndex_tooHigh ()
specifier|public
name|void
name|testCheckPositionIndex_tooHigh
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"index (2) must not be greater than size (1)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndex_withDesc_negative ()
specifier|public
name|void
name|testCheckPositionIndex_withDesc_negative
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"foo (-1) must not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndex_withDesc_tooHigh ()
specifier|public
name|void
name|testCheckPositionIndex_withDesc_tooHigh
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"foo (2) must not be greater than size (1)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndexes_ok ()
specifier|public
name|void
name|testCheckPositionIndexes_ok
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositionIndexes_badSize ()
specifier|public
name|void
name|testCheckPositionIndexes_badSize
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositionIndex_startNegative ()
specifier|public
name|void
name|testCheckPositionIndex_startNegative
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"start index (-1) must not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndexes_endTooHigh ()
specifier|public
name|void
name|testCheckPositionIndexes_endTooHigh
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"end index (2) must not be greater than size (1)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckPositionIndexes_reversed ()
specifier|public
name|void
name|testCheckPositionIndexes_reversed
parameter_list|()
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"end index (0) must not be less than start index (1)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"%s"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo [5]"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo [5, 6, 7]"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"%s 1 2"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s %s %s"
argument_list|,
literal|"%s"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" [5, 6]"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|""
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s%s%s"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1%s%s"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s%s%s"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5 + 6 = 11"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s + 6 = 11"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5 + 6 = 11"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"5 + %s = 11"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5 + 6 = 11"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"5 + 6 = %s"
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5 + 6 = 11"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s + %s = %s"
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null [null, null]"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null [5, 6]"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(Object[])null"
argument_list|,
name|Preconditions
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Reflection"
argument_list|)
DECL|method|testAllOverloads_checkArgument ()
specifier|public
name|void
name|testAllOverloads_checkArgument
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|sig
range|:
name|allSignatures
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
control|)
block|{
name|Method
name|checkArgumentMethod
init|=
name|Preconditions
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"checkArgument"
argument_list|,
name|sig
operator|.
name|toArray
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
block|)
function|;
name|checkArgumentMethod
operator|.
name|invoke
argument_list|(
literal|null
comment|/* static method */
argument_list|,
name|getParametersForSignature
argument_list|(
literal|true
argument_list|,
name|sig
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|failingParams
init|=
name|getParametersForSignature
argument_list|(
literal|false
argument_list|,
name|sig
argument_list|)
decl_stmt|;
try|try
block|{
name|checkArgumentMethod
operator|.
name|invoke
argument_list|(
literal|null
comment|/* static method */
argument_list|,
name|failingParams
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|assertFailureCause
argument_list|(
name|ite
operator|.
name|getCause
argument_list|()
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|failingParams
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_expr_stmt
unit|}    @
name|GwtIncompatible
argument_list|(
literal|"Reflection"
argument_list|)
DECL|method|testAllOverloads_checkState ()
specifier|public
name|void
name|testAllOverloads_checkState
argument_list|()
throws|throws
name|Exception
block|{
end_expr_stmt

begin_for
for|for
control|(
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|sig
range|:
name|allSignatures
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
control|)
block|{
name|Method
name|checkArgumentMethod
init|=
name|Preconditions
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"checkState"
argument_list|,
name|sig
operator|.
name|toArray
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
end_for

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|checkArgumentMethod
operator|.
name|invoke
argument_list|(
literal|null
comment|/* static method */
argument_list|,
name|getParametersForSignature
argument_list|(
literal|true
argument_list|,
name|sig
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Object
index|[]
name|failingParams
init|=
name|getParametersForSignature
argument_list|(
literal|false
argument_list|,
name|sig
argument_list|)
decl_stmt|;
end_decl_stmt

begin_try
try|try
block|{
name|checkArgumentMethod
operator|.
name|invoke
argument_list|(
literal|null
comment|/* static method */
argument_list|,
name|failingParams
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|assertFailureCause
argument_list|(
name|ite
operator|.
name|getCause
argument_list|()
argument_list|,
name|IllegalStateException
operator|.
name|class
argument_list|,
name|failingParams
argument_list|)
expr_stmt|;
block|}
end_try

begin_function
unit|}   }
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Reflection"
argument_list|)
DECL|method|testAllOverloads_checkNotNull ()
specifier|public
name|void
name|testAllOverloads_checkNotNull
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|sig
range|:
name|allSignatures
argument_list|(
name|Object
operator|.
name|class
argument_list|)
control|)
block|{
name|Method
name|checkArgumentMethod
init|=
name|Preconditions
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"checkNotNull"
argument_list|,
name|sig
operator|.
name|toArray
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
block|)
function|;
end_function

begin_expr_stmt
name|checkArgumentMethod
operator|.
name|invoke
argument_list|(
literal|null
comment|/* static method */
argument_list|,
name|getParametersForSignature
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|sig
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Object
index|[]
name|failingParams
init|=
name|getParametersForSignature
argument_list|(
literal|null
argument_list|,
name|sig
argument_list|)
decl_stmt|;
end_decl_stmt

begin_try
try|try
block|{
name|checkArgumentMethod
operator|.
name|invoke
argument_list|(
literal|null
comment|/* static method */
argument_list|,
name|failingParams
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|assertFailureCause
argument_list|(
name|ite
operator|.
name|getCause
argument_list|()
argument_list|,
name|NullPointerException
operator|.
name|class
argument_list|,
name|failingParams
argument_list|)
expr_stmt|;
block|}
end_try

begin_comment
unit|}   }
comment|/**    * Asserts that the given throwable has the given class and then asserts on the message as using    * the full set of method parameters.    */
end_comment

begin_function
DECL|method|assertFailureCause ( Throwable throwable, Class<? extends Throwable> clazz, Object[] params)
specifier|private
name|void
name|assertFailureCause
parameter_list|(
name|Throwable
name|throwable
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|clazz
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
name|assertThat
argument_list|(
name|throwable
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|throwable
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|assertThat
argument_list|(
name|throwable
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|throwable
argument_list|)
operator|.
name|hasMessage
argument_list|(
name|Preconditions
operator|.
name|format
argument_list|(
literal|""
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|params
argument_list|,
literal|2
argument_list|,
name|params
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Returns an array containing parameters for invoking a checkArgument, checkNotNull or checkState    * method reflectively    *    * @param firstParam The first parameter    * @param sig The method signature    */
end_comment

begin_function
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ArbitraryInstances"
argument_list|)
DECL|method|getParametersForSignature (Object firstParam, ImmutableList<Class<?>> sig)
specifier|private
name|Object
index|[]
name|getParametersForSignature
parameter_list|(
name|Object
name|firstParam
parameter_list|,
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|sig
parameter_list|)
block|{
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|sig
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|params
index|[
literal|0
index|]
operator|=
name|firstParam
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|params
index|[
literal|1
index|]
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|>
literal|2
condition|)
block|{
comment|// fill in the rest of the array with arbitrary instances
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|sig
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|params
return|;
block|}
end_function

begin_decl_stmt
DECL|field|possibleParamTypes
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|possibleParamTypes
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Returns a list of parameters for invoking an overload of checkState, checkArgument or    * checkNotNull    *    * @param predicateType The first parameter to the method (boolean or Object)    */
end_comment

begin_function
DECL|method|allSignatures (Class<?> predicateType)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|allSignatures
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|predicateType
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|allOverloads
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// The first two are for the overloads that don't take formatting args, e.g.
comment|// checkArgument(boolean) and checkArgument(boolean, Object)
name|allOverloads
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|(
name|predicateType
argument_list|)
argument_list|)
expr_stmt|;
name|allOverloads
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|(
name|predicateType
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|typesLists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|typesLists
operator|.
name|add
argument_list|(
name|possibleParamTypes
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|curr
range|:
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|typesLists
argument_list|)
control|)
block|{
name|allOverloads
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|predicateType
argument_list|)
operator|.
name|add
argument_list|(
name|String
operator|.
name|class
argument_list|)
comment|// the format string
operator|.
name|addAll
argument_list|(
name|curr
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allOverloads
operator|.
name|build
argument_list|()
operator|.
name|asList
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// 'test' to demonstrate some potentially ambiguous overloads.  This 'test' is kind of strange,
end_comment

begin_comment
comment|// but essentially each line will be a call to a Preconditions method that, but for a documented
end_comment

begin_comment
comment|// change would be a compiler error.
end_comment

begin_comment
comment|// See http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.2 for the spec on
end_comment

begin_comment
comment|// how javac selects overloads
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
DECL|method|overloadSelection ()
specifier|public
name|void
name|overloadSelection
parameter_list|()
block|{
name|Boolean
name|boxedBoolean
init|=
literal|null
decl_stmt|;
name|boolean
name|aBoolean
init|=
literal|true
decl_stmt|;
name|Long
name|boxedLong
init|=
literal|null
decl_stmt|;
name|int
name|anInt
init|=
literal|1
decl_stmt|;
comment|// With a boxed predicate, no overloads can be selected in phase 1
comment|// ambiguous without the call to .booleanValue to unbox the Boolean
name|checkState
argument_list|(
name|boxedBoolean
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// ambiguous without the cast to Object because the boxed predicate prevents any overload from
comment|// being selected in phase 1
name|checkState
argument_list|(
name|boxedBoolean
argument_list|,
literal|""
argument_list|,
operator|(
name|Object
operator|)
name|boxedLong
argument_list|)
expr_stmt|;
comment|// ternaries introduce their own problems. because of the ternary (which requires a boxing
comment|// operation) no overload can be selected in phase 1.  and in phase 2 it is ambiguous since it
comment|// matches with the second parameter being boxed and without it being boxed.  The cast to Object
comment|// avoids this.
name|checkState
argument_list|(
name|aBoolean
argument_list|,
literal|""
argument_list|,
name|aBoolean
condition|?
literal|""
else|:
name|anInt
argument_list|,
operator|(
name|Object
operator|)
name|anInt
argument_list|)
expr_stmt|;
comment|// ambiguous without the .booleanValue() call since the boxing forces us into phase 2 resolution
name|short
name|s
init|=
literal|2
decl_stmt|;
name|checkState
argument_list|(
name|boxedBoolean
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|""
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Preconditions
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
DECL|field|IGNORE_ME
specifier|private
specifier|static
specifier|final
name|Object
name|IGNORE_ME
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_class
DECL|class|Message
specifier|private
specifier|static
class|class
name|Message
block|{
DECL|field|invoked
name|boolean
name|invoked
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|invoked
argument_list|)
expr_stmt|;
name|invoked
operator|=
literal|true
expr_stmt|;
return|return
literal|"A message"
return|;
block|}
block|}
end_class

begin_decl_stmt
DECL|field|FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT
init|=
literal|"I ate %s pies."
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|verifySimpleMessage (Exception e)
specifier|private
specifier|static
name|void
name|verifySimpleMessage
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"A message"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|verifyComplexMessage (Exception e)
specifier|private
specifier|static
name|void
name|verifyComplexMessage
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"I ate 5 pies."
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

