begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Enums}.  *  * @author Steve McKay  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|EnumsTest
specifier|public
class|class
name|EnumsTest
extends|extends
name|TestCase
block|{
DECL|enum|TestEnum
specifier|private
enum|enum
name|TestEnum
block|{
DECL|enumConstant|CHEETO
name|CHEETO
block|,
DECL|enumConstant|HONDA
name|HONDA
block|,
DECL|enumConstant|POODLE
name|POODLE
block|,   }
DECL|enum|OtherEnum
specifier|private
enum|enum
name|OtherEnum
block|{}
DECL|method|testValueOfFunction ()
specifier|public
name|void
name|testValueOfFunction
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|function
init|=
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TestEnum
operator|.
name|CHEETO
argument_list|,
name|function
operator|.
name|apply
argument_list|(
literal|"CHEETO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestEnum
operator|.
name|HONDA
argument_list|,
name|function
operator|.
name|apply
argument_list|(
literal|"HONDA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestEnum
operator|.
name|POODLE
argument_list|,
name|function
operator|.
name|apply
argument_list|(
literal|"POODLE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueOfFunction_caseSensitive ()
specifier|public
name|void
name|testValueOfFunction_caseSensitive
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|function
init|=
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|function
operator|.
name|apply
argument_list|(
literal|"cHEETO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|function
operator|.
name|apply
argument_list|(
literal|"Honda"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|function
operator|.
name|apply
argument_list|(
literal|"poodlE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueOfFunction_nullWhenNotMatchingConstant ()
specifier|public
name|void
name|testValueOfFunction_nullWhenNotMatchingConstant
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|function
init|=
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|function
operator|.
name|apply
argument_list|(
literal|"WOMBAT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueOfFunction_equals ()
specifier|public
name|void
name|testValueOfFunction_equals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
argument_list|,
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|OtherEnum
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testValueOfFunction_serialization ()
specifier|public
name|void
name|testValueOfFunction_serialization
parameter_list|()
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|function
init|=
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Enums
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

