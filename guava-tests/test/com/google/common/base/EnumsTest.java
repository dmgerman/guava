begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|GcFinalization
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Enums}.  *  * @author Steve McKay  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|EnumsTest
specifier|public
class|class
name|EnumsTest
extends|extends
name|TestCase
block|{
DECL|enum|TestEnum
specifier|private
enum|enum
name|TestEnum
block|{
DECL|enumConstant|CHEETO
name|CHEETO
block|,
DECL|enumConstant|HONDA
name|HONDA
block|,
DECL|enumConstant|POODLE
name|POODLE
block|,   }
DECL|enum|OtherEnum
specifier|private
enum|enum
name|OtherEnum
block|{}
DECL|method|testGetIfPresent ()
specifier|public
name|void
name|testGetIfPresent
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"CHEETO"
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|TestEnum
operator|.
name|CHEETO
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"HONDA"
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|TestEnum
operator|.
name|HONDA
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"POODLE"
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|TestEnum
operator|.
name|POODLE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"CHEETO"
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"HONDA"
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"POODLE"
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"CHEETO"
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|TestEnum
operator|.
name|CHEETO
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"HONDA"
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|TestEnum
operator|.
name|HONDA
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"POODLE"
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|TestEnum
operator|.
name|POODLE
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetIfPresent_caseSensitive ()
specifier|public
name|void
name|testGetIfPresent_caseSensitive
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"cHEETO"
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"Honda"
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"poodlE"
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetIfPresent_whenNoMatchingConstant ()
specifier|public
name|void
name|testGetIfPresent_whenNoMatchingConstant
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|,
literal|"WOMBAT"
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// weak references
DECL|method|testGetIfPresent_doesNotPreventClassUnloading ()
specifier|public
name|void
name|testGetIfPresent_doesNotPreventClassUnloading
parameter_list|()
throws|throws
name|Exception
block|{
name|WeakReference
argument_list|<
name|?
argument_list|>
name|shadowLoaderReference
init|=
name|doTestClassUnloading
argument_list|()
decl_stmt|;
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|shadowLoaderReference
argument_list|)
expr_stmt|;
block|}
comment|// Create a second ClassLoader and use it to get a second version of the TestEnum class.
comment|// Run Enums.getIfPresent on that other TestEnum and then return a WeakReference containing the
comment|// new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum
comment|// (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be
comment|// cleared.
annotation|@
name|GwtIncompatible
comment|// weak references
DECL|method|doTestClassUnloading ()
specifier|private
name|WeakReference
argument_list|<
name|?
argument_list|>
name|doTestClassUnloading
parameter_list|()
throws|throws
name|Exception
block|{
name|URLClassLoader
name|myLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URLClassLoader
name|shadowLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|myLoader
operator|.
name|getURLs
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|TestEnum
argument_list|>
name|shadowTestEnum
init|=
operator|(
name|Class
argument_list|<
name|TestEnum
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|TestEnum
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|shadowLoader
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|shadowTestEnum
argument_list|,
name|TestEnum
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// We can't write Set<TestEnum> because that is a Set of the TestEnum from the original
comment|// ClassLoader.
name|Set
argument_list|<
name|Object
argument_list|>
name|shadowConstants
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TestEnum
name|constant
range|:
name|TestEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|TestEnum
argument_list|>
name|result
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|shadowTestEnum
argument_list|,
name|constant
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|shadowConstants
operator|.
name|add
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|Object
operator|>
name|copyOf
argument_list|(
name|shadowTestEnum
operator|.
name|getEnumConstants
argument_list|()
argument_list|)
argument_list|,
name|shadowConstants
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|TestEnum
argument_list|>
name|result
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|shadowTestEnum
argument_list|,
literal|"blibby"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
return|return
operator|new
name|WeakReference
argument_list|<
name|ClassLoader
argument_list|>
argument_list|(
name|shadowLoader
argument_list|)
return|;
block|}
DECL|method|testStringConverter_convert ()
specifier|public
name|void
name|testStringConverter_convert
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|converter
init|=
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TestEnum
operator|.
name|CHEETO
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"CHEETO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestEnum
operator|.
name|HONDA
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"HONDA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestEnum
operator|.
name|POODLE
argument_list|,
name|converter
operator|.
name|convert
argument_list|(
literal|"POODLE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringConverter_convertError ()
specifier|public
name|void
name|testStringConverter_convertError
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|converter
init|=
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|converter
operator|.
name|convert
argument_list|(
literal|"xxx"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testStringConverter_reverse ()
specifier|public
name|void
name|testStringConverter_reverse
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|converter
init|=
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CHEETO"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|TestEnum
operator|.
name|CHEETO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HONDA"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|TestEnum
operator|.
name|HONDA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"POODLE"
argument_list|,
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|TestEnum
operator|.
name|POODLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testStringConverter_nullPointerTester ()
specifier|public
name|void
name|testStringConverter_nullPointerTester
parameter_list|()
throws|throws
name|Exception
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|converter
init|=
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|converter
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringConverter_nullConversions ()
specifier|public
name|void
name|testStringConverter_nullConversions
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|,
name|TestEnum
argument_list|>
name|converter
init|=
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|converter
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// Class.getName()
DECL|method|testStringConverter_toString ()
specifier|public
name|void
name|testStringConverter_toString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Enums.stringConverter(com.google.common.base.EnumsTest$TestEnum.class)"
argument_list|,
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringConverter_serialization ()
specifier|public
name|void
name|testStringConverter_serialization
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|Enums
operator|.
name|stringConverter
argument_list|(
name|TestEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Enums
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
DECL|annotation|ExampleAnnotation
specifier|private
annotation_defn|@interface
name|ExampleAnnotation
block|{}
DECL|enum|AnEnum
specifier|private
enum|enum
name|AnEnum
block|{
DECL|enumConstant|ExampleAnnotation
DECL|enumConstant|FOO
annotation|@
name|ExampleAnnotation
name|FOO
block|,
DECL|enumConstant|BAR
name|BAR
block|}
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|testGetField ()
specifier|public
name|void
name|testGetField
parameter_list|()
block|{
name|Field
name|foo
init|=
name|Enums
operator|.
name|getField
argument_list|(
name|AnEnum
operator|.
name|FOO
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foo
operator|.
name|isAnnotationPresent
argument_list|(
name|ExampleAnnotation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|bar
init|=
name|Enums
operator|.
name|getField
argument_list|(
name|AnEnum
operator|.
name|BAR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BAR"
argument_list|,
name|bar
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bar
operator|.
name|isAnnotationPresent
argument_list|(
name|ExampleAnnotation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

