begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALLOWED_ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALL_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALL_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|CONSTANT_VALUES_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|DUPLICATE_MANY_VALUES_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|EMPTY_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|EMPTY_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|HORIZONTAL_VALUES_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_VARARGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_MANY_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_ONE_VALUE_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_TWO_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|VERTICAL_VALUES_PAIRED_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertDiagonalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertHorizontalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertLinearTransformationNaN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertStatsApproxEqual
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertVerticalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|createPairedStatsOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ManyValues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link PairedStats}. This tests instances created by {@link  * PairedStatsAccumulator#snapshot}.  *  * @author Pete Gillin  */
end_comment

begin_class
DECL|class|PairedStatsTest
specifier|public
class|class
name|PairedStatsTest
extends|extends
name|TestCase
block|{
DECL|method|testCount ()
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EMPTY_PAIRED_STATS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ONE_VALUE_PAIRED_STATS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_PAIRED_STATS
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testXStats ()
specifier|public
name|void
name|testXStats
parameter_list|()
block|{
name|assertStatsApproxEqual
argument_list|(
name|EMPTY_STATS_ITERABLE
argument_list|,
name|EMPTY_PAIRED_STATS
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|ONE_VALUE_STATS
argument_list|,
name|ONE_VALUE_PAIRED_STATS
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|TWO_VALUES_STATS
argument_list|,
name|TWO_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|MANY_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testYStats ()
specifier|public
name|void
name|testYStats
parameter_list|()
block|{
name|assertStatsApproxEqual
argument_list|(
name|EMPTY_STATS_ITERABLE
argument_list|,
name|EMPTY_PAIRED_STATS
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_ONE_VALUE_STATS
argument_list|,
name|ONE_VALUE_PAIRED_STATS
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_TWO_VALUES_STATS
argument_list|,
name|TWO_VALUES_PAIRED_STATS
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_MANY_VALUES_STATS
argument_list|,
name|MANY_VALUES_PAIRED_STATS
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPopulationCovariance ()
specifier|public
name|void
name|testPopulationCovariance
parameter_list|()
block|{
try|try
block|{
name|EMPTY_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|ONE_VALUE_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|createSingleStats
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|1.23
argument_list|)
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|createSingleStats
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|1.23
argument_list|)
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|createSingleStats
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
literal|1.23
argument_list|)
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// For datasets of many double values, we test many combinations of finite and non-finite
comment|// x-values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|PairedStats
name|stats
init|=
name|createPairedStatsOf
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
name|OTHER_MANY_VALUES
argument_list|)
decl_stmt|;
name|double
name|populationCovariance
init|=
name|stats
operator|.
name|populationCovariance
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|populationCovariance
argument_list|)
operator|.
name|named
argument_list|(
literal|"population covariance of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|populationCovariance
argument_list|)
operator|.
name|named
argument_list|(
literal|"population covariance of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|HORIZONTAL_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VERTICAL_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|CONSTANT_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testSampleCovariance ()
specifier|public
name|void
name|testSampleCovariance
parameter_list|()
block|{
try|try
block|{
name|EMPTY_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ONE_VALUE_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|HORIZONTAL_VALUES_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VERTICAL_VALUES_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|CONSTANT_VALUES_PAIRED_STATS
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testPearsonsCorrelationCoefficient ()
specifier|public
name|void
name|testPearsonsCorrelationCoefficient
parameter_list|()
block|{
try|try
block|{
name|EMPTY_PAIRED_STATS
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ONE_VALUE_PAIRED_STATS
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|createSingleStats
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|1.23
argument_list|)
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|TWO_VALUES_PAIRED_STATS
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// For datasets of many double values, we test many combinations of finite and non-finite
comment|// y-values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|PairedStats
name|stats
init|=
name|createPairedStatsOf
argument_list|(
name|MANY_VALUES
argument_list|,
name|values
operator|.
name|asIterable
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|pearsonsCorrelationCoefficient
init|=
name|stats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|pearsonsCorrelationCoefficient
argument_list|)
operator|.
name|named
argument_list|(
literal|"Pearson's correlation coefficient of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|pearsonsCorrelationCoefficient
argument_list|)
operator|.
name|named
argument_list|(
literal|"Pearson's correlation coefficient of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|stats
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|stats
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|stats
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|HORIZONTAL_VALUES_PAIRED_STATS
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|VERTICAL_VALUES_PAIRED_STATS
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|CONSTANT_VALUES_PAIRED_STATS
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testLeastSquaresFit ()
specifier|public
name|void
name|testLeastSquaresFit
parameter_list|()
block|{
try|try
block|{
name|EMPTY_PAIRED_STATS
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|ONE_VALUE_PAIRED_STATS
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|createSingleStats
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|1.23
argument_list|)
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertDiagonalLinearTransformation
argument_list|(
name|TWO_VALUES_PAIRED_STATS
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|TWO_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|TWO_VALUES_PAIRED_STATS
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|TWO_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|TWO_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
comment|// For datasets of many double values, we test many combinations of finite and non-finite
comment|// x-values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|PairedStats
name|stats
init|=
name|createPairedStatsOf
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
name|OTHER_MANY_VALUES
argument_list|)
decl_stmt|;
name|LinearTransformation
name|fit
init|=
name|stats
operator|.
name|leastSquaresFit
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertLinearTransformationNaN
argument_list|(
name|fit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertDiagonalLinearTransformation
argument_list|(
name|fit
argument_list|,
name|stats
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|stats
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|stats
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|stats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertHorizontalLinearTransformation
argument_list|(
name|HORIZONTAL_VALUES_PAIRED_STATS
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|HORIZONTAL_VALUES_PAIRED_STATS
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
name|assertVerticalLinearTransformation
argument_list|(
name|VERTICAL_VALUES_PAIRED_STATS
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|VERTICAL_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|CONSTANT_VALUES_PAIRED_STATS
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEqualsAndHashCode ()
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|MANY_VALUES_PAIRED_STATS
argument_list|,
name|DUPLICATE_MANY_VALUES_PAIRED_STATS
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|MANY_VALUES_PAIRED_STATS
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|PairedStats
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|OTHER_MANY_VALUES_STATS
argument_list|,
literal|1.23
argument_list|)
argument_list|,
operator|new
name|PairedStats
argument_list|(
name|MANY_VALUES_STATS_VARARGS
argument_list|,
name|OTHER_MANY_VALUES_STATS
argument_list|,
literal|1.23
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|PairedStats
argument_list|(
name|OTHER_MANY_VALUES_STATS
argument_list|,
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
literal|1.23
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|PairedStats
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
literal|1.23
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|PairedStats
argument_list|(
name|TWO_VALUES_STATS
argument_list|,
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
literal|1.23
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|PairedStats
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|ONE_VALUE_STATS
argument_list|,
literal|1.23
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|PairedStats
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
literal|1.234
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testSerializable ()
specifier|public
name|void
name|testSerializable
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|MANY_VALUES_PAIRED_STATS
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EMPTY_PAIRED_STATS
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"PairedStats{xStats=Stats{count=0}, yStats=Stats{count=0}}"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MANY_VALUES_PAIRED_STATS
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"PairedStats{xStats="
operator|+
name|MANY_VALUES_PAIRED_STATS
operator|.
name|xStats
argument_list|()
operator|+
literal|", yStats="
operator|+
name|MANY_VALUES_PAIRED_STATS
operator|.
name|yStats
argument_list|()
operator|+
literal|", populationCovariance="
operator|+
name|MANY_VALUES_PAIRED_STATS
operator|.
name|populationCovariance
argument_list|()
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|createSingleStats (double x, double y)
specifier|private
name|PairedStats
name|createSingleStats
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
return|return
name|createPairedStatsOf
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|x
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|y
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testToByteArrayAndFromByteArrayRoundTrip ()
specifier|public
name|void
name|testToByteArrayAndFromByteArrayRoundTrip
parameter_list|()
block|{
for|for
control|(
name|PairedStats
name|pairedStats
range|:
name|ALL_PAIRED_STATS
control|)
block|{
name|byte
index|[]
name|pairedStatsByteArray
init|=
name|pairedStats
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Round trip to byte array and back
name|assertThat
argument_list|(
name|PairedStats
operator|.
name|fromByteArray
argument_list|(
name|pairedStatsByteArray
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|pairedStats
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromByteArray_withNullInputThrowsNullPointerException ()
specifier|public
name|void
name|testFromByteArray_withNullInputThrowsNullPointerException
parameter_list|()
block|{
try|try
block|{
name|PairedStats
operator|.
name|fromByteArray
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromByteArray_withEmptyArrayInputThrowsIllegalArgumentException ()
specifier|public
name|void
name|testFromByteArray_withEmptyArrayInputThrowsIllegalArgumentException
parameter_list|()
block|{
try|try
block|{
name|PairedStats
operator|.
name|fromByteArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromByteArray_withTooLongArrayInputThrowsIllegalArgumentException ()
specifier|public
name|void
name|testFromByteArray_withTooLongArrayInputThrowsIllegalArgumentException
parameter_list|()
block|{
name|byte
index|[]
name|buffer
init|=
name|MANY_VALUES_PAIRED_STATS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tooLongByteArray
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|buffer
operator|.
name|length
operator|+
literal|2
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|put
argument_list|(
name|buffer
argument_list|)
operator|.
name|putChar
argument_list|(
literal|'.'
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
try|try
block|{
name|PairedStats
operator|.
name|fromByteArray
argument_list|(
name|tooLongByteArray
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFromByteArrayWithTooShortArrayInputThrowsIllegalArgumentException ()
specifier|public
name|void
name|testFromByteArrayWithTooShortArrayInputThrowsIllegalArgumentException
parameter_list|()
block|{
name|byte
index|[]
name|buffer
init|=
name|MANY_VALUES_PAIRED_STATS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tooShortByteArray
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|buffer
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
try|try
block|{
name|PairedStats
operator|.
name|fromByteArray
argument_list|(
name|tooShortByteArray
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

