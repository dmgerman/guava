begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_SAFE_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|EXPONENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NONZERO_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|POSITIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|TestPlatform
operator|.
name|intsCanGoOutOfRange
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|BigInteger
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|FLOOR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * Tests for {@link IntMath}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|IntMathTest
specifier|public
class|class
name|IntMathTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testConstantMaxPowerOfSqrt2Unsigned ()
specifier|public
name|void
name|testConstantMaxPowerOfSqrt2Unsigned
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|BigInteger
operator|.
name|ZERO
operator|.
name|setBit
argument_list|(
literal|2
operator|*
name|Integer
operator|.
name|SIZE
operator|-
literal|1
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|IntMath
operator|.
name|MAX_POWER_OF_SQRT2_UNSIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"pow()"
argument_list|)
DECL|method|testConstantsPowersOf10 ()
specifier|public
name|void
name|testConstantsPowersOf10
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|IntMath
operator|.
name|POWERS_OF_10
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|IntMath
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|i
argument_list|)
argument_list|,
name|IntMath
operator|.
name|POWERS_OF_10
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testMaxLog10ForLeadingZeros ()
specifier|public
name|void
name|testMaxLog10ForLeadingZeros
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Integer
operator|.
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log10
argument_list|(
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
name|Integer
operator|.
name|SIZE
operator|-
name|i
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
argument_list|,
name|IntMath
operator|.
name|MAX_LOG10_FOR_LEADING_ZEROS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testConstantsHalfPowersOf10 ()
specifier|public
name|void
name|testConstantsHalfPowersOf10
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|IntMath
operator|.
name|HALF_POWERS_OF_10
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|IntMath
operator|.
name|HALF_POWERS_OF_10
index|[
name|i
index|]
operator|==
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|BigInteger
operator|.
name|TEN
operator|.
name|pow
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
assert|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testConstantsBiggestBinomials ()
specifier|public
name|void
name|testConstantsBiggestBinomials
parameter_list|()
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|IntMath
operator|.
name|BIGGEST_BINOMIALS
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|fitsInInt
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|IntMath
operator|.
name|BIGGEST_BINOMIALS
index|[
name|k
index|]
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IntMath
operator|.
name|BIGGEST_BINOMIALS
index|[
name|k
index|]
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|||
operator|!
name|fitsInInt
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|IntMath
operator|.
name|BIGGEST_BINOMIALS
index|[
name|k
index|]
operator|+
literal|1
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// In the first case, any int is valid; in the second, we want to test that the next-bigger
comment|// int overflows.
block|}
name|assertFalse
argument_list|(
name|fitsInInt
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
literal|2
operator|*
name|IntMath
operator|.
name|BIGGEST_BINOMIALS
operator|.
name|length
argument_list|,
name|IntMath
operator|.
name|BIGGEST_BINOMIALS
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"sqrt"
argument_list|)
DECL|method|testPowersSqrtMaxInt ()
specifier|public
name|void
name|testPowersSqrtMaxInt
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|IntMath
operator|.
name|sqrt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|FLOOR
argument_list|)
argument_list|,
name|IntMath
operator|.
name|FLOOR_SQRT_MAX_INT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"java.math.BigInteger"
argument_list|)
DECL|method|testIsPowerOfTwo ()
specifier|public
name|void
name|testIsPowerOfTwo
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
comment|// Checks for a single bit set.
name|BigInteger
name|bigX
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
operator|(
name|bigX
operator|.
name|signum
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|bigX
operator|.
name|bitCount
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|IntMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog2ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog2ZeroAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|log2
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testLog2NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog2NegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegrerMath.log2 for all modes except UNNECESSARY.
DECL|method|testLog2MatchesBigInteger ()
specifier|public
name|void
name|testLog2MatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log2
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|IntMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Relies on the correctness of isPowerOfTwo(int).
DECL|method|testLog2Exact ()
specifier|public
name|void
name|testLog2Exact
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
comment|// We only expect an exception if x was not a power of 2.
name|boolean
name|isPowerOf2
init|=
name|IntMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|x
argument_list|,
literal|1
operator|<<
name|IntMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"log10"
argument_list|)
DECL|method|testLog10ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog10ZeroAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|log10
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"log10"
argument_list|)
DECL|method|testLog10NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog10NegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testLog10MatchesBigInteger ()
specifier|public
name|void
name|testLog10MatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// The BigInteger implementation is tested separately, use it as the reference.
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log10
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|IntMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Relies on the correctness of log10(int, FLOOR) and of pow(int, int).
annotation|@
name|GwtIncompatible
argument_list|(
literal|"pow()"
argument_list|)
DECL|method|testLog10Exact ()
specifier|public
name|void
name|testLog10Exact
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|int
name|floor
init|=
name|IntMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
name|boolean
name|expectSuccess
init|=
name|IntMath
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|floor
argument_list|)
operator|==
name|x
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|floor
argument_list|,
name|IntMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"log10"
argument_list|)
DECL|method|testLog10TrivialOnPowerOfTen ()
specifier|public
name|void
name|testLog10TrivialOnPowerOfTen
parameter_list|()
block|{
name|int
name|x
init|=
literal|1000000
decl_stmt|;
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|IntMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Simple test to cover sqrt(0) for all types and all modes.
annotation|@
name|GwtIncompatible
argument_list|(
literal|"sqrt"
argument_list|)
DECL|method|testSqrtZeroAlwaysZero ()
specifier|public
name|void
name|testSqrtZeroAlwaysZero
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|IntMath
operator|.
name|sqrt
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"sqrt"
argument_list|)
DECL|method|testSqrtNegativeAlwaysThrows ()
specifier|public
name|void
name|testSqrtNegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|RoundingMode
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/* Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY. */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testSqrtMatchesBigInteger ()
specifier|public
name|void
name|testSqrtMatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// The BigInteger implementation is tested separately, use it as the reference.
comment|// Promote the int value (rather than using intValue() on the expected value) to avoid
comment|// any risk of truncation which could lead to a false positive.
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|IntMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Relies on the correctness of sqrt(int, FLOOR). */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"sqrt"
argument_list|)
DECL|method|testSqrtExactMatchesFloorOrThrows ()
specifier|public
name|void
name|testSqrtExactMatchesFloorOrThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|int
name|floor
init|=
name|IntMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
comment|// We only expect an exception if x was not a perfect square.
name|boolean
name|isPerfectSquare
init|=
operator|(
name|floor
operator|*
name|floor
operator|==
name|x
operator|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|floor
argument_list|,
name|IntMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPerfectSquare
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isPerfectSquare
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"2147483646^2 expected=4"
argument_list|)
DECL|method|testPow ()
specifier|public
name|void
name|testPow
parameter_list|()
block|{
for|for
control|(
name|int
name|i
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|pow
range|:
name|EXPONENTS
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|+
literal|"^"
operator|+
name|pow
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
operator|.
name|pow
argument_list|(
name|pow
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|IntMath
operator|.
name|pow
argument_list|(
name|i
argument_list|,
name|pow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDivNonZero ()
specifier|public
name|void
name|testDivNonZero
parameter_list|()
block|{
for|for
control|(
name|int
name|p
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|q
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// Skip some tests that fail due to GWT's non-compliant int implementation.
comment|// TODO(cpovirk): does this test fail for only some rounding modes or for all?
if|if
condition|(
name|p
operator|==
operator|-
literal|2147483648
operator|&&
name|q
operator|==
operator|-
literal|1
operator|&&
name|intsCanGoOutOfRange
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|int
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|valueOf
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|valueOf
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|mode
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
argument_list|,
name|force32
argument_list|(
name|expected
argument_list|)
argument_list|,
name|IntMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
name|q
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDivNonZeroExact ()
specifier|public
name|void
name|testDivNonZeroExact
parameter_list|()
block|{
for|for
control|(
name|int
name|p
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|q
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
comment|// Skip some tests that fail due to GWT's non-compliant int implementation.
if|if
condition|(
name|p
operator|==
operator|-
literal|2147483648
operator|&&
name|q
operator|==
operator|-
literal|1
operator|&&
name|intsCanGoOutOfRange
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|dividesEvenly
init|=
operator|(
name|p
operator|%
name|q
operator|)
operator|==
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
argument_list|,
name|p
argument_list|,
name|IntMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
name|q
argument_list|,
name|UNNECESSARY
argument_list|)
operator|*
name|q
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
operator|+
literal|" not expected to divide evenly"
argument_list|,
name|dividesEvenly
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
operator|+
literal|" expected to divide evenly"
argument_list|,
name|dividesEvenly
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testZeroDivIsAlwaysZero ()
specifier|public
name|void
name|testZeroDivIsAlwaysZero
parameter_list|()
block|{
for|for
control|(
name|int
name|q
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|IntMath
operator|.
name|divide
argument_list|(
literal|0
argument_list|,
name|q
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDivByZeroAlwaysFails ()
specifier|public
name|void
name|testDivByZeroAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|int
name|p
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|testMod ()
specifier|public
name|void
name|testMod
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|m
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|mod
argument_list|(
name|valueOf
argument_list|(
name|m
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|IntMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testModNegativeModulusFails ()
specifier|public
name|void
name|testModNegativeModulusFails
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|m
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|testModZeroModulusFails ()
specifier|public
name|void
name|testModZeroModulusFails
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testGCD ()
specifier|public
name|void
name|testGCD
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|gcd
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGCDZero ()
specifier|public
name|void
name|testGCDZero
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|IntMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|IntMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGCDNegativePositiveThrows ()
specifier|public
name|void
name|testGCDNegativePositiveThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
literal|3
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testGCDNegativeZeroThrows ()
specifier|public
name|void
name|testGCDNegativeZeroThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testCheckedAdd ()
specifier|public
name|void
name|testCheckedAdd
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|+
name|b
argument_list|,
name|IntMath
operator|.
name|checkedAdd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCheckedSubtract ()
specifier|public
name|void
name|testCheckedSubtract
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|subtract
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|-
name|b
argument_list|,
name|IntMath
operator|.
name|checkedSubtract
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCheckedMultiply ()
specifier|public
name|void
name|testCheckedMultiply
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|multiply
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|*
name|b
argument_list|,
name|IntMath
operator|.
name|checkedMultiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCheckedPow ()
specifier|public
name|void
name|testCheckedPow
parameter_list|()
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|k
range|:
name|EXPONENTS
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|b
argument_list|)
operator|.
name|pow
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|b
operator|+
literal|"^"
operator|+
name|k
argument_list|,
name|force32
argument_list|(
name|expectedResult
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
name|IntMath
operator|.
name|checkedPow
argument_list|(
name|b
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|+
literal|"^"
operator|+
name|k
operator|+
literal|" should have succeeded"
argument_list|,
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|b
operator|+
literal|"^"
operator|+
name|k
operator|+
literal|" should have failed"
argument_list|,
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.factorial.
DECL|method|testFactorial ()
specifier|public
name|void
name|testFactorial
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
name|BigInteger
name|expectedBig
init|=
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|int
name|expectedInt
init|=
name|fitsInInt
argument_list|(
name|expectedBig
argument_list|)
condition|?
name|expectedBig
operator|.
name|intValue
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedInt
argument_list|,
name|IntMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFactorialNegative ()
specifier|public
name|void
name|testFactorialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.binomial.
annotation|@
name|GwtIncompatible
argument_list|(
literal|"BigIntegerMath"
argument_list|)
comment|// TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testBinomial ()
specifier|public
name|void
name|testBinomial
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<=
name|n
condition|;
name|k
operator|++
control|)
block|{
name|BigInteger
name|expectedBig
init|=
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|int
name|expectedInt
init|=
name|fitsInInt
argument_list|(
name|expectedBig
argument_list|)
condition|?
name|expectedBig
operator|.
name|intValue
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedInt
argument_list|,
name|IntMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"binomial"
argument_list|)
DECL|method|testBinomialOutside ()
specifier|public
name|void
name|testBinomialOutside
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|IntMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"binomial"
argument_list|)
DECL|method|testBinomialNegative ()
specifier|public
name|void
name|testBinomialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
comment|// Helper method that asserts the arithmetic mean of x and y is equal
comment|// to the expectedMean.
comment|// Helper method that asserts the arithmetic mean of x and y is equal
comment|// to the result of computeMeanSafely.
comment|// Computes the mean in a way that is obvious and resilient to
comment|// overflow by using BigInteger arithmetic.
DECL|method|fitsInInt (BigInteger big)
specifier|private
name|boolean
name|fitsInInt
parameter_list|(
name|BigInteger
name|big
parameter_list|)
block|{
return|return
name|big
operator|.
name|bitLength
argument_list|()
operator|<=
literal|31
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|RoundingMode
operator|.
name|class
argument_list|,
name|FLOOR
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|IntMath
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|force32 (int value)
specifier|private
specifier|static
name|int
name|force32
parameter_list|(
name|int
name|value
parameter_list|)
block|{
comment|// GWT doesn't consistently overflow values to make them 32-bit, so we need to force it.
return|return
name|value
operator|&
literal|0xffffffff
return|;
block|}
block|}
end_class

end_unit

