begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALLOWED_ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALL_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MEGA_STREAM_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MEGA_STREAM_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MEGA_STREAM_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MEGA_STREAM_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MEGA_STREAM_POPULATION_VARIANCE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_ONE_VALUE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_MAX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_MEAN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_MIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|megaPrimitiveDoubleStreamPart1
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|megaPrimitiveDoubleStreamPart2
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|sqrt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ManyValues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Doubles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link StatsAccumulator}. This tests the stats methods for instances built with {@link  * StatsAccumulator#add} and {@link StatsAccumulator#addAll}, and various error cases of the {@link  * StatsAccumulator#add} and {@link StatsAccumulator#addAll} methods. For tests of the {@link  * StatsAccumulator#snapshot} method which returns {@link Stats} instances, see {@link StatsTest}.  *  * @author Pete Gillin  */
end_comment

begin_class
DECL|class|StatsAccumulatorTest
specifier|public
class|class
name|StatsAccumulatorTest
extends|extends
name|TestCase
block|{
DECL|field|emptyAccumulator
specifier|private
name|StatsAccumulator
name|emptyAccumulator
decl_stmt|;
DECL|field|emptyAccumulatorByAddAllEmptyIterable
specifier|private
name|StatsAccumulator
name|emptyAccumulatorByAddAllEmptyIterable
decl_stmt|;
DECL|field|emptyAccumulatorByAddAllEmptyStats
specifier|private
name|StatsAccumulator
name|emptyAccumulatorByAddAllEmptyStats
decl_stmt|;
DECL|field|oneValueAccumulator
specifier|private
name|StatsAccumulator
name|oneValueAccumulator
decl_stmt|;
DECL|field|oneValueAccumulatorByAddAllEmptyStats
specifier|private
name|StatsAccumulator
name|oneValueAccumulatorByAddAllEmptyStats
decl_stmt|;
DECL|field|twoValuesAccumulator
specifier|private
name|StatsAccumulator
name|twoValuesAccumulator
decl_stmt|;
DECL|field|twoValuesAccumulatorByAddAllStats
specifier|private
name|StatsAccumulator
name|twoValuesAccumulatorByAddAllStats
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAllIterable
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByAddAllIterable
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAllIterator
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByAddAllIterator
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAllVarargs
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByAddAllVarargs
decl_stmt|;
DECL|field|manyValuesAccumulatorByRepeatedAdd
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByRepeatedAdd
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAndAddAll
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByAddAndAddAll
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAllStats
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByAddAllStats
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAllStatsAccumulator
specifier|private
name|StatsAccumulator
name|manyValuesAccumulatorByAddAllStatsAccumulator
decl_stmt|;
DECL|field|integerManyValuesAccumulatorByAddAllIterable
specifier|private
name|StatsAccumulator
name|integerManyValuesAccumulatorByAddAllIterable
decl_stmt|;
DECL|field|longManyValuesAccumulatorByAddAllIterator
specifier|private
name|StatsAccumulator
name|longManyValuesAccumulatorByAddAllIterator
decl_stmt|;
DECL|field|longManyValuesAccumulatorByAddAllVarargs
specifier|private
name|StatsAccumulator
name|longManyValuesAccumulatorByAddAllVarargs
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|emptyAccumulator
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|emptyAccumulatorByAddAllEmptyIterable
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|addAll
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Double
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|emptyAccumulatorByAddAllEmptyStats
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|oneValueAccumulator
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|oneValueAccumulator
operator|.
name|add
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|oneValueAccumulatorByAddAllEmptyStats
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|add
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|twoValuesAccumulator
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|twoValuesAccumulator
operator|.
name|addAll
argument_list|(
name|TWO_VALUES
argument_list|)
expr_stmt|;
name|twoValuesAccumulatorByAddAllStats
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|twoValuesAccumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|twoValuesAccumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|OTHER_ONE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllIterable
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|addAll
argument_list|(
name|MANY_VALUES
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllIterator
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|addAll
argument_list|(
name|MANY_VALUES
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllVarargs
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|addAll
argument_list|(
name|Doubles
operator|.
name|toArray
argument_list|(
name|MANY_VALUES
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByRepeatedAdd
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|MANY_VALUES
control|)
block|{
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|manyValuesAccumulatorByAddAndAddAll
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|add
argument_list|(
name|MANY_VALUES
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|addAll
argument_list|(
name|MANY_VALUES
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|MANY_VALUES
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllStats
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|manyValuesAccumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|MANY_VALUES
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|MANY_VALUES
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|MANY_VALUES
operator|.
name|subList
argument_list|(
name|MANY_VALUES
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|MANY_VALUES
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|addAll
argument_list|(
name|statsAccumulatorOf
argument_list|(
name|MANY_VALUES
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|MANY_VALUES
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|addAll
argument_list|(
name|statsAccumulatorOf
argument_list|(
name|MANY_VALUES
operator|.
name|subList
argument_list|(
name|MANY_VALUES
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|MANY_VALUES
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|integerManyValuesAccumulatorByAddAllIterable
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|addAll
argument_list|(
name|INTEGER_MANY_VALUES
argument_list|)
expr_stmt|;
name|longManyValuesAccumulatorByAddAllIterator
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|addAll
argument_list|(
name|LONG_MANY_VALUES
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|longManyValuesAccumulatorByAddAllVarargs
operator|=
operator|new
name|StatsAccumulator
argument_list|()
expr_stmt|;
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|addAll
argument_list|(
name|Longs
operator|.
name|toArray
argument_list|(
name|LONG_MANY_VALUES
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|statsAccumulatorOf (Iterable<? extends Number> values)
specifier|private
specifier|static
name|StatsAccumulator
name|statsAccumulatorOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
name|values
parameter_list|)
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|accumulator
return|;
block|}
DECL|method|testCount ()
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|assertThat
argument_list|(
name|emptyAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|StatsTesting
operator|.
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|StatsTesting
operator|.
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testCountOverflow_doesNotThrow ()
specifier|public
name|void
name|testCountOverflow_doesNotThrow
parameter_list|()
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|add
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|power
init|=
literal|1
init|;
name|power
operator|<
name|Long
operator|.
name|SIZE
operator|-
literal|1
condition|;
name|power
operator|++
control|)
block|{
name|accumulator
operator|.
name|addAll
argument_list|(
name|accumulator
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Should overflow without throwing.
name|accumulator
operator|.
name|addAll
argument_list|(
name|accumulator
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isLessThan
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|testMean ()
specifier|public
name|void
name|testMean
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|mean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|mean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|mean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an iterable, we test many combinations of
comment|// finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|StatsAccumulator
name|accumulatorByAddAllStats
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
operator|.
name|asIterable
argument_list|()
control|)
block|{
name|accumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|mean
init|=
name|accumulator
operator|.
name|mean
argument_list|()
decl_stmt|;
name|double
name|meanByAddAllStats
init|=
name|accumulatorByAddAllStats
operator|.
name|mean
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|mean
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"mean by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|meanByAddAllStats
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
operator|&&
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|mean
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"mean by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|meanByAddAllStats
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|mean
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"mean by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|meanByAddAllStats
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|mean
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"mean by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|meanByAddAllStats
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertWithMessage
argument_list|(
literal|"mean of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|mean
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"mean by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|meanByAddAllStats
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_MEAN
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_MEAN
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
argument_list|)
expr_stmt|;
block|}
DECL|method|testSum ()
specifier|public
name|void
name|testSum
parameter_list|()
block|{
name|assertThat
argument_list|(
name|emptyAccumulator
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_MEAN
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_MEAN
operator|*
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|INTEGER_MANY_VALUES_MEAN
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_MEAN
operator|*
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_MEAN
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
operator|*
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_MEAN
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_MEAN
operator|*
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testPopulationVariance ()
specifier|public
name|void
name|testPopulationVariance
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|populationVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|populationVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|populationVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an iterator, we test many combinations of
comment|// finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|StatsAccumulator
name|accumulatorByAddAllStats
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
operator|.
name|asIterable
argument_list|()
control|)
block|{
name|accumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|populationVariance
init|=
name|accumulator
operator|.
name|populationVariance
argument_list|()
decl_stmt|;
name|double
name|populationVarianceByAddAllStats
init|=
name|accumulatorByAddAllStats
operator|.
name|populationVariance
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"population variance of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|populationVariance
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"population variance by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|populationVarianceByAddAllStats
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertWithMessage
argument_list|(
literal|"population variance of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|populationVariance
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"population variance by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|populationVarianceByAddAllStats
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testPopulationStandardDeviation ()
specifier|public
name|void
name|testPopulationStandardDeviation
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|populationStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|populationStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|populationStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|INTEGER_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|populationStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
name|LONG_MANY_VALUES_COUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSampleVariance ()
specifier|public
name|void
name|testSampleVariance
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulator
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|sampleVariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|INTEGER_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|sampleVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSampleStandardDeviation ()
specifier|public
name|void
name|testSampleStandardDeviation
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulator
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|sampleStandardDeviation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|TWO_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|INTEGER_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|sampleStandardDeviation
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
argument_list|)
operator|.
name|of
argument_list|(
name|sqrt
argument_list|(
name|LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS
operator|/
operator|(
name|LONG_MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMax ()
specifier|public
name|void
name|testMax
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|max
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|max
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|max
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TWO_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TWO_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created from an array, we test many combinations of
comment|// finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|StatsAccumulator
name|accumulatorByAddAllStats
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|values
operator|.
name|asArray
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
operator|.
name|asIterable
argument_list|()
control|)
block|{
name|accumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|max
init|=
name|accumulator
operator|.
name|max
argument_list|()
decl_stmt|;
name|double
name|maxByAddAllStats
init|=
name|accumulatorByAddAllStats
operator|.
name|max
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"max of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|max
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"max by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|maxByAddAllStats
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyPositiveInfinity
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"max of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|max
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"max by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|maxByAddAllStats
argument_list|)
operator|.
name|isPositiveInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertWithMessage
argument_list|(
literal|"max of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|max
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"max by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|maxByAddAllStats
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MAX
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INTEGER_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LONG_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LONG_MANY_VALUES_MAX
argument_list|)
expr_stmt|;
block|}
DECL|method|testMin ()
specifier|public
name|void
name|testMin
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|min
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyIterable
operator|.
name|min
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyStats
operator|.
name|min
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyStats
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ONE_VALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TWO_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllStats
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TWO_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterable
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllIterator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllVarargs
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByRepeatedAdd
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAndAddAll
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStats
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllStatsAccumulator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
comment|// For datasets of many double values created by adding elements individually, we test many
comment|// combinations of finite and non-finite values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|StatsAccumulator
name|accumulatorByAddAllStats
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
operator|.
name|asIterable
argument_list|()
control|)
block|{
name|accumulator
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|accumulatorByAddAllStats
operator|.
name|addAll
argument_list|(
name|Stats
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|min
init|=
name|accumulator
operator|.
name|min
argument_list|()
decl_stmt|;
name|double
name|minByAddAllStats
init|=
name|accumulatorByAddAllStats
operator|.
name|min
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNaN
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"min of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|min
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"min by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|minByAddAllStats
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|hasAnyNegativeInfinity
argument_list|()
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"min of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|min
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"min by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|minByAddAllStats
argument_list|)
operator|.
name|isNegativeInfinity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertWithMessage
argument_list|(
literal|"min of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|min
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"min by addAll(Stats) of "
operator|+
name|values
argument_list|)
operator|.
name|that
argument_list|(
name|minByAddAllStats
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_MIN
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|integerManyValuesAccumulatorByAddAllIterable
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|INTEGER_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllIterator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LONG_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longManyValuesAccumulatorByAddAllVarargs
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LONG_MANY_VALUES_MIN
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAllPrimitiveDoubleStream ()
specifier|public
name|void
name|testAddAllPrimitiveDoubleStream
parameter_list|()
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|megaPrimitiveDoubleStreamPart1
argument_list|()
argument_list|)
expr_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|megaPrimitiveDoubleStreamPart2
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|MEGA_STREAM_COUNT
argument_list|)
operator|.
name|of
argument_list|(
name|MEGA_STREAM_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|MEGA_STREAM_COUNT
argument_list|)
operator|.
name|of
argument_list|(
name|MEGA_STREAM_POPULATION_VARIANCE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_MAX
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAllPrimitiveIntStream ()
specifier|public
name|void
name|testAddAllPrimitiveIntStream
parameter_list|()
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|megaPrimitiveDoubleStreamPart1
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|x
lambda|->
operator|(
name|int
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|megaPrimitiveDoubleStreamPart2
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|x
lambda|->
operator|(
name|int
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|MEGA_STREAM_COUNT
argument_list|)
operator|.
name|of
argument_list|(
name|MEGA_STREAM_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|MEGA_STREAM_COUNT
argument_list|)
operator|.
name|of
argument_list|(
name|MEGA_STREAM_POPULATION_VARIANCE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_MAX
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAllPrimitiveLongStream ()
specifier|public
name|void
name|testAddAllPrimitiveLongStream
parameter_list|()
block|{
name|StatsAccumulator
name|accumulator
init|=
operator|new
name|StatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|megaPrimitiveDoubleStreamPart1
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|x
lambda|->
operator|(
name|long
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|accumulator
operator|.
name|addAll
argument_list|(
name|megaPrimitiveDoubleStreamPart2
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|x
lambda|->
operator|(
name|long
operator|)
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|mean
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|MEGA_STREAM_COUNT
argument_list|)
operator|.
name|of
argument_list|(
name|MEGA_STREAM_MEAN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|populationVariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
operator|*
name|MEGA_STREAM_COUNT
argument_list|)
operator|.
name|of
argument_list|(
name|MEGA_STREAM_POPULATION_VARIANCE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_MIN
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MEGA_STREAM_MAX
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

