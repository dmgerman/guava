begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_SAFE_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|EXPONENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NONZERO_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|POSITIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|POSITIVE_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|BigInteger
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|DOWN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|FLOOR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_DOWN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_EVEN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_UP
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UP
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|values
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for LongMath.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|LongMathTest
specifier|public
class|class
name|LongMathTest
extends|extends
name|TestCase
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ConstantOverflow"
argument_list|)
DECL|method|testMaxSignedPowerOfTwo ()
specifier|public
name|void
name|testMaxSignedPowerOfTwo
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|LongMath
operator|.
name|isPowerOfTwo
argument_list|(
name|LongMath
operator|.
name|MAX_SIGNED_POWER_OF_TWO
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|LongMath
operator|.
name|isPowerOfTwo
argument_list|(
name|LongMath
operator|.
name|MAX_SIGNED_POWER_OF_TWO
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCeilingPowerOfTwo ()
specifier|public
name|void
name|testCeilingPowerOfTwo
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|BigIntegerMath
operator|.
name|ceilingPowerOfTwo
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fitsInLong
argument_list|(
name|expectedResult
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedResult
operator|.
name|longValue
argument_list|()
argument_list|,
name|LongMath
operator|.
name|ceilingPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|LongMath
operator|.
name|ceilingPowerOfTwo
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
DECL|method|testFloorPowerOfTwo ()
specifier|public
name|void
name|testFloorPowerOfTwo
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|BigIntegerMath
operator|.
name|floorPowerOfTwo
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
operator|.
name|longValue
argument_list|()
argument_list|,
name|LongMath
operator|.
name|floorPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCeilingPowerOfTwoNegative ()
specifier|public
name|void
name|testCeilingPowerOfTwoNegative
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|ceilingPowerOfTwo
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testFloorPowerOfTwoNegative ()
specifier|public
name|void
name|testFloorPowerOfTwoNegative
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|floorPowerOfTwo
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testCeilingPowerOfTwoZero ()
specifier|public
name|void
name|testCeilingPowerOfTwoZero
parameter_list|()
block|{
try|try
block|{
name|LongMath
operator|.
name|ceilingPowerOfTwo
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFloorPowerOfTwoZero ()
specifier|public
name|void
name|testFloorPowerOfTwoZero
parameter_list|()
block|{
try|try
block|{
name|LongMath
operator|.
name|floorPowerOfTwo
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantMaxPowerOfSqrt2Unsigned ()
specifier|public
name|void
name|testConstantMaxPowerOfSqrt2Unsigned
parameter_list|()
block|{
name|assertEquals
argument_list|(
comment|/*expected=*/
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|BigInteger
operator|.
name|ZERO
operator|.
name|setBit
argument_list|(
literal|2
operator|*
name|Long
operator|.
name|SIZE
operator|-
literal|1
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
comment|/*actual=*/
name|LongMath
operator|.
name|MAX_POWER_OF_SQRT2_UNSIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
DECL|method|testMaxLog10ForLeadingZeros ()
specifier|public
name|void
name|testMaxLog10ForLeadingZeros
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Long
operator|.
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log10
argument_list|(
name|BigInteger
operator|.
name|ONE
operator|.
name|shiftLeft
argument_list|(
name|Long
operator|.
name|SIZE
operator|-
name|i
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
argument_list|,
name|LongMath
operator|.
name|maxLog10ForLeadingZeros
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantsPowersOf10 ()
specifier|public
name|void
name|testConstantsPowersOf10
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LongMath
operator|.
name|powersOf10
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|LongMath
operator|.
name|checkedPow
argument_list|(
literal|10
argument_list|,
name|i
argument_list|)
argument_list|,
name|LongMath
operator|.
name|powersOf10
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LongMath
operator|.
name|checkedPow
argument_list|(
literal|10
argument_list|,
name|LongMath
operator|.
name|powersOf10
operator|.
name|length
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantsHalfPowersOf10 ()
specifier|public
name|void
name|testConstantsHalfPowersOf10
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LongMath
operator|.
name|halfPowersOf10
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|BigInteger
operator|.
name|TEN
operator|.
name|pow
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|LongMath
operator|.
name|halfPowersOf10
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BigInteger
name|nextBigger
init|=
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|BigInteger
operator|.
name|TEN
operator|.
name|pow
argument_list|(
literal|2
operator|*
name|LongMath
operator|.
name|halfPowersOf10
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nextBigger
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantsSqrtMaxLong ()
specifier|public
name|void
name|testConstantsSqrtMaxLong
parameter_list|()
block|{
name|assertEquals
argument_list|(
comment|/*expected=*/
name|LongMath
operator|.
name|sqrt
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|FLOOR
argument_list|)
argument_list|,
comment|/*actual=*/
name|LongMath
operator|.
name|FLOOR_SQRT_MAX_LONG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantsFactorials ()
specifier|public
name|void
name|testConstantsFactorials
parameter_list|()
block|{
name|long
name|expected
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LongMath
operator|.
name|factorials
operator|.
name|length
condition|;
name|i
operator|++
operator|,
name|expected
operator|*=
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|LongMath
operator|.
name|factorials
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LongMath
operator|.
name|checkedMultiply
argument_list|(
name|LongMath
operator|.
name|factorials
index|[
name|LongMath
operator|.
name|factorials
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|LongMath
operator|.
name|factorials
operator|.
name|length
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expect
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantsBiggestBinomials ()
specifier|public
name|void
name|testConstantsBiggestBinomials
parameter_list|()
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|LongMath
operator|.
name|biggestBinomials
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|fitsInLong
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|LongMath
operator|.
name|biggestBinomials
index|[
name|k
index|]
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|LongMath
operator|.
name|biggestBinomials
index|[
name|k
index|]
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|||
operator|!
name|fitsInLong
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|LongMath
operator|.
name|biggestBinomials
index|[
name|k
index|]
operator|+
literal|1
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// In the first case, any long is valid; in the second, we want to test that the next-bigger
comment|// long overflows.
block|}
name|int
name|k
init|=
name|LongMath
operator|.
name|biggestBinomials
operator|.
name|length
decl_stmt|;
name|assertFalse
argument_list|(
name|fitsInLong
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
literal|2
operator|*
name|k
argument_list|,
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 * k is the smallest value for which we don't replace k with (n-k).
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testConstantsBiggestSimpleBinomials ()
specifier|public
name|void
name|testConstantsBiggestSimpleBinomials
parameter_list|()
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|LongMath
operator|.
name|biggestSimpleBinomials
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|LongMath
operator|.
name|biggestSimpleBinomials
index|[
name|k
index|]
operator|<=
name|LongMath
operator|.
name|biggestBinomials
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|long
name|unused
init|=
name|simpleBinomial
argument_list|(
name|LongMath
operator|.
name|biggestSimpleBinomials
index|[
name|k
index|]
argument_list|,
name|k
argument_list|)
decl_stmt|;
comment|// mustn't throw
if|if
condition|(
name|LongMath
operator|.
name|biggestSimpleBinomials
index|[
name|k
index|]
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// unless all n are fair game with this k
try|try
block|{
name|simpleBinomial
argument_list|(
name|LongMath
operator|.
name|biggestSimpleBinomials
index|[
name|k
index|]
operator|+
literal|1
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{         }
block|}
block|}
try|try
block|{
name|int
name|k
init|=
name|LongMath
operator|.
name|biggestSimpleBinomials
operator|.
name|length
decl_stmt|;
name|simpleBinomial
argument_list|(
literal|2
operator|*
name|k
argument_list|,
name|k
argument_list|)
expr_stmt|;
comment|// 2 * k is the smallest value for which we don't replace k with (n-k).
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testLessThanBranchFree ()
specifier|public
name|void
name|testLessThanBranchFree
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|y
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|BigInteger
name|difference
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fitsInLong
argument_list|(
name|difference
argument_list|)
condition|)
block|{
name|int
name|expected
init|=
operator|(
name|x
operator|<
name|y
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|actual
init|=
name|LongMath
operator|.
name|lessThanBranchFree
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Throws an ArithmeticException if "the simple implementation" of binomial coefficients overflows
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|simpleBinomial (int n, int k)
specifier|private
name|long
name|simpleBinomial
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|long
name|accum
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|accum
operator|=
name|LongMath
operator|.
name|checkedMultiply
argument_list|(
name|accum
argument_list|,
name|n
operator|-
name|i
argument_list|)
expr_stmt|;
name|accum
operator|/=
name|i
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|accum
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// java.math.BigInteger
DECL|method|testIsPowerOfTwo ()
specifier|public
name|void
name|testIsPowerOfTwo
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
comment|// Checks for a single bit set.
name|BigInteger
name|bigX
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
operator|(
name|bigX
operator|.
name|signum
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|bigX
operator|.
name|bitCount
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|LongMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog2ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog2ZeroAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|log2
argument_list|(
literal|0L
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testLog2NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog2NegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
comment|/* Relies on the correctness of BigIntegerMath.log2 for all modes except UNNECESSARY. */
DECL|method|testLog2MatchesBigInteger ()
specifier|public
name|void
name|testLog2MatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// The BigInteger implementation is tested separately, use it as the reference.
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log2
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|LongMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Relies on the correctness of isPowerOfTwo(long). */
DECL|method|testLog2Exact ()
specifier|public
name|void
name|testLog2Exact
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
comment|// We only expect an exception if x was not a power of 2.
name|boolean
name|isPowerOf2
init|=
name|LongMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|x
argument_list|,
literal|1L
operator|<<
name|LongMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testLog10ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog10ZeroAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|log10
argument_list|(
literal|0L
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testLog10NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog10NegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testLog10MatchesBigInteger ()
specifier|public
name|void
name|testLog10MatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log10
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|LongMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Relies on the correctness of log10(long, FLOOR) and of pow(long, int).
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testLog10Exact ()
specifier|public
name|void
name|testLog10Exact
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|int
name|floor
init|=
name|LongMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|LongMath
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|floor
argument_list|)
operator|==
name|x
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|floor
argument_list|,
name|LongMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedSuccess
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected log10(%s, UNNECESSARY) = %s; got ArithmeticException"
argument_list|,
name|x
argument_list|,
name|floor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testLog10TrivialOnPowerOf10 ()
specifier|public
name|void
name|testLog10TrivialOnPowerOf10
parameter_list|()
block|{
name|long
name|x
init|=
literal|1000000000000L
decl_stmt|;
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|LongMath
operator|.
name|log10
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSqrtNegativeAlwaysThrows ()
specifier|public
name|void
name|testSqrtNegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY.
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSqrtMatchesBigInteger ()
specifier|public
name|void
name|testSqrtMatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// Promote the long value (rather than using longValue() on the expected value) to avoid
comment|// any risk of truncation which could lead to a false positive.
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|sqrt
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|LongMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Relies on the correctness of sqrt(long, FLOOR). */
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSqrtExactMatchesFloorOrThrows ()
specifier|public
name|void
name|testSqrtExactMatchesFloorOrThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|long
name|sqrtFloor
init|=
name|LongMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
comment|// We only expect an exception if x was not a perfect square.
name|boolean
name|isPerfectSquare
init|=
operator|(
name|sqrtFloor
operator|*
name|sqrtFloor
operator|==
name|x
operator|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|sqrtFloor
argument_list|,
name|LongMath
operator|.
name|sqrt
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPerfectSquare
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isPerfectSquare
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testPow ()
specifier|public
name|void
name|testPow
parameter_list|()
block|{
for|for
control|(
name|long
name|i
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|exp
range|:
name|EXPONENTS
control|)
block|{
name|assertEquals
argument_list|(
name|LongMath
operator|.
name|pow
argument_list|(
name|i
argument_list|,
name|exp
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|i
argument_list|)
operator|.
name|pow
argument_list|(
name|exp
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): File BigDecimal.divide() rounding bug.
DECL|method|testDivNonZero ()
specifier|public
name|void
name|testDivNonZero
parameter_list|()
block|{
for|for
control|(
name|long
name|p
range|:
name|NONZERO_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|q
range|:
name|NONZERO_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|long
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|valueOf
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|valueOf
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|mode
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|actual
init|=
name|LongMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
name|q
argument_list|,
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected divide(%s, %s, %s) = %s; got %s"
argument_list|,
name|p
argument_list|,
name|q
argument_list|,
name|mode
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|AndroidIncompatible
comment|// Bug in older versions of Android we test against, since fixed.
DECL|method|testDivNonZeroExact ()
specifier|public
name|void
name|testDivNonZeroExact
parameter_list|()
block|{
for|for
control|(
name|long
name|p
range|:
name|NONZERO_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|q
range|:
name|NONZERO_LONG_CANDIDATES
control|)
block|{
name|boolean
name|expectedSuccess
init|=
operator|(
name|p
operator|%
name|q
operator|)
operator|==
literal|0L
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|p
argument_list|,
name|LongMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
name|q
argument_list|,
name|UNNECESSARY
argument_list|)
operator|*
name|q
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedSuccess
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected divide(%s, %s, UNNECESSARY) to succeed; got ArithmeticException"
argument_list|,
name|p
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testZeroDivIsAlwaysZero ()
specifier|public
name|void
name|testZeroDivIsAlwaysZero
parameter_list|()
block|{
for|for
control|(
name|long
name|q
range|:
name|NONZERO_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|LongMath
operator|.
name|divide
argument_list|(
literal|0L
argument_list|,
name|q
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testDivByZeroAlwaysFails ()
specifier|public
name|void
name|testDivByZeroAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|long
name|p
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
literal|0L
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testIntMod ()
specifier|public
name|void
name|testIntMod
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|m
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|mod
argument_list|(
name|valueOf
argument_list|(
name|m
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|LongMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testIntModNegativeModulusFails ()
specifier|public
name|void
name|testIntModNegativeModulusFails
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|m
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testIntModZeroModulusFails ()
specifier|public
name|void
name|testIntModZeroModulusFails
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testMod ()
specifier|public
name|void
name|testMod
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|m
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|mod
argument_list|(
name|valueOf
argument_list|(
name|m
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|LongMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testModNegativeModulusFails ()
specifier|public
name|void
name|testModNegativeModulusFails
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|m
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
DECL|method|testGCDExhaustive ()
specifier|public
name|void
name|testGCDExhaustive
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|gcd
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|LongMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testGCDZero ()
specifier|public
name|void
name|testGCDZero
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|LongMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|LongMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|LongMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testGCDNegativePositiveThrows ()
specifier|public
name|void
name|testGCDNegativePositiveThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|LongMath
operator|.
name|gcd
argument_list|(
literal|3
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testGCDNegativeZeroThrows ()
specifier|public
name|void
name|testGCDNegativeZeroThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|LongMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testCheckedAdd ()
specifier|public
name|void
name|testCheckedAdd
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInLong
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|+
name|b
argument_list|,
name|LongMath
operator|.
name|checkedAdd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedSuccess
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected checkedAdd(%s, %s) = %s; got ArithmeticException"
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testCheckedSubtract ()
specifier|public
name|void
name|testCheckedSubtract
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|subtract
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInLong
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|-
name|b
argument_list|,
name|LongMath
operator|.
name|checkedSubtract
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedSuccess
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected checkedSubtract(%s, %s) = %s; got ArithmeticException"
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testCheckedMultiply ()
specifier|public
name|void
name|testCheckedMultiply
parameter_list|()
block|{
name|boolean
name|isAndroid
init|=
name|TestPlatform
operator|.
name|isAndroid
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
if|if
condition|(
name|isAndroid
operator|&&
name|a
operator|==
operator|-
literal|4294967296L
operator|&&
name|b
operator|==
literal|2147483648L
condition|)
block|{
comment|/*            * Bug in older versions of Android we test against, since fixed: -9223372036854775808L /            * -4294967296L = -9223372036854775808L!            *            * To be clear, this bug affects not the test's computation of the expected result but the            * _actual prod code_. But it probably affects only unusual cases.            */
continue|continue;
block|}
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|multiply
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInLong
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|*
name|b
argument_list|,
name|LongMath
operator|.
name|checkedMultiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedSuccess
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected checkedMultiply(%s, %s) = %s; got ArithmeticException"
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testCheckedPow ()
specifier|public
name|void
name|testCheckedPow
parameter_list|()
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|exp
range|:
name|EXPONENTS
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|b
argument_list|)
operator|.
name|pow
argument_list|(
name|exp
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInLong
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expectedResult
operator|.
name|longValue
argument_list|()
argument_list|,
name|LongMath
operator|.
name|checkedPow
argument_list|(
name|b
argument_list|,
name|exp
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedSuccess
condition|)
block|{
name|failFormat
argument_list|(
literal|"expected checkedPow(%s, %s) = %s; got ArithmeticException"
argument_list|,
name|b
argument_list|,
name|exp
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSaturatedAdd ()
specifier|public
name|void
name|testSaturatedAdd
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|assertOperationEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|"s+"
argument_list|,
name|saturatedCast
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|LongMath
operator|.
name|saturatedAdd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSaturatedSubtract ()
specifier|public
name|void
name|testSaturatedSubtract
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|assertOperationEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|"s-"
argument_list|,
name|saturatedCast
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|subtract
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|LongMath
operator|.
name|saturatedSubtract
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSaturatedMultiply ()
specifier|public
name|void
name|testSaturatedMultiply
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|assertOperationEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|"s*"
argument_list|,
name|saturatedCast
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|multiply
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|LongMath
operator|.
name|saturatedMultiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testSaturatedPow ()
specifier|public
name|void
name|testSaturatedPow
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|EXPONENTS
control|)
block|{
name|assertOperationEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|"s^"
argument_list|,
name|saturatedCast
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|pow
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|LongMath
operator|.
name|saturatedPow
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertOperationEquals (long a, long b, String op, long expected, long actual)
specifier|private
name|void
name|assertOperationEquals
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|,
name|String
name|op
parameter_list|,
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
name|fail
argument_list|(
literal|"Expected for "
operator|+
name|a
operator|+
literal|" "
operator|+
name|op
operator|+
literal|" "
operator|+
name|b
operator|+
literal|" = "
operator|+
name|expected
operator|+
literal|", but got "
operator|+
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.factorial.
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testFactorial ()
specifier|public
name|void
name|testFactorial
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
name|BigInteger
name|expectedBig
init|=
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|long
name|expectedLong
init|=
name|fitsInLong
argument_list|(
name|expectedBig
argument_list|)
condition|?
name|expectedBig
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLong
argument_list|,
name|LongMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// TODO
DECL|method|testFactorialNegative ()
specifier|public
name|void
name|testFactorialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.binomial.
DECL|method|testBinomial ()
specifier|public
name|void
name|testBinomial
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|70
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<=
name|n
condition|;
name|k
operator|++
control|)
block|{
name|BigInteger
name|expectedBig
init|=
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|long
name|expectedLong
init|=
name|fitsInLong
argument_list|(
name|expectedBig
argument_list|)
condition|?
name|expectedBig
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLong
argument_list|,
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// Slow
DECL|method|testBinomial_exhaustiveNotOverflowing ()
specifier|public
name|void
name|testBinomial_exhaustiveNotOverflowing
parameter_list|()
block|{
comment|// Tests all of the inputs to LongMath.binomial that won't cause it to overflow, that weren't
comment|// tested in the previous method, for k>= 3.
for|for
control|(
name|int
name|k
init|=
literal|3
init|;
name|k
operator|<
name|LongMath
operator|.
name|biggestBinomials
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
for|for
control|(
name|int
name|n
init|=
literal|70
init|;
name|n
operator|<=
name|LongMath
operator|.
name|biggestBinomials
index|[
name|k
index|]
condition|;
name|n
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBinomialOutside ()
specifier|public
name|void
name|testBinomialOutside
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|method|testBinomialNegative ()
specifier|public
name|void
name|testBinomialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// far too slow
DECL|method|testSqrtOfPerfectSquareAsDoubleIsPerfect ()
specifier|public
name|void
name|testSqrtOfPerfectSquareAsDoubleIsPerfect
parameter_list|()
block|{
comment|// This takes just over a minute on my machine.
for|for
control|(
name|long
name|n
init|=
literal|0
init|;
name|n
operator|<=
name|LongMath
operator|.
name|FLOOR_SQRT_MAX_LONG
condition|;
name|n
operator|++
control|)
block|{
name|long
name|actual
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|n
operator|*
name|n
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|==
name|n
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSqrtOfLongIsAtMostFloorSqrtMaxLong ()
specifier|public
name|void
name|testSqrtOfLongIsAtMostFloorSqrtMaxLong
parameter_list|()
block|{
name|long
name|sqrtMaxLong
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sqrtMaxLong
operator|<=
name|LongMath
operator|.
name|FLOOR_SQRT_MAX_LONG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
annotation|@
name|GwtIncompatible
comment|// java.math.BigInteger
DECL|method|testMean ()
specifier|public
name|void
name|testMean
parameter_list|()
block|{
comment|// Odd-sized ranges have an obvious mean
name|assertMean
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// Even-sized ranges should prefer the lower mean
name|assertMean
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
operator|-
literal|1
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// x == y == mean
name|assertMean
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// Exhaustive checks
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|y
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|assertMean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Helper method that asserts the arithmetic mean of x and y is equal to the expectedMean. */
DECL|method|assertMean (long expectedMean, long x, long y)
specifier|private
specifier|static
name|void
name|assertMean
parameter_list|(
name|long
name|expectedMean
parameter_list|,
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The expectedMean should be the same as computeMeanSafely"
argument_list|,
name|expectedMean
argument_list|,
name|computeMeanSafely
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method that asserts the arithmetic mean of x and y is equal to the result of    * computeMeanSafely.    */
DECL|method|assertMean (long x, long y)
specifier|private
specifier|static
name|void
name|assertMean
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|long
name|expectedMean
init|=
name|computeMeanSafely
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMean
argument_list|,
name|LongMath
operator|.
name|mean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The mean of x and y should equal the mean of y and x"
argument_list|,
name|expectedMean
argument_list|,
name|LongMath
operator|.
name|mean
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes the mean in a way that is obvious and resilient to overflow by using BigInteger    * arithmetic.    */
DECL|method|computeMeanSafely (long x, long y)
specifier|private
specifier|static
name|long
name|computeMeanSafely
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|BigInteger
name|bigX
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|BigInteger
name|bigY
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigMean
init|=
operator|new
name|BigDecimal
argument_list|(
name|bigX
operator|.
name|add
argument_list|(
name|bigY
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
decl_stmt|;
comment|// parseInt blows up on overflow as opposed to intValue() which does not.
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|bigMean
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fitsInLong (BigInteger big)
specifier|private
specifier|static
name|boolean
name|fitsInLong
parameter_list|(
name|BigInteger
name|big
parameter_list|)
block|{
return|return
name|big
operator|.
name|bitLength
argument_list|()
operator|<=
literal|63
return|;
block|}
DECL|field|MAX_LONG
specifier|private
specifier|static
specifier|final
name|BigInteger
name|MAX_LONG
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|MIN_LONG
specifier|private
specifier|static
specifier|final
name|BigInteger
name|MIN_LONG
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
DECL|method|saturatedCast (BigInteger big)
specifier|private
specifier|static
name|long
name|saturatedCast
parameter_list|(
name|BigInteger
name|big
parameter_list|)
block|{
if|if
condition|(
name|big
operator|.
name|compareTo
argument_list|(
name|MAX_LONG
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
if|if
condition|(
name|big
operator|.
name|compareTo
argument_list|(
name|MIN_LONG
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
return|return
name|big
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|LongMath
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// isPrime is GWT-incompatible
DECL|method|testIsPrimeSmall ()
specifier|public
name|void
name|testIsPrimeSmall
parameter_list|()
block|{
comment|// Check the first 1000 integers
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
operator|.
name|isProbablePrime
argument_list|(
literal|100
argument_list|)
argument_list|,
name|LongMath
operator|.
name|isPrime
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// isPrime is GWT-incompatible
DECL|method|testIsPrimeManyConstants ()
specifier|public
name|void
name|testIsPrimeManyConstants
parameter_list|()
block|{
comment|// Test the thorough test inputs, which also includes special constants in the Miller-Rabin
comment|// tests.
for|for
control|(
name|long
name|l
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|l
argument_list|)
operator|.
name|isProbablePrime
argument_list|(
literal|100
argument_list|)
argument_list|,
name|LongMath
operator|.
name|isPrime
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// isPrime is GWT-incompatible
DECL|method|testIsPrimeOnUniformRandom ()
specifier|public
name|void
name|testIsPrimeOnUniformRandom
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bits
init|=
literal|10
init|;
name|bits
operator|<
literal|63
condition|;
name|bits
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
comment|// A random long between 0 and Long.MAX_VALUE, inclusive.
name|long
name|l
init|=
name|rand
operator|.
name|nextLong
argument_list|()
operator|&
operator|(
operator|(
literal|1L
operator|<<
name|bits
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|l
argument_list|)
operator|.
name|isProbablePrime
argument_list|(
literal|100
argument_list|)
argument_list|,
name|LongMath
operator|.
name|isPrime
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// isPrime is GWT-incompatible
DECL|method|testIsPrimeOnRandomPrimes ()
specifier|public
name|void
name|testIsPrimeOnRandomPrimes
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bits
init|=
literal|10
init|;
name|bits
operator|<
literal|63
condition|;
name|bits
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|long
name|p
init|=
name|BigInteger
operator|.
name|probablePrime
argument_list|(
name|bits
argument_list|,
name|rand
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|LongMath
operator|.
name|isPrime
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// isPrime is GWT-incompatible
DECL|method|testIsPrimeOnRandomComposites ()
specifier|public
name|void
name|testIsPrimeOnRandomComposites
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bits
init|=
literal|5
init|;
name|bits
operator|<
literal|32
condition|;
name|bits
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|long
name|p
init|=
name|BigInteger
operator|.
name|probablePrime
argument_list|(
name|bits
argument_list|,
name|rand
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|q
init|=
name|BigInteger
operator|.
name|probablePrime
argument_list|(
name|bits
argument_list|,
name|rand
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|LongMath
operator|.
name|isPrime
argument_list|(
name|p
operator|*
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// isPrime is GWT-incompatible
DECL|method|testIsPrimeThrowsOnNegative ()
specifier|public
name|void
name|testIsPrimeThrowsOnNegative
parameter_list|()
block|{
try|try
block|{
name|LongMath
operator|.
name|isPrime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
DECL|class|RoundToDoubleTester
specifier|private
specifier|static
specifier|final
class|class
name|RoundToDoubleTester
block|{
DECL|field|input
specifier|private
specifier|final
name|long
name|input
decl_stmt|;
DECL|field|expectedValues
specifier|private
specifier|final
name|Map
argument_list|<
name|RoundingMode
argument_list|,
name|Double
argument_list|>
name|expectedValues
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|RoundingMode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|unnecessaryShouldThrow
specifier|private
name|boolean
name|unnecessaryShouldThrow
init|=
literal|false
decl_stmt|;
DECL|method|RoundToDoubleTester (long input)
name|RoundToDoubleTester
parameter_list|(
name|long
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
DECL|method|setExpectation (double expectedValue, RoundingMode... modes)
name|RoundToDoubleTester
name|setExpectation
parameter_list|(
name|double
name|expectedValue
parameter_list|,
name|RoundingMode
modifier|...
name|modes
parameter_list|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|modes
control|)
block|{
name|Double
name|previous
init|=
name|expectedValues
operator|.
name|put
argument_list|(
name|mode
argument_list|,
name|expectedValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|roundUnnecessaryShouldThrow ()
specifier|public
name|RoundToDoubleTester
name|roundUnnecessaryShouldThrow
parameter_list|()
block|{
name|unnecessaryShouldThrow
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
name|assertThat
argument_list|(
name|expectedValues
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsAtLeastElementsIn
argument_list|(
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|UNNECESSARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RoundingMode
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|expectedValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RoundingMode
name|mode
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Double
name|expectation
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"roundToDouble("
operator|+
name|input
operator|+
literal|", "
operator|+
name|mode
operator|+
literal|")"
argument_list|)
operator|.
name|that
argument_list|(
name|LongMath
operator|.
name|roundToDouble
argument_list|(
name|input
argument_list|,
name|mode
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expectedValues
operator|.
name|containsKey
argument_list|(
name|UNNECESSARY
argument_list|)
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"Expected roundUnnecessaryShouldThrow call"
argument_list|)
operator|.
name|that
argument_list|(
name|unnecessaryShouldThrow
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|LongMath
operator|.
name|roundToDouble
argument_list|(
name|input
argument_list|,
name|UNNECESSARY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException for roundToDouble("
operator|+
name|input
operator|+
literal|", UNNECESSARY)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_zero ()
specifier|public
name|void
name|testRoundToDouble_zero
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
literal|0
argument_list|)
operator|.
name|setExpectation
argument_list|(
literal|0.0
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_smallPositive ()
specifier|public
name|void
name|testRoundToDouble_smallPositive
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
literal|16
argument_list|)
operator|.
name|setExpectation
argument_list|(
literal|16.0
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_maxPreciselyRepresentable ()
specifier|public
name|void
name|testRoundToDouble_maxPreciselyRepresentable
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
literal|1L
operator|<<
literal|53
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|53
argument_list|)
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_maxPreciselyRepresentablePlusOne ()
specifier|public
name|void
name|testRoundToDouble_maxPreciselyRepresentablePlusOne
parameter_list|()
block|{
name|double
name|twoToThe53
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|53
argument_list|)
decl_stmt|;
comment|// the representable doubles are 2^53 and 2^53 + 2.
comment|// 2^53+1 is halfway between, so HALF_UP will go up and HALF_DOWN will go down.
comment|// 2^53 is "more even" -- it's a multiple of a larger power of two -- so HALF_EVEN goes to it.
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
literal|1L
operator|<<
literal|53
operator|)
operator|+
literal|1
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|twoToThe53
argument_list|,
name|DOWN
argument_list|,
name|FLOOR
argument_list|,
name|HALF_DOWN
argument_list|,
name|HALF_EVEN
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|Math
operator|.
name|nextUp
argument_list|(
name|twoToThe53
argument_list|)
argument_list|,
name|CEILING
argument_list|,
name|UP
argument_list|,
name|HALF_UP
argument_list|)
operator|.
name|roundUnnecessaryShouldThrow
argument_list|()
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_twoToThe54PlusOne ()
specifier|public
name|void
name|testRoundToDouble_twoToThe54PlusOne
parameter_list|()
block|{
name|double
name|twoToThe54
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
decl_stmt|;
comment|// the representable doubles are 2^54 and 2^54 + 4
comment|// 2^54+1 is less than halfway between, so HALF_* will all go down.
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
literal|1L
operator|<<
literal|54
operator|)
operator|+
literal|1
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|twoToThe54
argument_list|,
name|DOWN
argument_list|,
name|FLOOR
argument_list|,
name|HALF_DOWN
argument_list|,
name|HALF_UP
argument_list|,
name|HALF_EVEN
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|Math
operator|.
name|nextUp
argument_list|(
name|twoToThe54
argument_list|)
argument_list|,
name|CEILING
argument_list|,
name|UP
argument_list|)
operator|.
name|roundUnnecessaryShouldThrow
argument_list|()
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_twoToThe54PlusThree ()
specifier|public
name|void
name|testRoundToDouble_twoToThe54PlusThree
parameter_list|()
block|{
name|double
name|twoToThe54
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
decl_stmt|;
comment|// the representable doubles are 2^54 and 2^54 + 4
comment|// 2^54+3 is more than halfway between, so HALF_* will all go up.
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
literal|1L
operator|<<
literal|54
operator|)
operator|+
literal|3
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|twoToThe54
argument_list|,
name|DOWN
argument_list|,
name|FLOOR
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|Math
operator|.
name|nextUp
argument_list|(
name|twoToThe54
argument_list|)
argument_list|,
name|CEILING
argument_list|,
name|UP
argument_list|,
name|HALF_DOWN
argument_list|,
name|HALF_UP
argument_list|,
name|HALF_EVEN
argument_list|)
operator|.
name|roundUnnecessaryShouldThrow
argument_list|()
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_twoToThe54PlusFour ()
specifier|public
name|void
name|testRoundToDouble_twoToThe54PlusFour
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
literal|1L
operator|<<
literal|54
operator|)
operator|+
literal|4
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
operator|+
literal|4
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_smallNegative ()
specifier|public
name|void
name|testRoundToDouble_smallNegative
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
operator|-
literal|16
argument_list|)
operator|.
name|setExpectation
argument_list|(
operator|-
literal|16.0
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_minPreciselyRepresentable ()
specifier|public
name|void
name|testRoundToDouble_minPreciselyRepresentable
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
operator|-
literal|1L
operator|<<
literal|53
argument_list|)
operator|.
name|setExpectation
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|53
argument_list|)
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_minPreciselyRepresentableMinusOne ()
specifier|public
name|void
name|testRoundToDouble_minPreciselyRepresentableMinusOne
parameter_list|()
block|{
comment|// the representable doubles are -2^53 and -2^53 - 2.
comment|// -2^53-1 is halfway between, so HALF_UP will go up and HALF_DOWN will go down.
comment|// -2^53 is "more even" -- a multiple of a greater power of two -- so HALF_EVEN will go to it.
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
operator|-
literal|1L
operator|<<
literal|53
operator|)
operator|-
literal|1
argument_list|)
operator|.
name|setExpectation
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|53
argument_list|)
argument_list|,
name|DOWN
argument_list|,
name|CEILING
argument_list|,
name|HALF_DOWN
argument_list|,
name|HALF_EVEN
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|53
argument_list|)
argument_list|)
argument_list|,
name|FLOOR
argument_list|,
name|UP
argument_list|,
name|HALF_UP
argument_list|)
operator|.
name|roundUnnecessaryShouldThrow
argument_list|()
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_negativeTwoToThe54MinusOne ()
specifier|public
name|void
name|testRoundToDouble_negativeTwoToThe54MinusOne
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
operator|-
literal|1L
operator|<<
literal|54
operator|)
operator|-
literal|1
argument_list|)
operator|.
name|setExpectation
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
argument_list|,
name|DOWN
argument_list|,
name|CEILING
argument_list|,
name|HALF_DOWN
argument_list|,
name|HALF_UP
argument_list|,
name|HALF_EVEN
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
argument_list|)
argument_list|,
name|FLOOR
argument_list|,
name|UP
argument_list|)
operator|.
name|roundUnnecessaryShouldThrow
argument_list|()
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_negativeTwoToThe54MinusThree ()
specifier|public
name|void
name|testRoundToDouble_negativeTwoToThe54MinusThree
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
operator|-
literal|1L
operator|<<
literal|54
operator|)
operator|-
literal|3
argument_list|)
operator|.
name|setExpectation
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
argument_list|,
name|DOWN
argument_list|,
name|CEILING
argument_list|)
operator|.
name|setExpectation
argument_list|(
name|DoubleUtils
operator|.
name|nextDown
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
argument_list|)
argument_list|,
name|FLOOR
argument_list|,
name|UP
argument_list|,
name|HALF_DOWN
argument_list|,
name|HALF_UP
argument_list|,
name|HALF_EVEN
argument_list|)
operator|.
name|roundUnnecessaryShouldThrow
argument_list|()
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testRoundToDouble_negativeTwoToThe54MinusFour ()
specifier|public
name|void
name|testRoundToDouble_negativeTwoToThe54MinusFour
parameter_list|()
block|{
operator|new
name|RoundToDoubleTester
argument_list|(
operator|(
operator|-
literal|1L
operator|<<
literal|54
operator|)
operator|-
literal|4
argument_list|)
operator|.
name|setExpectation
argument_list|(
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|54
argument_list|)
operator|-
literal|4
argument_list|,
name|values
argument_list|()
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|failFormat (String template, Object... args)
specifier|private
specifier|static
name|void
name|failFormat
parameter_list|(
name|String
name|template
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
name|template
argument_list|,
name|args
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

