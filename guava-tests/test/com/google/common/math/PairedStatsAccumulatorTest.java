begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALLOWED_ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ALL_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|EMPTY_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_STATS_ITERABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ONE_VALUE_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_MANY_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_MANY_VALUES_COUNT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_MANY_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_ONE_VALUE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_ONE_VALUE_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_TWO_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|OTHER_TWO_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_STATS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertDiagonalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertHorizontalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertLinearTransformationNaN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertStatsApproxEqual
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertVerticalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|createFilledPairedStatsAccumulator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|createPartitionedFilledPairedStatsAccumulator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|ManyValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link PairedStatsAccumulator}. This tests the stats methods for instances built with  * {@link PairedStatsAccumulator#add}, and various error cases of that method. For tests of the  * {@link PairedStatsAccumulator#snapshot} method which returns {@link PairedStats} instances, see  * {@link PairedStatsTest}.  *  * @author Pete Gillin  */
end_comment

begin_class
DECL|class|PairedStatsAccumulatorTest
specifier|public
class|class
name|PairedStatsAccumulatorTest
extends|extends
name|TestCase
block|{
DECL|field|emptyAccumulator
specifier|private
name|PairedStatsAccumulator
name|emptyAccumulator
decl_stmt|;
DECL|field|emptyAccumulatorByAddAllEmptyPairedStats
specifier|private
name|PairedStatsAccumulator
name|emptyAccumulatorByAddAllEmptyPairedStats
decl_stmt|;
DECL|field|oneValueAccumulator
specifier|private
name|PairedStatsAccumulator
name|oneValueAccumulator
decl_stmt|;
DECL|field|oneValueAccumulatorByAddAllEmptyPairedStats
specifier|private
name|PairedStatsAccumulator
name|oneValueAccumulatorByAddAllEmptyPairedStats
decl_stmt|;
DECL|field|twoValuesAccumulator
specifier|private
name|PairedStatsAccumulator
name|twoValuesAccumulator
decl_stmt|;
DECL|field|twoValuesAccumulatorByAddAllPartitionedPairedStats
specifier|private
name|PairedStatsAccumulator
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
decl_stmt|;
DECL|field|manyValuesAccumulator
specifier|private
name|PairedStatsAccumulator
name|manyValuesAccumulator
decl_stmt|;
DECL|field|manyValuesAccumulatorByAddAllPartitionedPairedStats
specifier|private
name|PairedStatsAccumulator
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
decl_stmt|;
DECL|field|horizontalValuesAccumulator
specifier|private
name|PairedStatsAccumulator
name|horizontalValuesAccumulator
decl_stmt|;
DECL|field|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
specifier|private
name|PairedStatsAccumulator
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
decl_stmt|;
DECL|field|verticalValuesAccumulator
specifier|private
name|PairedStatsAccumulator
name|verticalValuesAccumulator
decl_stmt|;
DECL|field|verticalValuesAccumulatorByAddAllPartitionedPairedStats
specifier|private
name|PairedStatsAccumulator
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
decl_stmt|;
DECL|field|constantValuesAccumulator
specifier|private
name|PairedStatsAccumulator
name|constantValuesAccumulator
decl_stmt|;
DECL|field|constantValuesAccumulatorByAddAllPartitionedPairedStats
specifier|private
name|PairedStatsAccumulator
name|constantValuesAccumulatorByAddAllPartitionedPairedStats
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|emptyAccumulator
operator|=
operator|new
name|PairedStatsAccumulator
argument_list|()
expr_stmt|;
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|=
operator|new
name|PairedStatsAccumulator
argument_list|()
expr_stmt|;
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|addAll
argument_list|(
name|emptyAccumulator
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
name|oneValueAccumulator
operator|=
operator|new
name|PairedStatsAccumulator
argument_list|()
expr_stmt|;
name|oneValueAccumulator
operator|.
name|add
argument_list|(
name|ONE_VALUE
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
expr_stmt|;
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|=
operator|new
name|PairedStatsAccumulator
argument_list|()
expr_stmt|;
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|add
argument_list|(
name|ONE_VALUE
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
expr_stmt|;
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|addAll
argument_list|(
name|emptyAccumulator
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
name|twoValuesAccumulator
operator|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|TWO_VALUES
argument_list|,
name|OTHER_TWO_VALUES
argument_list|)
expr_stmt|;
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|TWO_VALUES
argument_list|,
name|OTHER_TWO_VALUES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|manyValuesAccumulator
operator|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|MANY_VALUES
argument_list|,
name|OTHER_MANY_VALUES
argument_list|)
expr_stmt|;
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|MANY_VALUES
argument_list|,
name|OTHER_MANY_VALUES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|horizontalValuesAccumulator
operator|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|MANY_VALUES
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|MANY_VALUES_COUNT
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
operator|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|MANY_VALUES
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|MANY_VALUES_COUNT
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verticalValuesAccumulator
operator|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|OTHER_MANY_VALUES_COUNT
argument_list|,
name|ONE_VALUE
argument_list|)
argument_list|,
name|OTHER_MANY_VALUES
argument_list|)
expr_stmt|;
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
operator|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|OTHER_MANY_VALUES_COUNT
argument_list|,
name|ONE_VALUE
argument_list|)
argument_list|,
name|OTHER_MANY_VALUES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|constantValuesAccumulator
operator|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|MANY_VALUES_COUNT
argument_list|,
name|ONE_VALUE
argument_list|)
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|MANY_VALUES_COUNT
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|constantValuesAccumulatorByAddAllPartitionedPairedStats
operator|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|MANY_VALUES_COUNT
argument_list|,
name|ONE_VALUE
argument_list|)
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|MANY_VALUES_COUNT
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testCount ()
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|assertThat
argument_list|(
name|emptyAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|method|testCountOverflow_doesNotThrow ()
specifier|public
name|void
name|testCountOverflow_doesNotThrow
parameter_list|()
block|{
name|PairedStatsAccumulator
name|accumulator
init|=
operator|new
name|PairedStatsAccumulator
argument_list|()
decl_stmt|;
name|accumulator
operator|.
name|add
argument_list|(
name|ONE_VALUE
argument_list|,
name|OTHER_ONE_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|power
init|=
literal|1
init|;
name|power
operator|<
name|Long
operator|.
name|SIZE
operator|-
literal|1
condition|;
name|power
operator|++
control|)
block|{
name|accumulator
operator|.
name|addAll
argument_list|(
name|accumulator
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Should overflow without throwing.
name|accumulator
operator|.
name|addAll
argument_list|(
name|accumulator
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accumulator
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|isLessThan
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|testXStats ()
specifier|public
name|void
name|testXStats
parameter_list|()
block|{
name|assertStatsApproxEqual
argument_list|(
name|EMPTY_STATS_ITERABLE
argument_list|,
name|emptyAccumulator
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|EMPTY_STATS_ITERABLE
argument_list|,
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|ONE_VALUE_STATS
argument_list|,
name|oneValueAccumulator
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|ONE_VALUE_STATS
argument_list|,
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|TWO_VALUES_STATS
argument_list|,
name|twoValuesAccumulator
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|TWO_VALUES_STATS
argument_list|,
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|manyValuesAccumulator
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|MANY_VALUES_STATS_ITERABLE
argument_list|,
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testYStats ()
specifier|public
name|void
name|testYStats
parameter_list|()
block|{
name|assertStatsApproxEqual
argument_list|(
name|EMPTY_STATS_ITERABLE
argument_list|,
name|emptyAccumulator
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|EMPTY_STATS_ITERABLE
argument_list|,
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_ONE_VALUE_STATS
argument_list|,
name|oneValueAccumulator
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_ONE_VALUE_STATS
argument_list|,
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_TWO_VALUES_STATS
argument_list|,
name|twoValuesAccumulator
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_TWO_VALUES_STATS
argument_list|,
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_MANY_VALUES_STATS
argument_list|,
name|manyValuesAccumulator
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsApproxEqual
argument_list|(
name|OTHER_MANY_VALUES_STATS
argument_list|,
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPopulationCovariance ()
specifier|public
name|void
name|testPopulationCovariance
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|populationCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|populationCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|oneValueAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
literal|0.0
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
comment|// For datasets of many double values, we test many combinations of finite and non-finite
comment|// x-values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|PairedStatsAccumulator
name|accumulator
init|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
name|OTHER_MANY_VALUES
argument_list|)
decl_stmt|;
name|PairedStatsAccumulator
name|accumulatorByAddAllPartitionedPairedStats
init|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
name|OTHER_MANY_VALUES
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|double
name|populationCovariance
init|=
name|accumulator
operator|.
name|populationCovariance
argument_list|()
decl_stmt|;
name|double
name|populationCovarianceByAddAllPartitionedPairedStats
init|=
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|populationCovariance
argument_list|)
operator|.
name|named
argument_list|(
literal|"population covariance of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|populationCovarianceByAddAllPartitionedPairedStats
argument_list|)
operator|.
name|named
argument_list|(
literal|"population covariance by addAll(PairedStats) of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|populationCovariance
argument_list|)
operator|.
name|named
argument_list|(
literal|"population covariance of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|populationCovarianceByAddAllPartitionedPairedStats
argument_list|)
operator|.
name|named
argument_list|(
literal|"population covariance by addAll(PairedStats) of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
name|MANY_VALUES_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|horizontalValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|verticalValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|constantValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|constantValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testSampleCovariance ()
specifier|public
name|void
name|testSampleCovariance
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|sampleCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|sampleCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulator
operator|.
name|sampleCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|sampleCovariance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulator
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS
operator|/
operator|(
name|MANY_VALUES_COUNT
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|horizontalValuesAccumulator
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|verticalValuesAccumulator
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|constantValuesAccumulator
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|constantValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|sampleCovariance
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testPearsonsCorrelationCoefficient ()
specifier|public
name|void
name|testPearsonsCorrelationCoefficient
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|twoValuesAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|twoValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|twoValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|twoValuesAccumulator
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|manyValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|manyValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|manyValuesAccumulator
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// For datasets of many double values, we test many combinations of finite and non-finite
comment|// y-values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|PairedStatsAccumulator
name|accumulator
init|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|MANY_VALUES
argument_list|,
name|values
operator|.
name|asIterable
argument_list|()
argument_list|)
decl_stmt|;
name|PairedStatsAccumulator
name|accumulatorByAddAllPartitionedPairedStats
init|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|MANY_VALUES
argument_list|,
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|double
name|pearsonsCorrelationCoefficient
init|=
name|accumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
decl_stmt|;
name|double
name|pearsonsCorrelationCoefficientByAddAllPartitionedPairedStats
init|=
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|pearsonsCorrelationCoefficient
argument_list|)
operator|.
name|named
argument_list|(
literal|"Pearson's correlation coefficient of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|pearsonsCorrelationCoefficient
argument_list|)
operator|.
name|named
argument_list|(
literal|"Pearson's correlation coefficient by addAll(PairedStats) of "
operator|+
name|values
argument_list|)
operator|.
name|isNaN
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|pearsonsCorrelationCoefficient
argument_list|)
operator|.
name|named
argument_list|(
literal|"Pearson's correlation coefficient of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|accumulator
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|accumulator
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|accumulator
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pearsonsCorrelationCoefficientByAddAllPartitionedPairedStats
argument_list|)
operator|.
name|named
argument_list|(
literal|"Pearson's correlation coefficient by addAll(PairedStats) of "
operator|+
name|values
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
operator|/
operator|(
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|*
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
operator|.
name|populationStandardDeviation
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|horizontalValuesAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|verticalValuesAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|constantValuesAccumulator
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|constantValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|pearsonsCorrelationCoefficient
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testLeastSquaresFit ()
specifier|public
name|void
name|testLeastSquaresFit
parameter_list|()
block|{
try|try
block|{
name|emptyAccumulator
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|emptyAccumulatorByAddAllEmptyPairedStats
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulator
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|oneValueAccumulatorByAddAllEmptyPairedStats
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
name|assertDiagonalLinearTransformation
argument_list|(
name|twoValuesAccumulator
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|twoValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|twoValuesAccumulator
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|twoValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|twoValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiagonalLinearTransformation
argument_list|(
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|twoValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiagonalLinearTransformation
argument_list|(
name|manyValuesAccumulator
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|manyValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|manyValuesAccumulator
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|manyValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|manyValuesAccumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiagonalLinearTransformation
argument_list|(
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|manyValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
comment|// For datasets of many double values, we test many combinations of finite and non-finite
comment|// x-values:
for|for
control|(
name|ManyValues
name|values
range|:
name|ALL_MANY_VALUES
control|)
block|{
name|PairedStatsAccumulator
name|accumulator
init|=
name|createFilledPairedStatsAccumulator
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
name|OTHER_MANY_VALUES
argument_list|)
decl_stmt|;
name|PairedStatsAccumulator
name|accumulatorByAddAllPartitionedPairedStats
init|=
name|createPartitionedFilledPairedStatsAccumulator
argument_list|(
name|values
operator|.
name|asIterable
argument_list|()
argument_list|,
name|OTHER_MANY_VALUES
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LinearTransformation
name|fit
init|=
name|accumulator
operator|.
name|leastSquaresFit
argument_list|()
decl_stmt|;
name|LinearTransformation
name|fitByAddAllPartitionedPairedStats
init|=
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|leastSquaresFit
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|hasAnyNonFinite
argument_list|()
condition|)
block|{
name|assertLinearTransformationNaN
argument_list|(
name|fit
argument_list|)
expr_stmt|;
name|assertLinearTransformationNaN
argument_list|(
name|fitByAddAllPartitionedPairedStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertDiagonalLinearTransformation
argument_list|(
name|fit
argument_list|,
name|accumulator
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|accumulator
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|accumulator
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|accumulator
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiagonalLinearTransformation
argument_list|(
name|fitByAddAllPartitionedPairedStats
argument_list|,
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|,
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|populationVariance
argument_list|()
argument_list|,
name|accumulatorByAddAllPartitionedPairedStats
operator|.
name|populationCovariance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertHorizontalLinearTransformation
argument_list|(
name|horizontalValuesAccumulator
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|horizontalValuesAccumulator
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
name|assertHorizontalLinearTransformation
argument_list|(
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|horizontalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|yStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
name|assertVerticalLinearTransformation
argument_list|(
name|verticalValuesAccumulator
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|verticalValuesAccumulator
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
name|assertVerticalLinearTransformation
argument_list|(
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|leastSquaresFit
argument_list|()
argument_list|,
name|verticalValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|xStats
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|constantValuesAccumulator
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|constantValuesAccumulatorByAddAllPartitionedPairedStats
operator|.
name|leastSquaresFit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

