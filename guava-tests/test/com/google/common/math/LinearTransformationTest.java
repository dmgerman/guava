begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertDiagonalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertHorizontalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertLinearTransformationNaN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|StatsTesting
operator|.
name|assertVerticalLinearTransformation
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link LinearTransformation}.  *  * @author Pete Gillin  */
end_comment

begin_class
DECL|class|LinearTransformationTest
specifier|public
class|class
name|LinearTransformationTest
extends|extends
name|TestCase
block|{
DECL|field|ALLOWED_ERROR
specifier|private
specifier|static
specifier|final
name|double
name|ALLOWED_ERROR
init|=
literal|1e-10
decl_stmt|;
DECL|method|testMappingAnd_regular ()
specifier|public
name|void
name|testMappingAnd_regular
parameter_list|()
block|{
name|double
name|x1
init|=
literal|1.2
decl_stmt|;
name|double
name|y1
init|=
literal|3.4
decl_stmt|;
name|double
name|xDelta
init|=
literal|5.6
decl_stmt|;
name|double
name|yDelta
init|=
literal|7.8
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
operator|.
name|and
argument_list|(
name|x1
operator|+
name|xDelta
argument_list|,
name|y1
operator|+
name|yDelta
argument_list|)
decl_stmt|;
name|assertDiagonalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|xDelta
argument_list|,
name|yDelta
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingAnd_horizontal ()
specifier|public
name|void
name|testMappingAnd_horizontal
parameter_list|()
block|{
name|double
name|x1
init|=
literal|1.2
decl_stmt|;
name|double
name|xDelta
init|=
literal|3.4
decl_stmt|;
name|double
name|y
init|=
literal|5.6
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x1
argument_list|,
name|y
argument_list|)
operator|.
name|and
argument_list|(
name|x1
operator|+
name|xDelta
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertHorizontalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingAnd_vertical ()
specifier|public
name|void
name|testMappingAnd_vertical
parameter_list|()
block|{
name|double
name|x
init|=
literal|1.2
decl_stmt|;
name|double
name|y1
init|=
literal|3.4
decl_stmt|;
name|double
name|yDelta
init|=
literal|5.6
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x
argument_list|,
name|y1
argument_list|)
operator|.
name|and
argument_list|(
name|x
argument_list|,
name|y1
operator|+
name|yDelta
argument_list|)
decl_stmt|;
name|assertVerticalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapping_infiniteX1 ()
specifier|public
name|void
name|testMapping_infiniteX1
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|3.4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from mapping(x, y) with infinite x"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMapping_infiniteY1 ()
specifier|public
name|void
name|testMapping_infiniteY1
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from mapping(x, y) with infinite y"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMappingAnd_infiniteX2 ()
specifier|public
name|void
name|testMappingAnd_infiniteX2
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
literal|3.4
argument_list|)
operator|.
name|and
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|7.8
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from and(x, y) with infinite x"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMappingAnd_infiniteY2 ()
specifier|public
name|void
name|testMappingAnd_infiniteY2
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
literal|3.4
argument_list|)
operator|.
name|and
argument_list|(
literal|5.6
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from and(x, y) with infinite y"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMapping_nanX1 ()
specifier|public
name|void
name|testMapping_nanX1
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
literal|3.4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from mapping(x, y) with NaN x"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMapping_nanY1 ()
specifier|public
name|void
name|testMapping_nanY1
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from mapping(x, y) with NaN y"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMappingAnd_nanX2 ()
specifier|public
name|void
name|testMappingAnd_nanX2
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
literal|3.4
argument_list|)
operator|.
name|and
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
literal|7.8
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from and(x, y) with NaN x"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMappingAnd_nanY2 ()
specifier|public
name|void
name|testMappingAnd_nanY2
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
literal|3.4
argument_list|)
operator|.
name|and
argument_list|(
literal|5.6
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from and(x, y) with NaN y"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMappingAnd_samePointTwice ()
specifier|public
name|void
name|testMappingAnd_samePointTwice
parameter_list|()
block|{
try|try
block|{
name|double
name|x
init|=
literal|1.2
decl_stmt|;
name|double
name|y
init|=
literal|3.4
decl_stmt|;
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|.
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from mapping(x1, y1).and(x2, y2) with"
operator|+
literal|" (x1 == x2)&& (y1 == y2)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMappingWithSlope_regular ()
specifier|public
name|void
name|testMappingWithSlope_regular
parameter_list|()
block|{
name|double
name|x1
init|=
literal|1.2
decl_stmt|;
name|double
name|y1
init|=
literal|3.4
decl_stmt|;
name|double
name|xDelta
init|=
operator|-
literal|5.6
decl_stmt|;
name|double
name|slope
init|=
operator|-
literal|7.8
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
operator|.
name|withSlope
argument_list|(
name|slope
argument_list|)
decl_stmt|;
name|assertDiagonalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|xDelta
argument_list|,
name|xDelta
operator|*
name|slope
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingWithSlope_horizontal ()
specifier|public
name|void
name|testMappingWithSlope_horizontal
parameter_list|()
block|{
name|double
name|x1
init|=
literal|1.2
decl_stmt|;
name|double
name|y
init|=
literal|5.6
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x1
argument_list|,
name|y
argument_list|)
operator|.
name|withSlope
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|assertHorizontalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingWithSlope_vertical ()
specifier|public
name|void
name|testMappingWithSlope_vertical
parameter_list|()
block|{
name|double
name|x
init|=
literal|1.2
decl_stmt|;
name|double
name|y1
init|=
literal|3.4
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x
argument_list|,
name|y1
argument_list|)
operator|.
name|withSlope
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|assertVerticalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingWithSlope_minimalSlope ()
specifier|public
name|void
name|testMappingWithSlope_minimalSlope
parameter_list|()
block|{
name|double
name|x1
init|=
literal|1.2
decl_stmt|;
name|double
name|y1
init|=
literal|3.4
decl_stmt|;
name|double
name|slope
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
operator|.
name|withSlope
argument_list|(
name|slope
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformation
operator|.
name|isVertical
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transformation
operator|.
name|isHorizontal
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transformation
operator|.
name|slope
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|slope
argument_list|)
expr_stmt|;
comment|// Note that we cannot test the actual mapping of points, as the results will be unreliable due
comment|// to loss of precision with this value of the slope.
block|}
DECL|method|testMappingWithSlope_maximalSlope ()
specifier|public
name|void
name|testMappingWithSlope_maximalSlope
parameter_list|()
block|{
name|double
name|x1
init|=
literal|1.2
decl_stmt|;
name|double
name|y1
init|=
literal|3.4
decl_stmt|;
name|double
name|slope
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|mapping
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
operator|.
name|withSlope
argument_list|(
name|slope
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformation
operator|.
name|isVertical
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transformation
operator|.
name|isHorizontal
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transformation
operator|.
name|slope
argument_list|()
argument_list|)
operator|.
name|isWithin
argument_list|(
name|ALLOWED_ERROR
argument_list|)
operator|.
name|of
argument_list|(
name|slope
argument_list|)
expr_stmt|;
comment|// Note that we cannot test the actual mapping of points, as the results will be unreliable due
comment|// to loss of precision with this value of the slope.
block|}
DECL|method|testMappingWithSlope_nanSlope ()
specifier|public
name|void
name|testMappingWithSlope_nanSlope
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|mapping
argument_list|(
literal|1.2
argument_list|,
literal|3.4
argument_list|)
operator|.
name|withSlope
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from withSlope(slope) with NaN slope"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testVertical_regular ()
specifier|public
name|void
name|testVertical_regular
parameter_list|()
block|{
name|double
name|x
init|=
literal|1.2
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|vertical
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|assertVerticalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
DECL|method|testVertical_infiniteX ()
specifier|public
name|void
name|testVertical_infiniteX
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|vertical
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from vertical(x) with infinite x"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testVertical_nanX ()
specifier|public
name|void
name|testVertical_nanX
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|vertical
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from vertical(x) with NaN x"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testHorizontal_regular ()
specifier|public
name|void
name|testHorizontal_regular
parameter_list|()
block|{
name|double
name|y
init|=
literal|1.2
decl_stmt|;
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|horizontal
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|assertHorizontalLinearTransformation
argument_list|(
name|transformation
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
DECL|method|testHorizontal_infiniteY ()
specifier|public
name|void
name|testHorizontal_infiniteY
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|horizontal
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from horizontal(y) with infinite y"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testHorizontal_nanY ()
specifier|public
name|void
name|testHorizontal_nanY
parameter_list|()
block|{
try|try
block|{
name|LinearTransformation
operator|.
name|horizontal
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException from horizontal(y) with NaN y"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testForNaN ()
specifier|public
name|void
name|testForNaN
parameter_list|()
block|{
name|LinearTransformation
name|transformation
init|=
name|LinearTransformation
operator|.
name|forNaN
argument_list|()
decl_stmt|;
name|assertLinearTransformationNaN
argument_list|(
name|transformation
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

