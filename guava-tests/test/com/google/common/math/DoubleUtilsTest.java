begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_DOUBLE_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|EXPONENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|FINITE_DOUBLE_CANDIDATES
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|FpUtils
import|;
end_import

begin_class
DECL|class|DoubleUtilsTest
specifier|public
class|class
name|DoubleUtilsTest
extends|extends
name|TestCase
block|{
DECL|method|testScalbPositiveExponent ()
specifier|public
specifier|strictfp
name|void
name|testScalbPositiveExponent
parameter_list|()
block|{
for|for
control|(
name|int
name|k
range|:
name|EXPONENTS
control|)
block|{
for|for
control|(
name|double
name|d
range|:
name|ALL_DOUBLE_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|d
operator|*
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|k
argument_list|)
argument_list|,
name|DoubleUtils
operator|.
name|scalb
argument_list|(
name|d
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGetExponent ()
specifier|public
name|void
name|testGetExponent
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|ALL_DOUBLE_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|FpUtils
operator|.
name|getExponent
argument_list|(
name|d
argument_list|)
argument_list|,
name|DoubleUtils
operator|.
name|getExponent
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNextUp ()
specifier|public
name|void
name|testNextUp
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|FpUtils
operator|.
name|nextUp
argument_list|(
name|d
argument_list|)
argument_list|,
name|DoubleUtils
operator|.
name|next
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNextDown ()
specifier|public
name|void
name|testNextDown
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|FpUtils
operator|.
name|nextDown
argument_list|(
name|d
argument_list|)
argument_list|,
name|DoubleUtils
operator|.
name|next
argument_list|(
name|d
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

