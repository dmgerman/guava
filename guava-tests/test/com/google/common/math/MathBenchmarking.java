begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Utilities for benchmarks.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|MathBenchmarking
specifier|final
class|class
name|MathBenchmarking
block|{
DECL|field|ARRAY_SIZE
specifier|static
specifier|final
name|int
name|ARRAY_SIZE
init|=
literal|0x10000
decl_stmt|;
DECL|field|ARRAY_MASK
specifier|static
specifier|final
name|int
name|ARRAY_MASK
init|=
literal|0x0ffff
decl_stmt|;
DECL|field|RANDOM_SOURCE
specifier|static
specifier|final
name|Random
name|RANDOM_SOURCE
init|=
operator|new
name|Random
argument_list|(
literal|314159265358979L
argument_list|)
decl_stmt|;
DECL|field|MAX_EXPONENT
specifier|static
specifier|final
name|int
name|MAX_EXPONENT
init|=
literal|100
decl_stmt|;
comment|/*    * Duplicated from LongMath.    * binomial(biggestBinomials[k], k) fits in a long, but not    * binomial(biggestBinomials[k] + 1, k).    */
DECL|field|biggestBinomials
specifier|static
specifier|final
name|int
index|[]
name|biggestBinomials
init|=
block|{
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
literal|3810779
block|,
literal|121977
block|,
literal|16175
block|,
literal|4337
block|,
literal|1733
block|,
literal|887
block|,
literal|534
block|,
literal|361
block|,
literal|265
block|,
literal|206
block|,
literal|169
block|,
literal|143
block|,
literal|125
block|,
literal|111
block|,
literal|101
block|,
literal|94
block|,
literal|88
block|,
literal|83
block|,
literal|79
block|,
literal|76
block|,
literal|74
block|,
literal|72
block|,
literal|70
block|,
literal|69
block|,
literal|68
block|,
literal|67
block|,
literal|67
block|,
literal|66
block|,
literal|66
block|,
literal|66
block|,
literal|66
block|}
decl_stmt|;
DECL|method|randomPositiveBigInteger (int numBits)
specifier|static
name|BigInteger
name|randomPositiveBigInteger
parameter_list|(
name|int
name|numBits
parameter_list|)
block|{
name|int
name|digits
init|=
name|RANDOM_SOURCE
operator|.
name|nextInt
argument_list|(
name|numBits
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
operator|new
name|BigInteger
argument_list|(
name|digits
argument_list|,
name|RANDOM_SOURCE
argument_list|)
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
return|;
block|}
DECL|method|randomNonNegativeBigInteger (int numBits)
specifier|static
name|BigInteger
name|randomNonNegativeBigInteger
parameter_list|(
name|int
name|numBits
parameter_list|)
block|{
name|int
name|digits
init|=
name|RANDOM_SOURCE
operator|.
name|nextInt
argument_list|(
name|numBits
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
operator|new
name|BigInteger
argument_list|(
name|digits
argument_list|,
name|RANDOM_SOURCE
argument_list|)
return|;
block|}
DECL|method|randomNonZeroBigInteger (int numBits)
specifier|static
name|BigInteger
name|randomNonZeroBigInteger
parameter_list|(
name|int
name|numBits
parameter_list|)
block|{
name|BigInteger
name|result
init|=
name|randomPositiveBigInteger
argument_list|(
name|numBits
argument_list|)
decl_stmt|;
return|return
name|RANDOM_SOURCE
operator|.
name|nextBoolean
argument_list|()
condition|?
name|result
else|:
name|result
operator|.
name|negate
argument_list|()
return|;
block|}
DECL|method|randomBigInteger (int numBits)
specifier|static
name|BigInteger
name|randomBigInteger
parameter_list|(
name|int
name|numBits
parameter_list|)
block|{
name|BigInteger
name|result
init|=
name|randomNonNegativeBigInteger
argument_list|(
name|numBits
argument_list|)
decl_stmt|;
return|return
name|RANDOM_SOURCE
operator|.
name|nextBoolean
argument_list|()
condition|?
name|result
else|:
name|result
operator|.
name|negate
argument_list|()
return|;
block|}
DECL|method|randomDouble (int maxExponent)
specifier|static
name|double
name|randomDouble
parameter_list|(
name|int
name|maxExponent
parameter_list|)
block|{
name|double
name|result
init|=
name|RANDOM_SOURCE
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|result
operator|=
name|Math
operator|.
name|scalb
argument_list|(
name|result
argument_list|,
name|RANDOM_SOURCE
operator|.
name|nextInt
argument_list|(
name|maxExponent
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|RANDOM_SOURCE
operator|.
name|nextBoolean
argument_list|()
condition|?
name|result
else|:
operator|-
name|result
return|;
block|}
comment|/**    * Returns a random integer between zero and {@code MAX_EXPONENT}.    */
DECL|method|randomExponent ()
specifier|static
name|int
name|randomExponent
parameter_list|()
block|{
return|return
name|RANDOM_SOURCE
operator|.
name|nextInt
argument_list|(
name|MAX_EXPONENT
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|randomPositiveDouble ()
specifier|static
name|double
name|randomPositiveDouble
parameter_list|()
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|randomDouble
argument_list|(
literal|6
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

