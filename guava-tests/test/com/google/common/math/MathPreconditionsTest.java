begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link MathPreconditions}.  *  * @author Ben Yu  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MathPreconditionsTest
specifier|public
class|class
name|MathPreconditionsTest
extends|extends
name|TestCase
block|{
DECL|method|testCheckPositive_zeroInt ()
specifier|public
name|void
name|testCheckPositive_zeroInt
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_maxInt ()
specifier|public
name|void
name|testCheckPositive_maxInt
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositive_minInt ()
specifier|public
name|void
name|testCheckPositive_minInt
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_positiveInt ()
specifier|public
name|void
name|testCheckPositive_positiveInt
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositive_negativeInt ()
specifier|public
name|void
name|testCheckPositive_negativeInt
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"int"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_zeroLong ()
specifier|public
name|void
name|testCheckPositive_zeroLong
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"long"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_maxLong ()
specifier|public
name|void
name|testCheckPositive_maxLong
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositive_minLong ()
specifier|public
name|void
name|testCheckPositive_minLong
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_positiveLong ()
specifier|public
name|void
name|testCheckPositive_positiveLong
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositive_negativeLong ()
specifier|public
name|void
name|testCheckPositive_negativeLong
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"long"
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_zeroBigInteger ()
specifier|public
name|void
name|testCheckPositive_zeroBigInteger
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"BigInteger"
argument_list|,
name|BigInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckPositive_postiveBigInteger ()
specifier|public
name|void
name|testCheckPositive_postiveBigInteger
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"BigInteger"
argument_list|,
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckPositive_negativeBigInteger ()
specifier|public
name|void
name|testCheckPositive_negativeBigInteger
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkPositive
argument_list|(
literal|"BigInteger"
argument_list|,
name|BigInteger
operator|.
name|ZERO
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_zeroInt ()
specifier|public
name|void
name|testCheckNonNegative_zeroInt
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_maxInt ()
specifier|public
name|void
name|testCheckNonNegative_maxInt
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_minInt ()
specifier|public
name|void
name|testCheckNonNegative_minInt
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_positiveInt ()
specifier|public
name|void
name|testCheckNonNegative_positiveInt
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_negativeInt ()
specifier|public
name|void
name|testCheckNonNegative_negativeInt
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_zeroLong ()
specifier|public
name|void
name|testCheckNonNegative_zeroLong
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"long"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_maxLong ()
specifier|public
name|void
name|testCheckNonNegative_maxLong
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_minLong ()
specifier|public
name|void
name|testCheckNonNegative_minLong
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_positiveLong ()
specifier|public
name|void
name|testCheckNonNegative_positiveLong
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"long"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_negativeLong ()
specifier|public
name|void
name|testCheckNonNegative_negativeLong
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_zeroBigInteger ()
specifier|public
name|void
name|testCheckNonNegative_zeroBigInteger
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"BigInteger"
argument_list|,
name|BigInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_positiveBigInteger ()
specifier|public
name|void
name|testCheckNonNegative_positiveBigInteger
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"BigInteger"
argument_list|,
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_negativeBigInteger ()
specifier|public
name|void
name|testCheckNonNegative_negativeBigInteger
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"int"
argument_list|,
name|BigInteger
operator|.
name|ONE
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_zeroFloat ()
specifier|public
name|void
name|testCheckNonNegative_zeroFloat
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"float"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_maxFloat ()
specifier|public
name|void
name|testCheckNonNegative_maxFloat
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_minFloat ()
specifier|public
name|void
name|testCheckNonNegative_minFloat
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_positiveFloat ()
specifier|public
name|void
name|testCheckNonNegative_positiveFloat
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"float"
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_negativeFloat ()
specifier|public
name|void
name|testCheckNonNegative_negativeFloat
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"float"
argument_list|,
operator|-
literal|1f
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_nanFloat ()
specifier|public
name|void
name|testCheckNonNegative_nanFloat
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_zeroDouble ()
specifier|public
name|void
name|testCheckNonNegative_zeroDouble
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"double"
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_maxDouble ()
specifier|public
name|void
name|testCheckNonNegative_maxDouble
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_minDouble ()
specifier|public
name|void
name|testCheckNonNegative_minDouble
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_positiveDouble ()
specifier|public
name|void
name|testCheckNonNegative_positiveDouble
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"double"
argument_list|,
literal|1d
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNonNegative_negativeDouble ()
specifier|public
name|void
name|testCheckNonNegative_negativeDouble
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"double"
argument_list|,
operator|-
literal|1d
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckNonNegative_nanDouble ()
specifier|public
name|void
name|testCheckNonNegative_nanDouble
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNonNegative
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckRoundingUnnnecessary_success ()
specifier|public
name|void
name|testCheckRoundingUnnnecessary_success
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkRoundingUnnecessary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckRoundingUnnecessary_failure ()
specifier|public
name|void
name|testCheckRoundingUnnecessary_failure
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkRoundingUnnecessary
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCheckInRange_success ()
specifier|public
name|void
name|testCheckInRange_success
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkInRangeForRoundingInputs
argument_list|(
literal|true
argument_list|,
literal|1.0
argument_list|,
name|RoundingMode
operator|.
name|UP
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckInRange_failure ()
specifier|public
name|void
name|testCheckInRange_failure
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkInRangeForRoundingInputs
argument_list|(
literal|false
argument_list|,
literal|1.0
argument_list|,
name|RoundingMode
operator|.
name|UP
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"UP"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckNoOverflow_success ()
specifier|public
name|void
name|testCheckNoOverflow_success
parameter_list|()
block|{
name|MathPreconditions
operator|.
name|checkNoOverflow
argument_list|(
literal|true
argument_list|,
literal|"testCheckNoOverflow_success"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckNoOverflow_failure ()
specifier|public
name|void
name|testCheckNoOverflow_failure
parameter_list|()
block|{
try|try
block|{
name|MathPreconditions
operator|.
name|checkNoOverflow
argument_list|(
literal|false
argument_list|,
literal|"testCheckNoOverflow_failure"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"testCheckNoOverflow_failure(0, 0)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
comment|/*      * Don't bother testing. All non-primitive parameters are used only to construct error messages.      * We never want to pass null for them, so we haven't annotated them to say that null is      * allowed. But at the same time, it seems wasteful to bother inserting the checkNotNull calls      * that NullPointerTester wants.      *      * (This empty method disables the automatic null testing provided by PackageSanityTests.)      */
block|}
block|}
end_class

end_unit

