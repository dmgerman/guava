begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_DOUBLE_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_SAFE_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|FRACTIONAL_DOUBLE_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|INTEGRAL_DOUBLE_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|DOWN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|FLOOR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_DOWN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_EVEN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|HALF_UP
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UP
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Tests for {@code DoubleMath}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|DoubleMathTest
specifier|public
class|class
name|DoubleMathTest
extends|extends
name|TestCase
block|{
DECL|field|MAX_INT_AS_BIG_DECIMAL
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|MAX_INT_AS_BIG_DECIMAL
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|MIN_INT_AS_BIG_DECIMAL
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|MIN_INT_AS_BIG_DECIMAL
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
DECL|field|MAX_LONG_AS_BIG_DECIMAL
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|MAX_LONG_AS_BIG_DECIMAL
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|MIN_LONG_AS_BIG_DECIMAL
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|MIN_LONG_AS_BIG_DECIMAL
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
DECL|method|testConstantsMaxFactorial ()
specifier|public
name|void
name|testConstantsMaxFactorial
parameter_list|()
block|{
name|BigInteger
name|MAX_DOUBLE_VALUE
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|toBigInteger
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|DoubleMath
operator|.
name|MAX_FACTORIAL
argument_list|)
operator|.
name|compareTo
argument_list|(
name|MAX_DOUBLE_VALUE
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|DoubleMath
operator|.
name|MAX_FACTORIAL
operator|+
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|MAX_DOUBLE_VALUE
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstantsEverySixteenthFactorial ()
specifier|public
name|void
name|testConstantsEverySixteenthFactorial
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
literal|0
init|;
name|n
operator|<=
name|DoubleMath
operator|.
name|MAX_FACTORIAL
condition|;
name|i
operator|++
operator|,
name|n
operator|+=
literal|16
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|EVERY_SIXTEENTH_FACTORIAL
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRoundIntegralDoubleToInt ()
specifier|public
name|void
name|testRoundIntegralDoubleToInt
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isInBounds
init|=
name|expected
operator|.
name|compareTo
argument_list|(
name|MAX_INT_AS_BIG_DECIMAL
argument_list|)
operator|<=
literal|0
operator|&
name|expected
operator|.
name|compareTo
argument_list|(
name|MIN_INT_AS_BIG_DECIMAL
argument_list|)
operator|>=
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|intValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRoundFractionalDoubleToInt ()
specifier|public
name|void
name|testRoundFractionalDoubleToInt
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isInBounds
init|=
name|expected
operator|.
name|compareTo
argument_list|(
name|MAX_INT_AS_BIG_DECIMAL
argument_list|)
operator|<=
literal|0
operator|&
name|expected
operator|.
name|compareTo
argument_list|(
name|MIN_INT_AS_BIG_DECIMAL
argument_list|)
operator|>=
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|intValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRoundExactIntegralDoubleToInt ()
specifier|public
name|void
name|testRoundExactIntegralDoubleToInt
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|UNNECESSARY
argument_list|)
decl_stmt|;
name|boolean
name|isInBounds
init|=
name|expected
operator|.
name|compareTo
argument_list|(
name|MAX_INT_AS_BIG_DECIMAL
argument_list|)
operator|<=
literal|0
operator|&
name|expected
operator|.
name|compareTo
argument_list|(
name|MIN_INT_AS_BIG_DECIMAL
argument_list|)
operator|>=
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|intValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|d
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRoundExactFractionalDoubleToIntFails ()
specifier|public
name|void
name|testRoundExactFractionalDoubleToIntFails
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|d
argument_list|,
name|UNNECESSARY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundNaNToIntAlwaysFails ()
specifier|public
name|void
name|testRoundNaNToIntAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundInfiniteToIntAlwaysFails ()
specifier|public
name|void
name|testRoundInfiniteToIntAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|DoubleMath
operator|.
name|roundToInt
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundIntegralDoubleToLong ()
specifier|public
name|void
name|testRoundIntegralDoubleToLong
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isInBounds
init|=
name|expected
operator|.
name|compareTo
argument_list|(
name|MAX_LONG_AS_BIG_DECIMAL
argument_list|)
operator|<=
literal|0
operator|&
name|expected
operator|.
name|compareTo
argument_list|(
name|MIN_LONG_AS_BIG_DECIMAL
argument_list|)
operator|>=
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|longValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRoundFractionalDoubleToLong ()
specifier|public
name|void
name|testRoundFractionalDoubleToLong
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isInBounds
init|=
name|expected
operator|.
name|compareTo
argument_list|(
name|MAX_LONG_AS_BIG_DECIMAL
argument_list|)
operator|<=
literal|0
operator|&
name|expected
operator|.
name|compareTo
argument_list|(
name|MIN_LONG_AS_BIG_DECIMAL
argument_list|)
operator|>=
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|longValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRoundExactIntegralDoubleToLong ()
specifier|public
name|void
name|testRoundExactIntegralDoubleToLong
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
comment|// every mode except UNNECESSARY
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|UNNECESSARY
argument_list|)
decl_stmt|;
name|boolean
name|isInBounds
init|=
name|expected
operator|.
name|compareTo
argument_list|(
name|MAX_LONG_AS_BIG_DECIMAL
argument_list|)
operator|<=
literal|0
operator|&
name|expected
operator|.
name|compareTo
argument_list|(
name|MIN_LONG_AS_BIG_DECIMAL
argument_list|)
operator|>=
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|longValue
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|d
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isInBounds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRoundExactFractionalDoubleToLongFails ()
specifier|public
name|void
name|testRoundExactFractionalDoubleToLongFails
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|d
argument_list|,
name|UNNECESSARY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundNaNToLongAlwaysFails ()
specifier|public
name|void
name|testRoundNaNToLongAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundInfiniteToLongAlwaysFails ()
specifier|public
name|void
name|testRoundInfiniteToLongAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|DoubleMath
operator|.
name|roundToLong
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundIntegralDoubleToBigInteger ()
specifier|public
name|void
name|testRoundIntegralDoubleToBigInteger
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|toBigInteger
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRoundFractionalDoubleToBigInteger ()
specifier|public
name|void
name|testRoundFractionalDoubleToBigInteger
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|toBigInteger
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRoundExactIntegralDoubleToBigInteger ()
specifier|public
name|void
name|testRoundExactIntegralDoubleToBigInteger
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
name|BigDecimal
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|UNNECESSARY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|toBigInteger
argument_list|()
argument_list|,
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|d
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRoundExactFractionalDoubleToBigIntegerFails ()
specifier|public
name|void
name|testRoundExactFractionalDoubleToBigIntegerFails
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|d
argument_list|,
name|UNNECESSARY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundNaNToBigIntegerAlwaysFails ()
specifier|public
name|void
name|testRoundNaNToBigIntegerAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundInfiniteToBigIntegerAlwaysFails ()
specifier|public
name|void
name|testRoundInfiniteToBigIntegerAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|DoubleMath
operator|.
name|roundToBigInteger
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testRoundLog2Floor ()
specifier|public
name|void
name|testRoundLog2Floor
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|int
name|log2
init|=
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|,
name|FLOOR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
argument_list|)
operator|<=
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
operator|+
literal|1
argument_list|)
operator|>
name|d
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRoundLog2Ceiling ()
specifier|public
name|void
name|testRoundLog2Ceiling
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|int
name|log2
init|=
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|,
name|CEILING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
argument_list|)
operator|>=
name|d
argument_list|)
expr_stmt|;
name|double
name|z
init|=
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|z
operator|<
name|d
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRoundLog2Down ()
specifier|public
name|void
name|testRoundLog2Down
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|int
name|log2
init|=
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|,
name|DOWN
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>=
literal|1.0
condition|)
block|{
name|assertTrue
argument_list|(
name|log2
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
argument_list|)
operator|<=
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
operator|+
literal|1
argument_list|)
operator|>
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|log2
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
argument_list|)
operator|>=
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
operator|-
literal|1
argument_list|)
operator|<
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRoundLog2Up ()
specifier|public
name|void
name|testRoundLog2Up
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|int
name|log2
init|=
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|,
name|UP
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>=
literal|1.0
condition|)
block|{
name|assertTrue
argument_list|(
name|log2
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
argument_list|)
operator|>=
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
operator|-
literal|1
argument_list|)
operator|<
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|log2
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
argument_list|)
operator|<=
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|log2
operator|+
literal|1
argument_list|)
operator|>
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRoundLog2Half ()
specifier|public
name|void
name|testRoundLog2Half
parameter_list|()
block|{
comment|// We don't expect perfect rounding accuracy.
for|for
control|(
name|int
name|exp
range|:
name|asList
argument_list|(
operator|-
literal|1022
argument_list|,
operator|-
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|100
argument_list|,
literal|1022
argument_list|,
literal|1023
argument_list|)
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|asList
argument_list|(
name|HALF_EVEN
argument_list|,
name|HALF_UP
argument_list|,
name|HALF_DOWN
argument_list|)
control|)
block|{
name|double
name|x
init|=
name|Math
operator|.
name|scalb
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|2
argument_list|)
operator|+
literal|0.001
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|Math
operator|.
name|scalb
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|2
argument_list|)
operator|-
literal|0.001
argument_list|,
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|<
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|exp
operator|+
literal|1
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
name|y
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|exp
operator|+
literal|1
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
name|y
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRoundLog2ThrowsOnZerosInfinitiesAndNaN ()
specifier|public
name|void
name|testRoundLog2ThrowsOnZerosInfinitiesAndNaN
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
for|for
control|(
name|double
name|d
range|:
name|asList
argument_list|(
literal|0.0
argument_list|,
operator|-
literal|0.0
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|testRoundLog2ThrowsOnNegative ()
specifier|public
name|void
name|testRoundLog2ThrowsOnNegative
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|log2
argument_list|(
operator|-
name|d
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|testIsPowerOfTwoYes ()
specifier|public
name|void
name|testIsPowerOfTwoYes
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1074
init|;
name|i
operator|<=
literal|1023
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|DoubleMath
operator|.
name|isPowerOfTwo
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIsPowerOfTwo ()
specifier|public
name|void
name|testIsPowerOfTwo
parameter_list|()
block|{
for|for
control|(
name|double
name|x
range|:
name|ALL_DOUBLE_CANDIDATES
control|)
block|{
name|boolean
name|expected
init|=
name|x
operator|>
literal|0
operator|&&
operator|!
name|Double
operator|.
name|isInfinite
argument_list|(
name|x
argument_list|)
operator|&&
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|x
argument_list|)
operator|&&
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|FLOOR
argument_list|)
argument_list|)
operator|==
name|x
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|DoubleMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog2Accuracy ()
specifier|public
name|void
name|testLog2Accuracy
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|double
name|dmLog2
init|=
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|double
name|trueLog2
init|=
name|trueLog2
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|dmLog2
operator|-
name|trueLog2
argument_list|)
operator|<=
name|Math
operator|.
name|ulp
argument_list|(
name|trueLog2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog2SemiMonotonic ()
specifier|public
name|void
name|testLog2SemiMonotonic
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|assertTrue
argument_list|(
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
operator|+
literal|0.01
argument_list|)
operator|>=
name|DoubleMath
operator|.
name|log2
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog2Negative ()
specifier|public
name|void
name|testLog2Negative
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|POSITIVE_FINITE_DOUBLE_CANDIDATES
control|)
block|{
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|DoubleMath
operator|.
name|log2
argument_list|(
operator|-
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog2Zero ()
specifier|public
name|void
name|testLog2Zero
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLog2NaNInfinity ()
specifier|public
name|void
name|testLog2NaNInfinity
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|DoubleMath
operator|.
name|log2
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|DoubleMath
operator|.
name|log2
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|DoubleMath
operator|.
name|log2
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|trueLog2 (double d)
specifier|private
specifier|strictfp
name|double
name|trueLog2
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|double
name|trueLog2
init|=
name|StrictMath
operator|.
name|log
argument_list|(
name|d
argument_list|)
operator|/
name|StrictMath
operator|.
name|log
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// increment until it's>= the true value
while|while
condition|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|trueLog2
argument_list|)
operator|<
name|d
condition|)
block|{
name|trueLog2
operator|=
name|StrictMath
operator|.
name|nextUp
argument_list|(
name|trueLog2
argument_list|)
expr_stmt|;
block|}
comment|// decrement until it's<= the true value
while|while
condition|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|trueLog2
argument_list|)
operator|>
name|d
condition|)
block|{
name|trueLog2
operator|=
name|StrictMath
operator|.
name|nextAfter
argument_list|(
name|trueLog2
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StrictMath
operator|.
name|abs
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|trueLog2
argument_list|)
operator|-
name|d
argument_list|)
operator|>
name|StrictMath
operator|.
name|abs
argument_list|(
name|StrictMath
operator|.
name|pow
argument_list|(
literal|2.0
argument_list|,
name|StrictMath
operator|.
name|nextUp
argument_list|(
name|trueLog2
argument_list|)
argument_list|)
operator|-
name|d
argument_list|)
condition|)
block|{
name|trueLog2
operator|=
name|StrictMath
operator|.
name|nextUp
argument_list|(
name|trueLog2
argument_list|)
expr_stmt|;
block|}
return|return
name|trueLog2
return|;
block|}
DECL|method|testIsMathematicalIntegerIntegral ()
specifier|public
name|void
name|testIsMathematicalIntegerIntegral
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|INTEGRAL_DOUBLE_CANDIDATES
control|)
block|{
name|assertTrue
argument_list|(
name|DoubleMath
operator|.
name|isMathematicalInteger
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIsMathematicalIntegerFractional ()
specifier|public
name|void
name|testIsMathematicalIntegerFractional
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|FRACTIONAL_DOUBLE_CANDIDATES
control|)
block|{
name|assertFalse
argument_list|(
name|DoubleMath
operator|.
name|isMathematicalInteger
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIsMathematicalIntegerNotFinite ()
specifier|public
name|void
name|testIsMathematicalIntegerNotFinite
parameter_list|()
block|{
for|for
control|(
name|double
name|d
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
control|)
block|{
name|assertFalse
argument_list|(
name|DoubleMath
operator|.
name|isMathematicalInteger
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFactorial ()
specifier|public
name|void
name|testFactorial
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|DoubleMath
operator|.
name|MAX_FACTORIAL
condition|;
name|i
operator|++
control|)
block|{
name|double
name|actual
init|=
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|i
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|result
init|=
name|DoubleMath
operator|.
name|factorial
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|actual
argument_list|,
name|result
argument_list|,
name|Math
operator|.
name|ulp
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFactorialTooHigh ()
specifier|public
name|void
name|testFactorialTooHigh
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|DoubleMath
operator|.
name|factorial
argument_list|(
name|DoubleMath
operator|.
name|MAX_FACTORIAL
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|DoubleMath
operator|.
name|factorial
argument_list|(
name|DoubleMath
operator|.
name|MAX_FACTORIAL
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFactorialNegative ()
specifier|public
name|void
name|testFactorialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|DoubleMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|RoundingMode
operator|.
name|class
argument_list|,
name|FLOOR
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|double
operator|.
name|class
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|DoubleMath
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

