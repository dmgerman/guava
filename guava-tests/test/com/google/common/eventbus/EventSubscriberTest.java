begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * Test case for {@link EventSubscriber}.  *  * @author Cliff Biffle  */
end_comment

begin_class
DECL|class|EventSubscriberTest
specifier|public
class|class
name|EventSubscriberTest
extends|extends
name|TestCase
block|{
DECL|field|FIXTURE_ARGUMENT
specifier|private
specifier|static
specifier|final
name|Object
name|FIXTURE_ARGUMENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|methodCalled
specifier|private
name|boolean
name|methodCalled
decl_stmt|;
DECL|field|methodArgument
specifier|private
name|Object
name|methodArgument
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|methodCalled
operator|=
literal|false
expr_stmt|;
name|methodArgument
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Checks that a no-frills, no-issues method call is properly executed.    *    * @throws Exception  if the aforementioned proper execution is not to be had.    */
DECL|method|testBasicMethodCall ()
specifier|public
name|void
name|testBasicMethodCall
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|getRecordingMethod
argument_list|()
decl_stmt|;
name|EventSubscriber
name|subscriber
init|=
operator|new
name|EventSubscriber
argument_list|(
name|this
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|subscriber
operator|.
name|handleEvent
argument_list|(
name|FIXTURE_ARGUMENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Subscriber must call provided method."
argument_list|,
name|methodCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Subscriber argument must be *exactly* the provided object."
argument_list|,
name|methodArgument
operator|==
name|FIXTURE_ARGUMENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionWrapping ()
specifier|public
name|void
name|testExceptionWrapping
parameter_list|()
block|{
name|Method
name|method
init|=
name|getExceptionThrowingMethod
argument_list|()
decl_stmt|;
name|EventSubscriber
name|subscriber
init|=
operator|new
name|EventSubscriber
argument_list|(
name|this
argument_list|,
name|method
argument_list|)
decl_stmt|;
try|try
block|{
name|subscriber
operator|.
name|handleEvent
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Subscribers whose methods throw must throw InvocationTargetException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected exception must be wrapped."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IntentionalException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testErrorPassthrough ()
specifier|public
name|void
name|testErrorPassthrough
parameter_list|()
throws|throws
name|InvocationTargetException
block|{
name|Method
name|method
init|=
name|getErrorThrowingMethod
argument_list|()
decl_stmt|;
name|EventSubscriber
name|subscriber
init|=
operator|new
name|EventSubscriber
argument_list|(
name|this
argument_list|,
name|method
argument_list|)
decl_stmt|;
try|try
block|{
name|subscriber
operator|.
name|handleEvent
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Subscribers whose methods throw Errors must rethrow them"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JudgmentError
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|charAt
init|=
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"charAt"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|concat
init|=
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"concat"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|EventSubscriber
argument_list|(
literal|"foo"
argument_list|,
name|charAt
argument_list|)
argument_list|,
operator|new
name|EventSubscriber
argument_list|(
literal|"foo"
argument_list|,
name|charAt
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|EventSubscriber
argument_list|(
literal|"bar"
argument_list|,
name|charAt
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|EventSubscriber
argument_list|(
literal|"foo"
argument_list|,
name|concat
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets a reference to {@link #recordingMethod(Object)}.    *    * @return a Method wrapping {@link #recordingMethod(Object)}.    * @throws IllegalStateException if executed in a context where reflection is    *         unavailable.    * @throws AssertionError if something odd has happened to    *         {@link #recordingMethod(Object)}.    */
DECL|method|getRecordingMethod ()
specifier|private
name|Method
name|getRecordingMethod
parameter_list|()
block|{
name|Method
name|method
decl_stmt|;
try|try
block|{
name|method
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"recordingMethod"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This test needs access to reflection."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Someone changed EventSubscriberTest#recordingMethod's visibility, "
operator|+
literal|"signature, or removed it entirely.  (Must be public.)"
argument_list|)
throw|;
block|}
return|return
name|method
return|;
block|}
comment|/**    * Gets a reference to {@link #exceptionThrowingMethod(Object)}.    *    * @return a Method wrapping {@link #exceptionThrowingMethod(Object)}.    * @throws IllegalStateException if executed in a context where reflection is    *         unavailable.    * @throws AssertionError if something odd has happened to    *         {@link #exceptionThrowingMethod(Object)}.    */
DECL|method|getExceptionThrowingMethod ()
specifier|private
name|Method
name|getExceptionThrowingMethod
parameter_list|()
block|{
name|Method
name|method
decl_stmt|;
try|try
block|{
name|method
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"exceptionThrowingMethod"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This test needs access to reflection."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Someone changed EventSubscriberTest#exceptionThrowingMethod's "
operator|+
literal|"visibility, signature, or removed it entirely.  (Must be public.)"
argument_list|)
throw|;
block|}
return|return
name|method
return|;
block|}
comment|/**    * Gets a reference to {@link #errorThrowingMethod(Object)}.    *    * @return a Method wrapping {@link #errorThrowingMethod(Object)}.    * @throws IllegalStateException if executed in a context where reflection is    *         unavailable.    * @throws AssertionError if something odd has happened to    *         {@link #errorThrowingMethod(Object)}.    */
DECL|method|getErrorThrowingMethod ()
specifier|private
name|Method
name|getErrorThrowingMethod
parameter_list|()
block|{
name|Method
name|method
decl_stmt|;
try|try
block|{
name|method
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"errorThrowingMethod"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This test needs access to reflection."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Someone changed EventSubscriberTest#errorThrowingMethod's "
operator|+
literal|"visibility, signature, or removed it entirely.  (Must be public.)"
argument_list|)
throw|;
block|}
return|return
name|method
return|;
block|}
comment|/**    * Records the provided object in {@link #methodArgument} and sets    * {@link #methodCalled}.  This method is called reflectively by EventSubscriber    * during tests, and must remain public.    *    * @param arg  argument to record.    */
DECL|method|recordingMethod (Object arg)
specifier|public
name|void
name|recordingMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|methodCalled
argument_list|)
expr_stmt|;
name|methodCalled
operator|=
literal|true
expr_stmt|;
name|methodArgument
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|exceptionThrowingMethod (Object arg)
specifier|public
name|void
name|exceptionThrowingMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IntentionalException
argument_list|()
throw|;
block|}
comment|/** Local exception subclass to check variety of exception thrown. */
DECL|class|IntentionalException
class|class
name|IntentionalException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2500191180248181379L
decl_stmt|;
block|}
DECL|method|errorThrowingMethod (Object arg)
specifier|public
name|void
name|errorThrowingMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
throw|throw
operator|new
name|JudgmentError
argument_list|()
throw|;
block|}
comment|/** Local Error subclass to check variety of error thrown. */
DECL|class|JudgmentError
class|class
name|JudgmentError
extends|extends
name|Error
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|634248373797713373L
decl_stmt|;
block|}
block|}
end_class

end_unit

