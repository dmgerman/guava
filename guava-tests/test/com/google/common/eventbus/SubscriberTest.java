begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Subscriber}.  *  * @author Cliff Biffle  * @author Colin Decker  */
end_comment

begin_class
DECL|class|SubscriberTest
specifier|public
class|class
name|SubscriberTest
extends|extends
name|TestCase
block|{
DECL|field|FIXTURE_ARGUMENT
specifier|private
specifier|static
specifier|final
name|Object
name|FIXTURE_ARGUMENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|bus
specifier|private
name|EventBus
name|bus
decl_stmt|;
DECL|field|methodCalled
specifier|private
name|boolean
name|methodCalled
decl_stmt|;
DECL|field|methodArgument
specifier|private
name|Object
name|methodArgument
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|=
operator|new
name|EventBus
argument_list|()
expr_stmt|;
name|methodCalled
operator|=
literal|false
expr_stmt|;
name|methodArgument
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
block|{
name|Subscriber
name|s1
init|=
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
name|this
argument_list|,
name|getTestSubscriberMethod
argument_list|(
literal|"recordingMethod"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s1
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|Subscriber
operator|.
name|SynchronizedSubscriber
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// a thread-safe method should not create a synchronized subscriber
name|Subscriber
name|s2
init|=
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
name|this
argument_list|,
name|getTestSubscriberMethod
argument_list|(
literal|"threadSafeMethod"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s2
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|Subscriber
operator|.
name|SynchronizedSubscriber
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvokeSubscriberMethod_basicMethodCall ()
specifier|public
name|void
name|testInvokeSubscriberMethod_basicMethodCall
parameter_list|()
throws|throws
name|Throwable
block|{
name|Method
name|method
init|=
name|getTestSubscriberMethod
argument_list|(
literal|"recordingMethod"
argument_list|)
decl_stmt|;
name|Subscriber
name|subscriber
init|=
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
name|this
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|subscriber
operator|.
name|invokeSubscriberMethod
argument_list|(
name|FIXTURE_ARGUMENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Subscriber must call provided method"
argument_list|,
name|methodCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Subscriber argument must be exactly the provided object."
argument_list|,
name|methodArgument
operator|==
name|FIXTURE_ARGUMENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvokeSubscriberMethod_exceptionWrapping ()
specifier|public
name|void
name|testInvokeSubscriberMethod_exceptionWrapping
parameter_list|()
throws|throws
name|Throwable
block|{
name|Method
name|method
init|=
name|getTestSubscriberMethod
argument_list|(
literal|"exceptionThrowingMethod"
argument_list|)
decl_stmt|;
name|Subscriber
name|subscriber
init|=
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
name|this
argument_list|,
name|method
argument_list|)
decl_stmt|;
try|try
block|{
name|subscriber
operator|.
name|invokeSubscriberMethod
argument_list|(
name|FIXTURE_ARGUMENT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Subscribers whose methods throw must throw InvocationTargetException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|IntentionalException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvokeSubscriberMethod_errorPassthrough ()
specifier|public
name|void
name|testInvokeSubscriberMethod_errorPassthrough
parameter_list|()
throws|throws
name|Throwable
block|{
name|Method
name|method
init|=
name|getTestSubscriberMethod
argument_list|(
literal|"errorThrowingMethod"
argument_list|)
decl_stmt|;
name|Subscriber
name|subscriber
init|=
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
name|this
argument_list|,
name|method
argument_list|)
decl_stmt|;
try|try
block|{
name|subscriber
operator|.
name|invokeSubscriberMethod
argument_list|(
name|FIXTURE_ARGUMENT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Subscribers whose methods throw Errors must rethrow them"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JudgmentError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|charAt
init|=
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"charAt"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|concat
init|=
name|String
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"concat"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
literal|"foo"
argument_list|,
name|charAt
argument_list|)
argument_list|,
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
literal|"foo"
argument_list|,
name|charAt
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
literal|"bar"
argument_list|,
name|charAt
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Subscriber
operator|.
name|create
argument_list|(
name|bus
argument_list|,
literal|"foo"
argument_list|,
name|concat
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|getTestSubscriberMethod (String name)
specifier|private
name|Method
name|getTestSubscriberMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/**    * Records the provided object in {@link #methodArgument} and sets {@link #methodCalled}.  This    * method is called reflectively by Subscriber during tests, and must remain public.    *    * @param arg argument to record.    */
annotation|@
name|Subscribe
DECL|method|recordingMethod (Object arg)
specifier|public
name|void
name|recordingMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|methodCalled
argument_list|)
expr_stmt|;
name|methodCalled
operator|=
literal|true
expr_stmt|;
name|methodArgument
operator|=
name|arg
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|exceptionThrowingMethod (Object arg)
specifier|public
name|void
name|exceptionThrowingMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IntentionalException
argument_list|()
throw|;
block|}
comment|/**    * Local exception subclass to check variety of exception thrown.    */
DECL|class|IntentionalException
class|class
name|IntentionalException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2500191180248181379L
decl_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|errorThrowingMethod (Object arg)
specifier|public
name|void
name|errorThrowingMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
throw|throw
operator|new
name|JudgmentError
argument_list|()
throw|;
block|}
annotation|@
name|Subscribe
annotation|@
name|AllowConcurrentEvents
DECL|method|threadSafeMethod (Object arg)
specifier|public
name|void
name|threadSafeMethod
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{   }
comment|/**    * Local Error subclass to check variety of error thrown.    */
DECL|class|JudgmentError
class|class
name|JudgmentError
extends|extends
name|Error
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|634248373797713373L
decl_stmt|;
block|}
block|}
end_class

end_unit

