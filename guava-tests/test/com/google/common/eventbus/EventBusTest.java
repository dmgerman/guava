begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.eventbus
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test case for {@link EventBus}.  *  * @author Cliff Biffle  */
end_comment

begin_class
DECL|class|EventBusTest
specifier|public
class|class
name|EventBusTest
extends|extends
name|TestCase
block|{
DECL|field|EVENT
specifier|private
specifier|static
specifier|final
name|String
name|EVENT
init|=
literal|"Hello"
decl_stmt|;
DECL|field|BUS_IDENTIFIER
specifier|private
specifier|static
specifier|final
name|String
name|BUS_IDENTIFIER
init|=
literal|"test-bus"
decl_stmt|;
DECL|field|bus
specifier|private
name|EventBus
name|bus
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|bus
operator|=
operator|new
name|EventBus
argument_list|(
name|BUS_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicCatcherDistribution ()
specifier|public
name|void
name|testBasicCatcherDistribution
parameter_list|()
block|{
name|StringCatcher
name|catcher
init|=
operator|new
name|StringCatcher
argument_list|()
decl_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|catcher
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|EventHandler
argument_list|>
name|wrappers
init|=
name|bus
operator|.
name|getHandlersForEventType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have at least one method registered."
argument_list|,
name|wrappers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One method should be registered."
argument_list|,
literal|1
argument_list|,
name|wrappers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|events
init|=
name|catcher
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one event should be delivered."
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Correct string should be delivered."
argument_list|,
name|EVENT
argument_list|,
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that events are distributed to any subscribers to their type or any    * supertype, including interfaces and superclasses.    *    * Also checks delivery ordering in such cases.    */
DECL|method|testPolymorphicDistribution ()
specifier|public
name|void
name|testPolymorphicDistribution
parameter_list|()
block|{
comment|// Three catchers for related types String, Object, and Comparable<?>.
comment|// String isa Object
comment|// String isa Comparable<?>
comment|// Comparable<?> isa Object
name|StringCatcher
name|stringCatcher
init|=
operator|new
name|StringCatcher
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|objectEvents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Object
name|objCatcher
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Subscribe
specifier|public
name|void
name|eat
parameter_list|(
name|Object
name|food
parameter_list|)
block|{
name|objectEvents
operator|.
name|add
argument_list|(
name|food
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|compEvents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Object
name|compCatcher
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Subscribe
specifier|public
name|void
name|eat
parameter_list|(
name|Comparable
argument_list|<
name|?
argument_list|>
name|food
parameter_list|)
block|{
name|compEvents
operator|.
name|add
argument_list|(
name|food
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|stringCatcher
argument_list|)
expr_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|objCatcher
argument_list|)
expr_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|compCatcher
argument_list|)
expr_stmt|;
comment|// Two additional event types: Object and Comparable<?> (played by Integer)
specifier|final
name|Object
name|OBJ_EVENT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|COMP_EVENT
init|=
operator|new
name|Integer
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|OBJ_EVENT
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|COMP_EVENT
argument_list|)
expr_stmt|;
comment|// Check the StringCatcher...
name|List
argument_list|<
name|String
argument_list|>
name|stringEvents
init|=
name|stringCatcher
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one String should be delivered."
argument_list|,
literal|1
argument_list|,
name|stringEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Correct string should be delivered."
argument_list|,
name|EVENT
argument_list|,
name|stringEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the Catcher<Object>...
name|assertEquals
argument_list|(
literal|"Three Objects should be delivered."
argument_list|,
literal|3
argument_list|,
name|objectEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"String fixture must be first object delivered."
argument_list|,
name|EVENT
argument_list|,
name|objectEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Object fixture must be second object delivered."
argument_list|,
name|OBJ_EVENT
argument_list|,
name|objectEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Comparable fixture must be thirdobject delivered."
argument_list|,
name|COMP_EVENT
argument_list|,
name|objectEvents
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the Catcher<Comparable<?>>...
name|assertEquals
argument_list|(
literal|"Two Comparable<?>s should be delivered."
argument_list|,
literal|2
argument_list|,
name|compEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"String fixture must be first comparable delivered."
argument_list|,
name|EVENT
argument_list|,
name|compEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Comparable fixture must be second comparable delivered."
argument_list|,
name|COMP_EVENT
argument_list|,
name|compEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeadEventForwarding ()
specifier|public
name|void
name|testDeadEventForwarding
parameter_list|()
block|{
name|GhostCatcher
name|catcher
init|=
operator|new
name|GhostCatcher
argument_list|()
decl_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|catcher
argument_list|)
expr_stmt|;
comment|// A String -- an event for which noone has registered.
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DeadEvent
argument_list|>
name|events
init|=
name|catcher
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"One dead event should be delivered."
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The dead event should wrap the original event."
argument_list|,
name|EVENT
argument_list|,
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeadEventPosting ()
specifier|public
name|void
name|testDeadEventPosting
parameter_list|()
block|{
name|GhostCatcher
name|catcher
init|=
operator|new
name|GhostCatcher
argument_list|()
decl_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|catcher
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
operator|new
name|DeadEvent
argument_list|(
name|this
argument_list|,
name|EVENT
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DeadEvent
argument_list|>
name|events
init|=
name|catcher
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The explicit DeadEvent should be delivered."
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The dead event must not be re-wrapped."
argument_list|,
name|EVENT
argument_list|,
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlattenHierarchy ()
specifier|public
name|void
name|testFlattenHierarchy
parameter_list|()
block|{
name|HierarchyFixture
name|fixture
init|=
operator|new
name|HierarchyFixture
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|hierarchy
init|=
name|bus
operator|.
name|flattenHierarchy
argument_list|(
name|fixture
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|hierarchy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|HierarchyFixtureInterface
operator|.
name|class
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|HierarchyFixtureSubinterface
operator|.
name|class
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|HierarchyFixtureParent
operator|.
name|class
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|HierarchyFixture
operator|.
name|class
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingSubscribe ()
specifier|public
name|void
name|testMissingSubscribe
parameter_list|()
block|{
name|bus
operator|.
name|register
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnregister ()
specifier|public
name|void
name|testUnregister
parameter_list|()
block|{
name|StringCatcher
name|catcher1
init|=
operator|new
name|StringCatcher
argument_list|()
decl_stmt|;
name|StringCatcher
name|catcher2
init|=
operator|new
name|StringCatcher
argument_list|()
decl_stmt|;
try|try
block|{
name|bus
operator|.
name|unregister
argument_list|(
name|catcher1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Attempting to unregister an unregistered object succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// OK.
block|}
name|bus
operator|.
name|register
argument_list|(
name|catcher1
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|bus
operator|.
name|register
argument_list|(
name|catcher2
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedEvents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|expectedEvents
operator|.
name|add
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|expectedEvents
operator|.
name|add
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Two correct events should be delivered."
argument_list|,
name|expectedEvents
argument_list|,
name|catcher1
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One correct event should be delivered."
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|EVENT
argument_list|)
argument_list|,
name|catcher2
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|unregister
argument_list|(
name|catcher1
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shouldn't catch any more events when unregistered."
argument_list|,
name|expectedEvents
argument_list|,
name|catcher1
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Two correct events should be delivered."
argument_list|,
name|expectedEvents
argument_list|,
name|catcher2
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|bus
operator|.
name|unregister
argument_list|(
name|catcher1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Attempting to unregister an unregistered object succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// OK.
block|}
name|bus
operator|.
name|unregister
argument_list|(
name|catcher2
argument_list|)
expr_stmt|;
name|bus
operator|.
name|post
argument_list|(
name|EVENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shouldn't catch any more events when unregistered."
argument_list|,
name|expectedEvents
argument_list|,
name|catcher1
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shouldn't catch any more events when unregistered."
argument_list|,
name|expectedEvents
argument_list|,
name|catcher2
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertContains (T element, Collection<T> collection)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|assertContains
parameter_list|(
name|T
name|element
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Collection must contain "
operator|+
name|element
argument_list|,
name|collection
operator|.
name|contains
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A collector for DeadEvents.    *    * @author cbiffle    *    */
DECL|class|GhostCatcher
specifier|public
specifier|static
class|class
name|GhostCatcher
block|{
DECL|field|events
specifier|private
name|List
argument_list|<
name|DeadEvent
argument_list|>
name|events
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Subscribe
DECL|method|ohNoesIHaveDied (DeadEvent event)
specifier|public
name|void
name|ohNoesIHaveDied
parameter_list|(
name|DeadEvent
name|event
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|getEvents ()
specifier|public
name|List
argument_list|<
name|DeadEvent
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|events
return|;
block|}
block|}
DECL|interface|HierarchyFixtureInterface
specifier|public
interface|interface
name|HierarchyFixtureInterface
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
DECL|interface|HierarchyFixtureSubinterface
specifier|public
interface|interface
name|HierarchyFixtureSubinterface
extends|extends
name|HierarchyFixtureInterface
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
DECL|class|HierarchyFixtureParent
specifier|public
specifier|static
class|class
name|HierarchyFixtureParent
implements|implements
name|HierarchyFixtureSubinterface
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
DECL|class|HierarchyFixture
specifier|public
specifier|static
class|class
name|HierarchyFixture
extends|extends
name|HierarchyFixtureParent
block|{
comment|// Exists only for hierarchy mapping; no members.
block|}
block|}
end_class

end_unit

