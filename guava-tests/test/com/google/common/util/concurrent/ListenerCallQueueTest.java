begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenerCallQueue
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ListenerCallQueue}.  */
end_comment

begin_class
DECL|class|ListenerCallQueueTest
specifier|public
class|class
name|ListenerCallQueueTest
extends|extends
name|TestCase
block|{
DECL|field|THROWING_CALLBACK
specifier|private
specifier|static
specifier|final
name|Callback
argument_list|<
name|Object
argument_list|>
name|THROWING_CALLBACK
init|=
operator|new
name|Callback
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|"throwing()"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
DECL|method|testAddAndExecute ()
specifier|public
name|void
name|testAddAndExecute
parameter_list|()
block|{
name|Object
name|listenerInstance
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
name|queue
init|=
operator|new
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
name|listenerInstance
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndExecute_withExceptions ()
specifier|public
name|void
name|testAddAndExecute_withExceptions
parameter_list|()
block|{
name|Object
name|listenerInstance
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
name|queue
init|=
operator|new
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
name|listenerInstance
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndExecute_multithreaded ()
specifier|public
name|void
name|testAddAndExecute_multithreaded
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
name|queue
init|=
operator|new
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|countDownCallback
argument_list|(
name|latch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|execute
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddAndExecute_multithreaded_withThrowingRunnable ()
specifier|public
name|void
name|testAddAndExecute_multithreaded_withThrowingRunnable
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
name|queue
init|=
operator|new
name|ListenerCallQueue
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|incrementingCallback
argument_list|(
name|counter
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|THROWING_CALLBACK
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|countDownCallback
argument_list|(
name|latch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|execute
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incrementingCallback (final AtomicInteger counter, final int expected)
specifier|private
name|Callback
argument_list|<
name|Object
argument_list|>
name|incrementingCallback
parameter_list|(
specifier|final
name|AtomicInteger
name|counter
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
block|{
return|return
operator|new
name|Callback
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|"incrementing"
argument_list|)
block|{
annotation|@
name|Override
name|void
name|call
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|countDownCallback (final CountDownLatch latch)
specifier|private
name|Callback
argument_list|<
name|Object
argument_list|>
name|countDownCallback
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
block|{
return|return
operator|new
name|Callback
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|"countDown"
argument_list|)
block|{
annotation|@
name|Override
name|void
name|call
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

