begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|TearDown
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|TearDownStack
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|testing
operator|.
name|TestingExecutors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractExecutionThreadService}.  *  * @author Jesse Wilson  */
end_comment

begin_class
DECL|class|AbstractExecutionThreadServiceTest
specifier|public
class|class
name|AbstractExecutionThreadServiceTest
extends|extends
name|TestCase
block|{
DECL|field|tearDownStack
specifier|private
specifier|final
name|TearDownStack
name|tearDownStack
init|=
operator|new
name|TearDownStack
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|enterRun
specifier|private
specifier|final
name|CountDownLatch
name|enterRun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|exitRun
specifier|private
specifier|final
name|CountDownLatch
name|exitRun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|executionThread
specifier|private
name|Thread
name|executionThread
decl_stmt|;
DECL|field|thrownByExecutionThread
specifier|private
name|Throwable
name|thrownByExecutionThread
decl_stmt|;
DECL|field|exceptionCatchingExecutor
specifier|private
specifier|final
name|Executor
name|exceptionCatchingExecutor
init|=
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|executionThread
operator|=
operator|new
name|Thread
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|thrownByExecutionThread
operator|=
name|e
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
specifier|final
name|void
name|tearDown
parameter_list|()
block|{
name|tearDownStack
operator|.
name|runTearDown
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"exceptions should not be propagated to uncaught exception handlers"
argument_list|,
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testServiceStartStop ()
specifier|public
name|void
name|testServiceStartStop
parameter_list|()
throws|throws
name|Exception
block|{
name|WaitOnRunService
name|service
init|=
operator|new
name|WaitOnRunService
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|enterRun
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// to avoid stopping the service until run() is invoked
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|shutDownCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testServiceStopIdempotence ()
specifier|public
name|void
name|testServiceStopIdempotence
parameter_list|()
throws|throws
name|Exception
block|{
name|WaitOnRunService
name|service
init|=
operator|new
name|WaitOnRunService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|enterRun
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// to avoid stopping the service until run() is invoked
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testServiceExitingOnItsOwn ()
specifier|public
name|void
name|testServiceExitingOnItsOwn
parameter_list|()
throws|throws
name|Exception
block|{
name|WaitOnRunService
name|service
init|=
operator|new
name|WaitOnRunService
argument_list|()
decl_stmt|;
name|service
operator|.
name|expectedShutdownState
operator|=
name|Service
operator|.
name|State
operator|.
name|RUNNING
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|exitRun
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// the service will exit voluntarily
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|shutDownCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
comment|// no-op
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|shutDownCalled
argument_list|)
expr_stmt|;
block|}
DECL|class|WaitOnRunService
specifier|private
class|class
name|WaitOnRunService
extends|extends
name|AbstractExecutionThreadService
block|{
DECL|field|startUpCalled
specifier|private
name|boolean
name|startUpCalled
init|=
literal|false
decl_stmt|;
DECL|field|runCalled
specifier|private
name|boolean
name|runCalled
init|=
literal|false
decl_stmt|;
DECL|field|shutDownCalled
specifier|private
name|boolean
name|shutDownCalled
init|=
literal|false
decl_stmt|;
DECL|field|expectedShutdownState
specifier|private
name|State
name|expectedShutdownState
init|=
name|State
operator|.
name|STOPPING
decl_stmt|;
annotation|@
name|Override
DECL|method|startUp ()
specifier|protected
name|void
name|startUp
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|runCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|startUpCalled
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|runCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|runCalled
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|enterRun
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|exitRun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|shutDown ()
specifier|protected
name|void
name|shutDown
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|shutDownCalled
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedShutdownState
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|triggerShutdown ()
specifier|protected
name|void
name|triggerShutdown
parameter_list|()
block|{
name|exitRun
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|exceptionCatchingExecutor
return|;
block|}
block|}
DECL|method|testServiceThrowOnStartUp ()
specifier|public
name|void
name|testServiceThrowOnStartUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrowOnStartUpService
name|service
init|=
operator|new
name|ThrowOnStartUpService
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"kaboom!"
argument_list|)
expr_stmt|;
block|}
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"kaboom!"
argument_list|)
expr_stmt|;
block|}
DECL|class|ThrowOnStartUpService
specifier|private
class|class
name|ThrowOnStartUpService
extends|extends
name|AbstractExecutionThreadService
block|{
DECL|field|startUpCalled
specifier|private
name|boolean
name|startUpCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|startUp ()
specifier|protected
name|void
name|startUp
parameter_list|()
block|{
name|startUpCalled
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"kaboom!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"run() should not be called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|exceptionCatchingExecutor
return|;
block|}
block|}
DECL|method|testServiceThrowOnRun ()
specifier|public
name|void
name|testServiceThrowOnRun
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrowOnRunService
name|service
init|=
operator|new
name|ThrowOnRunService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"kaboom!"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|service
operator|.
name|shutDownCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testServiceThrowOnRunAndThenAgainOnShutDown ()
specifier|public
name|void
name|testServiceThrowOnRunAndThenAgainOnShutDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrowOnRunService
name|service
init|=
operator|new
name|ThrowOnRunService
argument_list|()
decl_stmt|;
name|service
operator|.
name|throwOnShutDown
operator|=
literal|true
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"kaboom!"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|service
operator|.
name|shutDownCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ThrowOnRunService
specifier|private
class|class
name|ThrowOnRunService
extends|extends
name|AbstractExecutionThreadService
block|{
DECL|field|shutDownCalled
specifier|private
name|boolean
name|shutDownCalled
init|=
literal|false
decl_stmt|;
DECL|field|throwOnShutDown
specifier|private
name|boolean
name|throwOnShutDown
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"kaboom!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|shutDown ()
specifier|protected
name|void
name|shutDown
parameter_list|()
block|{
name|shutDownCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|throwOnShutDown
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"double kaboom!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|exceptionCatchingExecutor
return|;
block|}
block|}
DECL|method|testServiceThrowOnShutDown ()
specifier|public
name|void
name|testServiceThrowOnShutDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrowOnShutDown
name|service
init|=
operator|new
name|ThrowOnShutDown
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|enterRun
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"kaboom!"
argument_list|)
expr_stmt|;
block|}
DECL|class|ThrowOnShutDown
specifier|private
class|class
name|ThrowOnShutDown
extends|extends
name|AbstractExecutionThreadService
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|enterRun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|shutDown ()
specifier|protected
name|void
name|shutDown
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"kaboom!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|exceptionCatchingExecutor
return|;
block|}
block|}
DECL|method|testServiceTimeoutOnStartUp ()
specifier|public
name|void
name|testServiceTimeoutOnStartUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeoutOnStartUp
name|service
init|=
operator|new
name|TimeoutOnStartUp
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STARTING
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TimeoutOnStartUp
specifier|private
class|class
name|TimeoutOnStartUp
extends|extends
name|AbstractExecutionThreadService
block|{
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{}
block|}
DECL|method|testStopWhileStarting_runNotCalled ()
specifier|public
name|void
name|testStopWhileStarting_runNotCalled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|started
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FakeService
name|service
init|=
operator|new
name|FakeService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|startUp
argument_list|()
expr_stmt|;
name|started
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|startupCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|runCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|shutdownCalled
argument_list|)
expr_stmt|;
block|}
DECL|method|testStop_noStart ()
specifier|public
name|void
name|testStop_noStart
parameter_list|()
block|{
name|FakeService
name|service
init|=
operator|new
name|FakeService
argument_list|()
decl_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|startupCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|runCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|shutdownCalled
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultService ()
specifier|public
name|void
name|testDefaultService
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|WaitOnRunService
name|service
init|=
operator|new
name|WaitOnRunService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|enterRun
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
block|}
DECL|method|testTimeout ()
specifier|public
name|void
name|testTimeout
parameter_list|()
block|{
comment|// Create a service whose executor will never run its commands
name|Service
name|service
init|=
operator|new
name|AbstractExecutionThreadService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{}
annotation|@
name|Override
specifier|protected
name|ScheduledExecutorService
name|executor
parameter_list|()
block|{
return|return
name|TestingExecutors
operator|.
name|noOpScheduledExecutor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|serviceName
parameter_list|()
block|{
return|return
literal|"Foo"
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Timed out waiting for Foo [STARTING] to reach the RUNNING state."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeService
specifier|private
class|class
name|FakeService
extends|extends
name|AbstractExecutionThreadService
implements|implements
name|TearDown
block|{
DECL|field|executor
specifier|private
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
DECL|method|FakeService ()
name|FakeService
parameter_list|()
block|{
name|tearDownStack
operator|.
name|addTearDown
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|field|startupCalled
specifier|volatile
name|int
name|startupCalled
init|=
literal|0
decl_stmt|;
DECL|field|shutdownCalled
specifier|volatile
name|int
name|shutdownCalled
init|=
literal|0
decl_stmt|;
DECL|field|runCalled
specifier|volatile
name|int
name|runCalled
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|startUp ()
specifier|protected
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|startupCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shutdownCalled
argument_list|)
expr_stmt|;
name|startupCalled
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|startupCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shutdownCalled
argument_list|)
expr_stmt|;
name|runCalled
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutDown ()
specifier|protected
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|startupCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shutdownCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STOPPING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|shutdownCalled
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

