begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2020 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForwardingListenableFuture
operator|.
name|SimpleForwardingListenableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Tests for default methods of the interface. */
end_comment

begin_class
DECL|class|ListeningScheduledExecutorServiceTest
specifier|public
class|class
name|ListeningScheduledExecutorServiceTest
extends|extends
name|TestCase
block|{
DECL|field|recordedCommand
specifier|private
name|Runnable
name|recordedCommand
decl_stmt|;
DECL|field|recordedDelay
specifier|private
name|long
name|recordedDelay
decl_stmt|;
DECL|field|recordedInterval
specifier|private
name|long
name|recordedInterval
decl_stmt|;
DECL|field|recordedTimeUnit
specifier|private
name|TimeUnit
name|recordedTimeUnit
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ListeningScheduledExecutorService
name|executorService
init|=
operator|new
name|FakeExecutorService
argument_list|()
decl_stmt|;
DECL|method|testScheduleRunnable ()
specifier|public
name|void
name|testScheduleRunnable
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|command
init|=
parameter_list|()
lambda|->
block|{}
decl_stmt|;
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executorService
operator|.
name|schedule
argument_list|(
name|command
argument_list|,
name|Duration
operator|.
name|ofSeconds
argument_list|(
literal|12
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"schedule"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedCommand
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedTimeUnit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Duration
operator|.
name|ofNanos
argument_list|(
name|recordedDelay
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Duration
operator|.
name|ofSeconds
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScheduleCallable ()
specifier|public
name|void
name|testScheduleCallable
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|String
argument_list|>
name|callable
init|=
parameter_list|()
lambda|->
literal|"hello"
decl_stmt|;
name|ListenableScheduledFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|executorService
operator|.
name|schedule
argument_list|(
name|callable
argument_list|,
name|Duration
operator|.
name|ofMinutes
argument_list|(
literal|12
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedTimeUnit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Duration
operator|.
name|ofNanos
argument_list|(
name|recordedDelay
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Duration
operator|.
name|ofMinutes
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScheduleAtFixedRate ()
specifier|public
name|void
name|testScheduleAtFixedRate
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|command
init|=
parameter_list|()
lambda|->
block|{}
decl_stmt|;
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executorService
operator|.
name|scheduleAtFixedRate
argument_list|(
name|command
argument_list|,
name|Duration
operator|.
name|ofDays
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Duration
operator|.
name|ofHours
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"scheduleAtFixedRate"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedCommand
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedTimeUnit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Duration
operator|.
name|ofNanos
argument_list|(
name|recordedDelay
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Duration
operator|.
name|ofDays
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Duration
operator|.
name|ofNanos
argument_list|(
name|recordedInterval
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Duration
operator|.
name|ofHours
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScheduleWithFixedDelay ()
specifier|public
name|void
name|testScheduleWithFixedDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|command
init|=
parameter_list|()
lambda|->
block|{}
decl_stmt|;
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|command
argument_list|,
name|Duration
operator|.
name|ofDays
argument_list|(
literal|8
argument_list|)
argument_list|,
name|Duration
operator|.
name|ofHours
argument_list|(
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"scheduleWithFixedDelay"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedCommand
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recordedTimeUnit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Duration
operator|.
name|ofNanos
argument_list|(
name|recordedDelay
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Duration
operator|.
name|ofDays
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Duration
operator|.
name|ofNanos
argument_list|(
name|recordedInterval
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Duration
operator|.
name|ofHours
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeExecutorService
specifier|private
class|class
name|FakeExecutorService
extends|extends
name|AbstractListeningExecutorService
implements|implements
name|ListeningScheduledExecutorService
block|{
annotation|@
name|Override
DECL|method|schedule (Runnable command, long delay, TimeUnit unit)
specifier|public
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|recordedCommand
operator|=
name|command
expr_stmt|;
name|recordedDelay
operator|=
name|delay
expr_stmt|;
name|recordedTimeUnit
operator|=
name|unit
expr_stmt|;
return|return
name|ImmediateScheduledFuture
operator|.
name|of
argument_list|(
literal|"schedule"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|schedule ( Callable<V> callable, long delay, TimeUnit unit)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|ListenableScheduledFuture
argument_list|<
name|V
argument_list|>
name|schedule
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|recordedDelay
operator|=
name|delay
expr_stmt|;
name|recordedTimeUnit
operator|=
name|unit
expr_stmt|;
try|try
block|{
return|return
name|ImmediateScheduledFuture
operator|.
name|of
argument_list|(
name|callable
operator|.
name|call
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|ImmediateScheduledFuture
operator|.
name|failed
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|scheduleAtFixedRate ( Runnable command, long initialDelay, long period, TimeUnit unit)
specifier|public
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleAtFixedRate
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|recordedCommand
operator|=
name|command
expr_stmt|;
name|recordedDelay
operator|=
name|initialDelay
expr_stmt|;
name|recordedInterval
operator|=
name|period
expr_stmt|;
name|recordedTimeUnit
operator|=
name|unit
expr_stmt|;
return|return
name|ImmediateScheduledFuture
operator|.
name|of
argument_list|(
literal|"scheduleAtFixedRate"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|scheduleWithFixedDelay ( Runnable command, long initialDelay, long delay, TimeUnit unit)
specifier|public
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|recordedCommand
operator|=
name|command
expr_stmt|;
name|recordedDelay
operator|=
name|initialDelay
expr_stmt|;
name|recordedInterval
operator|=
name|delay
expr_stmt|;
name|recordedTimeUnit
operator|=
name|unit
expr_stmt|;
return|return
name|ImmediateScheduledFuture
operator|.
name|of
argument_list|(
literal|"scheduleWithFixedDelay"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute (Runnable runnable)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|ImmediateScheduledFuture
specifier|private
specifier|static
class|class
name|ImmediateScheduledFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|SimpleForwardingListenableFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|ListenableScheduledFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|of (V value)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableScheduledFuture
argument_list|<
name|V
argument_list|>
name|of
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|ImmediateScheduledFuture
argument_list|<>
argument_list|(
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|failed (Throwable t)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableScheduledFuture
argument_list|<
name|V
argument_list|>
name|failed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|ImmediateScheduledFuture
argument_list|<>
argument_list|(
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ImmediateScheduledFuture (ListenableFuture<V> delegate)
name|ImmediateScheduledFuture
parameter_list|(
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Delayed other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|other
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

