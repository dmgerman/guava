begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Tests for {@link AbstractListeningExecutorService}.  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|AbstractListeningExecutorServiceTest
specifier|public
class|class
name|AbstractListeningExecutorServiceTest
extends|extends
name|TestCase
block|{
DECL|method|testSubmit ()
specifier|public
name|void
name|testSubmit
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Mostly just tests that TrustedListenableFutureTask are created and run; tests for      * TrustedListenableFutureTask should ensure that listeners are called correctly.      */
name|TestListeningExecutorService
name|e
init|=
operator|new
name|TestListeningExecutorService
argument_list|()
decl_stmt|;
name|TestRunnable
name|runnable
init|=
operator|new
name|TestRunnable
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|runnableFuture
init|=
name|e
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|runnableFuture
operator|instanceof
name|TrustedListenableFutureTask
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runnableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runnable
operator|.
name|run
argument_list|)
expr_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|callableFuture
init|=
name|e
operator|.
name|submit
argument_list|(
operator|new
name|TestCallable
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|callableFuture
operator|instanceof
name|TrustedListenableFutureTask
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|callableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|callableFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|TestRunnable
name|runnable2
init|=
operator|new
name|TestRunnable
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
name|runnableFuture2
init|=
name|e
operator|.
name|submit
argument_list|(
name|runnable2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|runnableFuture2
operator|instanceof
name|TrustedListenableFutureTask
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runnableFuture2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runnable2
operator|.
name|run
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|3
argument_list|,
name|runnableFuture2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestRunnable
specifier|private
specifier|static
class|class
name|TestRunnable
implements|implements
name|Runnable
block|{
DECL|field|run
name|boolean
name|run
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|run
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|TestCallable
specifier|private
specifier|static
class|class
name|TestCallable
implements|implements
name|Callable
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|String
name|call
parameter_list|()
block|{
return|return
literal|"foo"
return|;
block|}
block|}
comment|/**    * Simple same thread listening executor service that doesn't handle shutdown.    */
DECL|class|TestListeningExecutorService
specifier|private
specifier|static
class|class
name|TestListeningExecutorService
extends|extends
name|AbstractListeningExecutorService
block|{
annotation|@
name|Override
DECL|method|execute (Runnable runnable)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|runnable
operator|instanceof
name|TrustedListenableFutureTask
argument_list|)
expr_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

