begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is a modified version of  * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck/AbstractExecutorServiceTest.java?revision=1.30  * which contained the following notice:  *  * Written by Doug Lea with assistance from members of JCP JSR-166  * Expert Group and released to the public domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  * Other contributors include Andrew Wright, Jeffrey Hayes,  * Pat Fisher, Mike Judd.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|AbstractListeningExecutorServiceTest
specifier|public
class|class
name|AbstractListeningExecutorServiceTest
extends|extends
name|JSR166TestCase
block|{
comment|/**      * A no-frills implementation of AbstractExecutorService, designed      * to test the submit methods only.      */
DECL|class|DirectExecutorService
specifier|static
class|class
name|DirectExecutorService
extends|extends
name|AbstractListeningExecutorService
block|{
DECL|method|execute (Runnable r)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|shutdown
return|;
block|}
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
name|isShutdown
argument_list|()
return|;
block|}
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|isShutdown
argument_list|()
return|;
block|}
DECL|field|shutdown
specifier|private
specifier|volatile
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
block|}
comment|/**      * execute(runnable) runs it to completion      */
DECL|method|testExecuteRunnable ()
specifier|public
name|void
name|testExecuteRunnable
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|TrackedShortRunnable
name|task
init|=
operator|new
name|TrackedShortRunnable
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|task
operator|.
name|done
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|task
operator|.
name|done
argument_list|)
expr_stmt|;
block|}
comment|/**      * Completed submit(callable) returns result      */
DECL|method|testSubmitCallable ()
specifier|public
name|void
name|testSubmitCallable
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Completed submit(runnable) returns successfully      */
DECL|method|testSubmitRunnable ()
specifier|public
name|void
name|testSubmitRunnable
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
operator|new
name|NoOpRunnable
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Completed submit(runnable, result) returns result      */
DECL|method|testSubmitRunnable2 ()
specifier|public
name|void
name|testSubmitRunnable2
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
operator|new
name|NoOpRunnable
argument_list|()
argument_list|,
name|TEST_STRING
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * A submitted privileged action runs to completion      */
DECL|method|testSubmitPrivilegedAction ()
specifier|public
name|void
name|testSubmitPrivilegedAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|r
init|=
operator|new
name|CheckedRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|realRun
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|Future
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|TEST_STRING
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runWithPermissions
argument_list|(
name|r
argument_list|,
operator|new
name|RuntimePermission
argument_list|(
literal|"getClassLoader"
argument_list|)
argument_list|,
operator|new
name|RuntimePermission
argument_list|(
literal|"setContextClassLoader"
argument_list|)
argument_list|,
operator|new
name|RuntimePermission
argument_list|(
literal|"modifyThread"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * A submitted privileged exception action runs to completion      */
DECL|method|testSubmitPrivilegedExceptionAction ()
specifier|public
name|void
name|testSubmitPrivilegedExceptionAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|r
init|=
operator|new
name|CheckedRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|realRun
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|Future
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|TEST_STRING
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runWithPermissions
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**      * A submitted failed privileged exception action reports exception      */
DECL|method|testSubmitFailedPrivilegedExceptionAction ()
specifier|public
name|void
name|testSubmitFailedPrivilegedExceptionAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|r
init|=
operator|new
name|CheckedRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|realRun
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|Future
name|future
init|=
name|e
operator|.
name|submit
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|success
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IndexOutOfBoundsException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|runWithPermissions
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**      * execute(null runnable) throws NPE      */
DECL|method|testExecuteNullRunnable ()
specifier|public
name|void
name|testExecuteNullRunnable
parameter_list|()
block|{
try|try
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|e
operator|.
name|submit
argument_list|(
operator|(
name|Runnable
operator|)
literal|null
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{}
block|}
comment|/**      * submit(null callable) throws NPE      */
DECL|method|testSubmitNullCallable ()
specifier|public
name|void
name|testSubmitNullCallable
parameter_list|()
block|{
try|try
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|e
operator|.
name|submit
argument_list|(
operator|(
name|Callable
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{}
block|}
comment|/**      * submit(callable).get() throws InterruptedException if interrupted      */
DECL|method|testInterruptedSubmit ()
specifier|public
name|void
name|testInterruptedSubmit
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|submitted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|quittingTime
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|p
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Void
argument_list|>
name|awaiter
init|=
operator|new
name|CheckedCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|realCall
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|quittingTime
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|CheckedInterruptedRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|realRun
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|p
operator|.
name|submit
argument_list|(
name|awaiter
argument_list|)
decl_stmt|;
name|submitted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|submitted
operator|.
name|await
argument_list|()
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|quittingTime
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|joinPool
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * get of submit(callable) throws ExecutionException if callable      * throws exception      */
DECL|method|testSubmitEE ()
specifier|public
name|void
name|testSubmitEE
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ThreadPoolExecutor
name|p
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"/ by zero"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|p
operator|.
name|submit
argument_list|(
name|c
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|success
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ArithmeticException
argument_list|)
expr_stmt|;
block|}
name|joinPool
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**      * invokeAny(null) throws NPE      */
DECL|method|testInvokeAny1 ()
specifier|public
name|void
name|testInvokeAny1
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAny(empty collection) throws IAE      */
DECL|method|testInvokeAny2 ()
specifier|public
name|void
name|testInvokeAny2
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAny(c) throws NPE if c has null elements      */
DECL|method|testInvokeAny3 ()
specifier|public
name|void
name|testInvokeAny3
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|()
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"/ by zero"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAny(c) throws ExecutionException if no task in c completes      */
DECL|method|testInvokeAny4 ()
specifier|public
name|void
name|testInvokeAny4
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|NPETask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|success
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAny(c) returns result of some task in c if at least one completes      */
DECL|method|testInvokeAny5 ()
specifier|public
name|void
name|testInvokeAny5
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAll(null) throws NPE      */
DECL|method|testInvokeAll1 ()
specifier|public
name|void
name|testInvokeAll1
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAll(empty collection) returns empty collection      */
DECL|method|testInvokeAll2 ()
specifier|public
name|void
name|testInvokeAll2
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|r
init|=
name|e
operator|.
name|invokeAll
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAll(c) throws NPE if c has null elements      */
DECL|method|testInvokeAll3 ()
specifier|public
name|void
name|testInvokeAll3
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * get of returned element of invokeAll(c) throws exception on failed task      */
DECL|method|testInvokeAll4 ()
specifier|public
name|void
name|testInvokeAll4
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|NPETask
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|futures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|success
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * invokeAll(c) returns results of all completed tasks in c      */
DECL|method|testInvokeAll5 ()
specifier|public
name|void
name|testInvokeAll5
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|String
argument_list|>
name|future
range|:
name|futures
control|)
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAny(null) throws NPE      */
DECL|method|testTimedInvokeAny1 ()
specifier|public
name|void
name|testTimedInvokeAny1
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
literal|null
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAny(null time unit) throws NPE      */
DECL|method|testTimedInvokeAnyNullTimeUnit ()
specifier|public
name|void
name|testTimedInvokeAnyNullTimeUnit
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAny(empty collection) throws IAE      */
DECL|method|testTimedInvokeAny2 ()
specifier|public
name|void
name|testTimedInvokeAny2
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAny(c) throws NPE if c has null elements      */
DECL|method|testTimedInvokeAny3 ()
specifier|public
name|void
name|testTimedInvokeAny3
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|()
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"/ by zero"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAny(c) throws ExecutionException if no task completes      */
DECL|method|testTimedInvokeAny4 ()
specifier|public
name|void
name|testTimedInvokeAny4
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|NPETask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|success
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAny(c) returns result of some task in c      */
DECL|method|testTimedInvokeAny5 ()
specifier|public
name|void
name|testTimedInvokeAny5
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|e
operator|.
name|invokeAny
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAll(null) throws NPE      */
DECL|method|testTimedInvokeAll1 ()
specifier|public
name|void
name|testTimedInvokeAll1
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAll
argument_list|(
literal|null
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAll(null time unit) throws NPE      */
DECL|method|testTimedInvokeAllNullTimeUnit ()
specifier|public
name|void
name|testTimedInvokeAllNullTimeUnit
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAll(empty collection) returns empty collection      */
DECL|method|testTimedInvokeAll2 ()
specifier|public
name|void
name|testTimedInvokeAll2
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|r
init|=
name|e
operator|.
name|invokeAll
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAll(c) throws NPE if c has null elements      */
DECL|method|testTimedInvokeAll3 ()
specifier|public
name|void
name|testTimedInvokeAll3
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{         }
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * get of returned element of invokeAll(c) throws exception on failed task      */
DECL|method|testTimedInvokeAll4 ()
specifier|public
name|void
name|testTimedInvokeAll4
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|NPETask
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|futures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|shouldThrow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|success
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|success
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAll(c) returns results of all completed tasks in c      */
DECL|method|testTimedInvokeAll5 ()
specifier|public
name|void
name|testTimedInvokeAll5
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|,
name|MEDIUM_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|String
argument_list|>
name|future
range|:
name|futures
control|)
name|assertSame
argument_list|(
name|TEST_STRING
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * timed invokeAll cancels tasks not completed by timeout      */
DECL|method|testTimedInvokeAll6 ()
specifier|public
name|void
name|testTimedInvokeAll6
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|e
init|=
operator|new
name|DirectExecutorService
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|possiblyInterruptedRunnable
argument_list|(
literal|2
operator|*
name|SHORT_DELAY_MS
argument_list|)
argument_list|,
name|TEST_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|StringTask
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|e
operator|.
name|invokeAll
argument_list|(
name|l
argument_list|,
name|SHORT_DELAY_MS
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|it
init|=
name|futures
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|f1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|f2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|f3
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|f1
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|f2
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f3
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f3
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|joinPool
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

