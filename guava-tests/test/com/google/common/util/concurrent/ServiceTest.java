begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
operator|.
name|FAILED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
operator|.
name|NEW
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
operator|.
name|RUNNING
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
operator|.
name|STARTING
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
operator|.
name|STOPPING
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
operator|.
name|TERMINATED
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Service}  */
end_comment

begin_class
DECL|class|ServiceTest
specifier|public
class|class
name|ServiceTest
extends|extends
name|TestCase
block|{
comment|/** Assert on the comparison ordering of the State enum since we guarantee it. */
DECL|method|testStateOrdering ()
specifier|public
name|void
name|testStateOrdering
parameter_list|()
block|{
comment|// List every valid (direct) state transition.
name|assertLessThan
argument_list|(
name|NEW
argument_list|,
name|STARTING
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|NEW
argument_list|,
name|TERMINATED
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|STARTING
argument_list|,
name|RUNNING
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|STARTING
argument_list|,
name|STOPPING
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|STARTING
argument_list|,
name|FAILED
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|RUNNING
argument_list|,
name|STOPPING
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|RUNNING
argument_list|,
name|FAILED
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|STOPPING
argument_list|,
name|FAILED
argument_list|)
expr_stmt|;
name|assertLessThan
argument_list|(
name|STOPPING
argument_list|,
name|TERMINATED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLessThan (T a, T b)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|assertLessThan
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected %s to be less than %s"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

