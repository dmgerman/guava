begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|getUnchecked
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|CHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|ERROR_FUTURE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_CHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_ERROR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_OTHER_THROWABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|FAILED_FUTURE_UNCHECKED_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|OTHER_THROWABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|RUNTIME_EXCEPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|RUNTIME_EXCEPTION_FUTURE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesGetCheckedInputs
operator|.
name|UNCHECKED_EXCEPTION
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Futures#getUnchecked(Future)}.  */
end_comment

begin_class
DECL|class|FuturesGetUncheckedTest
specifier|public
class|class
name|FuturesGetUncheckedTest
extends|extends
name|TestCase
block|{
DECL|method|testGetUnchecked_success ()
specifier|public
name|void
name|testGetUnchecked_success
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|getUnchecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetUnchecked_interrupted ()
specifier|public
name|void
name|testGetUnchecked_interrupted
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|getUnchecked
argument_list|(
name|immediateFuture
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGetUnchecked_cancelled ()
specifier|public
name|void
name|testGetUnchecked_cancelled
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|getUnchecked
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetUnchecked_ExecutionExceptionChecked ()
specifier|public
name|void
name|testGetUnchecked_ExecutionExceptionChecked
parameter_list|()
block|{
try|try
block|{
name|getUnchecked
argument_list|(
name|FAILED_FUTURE_CHECKED_EXCEPTION
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|CHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetUnchecked_ExecutionExceptionUnchecked ()
specifier|public
name|void
name|testGetUnchecked_ExecutionExceptionUnchecked
parameter_list|()
block|{
try|try
block|{
name|getUnchecked
argument_list|(
name|FAILED_FUTURE_UNCHECKED_EXCEPTION
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|UNCHECKED_EXCEPTION
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetUnchecked_ExecutionExceptionError ()
specifier|public
name|void
name|testGetUnchecked_ExecutionExceptionError
parameter_list|()
block|{
try|try
block|{
name|getUnchecked
argument_list|(
name|FAILED_FUTURE_ERROR
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionError
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetUnchecked_ExecutionExceptionOtherThrowable ()
specifier|public
name|void
name|testGetUnchecked_ExecutionExceptionOtherThrowable
parameter_list|()
block|{
try|try
block|{
name|getUnchecked
argument_list|(
name|FAILED_FUTURE_OTHER_THROWABLE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|OTHER_THROWABLE
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetUnchecked_RuntimeException ()
specifier|public
name|void
name|testGetUnchecked_RuntimeException
parameter_list|()
block|{
try|try
block|{
name|getUnchecked
argument_list|(
name|RUNTIME_EXCEPTION_FUTURE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RUNTIME_EXCEPTION
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetUnchecked_Error ()
specifier|public
name|void
name|testGetUnchecked_Error
parameter_list|()
block|{
try|try
block|{
name|getUnchecked
argument_list|(
name|ERROR_FUTURE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ERROR
argument_list|,
name|expected
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

