begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractScheduledService
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractScheduledService}.  *  * @author Luke Sandberg  */
end_comment

begin_class
DECL|class|AbstractScheduledServiceTest
specifier|public
class|class
name|AbstractScheduledServiceTest
extends|extends
name|TestCase
block|{
DECL|field|configuration
specifier|volatile
name|Scheduler
name|configuration
init|=
name|Scheduler
operator|.
name|newFixedDelaySchedule
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
DECL|field|future
specifier|volatile
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
DECL|field|atFixedRateCalled
specifier|volatile
name|boolean
name|atFixedRateCalled
init|=
literal|false
decl_stmt|;
DECL|field|withFixedDelayCalled
specifier|volatile
name|boolean
name|withFixedDelayCalled
init|=
literal|false
decl_stmt|;
DECL|field|scheduleCalled
specifier|volatile
name|boolean
name|scheduleCalled
init|=
literal|false
decl_stmt|;
DECL|field|executor
specifier|final
name|ScheduledExecutorService
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|10
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|future
operator|=
name|super
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|command
argument_list|,
name|initialDelay
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|testServiceStartStop ()
specifier|public
name|void
name|testServiceStartStop
parameter_list|()
throws|throws
name|Exception
block|{
name|NullService
name|service
init|=
operator|new
name|NullService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|NullService
specifier|private
class|class
name|NullService
extends|extends
name|AbstractScheduledService
block|{
DECL|method|runOneIteration ()
annotation|@
name|Override
specifier|protected
name|void
name|runOneIteration
parameter_list|()
throws|throws
name|Exception
block|{ }
DECL|method|scheduler ()
annotation|@
name|Override
specifier|protected
name|Scheduler
name|scheduler
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|executor ()
annotation|@
name|Override
specifier|protected
name|ScheduledExecutorService
name|executor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
block|}
DECL|method|testFailOnExceptionFromRun ()
specifier|public
name|void
name|testFailOnExceptionFromRun
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
name|service
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|service
operator|.
name|runException
operator|=
operator|new
name|Exception
argument_list|()
expr_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// An execution exception holds a runtime exception (from throwables.propogate) that holds our
comment|// original exception.
name|assertEquals
argument_list|(
name|service
operator|.
name|runException
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|service
operator|.
name|state
argument_list|()
argument_list|,
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailOnExceptionFromStartUp ()
specifier|public
name|void
name|testFailOnExceptionFromStartUp
parameter_list|()
block|{
name|TestService
name|service
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startUpException
operator|=
operator|new
name|Exception
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|service
operator|.
name|startUpException
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|numberOfTimesRunCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailOnExceptionFromShutDown ()
specifier|public
name|void
name|testFailOnExceptionFromShutDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
name|service
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|service
operator|.
name|shutDownException
operator|=
operator|new
name|Exception
argument_list|()
expr_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|ListenableFuture
argument_list|<
name|Service
operator|.
name|State
argument_list|>
name|stopHandle
init|=
name|service
operator|.
name|stop
argument_list|()
decl_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|stopHandle
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|service
operator|.
name|shutDownException
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRunOneIterationCalledMultipleTimes ()
specifier|public
name|void
name|testRunOneIterationCalledMultipleTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
name|service
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|service
operator|.
name|numberOfTimesRunCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
block|}
DECL|method|testExecutorOnlyCalledOnce ()
specifier|public
name|void
name|testExecutorOnlyCalledOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
name|service
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
comment|// It should be called once during startup.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|numberOfTimesExecutorCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|service
operator|.
name|numberOfTimesRunCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
comment|// Only called once overall.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|numberOfTimesExecutorCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSchedulerOnlyCalledOnce ()
specifier|public
name|void
name|testSchedulerOnlyCalledOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|TestService
name|service
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
comment|// It should be called once during startup.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|numberOfTimesSchedulerCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|service
operator|.
name|numberOfTimesRunCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|service
operator|.
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
comment|// Only called once overall.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|numberOfTimesSchedulerCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestService
specifier|private
class|class
name|TestService
extends|extends
name|AbstractScheduledService
block|{
DECL|field|runFirstBarrier
name|CyclicBarrier
name|runFirstBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|runSecondBarrier
name|CyclicBarrier
name|runSecondBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|startUpCalled
specifier|volatile
name|boolean
name|startUpCalled
init|=
literal|false
decl_stmt|;
DECL|field|shutDownCalled
specifier|volatile
name|boolean
name|shutDownCalled
init|=
literal|false
decl_stmt|;
DECL|field|numberOfTimesRunCalled
name|AtomicInteger
name|numberOfTimesRunCalled
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numberOfTimesExecutorCalled
name|AtomicInteger
name|numberOfTimesExecutorCalled
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numberOfTimesSchedulerCalled
name|AtomicInteger
name|numberOfTimesSchedulerCalled
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|runException
specifier|volatile
name|Exception
name|runException
init|=
literal|null
decl_stmt|;
DECL|field|startUpException
specifier|volatile
name|Exception
name|startUpException
init|=
literal|null
decl_stmt|;
DECL|field|shutDownException
specifier|volatile
name|Exception
name|shutDownException
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|runOneIteration ()
specifier|protected
name|void
name|runOneIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|numberOfTimesRunCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|runFirstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|runSecondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|runException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|runException
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|startUp ()
specifier|protected
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|startUpCalled
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startUpException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|startUpException
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|shutDown ()
specifier|protected
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|shutDownCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|shutDownException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|shutDownException
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|executor ()
specifier|protected
name|ScheduledExecutorService
name|executor
parameter_list|()
block|{
name|numberOfTimesExecutorCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|executor
return|;
block|}
annotation|@
name|Override
DECL|method|scheduler ()
specifier|protected
name|Scheduler
name|scheduler
parameter_list|()
block|{
name|numberOfTimesSchedulerCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|configuration
return|;
block|}
block|}
DECL|class|SchedulerTest
specifier|public
specifier|static
class|class
name|SchedulerTest
extends|extends
name|TestCase
block|{
comment|// These constants are arbitrary and just used to make sure that the correct method is called
comment|// with the correct parameters.
DECL|field|initialDelay
specifier|private
specifier|static
specifier|final
name|int
name|initialDelay
init|=
literal|10
decl_stmt|;
DECL|field|delay
specifier|private
specifier|static
specifier|final
name|int
name|delay
init|=
literal|20
decl_stmt|;
DECL|field|unit
specifier|private
specifier|static
specifier|final
name|TimeUnit
name|unit
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
comment|// Unique runnable object used for comparison.
DECL|field|testRunnable
specifier|final
name|Runnable
name|testRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
decl_stmt|;
DECL|field|called
name|boolean
name|called
init|=
literal|false
decl_stmt|;
DECL|method|assertSingleCallWithCorrectParameters (Runnable command, long initialDelay, long delay, TimeUnit unit)
specifier|private
name|void
name|assertSingleCallWithCorrectParameters
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|called
argument_list|)
expr_stmt|;
comment|// only called once.
name|called
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|SchedulerTest
operator|.
name|initialDelay
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SchedulerTest
operator|.
name|delay
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SchedulerTest
operator|.
name|unit
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testRunnable
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
DECL|method|testFixedRateSchedule ()
specifier|public
name|void
name|testFixedRateSchedule
parameter_list|()
block|{
name|Scheduler
name|schedule
init|=
name|Scheduler
operator|.
name|newFixedRateSchedule
argument_list|(
name|initialDelay
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|schedule
operator|.
name|schedule
argument_list|(
literal|null
argument_list|,
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleAtFixedRate
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|assertSingleCallWithCorrectParameters
argument_list|(
name|command
argument_list|,
name|initialDelay
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|testRunnable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
argument_list|)
expr_stmt|;
block|}
DECL|method|testFixedDelaySchedule ()
specifier|public
name|void
name|testFixedDelaySchedule
parameter_list|()
block|{
name|Scheduler
name|schedule
init|=
name|Scheduler
operator|.
name|newFixedDelaySchedule
argument_list|(
name|initialDelay
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|schedule
operator|.
name|schedule
argument_list|(
literal|null
argument_list|,
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|10
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|assertSingleCallWithCorrectParameters
argument_list|(
name|command
argument_list|,
name|initialDelay
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|testRunnable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called
argument_list|)
expr_stmt|;
block|}
DECL|class|TestCustomScheduler
specifier|private
class|class
name|TestCustomScheduler
extends|extends
name|AbstractScheduledService
operator|.
name|CustomScheduler
block|{
DECL|field|scheduleCounter
specifier|public
name|AtomicInteger
name|scheduleCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getNextSchedule ()
specifier|protected
name|Schedule
name|getNextSchedule
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduleCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|Schedule
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
block|}
DECL|method|testCustomSchedule_startStop ()
specifier|public
name|void
name|testCustomSchedule_startStop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CyclicBarrier
name|firstBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|secondBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|shouldWait
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|shouldWait
operator|.
name|get
argument_list|()
condition|)
block|{
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|TestCustomScheduler
name|scheduler
init|=
operator|new
name|TestCustomScheduler
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|scheduler
operator|.
name|schedule
argument_list|(
literal|null
argument_list|,
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|10
argument_list|)
argument_list|,
name|task
argument_list|)
decl_stmt|;
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|scheduleCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|scheduleCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|shouldWait
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testCustomSchedulerServiceStop ()
specifier|public
name|void
name|testCustomSchedulerServiceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAbstractScheduledCustomService
name|service
init|=
operator|new
name|TestAbstractScheduledCustomService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|service
operator|.
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|numIterations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
comment|// Sleep for a while just to ensure that our task wasn't called again.
name|Thread
operator|.
name|sleep
argument_list|(
name|unit
operator|.
name|toMillis
argument_list|(
literal|3
operator|*
name|delay
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|numIterations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBig ()
specifier|public
name|void
name|testBig
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAbstractScheduledCustomService
name|service
init|=
operator|new
name|TestAbstractScheduledCustomService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Scheduler
name|scheduler
parameter_list|()
block|{
return|return
operator|new
name|AbstractScheduledService
operator|.
name|CustomScheduler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Schedule
name|getNextSchedule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Explicitly yield to increase the probability of a pathological scheduling.
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
return|return
operator|new
name|Schedule
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|service
operator|.
name|useBarriers
operator|=
literal|false
expr_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|service
operator|.
name|useBarriers
operator|=
literal|true
expr_stmt|;
name|service
operator|.
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|numIterations
init|=
name|service
operator|.
name|numIterations
operator|.
name|get
argument_list|()
decl_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numIterations
argument_list|,
name|service
operator|.
name|numIterations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestAbstractScheduledCustomService
specifier|private
specifier|static
class|class
name|TestAbstractScheduledCustomService
extends|extends
name|AbstractScheduledService
block|{
DECL|field|numIterations
specifier|final
name|AtomicInteger
name|numIterations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|useBarriers
specifier|volatile
name|boolean
name|useBarriers
init|=
literal|true
decl_stmt|;
DECL|field|firstBarrier
specifier|final
name|CyclicBarrier
name|firstBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|secondBarrier
specifier|final
name|CyclicBarrier
name|secondBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|method|runOneIteration ()
annotation|@
name|Override
specifier|protected
name|void
name|runOneIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|numIterations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|useBarriers
condition|)
block|{
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|executor ()
annotation|@
name|Override
specifier|protected
name|ScheduledExecutorService
name|executor
parameter_list|()
block|{
comment|// use a bunch of threads so that weird overlapping schedules are more likely to happen.
return|return
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|10
argument_list|)
return|;
block|}
DECL|method|startUp ()
annotation|@
name|Override
specifier|protected
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
block|{ }
DECL|method|shutDown ()
annotation|@
name|Override
specifier|protected
name|void
name|shutDown
parameter_list|()
throws|throws
name|Exception
block|{ }
DECL|method|scheduler ()
annotation|@
name|Override
specifier|protected
name|Scheduler
name|scheduler
parameter_list|()
block|{
return|return
operator|new
name|CustomScheduler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Schedule
name|getNextSchedule
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|Schedule
argument_list|(
name|delay
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|testCustomSchedulerFailure ()
specifier|public
name|void
name|testCustomSchedulerFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|TestFailingCustomScheduledService
name|service
init|=
operator|new
name|TestFailingCustomScheduledService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|service
operator|.
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|service
operator|.
name|numIterations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestFailingCustomScheduledService
specifier|private
specifier|static
class|class
name|TestFailingCustomScheduledService
extends|extends
name|AbstractScheduledService
block|{
DECL|field|numIterations
specifier|final
name|AtomicInteger
name|numIterations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|firstBarrier
specifier|final
name|CyclicBarrier
name|firstBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|secondBarrier
specifier|final
name|CyclicBarrier
name|secondBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|method|runOneIteration ()
annotation|@
name|Override
specifier|protected
name|void
name|runOneIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|numIterations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|firstBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|secondBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|executor ()
annotation|@
name|Override
specifier|protected
name|ScheduledExecutorService
name|executor
parameter_list|()
block|{
comment|// use a bunch of threads so that weird overlapping schedules are more likely to happen.
return|return
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|10
argument_list|)
return|;
block|}
DECL|method|scheduler ()
annotation|@
name|Override
specifier|protected
name|Scheduler
name|scheduler
parameter_list|()
block|{
return|return
operator|new
name|CustomScheduler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Schedule
name|getNextSchedule
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|numIterations
operator|.
name|get
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Schedule
argument_list|(
name|delay
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

