begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|JdkFutureAdapters
operator|.
name|listenInPoolThread
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newCachedThreadPool
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
operator|.
name|ExecutorSpy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link JdkFutureAdapters}.  *  * @author Sven Mawson  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|JdkFutureAdaptersTest
specifier|public
class|class
name|JdkFutureAdaptersTest
extends|extends
name|TestCase
block|{
DECL|field|DATA1
specifier|private
specifier|static
specifier|final
name|String
name|DATA1
init|=
literal|"data"
decl_stmt|;
DECL|method|testListenInPoolThreadReturnsSameFuture ()
specifier|public
name|void
name|testListenInPoolThreadReturnsSameFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|listenableFuture
init|=
name|immediateFuture
argument_list|(
name|DATA1
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|listenableFuture
argument_list|,
name|listenInPoolThread
argument_list|(
name|listenableFuture
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|SingleCallListener
specifier|private
specifier|static
class|class
name|SingleCallListener
implements|implements
name|Runnable
block|{
DECL|field|expectCall
specifier|private
name|boolean
name|expectCall
init|=
literal|false
decl_stmt|;
DECL|field|calledCountDown
specifier|private
specifier|final
name|CountDownLatch
name|calledCountDown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Listener called before it was expected"
argument_list|,
name|expectCall
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Listener called more than once"
argument_list|,
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|calledCountDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|expectCall ()
specifier|public
name|void
name|expectCall
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"expectCall is already true"
argument_list|,
name|expectCall
argument_list|)
expr_stmt|;
name|expectCall
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|wasCalled ()
specifier|public
name|boolean
name|wasCalled
parameter_list|()
block|{
return|return
name|calledCountDown
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|waitForCall ()
specifier|public
name|void
name|waitForCall
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertTrue
argument_list|(
literal|"expectCall is false"
argument_list|,
name|expectCall
argument_list|)
expr_stmt|;
name|calledCountDown
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testListenInPoolThreadIgnoresExecutorWhenDelegateIsDone ()
specifier|public
name|void
name|testListenInPoolThreadIgnoresExecutorWhenDelegateIsDone
parameter_list|()
throws|throws
name|Exception
block|{
name|NonListenableSettableFuture
argument_list|<
name|String
argument_list|>
name|abstractFuture
init|=
name|NonListenableSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|abstractFuture
operator|.
name|set
argument_list|(
name|DATA1
argument_list|)
expr_stmt|;
name|ExecutorSpy
name|spy
init|=
operator|new
name|ExecutorSpy
argument_list|(
name|directExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|listenableFuture
init|=
name|listenInPoolThread
argument_list|(
name|abstractFuture
argument_list|,
name|spy
argument_list|)
decl_stmt|;
name|SingleCallListener
name|singleCallListener
init|=
operator|new
name|SingleCallListener
argument_list|()
decl_stmt|;
name|singleCallListener
operator|.
name|expectCall
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|spy
operator|.
name|wasExecuted
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|singleCallListener
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listenableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// We call AbstractFuture#set above.
comment|// #addListener() will run the listener immediately because the Future is
comment|// already finished (we explicitly set the result of it above).
name|listenableFuture
operator|.
name|addListener
argument_list|(
name|singleCallListener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DATA1
argument_list|,
name|listenableFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// 'spy' should have been ignored since 'abstractFuture' was done before
comment|// a listener was added.
name|assertFalse
argument_list|(
name|spy
operator|.
name|wasExecuted
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleCallListener
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listenableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListenInPoolThreadUsesGivenExecutor ()
specifier|public
name|void
name|testListenInPoolThreadUsesGivenExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executorService
init|=
name|newCachedThreadPool
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|NonListenableSettableFuture
argument_list|<
name|String
argument_list|>
name|abstractFuture
init|=
name|NonListenableSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|ExecutorSpy
name|spy
init|=
operator|new
name|ExecutorSpy
argument_list|(
name|executorService
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|listenableFuture
init|=
name|listenInPoolThread
argument_list|(
name|abstractFuture
argument_list|,
name|spy
argument_list|)
decl_stmt|;
name|SingleCallListener
name|singleCallListener
init|=
operator|new
name|SingleCallListener
argument_list|()
decl_stmt|;
name|singleCallListener
operator|.
name|expectCall
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|spy
operator|.
name|wasExecuted
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|singleCallListener
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listenableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|listenableFuture
operator|.
name|addListener
argument_list|(
name|singleCallListener
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
name|abstractFuture
operator|.
name|set
argument_list|(
name|DATA1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DATA1
argument_list|,
name|listenableFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|singleCallListener
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|spy
operator|.
name|wasExecuted
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleCallListener
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listenableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListenInPoolThreadCustomExecutorInterrupted ()
specifier|public
name|void
name|testListenInPoolThreadCustomExecutorInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|submitSuccessful
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|beforeExecute
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Runnable
name|r
parameter_list|)
block|{
name|submitSuccessful
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|NonListenableSettableFuture
argument_list|<
name|String
argument_list|>
name|abstractFuture
init|=
name|NonListenableSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|listenableFuture
init|=
name|listenInPoolThread
argument_list|(
name|abstractFuture
argument_list|,
name|executorService
argument_list|)
decl_stmt|;
name|SingleCallListener
name|singleCallListener
init|=
operator|new
name|SingleCallListener
argument_list|()
decl_stmt|;
name|singleCallListener
operator|.
name|expectCall
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|singleCallListener
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listenableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|listenableFuture
operator|.
name|addListener
argument_list|(
name|singleCallListener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Don't shut down until the listenInPoolThread task has been accepted to      * run. We want to see what happens when it's interrupted, not when it's      * rejected.      */
name|submitSuccessful
operator|.
name|await
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|abstractFuture
operator|.
name|set
argument_list|(
name|DATA1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DATA1
argument_list|,
name|listenableFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|singleCallListener
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|singleCallListener
operator|.
name|wasCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listenableFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** A Future that doesn't implement ListenableFuture, useful for testing listenInPoolThread. */
DECL|class|NonListenableSettableFuture
specifier|private
specifier|static
specifier|final
class|class
name|NonListenableSettableFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ForwardingFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|create ()
specifier|static
parameter_list|<
name|V
parameter_list|>
name|NonListenableSettableFuture
argument_list|<
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|NonListenableSettableFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
DECL|field|delegate
specifier|final
name|SettableFuture
argument_list|<
name|V
argument_list|>
name|delegate
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|Future
argument_list|<
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
DECL|method|set (V value)
name|void
name|set
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|delegate
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RuntimeExceptionThrowingFuture
specifier|private
specifier|static
specifier|final
class|class
name|RuntimeExceptionThrowingFuture
parameter_list|<
name|V
parameter_list|>
implements|implements
name|Future
argument_list|<
name|V
argument_list|>
block|{
DECL|field|allowGetToComplete
specifier|final
name|CountDownLatch
name|allowGetToComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|/*        * Wait a little to give us time to call addListener before the future's        * value is set in addition to the call we'll make after then.        */
name|allowGetToComplete
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected, should be caught"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
comment|/*        * If isDone is true during the call to listenInPoolThread,        * listenInPoolThread doesn't start a thread. Make sure it's false the        * first time through (and forever after, since no one else cares about        * it).        */
return|return
literal|false
return|;
block|}
block|}
DECL|class|RecordingRunnable
specifier|private
specifier|static
specifier|final
class|class
name|RecordingRunnable
implements|implements
name|Runnable
block|{
DECL|field|wasRun
specifier|final
name|CountDownLatch
name|wasRun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// synchronized so that checkState works as expected.
annotation|@
name|Override
DECL|method|run ()
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
name|checkState
argument_list|(
name|wasRun
operator|.
name|getCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|wasRun
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testListenInPoolThreadRunsListenerAfterRuntimeException ()
specifier|public
name|void
name|testListenInPoolThreadRunsListenerAfterRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeExceptionThrowingFuture
argument_list|<
name|String
argument_list|>
name|input
init|=
operator|new
name|RuntimeExceptionThrowingFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|/*      * The compiler recognizes that "input instanceof ListenableFuture" is      * impossible. We want the test, though, in case that changes in the future,      * so we use isInstance instead.      */
name|assertFalse
argument_list|(
literal|"Can't test the main listenInPoolThread path "
operator|+
literal|"if the input is already a ListenableFuture"
argument_list|,
name|ListenableFuture
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|listenable
init|=
name|listenInPoolThread
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|/*      * This will occur before the waiting get() in the      * listenInPoolThread-spawned thread completes:      */
name|RecordingRunnable
name|earlyListener
init|=
operator|new
name|RecordingRunnable
argument_list|()
decl_stmt|;
name|listenable
operator|.
name|addListener
argument_list|(
name|earlyListener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|allowGetToComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Now give the get() thread time to finish:
name|assertTrue
argument_list|(
name|earlyListener
operator|.
name|wasRun
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now test an additional addListener call, which will be run in-thread:
name|RecordingRunnable
name|lateListener
init|=
operator|new
name|RecordingRunnable
argument_list|()
decl_stmt|;
name|listenable
operator|.
name|addListener
argument_list|(
name|lateListener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lateListener
operator|.
name|wasRun
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdapters_nullChecks ()
specifier|public
name|void
name|testAdapters_nullChecks
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|JdkFutureAdapters
operator|.
name|class
argument_list|)
operator|.
name|thatReturn
argument_list|(
name|Future
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

