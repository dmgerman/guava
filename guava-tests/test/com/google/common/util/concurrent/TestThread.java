begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|TearDown
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_comment
comment|/**  * A helper for concurrency testing. One or more {@code TestThread} instances are instantiated in a  * test with reference to the same "lock-like object", and then their interactions with that object  * are choreographed via the various methods on this class.  *  *<p>A "lock-like object" is really any object that may be used for concurrency control. If the  * {@link #callAndAssertBlocks} method is ever called in a test, the lock-like object must have a  * method equivalent to {@link java.util.concurrent.locks.ReentrantLock#hasQueuedThread(Thread)}. If  * the {@link #callAndAssertWaits} method is ever called in a test, the lock-like object must have a  * method equivalent to {@link  * java.util.concurrent.locks.ReentrantLock#hasWaiters(java.util.concurrent.locks.Condition)},  * except that the method parameter must accept whatever condition-like object is passed into {@code  * callAndAssertWaits} by the test.  *  * @param<L> the type of the lock-like object to be used  * @author Justin T. Sampson  */
end_comment

begin_class
DECL|class|TestThread
specifier|public
specifier|final
class|class
name|TestThread
parameter_list|<
name|L
parameter_list|>
extends|extends
name|Thread
implements|implements
name|TearDown
block|{
DECL|field|DUE_DILIGENCE_MILLIS
specifier|private
specifier|static
specifier|final
name|long
name|DUE_DILIGENCE_MILLIS
init|=
literal|100
decl_stmt|;
DECL|field|TIMEOUT_MILLIS
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT_MILLIS
init|=
literal|5000
decl_stmt|;
DECL|field|lockLikeObject
specifier|private
specifier|final
name|L
name|lockLikeObject
decl_stmt|;
DECL|field|requestQueue
specifier|private
specifier|final
name|SynchronousQueue
argument_list|<
name|Request
argument_list|>
name|requestQueue
init|=
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|responseQueue
specifier|private
specifier|final
name|SynchronousQueue
argument_list|<
name|Response
argument_list|>
name|responseQueue
init|=
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|uncaughtThrowable
specifier|private
name|Throwable
name|uncaughtThrowable
init|=
literal|null
decl_stmt|;
DECL|method|TestThread (L lockLikeObject, String threadName)
specifier|public
name|TestThread
parameter_list|(
name|L
name|lockLikeObject
parameter_list|,
name|String
name|threadName
parameter_list|)
block|{
name|super
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockLikeObject
operator|=
name|checkNotNull
argument_list|(
name|lockLikeObject
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Thread.stop() is okay because all threads started by a test are dying at the end of the test,
comment|// so there is no object state put at risk by stopping the threads abruptly. In some cases a test
comment|// may put a thread into an uninterruptible operation intentionally, so there is no other way to
comment|// clean up these threads.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stop
argument_list|()
expr_stmt|;
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|uncaughtThrowable
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|(
name|AssertionFailedError
operator|)
operator|new
name|AssertionFailedError
argument_list|(
literal|"Uncaught throwable in "
operator|+
name|getName
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|uncaughtThrowable
argument_list|)
throw|;
block|}
block|}
comment|/**    * Causes this thread to call the named void method, and asserts that the call returns normally.    */
DECL|method|callAndAssertReturns (String methodName, Object... arguments)
specifier|public
name|void
name|callAndAssertReturns
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|null
argument_list|,
name|getResponse
argument_list|(
name|methodName
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Causes this thread to call the named method, and asserts that the call returns the expected    * boolean value.    */
DECL|method|callAndAssertReturns (boolean expected, String methodName, Object... arguments)
specifier|public
name|void
name|callAndAssertReturns
parameter_list|(
name|boolean
name|expected
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getResponse
argument_list|(
name|methodName
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Causes this thread to call the named method, and asserts that the call returns the expected int    * value.    */
DECL|method|callAndAssertReturns (int expected, String methodName, Object... arguments)
specifier|public
name|void
name|callAndAssertReturns
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getResponse
argument_list|(
name|methodName
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Causes this thread to call the named method, and asserts that the call throws the expected type    * of throwable.    */
DECL|method|callAndAssertThrows ( Class<? extends Throwable> expected, String methodName, Object... arguments)
specifier|public
name|void
name|callAndAssertThrows
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|expected
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getResponse
argument_list|(
name|methodName
argument_list|)
operator|.
name|getThrowable
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Causes this thread to call the named method, and asserts that this thread becomes blocked on    * the lock-like object. The lock-like object must have a method equivalent to {@link    * java.util.concurrent.locks.ReentrantLock#hasQueuedThread(Thread)}.    */
DECL|method|callAndAssertBlocks (String methodName, Object... arguments)
specifier|public
name|void
name|callAndAssertBlocks
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|invokeMethod
argument_list|(
literal|"hasQueuedThread"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|DUE_DILIGENCE_MILLIS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|invokeMethod
argument_list|(
literal|"hasQueuedThread"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|responseQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Causes this thread to call the named method, and asserts that this thread thereby waits on the    * given condition-like object. The lock-like object must have a method equivalent to {@link    * java.util.concurrent.locks.ReentrantLock#hasWaiters(java.util.concurrent.locks.Condition)},    * except that the method parameter must accept whatever condition-like object is passed into this    * method.    */
DECL|method|callAndAssertWaits (String methodName, Object conditionLikeObject)
specifier|public
name|void
name|callAndAssertWaits
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
name|conditionLikeObject
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|conditionLikeObject
argument_list|)
expr_stmt|;
comment|// TODO: Restore the following line when Monitor.hasWaiters() no longer acquires the lock.
comment|// assertEquals(false, invokeMethod("hasWaiters", conditionLikeObject));
name|sendRequest
argument_list|(
name|methodName
argument_list|,
name|conditionLikeObject
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|DUE_DILIGENCE_MILLIS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|invokeMethod
argument_list|(
literal|"hasWaiters"
argument_list|,
name|conditionLikeObject
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|responseQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that a prior call that had caused this thread to block or wait has since returned    * normally.    */
DECL|method|assertPriorCallReturns (@ullable String methodName)
specifier|public
name|void
name|assertPriorCallReturns
parameter_list|(
annotation|@
name|Nullable
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getResponse
argument_list|(
name|methodName
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that a prior call that had caused this thread to block or wait has since returned the    * expected boolean value.    */
DECL|method|assertPriorCallReturns (boolean expected, @Nullable String methodName)
specifier|public
name|void
name|assertPriorCallReturns
parameter_list|(
name|boolean
name|expected
parameter_list|,
annotation|@
name|Nullable
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getResponse
argument_list|(
name|methodName
argument_list|)
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends the given method call to this thread.    *    * @throws TimeoutException if this thread does not accept the request within a reasonable amount    *     of time    */
DECL|method|sendRequest (String methodName, Object... arguments)
specifier|private
name|void
name|sendRequest
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|requestQueue
operator|.
name|offer
argument_list|(
operator|new
name|Request
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
argument_list|,
name|TIMEOUT_MILLIS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Receives a response from this thread.    *    * @throws TimeoutException if this thread does not offer a response within a reasonable amount of    *     time    * @throws AssertionFailedError if the given method name does not match the name of the method    *     this thread has called most recently    */
DECL|method|getResponse (String methodName)
specifier|private
name|Response
name|getResponse
parameter_list|(
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
block|{
name|Response
name|response
init|=
name|responseQueue
operator|.
name|poll
argument_list|(
name|TIMEOUT_MILLIS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|()
throw|;
block|}
name|assertEquals
argument_list|(
name|methodName
argument_list|,
name|response
operator|.
name|methodName
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|invokeMethod (String methodName, Object... arguments)
specifier|private
name|Object
name|invokeMethod
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
operator|.
name|invoke
argument_list|(
name|lockLikeObject
argument_list|,
name|arguments
argument_list|)
return|;
block|}
DECL|method|getMethod (String methodName, Object... arguments)
specifier|private
name|Method
name|getMethod
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
name|METHODS
label|:
for|for
control|(
name|Method
name|method
range|:
name|lockLikeObject
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
operator|(
name|parameterTypes
operator|.
name|length
operator|==
name|arguments
operator|.
name|length
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|parameterTypes
index|[
name|i
index|]
operator|.
name|isAssignableFrom
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
continue|continue
name|METHODS
continue|;
block|}
block|}
return|return
name|method
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchMethodError
argument_list|(
name|methodName
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertSame
argument_list|(
name|this
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Request
name|request
init|=
name|requestQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|Object
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|invokeMethod
argument_list|(
name|request
operator|.
name|methodName
argument_list|,
name|request
operator|.
name|arguments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ThreadDeath
name|death
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|exception
parameter_list|)
block|{
name|responseQueue
operator|.
name|put
argument_list|(
operator|new
name|Response
argument_list|(
name|request
operator|.
name|methodName
argument_list|,
literal|null
argument_list|,
name|exception
operator|.
name|getTargetException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|responseQueue
operator|.
name|put
argument_list|(
operator|new
name|Response
argument_list|(
name|request
operator|.
name|methodName
argument_list|,
literal|null
argument_list|,
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|responseQueue
operator|.
name|put
argument_list|(
operator|new
name|Response
argument_list|(
name|request
operator|.
name|methodName
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ThreadDeath
name|death
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// SynchronousQueue sometimes throws InterruptedException while the threads are stopping.
block|}
catch|catch
parameter_list|(
name|Throwable
name|uncaught
parameter_list|)
block|{
name|this
operator|.
name|uncaughtThrowable
operator|=
name|uncaught
expr_stmt|;
block|}
block|}
DECL|class|Request
specifier|private
specifier|static
class|class
name|Request
block|{
DECL|field|methodName
specifier|final
name|String
name|methodName
decl_stmt|;
DECL|field|arguments
specifier|final
name|Object
index|[]
name|arguments
decl_stmt|;
DECL|method|Request (String methodName, Object[] arguments)
name|Request
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
index|[]
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|checkNotNull
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|checkNotNull
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Response
specifier|private
specifier|static
class|class
name|Response
block|{
DECL|field|methodName
specifier|final
name|String
name|methodName
decl_stmt|;
DECL|field|result
specifier|final
name|Object
name|result
decl_stmt|;
DECL|field|throwable
specifier|final
name|Throwable
name|throwable
decl_stmt|;
DECL|method|Response (String methodName, Object result, Throwable throwable)
name|Response
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
name|result
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|throwable
operator|=
name|throwable
expr_stmt|;
block|}
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|(
name|AssertionFailedError
operator|)
operator|new
name|AssertionFailedError
argument_list|()
operator|.
name|initCause
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getThrowable ()
name|Throwable
name|getThrowable
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
return|return
name|throwable
return|;
block|}
block|}
block|}
end_class

end_unit

