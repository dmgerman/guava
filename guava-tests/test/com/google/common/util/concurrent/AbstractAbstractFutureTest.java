begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|getDone
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Runnables
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TestPlatform
operator|.
name|getDoneFromTimeoutOverload
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TestPlatform
operator|.
name|verifyGetOnPendingFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TestPlatform
operator|.
name|verifyTimedGetOnPendingFuture
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractFuture
operator|.
name|TrustedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractFutureTest
operator|.
name|TimedWaiterThread
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Base class for tests for emulated {@link AbstractFuture} that allow subclasses to swap in a  * different "source Future" for {@link AbstractFuture#setFuture} calls.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|AbstractAbstractFutureTest
specifier|abstract
class|class
name|AbstractAbstractFutureTest
extends|extends
name|TestCase
block|{
DECL|field|future
specifier|private
name|TestedFuture
argument_list|<
name|Integer
argument_list|>
name|future
decl_stmt|;
DECL|field|delegate
specifier|private
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|delegate
decl_stmt|;
DECL|method|newDelegate ()
specifier|abstract
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|newDelegate
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|future
operator|=
name|TestedFuture
operator|.
name|create
argument_list|()
expr_stmt|;
name|delegate
operator|=
name|newDelegate
argument_list|()
expr_stmt|;
block|}
DECL|method|testPending ()
specifier|public
name|void
name|testPending
parameter_list|()
block|{
name|assertPending
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|testSuccessful ()
specifier|public
name|void
name|testSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertSuccessful
argument_list|(
name|future
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailed ()
specifier|public
name|void
name|testFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
name|cause
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|future
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|testCanceled ()
specifier|public
name|void
name|testCanceled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertCancelled
argument_list|(
name|future
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testInterrupted ()
specifier|public
name|void
name|testInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertCancelled
argument_list|(
name|future
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFuturePending ()
specifier|public
name|void
name|testSetFuturePending
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertSetAsynchronously
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureThenCancel ()
specifier|public
name|void
name|testSetFutureThenCancel
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertCancelled
argument_list|(
name|future
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCancelled
argument_list|(
name|delegate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureThenInterrupt ()
specifier|public
name|void
name|testSetFutureThenInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertCancelled
argument_list|(
name|future
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertCancelled
argument_list|(
name|delegate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureDelegateAlreadySuccessful ()
specifier|public
name|void
name|testSetFutureDelegateAlreadySuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertSuccessful
argument_list|(
name|future
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureDelegateLaterSuccessful ()
specifier|public
name|void
name|testSetFutureDelegateLaterSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertSuccessful
argument_list|(
name|future
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureDelegateAlreadyCancelled ()
specifier|public
name|void
name|testSetFutureDelegateAlreadyCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|cancel
argument_list|(
literal|false
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertCancelled
argument_list|(
name|future
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureDelegateLaterCancelled ()
specifier|public
name|void
name|testSetFutureDelegateLaterCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|false
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertCancelled
argument_list|(
name|future
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// All GWT Futures behaves like TrustedFuture.
DECL|method|testSetFutureDelegateAlreadyInterrupted ()
specifier|public
name|void
name|testSetFutureDelegateAlreadyInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|/*      * Interruption of the delegate propagates to us only if the delegate was a TrustedFuture.      * TODO(cpovirk): Consider whether to stop copying this information from TrustedFuture so that      * we're consistent.      */
name|assertCancelled
argument_list|(
name|future
argument_list|,
name|delegate
operator|instanceof
name|TrustedFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// All GWT Futures behaves like TrustedFuture.
DECL|method|testSetFutureDelegateLaterInterrupted ()
specifier|public
name|void
name|testSetFutureDelegateLaterInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
comment|// See previous method doc.
name|assertCancelled
argument_list|(
name|future
argument_list|,
name|delegate
operator|instanceof
name|TrustedFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testListenLaterSuccessful ()
specifier|public
name|void
name|testListenLaterSuccessful
parameter_list|()
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterFailed ()
specifier|public
name|void
name|testListenLaterFailed
parameter_list|()
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterCancelled ()
specifier|public
name|void
name|testListenLaterCancelled
parameter_list|()
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterInterrupted ()
specifier|public
name|void
name|testListenLaterInterrupted
parameter_list|()
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronously ()
specifier|public
name|void
name|testListenLaterSetAsynchronously
parameter_list|()
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronouslyLaterDelegateSuccessful ()
specifier|public
name|void
name|testListenLaterSetAsynchronouslyLaterDelegateSuccessful
parameter_list|()
block|{
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|inBetween
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronouslyLaterDelegateFailed ()
specifier|public
name|void
name|testListenLaterSetAsynchronouslyLaterDelegateFailed
parameter_list|()
block|{
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|inBetween
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronouslyLaterDelegateCancelled ()
specifier|public
name|void
name|testListenLaterSetAsynchronouslyLaterDelegateCancelled
parameter_list|()
block|{
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|inBetween
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronouslyLaterDelegateInterrupted ()
specifier|public
name|void
name|testListenLaterSetAsynchronouslyLaterDelegateInterrupted
parameter_list|()
block|{
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|inBetween
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronouslyLaterSelfCancelled ()
specifier|public
name|void
name|testListenLaterSetAsynchronouslyLaterSelfCancelled
parameter_list|()
block|{
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|inBetween
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenLaterSetAsynchronouslyLaterSelfInterrupted ()
specifier|public
name|void
name|testListenLaterSetAsynchronouslyLaterSelfInterrupted
parameter_list|()
block|{
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|inBetween
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testMisbehavingListenerAlreadyDone ()
specifier|public
name|void
name|testMisbehavingListenerAlreadyDone
parameter_list|()
block|{
class|class
name|BadRunnableException
extends|extends
name|RuntimeException
block|{     }
name|Runnable
name|bad
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|BadRunnableException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|bad
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
comment|// BadRunnableException must not propagate.
block|}
DECL|method|testMisbehavingListenerLaterDone ()
specifier|public
name|void
name|testMisbehavingListenerLaterDone
parameter_list|()
block|{
class|class
name|BadRunnableException
extends|extends
name|RuntimeException
block|{     }
name|CountingRunnable
name|before
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|Runnable
name|bad
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|BadRunnableException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|CountingRunnable
name|after
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|bad
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// BadRunnableException must not propagate.
name|before
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|after
operator|.
name|assertRun
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullListener ()
specifier|public
name|void
name|testNullListener
parameter_list|()
block|{
try|try
block|{
name|future
operator|.
name|addListener
argument_list|(
literal|null
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNullExecutor ()
specifier|public
name|void
name|testNullExecutor
parameter_list|()
block|{
try|try
block|{
name|future
operator|.
name|addListener
argument_list|(
name|doNothing
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNullTimeUnit ()
specifier|public
name|void
name|testNullTimeUnit
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNegativeTimeout ()
specifier|public
name|void
name|testNegativeTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|future
operator|.
name|get
argument_list|(
operator|-
literal|1
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// threads
DECL|method|testOverflowTimeout ()
specifier|public
name|void
name|testOverflowTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First, sanity check that naive multiplication would really overflow to a negative number:
name|long
name|nanosPerSecond
init|=
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nanosPerSecond
operator|*
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|isLessThan
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
comment|// Check that we wait long enough anyway (presumably as long as MAX_VALUE nanos):
name|TimedWaiterThread
name|waiter
init|=
operator|new
name|TimedWaiterThread
argument_list|(
name|future
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|start
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|awaitWaiting
argument_list|()
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testSetNull ()
specifier|public
name|void
name|testSetNull
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertSuccessful
argument_list|(
name|future
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetExceptionNull ()
specifier|public
name|void
name|testSetExceptionNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|future
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertSuccessful
argument_list|(
name|future
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFutureNull ()
specifier|public
name|void
name|testSetFutureNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|future
operator|.
name|setFuture
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertSuccessful
argument_list|(
name|future
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concrete subclass for testing.    */
DECL|class|TestedFuture
specifier|private
specifier|static
class|class
name|TestedFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|create ()
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TestedFuture
argument_list|<
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|TestedFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
block|}
DECL|class|CountingRunnable
specifier|private
specifier|static
specifier|final
class|class
name|CountingRunnable
implements|implements
name|Runnable
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
DECL|method|assertNotRun ()
name|void
name|assertNotRun
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRun ()
name|void
name|assertRun
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSetAsynchronously (AbstractFuture<Integer> future)
specifier|private
specifier|static
name|void
name|assertSetAsynchronously
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|)
block|{
name|assertCannotSet
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertPending
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPending (AbstractFuture<Integer> future)
specifier|private
specifier|static
name|void
name|assertPending
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|)
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertNotRun
argument_list|()
expr_stmt|;
name|verifyGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|verifyTimedGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuccessful (AbstractFuture<Integer> future, Integer expectedResult)
specifier|private
specifier|static
name|void
name|assertSuccessful
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|,
name|Integer
name|expectedResult
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
block|{
name|assertDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getDone
argument_list|(
name|future
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedResult
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getDoneFromTimeoutOverload
argument_list|(
name|future
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedResult
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailed (AbstractFuture<Integer> future, Throwable expectedException)
specifier|private
specifier|static
name|void
name|assertFailed
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|,
name|Throwable
name|expectedException
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|assertDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|getDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getDoneFromTimeoutOverload
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCancelled (AbstractFuture<Integer> future, boolean expectWasInterrupted)
specifier|private
specifier|static
name|void
name|assertCancelled
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|,
name|boolean
name|expectWasInterrupted
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
block|{
name|assertDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectWasInterrupted
argument_list|)
expr_stmt|;
try|try
block|{
name|getDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|getDoneFromTimeoutOverload
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|assertDone (AbstractFuture<Integer> future)
specifier|private
specifier|static
name|void
name|assertDone
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|)
block|{
name|CountingRunnable
name|listener
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|assertRun
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertCannotSet
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertCannotCancel
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCannotSet (AbstractFuture<Integer> future)
specifier|private
specifier|static
name|void
name|assertCannotSet
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|)
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|99
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|IndexOutOfBoundsException
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
operator|new
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|immediateFuture
argument_list|(
literal|99
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotCancel (AbstractFuture<Integer> future)
specifier|private
specifier|static
name|void
name|assertCannotCancel
parameter_list|(
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|future
parameter_list|)
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

