begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TestPlatform
operator|.
name|verifyGetOnPendingFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TestPlatform
operator|.
name|verifyTimedGetOnPendingFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Base class for tests for emulated {@link AbstractFuture} that allow subclasses to swap in a  * different "source Future" for {@link AbstractFuture#setFuture} calls.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractAbstractFutureTest
specifier|abstract
class|class
name|AbstractAbstractFutureTest
extends|extends
name|TestCase
block|{
DECL|field|future
specifier|private
name|TestedFuture
argument_list|<
name|Integer
argument_list|>
name|future
decl_stmt|;
DECL|field|delegate
specifier|private
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|delegate
decl_stmt|;
DECL|method|newDelegate ()
specifier|abstract
name|AbstractFuture
argument_list|<
name|Integer
argument_list|>
name|newDelegate
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|future
operator|=
name|TestedFuture
operator|.
name|create
argument_list|()
expr_stmt|;
name|delegate
operator|=
name|newDelegate
argument_list|()
expr_stmt|;
block|}
DECL|method|testPending ()
specifier|public
name|void
name|testPending
parameter_list|()
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|verifyGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|verifyTimedGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolved ()
specifier|public
name|void
name|testResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|is
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolved_afterResolved ()
specifier|public
name|void
name|testResolved_afterResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolved_afterException ()
specifier|public
name|void
name|testResolved_afterException
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|future
operator|.
name|setException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testResolved_afterCanceled ()
specifier|public
name|void
name|testResolved_afterCanceled
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testResolved_afterInterrupted ()
specifier|public
name|void
name|testResolved_afterInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testResolved_afterDelegated ()
specifier|public
name|void
name|testResolved_afterDelegated
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|verifyGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptional ()
specifier|public
name|void
name|testExceptional
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
name|cause
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExceptional_afterResolved ()
specifier|public
name|void
name|testExceptional_afterResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptional_afterException ()
specifier|public
name|void
name|testExceptional_afterException
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|future
operator|.
name|setException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isSameAs
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExceptional_afterCancelled ()
specifier|public
name|void
name|testExceptional_afterCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testExceptional_afterInterrupted ()
specifier|public
name|void
name|testExceptional_afterInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testExceptional_afterDelegated ()
specifier|public
name|void
name|testExceptional_afterDelegated
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|verifyGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancelled ()
specifier|public
name|void
name|testCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCancelled_afterResolved ()
specifier|public
name|void
name|testCancelled_afterResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testCancelled_afterException ()
specifier|public
name|void
name|testCancelled_afterException
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testCancelled_afterCancelled ()
specifier|public
name|void
name|testCancelled_afterCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testCancelled_afterInterrupted ()
specifier|public
name|void
name|testCancelled_afterInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testCancelled_afterDelegated ()
specifier|public
name|void
name|testCancelled_afterDelegated
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testInterrupted ()
specifier|public
name|void
name|testInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInterrupted_afterResolved ()
specifier|public
name|void
name|testInterrupted_afterResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testInterrupted_afterException ()
specifier|public
name|void
name|testInterrupted_afterException
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testInterrupted_afterCancelled ()
specifier|public
name|void
name|testInterrupted_afterCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testInterrupted_afterInterrupted ()
specifier|public
name|void
name|testInterrupted_afterInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testInterrupted_afterDelegated ()
specifier|public
name|void
name|testInterrupted_afterDelegated
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelegated_delegateIsStillPending ()
specifier|public
name|void
name|testDelegated_delegateIsStillPending
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|verifyGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|verifyTimedGetOnPendingFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegated_delegateWasResolved ()
specifier|public
name|void
name|testDelegated_delegateWasResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegated_delegateIsResolved ()
specifier|public
name|void
name|testDelegated_delegateIsResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegated_delegateWasCancelled ()
specifier|public
name|void
name|testDelegated_delegateWasCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|cancel
argument_list|(
literal|false
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelegated_delegateIsCancelled ()
specifier|public
name|void
name|testDelegated_delegateIsCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|false
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelegated_delegateWasInterrupted ()
specifier|public
name|void
name|testDelegated_delegateWasInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelegated_delegateIsInterrupted ()
specifier|public
name|void
name|testDelegated_delegateIsInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelegated_afterResolved ()
specifier|public
name|void
name|testDelegated_afterResolved
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegated_afterDelegated ()
specifier|public
name|void
name|testDelegated_afterDelegated
parameter_list|()
throws|throws
name|Exception
block|{
name|TestedFuture
argument_list|<
name|Integer
argument_list|>
name|delegated2
init|=
name|TestedFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegated2
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|delegated2
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegated_afterCancelled ()
specifier|public
name|void
name|testDelegated_afterCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testDelegated_afterInterrupted ()
specifier|public
name|void
name|testDelegated_afterInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/** mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|delegate
operator|.
name|wasInterrupted
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToPending ()
specifier|public
name|void
name|testListenToPending
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToNotRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToResolved ()
specifier|public
name|void
name|testListenToResolved
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToResolved_misbehavingListener ()
specifier|public
name|void
name|testListenToResolved_misbehavingListener
parameter_list|()
block|{
class|class
name|BadRunnableException
extends|extends
name|RuntimeException
block|{     }
name|Runnable
name|bad
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|BadRunnableException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|bad
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// BadRunnableException must not propagate.
block|}
DECL|method|testListenToExceptional ()
specifier|public
name|void
name|testListenToExceptional
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToCancelled ()
specifier|public
name|void
name|testListenToCancelled
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToInterrupted ()
specifier|public
name|void
name|testListenToInterrupted
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|true
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToDelegatePending ()
specifier|public
name|void
name|testListenToDelegatePending
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToNotRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToNotRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToDelegateResolved ()
specifier|public
name|void
name|testListenToDelegateResolved
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|inBetween
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToDelegateExceptional ()
specifier|public
name|void
name|testListenToDelegateExceptional
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|inBetween
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|inBetween
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToDelegateCancelled ()
specifier|public
name|void
name|testListenToDelegateCancelled
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|inBetween
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToDelegateCancelled_byDelegator ()
specifier|public
name|void
name|testListenToDelegateCancelled_byDelegator
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|inBetween
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenToDelegateInterrupted_byDelegator ()
specifier|public
name|void
name|testListenToDelegateInterrupted_byDelegator
parameter_list|()
block|{
name|RunnableVerifier
name|before
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|after
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|RunnableVerifier
name|inBetween
init|=
operator|new
name|RunnableVerifier
argument_list|()
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|before
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|setFuture
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|inBetween
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
comment|/* mayInterruptIfRunning */
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|after
operator|.
name|expectedToRun
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|.
name|verify
argument_list|()
expr_stmt|;
name|after
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
DECL|method|testSetFutureNull ()
specifier|public
name|void
name|testSetFutureNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|future
operator|.
name|setFuture
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|set
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concrete subclass for testing.    */
DECL|class|TestedFuture
specifier|private
specifier|static
class|class
name|TestedFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|create ()
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TestedFuture
argument_list|<
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|TestedFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
block|}
DECL|class|RunnableVerifier
specifier|private
specifier|static
specifier|final
class|class
name|RunnableVerifier
implements|implements
name|Runnable
block|{
DECL|field|expectation
name|Expectation
name|expectation
init|=
name|Expectation
operator|.
name|UNDEFINED
decl_stmt|;
DECL|field|actuallyRan
name|boolean
name|actuallyRan
decl_stmt|;
DECL|method|expectedToRun ()
name|RunnableVerifier
name|expectedToRun
parameter_list|()
block|{
name|expectation
operator|=
name|Expectation
operator|.
name|EXPECTED_TO_RUN
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|expectedToNotRun ()
name|RunnableVerifier
name|expectedToNotRun
parameter_list|()
block|{
name|expectation
operator|=
name|Expectation
operator|.
name|EXPECTED_TO_NO_RUN
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|this
operator|.
name|actuallyRan
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|verify ()
name|void
name|verify
parameter_list|()
block|{
name|expectation
operator|.
name|verify
argument_list|(
name|actuallyRan
argument_list|)
expr_stmt|;
block|}
DECL|enum|Expectation
enum|enum
name|Expectation
block|{
DECL|enumConstant|UNDEFINED
name|UNDEFINED
block|{
annotation|@
name|Override
name|void
name|verify
parameter_list|(
name|boolean
name|didRun
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Did you forget to define the expectation?"
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|EXPECTED_TO_RUN
name|EXPECTED_TO_RUN
block|{
annotation|@
name|Override
name|void
name|verify
parameter_list|(
name|boolean
name|actuallyRan
parameter_list|)
block|{
if|if
condition|(
operator|!
name|actuallyRan
condition|)
block|{
name|fail
argument_list|(
literal|"Runnable was expected to run but it did not."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
DECL|enumConstant|EXPECTED_TO_NO_RUN
name|EXPECTED_TO_NO_RUN
block|{
annotation|@
name|Override
name|void
name|verify
parameter_list|(
name|boolean
name|actuallyRan
parameter_list|)
block|{
if|if
condition|(
name|actuallyRan
condition|)
block|{
name|fail
argument_list|(
literal|"Runnable was NOT expected to run but it did."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|;
DECL|method|verify (boolean didRun)
specifier|abstract
name|void
name|verify
parameter_list|(
name|boolean
name|didRun
parameter_list|)
function_decl|;
block|}
block|}
block|}
end_class

end_unit

