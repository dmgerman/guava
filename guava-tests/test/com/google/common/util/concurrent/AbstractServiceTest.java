begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractService}.  *  * @author Jesse Wilson  */
end_comment

begin_class
DECL|class|AbstractServiceTest
specifier|public
class|class
name|AbstractServiceTest
extends|extends
name|TestCase
block|{
DECL|field|LONG_TIMEOUT_MILLIS
specifier|private
specifier|static
specifier|final
name|long
name|LONG_TIMEOUT_MILLIS
init|=
literal|2500
decl_stmt|;
DECL|field|executionThread
specifier|private
name|Thread
name|executionThread
decl_stmt|;
DECL|field|thrownByExecutionThread
specifier|private
name|Throwable
name|thrownByExecutionThread
decl_stmt|;
DECL|method|testNoOpServiceStartStop ()
specifier|public
name|void
name|testNoOpServiceStartStop
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|NEW
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|running
argument_list|)
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|running
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|running
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartAndWaitStopAndWait ()
specifier|public
name|void
name|testNoOpServiceStartAndWaitStopAndWait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartAsyncAndAwaitStopAsyncAndAwait ()
specifier|public
name|void
name|testNoOpServiceStartAsyncAndAwaitStopAsyncAndAwait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStopIdempotence ()
specifier|public
name|void
name|testNoOpServiceStopIdempotence
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStopIdempotenceAfterWait ()
specifier|public
name|void
name|testNoOpServiceStopIdempotenceAfterWait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStopIdempotenceDoubleWait ()
specifier|public
name|void
name|testNoOpServiceStopIdempotenceDoubleWait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartStopAndWaitUninterruptible ()
specifier|public
name|void
name|testNoOpServiceStartStopAndWaitUninterruptible
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
comment|// clear interrupt for future tests
block|}
block|}
DECL|class|NoOpService
specifier|private
specifier|static
class|class
name|NoOpService
extends|extends
name|AbstractService
block|{
DECL|field|running
name|boolean
name|running
init|=
literal|false
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|running
argument_list|)
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|running
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testManualServiceStartStop ()
specifier|public
name|void
name|testManualServiceStartStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStartCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
comment|// usually this would be invoked by another thread
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
comment|// usually this would be invoked by another thread
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceNotifyStoppedWhileRunning ()
specifier|public
name|void
name|testManualServiceNotifyStoppedWhileRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceStopWhileStarting ()
specifier|public
name|void
name|testManualServiceStopWhileStarting
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStartCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This tests for a bug where if {@link Service#stopAsync()} was called while the service was    * {@link State#STARTING} more than once, the {@link Listener#stopping(State)} callback would get    * called multiple times.    */
DECL|method|testManualServiceStopMultipleTimesWhileStarting ()
specifier|public
name|void
name|testManualServiceStopMultipleTimesWhileStarting
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|stopppingCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addListener
argument_list|(
operator|new
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stopping
parameter_list|(
name|State
name|from
parameter_list|)
block|{
name|stopppingCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stopppingCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stopppingCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceStopWhileNew ()
specifier|public
name|void
name|testManualServiceStopWhileNew
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStartCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceFailWhileStarting ()
specifier|public
name|void
name|testManualServiceFailWhileStarting
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceFailWhileRunning ()
specifier|public
name|void
name|testManualServiceFailWhileRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceFailWhileStopping ()
specifier|public
name|void
name|testManualServiceFailWhileStopping
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceUnrequestedStop ()
specifier|public
name|void
name|testManualServiceUnrequestedStop
parameter_list|()
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
block|}
comment|/**    * The user of this service should call {@link #notifyStarted} and {@link    * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}.    */
DECL|class|ManualSwitchedService
specifier|private
specifier|static
class|class
name|ManualSwitchedService
extends|extends
name|AbstractService
block|{
DECL|field|doStartCalled
name|boolean
name|doStartCalled
init|=
literal|false
decl_stmt|;
DECL|field|doStopCalled
name|boolean
name|doStopCalled
init|=
literal|false
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|doStartCalled
argument_list|)
expr_stmt|;
name|doStartCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|doStopCalled
argument_list|)
expr_stmt|;
name|doStopCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|testAwaitTerminated ()
specifier|public
name|void
name|testAwaitTerminated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Thread
name|waiter
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|waiter
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|join
argument_list|(
name|LONG_TIMEOUT_MILLIS
argument_list|)
expr_stmt|;
comment|// ensure that the await in the other thread is triggered
name|assertFalse
argument_list|(
name|waiter
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAwaitTerminated_FailedService ()
specifier|public
name|void
name|testAwaitTerminated_FailedService
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|exception
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
name|Thread
name|waiter
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|waiter
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|join
argument_list|(
name|LONG_TIMEOUT_MILLIS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|waiter
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|exception
operator|.
name|get
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStartAndWaitStopAndWait ()
specifier|public
name|void
name|testThreadedServiceStartAndWaitStopAndWait
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|TERMINATED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStopIdempotence ()
specifier|public
name|void
name|testThreadedServiceStopIdempotence
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStopIdempotenceAfterWait ()
specifier|public
name|void
name|testThreadedServiceStopIdempotenceAfterWait
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStopIdempotenceDoubleWait ()
specifier|public
name|void
name|testThreadedServiceStopIdempotenceDoubleWait
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceFailureIdempotence ()
specifier|public
name|void
name|testManualServiceFailureIdempotence
parameter_list|()
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
comment|/*      * Set up a RecordingListener to perform its built-in assertions, even though we won't look at      * its state history.      */
name|RecordingListener
name|unused
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyFailed
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyFailed
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ThreadedService
specifier|private
class|class
name|ThreadedService
extends|extends
name|AbstractService
block|{
DECL|field|hasConfirmedIsRunning
specifier|final
name|CountDownLatch
name|hasConfirmedIsRunning
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/*      * The main test thread tries to stop() the service shortly after      * confirming that it is running. Meanwhile, the service itself is trying      * to confirm that it is running. If the main thread's stop() call happens      * before it has the chance, the test will fail. To avoid this, the main      * thread calls this method, which waits until the service has performed      * its own "running" check.      */
DECL|method|awaitRunChecks ()
name|void
name|awaitRunChecks
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertTrue
argument_list|(
literal|"Service thread hasn't finished its checks. "
operator|+
literal|"Exception status (possibly stale): "
operator|+
name|thrownByExecutionThread
argument_list|,
name|hasConfirmedIsRunning
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|invokeOnExecutionThreadForTest
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|hasConfirmedIsRunning
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|invokeOnExecutionThreadForTest
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invokeOnExecutionThreadForTest (Runnable runnable)
specifier|private
name|void
name|invokeOnExecutionThreadForTest
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|executionThread
operator|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|thrownByExecutionThread
operator|=
name|e
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|throwIfSet (Throwable t)
specifier|private
specifier|static
name|void
name|throwIfSet
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
DECL|method|testStopUnstartedService ()
specifier|public
name|void
name|testStopUnstartedService
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailingServiceStartAndWait ()
specifier|public
name|void
name|testFailingServiceStartAndWait
parameter_list|()
throws|throws
name|Exception
block|{
name|StartFailingService
name|service
init|=
operator|new
name|StartFailingService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailingServiceStopAndWait_stopFailing ()
specifier|public
name|void
name|testFailingServiceStopAndWait_stopFailing
parameter_list|()
throws|throws
name|Exception
block|{
name|StopFailingService
name|service
init|=
operator|new
name|StopFailingService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailingServiceStopAndWait_runFailing ()
specifier|public
name|void
name|testFailingServiceStopAndWait_runFailing
parameter_list|()
throws|throws
name|Exception
block|{
name|RunFailingService
name|service
init|=
operator|new
name|RunFailingService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowingServiceStartAndWait ()
specifier|public
name|void
name|testThrowingServiceStartAndWait
parameter_list|()
throws|throws
name|Exception
block|{
name|StartThrowingService
name|service
init|=
operator|new
name|StartThrowingService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|service
operator|.
name|exception
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|exception
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowingServiceStopAndWait_stopThrowing ()
specifier|public
name|void
name|testThrowingServiceStopAndWait_stopThrowing
parameter_list|()
throws|throws
name|Exception
block|{
name|StopThrowingService
name|service
init|=
operator|new
name|StopThrowingService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|service
operator|.
name|exception
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|exception
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|STOPPING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowingServiceStopAndWait_runThrowing ()
specifier|public
name|void
name|testThrowingServiceStopAndWait_runThrowing
parameter_list|()
throws|throws
name|Exception
block|{
name|RunThrowingService
name|service
init|=
operator|new
name|RunThrowingService
argument_list|()
decl_stmt|;
name|RecordingListener
name|listener
init|=
name|RecordingListener
operator|.
name|record
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|service
operator|.
name|exception
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|exception
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
name|State
operator|.
name|FAILED
argument_list|)
argument_list|,
name|listener
operator|.
name|getStateHistory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailureCause_throwsIfNotFailed ()
specifier|public
name|void
name|testFailureCause_throwsIfNotFailed
parameter_list|()
block|{
name|StopFailingService
name|service
init|=
operator|new
name|StopFailingService
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|failureCause
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|failureCause
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAddListenerAfterFailureDoesntCauseDeadlock ()
specifier|public
name|void
name|testAddListenerAfterFailureDoesntCauseDeadlock
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|StartFailingService
name|service
init|=
operator|new
name|StartFailingService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|addListener
argument_list|(
operator|new
name|RecordingListener
argument_list|(
name|service
argument_list|)
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Internally stopAsync() grabs a lock, this could be any such method on AbstractService.
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
name|LONG_TIMEOUT_MILLIS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|thread
operator|+
literal|" is deadlocked"
argument_list|,
name|thread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListenerDoesntDeadlockOnStartAndWaitFromRunning ()
specifier|public
name|void
name|testListenerDoesntDeadlockOnStartAndWaitFromRunning
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NoOpThreadedService
name|service
init|=
operator|new
name|NoOpThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|addListener
argument_list|(
operator|new
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|running
parameter_list|()
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|(
name|LONG_TIMEOUT_MILLIS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
block|}
DECL|method|testListenerDoesntDeadlockOnStopAndWaitFromTerminated ()
specifier|public
name|void
name|testListenerDoesntDeadlockOnStopAndWaitFromTerminated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NoOpThreadedService
name|service
init|=
operator|new
name|NoOpThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|addListener
argument_list|(
operator|new
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|terminated
parameter_list|(
name|State
name|from
parameter_list|)
block|{
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
name|LONG_TIMEOUT_MILLIS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|thread
operator|+
literal|" is deadlocked"
argument_list|,
name|thread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|NoOpThreadedService
specifier|private
specifier|static
class|class
name|NoOpThreadedService
extends|extends
name|AbstractExecutionThreadService
block|{
DECL|field|latch
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|run ()
annotation|@
name|Override
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|triggerShutdown ()
annotation|@
name|Override
specifier|protected
name|void
name|triggerShutdown
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StartFailingService
specifier|private
specifier|static
class|class
name|StartFailingService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RunFailingService
specifier|private
specifier|static
class|class
name|RunFailingService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StopFailingService
specifier|private
specifier|static
class|class
name|StopFailingService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StartThrowingService
specifier|private
specifier|static
class|class
name|StartThrowingService
extends|extends
name|AbstractService
block|{
DECL|field|exception
specifier|final
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"deliberate"
argument_list|)
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
throw|throw
name|exception
throw|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RunThrowingService
specifier|private
specifier|static
class|class
name|RunThrowingService
extends|extends
name|AbstractService
block|{
DECL|field|exception
specifier|final
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"deliberate"
argument_list|)
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StopThrowingService
specifier|private
specifier|static
class|class
name|StopThrowingService
extends|extends
name|AbstractService
block|{
DECL|field|exception
specifier|final
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"deliberate"
argument_list|)
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
throw|throw
name|exception
throw|;
block|}
block|}
DECL|class|RecordingListener
specifier|private
specifier|static
class|class
name|RecordingListener
extends|extends
name|Listener
block|{
DECL|method|record (Service service)
specifier|static
name|RecordingListener
name|record
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|RecordingListener
name|listener
init|=
operator|new
name|RecordingListener
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|service
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|listener
return|;
block|}
DECL|field|service
specifier|final
name|Service
name|service
decl_stmt|;
DECL|method|RecordingListener (Service service)
name|RecordingListener
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
DECL|field|stateHistory
specifier|final
name|List
argument_list|<
name|State
argument_list|>
name|stateHistory
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|completionLatch
specifier|final
name|CountDownLatch
name|completionLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|getStateHistory ()
name|ImmutableList
argument_list|<
name|State
argument_list|>
name|getStateHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|completionLatch
operator|.
name|await
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|stateHistory
argument_list|)
return|;
block|}
block|}
DECL|method|starting ()
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|starting
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|stateHistory
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|State
operator|.
name|NEW
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|stateHistory
operator|.
name|add
argument_list|(
name|State
operator|.
name|STARTING
argument_list|)
expr_stmt|;
block|}
DECL|method|running ()
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|running
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|stateHistory
argument_list|)
argument_list|)
expr_stmt|;
name|stateHistory
operator|.
name|add
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stopping (State from)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stopping
parameter_list|(
name|State
name|from
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|from
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|stateHistory
argument_list|)
argument_list|)
expr_stmt|;
name|stateHistory
operator|.
name|add
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
name|State
operator|.
name|STARTING
condition|)
block|{
try|try
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|assertNull
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Expected the service "
operator|+
name|service
operator|+
literal|" to be RUNNING, but was STOPPING"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotSame
argument_list|(
name|from
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|terminated (State from)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|terminated
parameter_list|(
name|State
name|from
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|from
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|stateHistory
argument_list|,
name|State
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|stateHistory
operator|.
name|add
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
name|State
operator|.
name|NEW
condition|)
block|{
try|try
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|assertNull
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Expected the service "
operator|+
name|service
operator|+
literal|" to be RUNNING, but was TERMINATED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|completionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|failed (State from, Throwable failure)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|failed
parameter_list|(
name|State
name|from
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|from
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|stateHistory
argument_list|)
argument_list|)
expr_stmt|;
name|stateHistory
operator|.
name|add
argument_list|(
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|FAILED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
argument_list|,
name|service
operator|.
name|failureCause
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
name|State
operator|.
name|STARTING
condition|)
block|{
try|try
block|{
name|service
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|failure
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|service
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|failure
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|completionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNotifyStartedWhenNotStarting ()
specifier|public
name|void
name|testNotifyStartedWhenNotStarting
parameter_list|()
block|{
name|AbstractService
name|service
init|=
operator|new
name|DefaultService
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testNotifyStoppedWhenNotRunning ()
specifier|public
name|void
name|testNotifyStoppedWhenNotRunning
parameter_list|()
block|{
name|AbstractService
name|service
init|=
operator|new
name|DefaultService
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testNotifyFailedWhenNotStarted ()
specifier|public
name|void
name|testNotifyFailedWhenNotStarted
parameter_list|()
block|{
name|AbstractService
name|service
init|=
operator|new
name|DefaultService
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|notifyFailed
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testNotifyFailedWhenTerminated ()
specifier|public
name|void
name|testNotifyFailedWhenTerminated
parameter_list|()
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitRunning
argument_list|()
expr_stmt|;
name|service
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|notifyFailed
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|class|DefaultService
specifier|private
specifier|static
class|class
name|DefaultService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{}
block|}
DECL|field|EXCEPTION
specifier|private
specifier|static
specifier|final
name|Exception
name|EXCEPTION
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

