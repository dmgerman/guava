begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractService}.  *  * @author Jesse Wilson  */
end_comment

begin_class
DECL|class|AbstractServiceTest
specifier|public
class|class
name|AbstractServiceTest
extends|extends
name|TestCase
block|{
DECL|field|executionThread
specifier|private
name|Thread
name|executionThread
decl_stmt|;
DECL|field|thrownByExecutionThread
specifier|private
name|Throwable
name|thrownByExecutionThread
decl_stmt|;
DECL|method|testNoOpServiceStartStop ()
specifier|public
name|void
name|testNoOpServiceStartStop
parameter_list|()
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|NEW
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|running
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|running
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|running
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartAndWaitStopAndWait ()
specifier|public
name|void
name|testNoOpServiceStartAndWaitStopAndWait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartStopIdempotence ()
specifier|public
name|void
name|testNoOpServiceStartStopIdempotence
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartStopIdempotenceAfterWait ()
specifier|public
name|void
name|testNoOpServiceStartStopIdempotenceAfterWait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartStopIdempotenceDoubleWait ()
specifier|public
name|void
name|testNoOpServiceStartStopIdempotenceDoubleWait
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpServiceStartStopAndWaitUninterruptible ()
specifier|public
name|void
name|testNoOpServiceStartStopAndWaitUninterruptible
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
comment|// clear interrupt for future tests
block|}
block|}
DECL|class|NoOpService
specifier|private
specifier|static
class|class
name|NoOpService
extends|extends
name|AbstractService
block|{
DECL|field|running
name|boolean
name|running
init|=
literal|false
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|running
argument_list|)
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|running
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testManualServiceStartStop ()
specifier|public
name|void
name|testManualServiceStartStop
parameter_list|()
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STARTING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStartCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
comment|// usually this would be invoked by another thread
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STOPPING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
comment|// usually this would be invoked by another thread
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceStopWhileStarting ()
specifier|public
name|void
name|testManualServiceStopWhileStarting
parameter_list|()
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STARTING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStartCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STOPPING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|STOPPING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testManualServiceUnrequestedStop ()
specifier|public
name|void
name|testManualServiceUnrequestedStop
parameter_list|()
block|{
name|ManualSwitchedService
name|service
init|=
operator|new
name|ManualSwitchedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|doStopCalled
argument_list|)
expr_stmt|;
block|}
comment|/**    * The user of this service should call {@link #notifyStarted} and {@link    * #notifyStopped} after calling {@link #start} and {@link #stop}.    */
DECL|class|ManualSwitchedService
specifier|private
specifier|static
class|class
name|ManualSwitchedService
extends|extends
name|AbstractService
block|{
DECL|field|doStartCalled
name|boolean
name|doStartCalled
init|=
literal|false
decl_stmt|;
DECL|field|doStopCalled
name|boolean
name|doStopCalled
init|=
literal|false
decl_stmt|;
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|doStartCalled
argument_list|)
expr_stmt|;
name|doStartCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|doStopCalled
argument_list|)
expr_stmt|;
name|doStopCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|testThreadedServiceStartAndWaitStopAndWait ()
specifier|public
name|void
name|testThreadedServiceStartAndWaitStopAndWait
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStartStopIdempotence ()
specifier|public
name|void
name|testThreadedServiceStartStopIdempotence
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStartStopIdempotenceAfterWait ()
specifier|public
name|void
name|testThreadedServiceStartStopIdempotenceAfterWait
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedServiceStartStopIdempotenceDoubleWait ()
specifier|public
name|void
name|testThreadedServiceStartStopIdempotenceDoubleWait
parameter_list|()
throws|throws
name|Throwable
block|{
name|ThreadedService
name|service
init|=
operator|new
name|ThreadedService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|awaitRunChecks
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|throwIfSet
argument_list|(
name|thrownByExecutionThread
argument_list|)
expr_stmt|;
block|}
DECL|class|ThreadedService
specifier|private
class|class
name|ThreadedService
extends|extends
name|AbstractService
block|{
DECL|field|hasConfirmedIsRunning
specifier|final
name|CountDownLatch
name|hasConfirmedIsRunning
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/*      * The main test thread tries to stop() the service shortly after      * confirming that it is running. Meanwhile, the service itself is trying      * to confirm that it is running. If the main thread's stop() call happens      * before it has the chance, the test will fail. To avoid this, the main      * thread calls this method, which waits until the service has performed      * its own "running" check.      */
DECL|method|awaitRunChecks ()
name|void
name|awaitRunChecks
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertTrue
argument_list|(
literal|"Service thread hasn't finished its checks. "
operator|+
literal|"Exception status (possibly stale): "
operator|+
name|thrownByExecutionThread
argument_list|,
name|hasConfirmedIsRunning
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|invokeOnExecutionThreadForTest
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|hasConfirmedIsRunning
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|invokeOnExecutionThreadForTest
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|STOPPING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|TERMINATED
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invokeOnExecutionThreadForTest (Runnable runnable)
specifier|private
name|void
name|invokeOnExecutionThreadForTest
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|executionThread
operator|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|thrownByExecutionThread
operator|=
name|e
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executionThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|throwIfSet (Throwable t)
specifier|private
specifier|static
name|void
name|throwIfSet
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
throw|throw
name|t
throw|;
block|}
block|}
DECL|method|testStopUnstartedService ()
specifier|public
name|void
name|testStopUnstartedService
parameter_list|()
throws|throws
name|Exception
block|{
name|NoOpService
name|service
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Service
operator|.
name|State
argument_list|>
name|stopResult
init|=
name|service
operator|.
name|stop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|stopResult
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Service
operator|.
name|State
argument_list|>
name|startResult
init|=
name|service
operator|.
name|start
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|startResult
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowingServiceStartAndWait ()
specifier|public
name|void
name|testThrowingServiceStartAndWait
parameter_list|()
throws|throws
name|Exception
block|{
name|StartThrowingService
name|service
init|=
operator|new
name|StartThrowingService
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testThrowingServiceStopAndWait ()
specifier|public
name|void
name|testThrowingServiceStopAndWait
parameter_list|()
throws|throws
name|Exception
block|{
name|StopThrowingService
name|service
init|=
operator|new
name|StopThrowingService
argument_list|()
decl_stmt|;
name|service
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|EXCEPTION
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StartThrowingService
specifier|private
specifier|static
class|class
name|StartThrowingService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StopThrowingService
specifier|private
specifier|static
class|class
name|StopThrowingService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|notifyFailed
argument_list|(
name|EXCEPTION
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EXCEPTION
specifier|private
specifier|static
specifier|final
name|Exception
name|EXCEPTION
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

