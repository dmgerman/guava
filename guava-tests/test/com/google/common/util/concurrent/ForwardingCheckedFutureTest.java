begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForwardingCheckedFuture
operator|.
name|SimpleForwardingCheckedFuture
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Test for {@link ForwardingCheckedFuture}  *   * @author Anthony Zana  */
end_comment

begin_class
DECL|class|ForwardingCheckedFutureTest
specifier|public
class|class
name|ForwardingCheckedFutureTest
extends|extends
name|TestCase
block|{
DECL|field|VALUE
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"delegated"
decl_stmt|;
DECL|field|TIME_UNIT
specifier|private
specifier|static
specifier|final
name|TimeUnit
name|TIME_UNIT
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|delegate
specifier|private
name|CheckedFuture
argument_list|<
name|String
argument_list|,
name|IOException
argument_list|>
name|delegate
init|=
name|createMock
argument_list|(
name|CheckedFuture
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|forwarded
specifier|private
name|TestDelegateFuture
name|forwarded
init|=
operator|new
name|TestDelegateFuture
argument_list|()
decl_stmt|;
DECL|field|simple
specifier|private
name|TestSimpleFuture
name|simple
init|=
operator|new
name|TestSimpleFuture
argument_list|()
decl_stmt|;
DECL|method|testCheckedGet ()
specifier|public
name|void
name|testCheckedGet
parameter_list|()
throws|throws
name|IOException
block|{
name|expect
argument_list|(
name|delegate
operator|.
name|checkedGet
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|VALUE
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
name|forwarded
operator|.
name|checkedGet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
name|simple
operator|.
name|checkedGet
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimedCheckedGet ()
specifier|public
name|void
name|testTimedCheckedGet
parameter_list|()
throws|throws
name|TimeoutException
throws|,
name|IOException
block|{
name|expect
argument_list|(
name|delegate
operator|.
name|checkedGet
argument_list|(
literal|100
argument_list|,
name|TIME_UNIT
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|VALUE
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
name|forwarded
operator|.
name|checkedGet
argument_list|(
literal|100
argument_list|,
name|TIME_UNIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
name|simple
operator|.
name|checkedGet
argument_list|(
literal|100
argument_list|,
name|TIME_UNIT
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimedCheckedGet_timeout ()
specifier|public
name|void
name|testTimedCheckedGet_timeout
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|expect
argument_list|(
name|delegate
operator|.
name|checkedGet
argument_list|(
literal|100
argument_list|,
name|TIME_UNIT
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|TimeoutException
argument_list|()
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
try|try
block|{
name|forwarded
operator|.
name|checkedGet
argument_list|(
literal|100
argument_list|,
name|TIME_UNIT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|simple
operator|.
name|checkedGet
argument_list|(
literal|100
argument_list|,
name|TIME_UNIT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{}
name|verify
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckedGetException ()
specifier|public
name|void
name|testCheckedGetException
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|expected
init|=
operator|new
name|IOException
argument_list|(
literal|"expected"
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|delegate
operator|.
name|checkedGet
argument_list|()
argument_list|)
operator|.
name|andThrow
argument_list|(
name|expected
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
try|try
block|{
name|delegate
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|simple
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|class|TestDelegateFuture
specifier|private
class|class
name|TestDelegateFuture
extends|extends
name|ForwardingCheckedFuture
argument_list|<
name|String
argument_list|,
name|IOException
argument_list|>
block|{
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|CheckedFuture
argument_list|<
name|String
argument_list|,
name|IOException
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
DECL|class|TestSimpleFuture
specifier|private
class|class
name|TestSimpleFuture
extends|extends
name|SimpleForwardingCheckedFuture
argument_list|<
name|String
argument_list|,
name|IOException
argument_list|>
block|{
DECL|method|TestSimpleFuture ()
specifier|public
name|TestSimpleFuture
parameter_list|()
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

