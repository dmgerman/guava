begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Service
operator|.
name|State
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AbstractIdleService}.  *  * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|AbstractIdleServiceTest
specifier|public
class|class
name|AbstractIdleServiceTest
extends|extends
name|TestCase
block|{
DECL|field|executorThread
specifier|private
name|Thread
name|executorThread
decl_stmt|;
DECL|field|thrownByExecutorThread
specifier|private
name|Throwable
name|thrownByExecutorThread
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
init|=
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|executorThread
operator|=
operator|new
name|Thread
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|executorThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|thrownByExecutorThread
operator|=
name|e
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|testServiceStartStop ()
specifier|public
name|void
name|testServiceStartStop
parameter_list|()
throws|throws
name|Exception
block|{
name|NullService
name|service
init|=
operator|new
name|NullService
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|shutDownCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|executorThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|thrownByExecutorThread
argument_list|)
expr_stmt|;
block|}
DECL|method|testServiceToString ()
specifier|public
name|void
name|testServiceToString
parameter_list|()
throws|throws
name|Exception
block|{
name|NullService
name|service
init|=
operator|new
name|NullService
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"NullService ["
operator|+
name|Service
operator|.
name|State
operator|.
name|NEW
operator|+
literal|"]"
argument_list|,
name|service
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NullService ["
operator|+
name|Service
operator|.
name|State
operator|.
name|RUNNING
operator|+
literal|"]"
argument_list|,
name|service
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NullService ["
operator|+
name|Service
operator|.
name|State
operator|.
name|TERMINATED
operator|+
literal|"]"
argument_list|,
name|service
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeout ()
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a service whose executor will never run its commands
name|Service
name|service
init|=
operator|new
name|NullService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Executor
name|executor
parameter_list|(
name|Service
operator|.
name|State
name|state
parameter_list|)
block|{
return|return
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{           }
block|}
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|service
operator|.
name|start
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|State
operator|.
name|STARTING
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NullService
specifier|private
class|class
name|NullService
extends|extends
name|AbstractIdleService
block|{
DECL|field|startUpCalled
name|boolean
name|startUpCalled
init|=
literal|false
decl_stmt|;
DECL|field|shutDownCalled
name|boolean
name|shutDownCalled
init|=
literal|false
decl_stmt|;
DECL|field|expectedShutdownState
name|State
name|expectedShutdownState
init|=
name|State
operator|.
name|STOPPING
decl_stmt|;
DECL|method|startUp ()
annotation|@
name|Override
specifier|protected
name|void
name|startUp
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|startUpCalled
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|STARTING
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shutDown ()
annotation|@
name|Override
specifier|protected
name|void
name|shutDown
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
name|shutDownCalled
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedShutdownState
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|executor (Service.State state)
annotation|@
name|Override
specifier|protected
name|Executor
name|executor
parameter_list|(
name|Service
operator|.
name|State
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|STARTING
case|:
name|assertFalse
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
case|case
name|STOPPING
case|:
name|assertTrue
argument_list|(
name|startUpCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shutDownCalled
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected state "
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

