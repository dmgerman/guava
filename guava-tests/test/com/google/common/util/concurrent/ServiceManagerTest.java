begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ServiceManager}.  *  * @author Luke Sandberg  * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|ServiceManagerTest
specifier|public
class|class
name|ServiceManagerTest
extends|extends
name|TestCase
block|{
DECL|class|NoOpService
specifier|private
specifier|static
class|class
name|NoOpService
extends|extends
name|AbstractService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * A NoOp service that will delay the startup and shutdown notification for a configurable amount    * of time.    */
DECL|class|NoOpDelayedSerivce
specifier|private
specifier|static
class|class
name|NoOpDelayedSerivce
extends|extends
name|NoOpService
block|{
DECL|field|delay
specifier|private
name|long
name|delay
decl_stmt|;
DECL|method|NoOpDelayedSerivce (long delay)
specifier|public
name|NoOpDelayedSerivce
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FailStartService
specifier|private
specifier|static
class|class
name|FailStartService
extends|extends
name|NoOpService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|notifyFailed
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailRunService
specifier|private
specifier|static
class|class
name|FailRunService
extends|extends
name|NoOpService
block|{
DECL|method|doStart ()
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|notifyFailed
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailStopService
specifier|private
specifier|static
class|class
name|FailStopService
extends|extends
name|NoOpService
block|{
DECL|method|doStop ()
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|notifyFailed
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testServiceStartupTimes ()
specifier|public
name|void
name|testServiceStartupTimes
parameter_list|()
block|{
name|Service
name|a
init|=
operator|new
name|NoOpDelayedSerivce
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|Service
name|b
init|=
operator|new
name|NoOpDelayedSerivce
argument_list|(
literal|353
argument_list|)
decl_stmt|;
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitHealthy
argument_list|()
expr_stmt|;
name|ImmutableMap
argument_list|<
name|Service
argument_list|,
name|Long
argument_list|>
name|startupTimes
init|=
name|serviceManager
operator|.
name|startupTimes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|startupTimes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|startupTimes
operator|.
name|get
argument_list|(
name|a
argument_list|)
operator|>=
literal|150
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|startupTimes
operator|.
name|get
argument_list|(
name|b
argument_list|)
operator|>=
literal|353
argument_list|)
expr_stmt|;
block|}
DECL|method|testServiceStartStop ()
specifier|public
name|void
name|testServiceStartStop
parameter_list|()
block|{
name|Service
name|a
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Service
name|b
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|ServiceManager
name|manager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|RecordingListener
name|listener
init|=
operator|new
name|RecordingListener
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|NEW
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|manager
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitHealthy
argument_list|()
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|healthyCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|stoppedCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|failedServices
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitStopped
argument_list|()
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|manager
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|stoppedCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|failedServices
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailStart ()
specifier|public
name|void
name|testFailStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|a
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Service
name|b
init|=
operator|new
name|FailStartService
argument_list|()
decl_stmt|;
name|Service
name|c
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Service
name|d
init|=
operator|new
name|FailStartService
argument_list|()
decl_stmt|;
name|Service
name|e
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|ServiceManager
name|manager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|RecordingListener
name|listener
init|=
operator|new
name|RecordingListener
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|NEW
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitHealthy
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|listener
operator|.
name|healthyCalled
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|a
argument_list|,
name|c
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
argument_list|,
name|listener
operator|.
name|failedServices
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|manager
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitStopped
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|manager
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|healthyCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|stoppedCalled
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailRun ()
specifier|public
name|void
name|testFailRun
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|a
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Service
name|b
init|=
operator|new
name|FailRunService
argument_list|()
decl_stmt|;
name|ServiceManager
name|manager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|RecordingListener
name|listener
init|=
operator|new
name|RecordingListener
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|NEW
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitHealthy
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertTrue
argument_list|(
name|listener
operator|.
name|healthyCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
name|b
argument_list|)
argument_list|,
name|listener
operator|.
name|failedServices
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitStopped
argument_list|()
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|stoppedCalled
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailStop ()
specifier|public
name|void
name|testFailStop
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|a
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Service
name|b
init|=
operator|new
name|FailStopService
argument_list|()
decl_stmt|;
name|Service
name|c
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|ServiceManager
name|manager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|RecordingListener
name|listener
init|=
operator|new
name|RecordingListener
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|startAsync
argument_list|()
operator|.
name|awaitHealthy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|healthyCalled
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|stoppedCalled
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stopAsync
argument_list|()
operator|.
name|awaitStopped
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|stoppedCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|of
argument_list|(
name|b
argument_list|)
argument_list|,
name|listener
operator|.
name|failedServices
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|FAILED
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertState
argument_list|(
name|manager
argument_list|,
name|Service
operator|.
name|State
operator|.
name|TERMINATED
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|a
init|=
operator|new
name|NoOpService
argument_list|()
decl_stmt|;
name|Service
name|b
init|=
operator|new
name|FailStartService
argument_list|()
decl_stmt|;
name|ServiceManager
name|manager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|toString
init|=
name|manager
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|toString
operator|.
name|contains
argument_list|(
literal|"NoOpService"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|toString
operator|.
name|contains
argument_list|(
literal|"FailStartService"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeouts ()
specifier|public
name|void
name|testTimeouts
parameter_list|()
block|{
name|Service
name|a
init|=
operator|new
name|NoOpDelayedSerivce
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|ServiceManager
name|manager
init|=
operator|new
name|ServiceManager
argument_list|(
name|of
argument_list|(
name|a
argument_list|)
argument_list|)
decl_stmt|;
name|manager
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|manager
operator|.
name|awaitHealthy
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|awaitHealthy
argument_list|(
literal|50
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|manager
operator|.
name|awaitStopped
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|manager
operator|.
name|awaitStopped
argument_list|(
literal|50
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertState (ServiceManager manager, Service.State state, Service... services)
specifier|private
name|void
name|assertState
parameter_list|(
name|ServiceManager
name|manager
parameter_list|,
name|Service
operator|.
name|State
name|state
parameter_list|,
name|Service
modifier|...
name|services
parameter_list|)
block|{
name|Collection
argument_list|<
name|Service
argument_list|>
name|managerServices
init|=
name|manager
operator|.
name|servicesByState
argument_list|()
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|assertEquals
argument_list|(
name|service
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|,
name|service
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|toString
argument_list|()
argument_list|,
name|service
operator|.
name|isRunning
argument_list|()
argument_list|,
name|state
operator|==
name|Service
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|managerServices
operator|+
literal|" should contain "
operator|+
name|service
operator|.
name|toString
argument_list|()
argument_list|,
name|managerServices
operator|.
name|contains
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RecordingListener
specifier|private
specifier|static
specifier|final
class|class
name|RecordingListener
implements|implements
name|ServiceManager
operator|.
name|Listener
block|{
DECL|field|healthyCalled
specifier|volatile
name|boolean
name|healthyCalled
decl_stmt|;
DECL|field|stoppedCalled
specifier|volatile
name|boolean
name|stoppedCalled
decl_stmt|;
DECL|field|failedServices
specifier|final
name|Set
argument_list|<
name|Service
argument_list|>
name|failedServices
init|=
name|Sets
operator|.
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
DECL|method|healthy ()
annotation|@
name|Override
specifier|public
name|void
name|healthy
parameter_list|()
block|{
name|healthyCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|stopped ()
annotation|@
name|Override
specifier|public
name|void
name|stopped
parameter_list|()
block|{
name|stoppedCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|failure (Service service)
annotation|@
name|Override
specifier|public
name|void
name|failure
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|failedServices
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

