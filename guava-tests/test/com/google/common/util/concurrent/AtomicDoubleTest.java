begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Written by Doug Lea and Martin Buchholz with assistance from  * members of JCP JSR-166 Expert Group and released to the public  * domain, as explained at  * http://creativecommons.org/publicdomain/zero/1.0/  */
end_comment

begin_comment
comment|/*  * Source:  * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck-jsr166e/AtomicDoubleTest.java?revision=1.8  * (Modified to adapt to guava coding conventions)  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link AtomicDouble}.  */
end_comment

begin_class
DECL|class|AtomicDoubleTest
specifier|public
class|class
name|AtomicDoubleTest
extends|extends
name|JSR166TestCase
block|{
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|VALUES
init|=
block|{
name|Double
operator|.
name|NEGATIVE_INFINITY
block|,
operator|-
name|Double
operator|.
name|MAX_VALUE
block|,
operator|(
name|double
operator|)
name|Long
operator|.
name|MIN_VALUE
block|,
operator|(
name|double
operator|)
name|Integer
operator|.
name|MIN_VALUE
block|,
operator|-
name|Math
operator|.
name|PI
block|,
operator|-
literal|1.0
block|,
operator|-
name|Double
operator|.
name|MIN_VALUE
block|,
operator|-
literal|0.0
block|,
operator|+
literal|0.0
block|,
name|Double
operator|.
name|MIN_VALUE
block|,
literal|1.0
block|,
name|Math
operator|.
name|PI
block|,
operator|(
name|double
operator|)
name|Integer
operator|.
name|MAX_VALUE
block|,
operator|(
name|double
operator|)
name|Long
operator|.
name|MAX_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|,
name|Double
operator|.
name|POSITIVE_INFINITY
block|,
name|Double
operator|.
name|NaN
block|,
name|Float
operator|.
name|MAX_VALUE
block|,   }
decl_stmt|;
comment|/** The notion of equality used by AtomicDouble */
DECL|method|bitEquals (double x, double y)
specifier|static
name|boolean
name|bitEquals
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
return|return
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|x
argument_list|)
operator|==
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|y
argument_list|)
return|;
block|}
DECL|method|assertBitEquals (double x, double y)
specifier|static
name|void
name|assertBitEquals
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|x
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * constructor initializes to given value    */
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|AtomicDouble
name|a
init|=
operator|new
name|AtomicDouble
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|a
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * default constructed initializes to zero    */
DECL|method|testConstructor2 ()
specifier|public
name|void
name|testConstructor2
parameter_list|()
block|{
name|AtomicDouble
name|a
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|assertBitEquals
argument_list|(
literal|0.0
argument_list|,
name|a
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * get returns the last value set    */
DECL|method|testGetSet ()
specifier|public
name|void
name|testGetSet
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
name|assertBitEquals
argument_list|(
literal|1.0
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * get returns the last value lazySet in same thread    */
DECL|method|testGetLazySet ()
specifier|public
name|void
name|testGetLazySet
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
name|assertBitEquals
argument_list|(
literal|1.0
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|lazySet
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * compareAndSet succeeds in changing value if equal to expected else fails    */
DECL|method|testCompareAndSet ()
specifier|public
name|void
name|testCompareAndSet
parameter_list|()
block|{
name|double
name|prev
init|=
name|Math
operator|.
name|E
decl_stmt|;
name|double
name|unused
init|=
name|Math
operator|.
name|E
operator|+
name|Math
operator|.
name|PI
decl_stmt|;
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
name|prev
argument_list|)
decl_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|assertBitEquals
argument_list|(
name|prev
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|at
operator|.
name|compareAndSet
argument_list|(
name|unused
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|prev
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|at
operator|.
name|compareAndSet
argument_list|(
name|prev
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prev
operator|=
name|x
expr_stmt|;
block|}
block|}
comment|/**    * compareAndSet in one thread enables another waiting for value    * to succeed    */
DECL|method|testCompareAndSetInMultipleThreads ()
specifier|public
name|void
name|testCompareAndSetInMultipleThreads
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
name|newStartedThread
argument_list|(
operator|new
name|CheckedRunnable
argument_list|()
block|{
specifier|public
name|void
name|realRun
parameter_list|()
block|{
while|while
condition|(
operator|!
name|at
operator|.
name|compareAndSet
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|at
operator|.
name|compareAndSet
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|awaitTermination
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
literal|3.0
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * repeated weakCompareAndSet succeeds in changing value when equal    * to expected    */
DECL|method|testWeakCompareAndSet ()
specifier|public
name|void
name|testWeakCompareAndSet
parameter_list|()
block|{
name|double
name|prev
init|=
name|Math
operator|.
name|E
decl_stmt|;
name|double
name|unused
init|=
name|Math
operator|.
name|E
operator|+
name|Math
operator|.
name|PI
decl_stmt|;
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
name|prev
argument_list|)
decl_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|assertBitEquals
argument_list|(
name|prev
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|at
operator|.
name|weakCompareAndSet
argument_list|(
name|unused
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|prev
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|at
operator|.
name|weakCompareAndSet
argument_list|(
name|prev
argument_list|,
name|x
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prev
operator|=
name|x
expr_stmt|;
block|}
block|}
comment|/**    * getAndSet returns previous value and sets to given value    */
DECL|method|testGetAndSet ()
specifier|public
name|void
name|testGetAndSet
parameter_list|()
block|{
name|double
name|prev
init|=
name|Math
operator|.
name|E
decl_stmt|;
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
name|prev
argument_list|)
decl_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|assertBitEquals
argument_list|(
name|prev
argument_list|,
name|at
operator|.
name|getAndSet
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|prev
operator|=
name|x
expr_stmt|;
block|}
block|}
comment|/**    * getAndAdd returns previous value and adds given value    */
DECL|method|testGetAndAdd ()
specifier|public
name|void
name|testGetAndAdd
parameter_list|()
block|{
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
for|for
control|(
name|double
name|y
range|:
name|VALUES
control|)
block|{
name|AtomicDouble
name|a
init|=
operator|new
name|AtomicDouble
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|double
name|z
init|=
name|a
operator|.
name|getAndAdd
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|x
operator|+
name|y
argument_list|,
name|a
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * addAndGet adds given value to current, and returns current value    */
DECL|method|testAddAndGet ()
specifier|public
name|void
name|testAddAndGet
parameter_list|()
block|{
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
for|for
control|(
name|double
name|y
range|:
name|VALUES
control|)
block|{
name|AtomicDouble
name|a
init|=
operator|new
name|AtomicDouble
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|double
name|z
init|=
name|a
operator|.
name|addAndGet
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|assertBitEquals
argument_list|(
name|x
operator|+
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|x
operator|+
name|y
argument_list|,
name|a
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * a deserialized serialized atomic holds same value    */
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicDouble
name|a
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|AtomicDouble
name|b
init|=
name|serialClone
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|a
operator|.
name|set
argument_list|(
operator|-
literal|22.0
argument_list|)
expr_stmt|;
name|AtomicDouble
name|c
init|=
name|serialClone
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
operator|-
literal|22.0
argument_list|,
name|a
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
literal|0.0
argument_list|,
name|b
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
operator|-
literal|22.0
argument_list|,
name|c
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|AtomicDouble
name|d
init|=
operator|new
name|AtomicDouble
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|assertBitEquals
argument_list|(
name|serialClone
argument_list|(
name|d
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|d
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * toString returns current value    */
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0.0"
argument_list|,
name|at
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|x
argument_list|)
argument_list|,
name|at
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * intValue returns current value.    */
DECL|method|testIntValue ()
specifier|public
name|void
name|testIntValue
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|at
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|x
argument_list|,
name|at
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * longValue returns current value.    */
DECL|method|testLongValue ()
specifier|public
name|void
name|testLongValue
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|at
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|x
argument_list|,
name|at
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * floatValue returns current value.    */
DECL|method|testFloatValue ()
specifier|public
name|void
name|testFloatValue
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|at
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|float
operator|)
name|x
argument_list|,
name|at
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * doubleValue returns current value.    */
DECL|method|testDoubleValue ()
specifier|public
name|void
name|testDoubleValue
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0d
argument_list|,
name|at
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
name|at
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
name|x
argument_list|,
name|at
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * compareAndSet treats +0.0 and -0.0 as distinct values    */
DECL|method|testDistinctZeros ()
specifier|public
name|void
name|testDistinctZeros
parameter_list|()
block|{
name|AtomicDouble
name|at
init|=
operator|new
name|AtomicDouble
argument_list|(
operator|+
literal|0.0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|at
operator|.
name|compareAndSet
argument_list|(
operator|-
literal|0.0
argument_list|,
literal|7.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|at
operator|.
name|weakCompareAndSet
argument_list|(
operator|-
literal|0.0
argument_list|,
literal|7.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
operator|+
literal|0.0
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|at
operator|.
name|compareAndSet
argument_list|(
operator|+
literal|0.0
argument_list|,
operator|-
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
operator|-
literal|0.0
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|at
operator|.
name|compareAndSet
argument_list|(
operator|+
literal|0.0
argument_list|,
literal|7.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|at
operator|.
name|weakCompareAndSet
argument_list|(
operator|+
literal|0.0
argument_list|,
literal|7.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitEquals
argument_list|(
operator|-
literal|0.0
argument_list|,
name|at
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

