begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License. You may obtain a copy of  * the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|newDirectExecutorService
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Runnables
operator|.
name|doNothing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Test for {@link WrappingExecutorService}  *   * @author Chris Nokleberg  */
end_comment

begin_class
DECL|class|WrappingExecutorServiceTest
specifier|public
class|class
name|WrappingExecutorServiceTest
extends|extends
name|TestCase
block|{
DECL|field|RESULT_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|RESULT_VALUE
init|=
literal|"ran"
decl_stmt|;
comment|// Uninteresting delegations
DECL|method|testDelegations ()
specifier|public
name|void
name|testDelegations
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|testExecutor
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"awaitTermination"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testExecutor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"isTerminated"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testExecutor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"isShutdown"
argument_list|)
expr_stmt|;
name|testExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|list
init|=
name|testExecutor
operator|.
name|shutdownNow
argument_list|()
decl_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"shutdownNow"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecute ()
specifier|public
name|void
name|testExecute
parameter_list|()
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|testExecutor
operator|.
name|execute
argument_list|(
name|doNothing
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"execute"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubmit ()
specifier|public
name|void
name|testSubmit
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|f
init|=
name|testExecutor
operator|.
name|submit
argument_list|(
name|doNothing
argument_list|()
argument_list|)
decl_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"submit"
argument_list|)
expr_stmt|;
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|f
init|=
name|testExecutor
operator|.
name|submit
argument_list|(
name|doNothing
argument_list|()
argument_list|,
name|RESULT_VALUE
argument_list|)
decl_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"submit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RESULT_VALUE
argument_list|,
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|String
argument_list|>
name|task
init|=
name|Callables
operator|.
name|returning
argument_list|(
name|RESULT_VALUE
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|f
init|=
name|testExecutor
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"submit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RESULT_VALUE
argument_list|,
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvokeAll ()
specifier|public
name|void
name|testInvokeAll
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|tasks
init|=
name|createTasks
argument_list|(
literal|3
argument_list|)
decl_stmt|;
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|testExecutor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"invokeAll"
argument_list|)
expr_stmt|;
name|checkResults
argument_list|(
name|futures
argument_list|)
expr_stmt|;
block|}
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TimeUnit
name|unit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
name|long
name|timeout
init|=
literal|5
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|testExecutor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|mock
operator|.
name|assertMethodWithTimeout
argument_list|(
literal|"invokeAll"
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|checkResults
argument_list|(
name|futures
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvokeAny ()
specifier|public
name|void
name|testInvokeAny
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|tasks
init|=
name|createTasks
argument_list|(
literal|3
argument_list|)
decl_stmt|;
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|testExecutor
operator|.
name|invokeAny
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ran0"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertLastMethodCalled
argument_list|(
literal|"invokeAny"
argument_list|)
expr_stmt|;
block|}
block|{
name|MockExecutor
name|mock
init|=
operator|new
name|MockExecutor
argument_list|()
decl_stmt|;
name|TimeUnit
name|unit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
name|long
name|timeout
init|=
literal|5
decl_stmt|;
name|TestExecutor
name|testExecutor
init|=
operator|new
name|TestExecutor
argument_list|(
name|mock
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|testExecutor
operator|.
name|invokeAny
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RESULT_VALUE
operator|+
literal|"0"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertMethodWithTimeout
argument_list|(
literal|"invokeAny"
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkResults (List<Future<String>> futures)
specifier|private
specifier|static
name|void
name|checkResults
parameter_list|(
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|futures
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|RESULT_VALUE
operator|+
name|i
argument_list|,
name|futures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTasks (int n)
specifier|private
specifier|static
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|createTasks
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|>
name|callables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
name|Callables
operator|.
name|returning
argument_list|(
name|RESULT_VALUE
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|callables
return|;
block|}
DECL|class|WrappedCallable
specifier|private
specifier|static
specifier|final
class|class
name|WrappedCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
DECL|method|WrappedCallable (Callable<T> delegate)
specifier|public
name|WrappedCallable
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|delegate
operator|.
name|call
argument_list|()
return|;
block|}
block|}
DECL|class|WrappedRunnable
specifier|private
specifier|static
specifier|final
class|class
name|WrappedRunnable
implements|implements
name|Runnable
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Runnable
name|delegate
decl_stmt|;
DECL|method|WrappedRunnable (Runnable delegate)
specifier|public
name|WrappedRunnable
parameter_list|(
name|Runnable
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|delegate
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TestExecutor
specifier|private
specifier|static
specifier|final
class|class
name|TestExecutor
extends|extends
name|WrappingExecutorService
block|{
DECL|method|TestExecutor (MockExecutor mock)
specifier|public
name|TestExecutor
parameter_list|(
name|MockExecutor
name|mock
parameter_list|)
block|{
name|super
argument_list|(
name|mock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|wrapTask (Callable<T> callable)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|Callable
argument_list|<
name|T
argument_list|>
name|wrapTask
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|WrappedCallable
argument_list|<
name|T
argument_list|>
argument_list|(
name|callable
argument_list|)
return|;
block|}
DECL|method|wrapTask (Runnable command)
annotation|@
name|Override
specifier|protected
name|Runnable
name|wrapTask
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
return|return
operator|new
name|WrappedRunnable
argument_list|(
name|command
argument_list|)
return|;
block|}
block|}
comment|// TODO: If this test can ever depend on EasyMock or the like, use it instead.
DECL|class|MockExecutor
specifier|private
specifier|static
specifier|final
class|class
name|MockExecutor
implements|implements
name|ExecutorService
block|{
DECL|field|lastMethodCalled
specifier|private
name|String
name|lastMethodCalled
init|=
literal|""
decl_stmt|;
DECL|field|lastTimeoutInMillis
specifier|private
name|long
name|lastTimeoutInMillis
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|inline
specifier|private
name|ExecutorService
name|inline
init|=
name|newDirectExecutorService
argument_list|()
decl_stmt|;
DECL|method|assertLastMethodCalled (String method)
specifier|public
name|void
name|assertLastMethodCalled
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|method
argument_list|,
name|lastMethodCalled
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMethodWithTimeout (String method, long timeout, TimeUnit unit)
specifier|public
name|void
name|assertMethodWithTimeout
parameter_list|(
name|String
name|method
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|assertLastMethodCalled
argument_list|(
name|method
operator|+
literal|"Timeout"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
argument_list|,
name|lastTimeoutInMillis
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|lastMethodCalled
operator|=
literal|"awaitTermination"
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|invokeAll (Collection<? extends Callable<T>> tasks)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|lastMethodCalled
operator|=
literal|"invokeAll"
expr_stmt|;
name|assertTaskWrapped
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
return|return
name|inline
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|invokeAll ( Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertTaskWrapped
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|lastMethodCalled
operator|=
literal|"invokeAllTimeout"
expr_stmt|;
name|lastTimeoutInMillis
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|inline
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
comment|// Define the invokeAny methods to invoke the first task
annotation|@
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertTaskWrapped
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|lastMethodCalled
operator|=
literal|"invokeAny"
expr_stmt|;
return|return
name|inline
operator|.
name|submit
argument_list|(
name|Iterables
operator|.
name|get
argument_list|(
name|tasks
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|assertTaskWrapped
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|lastMethodCalled
operator|=
literal|"invokeAnyTimeout"
expr_stmt|;
name|lastTimeoutInMillis
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|inline
operator|.
name|submit
argument_list|(
name|Iterables
operator|.
name|get
argument_list|(
name|tasks
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
name|lastMethodCalled
operator|=
literal|"isShutdown"
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
name|lastMethodCalled
operator|=
literal|"isTerminated"
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|lastMethodCalled
operator|=
literal|"shutdown"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
name|lastMethodCalled
operator|=
literal|"shutdownNow"
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Callable<T> task)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
block|{
name|lastMethodCalled
operator|=
literal|"submit"
expr_stmt|;
name|assertThat
argument_list|(
name|task
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WrappedCallable
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|inline
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task)
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
name|lastMethodCalled
operator|=
literal|"submit"
expr_stmt|;
name|assertThat
argument_list|(
name|task
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WrappedRunnable
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|inline
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task, T result)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|T
name|result
parameter_list|)
block|{
name|lastMethodCalled
operator|=
literal|"submit"
expr_stmt|;
name|assertThat
argument_list|(
name|task
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WrappedRunnable
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|inline
operator|.
name|submit
argument_list|(
name|task
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute (Runnable command)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|lastMethodCalled
operator|=
literal|"execute"
expr_stmt|;
name|assertThat
argument_list|(
name|command
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WrappedRunnable
operator|.
name|class
argument_list|)
expr_stmt|;
name|inline
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTaskWrapped ( Collection<? extends Callable<T>> tasks)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertTaskWrapped
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
name|Predicate
argument_list|<
name|Object
argument_list|>
name|p
init|=
name|Predicates
operator|.
name|instanceOf
argument_list|(
name|WrappedCallable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|all
argument_list|(
name|tasks
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

