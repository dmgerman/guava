begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Tests that {@code AsyncSettableFuture} is a valid {@link ListenableFuture}  * that behaves itself as expected.  */
end_comment

begin_class
DECL|class|AsyncSettableFutureTest
specifier|public
class|class
name|AsyncSettableFutureTest
extends|extends
name|TestCase
block|{
DECL|class|Foo
specifier|private
specifier|static
class|class
name|Foo
block|{}
DECL|class|FooChild
specifier|private
specifier|static
class|class
name|FooChild
extends|extends
name|Foo
block|{}
comment|/** Tests the initial state of the future. */
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetValue ()
specifier|public
name|void
name|testSetValue
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|setValue
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
comment|// Later attempts to set the future should return false.
name|assertFalse
argument_list|(
name|future
operator|.
name|setValue
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|SettableFuture
operator|.
expr|<
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the future has been set properly.
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
operator|(
name|int
operator|)
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetException ()
specifier|public
name|void
name|testSetException
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|(
literal|"foobarbaz"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|setException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// Later attempts to set the future should return false.
name|assertFalse
argument_list|(
name|future
operator|.
name|setValue
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"quux"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|SettableFuture
operator|.
name|create
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the future has been set properly.
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|assertSame
argument_list|(
name|e
argument_list|,
name|ee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetFuture ()
specifier|public
name|void
name|testSetFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|nested
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|nested
argument_list|)
argument_list|)
expr_stmt|;
comment|// Later attempts to set the future should return false.
name|assertFalse
argument_list|(
name|future
operator|.
name|setValue
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|SettableFuture
operator|.
expr|<
name|String
operator|>
name|create
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the future has been set properly.
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected TimeoutException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{
comment|/* expected */
block|}
name|nested
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFuture_genericsHierarchy ()
specifier|public
name|void
name|testSetFuture_genericsHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Foo
argument_list|>
name|future
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|FooChild
argument_list|>
name|nested
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|nested
argument_list|)
argument_list|)
expr_stmt|;
comment|// Later attempts to set the future should return false.
name|assertFalse
argument_list|(
name|future
operator|.
name|setValue
argument_list|(
operator|new
name|Foo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|setFuture
argument_list|(
name|SettableFuture
operator|.
expr|<
name|Foo
operator|>
name|create
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the future has been set properly.
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected TimeoutException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{
comment|/* expected */
block|}
name|FooChild
name|value
init|=
operator|new
name|FooChild
argument_list|()
decl_stmt|;
name|nested
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancel_innerCancelsAsync ()
specifier|public
name|void
name|testCancel_innerCancelsAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|async
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|Object
argument_list|>
name|inner
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|async
operator|.
name|setFuture
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|inner
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|async
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|async
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{
comment|/* expected */
block|}
block|}
DECL|method|testCancel_resultCancelsInner_interrupted ()
specifier|public
name|void
name|testCancel_resultCancelsInner_interrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|async
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|MyFuture
argument_list|<
name|Object
argument_list|>
name|inner
init|=
operator|new
name|MyFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|async
operator|.
name|setFuture
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inner
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inner
operator|.
name|myWasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|inner
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{
comment|/* expected */
block|}
block|}
DECL|method|testCancel_resultCancelsInner ()
specifier|public
name|void
name|testCancel_resultCancelsInner
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|async
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|MyFuture
argument_list|<
name|Object
argument_list|>
name|inner
init|=
operator|new
name|MyFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|async
operator|.
name|setFuture
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inner
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inner
operator|.
name|myWasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|inner
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected CancellationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{
comment|/* expected */
block|}
block|}
DECL|method|testCancel_beforeSet ()
specifier|public
name|void
name|testCancel_beforeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|async
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|async
operator|.
name|setValue
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancel_multipleBeforeSetFuture_noInterruptFirst ()
specifier|public
name|void
name|testCancel_multipleBeforeSetFuture_noInterruptFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|async
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MyFuture
argument_list|<
name|Object
argument_list|>
name|inner
init|=
operator|new
name|MyFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|async
operator|.
name|setFuture
argument_list|(
name|inner
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inner
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inner
operator|.
name|myWasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancel_multipleBeforeSetFuture_interruptFirst ()
specifier|public
name|void
name|testCancel_multipleBeforeSetFuture_interruptFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncSettableFuture
argument_list|<
name|Object
argument_list|>
name|async
init|=
name|AsyncSettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|async
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|MyFuture
argument_list|<
name|Object
argument_list|>
name|inner
init|=
operator|new
name|MyFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|async
operator|.
name|setFuture
argument_list|(
name|inner
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inner
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inner
operator|.
name|myWasInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyFuture
specifier|private
specifier|static
class|class
name|MyFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|myWasInterrupted ()
name|boolean
name|myWasInterrupted
parameter_list|()
block|{
comment|// we need a new method since wasInterrupted is final, so we can't increase its visibility.
return|return
name|wasInterrupted
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

