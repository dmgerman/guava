begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicIntegerFieldUpdater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceFieldUpdater
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests our AtomicHelper fallback strategy in AggregateFutureState.  *  *<p>On different platforms AggregateFutureState uses different strategies for its core  * synchronization primitives.  The strategies are all implemented as subtypes of AtomicHelper and  * the strategy is selected in the static initializer of AggregateFutureState.  This is convenient  * and performant but introduces some testing difficulties.   This test exercises the two fallback  * strategies.  *<ul>  *<li>SafeAtomicHelper: uses Atomic FieldsUpdaters to implement synchronization  *<li>SynchronizedHelper: uses {@code synchronized} blocks for synchronization  *</ul>  *  * To force selection of our fallback strategies we load {@link AggregateFutureState} (and all of  * {@code com.google.common.util.concurrent} in degenerate class loaders which make certain platform  * classes unavailable.  Then we construct a test suite so we can run the normal  * FuturesTest test methods in these degenerate classloaders.  */
end_comment

begin_class
DECL|class|AggregateFutureStateFallbackAtomicHelperTest
specifier|public
class|class
name|AggregateFutureStateFallbackAtomicHelperTest
extends|extends
name|TestCase
block|{
comment|/**    * This classloader blacklists AtomicReferenceFieldUpdater and AtomicIntegerFieldUpdate which will    * prevent us from selecting our {@code SafeAtomicHelper} strategy.    *    * Stashing this in a static field avoids loading it over and over again and speeds up test    * execution significantly.    */
DECL|field|NO_ATOMIC_FIELD_UPDATER
specifier|private
specifier|static
specifier|final
name|ClassLoader
name|NO_ATOMIC_FIELD_UPDATER
init|=
name|getClassLoader
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|AtomicIntegerFieldUpdater
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AtomicReferenceFieldUpdater
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|TestSuite
name|suite
parameter_list|()
block|{
comment|// we create a test suite containing a test for every FuturesTest test method and we
comment|// set it as the name of the test.  Then in runTest we can reflectively load and invoke the
comment|// corresponding method on FuturesTest in the correct classloader.
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|AggregateFutureStateFallbackAtomicHelperTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|FuturesTest
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|suite
operator|.
name|addTest
argument_list|(
name|TestSuite
operator|.
name|createTest
argument_list|(
name|AggregateFutureStateFallbackAtomicHelperTest
operator|.
name|class
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|suite
return|;
block|}
annotation|@
name|Override
DECL|method|runTest ()
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First ensure that our classloaders are intializing the correct helper versions
name|checkHelperVersion
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
literal|"SafeAtomicHelper"
argument_list|)
expr_stmt|;
name|checkHelperVersion
argument_list|(
name|NO_ATOMIC_FIELD_UPDATER
argument_list|,
literal|"SynchronizedAtomicHelper"
argument_list|)
expr_stmt|;
comment|// Run the corresponding FuturesTest test method in a new classloader that blacklists
comment|// certain core jdk classes.
name|ClassLoader
name|oldClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|NO_ATOMIC_FIELD_UPDATER
argument_list|)
expr_stmt|;
try|try
block|{
name|runTestMethod
argument_list|(
name|NO_ATOMIC_FIELD_UPDATER
argument_list|)
expr_stmt|;
comment|// TODO(lukes): assert that the logs are full of errors
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|oldClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTestMethod (ClassLoader classLoader)
specifier|private
name|void
name|runTestMethod
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|test
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|FuturesTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|testInstance
init|=
name|test
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|test
operator|.
name|getMethod
argument_list|(
literal|"setUp"
argument_list|)
operator|.
name|invoke
argument_list|(
name|testInstance
argument_list|)
expr_stmt|;
name|test
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|testInstance
argument_list|)
expr_stmt|;
name|test
operator|.
name|getMethod
argument_list|(
literal|"tearDown"
argument_list|)
operator|.
name|invoke
argument_list|(
name|testInstance
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHelperVersion (ClassLoader classLoader, String expectedHelperClassName)
specifier|private
name|void
name|checkHelperVersion
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|String
name|expectedHelperClassName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure we are actually running with the expected helper implementation
name|Class
argument_list|<
name|?
argument_list|>
name|abstractFutureClass
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|AggregateFutureState
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|helperField
init|=
name|abstractFutureClass
operator|.
name|getDeclaredField
argument_list|(
literal|"ATOMIC_HELPER"
argument_list|)
decl_stmt|;
name|helperField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedHelperClassName
argument_list|,
name|helperField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getClassLoader (final Set<String> blacklist)
specifier|private
specifier|static
name|ClassLoader
name|getClassLoader
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|)
block|{
specifier|final
name|String
name|concurrentPackage
init|=
name|SettableFuture
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ClassLoader
name|classLoader
init|=
name|AggregateFutureStateFallbackAtomicHelperTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
return|return
comment|// we delegate to the current classloader so both loaders agree on classes like TestCase
operator|new
name|URLClassLoader
argument_list|(
operator|(
operator|(
name|URLClassLoader
operator|)
name|classLoader
operator|)
operator|.
name|getURLs
argument_list|()
argument_list|,
name|classLoader
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|blacklist
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"I'm sorry Dave, I'm afraid I can't do that."
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|concurrentPackage
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|findLoadedClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|c
return|;
block|}
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

