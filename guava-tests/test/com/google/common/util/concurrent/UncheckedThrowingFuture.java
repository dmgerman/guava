begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * A {@link Future} implementation which always throws directly from calls to {@code get()} (i.e.  * not wrapped in {@code ExecutionException}. For just a normal failure, use {@link  * SettableFuture}).  *  *<p>Useful for testing the behavior of Future utilities against odd futures.  *  * @author Anthony Zana  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|UncheckedThrowingFuture
specifier|final
class|class
name|UncheckedThrowingFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|throwingError (Error error)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|throwingError
parameter_list|(
name|Error
name|error
parameter_list|)
block|{
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
name|future
init|=
operator|new
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|checkNotNull
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
DECL|method|throwingRuntimeException (RuntimeException e)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|throwingRuntimeException
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
name|future
init|=
operator|new
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|checkNotNull
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
DECL|method|incomplete ()
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
name|incomplete
parameter_list|()
block|{
return|return
operator|new
name|UncheckedThrowingFuture
argument_list|<
name|V
argument_list|>
argument_list|()
return|;
block|}
DECL|method|complete (RuntimeException e)
specifier|public
name|void
name|complete
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|setException
argument_list|(
operator|new
name|WrapperException
argument_list|(
name|checkNotNull
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Future was already complete: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
DECL|method|complete (Error e)
specifier|public
name|void
name|complete
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|setException
argument_list|(
operator|new
name|WrapperException
argument_list|(
name|checkNotNull
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Future was already complete: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
DECL|class|WrapperException
specifier|private
specifier|static
specifier|final
class|class
name|WrapperException
extends|extends
name|Exception
block|{
DECL|method|WrapperException (Throwable t)
name|WrapperException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rethrow (ExecutionException e)
specifier|private
specifier|static
name|void
name|rethrow
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|Throwable
name|wrapper
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|wrapper
operator|instanceof
name|WrapperException
condition|)
block|{
name|Throwable
name|cause
init|=
name|wrapper
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|cause
throw|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|super
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|rethrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unreachable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
try|try
block|{
name|super
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|rethrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unreachable"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

