begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_comment
comment|/**  * Tests for ThreadFactoryBuilder.  *  * @author Kurt Alfred Kluever  * @author Martin Buchholz  */
end_comment

begin_class
DECL|class|ThreadFactoryBuilderTest
specifier|public
class|class
name|ThreadFactoryBuilderTest
extends|extends
name|TestCase
block|{
DECL|field|monitoredRunnable
specifier|private
specifier|final
name|Runnable
name|monitoredRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|completed
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|UNCAUGHT_EXCEPTION_HANDLER
specifier|private
specifier|static
specifier|final
name|UncaughtExceptionHandler
name|UNCAUGHT_EXCEPTION_HANDLER
init|=
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
comment|// No-op
block|}
block|}
decl_stmt|;
DECL|field|builder
specifier|private
name|ThreadFactoryBuilder
name|builder
decl_stmt|;
DECL|field|completed
specifier|private
specifier|volatile
name|boolean
name|completed
init|=
literal|false
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|builder
operator|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|testThreadFactoryBuilder_defaults ()
specifier|public
name|void
name|testThreadFactoryBuilder_defaults
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ThreadFactory
name|threadFactory
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
name|threadFactory
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|checkThreadPoolName
argument_list|(
name|thread
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
name|defaultThread
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|defaultThread
operator|.
name|isDaemon
argument_list|()
argument_list|,
name|thread
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultThread
operator|.
name|getPriority
argument_list|()
argument_list|,
name|thread
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|defaultThread
operator|.
name|getThreadGroup
argument_list|()
argument_list|,
name|thread
operator|.
name|getThreadGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|defaultThread
operator|.
name|getUncaughtExceptionHandler
argument_list|()
argument_list|,
name|thread
operator|.
name|getUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|completed
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|completed
argument_list|)
expr_stmt|;
comment|// Creating a new thread from the same ThreadFactory will have the same
comment|// pool ID but a thread ID of 2.
name|Thread
name|thread2
init|=
name|threadFactory
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|checkThreadPoolName
argument_list|(
name|thread2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
argument_list|,
name|thread2
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Building again should give us a different pool ID.
name|ThreadFactory
name|threadFactory2
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Thread
name|thread3
init|=
name|threadFactory2
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|checkThreadPoolName
argument_list|(
name|thread3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|thread2
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|thread3
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkThreadPoolName (Thread thread, int threadId)
specifier|private
specifier|static
name|void
name|checkThreadPoolName
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|int
name|threadId
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"^pool-\\d+-thread-"
operator|+
name|threadId
operator|+
literal|"$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNameFormat_custom ()
specifier|public
name|void
name|testNameFormat_custom
parameter_list|()
block|{
specifier|final
name|String
name|NAME_FORMAT
init|=
literal|"super duper thread #%s"
decl_stmt|;
name|ThreadFactory
name|factory
init|=
name|builder
operator|.
name|setNameFormat
argument_list|(
name|NAME_FORMAT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|NAME_FORMAT
argument_list|,
name|i
argument_list|)
argument_list|,
name|factory
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDaemon_false ()
specifier|public
name|void
name|testDaemon_false
parameter_list|()
block|{
name|ThreadFactory
name|factory
init|=
name|builder
operator|.
name|setDaemon
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
name|factory
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|thread
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDaemon_true ()
specifier|public
name|void
name|testDaemon_true
parameter_list|()
block|{
name|ThreadFactory
name|factory
init|=
name|builder
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
name|factory
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|thread
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPriority_custom ()
specifier|public
name|void
name|testPriority_custom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|Thread
operator|.
name|MIN_PRIORITY
init|;
name|i
operator|<=
name|Thread
operator|.
name|MAX_PRIORITY
condition|;
name|i
operator|++
control|)
block|{
name|ThreadFactory
name|factory
init|=
name|builder
operator|.
name|setPriority
argument_list|(
name|i
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
name|factory
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|thread
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPriority_tooLow ()
specifier|public
name|void
name|testPriority_tooLow
parameter_list|()
block|{
try|try
block|{
name|builder
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPriority_tooHigh ()
specifier|public
name|void
name|testPriority_tooHigh
parameter_list|()
block|{
try|try
block|{
name|builder
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testUncaughtExceptionHandler_custom ()
specifier|public
name|void
name|testUncaughtExceptionHandler_custom
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|UNCAUGHT_EXCEPTION_HANDLER
argument_list|,
name|builder
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|UNCAUGHT_EXCEPTION_HANDLER
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildMutateBuild ()
specifier|public
name|void
name|testBuildMutateBuild
parameter_list|()
block|{
name|ThreadFactory
name|factory1
init|=
name|builder
operator|.
name|setPriority
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory1
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|ThreadFactory
name|factory2
init|=
name|builder
operator|.
name|setPriority
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory1
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|factory2
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildTwice ()
specifier|public
name|void
name|testBuildTwice
parameter_list|()
block|{
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// this is allowed
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// this is *also* allowed
block|}
DECL|method|testBuildMutate ()
specifier|public
name|void
name|testBuildMutate
parameter_list|()
block|{
name|ThreadFactory
name|factory1
init|=
name|builder
operator|.
name|setPriority
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory1
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPriority
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// change the state of the builder
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory1
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadFactory ()
specifier|public
name|void
name|testThreadFactory
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|THREAD_NAME
init|=
literal|"ludicrous speed"
decl_stmt|;
specifier|final
name|int
name|THREAD_PRIORITY
init|=
literal|1
decl_stmt|;
specifier|final
name|boolean
name|THREAD_DAEMON
init|=
literal|false
decl_stmt|;
name|ThreadFactory
name|backingThreadFactory
init|=
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|THREAD_NAME
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
name|THREAD_DAEMON
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|UNCAUGHT_EXCEPTION_HANDLER
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
name|builder
operator|.
name|setThreadFactory
argument_list|(
name|backingThreadFactory
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|newThread
argument_list|(
name|monitoredRunnable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|THREAD_NAME
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|THREAD_PRIORITY
argument_list|,
name|thread
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|THREAD_DAEMON
argument_list|,
name|thread
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|UNCAUGHT_EXCEPTION_HANDLER
argument_list|,
name|thread
operator|.
name|getUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Thread
operator|.
name|State
operator|.
name|NEW
argument_list|,
name|thread
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|completed
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|completed
argument_list|)
expr_stmt|;
block|}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
name|NullPointerTester
name|npTester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|npTester
operator|.
name|testAllPublicConstructors
argument_list|(
name|ThreadFactoryBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|npTester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ThreadFactoryBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|npTester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

