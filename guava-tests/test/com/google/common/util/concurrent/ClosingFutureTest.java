begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateCancelledFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateFailedFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|shutdownAndAwaitTermination
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
operator|.
name|awaitUninterruptibly
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
operator|.
name|getUninterruptibly
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|Reflection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|FailureStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|StandardSubjectBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|AsyncClosingFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|ClosingCallable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|ClosingFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner
operator|.
name|AsyncCombiningCallable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner
operator|.
name|CombiningCallable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner2
operator|.
name|AsyncClosingFunction2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner2
operator|.
name|ClosingFunction2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner3
operator|.
name|ClosingFunction3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner4
operator|.
name|ClosingFunction4
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Combiner5
operator|.
name|ClosingFunction5
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|DeferredCloser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|Peeker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|ValueAndCloser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ClosingFuture
operator|.
name|ValueAndCloserConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ClosingFuture}. Subclasses exercise either the {@link  * ClosingFuture#finishToFuture()} or {@link  * ClosingFuture#finishToValueAndCloser(ValueAndCloserConsumer, Executor)} paths to complete a  * {@link ClosingFuture} pipeline.  */
end_comment

begin_class
DECL|class|ClosingFutureTest
specifier|public
specifier|abstract
class|class
name|ClosingFutureTest
extends|extends
name|TestCase
block|{
comment|// TODO(dpb): Use Expect once that supports JUnit 3, or we can use JUnit 4.
DECL|field|failures
specifier|final
name|List
argument_list|<
name|AssertionError
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|expect
specifier|final
name|StandardSubjectBuilder
name|expect
init|=
name|StandardSubjectBuilder
operator|.
name|forCustomFailureStrategy
argument_list|(
operator|new
name|FailureStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|fail
parameter_list|(
name|AssertionError
name|failure
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|final
name|ListeningExecutorService
name|executor
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|newSingleThreadExecutor
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|closingExecutor
specifier|final
name|ExecutorService
name|closingExecutor
init|=
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
DECL|field|closeable1
specifier|final
name|TestCloseable
name|closeable1
init|=
operator|new
name|TestCloseable
argument_list|(
literal|"closeable1"
argument_list|)
decl_stmt|;
DECL|field|closeable2
specifier|final
name|TestCloseable
name|closeable2
init|=
operator|new
name|TestCloseable
argument_list|(
literal|"closeable2"
argument_list|)
decl_stmt|;
DECL|field|closeable3
specifier|final
name|TestCloseable
name|closeable3
init|=
operator|new
name|TestCloseable
argument_list|(
literal|"closeable3"
argument_list|)
decl_stmt|;
DECL|field|closeable4
specifier|final
name|TestCloseable
name|closeable4
init|=
operator|new
name|TestCloseable
argument_list|(
literal|"closeable4"
argument_list|)
decl_stmt|;
DECL|field|waiter
specifier|final
name|Waiter
name|waiter
init|=
operator|new
name|Waiter
argument_list|()
decl_stmt|;
DECL|field|futureCancelled
specifier|final
name|CountDownLatch
name|futureCancelled
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|exception
specifier|final
name|Exception
name|exception
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
DECL|field|mockCloseable
specifier|final
name|Closeable
name|mockCloseable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Closeable
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoExpectedFailures
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testFrom ()
specifier|public
name|void
name|testFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
name|Callables
operator|.
name|returning
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
return|return
literal|"value"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrom_failedInput ()
specifier|public
name|void
name|testFrom_failedInput
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFinallyFailsWithException
argument_list|(
name|failedClosingFuture
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrom_cancelledInput ()
specifier|public
name|void
name|testFrom_cancelledInput
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBecomesCanceled
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateCancelledFuture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEventuallyClosing ()
specifier|public
name|void
name|testEventuallyClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
return|return
literal|"value"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testEventuallyClosing_failedInput ()
specifier|public
name|void
name|testEventuallyClosing_failedInput
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFinallyFailsWithException
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|Futures
operator|.
expr|<
name|Closeable
operator|>
name|immediateFailedFuture
argument_list|(
name|exception
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEventuallyClosing_cancelledInput ()
specifier|public
name|void
name|testEventuallyClosing_cancelledInput
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBecomesCanceled
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|Futures
operator|.
expr|<
name|Closeable
operator|>
name|immediateCancelledFuture
argument_list|()
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEventuallyClosing_cancelledPipeline ()
specifier|public
name|void
name|testEventuallyClosing_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|Callable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
return|return
name|closeable1
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the callable returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testEventuallyClosing_throws ()
specifier|public
name|void
name|testEventuallyClosing_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFinallyFailsWithException
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubmit ()
specifier|public
name|void
name|testSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
return|return
literal|"value"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubmit_cancelledPipeline ()
specifier|public
name|void
name|testSubmit_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubmit_throws ()
specifier|public
name|void
name|testSubmit_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testAutoCloseable ()
specifier|public
name|void
name|testAutoCloseable
parameter_list|()
throws|throws
name|Exception
block|{
name|AutoCloseable
name|autoCloseable
init|=
name|closeable1
operator|::
name|close
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|autoCloseable
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatusFuture ()
specifier|public
name|void
name|testStatusFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|"value"
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|statusFuture
init|=
name|closingFuture
operator|.
name|statusFuture
argument_list|()
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statusFuture
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getUninterruptibly
argument_list|(
name|statusFuture
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testStatusFuture_failure ()
specifier|public
name|void
name|testStatusFuture_failure
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|statusFuture
init|=
name|closingFuture
operator|.
name|statusFuture
argument_list|()
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statusFuture
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertThatFutureFailsWithException
argument_list|(
name|statusFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatusFuture_cancelDoesNothing ()
specifier|public
name|void
name|testStatusFuture_cancelDoesNothing
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|"value"
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|statusFuture
init|=
name|closingFuture
operator|.
name|statusFuture
argument_list|()
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statusFuture
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|statusFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|statusFuture
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancel_caught ()
specifier|public
name|void
name|testCancel_caught
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|step0
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value 0"
argument_list|)
argument_list|)
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|step1
init|=
name|step0
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
literal|"value 1"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|Waiter
name|step2Waiter
init|=
operator|new
name|Waiter
argument_list|()
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|step2
init|=
name|step1
operator|.
name|transform
argument_list|(
name|step2Waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
literal|"value 2"
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|step3
init|=
name|step2
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
literal|"value 3"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|Waiter
name|step4Waiter
init|=
operator|new
name|Waiter
argument_list|()
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|step4
init|=
name|step3
operator|.
name|catching
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|,
name|step4Waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|CancellationException
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|CancellationException
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable4
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
literal|"value 4"
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
comment|// Pause in step 2.
name|step2Waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
comment|// Everything should still be open.
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|,
name|closeable4
argument_list|)
expr_stmt|;
comment|// Cancel step 3, resume step 2, and pause in step 4.
name|assertWithMessage
argument_list|(
literal|"step3.cancel()"
argument_list|)
operator|.
name|that
argument_list|(
name|step3
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|step2Waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|step4Waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
comment|// Step 1 is not cancelled because it was done.
name|assertWithMessage
argument_list|(
literal|"step1.statusFuture().isCancelled()"
argument_list|)
operator|.
name|that
argument_list|(
name|step1
operator|.
name|statusFuture
argument_list|()
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// But its closeable is closed.
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
comment|// Step 2 is cancelled because it wasn't complete.
name|assertWithMessage
argument_list|(
literal|"step2.statusFuture().isCancelled()"
argument_list|)
operator|.
name|that
argument_list|(
name|step2
operator|.
name|statusFuture
argument_list|()
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Its closeable is closed.
name|assertClosed
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
comment|// Step 3 was cancelled before it began
name|assertWithMessage
argument_list|(
literal|"step3.statusFuture().isCancelled()"
argument_list|)
operator|.
name|that
argument_list|(
name|step3
operator|.
name|statusFuture
argument_list|()
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Its closeable is still open.
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
comment|// Step 4 is not cancelled, because it caught the cancellation.
name|assertWithMessage
argument_list|(
literal|"step4.statusFuture().isCancelled()"
argument_list|)
operator|.
name|that
argument_list|(
name|step4
operator|.
name|statusFuture
argument_list|()
operator|.
name|isCancelled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Its closeable isn't closed yet.
name|assertStillOpen
argument_list|(
name|closeable4
argument_list|)
expr_stmt|;
comment|// Resume step 4 and complete.
name|step4Waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|step4
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value 4"
argument_list|)
expr_stmt|;
comment|// Step 4's closeable is now closed.
name|assertClosed
argument_list|(
name|closeable4
argument_list|)
expr_stmt|;
comment|// Step 3 still never ran, so its closeable should still be open.
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransform ()
specifier|public
name|void
name|testTransform
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
return|return
literal|"value"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransform_cancelledPipeline ()
specifier|public
name|void
name|testTransform_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|value
init|=
literal|"value"
decl_stmt|;
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
operator|.
name|transform
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable4
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable4
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransform_throws ()
specifier|public
name|void
name|testTransform_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformAsync ()
specifier|public
name|void
name|testTransformAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|transformAsync
argument_list|(
operator|new
name|AsyncClosingFunction
argument_list|<
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable3
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
return|return
literal|"value"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformAsync_cancelledPipeline ()
specifier|public
name|void
name|testTransformAsync_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|transformAsync
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|AsyncClosingFunction
argument_list|<
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable3
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the function returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformAsync_throws ()
specifier|public
name|void
name|testTransformAsync_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|transformAsync
argument_list|(
operator|new
name|AsyncClosingFunction
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformAsync_failed ()
specifier|public
name|void
name|testTransformAsync_failed
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|transformAsync
argument_list|(
operator|new
name|AsyncClosingFunction
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|failedClosingFuture
argument_list|()
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformAsync_withoutCloser ()
specifier|public
name|void
name|testTransformAsync_withoutCloser
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
operator|.
name|transformAsync
argument_list|(
name|ClosingFuture
operator|.
name|withoutCloser
argument_list|(
operator|new
name|AsyncFunction
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|TestCloseable
name|v
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
return|return
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllComplete_call ()
specifier|public
name|void
name|testWhenAllComplete_call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|input1
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|input2Failed
init|=
name|failedClosingFuture
argument_list|()
decl_stmt|;
specifier|final
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|nonInput
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|ClosingFuture
operator|.
name|Peeker
argument_list|>
name|capturedPeeker
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|input1
argument_list|,
name|input2Failed
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|CombiningCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|peeker
operator|.
name|getDone
argument_list|(
name|input1
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
try|try
block|{
name|peeker
operator|.
name|getDone
argument_list|(
name|input2Failed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Peeker.getDone() should fail for failed inputs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{                     }
try|try
block|{
name|peeker
operator|.
name|getDone
argument_list|(
name|nonInput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Peeker should not be able to peek into non-input ClosingFuture."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{                     }
name|capturedPeeker
operator|.
name|set
argument_list|(
name|peeker
argument_list|)
expr_stmt|;
return|return
name|closeable2
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
try|try
block|{
name|capturedPeeker
operator|.
name|get
argument_list|()
operator|.
name|getDone
argument_list|(
name|input1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Peeker should not be able to peek except during call."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testWhenAllComplete_call_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllComplete_call_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|CombiningCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllComplete_call_throws ()
specifier|public
name|void
name|testWhenAllComplete_call_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|CombiningCallable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllComplete_callAsync ()
specifier|public
name|void
name|testWhenAllComplete_callAsync
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|input1
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|input2Failed
init|=
name|failedClosingFuture
argument_list|()
decl_stmt|;
specifier|final
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|nonInput
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|ClosingFuture
operator|.
name|Peeker
argument_list|>
name|capturedPeeker
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|input1
argument_list|,
name|input2Failed
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
operator|new
name|AsyncCombiningCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|peeker
operator|.
name|getDone
argument_list|(
name|input1
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
try|try
block|{
name|peeker
operator|.
name|getDone
argument_list|(
name|input2Failed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Peeker should fail for failed inputs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{                     }
try|try
block|{
name|peeker
operator|.
name|getDone
argument_list|(
name|nonInput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Peeker should not be able to peek into non-input ClosingFuture."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{                     }
name|capturedPeeker
operator|.
name|set
argument_list|(
name|peeker
argument_list|)
expr_stmt|;
return|return
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
try|try
block|{
name|capturedPeeker
operator|.
name|get
argument_list|()
operator|.
name|getDone
argument_list|(
name|input1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Peeker should not be able to peek except during call."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testWhenAllComplete_callAsync_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllComplete_callAsync_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|AsyncCombiningCallable
argument_list|<
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable3
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllComplete_callAsync_throws ()
specifier|public
name|void
name|testWhenAllComplete_callAsync_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
operator|new
name|AsyncCombiningCallable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
comment|// We don't need to test the happy case for SuccessfulCombiner.call(Async) because it's the same
comment|// as Combiner.
DECL|method|testWhenAllSucceed_call_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed_call_failedInput
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFinallyFailsWithException
argument_list|(
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|CombiningCallable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed_callAsync_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed_callAsync_failedInput
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFinallyFailsWithException
argument_list|(
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
operator|new
name|AsyncCombiningCallable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Peeker
name|peeker
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_call ()
specifier|public
name|void
name|testWhenAllSucceed2_call
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable2
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_call_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed2_call_failedInput
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_call_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllSucceed2_call_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the function returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_call_throws ()
specifier|public
name|void
name|testWhenAllSucceed2_call_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_callAsync ()
specifier|public
name|void
name|testWhenAllSucceed2_callAsync
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
operator|new
name|AsyncClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable3
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_callAsync_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed2_callAsync_failedInput
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|)
operator|.
name|callAsync
argument_list|(
operator|new
name|AsyncClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_callAsync_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllSucceed2_callAsync_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|AsyncClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable3
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the function returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed2_callAsync_throws ()
specifier|public
name|void
name|testWhenAllSucceed2_callAsync_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|)
operator|.
name|callAsync
argument_list|(
operator|new
name|AsyncClosingFunction2
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed3_call ()
specifier|public
name|void
name|testWhenAllSucceed3_call
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction3
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|String
name|v2
parameter_list|,
name|String
name|v3
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v3
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value3"
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable2
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed3_call_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed3_call_failedInput
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction3
argument_list|<
name|TestCloseable
argument_list|,
name|Object
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|String
name|v3
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed3_call_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllSucceed3_call_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction3
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|,
name|String
name|v3
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the function returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed3_call_throws ()
specifier|public
name|void
name|testWhenAllSucceed3_call_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction3
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|,
name|String
name|v3
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed4_call ()
specifier|public
name|void
name|testWhenAllSucceed4_call
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction4
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|String
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v3
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v4
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value4"
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable2
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed4_call_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed4_call_failedInput
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction4
argument_list|<
name|TestCloseable
argument_list|,
name|Object
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed4_call_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllSucceed4_call_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction4
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the function returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed4_call_throws ()
specifier|public
name|void
name|testWhenAllSucceed4_call_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction4
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed5_call ()
specifier|public
name|void
name|testWhenAllSucceed5_call
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value5"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction5
argument_list|<
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|String
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|,
name|String
name|v5
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|v1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v3
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v4
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|v5
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value5"
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable2
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isSameInstanceAs
argument_list|(
name|closeable2
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed5_call_failedInput ()
specifier|public
name|void
name|testWhenAllSucceed5_call_failedInput
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|IOException
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|failedClosingFuture
argument_list|()
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value5"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction5
argument_list|<
name|TestCloseable
argument_list|,
name|Object
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|,
name|String
name|v5
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
operator|.
name|fail
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed5_call_cancelledPipeline ()
specifier|public
name|void
name|testWhenAllSucceed5_call_cancelledPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value5"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
name|waiter
operator|.
name|waitFor
argument_list|(
operator|new
name|ClosingFunction5
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|TestCloseable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCloseable
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|,
name|String
name|v5
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitUninterruptibly
argument_list|(
name|futureCancelled
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable1
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable2
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
return|return
name|closeable3
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|waiter
operator|.
name|awaitStarted
argument_list|()
expr_stmt|;
name|cancelFinalStepAndWait
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
comment|// not closed until the function returns
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|waiter
operator|.
name|awaitReturned
argument_list|()
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable1
argument_list|,
name|closeable2
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed5_call_throws ()
specifier|public
name|void
name|testWhenAllSucceed5_call_throws
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
name|closeable1
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|eventuallyClosing
argument_list|(
name|immediateFuture
argument_list|(
name|closeable2
argument_list|)
argument_list|,
name|closingExecutor
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value4"
argument_list|)
argument_list|)
argument_list|,
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value5"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|(
operator|new
name|ClosingFunction5
argument_list|<
name|TestCloseable
argument_list|,
name|TestCloseable
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|TestCloseable
name|v1
parameter_list|,
name|TestCloseable
name|v2
parameter_list|,
name|String
name|v3
parameter_list|,
name|String
name|v4
parameter_list|,
name|String
name|v5
parameter_list|)
throws|throws
name|Exception
block|{
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|closeable3
argument_list|,
name|closingExecutor
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertFinallyFailsWithException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertStillOpen
argument_list|(
name|closeable1
argument_list|)
expr_stmt|;
name|assertClosed
argument_list|(
name|closeable2
argument_list|,
name|closeable3
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransform_preventsFurtherOperations ()
specifier|public
name|void
name|testTransform_preventsFurtherOperations
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|"value2"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertFinalStepThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformAsync_preventsFurtherOperations ()
specifier|public
name|void
name|testTransformAsync_preventsFurtherOperations
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|transformAsync
argument_list|(
operator|new
name|AsyncClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertFinalStepThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testCatching_preventsFurtherOperations ()
specifier|public
name|void
name|testCatching_preventsFurtherOperations
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|catching
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|new
name|ClosingFunction
argument_list|<
name|Exception
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Exception
name|x
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|"value2"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertFinalStepThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testCatchingAsync_preventsFurtherOperations ()
specifier|public
name|void
name|testCatchingAsync_preventsFurtherOperations
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|catchingAsync
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|ClosingFuture
operator|.
name|withoutCloser
argument_list|(
operator|new
name|AsyncFunction
argument_list|<
name|Exception
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|Exception
name|x
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|immediateFuture
argument_list|(
literal|"value2"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertFinalStepThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllComplete_preventsFurtherOperations ()
specifier|public
name|void
name|testWhenAllComplete_preventsFurtherOperations
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|Combiner
name|unused
init|=
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|asList
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertFinalStepThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenAllSucceed_preventsFurtherOperations ()
specifier|public
name|void
name|testWhenAllSucceed_preventsFurtherOperations
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|Combiner
name|unused
init|=
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|asList
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|assertFinalStepThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDerivingThrowsIllegalStateException ( ClosingFuture<String> closingFuture)
specifier|protected
specifier|final
name|void
name|assertDerivingThrowsIllegalStateException
parameter_list|(
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
parameter_list|)
block|{
try|try
block|{
name|closingFuture
operator|.
name|transform
argument_list|(
operator|new
name|ClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer3
parameter_list|,
name|String
name|v1
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|"value3"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected5
parameter_list|)
block|{     }
try|try
block|{
name|closingFuture
operator|.
name|transformAsync
argument_list|(
operator|new
name|AsyncClosingFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer2
parameter_list|,
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected4
parameter_list|)
block|{     }
try|try
block|{
name|closingFuture
operator|.
name|catching
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|new
name|ClosingFunction
argument_list|<
name|Exception
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DeferredCloser
name|closer1
parameter_list|,
name|Exception
name|x1
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|"value3"
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected3
parameter_list|)
block|{     }
try|try
block|{
name|closingFuture
operator|.
name|catchingAsync
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|new
name|AsyncClosingFunction
argument_list|<
name|Exception
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|,
name|Exception
name|x
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected2
parameter_list|)
block|{     }
try|try
block|{
name|ClosingFuture
operator|.
name|whenAllComplete
argument_list|(
name|asList
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected1
parameter_list|)
block|{     }
try|try
block|{
name|ClosingFuture
operator|.
name|whenAllSucceed
argument_list|(
name|asList
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
comment|/** Asserts that marking this step a final step throws {@link IllegalStateException}. */
DECL|method|assertFinalStepThrowsIllegalStateException (ClosingFuture<?> closingFuture)
specifier|protected
name|void
name|assertFinalStepThrowsIllegalStateException
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
block|{
try|try
block|{
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|closingFuture
operator|.
name|finishToValueAndCloser
argument_list|(
operator|new
name|NoOpValueAndCloserConsumer
argument_list|<>
argument_list|()
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
comment|// Avoid infinite recursion if a closeable's close() method throws RejectedExecutionException and
comment|// is closed using the direct executor.
DECL|method|testCloseThrowsRejectedExecutionException ()
specifier|public
name|void
name|testCloseThrowsRejectedExecutionException
parameter_list|()
throws|throws
name|Exception
block|{
name|doThrow
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockCloseable
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ClosingFuture
argument_list|<
name|Closeable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|Closeable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Closeable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|mockCloseable
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getFinalValue
argument_list|(
name|closingFuture
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|mockCloseable
argument_list|)
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCloseable
argument_list|,
name|timeout
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Marks the given step final, waits for it to be finished, and returns the value.    *    * @throws ExecutionException if the step failed    * @throws CancellationException if the step was cancelled    */
DECL|method|getFinalValue (ClosingFuture<T> closingFuture)
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|getFinalValue
parameter_list|(
name|ClosingFuture
argument_list|<
name|T
argument_list|>
name|closingFuture
parameter_list|)
throws|throws
name|ExecutionException
function_decl|;
comment|/** Marks the given step final, cancels it, and waits for the cancellation to happen. */
DECL|method|cancelFinalStepAndWait (ClosingFuture<TestCloseable> closingFuture)
specifier|abstract
name|void
name|cancelFinalStepAndWait
parameter_list|(
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
parameter_list|)
function_decl|;
comment|/**    * Marks the given step final and waits for it to fail. Expects the failure exception to match    * {@link ClosingFutureTest#exception}.    */
DECL|method|assertFinallyFailsWithException (ClosingFuture<?> closingFuture)
specifier|abstract
name|void
name|assertFinallyFailsWithException
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
function_decl|;
comment|/** Waits for the given step to be canceled. */
DECL|method|assertBecomesCanceled (ClosingFuture<?> closingFuture)
specifier|abstract
name|void
name|assertBecomesCanceled
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
throws|throws
name|ExecutionException
function_decl|;
comment|/** Waits for the given step's closeables to be closed. */
DECL|method|waitUntilClosed (ClosingFuture<?> closingFuture)
name|void
name|waitUntilClosed
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|awaitUninterruptibly
argument_list|(
name|closingFuture
operator|.
name|whenClosedCountDown
argument_list|()
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests for {@link ClosingFuture} that exercise {@link ClosingFuture#finishToFuture()}. */
DECL|class|FinishToFutureTest
specifier|public
specifier|static
class|class
name|FinishToFutureTest
extends|extends
name|ClosingFutureTest
block|{
DECL|method|testFinishToFuture_throwsIfCalledTwice ()
specifier|public
name|void
name|testFinishToFuture_throwsIfCalledTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Closeable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|Closeable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Closeable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|mockCloseable
argument_list|,
name|executor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|FluentFuture
argument_list|<
name|Closeable
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
decl_stmt|;
try|try
block|{
name|FluentFuture
argument_list|<
name|Closeable
argument_list|>
name|unused2
init|=
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testFinishToFuture_throwsAfterCallingFinishToValueAndCloser ()
specifier|public
name|void
name|testFinishToFuture_throwsAfterCallingFinishToValueAndCloser
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Closeable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|Closeable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Closeable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|mockCloseable
argument_list|,
name|executor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|closingFuture
operator|.
name|finishToValueAndCloser
argument_list|(
operator|new
name|NoOpValueAndCloserConsumer
argument_list|<>
argument_list|()
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FluentFuture
argument_list|<
name|Closeable
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testFinishToFuture_preventsFurtherDerivation ()
specifier|public
name|void
name|testFinishToFuture_preventsFurtherDerivation
parameter_list|()
block|{
name|ClosingFuture
argument_list|<
name|String
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFuture
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|FluentFuture
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
decl_stmt|;
name|assertDerivingThrowsIllegalStateException
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFinalValue (ClosingFuture<T> closingFuture)
argument_list|<
name|T
argument_list|>
name|T
name|getFinalValue
parameter_list|(
name|ClosingFuture
argument_list|<
name|T
argument_list|>
name|closingFuture
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|getUninterruptibly
argument_list|(
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertFinallyFailsWithException (ClosingFuture<?> closingFuture)
name|void
name|assertFinallyFailsWithException
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
block|{
name|assertThatFutureFailsWithException
argument_list|(
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertBecomesCanceled (ClosingFuture<?> closingFuture)
name|void
name|assertBecomesCanceled
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|assertThatFutureBecomesCancelled
argument_list|(
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelFinalStepAndWait (ClosingFuture<TestCloseable> closingFuture)
name|void
name|cancelFinalStepAndWait
parameter_list|(
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
parameter_list|)
block|{
name|assertThat
argument_list|(
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|futureCancelled
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests for {@link ClosingFuture} that exercise {@link    * ClosingFuture#finishToValueAndCloser(ValueAndCloserConsumer, Executor)}.    */
DECL|class|FinishToValueAndCloserTest
specifier|public
specifier|static
class|class
name|FinishToValueAndCloserTest
extends|extends
name|ClosingFutureTest
block|{
DECL|field|finishToValueAndCloserExecutor
specifier|private
specifier|final
name|ExecutorService
name|finishToValueAndCloserExecutor
init|=
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
DECL|field|valueAndCloser
specifier|private
specifier|volatile
name|ValueAndCloser
argument_list|<
name|?
argument_list|>
name|valueAndCloser
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"finishToValueAndCloserExecutor was shut down"
argument_list|)
operator|.
name|that
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|finishToValueAndCloserExecutor
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|testFinishToValueAndCloser_throwsIfCalledTwice ()
specifier|public
name|void
name|testFinishToValueAndCloser_throwsIfCalledTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Closeable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|Closeable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Closeable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|mockCloseable
argument_list|,
name|executor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|closingFuture
operator|.
name|finishToValueAndCloser
argument_list|(
operator|new
name|NoOpValueAndCloserConsumer
argument_list|<>
argument_list|()
argument_list|,
name|finishToValueAndCloserExecutor
argument_list|)
expr_stmt|;
try|try
block|{
name|closingFuture
operator|.
name|finishToValueAndCloser
argument_list|(
operator|new
name|NoOpValueAndCloserConsumer
argument_list|<>
argument_list|()
argument_list|,
name|finishToValueAndCloserExecutor
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testFinishToValueAndCloser_throwsAfterCallingFinishToFuture ()
specifier|public
name|void
name|testFinishToValueAndCloser_throwsAfterCallingFinishToFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|ClosingFuture
argument_list|<
name|Closeable
argument_list|>
name|closingFuture
init|=
name|ClosingFuture
operator|.
name|submit
argument_list|(
operator|new
name|ClosingCallable
argument_list|<
name|Closeable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Closeable
name|call
parameter_list|(
name|DeferredCloser
name|closer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|closer
operator|.
name|eventuallyClose
argument_list|(
name|mockCloseable
argument_list|,
name|executor
argument_list|)
return|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|FluentFuture
argument_list|<
name|Closeable
argument_list|>
name|unused
init|=
name|closingFuture
operator|.
name|finishToFuture
argument_list|()
decl_stmt|;
try|try
block|{
name|closingFuture
operator|.
name|finishToValueAndCloser
argument_list|(
operator|new
name|NoOpValueAndCloserConsumer
argument_list|<>
argument_list|()
argument_list|,
name|finishToValueAndCloserExecutor
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
annotation|@
name|Override
DECL|method|getFinalValue (ClosingFuture<T> closingFuture)
argument_list|<
name|T
argument_list|>
name|T
name|getFinalValue
parameter_list|(
name|ClosingFuture
argument_list|<
name|T
argument_list|>
name|closingFuture
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|finishToValueAndCloser
argument_list|(
name|closingFuture
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|assertFinallyFailsWithException (ClosingFuture<?> closingFuture)
name|void
name|assertFinallyFailsWithException
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
block|{
name|assertThatFutureFailsWithException
argument_list|(
name|closingFuture
operator|.
name|statusFuture
argument_list|()
argument_list|)
expr_stmt|;
name|ValueAndCloser
argument_list|<
name|?
argument_list|>
name|valueAndCloser
init|=
name|finishToValueAndCloser
argument_list|(
name|closingFuture
argument_list|)
decl_stmt|;
try|try
block|{
name|valueAndCloser
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
name|valueAndCloser
operator|.
name|closeAsync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertBecomesCanceled (ClosingFuture<?> closingFuture)
name|void
name|assertBecomesCanceled
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|assertThatFutureBecomesCancelled
argument_list|(
name|closingFuture
operator|.
name|statusFuture
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|waitUntilClosed (ClosingFuture<?> closingFuture)
name|void
name|waitUntilClosed
parameter_list|(
name|ClosingFuture
argument_list|<
name|?
argument_list|>
name|closingFuture
parameter_list|)
block|{
if|if
condition|(
name|valueAndCloser
operator|!=
literal|null
condition|)
block|{
name|valueAndCloser
operator|.
name|closeAsync
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelFinalStepAndWait (ClosingFuture<TestCloseable> closingFuture)
name|void
name|cancelFinalStepAndWait
parameter_list|(
name|ClosingFuture
argument_list|<
name|TestCloseable
argument_list|>
name|closingFuture
parameter_list|)
block|{
name|assertThat
argument_list|(
name|closingFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ValueAndCloser
argument_list|<
name|?
argument_list|>
name|unused
init|=
name|finishToValueAndCloser
argument_list|(
name|closingFuture
argument_list|)
decl_stmt|;
name|waitUntilClosed
argument_list|(
name|closingFuture
argument_list|)
expr_stmt|;
name|futureCancelled
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|finishToValueAndCloser (ClosingFuture<V> closingFuture)
specifier|private
parameter_list|<
name|V
parameter_list|>
name|ValueAndCloser
argument_list|<
name|V
argument_list|>
name|finishToValueAndCloser
parameter_list|(
name|ClosingFuture
argument_list|<
name|V
argument_list|>
name|closingFuture
parameter_list|)
block|{
specifier|final
name|CountDownLatch
name|valueAndCloserSet
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|closingFuture
operator|.
name|finishToValueAndCloser
argument_list|(
operator|new
name|ValueAndCloserConsumer
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|ValueAndCloser
argument_list|<
name|V
argument_list|>
name|valueAndCloser
parameter_list|)
block|{
name|FinishToValueAndCloserTest
operator|.
name|this
operator|.
name|valueAndCloser
operator|=
name|valueAndCloser
expr_stmt|;
name|valueAndCloserSet
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|finishToValueAndCloserExecutor
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"valueAndCloser was set"
argument_list|)
operator|.
name|that
argument_list|(
name|awaitUninterruptibly
argument_list|(
name|valueAndCloserSet
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ValueAndCloser
argument_list|<
name|V
argument_list|>
name|valueAndCloserWithType
init|=
operator|(
name|ValueAndCloser
argument_list|<
name|V
argument_list|>
operator|)
name|valueAndCloser
decl_stmt|;
return|return
name|valueAndCloserWithType
return|;
block|}
block|}
DECL|method|assertThatFutureFailsWithException (Future<?> future)
name|void
name|assertThatFutureFailsWithException
parameter_list|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
try|try
block|{
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected future to fail: "
operator|+
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isSameInstanceAs
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertThatFutureBecomesCancelled (Future<?> future)
specifier|private
specifier|static
name|void
name|assertThatFutureBecomesCancelled
parameter_list|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
throws|throws
name|ExecutionException
block|{
try|try
block|{
name|getUninterruptibly
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected future to be canceled: "
operator|+
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|assertStillOpen (TestCloseable closeable1, TestCloseable... moreCloseables)
specifier|private
specifier|static
name|void
name|assertStillOpen
parameter_list|(
name|TestCloseable
name|closeable1
parameter_list|,
name|TestCloseable
modifier|...
name|moreCloseables
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TestCloseable
name|closeable
range|:
name|asList
argument_list|(
name|closeable1
argument_list|,
name|moreCloseables
argument_list|)
control|)
block|{
name|assertWithMessage
argument_list|(
literal|"%s.stillOpen()"
argument_list|,
name|closeable
argument_list|)
operator|.
name|that
argument_list|(
name|closeable
operator|.
name|stillOpen
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertClosed (TestCloseable closeable1, TestCloseable... moreCloseables)
specifier|static
name|void
name|assertClosed
parameter_list|(
name|TestCloseable
name|closeable1
parameter_list|,
name|TestCloseable
modifier|...
name|moreCloseables
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TestCloseable
name|closeable
range|:
name|asList
argument_list|(
name|closeable1
argument_list|,
name|moreCloseables
argument_list|)
control|)
block|{
name|assertWithMessage
argument_list|(
literal|"%s.isClosed()"
argument_list|,
name|closeable
argument_list|)
operator|.
name|that
argument_list|(
name|closeable
operator|.
name|awaitClosed
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|failedClosingFuture ()
specifier|private
name|ClosingFuture
argument_list|<
name|Object
argument_list|>
name|failedClosingFuture
parameter_list|()
block|{
return|return
name|ClosingFuture
operator|.
name|from
argument_list|(
name|immediateFailedFuture
argument_list|(
name|exception
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertNoExpectedFailures ()
specifier|private
name|void
name|assertNoExpectedFailures
parameter_list|()
block|{
name|assertWithMessage
argument_list|(
literal|"executor was shut down"
argument_list|)
operator|.
name|that
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|executor
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"closingExecutor was shut down"
argument_list|)
operator|.
name|that
argument_list|(
name|shutdownAndAwaitTermination
argument_list|(
name|closingExecutor
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringWriter
name|message
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"Expected no failures, but found:"
argument_list|)
expr_stmt|;
for|for
control|(
name|AssertionError
name|failure
range|:
name|failures
control|)
block|{
name|failure
operator|.
name|printStackTrace
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|failures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TestCloseable
specifier|static
specifier|final
class|class
name|TestCloseable
implements|implements
name|Closeable
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|TestCloseable (String name)
name|TestCloseable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|awaitClosed ()
name|boolean
name|awaitClosed
parameter_list|()
block|{
return|return
name|awaitUninterruptibly
argument_list|(
name|latch
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|stillOpen ()
name|boolean
name|stillOpen
parameter_list|()
block|{
return|return
operator|!
name|awaitUninterruptibly
argument_list|(
name|latch
argument_list|,
literal|1
argument_list|,
name|SECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|Waiter
specifier|static
specifier|final
class|class
name|Waiter
block|{
DECL|field|started
specifier|private
specifier|final
name|CountDownLatch
name|started
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|canReturn
specifier|private
specifier|final
name|CountDownLatch
name|canReturn
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|returned
specifier|private
specifier|final
name|CountDownLatch
name|returned
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|proxy
specifier|private
name|Object
name|proxy
decl_stmt|;
DECL|method|waitFor (Callable<V> callable)
parameter_list|<
name|V
parameter_list|>
name|Callable
argument_list|<
name|V
argument_list|>
name|waitFor
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|callable
argument_list|,
name|Callable
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (ClosingCallable<V> closingCallable)
parameter_list|<
name|V
parameter_list|>
name|ClosingCallable
argument_list|<
name|V
argument_list|>
name|waitFor
parameter_list|(
name|ClosingCallable
argument_list|<
name|V
argument_list|>
name|closingCallable
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|closingCallable
argument_list|,
name|ClosingCallable
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (ClosingFunction<T, U> closingFunction)
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
name|ClosingFunction
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|ClosingFunction
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|closingFunction
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|closingFunction
argument_list|,
name|ClosingFunction
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (AsyncClosingFunction<T, U> asyncClosingFunction)
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
name|AsyncClosingFunction
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|AsyncClosingFunction
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|asyncClosingFunction
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|asyncClosingFunction
argument_list|,
name|AsyncClosingFunction
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (CombiningCallable<V> combiningCallable)
parameter_list|<
name|V
parameter_list|>
name|CombiningCallable
argument_list|<
name|V
argument_list|>
name|waitFor
parameter_list|(
name|CombiningCallable
argument_list|<
name|V
argument_list|>
name|combiningCallable
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|combiningCallable
argument_list|,
name|CombiningCallable
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (AsyncCombiningCallable<V> asyncCombiningCallable)
parameter_list|<
name|V
parameter_list|>
name|AsyncCombiningCallable
argument_list|<
name|V
argument_list|>
name|waitFor
parameter_list|(
name|AsyncCombiningCallable
argument_list|<
name|V
argument_list|>
name|asyncCombiningCallable
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|asyncCombiningCallable
argument_list|,
name|AsyncCombiningCallable
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (ClosingFunction2<V1, V2, U> closingFunction2)
parameter_list|<
name|V1
parameter_list|,
name|V2
parameter_list|,
name|U
parameter_list|>
name|ClosingFunction2
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|ClosingFunction2
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|U
argument_list|>
name|closingFunction2
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|closingFunction2
argument_list|,
name|ClosingFunction2
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor ( AsyncClosingFunction2<V1, V2, U> asyncClosingFunction2)
parameter_list|<
name|V1
parameter_list|,
name|V2
parameter_list|,
name|U
parameter_list|>
name|AsyncClosingFunction2
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|AsyncClosingFunction2
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|U
argument_list|>
name|asyncClosingFunction2
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|asyncClosingFunction2
argument_list|,
name|AsyncClosingFunction2
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor ( ClosingFunction3<V1, V2, V3, U> closingFunction3)
parameter_list|<
name|V1
parameter_list|,
name|V2
parameter_list|,
name|V3
parameter_list|,
name|U
parameter_list|>
name|ClosingFunction3
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|V3
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|ClosingFunction3
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|V3
argument_list|,
name|U
argument_list|>
name|closingFunction3
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|closingFunction3
argument_list|,
name|ClosingFunction3
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor ( ClosingFunction4<V1, V2, V3, V4, U> closingFunction4)
parameter_list|<
name|V1
parameter_list|,
name|V2
parameter_list|,
name|V3
parameter_list|,
name|V4
parameter_list|,
name|U
parameter_list|>
name|ClosingFunction4
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|V3
argument_list|,
name|V4
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|ClosingFunction4
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|V3
argument_list|,
name|V4
argument_list|,
name|U
argument_list|>
name|closingFunction4
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|closingFunction4
argument_list|,
name|ClosingFunction4
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor ( ClosingFunction5<V1, V2, V3, V4, V5, U> closingFunction5)
parameter_list|<
name|V1
parameter_list|,
name|V2
parameter_list|,
name|V3
parameter_list|,
name|V4
parameter_list|,
name|V5
parameter_list|,
name|U
parameter_list|>
name|ClosingFunction5
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|V3
argument_list|,
name|V4
argument_list|,
name|V5
argument_list|,
name|U
argument_list|>
name|waitFor
parameter_list|(
name|ClosingFunction5
argument_list|<
name|V1
argument_list|,
name|V2
argument_list|,
name|V3
argument_list|,
name|V4
argument_list|,
name|V5
argument_list|,
name|U
argument_list|>
name|closingFunction5
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
name|closingFunction5
argument_list|,
name|ClosingFunction5
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|waitFor (final T delegate, final Class<T> type)
parameter_list|<
name|T
parameter_list|>
name|T
name|waitFor
parameter_list|(
specifier|final
name|T
name|delegate
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|checkState
argument_list|(
name|proxy
operator|==
literal|null
argument_list|)
expr_stmt|;
name|T
name|proxyObject
init|=
name|Reflection
operator|.
name|newProxy
argument_list|(
name|type
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|delegate
argument_list|,
name|args
argument_list|)
return|;
block|}
name|checkState
argument_list|(
name|started
operator|.
name|getCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|delegate
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
finally|finally
block|{
name|awaitUninterruptibly
argument_list|(
name|canReturn
argument_list|)
expr_stmt|;
name|returned
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|this
operator|.
name|proxy
operator|=
name|proxyObject
expr_stmt|;
return|return
name|proxyObject
return|;
block|}
DECL|method|awaitStarted ()
name|void
name|awaitStarted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|awaitUninterruptibly
argument_list|(
name|started
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitReturned ()
name|void
name|awaitReturned
parameter_list|()
block|{
name|canReturn
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|awaitUninterruptibly
argument_list|(
name|returned
argument_list|,
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NoOpValueAndCloserConsumer
specifier|private
specifier|static
specifier|final
class|class
name|NoOpValueAndCloserConsumer
parameter_list|<
name|V
parameter_list|>
implements|implements
name|ValueAndCloserConsumer
argument_list|<
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|accept (ValueAndCloser<V> valueAndCloser)
specifier|public
name|void
name|accept
parameter_list|(
name|ValueAndCloser
argument_list|<
name|V
argument_list|>
name|valueAndCloser
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

