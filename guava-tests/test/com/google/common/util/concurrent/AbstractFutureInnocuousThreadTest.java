begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2020 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PropertyPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Tests for {@link AbstractFuture} using an innocuous thread. */
end_comment

begin_class
DECL|class|AbstractFutureInnocuousThreadTest
specifier|public
class|class
name|AbstractFutureInnocuousThreadTest
extends|extends
name|TestCase
block|{
DECL|field|oldClassLoader
specifier|private
name|ClassLoader
name|oldClassLoader
decl_stmt|;
DECL|field|classReloader
specifier|private
name|URLClassLoader
name|classReloader
decl_stmt|;
DECL|field|settableFutureClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|settableFutureClass
decl_stmt|;
DECL|field|oldSecurityManager
specifier|private
name|SecurityManager
name|oldSecurityManager
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load the "normal" copy of SettableFuture and related classes.
name|SettableFuture
argument_list|<
name|?
argument_list|>
name|unused
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Hack to load AbstractFuture et. al. in a new classloader so that it tries to re-read the
comment|// cancellation-cause system property. This allows us to test what happens if reading the
comment|// property is forbidden and then continue running tests normally in one jvm without resorting
comment|// to even crazier hacks to reset static final boolean fields.
specifier|final
name|String
name|concurrentPackage
init|=
name|SettableFuture
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|classReloader
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|ClassPathUtil
operator|.
name|getClassPathUrls
argument_list|()
argument_list|)
block|{
annotation|@
name|GuardedBy
argument_list|(
literal|"loadedClasses"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|loadedClasses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|concurrentPackage
argument_list|)
comment|// Use other classloader for ListenableFuture, so that the objects can interact
operator|&&
operator|!
name|ListenableFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|loadedClasses
init|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|toReturn
init|=
name|loadedClasses
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|toReturn
operator|==
literal|null
condition|)
block|{
name|toReturn
operator|=
name|super
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|loadedClasses
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|toReturn
argument_list|)
expr_stmt|;
block|}
return|return
name|toReturn
return|;
block|}
block|}
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|oldClassLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classReloader
argument_list|)
expr_stmt|;
name|oldSecurityManager
operator|=
name|System
operator|.
name|getSecurityManager
argument_list|()
expr_stmt|;
comment|/*      * TODO(cpovirk): Why couldn't I get this to work with PermissionCollection and implies(), as      * used by ClassPathTest?      */
specifier|final
name|PropertyPermission
name|readSystemProperty
init|=
operator|new
name|PropertyPermission
argument_list|(
literal|"guava.concurrent.generate_cancellation_cause"
argument_list|,
literal|"read"
argument_list|)
decl_stmt|;
name|SecurityManager
name|disallowPropertySecurityManager
init|=
operator|new
name|SecurityManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
if|if
condition|(
name|readSystemProperty
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Disallowed: "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|disallowPropertySecurityManager
argument_list|)
expr_stmt|;
name|settableFutureClass
operator|=
name|classReloader
operator|.
name|loadClass
argument_list|(
name|SettableFuture
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * We must keep the SecurityManager installed during the test body: It affects what kind of      * threads ForkJoinPool.commonPool() creates.      */
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|oldSecurityManager
argument_list|)
expr_stmt|;
name|classReloader
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|oldClassLoader
argument_list|)
expr_stmt|;
block|}
DECL|method|testAbstractFutureInitializationWithInnocuousThread_doesNotThrow ()
specifier|public
name|void
name|testAbstractFutureInitializationWithInnocuousThread_doesNotThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Setting a security manager causes the common ForkJoinPool to use InnocuousThreads with no
comment|// permissions.
comment|// submit()/join() causes this thread to execute the task instead, so we use a CountDownLatch as
comment|// a barrier to synchronize.
comment|// TODO(cpovirk): If some other test already initialized commonPool(), this won't work :(
comment|// Maybe we should just run this test in its own VM.
name|ForkJoinPool
operator|.
name|commonPool
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|settableFutureClass
operator|.
name|getMethod
argument_list|(
literal|"create"
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// In the failure case, await() will timeout.
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO(cpovirk): Write a similar test that doesn't use ForkJoinPool (to run under Android)?
block|}
end_class

end_unit

