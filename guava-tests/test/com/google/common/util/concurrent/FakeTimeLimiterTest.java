begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link FakeTimeLimiter}.  *  * @author Jens Nyman  */
end_comment

begin_class
DECL|class|FakeTimeLimiterTest
specifier|public
class|class
name|FakeTimeLimiterTest
extends|extends
name|TestCase
block|{
DECL|field|DELAY_MS
specifier|private
specifier|static
specifier|final
name|int
name|DELAY_MS
init|=
literal|50
decl_stmt|;
DECL|field|RETURN_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|RETURN_VALUE
init|=
literal|"abc"
decl_stmt|;
DECL|field|timeLimiter
specifier|private
name|TimeLimiter
name|timeLimiter
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|timeLimiter
operator|=
operator|new
name|FakeTimeLimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCallWithTimeout_propagatesReturnValue ()
specifier|public
name|void
name|testCallWithTimeout_propagatesReturnValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|timeLimiter
operator|.
name|callWithTimeout
argument_list|(
name|Callables
operator|.
name|returning
argument_list|(
name|RETURN_VALUE
argument_list|)
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RETURN_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testCallWithTimeout_wrapsCheckedException ()
specifier|public
name|void
name|testCallWithTimeout_wrapsCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|exception
init|=
operator|new
name|SampleCheckedException
argument_list|()
decl_stmt|;
try|try
block|{
name|timeLimiter
operator|.
name|callWithTimeout
argument_list|(
name|callableThrowing
argument_list|(
name|exception
argument_list|)
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCallWithTimeout_wrapsUncheckedException ()
specifier|public
name|void
name|testCallWithTimeout_wrapsUncheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
try|try
block|{
name|timeLimiter
operator|.
name|callWithTimeout
argument_list|(
name|callableThrowing
argument_list|(
name|exception
argument_list|)
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UncheckedExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCallUninterruptiblyWithTimeout_propagatesReturnValue ()
specifier|public
name|void
name|testCallUninterruptiblyWithTimeout_propagatesReturnValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|timeLimiter
operator|.
name|callUninterruptiblyWithTimeout
argument_list|(
name|Callables
operator|.
name|returning
argument_list|(
name|RETURN_VALUE
argument_list|)
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RETURN_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|testRunWithTimeout_returnsWithoutException ()
specifier|public
name|void
name|testRunWithTimeout_returnsWithoutException
parameter_list|()
throws|throws
name|Exception
block|{
name|timeLimiter
operator|.
name|runWithTimeout
argument_list|(
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|testRunWithTimeout_wrapsUncheckedException ()
specifier|public
name|void
name|testRunWithTimeout_wrapsUncheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
try|try
block|{
name|timeLimiter
operator|.
name|runWithTimeout
argument_list|(
name|runnableThrowing
argument_list|(
name|exception
argument_list|)
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UncheckedExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRunUninterruptiblyWithTimeout_wrapsUncheckedException ()
specifier|public
name|void
name|testRunUninterruptiblyWithTimeout_wrapsUncheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
try|try
block|{
name|timeLimiter
operator|.
name|runUninterruptiblyWithTimeout
argument_list|(
name|runnableThrowing
argument_list|(
name|exception
argument_list|)
argument_list|,
name|DELAY_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UncheckedExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|callableThrowing (final Exception exception)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Callable
argument_list|<
name|T
argument_list|>
name|callableThrowing
parameter_list|(
specifier|final
name|Exception
name|exception
parameter_list|)
block|{
return|return
operator|new
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
block|}
return|;
block|}
DECL|method|runnableThrowing (final RuntimeException e)
specifier|private
specifier|static
name|Runnable
name|runnableThrowing
parameter_list|(
specifier|final
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|SampleCheckedException
specifier|private
specifier|static
class|class
name|SampleCheckedException
extends|extends
name|Exception
block|{}
block|}
end_class

end_unit

