begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@code Futures.makeListenable}.  *  * @author Sven Mawson  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|// method is deprecated to be made private
DECL|class|FuturesAdapterTest
specifier|public
class|class
name|FuturesAdapterTest
extends|extends
name|TestCase
block|{
DECL|field|delegate
specifier|private
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|delegate
decl_stmt|;
DECL|field|tester
specifier|private
name|ListenableFutureTester
name|tester
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|delegate
operator|=
name|SettableFuture
operator|.
name|create
argument_list|()
expr_stmt|;
name|tester
operator|=
operator|new
name|ListenableFutureTester
argument_list|(
name|Futures
operator|.
name|makeListenable
argument_list|(
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testAdapterExecutesListenersWhenSourceFutureCompletes ()
specifier|public
name|void
name|testAdapterExecutesListenersWhenSourceFutureCompletes
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testCompletedFuture
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdapterHandlesCancellationCorrectly ()
specifier|public
name|void
name|testAdapterHandlesCancellationCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// parameter is ignored
name|tester
operator|.
name|testCancelledFuture
argument_list|()
expr_stmt|;
block|}
DECL|method|testAdapterHandlesExecutionExceptions ()
specifier|public
name|void
name|testAdapterHandlesExecutionExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testFailedFuture
argument_list|(
literal|"failed"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

