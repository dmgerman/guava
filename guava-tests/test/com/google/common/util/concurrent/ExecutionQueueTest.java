begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ExecutionQueue}.  *  * @author Luke Sandberg  */
end_comment

begin_class
DECL|class|ExecutionQueueTest
specifier|public
class|class
name|ExecutionQueueTest
extends|extends
name|TestCase
block|{
DECL|field|queue
specifier|private
specifier|final
name|ExecutionQueue
name|queue
init|=
operator|new
name|ExecutionQueue
argument_list|()
decl_stmt|;
DECL|method|testAddAndExecuteMultipleRounds ()
specifier|public
name|void
name|testAddAndExecuteMultipleRounds
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Executor
name|executor
init|=
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
decl_stmt|;
name|addAndExecuteMultipleTimes
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndExecuteMultipleRounds_multipleThreads ()
specifier|public
name|void
name|testAddAndExecuteMultipleRounds_multipleThreads
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
try|try
block|{
name|addAndExecuteMultipleTimes
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that tasks are submitted to the executor in the correct order even when there are many    * concurrent calls to execute and add.    */
DECL|method|testAddAndConcurrentExecute ()
specifier|public
name|void
name|testAddAndConcurrentExecute
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|numThreads
init|=
literal|20
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
comment|// make sure all the threads are started
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|integer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numTasks
init|=
literal|10000
decl_stmt|;
specifier|final
name|CountDownLatch
name|taskLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numTasks
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|startBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We are only interested in testing the order in which things are added to the executor,
comment|// but by using a single threaded executor we know that the runnables are executed in the
comment|// same order that they are added to the queue managed by this executor.
specifier|final
name|ExecutorService
name|callbackExecutor
init|=
name|singleThreadedExecutorService
argument_list|()
decl_stmt|;
comment|// We want to delay starting until all the threads calling execute have started.
try|try
block|{
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|expectedCount
init|=
name|i
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|integer
operator|.
name|compareAndSet
argument_list|(
name|expectedCount
argument_list|,
name|expectedCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskLatch
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|callbackExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|callbackExecutor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We want to delay starting until all the threads calling execute have started.
try|try
block|{
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
name|taskLatch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|queue
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|taskLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for them all to finish
name|assertEquals
argument_list|(
name|numTasks
argument_list|,
name|integer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|singleThreadedExecutorService ()
specifier|private
name|ExecutorService
name|singleThreadedExecutorService
parameter_list|()
block|{
specifier|final
name|ExecutorService
name|callbackExecutor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
comment|// Yields to try to force more thread interleavings
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|super
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|callbackExecutor
return|;
block|}
DECL|method|addAndExecuteMultipleTimes (Executor executor)
specifier|private
name|void
name|addAndExecuteMultipleTimes
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|CountDownRunnable
argument_list|(
name|countDownLatch
argument_list|)
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|CountDownRunnable
argument_list|(
name|countDownLatch
argument_list|)
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|CountDownRunnable
argument_list|(
name|countDownLatch
argument_list|)
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|countDownLatch
operator|.
name|getCount
argument_list|()
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|countDownLatch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CountDownRunnable
specifier|private
class|class
name|CountDownRunnable
implements|implements
name|Runnable
block|{
DECL|field|countDownLatch
specifier|final
name|CountDownLatch
name|countDownLatch
decl_stmt|;
DECL|method|CountDownRunnable (CountDownLatch countDownLatch)
name|CountDownRunnable
parameter_list|(
name|CountDownLatch
name|countDownLatch
parameter_list|)
block|{
name|this
operator|.
name|countDownLatch
operator|=
name|countDownLatch
expr_stmt|;
block|}
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

