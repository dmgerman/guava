begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapInterfaceTest
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Map interface tests for bimaps.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BiMapMapInterfaceTest
specifier|public
class|class
name|BiMapMapInterfaceTest
extends|extends
name|TestCase
block|{
DECL|class|AbstractMapInterfaceTest
specifier|private
specifier|abstract
specifier|static
class|class
name|AbstractMapInterfaceTest
extends|extends
name|MapInterfaceTest
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|AbstractMapInterfaceTest (boolean modifiable)
specifier|protected
name|AbstractMapInterfaceTest
parameter_list|(
name|boolean
name|modifiable
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|modifiable
argument_list|,
name|modifiable
argument_list|,
name|modifiable
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"cat"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
name|create
argument_list|()
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|makeEmptyMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|assertMoreInvariants (Map<String, Integer> map)
annotation|@
name|Override
specifier|protected
name|void
name|assertMoreInvariants
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
operator|(
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|map
decl_stmt|;
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|inverse
init|=
name|bimap
operator|.
name|inverse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bimap
operator|.
name|size
argument_list|()
argument_list|,
name|inverse
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|bimap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|inverse
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|inverse
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|HashBiMapInterfaceTest
specifier|public
specifier|static
class|class
name|HashBiMapInterfaceTest
extends|extends
name|AbstractMapInterfaceTest
block|{
DECL|method|HashBiMapInterfaceTest ()
specifier|public
name|HashBiMapInterfaceTest
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|class|InverseBiMapInterfaceTest
specifier|public
specifier|static
class|class
name|InverseBiMapInterfaceTest
extends|extends
name|AbstractMapInterfaceTest
block|{
DECL|method|InverseBiMapInterfaceTest ()
specifier|public
name|InverseBiMapInterfaceTest
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
expr|<
name|Integer
operator|,
name|String
operator|>
name|create
argument_list|()
operator|.
name|inverse
argument_list|()
return|;
block|}
block|}
DECL|class|UnmodifiableBiMapInterfaceTest
specifier|public
specifier|static
class|class
name|UnmodifiableBiMapInterfaceTest
extends|extends
name|AbstractMapInterfaceTest
block|{
DECL|method|UnmodifiableBiMapInterfaceTest ()
specifier|public
name|UnmodifiableBiMapInterfaceTest
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|unmodifiableBiMap
argument_list|(
name|HashBiMap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|unmodifiableBiMap
argument_list|(
name|bimap
argument_list|)
return|;
block|}
block|}
DECL|class|SynchronizedBiMapInterfaceTest
specifier|public
specifier|static
class|class
name|SynchronizedBiMapInterfaceTest
extends|extends
name|AbstractMapInterfaceTest
block|{
DECL|method|SynchronizedBiMapInterfaceTest ()
specifier|public
name|SynchronizedBiMapInterfaceTest
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|Maps
operator|.
name|synchronizedBiMap
argument_list|(
name|HashBiMap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

