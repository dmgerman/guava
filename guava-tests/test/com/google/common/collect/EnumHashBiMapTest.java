begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@code EnumHashBiMap}.  *  * @author Mike Bostock  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|EnumHashBiMapTest
specifier|public
class|class
name|EnumHashBiMapTest
extends|extends
name|TestCase
block|{
DECL|enum|Currency
DECL|enumConstant|DOLLAR
DECL|enumConstant|PESO
DECL|enumConstant|FRANC
specifier|private
enum|enum
name|Currency
block|{
name|DOLLAR
block|,
name|PESO
block|,
name|FRANC
block|}
DECL|enum|Country
DECL|enumConstant|CANADA
DECL|enumConstant|CHILE
DECL|enumConstant|SWITZERLAND
specifier|private
enum|enum
name|Country
block|{
name|CANADA
block|,
name|CHILE
block|,
name|SWITZERLAND
block|}
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
block|{
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|bimap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashBiMap
operator|.
name|create
argument_list|()
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
literal|"dollar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"dollar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateFromMap ()
specifier|public
name|void
name|testCreateFromMap
parameter_list|()
block|{
comment|/* Test with non-empty Map. */
name|Map
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
literal|"dollar"
argument_list|,
name|Currency
operator|.
name|PESO
argument_list|,
literal|"peso"
argument_list|,
name|Currency
operator|.
name|FRANC
argument_list|,
literal|"franc"
argument_list|)
decl_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"dollar"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Map must have at least one entry if not an EnumHashBiMap. */
try|try
block|{
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Collections
operator|.
expr|<
name|Currency
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
comment|/* Map can be empty if it's an EnumHashBiMap. */
name|Map
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|emptyBimap
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
decl_stmt|;
name|bimap
operator|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|emptyBimap
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Map can be empty if it's an EnumBiMap. */
name|Map
argument_list|<
name|Currency
argument_list|,
name|Country
argument_list|>
name|emptyBimap2
init|=
name|EnumBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|,
name|Country
operator|.
name|class
argument_list|)
decl_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|Country
argument_list|>
name|bimap2
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|emptyBimap2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bimap2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnumHashBiMapConstructor ()
specifier|public
name|void
name|testEnumHashBiMapConstructor
parameter_list|()
block|{
comment|/* Test that it copies existing entries. */
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap1
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
decl_stmt|;
name|bimap1
operator|.
name|put
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
literal|"dollar"
argument_list|)
expr_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap2
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|bimap1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap2
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bimap1
argument_list|,
name|bimap2
argument_list|)
expr_stmt|;
name|bimap2
operator|.
name|inverse
argument_list|()
operator|.
name|put
argument_list|(
literal|"franc"
argument_list|,
name|Currency
operator|.
name|FRANC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"franc"
argument_list|,
name|bimap2
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|FRANC
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap1
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|FRANC
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap2
operator|.
name|equals
argument_list|(
name|bimap1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Test that it can be empty. */
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|emptyBimap
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
decl_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap3
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|emptyBimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bimap3
argument_list|,
name|emptyBimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnumBiMapConstructor ()
specifier|public
name|void
name|testEnumBiMapConstructor
parameter_list|()
block|{
comment|/* Test that it copies existing entries. */
name|EnumBiMap
argument_list|<
name|Currency
argument_list|,
name|Country
argument_list|>
name|bimap1
init|=
name|EnumBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|,
name|Country
operator|.
name|class
argument_list|)
decl_stmt|;
name|bimap1
operator|.
name|put
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
name|Country
operator|.
name|SWITZERLAND
argument_list|)
expr_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|Object
argument_list|>
name|bimap2
init|=
comment|// use supertype
name|EnumHashBiMap
operator|.
expr|<
name|Currency
decl_stmt|,
name|Object
decl|>
name|create
argument_list|(
name|bimap1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Country
operator|.
name|SWITZERLAND
argument_list|,
name|bimap2
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bimap1
argument_list|,
name|bimap2
argument_list|)
expr_stmt|;
name|bimap2
operator|.
name|inverse
argument_list|()
operator|.
name|put
argument_list|(
literal|"franc"
argument_list|,
name|Currency
operator|.
name|FRANC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"franc"
argument_list|,
name|bimap2
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|FRANC
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap1
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|FRANC
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap2
operator|.
name|equals
argument_list|(
name|bimap1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Test that it can be empty. */
name|EnumBiMap
argument_list|<
name|Currency
argument_list|,
name|Country
argument_list|>
name|emptyBimap
init|=
name|EnumBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|,
name|Country
operator|.
name|class
argument_list|)
decl_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|Country
argument_list|>
name|bimap3
init|=
comment|// use exact type
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|emptyBimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bimap3
argument_list|,
name|emptyBimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeyType ()
specifier|public
name|void
name|testKeyType
parameter_list|()
block|{
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Currency
operator|.
name|class
argument_list|,
name|bimap
operator|.
name|keyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySet ()
specifier|public
name|void
name|testEntrySet
parameter_list|()
block|{
comment|// Bug 3168290
name|Map
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Currency
operator|.
name|DOLLAR
argument_list|,
literal|"dollar"
argument_list|,
name|Currency
operator|.
name|PESO
argument_list|,
literal|"peso"
argument_list|,
name|Currency
operator|.
name|FRANC
argument_list|,
literal|"franc"
argument_list|)
decl_stmt|;
name|EnumHashBiMap
argument_list|<
name|Currency
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|uniqueEntries
init|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
decl_stmt|;
name|uniqueEntries
operator|.
name|addAll
argument_list|(
name|bimap
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|uniqueEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"serialize"
argument_list|)
DECL|method|testSerializable ()
specifier|public
name|void
name|testSerializable
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"reflection"
argument_list|)
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|EnumHashBiMap
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|EnumHashBiMap
operator|.
name|create
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

