begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|SetFeature
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Sets#transform(Set, Sets.InvertibleFunction)}.  *   * @author Dimitris Andreou  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TransformedSetTest
specifier|public
class|class
name|TransformedSetTest
extends|extends
name|TestCase
block|{
comment|// Negates each integer. This is a true bijection, even considering MIN_VALUE
DECL|field|integerBijection
specifier|private
specifier|static
specifier|final
name|Sets
operator|.
name|InvertibleFunction
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|integerBijection
init|=
operator|new
name|Sets
operator|.
name|InvertibleFunction
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
name|integer
operator|!=
literal|null
condition|?
operator|-
name|integer
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|invert
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
name|integer
operator|!=
literal|null
condition|?
operator|-
name|integer
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|suite ()
specifier|public
specifier|static
name|TestSuite
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TransformedIntegerSetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"TransformedSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|SetFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testSimpleCases ()
specifier|public
name|void
name|testSimpleCases
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|original
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|transformed
init|=
name|Sets
operator|.
name|transform
argument_list|(
name|original
argument_list|,
name|integerBijection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|transformed
argument_list|)
expr_stmt|;
comment|// adding/removing to the original, see if transformed is affected
name|assertTrue
argument_list|(
name|original
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|add
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|transformed
argument_list|)
expr_stmt|;
comment|// adding/removing to the transformed, see if original is affected
name|assertTrue
argument_list|(
name|transformed
operator|.
name|remove
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|transformed
operator|.
name|add
argument_list|(
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|transformed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|original
argument_list|)
expr_stmt|;
comment|// redoing the same actions as above; no effect
name|assertFalse
argument_list|(
name|transformed
operator|.
name|remove
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|transformed
operator|.
name|add
argument_list|(
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// they should always have the same size
name|assertEquals
argument_list|(
name|original
operator|.
name|size
argument_list|()
argument_list|,
name|transformed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|transformed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|transformed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TransformedIntegerSetGenerator
specifier|public
specifier|static
class|class
name|TransformedIntegerSetGenerator
implements|implements
name|TestSetGenerator
argument_list|<
name|Integer
argument_list|>
block|{
DECL|method|create (Object... elements)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
comment|// Would use Collections#checkedCollection, but I get:
comment|// [ERROR] The method checkedCollection(Collection, Class<Integer>)
comment|// is undefined for the type Collections
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|integers
init|=
operator|(
name|Iterable
operator|)
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
comment|// I invert these before adding, so that the transformed set will have
comment|// the expected elements themselves, not their image under the bijection
name|Set
argument_list|<
name|Integer
argument_list|>
name|invertedIntegers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|integers
argument_list|,
name|integerBijection
operator|.
name|inverse
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|transform
argument_list|(
name|invertedIntegers
argument_list|,
name|integerBijection
argument_list|)
return|;
block|}
DECL|method|createArray (int length)
annotation|@
name|Override
specifier|public
name|Integer
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Integer
index|[
name|length
index|]
return|;
block|}
DECL|method|samples ()
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Integer
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Integer
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
return|;
block|}
DECL|method|order (List<Integer> insertionOrder)
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|insertionOrder
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

