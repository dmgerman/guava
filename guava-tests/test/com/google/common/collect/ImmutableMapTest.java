begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
operator|.
name|reserialize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AnEnum
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|CollectionTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapInterfaceTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Colliders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Unhashables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|UnhashableObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapCopyOfEntriesGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapCopyOfEnumMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapCopyOfGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapEntryListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapKeyListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapUnhashableValuesGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapValueListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MapGenerators
operator|.
name|ImmutableMapValuesAsSingletonSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableMap}.  *  * @author Kevin Bourrillion  * @author Jesse Wilson  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableMapTest
specifier|public
class|class
name|ImmutableMapTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|FloodingTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|buildJdkBacked
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap [JDK backed]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapCopyOfGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.copyOf[Map]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapCopyOfEntriesGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.copyOf[Iterable<Entry>]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapCopyOfEnumMapGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.copyOf[EnumMap]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapValuesAsSingletonSetGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.asMultimap.asMap"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapUnhashableValuesGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.values, unhashable"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapKeyListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.keySet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapEntryListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.entrySet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableMapValueListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMap.values.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|class|AbstractMapTests
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractMapTests
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|MapInterfaceTest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|AbstractMapTests ()
specifier|public
name|AbstractMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|field|joiner
specifier|private
specifier|static
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|assertMoreInvariants (Map<K, V> map)
specifier|protected
name|void
name|assertMoreInvariants
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
comment|// TODO: can these be moved to MapInterfaceTest?
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|+
literal|"}"
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MinimalSet
operator|.
name|from
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MapTests
specifier|public
specifier|static
class|class
name|MapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|SingletonMapTests
specifier|public
specifier|static
class|class
name|SingletonMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|class|ReserializedMapTests
specifier|public
specifier|static
class|class
name|ReserializedMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|MapTestsWithBadHashes
specifier|public
specifier|static
class|class
name|MapTestsWithBadHashes
extends|extends
name|AbstractMapTests
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Colliders
name|colliders
init|=
operator|new
name|Colliders
argument_list|()
decl_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|colliders
operator|.
name|e0
argument_list|()
argument_list|,
literal|0
argument_list|,
name|colliders
operator|.
name|e1
argument_list|()
argument_list|,
literal|1
argument_list|,
name|colliders
operator|.
name|e2
argument_list|()
argument_list|,
literal|2
argument_list|,
name|colliders
operator|.
name|e3
argument_list|()
argument_list|,
literal|3
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|Object
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|new
name|Colliders
argument_list|()
operator|.
name|e4
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// GWT's ImmutableMap emulation is backed by java.util.HashMap.
DECL|class|MapTestsWithUnhashableValues
specifier|public
specifier|static
class|class
name|MapTestsWithUnhashableValues
extends|extends
name|AbstractMapTests
argument_list|<
name|Integer
argument_list|,
name|UnhashableObject
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|UnhashableObject
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|UnhashableObject
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Unhashables
name|unhashables
init|=
operator|new
name|Unhashables
argument_list|()
decl_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
name|unhashables
operator|.
name|e0
argument_list|()
argument_list|,
literal|1
argument_list|,
name|unhashables
operator|.
name|e1
argument_list|()
argument_list|,
literal|2
argument_list|,
name|unhashables
operator|.
name|e2
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|Integer
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|UnhashableObject
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|new
name|Unhashables
argument_list|()
operator|.
name|e3
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// GWT's ImmutableMap emulation is backed by java.util.HashMap.
DECL|class|MapTestsWithSingletonUnhashableValue
specifier|public
specifier|static
class|class
name|MapTestsWithSingletonUnhashableValue
extends|extends
name|MapTestsWithUnhashableValues
block|{
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|UnhashableObject
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|Unhashables
name|unhashables
init|=
operator|new
name|Unhashables
argument_list|()
decl_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
name|unhashables
operator|.
name|e0
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|CreationTests
specifier|public
specifier|static
class|class
name|CreationTests
extends|extends
name|TestCase
block|{
DECL|method|testEmptyBuilder ()
specifier|public
name|void
name|testEmptyBuilder
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingletonBuilder ()
specifier|public
name|void
name|testSingletonBuilder
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder ()
specifier|public
name|void
name|testBuilder
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testBuilderExactlySizedReusesArray ()
specifier|public
name|void
name|testBuilderExactlySizedReusesArray
parameter_list|()
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builderWithExpectedSize
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|builderArray
init|=
name|builder
operator|.
name|entries
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|builderArrayAfterPuts
init|=
name|builder
operator|.
name|entries
decl_stmt|;
name|RegularImmutableMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|(
name|RegularImmutableMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|mapInternalArray
init|=
name|map
operator|.
name|entries
decl_stmt|;
name|assertSame
argument_list|(
name|builderArray
argument_list|,
name|builderArrayAfterPuts
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|builderArray
argument_list|,
name|mapInternalArray
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderEntriesByValue ()
specifier|public
name|void
name|testBuilder_orderEntriesByValue
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderEntriesByValueAfterExactSizeBuild ()
specifier|public
name|void
name|testBuilder_orderEntriesByValueAfterExactSizeBuild
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|keyOrdered
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|valueOrdered
init|=
name|builder
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|keyOrdered
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|valueOrdered
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderEntriesByValue_usedTwiceFails ()
specifier|public
name|void
name|testBuilder_orderEntriesByValue_usedTwiceFails
parameter_list|()
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilder_withImmutableEntry ()
specifier|public
name|void
name|testBuilder_withImmutableEntry
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableEntryAndNullContents ()
specifier|public
name|void
name|testBuilder_withImmutableEntryAndNullContents
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|class|StringHolder
specifier|private
specifier|static
class|class
name|StringHolder
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
block|}
DECL|method|testBuilder_withMutableEntry ()
specifier|public
name|void
name|testBuilder_withMutableEntry
parameter_list|()
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|StringHolder
name|holder
init|=
operator|new
name|StringHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"one"
expr_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
operator|new
name|AbstractMapEntry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|holder
operator|.
name|string
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"two"
expr_stmt|;
name|assertMapEquals
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllWithEmptyMap ()
specifier|public
name|void
name|testBuilderPutAllWithEmptyMap
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAll ()
specifier|public
name|void
name|testBuilderPutAll
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|moreToPut
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|putAll
argument_list|(
name|toPut
argument_list|)
operator|.
name|putAll
argument_list|(
name|moreToPut
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderReuse ()
specifier|public
name|void
name|testBuilderReuse
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapOne
init|=
name|builder
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapTwo
init|=
name|builder
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|mapOne
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mapTwo
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutNullKeyFailsAtomically ()
specifier|public
name|void
name|testBuilderPutNullKeyFailsAtomically
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|builder
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutImmutableEntryWithNullKeyFailsAtomically ()
specifier|public
name|void
name|testBuilderPutImmutableEntryWithNullKeyFailsAtomically
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|builder
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// for GWT compatibility
DECL|class|SimpleEntry
specifier|static
class|class
name|SimpleEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|key
specifier|public
name|K
name|key
decl_stmt|;
DECL|field|value
specifier|public
name|V
name|value
decl_stmt|;
DECL|method|SimpleEntry (K key, V value)
name|SimpleEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|method|testBuilderPutMutableEntryWithNullKeyFailsAtomically ()
specifier|public
name|void
name|testBuilderPutMutableEntryWithNullKeyFailsAtomically
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
operator|new
name|SimpleEntry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|builder
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutNullKey ()
specifier|public
name|void
name|testBuilderPutNullKey
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullValue ()
specifier|public
name|void
name|testBuilderPutNullValue
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullKeyViaPutAll ()
specifier|public
name|void
name|testBuilderPutNullKeyViaPutAll
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|singletonMap
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullValueViaPutAll ()
specifier|public
name|void
name|testBuilderPutNullValueViaPutAll
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|singletonMap
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testPuttingTheSameKeyTwiceThrowsOnBuild ()
specifier|public
name|void
name|testPuttingTheSameKeyTwiceThrowsOnBuild
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// throwing on this line would be even better
try|try
block|{
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOf ()
specifier|public
name|void
name|testOf
parameter_list|()
block|{
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|,
literal|"eight"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|,
literal|"eight"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|,
literal|"eight"
argument_list|,
literal|8
argument_list|,
literal|"nine"
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|,
literal|"eight"
argument_list|,
literal|8
argument_list|,
literal|"nine"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|,
literal|"eight"
argument_list|,
literal|8
argument_list|,
literal|"nine"
argument_list|,
literal|9
argument_list|,
literal|"ten"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"six"
argument_list|,
literal|6
argument_list|,
literal|"seven"
argument_list|,
literal|7
argument_list|,
literal|"eight"
argument_list|,
literal|8
argument_list|,
literal|"nine"
argument_list|,
literal|9
argument_list|,
literal|"ten"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfNullKey ()
specifier|public
name|void
name|testOfNullKey
parameter_list|()
block|{
try|try
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOfNullValue ()
specifier|public
name|void
name|testOfNullValue
parameter_list|()
block|{
try|try
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOfWithDuplicateKey ()
specifier|public
name|void
name|testOfWithDuplicateKey
parameter_list|()
block|{
try|try
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCopyOfEmptyMap ()
specifier|public
name|void
name|testCopyOfEmptyMap
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfSingletonMap ()
specifier|public
name|void
name|testCopyOfSingletonMap
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf ()
specifier|public
name|void
name|testCopyOf
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableMap ()
specifier|public
name|void
name|testToImmutableMap
parameter_list|()
block|{
name|Collector
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableMap
operator|.
name|toImmutableMap
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|)
decl_stmt|;
name|Equivalence
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
operator|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|>
name|pairwise
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|ImmutableMap
operator|::
name|entrySet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableMap_exceptionOnDuplicateKey ()
specifier|public
name|void
name|testToImmutableMap_exceptionOnDuplicateKey
parameter_list|()
block|{
name|Collector
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableMap
operator|.
name|toImmutableMap
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|11
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableMapMerging ()
specifier|public
name|void
name|testToImmutableMapMerging
parameter_list|()
block|{
name|Collector
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableMap
operator|.
name|toImmutableMap
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
decl_stmt|;
name|Equivalence
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
operator|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|>
name|pairwise
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|ImmutableMap
operator|::
name|entrySet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|4
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNullGet ()
specifier|public
name|void
name|testNullGet
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMultimap ()
specifier|public
name|void
name|testAsMultimap
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"won"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"too"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"won"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"too"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|map
operator|.
name|asMultimap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMultimapWhenEmpty ()
specifier|public
name|void
name|testAsMultimapWhenEmpty
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|map
operator|.
name|asMultimap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMultimapCaches ()
specifier|public
name|void
name|testAsMultimapCaches
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap1
init|=
name|map
operator|.
name|asMultimap
argument_list|()
decl_stmt|;
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap2
init|=
name|map
operator|.
name|asMultimap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|multimap1
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|multimap1
argument_list|,
name|multimap2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ImmutableMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMapEquals (Map<K, V> map, Object... alternatingKeysAndValues)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertMapEquals
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Object
modifier|...
name|alternatingKeysAndValues
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|alternatingKeysAndValues
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IntHolder
specifier|private
specifier|static
class|class
name|IntHolder
implements|implements
name|Serializable
block|{
DECL|field|value
specifier|public
name|int
name|value
decl_stmt|;
DECL|method|IntHolder (int value)
specifier|public
name|IntHolder
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|IntHolder
operator|)
operator|&&
operator|(
operator|(
name|IntHolder
operator|)
name|o
operator|)
operator|.
name|value
operator|==
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5
decl_stmt|;
block|}
DECL|method|testMutableValues ()
specifier|public
name|void
name|testMutableValues
parameter_list|()
block|{
name|IntHolder
name|holderA
init|=
operator|new
name|IntHolder
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|IntHolder
name|holderB
init|=
operator|new
name|IntHolder
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IntHolder
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
name|holderA
argument_list|,
literal|"b"
argument_list|,
name|holderB
argument_list|)
decl_stmt|;
name|holderA
operator|.
name|value
operator|=
literal|3
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
operator|new
name|IntHolder
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|intMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intMap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intMap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfEnumMap ()
specifier|public
name|void
name|testCopyOfEnumMap
parameter_list|()
block|{
name|EnumMap
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|AnEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|AnEnum
operator|.
name|B
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|AnEnum
operator|.
name|C
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
operator|instanceof
name|ImmutableEnumMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testViewSerialization ()
specifier|public
name|void
name|testViewSerialization
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|LenientSerializableTester
operator|.
name|reserializeAndAssertLenient
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|LenientSerializableTester
operator|.
name|reserializeAndAssertLenient
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|reserializedValues
init|=
name|reserialize
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|reserializedValues
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reserializedValues
operator|instanceof
name|ImmutableCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testKeySetIsSerializable_regularImmutableMap ()
specifier|public
name|void
name|testKeySetIsSerializable_regularImmutableMap
parameter_list|()
block|{
class|class
name|NonSerializableClass
block|{}
name|Map
argument_list|<
name|String
argument_list|,
name|NonSerializableClass
argument_list|>
name|map
init|=
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|ImmutableMap
operator|.
name|entryOf
argument_list|(
literal|"one"
argument_list|,
operator|new
name|NonSerializableClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|map
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|LenientSerializableTester
operator|.
name|reserializeAndAssertLenient
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testKeySetIsSerializable_jdkBackedImmutableMap ()
specifier|public
name|void
name|testKeySetIsSerializable_jdkBackedImmutableMap
parameter_list|()
block|{
class|class
name|NonSerializableClass
block|{}
name|Entry
argument_list|<
name|String
argument_list|,
name|NonSerializableClass
argument_list|>
index|[]
name|entries
init|=
name|arrayOf
argument_list|(
name|ImmutableMap
operator|.
name|entryOf
argument_list|(
literal|"one"
argument_list|,
operator|new
name|NonSerializableClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NonSerializableClass
argument_list|>
name|map
init|=
name|JdkBackedImmutableMap
operator|.
name|create
argument_list|(
literal|1
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|map
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|LenientSerializableTester
operator|.
name|reserializeAndAssertLenient
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testValuesCollectionIsSerializable_regularImmutableMap ()
specifier|public
name|void
name|testValuesCollectionIsSerializable_regularImmutableMap
parameter_list|()
block|{
class|class
name|NonSerializableClass
block|{}
name|Map
argument_list|<
name|NonSerializableClass
argument_list|,
name|String
argument_list|>
name|map
init|=
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|ImmutableMap
operator|.
name|entryOf
argument_list|(
operator|new
name|NonSerializableClass
argument_list|()
argument_list|,
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
name|map
operator|.
name|values
argument_list|()
decl_stmt|;
name|LenientSerializableTester
operator|.
name|reserializeAndAssertElementsEqual
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testValuesCollectionIsSerializable_jdkBackedImmutableMap ()
specifier|public
name|void
name|testValuesCollectionIsSerializable_jdkBackedImmutableMap
parameter_list|()
block|{
class|class
name|NonSerializableClass
block|{}
name|Entry
argument_list|<
name|NonSerializableClass
argument_list|,
name|String
argument_list|>
index|[]
name|entries
init|=
name|arrayOf
argument_list|(
name|ImmutableMap
operator|.
name|entryOf
argument_list|(
operator|new
name|NonSerializableClass
argument_list|()
argument_list|,
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NonSerializableClass
argument_list|,
name|String
argument_list|>
name|map
init|=
name|JdkBackedImmutableMap
operator|.
name|create
argument_list|(
literal|1
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
name|map
operator|.
name|values
argument_list|()
decl_stmt|;
name|LenientSerializableTester
operator|.
name|reserializeAndAssertElementsEqual
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Re-enable this test after moving to new serialization format in ImmutableMap.
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ignore_testSerializationNoDuplication_regularImmutableMap ()
specifier|public
name|void
name|ignore_testSerializationNoDuplication_regularImmutableMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that searializing a map, its keySet, and values only writes the underlying data once.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|entries
init|=
operator|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
operator|)
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|ImmutableMap
operator|.
name|entryOf
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|RegularImmutableMap
operator|.
name|fromEntries
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|map
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|map
operator|.
name|values
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|bytes
operator|.
name|size
argument_list|()
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|keySet
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|finalSize
init|=
name|bytes
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|finalSize
operator|-
name|mapSize
argument_list|)
operator|.
name|isLessThan
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Re-enable this test after moving to new serialization format in ImmutableMap.
annotation|@
name|GwtIncompatible
comment|// SerializableTester
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ignore_testSerializationNoDuplication_jdkBackedImmutableMap ()
specifier|public
name|void
name|ignore_testSerializationNoDuplication_jdkBackedImmutableMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that searializing a map, its keySet, and values only writes
comment|// the underlying data once.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|entries
init|=
operator|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
operator|)
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|ImmutableMap
operator|.
name|entryOf
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|JdkBackedImmutableMap
operator|.
name|create
argument_list|(
name|entries
operator|.
name|length
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|map
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|map
operator|.
name|values
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|bytes
operator|.
name|size
argument_list|()
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|keySet
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|finalSize
init|=
name|bytes
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|finalSize
operator|-
name|mapSize
argument_list|)
operator|.
name|isLessThan
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|arrayOf (T... objs)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|arrayOf
parameter_list|(
name|T
modifier|...
name|objs
parameter_list|)
block|{
return|return
name|objs
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"assumptions about splitting"
argument_list|)
DECL|method|testKeySetSplittable ()
specifier|public
name|void
name|testKeySetSplittable
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl|.
name|put
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
decl|.
name|put
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|spliterator
argument_list|()
operator|.
name|trySplit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|()
argument_list|,
name|map
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testOfEntriesNull ()
specifier|public
name|void
name|testOfEntriesNull
parameter_list|()
block|{
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|nullKey
init|=
name|entry
argument_list|(
literal|null
argument_list|,
literal|23
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|nullKey
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|nullValue
init|=
name|entry
argument_list|(
literal|23
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableMap
operator|.
name|ofEntries
argument_list|(
name|nullValue
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|map (T... keysAndValues)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|map
parameter_list|(
name|T
modifier|...
name|keysAndValues
parameter_list|)
block|{
name|assertThat
argument_list|(
name|keysAndValues
operator|.
name|length
operator|%
literal|2
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keysAndValues
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|T
name|key
init|=
name|keysAndValues
index|[
name|i
index|]
decl_stmt|;
name|T
name|value
init|=
name|keysAndValues
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|T
name|old
init|=
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Key %s set to %s and %s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|old
argument_list|)
operator|.
name|that
argument_list|(
name|old
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|entry (T key, T value)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Entry
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|entry
parameter_list|(
name|T
name|key
parameter_list|,
name|T
name|value
parameter_list|)
block|{
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|testCopyOfMutableEntryList ()
specifier|public
name|void
name|testCopyOfMutableEntryList
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entryList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|entryList
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|entryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderPutAllEntryList ()
specifier|public
name|void
name|testBuilderPutAllEntryList
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entryList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|putAll
argument_list|(
name|entryList
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|entryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderPutAllEntryListJdkBacked ()
specifier|public
name|void
name|testBuilderPutAllEntryListJdkBacked
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entryList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|putAll
argument_list|(
name|entryList
argument_list|)
decl|.
name|buildJdkBacked
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|entryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|,
literal|"b"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|class|FloodingTest
specifier|public
specifier|static
class|class
name|FloodingTest
extends|extends
name|AbstractHashFloodingTest
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
DECL|method|FloodingTest ()
specifier|public
name|FloodingTest
parameter_list|()
block|{
name|super
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ConstructionPathway
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|n
lambda|->
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
name|n
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|QueryOp
operator|.
name|MAP_GET
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** All the ways to create an ImmutableMap. */
DECL|enum|ConstructionPathway
enum|enum
name|ConstructionPathway
implements|implements
name|Construction
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
DECL|enumConstant|COPY_OF_MAP
name|COPY_OF_MAP
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sourceMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
if|if
condition|(
name|sourceMap
operator|.
name|put
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"duplicate key"
argument_list|)
throw|;
block|}
block|}
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|sourceMap
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|COPY_OF_ENTRIES
name|COPY_OF_ENTRIES
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|keys
argument_list|,
name|k
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ONE_BY_ONE
name|BUILDER_PUT_ONE_BY_ONE
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ENTRIES_ONE_BY_ONE
name|BUILDER_PUT_ENTRIES_ONE_BY_ONE
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ALL_MAP
name|BUILDER_PUT_ALL_MAP
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sourceMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
if|if
condition|(
name|sourceMap
operator|.
name|put
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"duplicate key"
argument_list|)
throw|;
block|}
block|}
return|return
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|sourceMap
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ALL_ENTRIES
name|BUILDER_PUT_ALL_ENTRIES
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|keys
argument_list|,
name|k
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|FORCE_JDK
name|FORCE_JDK
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|keys
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|k
argument_list|,
literal|"dummy value"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|buildJdkBacked
argument_list|()
return|;
block|}
block|}
block|;     }
block|}
block|}
end_class

end_unit

