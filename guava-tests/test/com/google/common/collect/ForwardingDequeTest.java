begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_comment
comment|/**  * Tests for {@code ForwardingDeque}.  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|ForwardingDequeTest
specifier|public
class|class
name|ForwardingDequeTest
extends|extends
name|ForwardingTestCase
block|{
DECL|field|forward
specifier|private
name|Deque
argument_list|<
name|String
argument_list|>
name|forward
decl_stmt|;
comment|/*    * Class parameters must be raw, so we can't create a proxy with generic    * type arguments. The created proxy only records calls and returns null, so    * the type is irrelevant at runtime.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setUp ()
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|Deque
argument_list|<
name|String
argument_list|>
name|deque
init|=
name|createProxyInstance
argument_list|(
name|Deque
operator|.
name|class
argument_list|)
decl_stmt|;
name|forward
operator|=
operator|new
name|ForwardingDeque
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Deque
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|deque
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|testAdd_T ()
specifier|public
name|void
name|testAdd_T
parameter_list|()
block|{
name|forward
operator|.
name|add
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[add(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddFirst_T ()
specifier|public
name|void
name|testAddFirst_T
parameter_list|()
block|{
name|forward
operator|.
name|addFirst
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[addFirst(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddLast_T ()
specifier|public
name|void
name|testAddLast_T
parameter_list|()
block|{
name|forward
operator|.
name|addLast
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[addLast(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAll_Collection ()
specifier|public
name|void
name|testAddAll_Collection
parameter_list|()
block|{
name|forward
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"asdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[addAll(Collection)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|forward
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[clear]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContains_T ()
specifier|public
name|void
name|testContains_T
parameter_list|()
block|{
name|forward
operator|.
name|contains
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[contains(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAll_Collection ()
specifier|public
name|void
name|testContainsAll_Collection
parameter_list|()
block|{
name|forward
operator|.
name|containsAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"asdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[containsAll(Collection)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDescendingIterator ()
specifier|public
name|void
name|testDescendingIterator
parameter_list|()
block|{
name|forward
operator|.
name|descendingIterator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[descendingIterator]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testElement ()
specifier|public
name|void
name|testElement
parameter_list|()
block|{
name|forward
operator|.
name|element
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[element]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFirst ()
specifier|public
name|void
name|testGetFirst
parameter_list|()
block|{
name|forward
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[getFirst]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast ()
specifier|public
name|void
name|testGetLast
parameter_list|()
block|{
name|forward
operator|.
name|getLast
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[getLast]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterator ()
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|forward
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[iterator]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|forward
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[isEmpty]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOffer_T ()
specifier|public
name|void
name|testOffer_T
parameter_list|()
block|{
name|forward
operator|.
name|offer
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[offer(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfferFirst_T ()
specifier|public
name|void
name|testOfferFirst_T
parameter_list|()
block|{
name|forward
operator|.
name|offerFirst
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[offerFirst(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfferLast_T ()
specifier|public
name|void
name|testOfferLast_T
parameter_list|()
block|{
name|forward
operator|.
name|offerLast
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[offerLast(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPeek ()
specifier|public
name|void
name|testPeek
parameter_list|()
block|{
name|forward
operator|.
name|peek
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[peek]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPeekFirst ()
specifier|public
name|void
name|testPeekFirst
parameter_list|()
block|{
name|forward
operator|.
name|peekFirst
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[peekFirst]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPeekLast ()
specifier|public
name|void
name|testPeekLast
parameter_list|()
block|{
name|forward
operator|.
name|peekLast
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[peekLast]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPoll ()
specifier|public
name|void
name|testPoll
parameter_list|()
block|{
name|forward
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[poll]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPollFirst ()
specifier|public
name|void
name|testPollFirst
parameter_list|()
block|{
name|forward
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[pollFirst]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPollLast ()
specifier|public
name|void
name|testPollLast
parameter_list|()
block|{
name|forward
operator|.
name|pollLast
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[pollLast]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPop ()
specifier|public
name|void
name|testPop
parameter_list|()
block|{
name|forward
operator|.
name|pop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[pop]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPush_Object ()
specifier|public
name|void
name|testPush_Object
parameter_list|()
block|{
name|forward
operator|.
name|push
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[push(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|forward
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[remove]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveFirst ()
specifier|public
name|void
name|testRemoveFirst
parameter_list|()
block|{
name|forward
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[removeFirst]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveLast ()
specifier|public
name|void
name|testRemoveLast
parameter_list|()
block|{
name|forward
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[removeLast]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove_Object ()
specifier|public
name|void
name|testRemove_Object
parameter_list|()
block|{
name|forward
operator|.
name|remove
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[remove(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveFirstOccurrence_Object ()
specifier|public
name|void
name|testRemoveFirstOccurrence_Object
parameter_list|()
block|{
name|forward
operator|.
name|removeFirstOccurrence
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[removeFirstOccurrence(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveLastOccurrence_Object ()
specifier|public
name|void
name|testRemoveLastOccurrence_Object
parameter_list|()
block|{
name|forward
operator|.
name|removeLastOccurrence
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[removeLastOccurrence(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAll_Collection ()
specifier|public
name|void
name|testRemoveAll_Collection
parameter_list|()
block|{
name|forward
operator|.
name|removeAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"asdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[removeAll(Collection)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetainAll_Collection ()
specifier|public
name|void
name|testRetainAll_Collection
parameter_list|()
block|{
name|forward
operator|.
name|retainAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"asdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[retainAll(Collection)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|forward
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[size]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray ()
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
name|forward
operator|.
name|toArray
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[toArray]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray_TArray ()
specifier|public
name|void
name|testToArray_TArray
parameter_list|()
block|{
name|forward
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[toArray(Object[])]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|forward
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[toString]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

