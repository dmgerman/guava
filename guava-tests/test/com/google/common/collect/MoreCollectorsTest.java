begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code MoreCollectors}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MoreCollectorsTest
specifier|public
class|class
name|MoreCollectorsTest
extends|extends
name|TestCase
block|{
DECL|method|testToOptionalEmpty ()
specifier|public
name|void
name|testToOptionalEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Stream
operator|.
name|empty
argument_list|()
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|toOptional
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testToOptionalSingleton ()
specifier|public
name|void
name|testToOptionalSingleton
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|toOptional
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testToOptionalNull ()
specifier|public
name|void
name|testToOptionalNull
parameter_list|()
block|{
name|Stream
argument_list|<
name|Object
argument_list|>
name|stream
init|=
name|Stream
operator|.
name|of
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|toOptional
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToOptionalMultiple ()
specifier|public
name|void
name|testToOptionalMultiple
parameter_list|()
block|{
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|toOptional
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1, 2"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToOptionalMultipleWithNull ()
specifier|public
name|void
name|testToOptionalMultipleWithNull
parameter_list|()
block|{
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|toOptional
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToOptionalMany ()
specifier|public
name|void
name|testToOptionalMany
parameter_list|()
block|{
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|toOptional
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1, 2, 3, 4, 5, ..."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnlyElement ()
specifier|public
name|void
name|testOnlyElement
parameter_list|()
block|{
try|try
block|{
name|Stream
operator|.
name|empty
argument_list|()
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|onlyElement
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testOnlyElementSingleton ()
specifier|public
name|void
name|testOnlyElementSingleton
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|onlyElement
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnlyElementNull ()
specifier|public
name|void
name|testOnlyElementNull
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|onlyElement
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnlyElementMultiple ()
specifier|public
name|void
name|testOnlyElementMultiple
parameter_list|()
block|{
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|onlyElement
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1, 2"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnlyElementMany ()
specifier|public
name|void
name|testOnlyElementMany
parameter_list|()
block|{
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|onlyElement
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1, 2, 3, 4, 5, ..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

