begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableBiMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapInterfaceTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapGenerators
operator|.
name|ImmutableBiMapCopyOfEntriesGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapGenerators
operator|.
name|ImmutableBiMapCopyOfGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapGenerators
operator|.
name|ImmutableBiMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapInverseTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringBiMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableBiMap}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableBiMapTest
specifier|public
class|class
name|ImmutableBiMapTest
extends|extends
name|TestCase
block|{
comment|// TODO: Reduce duplication of ImmutableMapTest code
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|MapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|InverseMapTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|CreationTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|BiMapSpecificTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|FloodingTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableBiMapGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableBiMap"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|)
operator|.
name|suppressing
argument_list|(
name|BiMapInverseTester
operator|.
name|getInverseSameAfterSerializingMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringBiMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
return|return
name|ImmutableBiMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
argument_list|)
operator|.
name|buildJdkBacked
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableBiMap [JDK backed]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|)
operator|.
name|suppressing
argument_list|(
name|BiMapInverseTester
operator|.
name|getInverseSameAfterSerializingMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableBiMapCopyOfGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableBiMap.copyOf[Map]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|)
operator|.
name|suppressing
argument_list|(
name|BiMapInverseTester
operator|.
name|getInverseSameAfterSerializingMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableBiMapCopyOfEntriesGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableBiMap.copyOf[Iterable<Entry>]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|)
operator|.
name|suppressing
argument_list|(
name|BiMapInverseTester
operator|.
name|getInverseSameAfterSerializingMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableBiMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|class|AbstractMapTests
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractMapTests
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|MapInterfaceTest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|AbstractMapTests ()
specifier|public
name|AbstractMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|field|joiner
specifier|private
specifier|static
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|assertMoreInvariants (Map<K, V> map)
specifier|protected
name|void
name|assertMoreInvariants
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
init|=
operator|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|+
literal|"}"
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MapTests
specifier|public
specifier|static
class|class
name|MapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|ImmutableBiMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|InverseMapTests
specifier|public
specifier|static
class|class
name|InverseMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makeEmptyMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|ImmutableBiMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|makePopulatedMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|)
operator|.
name|inverse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyNotInPopulatedMap ()
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
annotation|@
name|Override
DECL|method|getValueNotInPopulatedMap ()
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|CreationTests
specifier|public
specifier|static
class|class
name|CreationTests
extends|extends
name|TestCase
block|{
DECL|method|testEmptyBuilder ()
specifier|public
name|void
name|testEmptyBuilder
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingletonBuilder ()
specifier|public
name|void
name|testSingletonBuilder
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableEntry ()
specifier|public
name|void
name|testBuilder_withImmutableEntry
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder ()
specifier|public
name|void
name|testBuilder
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableBiMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
decl|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
decl|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
decl|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|,
literal|5
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testBuilderExactlySizedReusesArray ()
specifier|public
name|void
name|testBuilderExactlySizedReusesArray
parameter_list|()
block|{
name|ImmutableBiMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableBiMap
operator|.
name|builderWithExpectedSize
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|builderArray
init|=
name|builder
operator|.
name|entries
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|builderArrayAfterPuts
init|=
name|builder
operator|.
name|entries
decl_stmt|;
name|RegularImmutableBiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|(
name|RegularImmutableBiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
index|[]
name|mapInternalArray
init|=
name|map
operator|.
name|entries
decl_stmt|;
name|assertSame
argument_list|(
name|builderArray
argument_list|,
name|builderArrayAfterPuts
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|builderArray
argument_list|,
name|mapInternalArray
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderEntriesByValue ()
specifier|public
name|void
name|testBuilder_orderEntriesByValue
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableBiMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
decl|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
decl|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|,
literal|5
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderEntriesByValueAfterExactSizeBuild ()
specifier|public
name|void
name|testBuilder_orderEntriesByValueAfterExactSizeBuild
parameter_list|()
block|{
name|ImmutableBiMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|ImmutableBiMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|keyOrdered
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|valueOrdered
init|=
name|builder
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|keyOrdered
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|valueOrdered
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderEntriesByValue_usedTwiceFails ()
specifier|public
name|void
name|testBuilder_orderEntriesByValue_usedTwiceFails
parameter_list|()
block|{
name|ImmutableBiMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|orderEntriesByValue
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutAllWithEmptyMap ()
specifier|public
name|void
name|testBuilderPutAllWithEmptyMap
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAll ()
specifier|public
name|void
name|testBuilderPutAll
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|moreToPut
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|putAll
argument_list|(
name|toPut
argument_list|)
operator|.
name|putAll
argument_list|(
name|moreToPut
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|,
literal|5
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderReuse ()
specifier|public
name|void
name|testBuilderReuse
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapOne
init|=
name|builder
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapTwo
init|=
name|builder
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|mapOne
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mapOne
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mapTwo
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mapTwo
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutNullKey ()
specifier|public
name|void
name|testBuilderPutNullKey
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullValue ()
specifier|public
name|void
name|testBuilderPutNullValue
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullKeyViaPutAll ()
specifier|public
name|void
name|testBuilderPutNullKeyViaPutAll
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|singletonMap
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullValueViaPutAll ()
specifier|public
name|void
name|testBuilderPutNullValueViaPutAll
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|singletonMap
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testPuttingTheSameKeyTwiceThrowsOnBuild ()
specifier|public
name|void
name|testPuttingTheSameKeyTwiceThrowsOnBuild
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// throwing on this line would be even better
try|try
block|{
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOf ()
specifier|public
name|void
name|testOf
parameter_list|()
block|{
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|,
literal|5
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfNullKey ()
specifier|public
name|void
name|testOfNullKey
parameter_list|()
block|{
try|try
block|{
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOfNullValue ()
specifier|public
name|void
name|testOfNullValue
parameter_list|()
block|{
try|try
block|{
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOfWithDuplicateKey ()
specifier|public
name|void
name|testOfWithDuplicateKey
parameter_list|()
block|{
try|try
block|{
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyOfEmptyMap ()
specifier|public
name|void
name|testCopyOfEmptyMap
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfSingletonMap ()
specifier|public
name|void
name|testCopyOfSingletonMap
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf ()
specifier|public
name|void
name|testCopyOf
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromHashMap ()
specifier|public
name|void
name|testFromHashMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|hashMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|hashMap
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hashMap
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|bimap
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|bimap
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromImmutableMap ()
specifier|public
name|void
name|testFromImmutableMap
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|bimap
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|bimap
operator|.
name|inverse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|,
literal|4
argument_list|,
literal|"four"
argument_list|,
literal|5
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateValues ()
specifier|public
name|void
name|testDuplicateValues
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"uno"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"dos"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToImmutableBiMap ()
specifier|public
name|void
name|testToImmutableBiMap
parameter_list|()
block|{
name|Collector
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableBiMap
operator|.
name|toImmutableBiMap
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|)
decl_stmt|;
name|Equivalence
argument_list|<
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
operator|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|>
name|pairwise
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|ImmutableBiMap
operator|::
name|entrySet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableBiMap_exceptionOnDuplicateKey ()
specifier|public
name|void
name|testToImmutableBiMap_exceptionOnDuplicateKey
parameter_list|()
block|{
name|Collector
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableBiMap
operator|.
name|toImmutableBiMap
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|11
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|class|BiMapSpecificTests
specifier|public
specifier|static
class|class
name|BiMapSpecificTests
extends|extends
name|TestCase
block|{
DECL|method|testForcePut ()
specifier|public
name|void
name|testForcePut
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|bimap
operator|.
name|forcePut
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testKeySet ()
specifier|public
name|void
name|testKeySet
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|bimap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|)
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|keys
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testValues ()
specifier|public
name|void
name|testValues
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|bimap
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleInverse ()
specifier|public
name|void
name|testDoubleInverse
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|bimap
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testEmptySerialization ()
specifier|public
name|void
name|testEmptySerialization
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|bimap
argument_list|,
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|bimap
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|bimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|copy
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|copy
operator|.
name|inverse
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testInverseSerialization ()
specifier|public
name|void
name|testInverseSerialization
parameter_list|()
block|{
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|)
operator|.
name|inverse
argument_list|()
decl_stmt|;
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|bimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|copy
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|copy
operator|.
name|inverse
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMapEquals (Map<K, V> map, Object... alternatingKeysAndValues)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertMapEquals
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Object
modifier|...
name|alternatingKeysAndValues
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FloodingTest
specifier|public
specifier|static
class|class
name|FloodingTest
extends|extends
name|AbstractHashFloodingTest
argument_list|<
name|BiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
DECL|method|FloodingTest ()
specifier|public
name|FloodingTest
parameter_list|()
block|{
name|super
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|ConstructionPathway
operator|.
name|class
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|path
lambda|->
name|Stream
operator|.
block|<Construction<BiMap<Object
argument_list|,
name|Object
operator|>>>
name|of
argument_list|(
name|keys
lambda|->
name|path
operator|.
name|create
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|keys
argument_list|,
name|key
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|key
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|keys
lambda|->
name|path
operator|.
name|create
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|keys
argument_list|,
name|key
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|keys
lambda|->
name|path
operator|.
name|create
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|keys
argument_list|,
name|key
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|ImmutableList
operator|.
name|toImmutableList
argument_list|()
argument_list|)
argument_list|,
name|n
lambda|->
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
name|n
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|QueryOp
operator|.
name|create
argument_list|(
literal|"BiMap.get"
argument_list|,
name|BiMap
operator|::
name|get
argument_list|,
name|Math
operator|::
name|log
argument_list|)
argument_list|,
name|QueryOp
operator|.
name|create
argument_list|(
literal|"BiMap.inverse.get"
argument_list|,
parameter_list|(
name|bm
parameter_list|,
name|o
parameter_list|)
lambda|->
name|bm
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|,
name|Math
operator|::
name|log
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** All the ways to create an ImmutableBiMap. */
DECL|enum|ConstructionPathway
enum|enum
name|ConstructionPathway
block|{
DECL|enumConstant|COPY_OF_MAP
name|COPY_OF_MAP
block|{
annotation|@
name|Override
specifier|public
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sourceMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|sourceMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"duplicate key"
argument_list|)
throw|;
block|}
block|}
return|return
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|sourceMap
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|COPY_OF_ENTRIES
name|COPY_OF_ENTRIES
block|{
annotation|@
name|Override
specifier|public
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|ImmutableBiMap
operator|.
name|copyOf
argument_list|(
name|entries
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ONE_BY_ONE
name|BUILDER_PUT_ONE_BY_ONE
block|{
annotation|@
name|Override
specifier|public
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|ImmutableBiMap
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|ImmutableBiMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ALL_MAP
name|BUILDER_PUT_ALL_MAP
block|{
annotation|@
name|Override
specifier|public
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sourceMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|sourceMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"duplicate key"
argument_list|)
throw|;
block|}
block|}
name|ImmutableBiMap
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|ImmutableBiMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|sourceMap
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_PUT_ALL_ENTRIES
name|BUILDER_PUT_ALL_ENTRIES
block|{
annotation|@
name|Override
specifier|public
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|ImmutableBiMap
operator|.
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|entries
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|FORCE_JDK
name|FORCE_JDK
block|{
annotation|@
name|Override
specifier|public
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|ImmutableBiMap
operator|.
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|entries
argument_list|)
operator|.
name|buildJdkBacked
argument_list|()
return|;
block|}
block|}
block|;
annotation|@
name|CanIgnoreReturnValue
DECL|method|create (List<Map.Entry<?, ?>> entries)
specifier|public
specifier|abstract
name|ImmutableBiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
function_decl|;
block|}
block|}
comment|/** No-op test so that the class has at least one method, making Maven's test runner happy. */
DECL|method|testNoop ()
specifier|public
name|void
name|testNoop
parameter_list|()
block|{}
block|}
end_class

end_unit

