begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectionBenchmarkSampleData
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Helper classes for various benchmarks.  *  * @author Christopher Swenson  */
end_comment

begin_class
DECL|class|BenchmarkHelpers
specifier|final
class|class
name|BenchmarkHelpers
block|{
comment|/**    * So far, this is the best way to test various implementations of {@link Set} subclasses.    */
DECL|enum|SetImpl
specifier|public
enum|enum
name|SetImpl
block|{
DECL|enumConstant|Hash
name|Hash
block|{
annotation|@
name|Override
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Element
argument_list|>
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|LinkedHash
name|LinkedHash
block|{
annotation|@
name|Override
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
block|{
return|return
operator|new
name|LinkedHashSet
argument_list|<
name|Element
argument_list|>
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|Tree
name|Tree
block|{
annotation|@
name|Override
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|Element
argument_list|>
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|Unmodifiable
name|Unmodifiable
block|{
annotation|@
name|Override
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Element
argument_list|>
argument_list|(
name|contents
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|Synchronized
name|Synchronized
block|{
annotation|@
name|Override
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Element
argument_list|>
argument_list|(
name|contents
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|Immutable
name|Immutable
block|{
annotation|@
name|Override
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
block|,     ;
DECL|method|create (Collection<Element> contents)
specifier|abstract
name|Set
argument_list|<
name|Element
argument_list|>
name|create
parameter_list|(
name|Collection
argument_list|<
name|Element
argument_list|>
name|contents
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

