begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|UNMODIFIABLE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|CharactersOfCharSequenceGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|CharactersOfStringGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * Unit test for {@code Lists}.  *  * @author Kevin Bourrillion  * @author Mike Bostock  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ListsTest
specifier|public
class|class
name|ListsTest
extends|extends
name|TestCase
block|{
DECL|field|SOME_COLLECTION
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|Integer
argument_list|>
name|SOME_COLLECTION
init|=
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|SOME_ITERABLE
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|SOME_ITERABLE
init|=
operator|new
name|SomeIterable
argument_list|()
decl_stmt|;
DECL|class|RemoveFirstFunction
specifier|private
specifier|static
specifier|final
class|class
name|RemoveFirstFunction
implements|implements
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|apply (String from)
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
operator|(
name|from
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
name|from
else|:
name|from
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
DECL|class|SomeIterable
specifier|private
specifier|static
class|class
name|SomeIterable
implements|implements
name|Iterable
argument_list|<
name|Integer
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|SOME_COLLECTION
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|field|SOME_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|SOME_LIST
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
DECL|field|SOME_SEQUENTIAL_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|SOME_SEQUENTIAL_LIST
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|SOME_STRING_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|SOME_STRING_LIST
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
DECL|field|SOME_FUNCTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Number
argument_list|,
name|String
argument_list|>
name|SOME_FUNCTION
init|=
operator|new
name|SomeFunction
argument_list|()
decl_stmt|;
DECL|class|SomeFunction
specifier|private
specifier|static
class|class
name|SomeFunction
implements|implements
name|Function
argument_list|<
name|Number
argument_list|,
name|String
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
DECL|method|apply (Number n)
specifier|public
name|String
name|apply
parameter_list|(
name|Number
name|n
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|n
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ListsTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|String
index|[]
name|rest
init|=
operator|new
name|String
index|[
name|elements
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|elements
argument_list|,
literal|1
argument_list|,
name|rest
argument_list|,
literal|0
argument_list|,
name|elements
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|asList
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|rest
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.asList, 2 parameter"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|String
index|[]
name|rest
init|=
operator|new
name|String
index|[
name|elements
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|elements
argument_list|,
literal|2
argument_list|,
name|rest
argument_list|,
literal|0
argument_list|,
name|elements
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|asList
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|elements
index|[
literal|1
index|]
argument_list|,
name|rest
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.asList, 3 parameter"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|SEVERAL
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removeFirst
init|=
operator|new
name|RemoveFirstFunction
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|fromList
operator|.
name|add
argument_list|(
literal|"q"
operator|+
name|checkNotNull
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|removeFirst
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.transform, random access, no nulls"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|ListFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|fromList
operator|.
name|add
argument_list|(
literal|"q"
operator|+
name|checkNotNull
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|removeFirst
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.transform, sequential access, no nulls"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|ListFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|Functions
operator|.
expr|<
name|String
operator|>
name|identity
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.transform, random access, nulls"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|ListFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|Functions
operator|.
expr|<
name|String
operator|>
name|identity
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.transform, sequential access, nulls"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|ListFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|elements
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
name|list
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.reverse[ArrayList]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|String
index|[]
name|reverseElements
init|=
operator|new
name|String
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|elements
operator|.
name|length
operator|-
literal|1
init|,
name|j
init|=
literal|0
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
operator|,
name|j
operator|++
control|)
name|reverseElements
index|[
name|j
index|]
operator|=
name|elements
index|[
name|i
index|]
expr_stmt|;
return|return
name|Lists
operator|.
name|reverse
argument_list|(
name|asList
argument_list|(
name|reverseElements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.reverse[Arrays.asList]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|ListFeature
operator|.
name|SUPPORTS_SET
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|elements
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
name|list
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.reverse[LinkedList]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|elements
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
name|builder
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|reverse
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.reverse[ImmutableList]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|CharactersOfStringGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.charactersOf[String]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|CharactersOfCharSequenceGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Lists.charactersOf[CharSequence]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testCharactersOfIsView ()
specifier|public
name|void
name|testCharactersOfIsView
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Character
argument_list|>
name|chars
init|=
name|Lists
operator|.
name|charactersOf
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
argument_list|,
name|chars
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|,
literal|'f'
argument_list|)
argument_list|,
name|chars
argument_list|)
expr_stmt|;
name|builder
operator|.
name|deleteCharAt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|)
argument_list|,
name|chars
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListEmpty ()
specifier|public
name|void
name|testNewArrayListEmpty
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListWithCapacity ()
specifier|public
name|void
name|testNewArrayListWithCapacity
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|bigger
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|bigger
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListWithCapacity_negative ()
specifier|public
name|void
name|testNewArrayListWithCapacity_negative
parameter_list|()
block|{
try|try
block|{
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewArrayListWithExpectedSize ()
specifier|public
name|void
name|testNewArrayListWithExpectedSize
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|bigger
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|bigger
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListWithExpectedSize_negative ()
specifier|public
name|void
name|testNewArrayListWithExpectedSize_negative
parameter_list|()
block|{
try|try
block|{
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNewArrayListVarArgs ()
specifier|public
name|void
name|testNewArrayListVarArgs
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeArrayListCapacity ()
specifier|public
name|void
name|testComputeArrayListCapacity
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Lists
operator|.
name|computeArrayListCapacity
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|Lists
operator|.
name|computeArrayListCapacity
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|89
argument_list|,
name|Lists
operator|.
name|computeArrayListCapacity
argument_list|(
literal|77
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22000005
argument_list|,
name|Lists
operator|.
name|computeArrayListCapacity
argument_list|(
literal|20000000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Lists
operator|.
name|computeArrayListCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListFromCollection ()
specifier|public
name|void
name|testNewArrayListFromCollection
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_COLLECTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListFromIterable ()
specifier|public
name|void
name|testNewArrayListFromIterable
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_ITERABLE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArrayListFromIterator ()
specifier|public
name|void
name|testNewArrayListFromIterator
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_COLLECTION
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewLinkedListEmpty ()
specifier|public
name|void
name|testNewLinkedListEmpty
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewLinkedListFromCollection ()
specifier|public
name|void
name|testNewLinkedListFromCollection
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_COLLECTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewLinkedListFromIterable ()
specifier|public
name|void
name|testNewLinkedListFromIterable
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_ITERABLE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"CopyOnWriteArrayList"
argument_list|)
DECL|method|testNewCOWALEmpty ()
specifier|public
name|void
name|testNewCOWALEmpty
parameter_list|()
block|{
name|CopyOnWriteArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newCopyOnWriteArrayList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"CopyOnWriteArrayList"
argument_list|)
DECL|method|testNewCOWALFromIterable ()
specifier|public
name|void
name|testNewCOWALFromIterable
parameter_list|()
block|{
name|CopyOnWriteArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newCopyOnWriteArrayList
argument_list|(
name|SOME_ITERABLE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_COLLECTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Lists
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is just here to illustrate how {@code Arrays#asList} differs from    * {@code Lists#newArrayList}.    */
DECL|method|testArraysAsList ()
specifier|public
name|void
name|testArraysAsList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ourWay
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|otherWay
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
comment|// They're logically equal
name|assertEquals
argument_list|(
name|ourWay
argument_list|,
name|otherWay
argument_list|)
expr_stmt|;
comment|// The result of Arrays.asList() is mutable
name|otherWay
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|otherWay
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// But it can't grow
try|try
block|{
name|otherWay
operator|.
name|add
argument_list|(
literal|"nope"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
comment|// And it can't shrink
try|try
block|{
name|otherWay
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testAsList1 ()
specifier|public
name|void
name|testAsList1
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|)
decl_stmt|;
name|checkFooBarBazList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|checkFooBarBazList (List<String> list)
specifier|private
name|void
name|checkFooBarBazList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexIsOutOfBounds
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexIsOutOfBounds
argument_list|(
name|list
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList1Small ()
specifier|public
name|void
name|testAsList1Small
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexIsOutOfBounds
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexIsOutOfBounds
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsList2 ()
specifier|public
name|void
name|testAsList2
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"baz"
block|}
argument_list|)
decl_stmt|;
name|checkFooBarBazList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"baz"
block|}
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testAsList2Small ()
specifier|public
name|void
name|testAsList2Small
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexIsOutOfBounds
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexIsOutOfBounds
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|assertIndexIsOutOfBounds (List<String> list, int index)
specifier|private
specifier|static
name|void
name|assertIndexIsOutOfBounds
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|int
name|index
parameter_list|)
block|{
try|try
block|{
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testReverseViewRandomAccess ()
specifier|public
name|void
name|testReverseViewRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|toList
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|fromList
argument_list|)
decl_stmt|;
name|assertReverseView
argument_list|(
name|fromList
argument_list|,
name|toList
argument_list|)
expr_stmt|;
block|}
DECL|method|testReverseViewSequential ()
specifier|public
name|void
name|testReverseViewSequential
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|toList
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|fromList
argument_list|)
decl_stmt|;
name|assertReverseView
argument_list|(
name|fromList
argument_list|,
name|toList
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReverseView (List<Integer> fromList, List<Integer> toList)
specifier|private
specifier|static
name|void
name|assertReverseView
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|toList
parameter_list|)
block|{
comment|/* fromList modifications reflected in toList */
name|fromList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|add
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|add
argument_list|(
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|,
literal|5
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|,
literal|5
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
comment|/* toList modifications reflected in fromList */
name|toList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|add
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|7
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|add
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
block|}
DECL|method|list (E... elements)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProduct_binary1x1 ()
specifier|public
name|void
name|testCartesianProduct_binary1x1
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|list
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProduct_binary1x2 ()
specifier|public
name|void
name|testCartesianProduct_binary1x2
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|list
argument_list|(
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|list
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProduct_binary2x2 ()
specifier|public
name|void
name|testCartesianProduct_binary2x2
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|list
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|list
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|list
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|list
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProduct_2x2x2 ()
specifier|public
name|void
name|testCartesianProduct_2x2x2
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|list
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
name|list
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|list
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|list
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|list
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|list
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|list
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProduct_contains ()
specifier|public
name|void
name|testCartesianProduct_contains
parameter_list|()
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|list
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|list
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|list
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|list
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|list
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProduct_unrelatedTypes ()
specifier|public
name|void
name|testCartesianProduct_unrelatedTypes
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|x
init|=
name|list
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|y
init|=
name|list
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|exp1
init|=
name|list
argument_list|(
operator|(
name|Object
operator|)
literal|1
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|exp2
init|=
name|list
argument_list|(
operator|(
name|Object
operator|)
literal|1
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|exp3
init|=
name|list
argument_list|(
operator|(
name|Object
operator|)
literal|2
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|exp4
init|=
name|list
argument_list|(
operator|(
name|Object
operator|)
literal|2
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|Lists
operator|.
expr|<
name|Object
operator|>
name|cartesianProduct
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
name|exp1
argument_list|,
name|exp2
argument_list|,
name|exp3
argument_list|,
name|exp4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs!
DECL|method|testCartesianProductTooBig ()
specifier|public
name|void
name|testCartesianProductTooBig
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Collections
operator|.
name|nCopies
argument_list|(
literal|10000
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|list
argument_list|,
name|list
argument_list|,
name|list
argument_list|,
name|list
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IAE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testTransformHashCodeRandomAccess ()
specifier|public
name|void
name|testTransformHashCodeRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|SOME_LIST
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_STRING_LIST
operator|.
name|hashCode
argument_list|()
argument_list|,
name|list
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformHashCodeSequential ()
specifier|public
name|void
name|testTransformHashCodeSequential
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SOME_STRING_LIST
operator|.
name|hashCode
argument_list|()
argument_list|,
name|list
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformModifiableRandomAccess ()
specifier|public
name|void
name|testTransformModifiableRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformModifiable
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformModifiableSequential ()
specifier|public
name|void
name|testTransformModifiableSequential
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformModifiable
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTransformModifiable (List<String> list)
specifier|private
specifier|static
name|void
name|assertTransformModifiable
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transformed list is addable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
try|try
block|{
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transformed list is setable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformViewRandomAccess ()
specifier|public
name|void
name|testTransformViewRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformView
argument_list|(
name|fromList
argument_list|,
name|toList
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformViewSequential ()
specifier|public
name|void
name|testTransformViewSequential
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformView
argument_list|(
name|fromList
argument_list|,
name|toList
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTransformView (List<Integer> fromList, List<String> toList)
specifier|private
specifier|static
name|void
name|assertTransformView
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|toList
parameter_list|)
block|{
comment|/* fromList modifications reflected in toList */
name|fromList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"5"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|add
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"5"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"6"
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"5"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"6"
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
name|fromList
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"5"
argument_list|,
literal|"3"
argument_list|,
literal|"6"
argument_list|)
argument_list|,
name|toList
argument_list|)
expr_stmt|;
comment|/* toList modifications reflected in fromList */
name|toList
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|remove
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|3
argument_list|)
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|toList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformRandomAccess ()
specifier|public
name|void
name|testTransformRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|SOME_LIST
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformSequential ()
specifier|public
name|void
name|testTransformSequential
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|list
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformListIteratorRandomAccess ()
specifier|public
name|void
name|testTransformListIteratorRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformListIterator
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformListIteratorSequential ()
specifier|public
name|void
name|testTransformListIteratorSequential
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformListIterator
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTransformListIterator (List<String> list)
specifier|private
specifier|static
name|void
name|assertTransformListIterator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|ListIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|listIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|iterator
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|iterator
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not detect end of list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|iterator
operator|.
name|previousIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|iterator
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|iterator
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|iterator
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|iterator
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|iterator
operator|.
name|previousIndex
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|previous
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not detect beginning of list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// An UnsupportedOperationException or IllegalStateException may occur.
try|try
block|{
name|iterator
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transformed list iterator is addable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|iterator
operator|.
name|set
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transformed list iterator is settable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testTransformIteratorRandomAccess ()
specifier|public
name|void
name|testTransformIteratorRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformIterator
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformIteratorSequential ()
specifier|public
name|void
name|testTransformIteratorSequential
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fromList
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fromList
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTransformIterator
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**    * We use this class to avoid the need to suppress generics checks with    * easy mock.    */
DECL|interface|IntegerList
specifier|private
interface|interface
name|IntegerList
extends|extends
name|List
argument_list|<
name|Integer
argument_list|>
block|{}
comment|/**    * This test depends on the fact that {@code AbstractSequentialList.iterator}    * transforms the {@code iterator()} call into a call on {@code    * listIterator(int)}. This is fine because the behavior is clearly    * documented so it's not expected to change.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EsayMock"
argument_list|)
DECL|method|testTransformedSequentialIterationUsesBackingListIterationOnly ()
specifier|public
name|void
name|testTransformedSequentialIterationUsesBackingListIterationOnly
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|randomAccessList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SOME_SEQUENTIAL_LIST
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|Integer
argument_list|>
name|sampleListIterator
init|=
name|SOME_SEQUENTIAL_LIST
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|listMock
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|IntegerList
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|listMock
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SOME_SEQUENTIAL_LIST
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|listMock
operator|.
name|listIterator
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sampleListIterator
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|listMock
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|transform
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|listMock
argument_list|,
name|SOME_FUNCTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|transform
argument_list|,
name|Lists
operator|.
name|transform
argument_list|(
name|randomAccessList
argument_list|,
name|SOME_FUNCTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|listMock
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTransformIterator (List<String> list)
specifier|private
specifier|static
name|void
name|assertTransformIterator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not detect end of list"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_badSize ()
specifier|public
name|void
name|testPartition_badSize
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPartition_empty ()
specifier|public
name|void
name|testPartition_empty
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_1_1 ()
specifier|public
name|void
name|testPartition_1_1
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_1_2 ()
specifier|public
name|void
name|testPartition_1_2
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_2_1 ()
specifier|public
name|void
name|testPartition_2_1
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|2
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_3_2 ()
specifier|public
name|void
name|testPartition_3_2
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|3
argument_list|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ArrayList.subList doesn't implement RandomAccess in GWT."
argument_list|)
DECL|method|testPartitionRandomAccessTrue ()
specifier|public
name|void
name|testPartitionRandomAccessTrue
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"partition should be RandomAccess, but not: "
operator|+
name|partitions
operator|.
name|getClass
argument_list|()
argument_list|,
name|partitions
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"partition[0] should be RandomAccess, but not: "
operator|+
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"partition[1] should be RandomAccess, but not: "
operator|+
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartitionRandomAccessFalse ()
specifier|public
name|void
name|testPartitionRandomAccessFalse
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
comment|// TODO: use the ListTestSuiteBuilder
DECL|method|testPartition_view ()
specifier|public
name|void
name|testPartition_view
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|partition
argument_list|(
name|list
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Changes before the partition is retrieved are reflected
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|partitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Changes before the partition is retrieved are reflected
name|list
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|first
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Changes after are too (unlike Iterables.partition)
name|list
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|first
argument_list|)
expr_stmt|;
comment|// Changes to a sublist also write through to the original list
name|first
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartitionSize_1 ()
specifier|public
name|void
name|testPartitionSize_1
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Lists
operator|.
name|partition
argument_list|(
name|list
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Lists
operator|.
name|partition
argument_list|(
name|list
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"cannot do such a big explicit copy"
argument_list|)
DECL|method|testPartitionSize_2 ()
specifier|public
name|void
name|testPartitionSize_2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Lists
operator|.
name|partition
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|0x40000001
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0x40000000
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

