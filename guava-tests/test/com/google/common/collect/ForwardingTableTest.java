begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests {@link ForwardingTable}.  *  * @author Gregory Kick  */
end_comment

begin_class
DECL|class|ForwardingTableTest
specifier|public
class|class
name|ForwardingTableTest
extends|extends
name|ForwardingTestCase
block|{
DECL|field|forward
specifier|private
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Boolean
argument_list|>
name|forward
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|/*      * Class parameters must be raw, so we can't create a proxy with generic      * type arguments. The created proxy only records calls and returns null, so      * the type is irrelevant at runtime.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Boolean
argument_list|>
name|table
init|=
name|createProxyInstance
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|forward
operator|=
operator|new
name|ForwardingTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Boolean
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|table
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|testHashCode ()
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|int
name|unused
init|=
name|forward
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[hashCode]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCellSet ()
specifier|public
name|void
name|testCellSet
parameter_list|()
block|{
name|Set
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|unused
init|=
name|forward
operator|.
name|cellSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[cellSet]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|forward
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[clear]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumn ()
specifier|public
name|void
name|testColumn
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|unused
init|=
name|forward
operator|.
name|column
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[column(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet ()
specifier|public
name|void
name|testColumnKeySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|forward
operator|.
name|columnKeySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[columnKeySet]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnMap ()
specifier|public
name|void
name|testColumnMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|unused
init|=
name|forward
operator|.
name|columnMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[columnMap]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|contains
argument_list|(
literal|"blah"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[contains(Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsColumn ()
specifier|public
name|void
name|testContainsColumn
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|containsColumn
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[containsColumn(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsRow ()
specifier|public
name|void
name|testContainsRow
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|containsRow
argument_list|(
literal|"blah"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[containsRow(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsValue ()
specifier|public
name|void
name|testContainsValue
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|containsValue
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[containsValue(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|Boolean
name|unused
init|=
name|forward
operator|.
name|get
argument_list|(
literal|"blah"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[get(Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[isEmpty]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
block|{
name|forward
operator|.
name|put
argument_list|(
literal|"blah"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[put(Object,Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAll ()
specifier|public
name|void
name|testPutAll
parameter_list|()
block|{
name|forward
operator|.
name|putAll
argument_list|(
name|HashBasedTable
operator|.
expr|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Boolean
operator|>
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[putAll(Table)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|forward
operator|.
name|remove
argument_list|(
literal|"blah"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[remove(Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRow ()
specifier|public
name|void
name|testRow
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Boolean
argument_list|>
name|unused
init|=
name|forward
operator|.
name|row
argument_list|(
literal|"String"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[row(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySet ()
specifier|public
name|void
name|testRowKeySet
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|forward
operator|.
name|rowKeySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[rowKeySet]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowMap ()
specifier|public
name|void
name|testRowMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|unused
init|=
name|forward
operator|.
name|rowMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[rowMap]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|int
name|unused
init|=
name|forward
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValues ()
specifier|public
name|void
name|testValues
parameter_list|()
block|{
name|Collection
argument_list|<
name|Boolean
argument_list|>
name|unused
init|=
name|forward
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[values]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsObject ()
specifier|public
name|void
name|testEqualsObject
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[equals(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

