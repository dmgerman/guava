begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@code SetMultimap} implementations.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractSetMultimapTest
specifier|public
specifier|abstract
class|class
name|AbstractSetMultimapTest
extends|extends
name|AbstractMultimapTest
block|{
DECL|method|testAsMapEquals ()
specifier|public
name|void
name|testAsMapEquals
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|getMultimap
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|nullKey
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|multimap
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|equalMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|equalMap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|equalMap
operator|.
name|put
argument_list|(
name|nullKey
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|equalMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|equalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|equalMap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|multimap
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|unequalMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|equalMap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|,
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|equalMap
operator|.
name|put
argument_list|(
name|nullKey
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|equals
argument_list|(
name|unequalMap
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|unequalMap
operator|.
name|equals
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMapEntriesEquals ()
specifier|public
name|void
name|testAsMapEntriesEquals
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|getMultimap
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|set
init|=
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|expected
argument_list|)
operator|.
name|equals
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|equals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|array
init|=
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|3
index|]
decl_stmt|;
name|array
index|[
literal|1
index|]
operator|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"another"
argument_list|,
literal|"entry"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|array
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAsMapValues ()
specifier|public
name|void
name|testAsMapValues
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|create
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|asMapValues
init|=
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
index|[]
name|array
init|=
operator|new
name|Collection
argument_list|<
name|?
argument_list|>
index|[
literal|3
index|]
decl_stmt|;
name|array
index|[
literal|1
index|]
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|array
argument_list|,
name|asMapValues
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asMapValues
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asMapValues
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asMapValues
operator|.
name|remove
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asMapValues
operator|.
name|remove
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

