begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests for {@code CompactLinkedHashMap}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|CompactLinkedHashMapTest
specifier|public
class|class
name|CompactLinkedHashMapTest
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"CompactLinkedHashMap"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|CompactLinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|convertToHashFloodingResistantImplementation
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"CompactLinkedHashMap with flooding resistance"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|CompactLinkedHashMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|FloodingTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testInsertionOrder ()
specifier|public
name|void
name|testInsertionOrder
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|testHasMapEntriesInOrder
argument_list|(
name|map
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertionOrderAfterPutKeyTwice ()
specifier|public
name|void
name|testInsertionOrderAfterPutKeyTwice
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|testHasMapEntriesInOrder
argument_list|(
name|map
argument_list|,
literal|1
argument_list|,
literal|"e"
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertionOrderAfterRemoveFirstEntry ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveFirstEntry
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testHasMapEntriesInOrder
argument_list|(
name|map
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertionOrderAfterRemoveMiddleEntry ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveMiddleEntry
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|testHasMapEntriesInOrder
argument_list|(
name|map
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertionOrderAfterRemoveLastEntry ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveLastEntry
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|testHasMapEntriesInOrder
argument_list|(
name|map
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimToSize ()
specifier|public
name|void
name|testTrimToSize
parameter_list|()
block|{
name|CompactLinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|createWithExpectedSize
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|map
operator|.
name|trimToSize
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entries
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keys
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|links
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|testHasMapEntriesInOrder
argument_list|(
name|map
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasMapEntriesInOrder (Map<?, ?> map, Object... alternatingKeysAndValues)
specifier|private
name|void
name|testHasMapEntriesInOrder
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|,
name|Object
modifier|...
name|alternatingKeysAndValues
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|alternatingKeysAndValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|alternatingKeysAndValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|alternatingKeysAndValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|expectedKey
init|=
name|alternatingKeysAndValues
index|[
literal|2
operator|*
name|i
index|]
decl_stmt|;
name|Object
name|expectedValue
init|=
name|alternatingKeysAndValues
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expectedEntry
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|expectedKey
argument_list|,
name|expectedValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEntry
argument_list|,
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllocArraysDefault ()
specifier|public
name|void
name|testAllocArraysDefault
parameter_list|()
block|{
name|CompactLinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|needsAllocArrays
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entries
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keys
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|links
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|needsAllocArrays
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entries
argument_list|)
operator|.
name|hasLength
argument_list|(
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keys
argument_list|)
operator|.
name|hasLength
argument_list|(
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|)
operator|.
name|hasLength
argument_list|(
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|links
argument_list|)
operator|.
name|hasLength
argument_list|(
name|CompactHashing
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllocArraysExpectedSize ()
specifier|public
name|void
name|testAllocArraysExpectedSize
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|CompactHashing
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|CompactLinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|CompactLinkedHashMap
operator|.
name|createWithExpectedSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|needsAllocArrays
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entries
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keys
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|links
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|needsAllocArrays
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|int
name|expectedSize
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entries
argument_list|)
operator|.
name|hasLength
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keys
argument_list|)
operator|.
name|hasLength
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|)
operator|.
name|hasLength
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|links
argument_list|)
operator|.
name|hasLength
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FloodingTest
specifier|public
specifier|static
class|class
name|FloodingTest
extends|extends
name|AbstractHashFloodingTest
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
DECL|method|FloodingTest ()
specifier|public
name|FloodingTest
parameter_list|()
block|{
name|super
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Construction
operator|.
name|mapFromKeys
argument_list|(
name|CompactLinkedHashMap
operator|::
name|create
argument_list|)
argument_list|)
argument_list|,
name|n
lambda|->
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
name|n
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|QueryOp
operator|.
name|MAP_GET
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

