begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|immutableEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|nefariousMapEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|MODIFIABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|EntryTransformer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|UnmodifiableCollectionTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@code Multimaps}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|MultimapsTest
specifier|public
class|class
name|MultimapsTest
extends|extends
name|TestCase
block|{
DECL|field|INT_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Integer
argument_list|>
name|INT_COMPARATOR
init|=
name|Ordering
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
operator|.
name|nullsFirst
argument_list|()
decl_stmt|;
DECL|method|testMultimapCollectorGenerics ()
specifier|public
name|void
name|testMultimapCollectorGenerics
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|unused
init|=
name|Stream
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"quux"
argument_list|)
operator|.
name|collect
argument_list|(
name|Multimaps
operator|.
name|toMultimap
argument_list|(
name|String
operator|::
name|length
argument_list|,
name|s
lambda|->
name|s
argument_list|,
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|::
name|build
argument_list|)
argument_list|)
decl_stmt|;
block|}
DECL|method|testToMultimap ()
specifier|public
name|void
name|testToMultimap
parameter_list|()
block|{
name|Collector
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|Multimaps
operator|.
name|toMultimap
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|,
name|TreeMultimap
operator|::
name|create
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|,
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
name|onResultOf
argument_list|(
parameter_list|(
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mm
parameter_list|)
lambda|->
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mm
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Equivalence
operator|.
name|equals
argument_list|()
argument_list|)
decl_stmt|;
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|empty
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|filled
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|filled
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|filled
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|filled
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|filled
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|empty
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|filled
argument_list|,
name|mapEntry
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatteningToMultimap ()
specifier|public
name|void
name|testFlatteningToMultimap
parameter_list|()
block|{
name|Collector
argument_list|<
name|String
argument_list|,
name|?
argument_list|,
name|ListMultimap
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
argument_list|>
name|collector
init|=
name|Multimaps
operator|.
name|flatteningToMultimap
argument_list|(
name|str
lambda|->
name|str
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|str
lambda|->
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|chars
argument_list|()
operator|.
name|mapToObj
argument_list|(
name|c
lambda|->
operator|(
name|char
operator|)
name|c
argument_list|)
argument_list|,
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|::
name|build
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|,
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
name|onResultOf
argument_list|(
parameter_list|(
name|Multimap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mm
parameter_list|)
lambda|->
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mm
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Equivalence
operator|.
name|equals
argument_list|()
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
name|empty
init|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|Character
argument_list|,
name|Character
argument_list|>
name|filled
init|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|filled
operator|.
name|putAll
argument_list|(
literal|'b'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'n'
argument_list|,
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|filled
operator|.
name|putAll
argument_list|(
literal|'a'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|'p'
argument_list|,
literal|'p'
argument_list|,
literal|'l'
argument_list|,
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|filled
operator|.
name|putAll
argument_list|(
literal|'c'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'r'
argument_list|,
literal|'r'
argument_list|,
literal|'o'
argument_list|,
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|filled
operator|.
name|putAll
argument_list|(
literal|'a'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|'s'
argument_list|,
literal|'p'
argument_list|,
literal|'a'
argument_list|,
literal|'r'
argument_list|,
literal|'a'
argument_list|,
literal|'g'
argument_list|,
literal|'u'
argument_list|,
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
name|filled
operator|.
name|putAll
argument_list|(
literal|'c'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|'h'
argument_list|,
literal|'e'
argument_list|,
literal|'r'
argument_list|,
literal|'r'
argument_list|,
literal|'y'
argument_list|)
argument_list|)
expr_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|empty
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|filled
argument_list|,
literal|"banana"
argument_list|,
literal|"apple"
argument_list|,
literal|"carrot"
argument_list|,
literal|"asparagus"
argument_list|,
literal|"cherry"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testUnmodifiableListMultimapShortCircuit ()
specifier|public
name|void
name|testUnmodifiableListMultimapShortCircuit
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mod
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmod
init|=
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|mod
argument_list|,
name|unmod
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|unmod
argument_list|,
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
name|unmod
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|immutable
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|immutable
argument_list|,
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
name|immutable
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|immutable
argument_list|,
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
operator|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|immutable
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testUnmodifiableSetMultimapShortCircuit ()
specifier|public
name|void
name|testUnmodifiableSetMultimapShortCircuit
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mod
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmod
init|=
name|Multimaps
operator|.
name|unmodifiableSetMultimap
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|mod
argument_list|,
name|unmod
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|unmod
argument_list|,
name|Multimaps
operator|.
name|unmodifiableSetMultimap
argument_list|(
name|unmod
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|immutable
init|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|immutable
argument_list|,
name|Multimaps
operator|.
name|unmodifiableSetMultimap
argument_list|(
name|immutable
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|immutable
argument_list|,
name|Multimaps
operator|.
name|unmodifiableSetMultimap
argument_list|(
operator|(
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|immutable
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testUnmodifiableMultimapShortCircuit ()
specifier|public
name|void
name|testUnmodifiableMultimapShortCircuit
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mod
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmod
init|=
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|mod
argument_list|,
name|unmod
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|unmod
argument_list|,
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|unmod
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|immutable
init|=
name|ImmutableMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"a"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|immutable
argument_list|,
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|immutable
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|immutable
argument_list|,
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
operator|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|immutable
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// slow (~10s)
DECL|method|testUnmodifiableArrayListMultimap ()
specifier|public
name|void
name|testUnmodifiableArrayListMultimap
parameter_list|()
block|{
name|checkUnmodifiableMultimap
argument_list|(
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerializingUnmodifiableArrayListMultimap ()
specifier|public
name|void
name|testSerializingUnmodifiableArrayListMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|unmodifiable
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmodifiableArrayListMultimapRandomAccess ()
specifier|public
name|void
name|testUnmodifiableArrayListMultimapRandomAccess
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|delegate
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|delegate
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmodifiableLinkedListMultimapRandomAccess ()
specifier|public
name|void
name|testUnmodifiableLinkedListMultimapRandomAccess
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|delegate
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|delegate
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// slow (~10s)
DECL|method|testUnmodifiableHashMultimap ()
specifier|public
name|void
name|testUnmodifiableHashMultimap
parameter_list|()
block|{
name|checkUnmodifiableMultimap
argument_list|(
name|HashMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerializingUnmodifiableHashMultimap ()
specifier|public
name|void
name|testSerializingUnmodifiableHashMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|HashMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|unmodifiable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// slow (~10s)
DECL|method|testUnmodifiableTreeMultimap ()
specifier|public
name|void
name|testUnmodifiableTreeMultimap
parameter_list|()
block|{
name|checkUnmodifiableMultimap
argument_list|(
name|TreeMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"null"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerializingUnmodifiableTreeMultimap ()
specifier|public
name|void
name|testSerializingUnmodifiableTreeMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|TreeMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"null"
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|unmodifiable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// slow (~10s)
DECL|method|testUnmodifiableSynchronizedArrayListMultimap ()
specifier|public
name|void
name|testUnmodifiableSynchronizedArrayListMultimap
parameter_list|()
block|{
name|checkUnmodifiableMultimap
argument_list|(
name|Multimaps
operator|.
name|synchronizedListMultimap
argument_list|(
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerializingUnmodifiableSynchronizedArrayListMultimap ()
specifier|public
name|void
name|testSerializingUnmodifiableSynchronizedArrayListMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|Multimaps
operator|.
name|synchronizedListMultimap
argument_list|(
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|unmodifiable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// slow (~10s)
DECL|method|testUnmodifiableSynchronizedHashMultimap ()
specifier|public
name|void
name|testUnmodifiableSynchronizedHashMultimap
parameter_list|()
block|{
name|checkUnmodifiableMultimap
argument_list|(
name|Multimaps
operator|.
name|synchronizedSetMultimap
argument_list|(
name|HashMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerializingUnmodifiableSynchronizedHashMultimap ()
specifier|public
name|void
name|testSerializingUnmodifiableSynchronizedHashMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|Multimaps
operator|.
name|synchronizedSetMultimap
argument_list|(
name|HashMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|unmodifiable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// slow (~10s)
DECL|method|testUnmodifiableSynchronizedTreeMultimap ()
specifier|public
name|void
name|testUnmodifiableSynchronizedTreeMultimap
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|delegate
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|,
name|INT_COMPARATOR
argument_list|)
decl_stmt|;
name|SortedSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|synchronizedSortedSetMultimap
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|checkUnmodifiableMultimap
argument_list|(
name|multimap
argument_list|,
literal|false
argument_list|,
literal|"null"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|INT_COMPARATOR
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerializingUnmodifiableSynchronizedTreeMultimap ()
specifier|public
name|void
name|testSerializingUnmodifiableSynchronizedTreeMultimap
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|delegate
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
argument_list|,
name|INT_COMPARATOR
argument_list|)
decl_stmt|;
name|SortedSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|synchronizedSortedSetMultimap
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|multimap
argument_list|,
literal|false
argument_list|,
literal|"null"
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|unmodifiable
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|INT_COMPARATOR
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmodifiableMultimapIsView ()
specifier|public
name|void
name|testUnmodifiableMultimapIsView
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mod
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmod
init|=
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mod
argument_list|,
name|unmod
argument_list|)
expr_stmt|;
name|mod
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|unmod
operator|.
name|containsEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mod
argument_list|,
name|unmod
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testUnmodifiableMultimapEntries ()
specifier|public
name|void
name|testUnmodifiableMultimapEntries
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mod
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmod
init|=
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|mod
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
name|unmod
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|entry
operator|.
name|setValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|entry
operator|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|unmod
operator|.
name|entries
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
name|array
init|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
operator|)
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|2
index|]
decl_stmt|;
name|assertSame
argument_list|(
name|array
argument_list|,
name|unmod
operator|.
name|entries
argument_list|()
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|array
index|[
literal|0
index|]
operator|.
name|setValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|assertFalse
argument_list|(
name|unmod
operator|.
name|entries
argument_list|()
operator|.
name|contains
argument_list|(
name|nefariousMapEntry
argument_list|(
literal|"pwnd"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|unmod
operator|.
name|keys
argument_list|()
operator|.
name|contains
argument_list|(
literal|"pwnd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The supplied multimap will be mutated and an unmodifiable instance used    * in its stead. The multimap must support null keys and values.    */
DECL|method|checkUnmodifiableMultimap ( Multimap<String, Integer> multimap, boolean permitsDuplicates)
specifier|private
specifier|static
name|void
name|checkUnmodifiableMultimap
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
parameter_list|,
name|boolean
name|permitsDuplicates
parameter_list|)
block|{
name|checkUnmodifiableMultimap
argument_list|(
name|multimap
argument_list|,
name|permitsDuplicates
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * The supplied multimap will be mutated and an unmodifiable instance used    * in its stead. If the multimap does not support null keys or values,    * alternatives may be specified for tests involving nulls.    */
DECL|method|checkUnmodifiableMultimap ( Multimap<String, Integer> multimap, boolean permitsDuplicates, @Nullable String nullKey, @Nullable Integer nullValue)
specifier|private
specifier|static
name|void
name|checkUnmodifiableMultimap
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
parameter_list|,
name|boolean
name|permitsDuplicates
parameter_list|,
annotation|@
name|Nullable
name|String
name|nullKey
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|nullValue
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
init|=
name|prepareUnmodifiableTests
argument_list|(
name|multimap
argument_list|,
name|permitsDuplicates
argument_list|,
name|nullKey
argument_list|,
name|nullValue
argument_list|)
decl_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertMultimapIsUnmodifiable
argument_list|(
name|unmodifiable
argument_list|,
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertUnmodifiableIterableInTandem
argument_list|(
name|unmodifiable
operator|.
name|keys
argument_list|()
argument_list|,
name|multimap
operator|.
name|keys
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnmodifiableIterableInTandem
argument_list|(
name|unmodifiable
operator|.
name|keySet
argument_list|()
argument_list|,
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnmodifiableIterableInTandem
argument_list|(
name|unmodifiable
operator|.
name|entries
argument_list|()
argument_list|,
name|multimap
operator|.
name|entries
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnmodifiableIterableInTandem
argument_list|(
name|unmodifiable
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|toString
argument_list|()
argument_list|,
name|unmodifiable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|unmodifiable
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|,
name|unmodifiable
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unmodifiable
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|unmodifiable
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|unmodifiable
operator|.
name|entries
argument_list|()
operator|instanceof
name|Serializable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepares the multimap for unmodifiable tests, returning an unmodifiable view    * of the map.    */
DECL|method|prepareUnmodifiableTests ( Multimap<String, Integer> multimap, boolean permitsDuplicates, @Nullable String nullKey, @Nullable Integer nullValue)
specifier|private
specifier|static
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prepareUnmodifiableTests
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
parameter_list|,
name|boolean
name|permitsDuplicates
parameter_list|,
annotation|@
name|Nullable
name|String
name|nullKey
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|nullValue
parameter_list|)
block|{
name|multimap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|nullKey
argument_list|,
name|nullValue
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|nullValue
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|nullKey
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|permitsDuplicates
condition|)
block|{
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|unmodifiable
decl_stmt|;
if|if
condition|(
name|multimap
operator|instanceof
name|SortedSetMultimap
condition|)
block|{
name|unmodifiable
operator|=
name|Multimaps
operator|.
name|unmodifiableSortedSetMultimap
argument_list|(
operator|(
name|SortedSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|multimap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|multimap
operator|instanceof
name|SetMultimap
condition|)
block|{
name|unmodifiable
operator|=
name|Multimaps
operator|.
name|unmodifiableSetMultimap
argument_list|(
operator|(
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|multimap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|multimap
operator|instanceof
name|ListMultimap
condition|)
block|{
name|unmodifiable
operator|=
name|Multimaps
operator|.
name|unmodifiableListMultimap
argument_list|(
operator|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|multimap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unmodifiable
operator|=
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
return|return
name|unmodifiable
return|;
block|}
DECL|method|assertUnmodifiableIterableInTandem ( Iterable<T> unmodifiable, Iterable<T> modifiable)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertUnmodifiableIterableInTandem
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|unmodifiable
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|modifiable
parameter_list|)
block|{
name|UnmodifiableCollectionTests
operator|.
name|assertIteratorIsUnmodifiable
argument_list|(
name|unmodifiable
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertIteratorsInOrder
argument_list|(
name|unmodifiable
operator|.
name|iterator
argument_list|()
argument_list|,
name|modifiable
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvertFrom ()
specifier|public
name|void
name|testInvertFrom
parameter_list|()
block|{
name|ImmutableMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|empty
init|=
name|ImmutableMultimap
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// typical usage example - sad that ArrayListMultimap.create() won't work
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|invertFrom
argument_list|(
name|empty
argument_list|,
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|single
init|=
operator|new
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// copy into existing multimap
name|assertSame
argument_list|(
name|multimap
argument_list|,
name|Multimaps
operator|.
name|invertFrom
argument_list|(
name|single
argument_list|,
name|multimap
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap_multimap ()
specifier|public
name|void
name|testAsMap_multimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newMultimap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|new
name|QueueSupplier
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Multimaps
operator|.
name|asMap
argument_list|(
name|multimap
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|multimap
operator|.
name|asMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap_listMultimap ()
specifier|public
name|void
name|testAsMap_listMultimap
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|listMultimap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Multimaps
operator|.
name|asMap
argument_list|(
name|listMultimap
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|listMultimap
operator|.
name|asMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap_setMultimap ()
specifier|public
name|void
name|testAsMap_setMultimap
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|setMultimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Multimaps
operator|.
name|asMap
argument_list|(
name|setMultimap
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|setMultimap
operator|.
name|asMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap_sortedSetMultimap ()
specifier|public
name|void
name|testAsMap_sortedSetMultimap
parameter_list|()
block|{
name|SortedSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|sortedSetMultimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Multimaps
operator|.
name|asMap
argument_list|(
name|sortedSetMultimap
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|sortedSetMultimap
operator|.
name|asMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testForMap ()
specifier|public
name|void
name|testForMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimapView
init|=
name|Multimaps
operator|.
name|forMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|multimap
argument_list|,
name|multimapView
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|map
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap2
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap2
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimapView
operator|.
name|equals
argument_list|(
name|multimap2
argument_list|)
argument_list|)
expr_stmt|;
name|multimap2
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimapView
operator|.
name|equals
argument_list|(
name|multimap2
argument_list|)
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|listMultimap
init|=
operator|new
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"SetMultimap equals ListMultimap"
argument_list|,
name|multimapView
operator|.
name|equals
argument_list|(
name|listMultimap
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|toString
argument_list|()
argument_list|,
name|multimapView
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|multimapView
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|size
argument_list|()
argument_list|,
name|multimapView
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimapView
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimapView
operator|.
name|containsValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimapView
operator|.
name|containsEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|multimapView
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|2
argument_list|)
argument_list|,
name|multimapView
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|multimapView
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|multimapView
operator|.
name|putAll
argument_list|(
literal|"baz"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|multimapView
operator|.
name|putAll
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|multimapView
operator|.
name|replaceValues
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|multimapView
operator|.
name|remove
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimapView
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|,
name|multimapView
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|,
name|multimapView
operator|.
name|keys
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multimapView
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multimapView
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multimapView
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multimapView
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|multimapView
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|multimapView
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimapView
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|toString
argument_list|()
argument_list|,
name|multimapView
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|multimapView
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|size
argument_list|()
argument_list|,
name|multimapView
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimapView
argument_list|,
name|ArrayListMultimap
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testForMapSerialization ()
specifier|public
name|void
name|testForMapSerialization
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimapView
init|=
name|Multimaps
operator|.
name|forMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimapView
argument_list|)
expr_stmt|;
block|}
DECL|method|testForMapRemoveAll ()
specifier|public
name|void
name|testForMapRemoveAll
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"cow"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|forMap
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|multimap
operator|.
name|removeAll
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|2
argument_list|)
argument_list|,
name|multimap
operator|.
name|removeAll
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForMapAsMap ()
specifier|public
name|void
name|testForMapAsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|asMap
init|=
name|Multimaps
operator|.
name|forMap
argument_list|(
name|map
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|asMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asMap
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|asMap
operator|.
name|containsKey
argument_list|(
literal|"cow"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|asMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|contains
argument_list|(
operator|(
name|Object
operator|)
literal|4.5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|remove
argument_list|(
operator|(
name|Object
operator|)
literal|4.5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForMapGetIteration ()
specifier|public
name|void
name|testForMapGetIteration
parameter_list|()
block|{
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
name|tester
init|=
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|4
argument_list|,
name|MODIFIABLE
argument_list|,
name|newHashSet
argument_list|(
literal|1
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|=
name|Multimaps
operator|.
name|forMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|elements
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|tester
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|enum|Color
DECL|enumConstant|BLUE
DECL|enumConstant|RED
DECL|enumConstant|YELLOW
DECL|enumConstant|GREEN
specifier|private
enum|enum
name|Color
block|{
name|BLUE
block|,
name|RED
block|,
name|YELLOW
block|,
name|GREEN
block|}
DECL|class|CountingSupplier
specifier|private
specifier|abstract
specifier|static
class|class
name|CountingSupplier
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|E
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|method|getImpl ()
specifier|abstract
name|E
name|getImpl
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|E
name|get
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|getImpl
argument_list|()
return|;
block|}
block|}
DECL|class|QueueSupplier
specifier|private
specifier|static
class|class
name|QueueSupplier
extends|extends
name|CountingSupplier
argument_list|<
name|Queue
argument_list|<
name|Integer
argument_list|>
argument_list|>
block|{
DECL|method|getImpl ()
annotation|@
name|Override
specifier|public
name|Queue
argument_list|<
name|Integer
argument_list|>
name|getImpl
parameter_list|()
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|testNewMultimapWithCollectionRejectingNegativeElements ()
specifier|public
name|void
name|testNewMultimapWithCollectionRejectingNegativeElements
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|SetSupplier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getImpl
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|backing
init|=
name|super
operator|.
name|getImpl
argument_list|()
decl_stmt|;
return|return
operator|new
name|ForwardingSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Integer
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|backing
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Integer
name|element
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|element
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|add
argument_list|(
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Integer
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|standardAddAll
argument_list|(
name|collection
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newEnumMap
argument_list|(
name|Color
operator|.
name|class
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
try|try
block|{
name|multimap
operator|.
name|put
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|multimap
operator|.
name|put
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|multimap
operator|.
name|put
argument_list|(
name|Color
operator|.
name|GREEN
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|assertThat
argument_list|(
name|multimap
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewMultimap ()
specifier|public
name|void
name|testNewMultimap
parameter_list|()
block|{
comment|// The ubiquitous EnumArrayBlockingQueueMultimap
name|CountingSupplier
argument_list|<
name|Queue
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|QueueSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newEnumMap
argument_list|(
name|Color
operator|.
name|class
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[3, 1, 4]"
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|ummodifiable
init|=
name|Multimaps
operator|.
name|unmodifiableMultimap
argument_list|(
name|multimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[3, 1, 4]"
argument_list|,
name|ummodifiable
operator|.
name|get
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|collection
init|=
name|multimap
operator|.
name|get
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|collection
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
operator|instanceof
name|SortedSet
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|asMap
argument_list|()
operator|instanceof
name|SortedMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testNewMultimapSerialization ()
specifier|public
name|void
name|testNewMultimapSerialization
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|Queue
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|QueueSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newEnumMap
argument_list|(
name|Color
operator|.
name|class
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|class|ListSupplier
specifier|private
specifier|static
class|class
name|ListSupplier
extends|extends
name|CountingSupplier
argument_list|<
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
block|{
DECL|method|getImpl ()
annotation|@
name|Override
specifier|public
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|getImpl
parameter_list|()
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|testNewListMultimap ()
specifier|public
name|void
name|testNewListMultimap
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|ListSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newListMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{BLUE=[3, 1, 4, 1], RED=[2, 7, 1, 8]}"
argument_list|,
name|multimap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|)
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
operator|instanceof
name|SortedSet
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|asMap
argument_list|()
operator|instanceof
name|SortedMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testNewListMultimapSerialization ()
specifier|public
name|void
name|testNewListMultimapSerialization
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|ListSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newListMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|class|SetSupplier
specifier|private
specifier|static
class|class
name|SetSupplier
extends|extends
name|CountingSupplier
argument_list|<
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
block|{
DECL|method|getImpl ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getImpl
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|4
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|testNewSetMultimap ()
specifier|public
name|void
name|testNewSetMultimap
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|SetSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newSetMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testNewSetMultimapSerialization ()
specifier|public
name|void
name|testNewSetMultimapSerialization
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|SetSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newSetMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|class|SortedSetSupplier
specifier|private
specifier|static
class|class
name|SortedSetSupplier
extends|extends
name|CountingSupplier
argument_list|<
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|>
block|{
DECL|method|getImpl ()
annotation|@
name|Override
specifier|public
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|getImpl
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|INT_COMPARATOR
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|testNewSortedSetMultimap ()
specifier|public
name|void
name|testNewSortedSetMultimap
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|SortedSetSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newEnumMap
argument_list|(
name|Color
operator|.
name|class
argument_list|)
decl_stmt|;
name|SortedSetMultimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newSortedSetMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
comment|// newSortedSetMultimap calls the factory once to determine the comparator.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|factory
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[4, 3, 1]"
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INT_COMPARATOR
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testNewSortedSetMultimapSerialization ()
specifier|public
name|void
name|testNewSortedSetMultimapSerialization
parameter_list|()
block|{
name|CountingSupplier
argument_list|<
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|factory
init|=
operator|new
name|SortedSetSupplier
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Color
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newEnumMap
argument_list|(
name|Color
operator|.
name|class
argument_list|)
decl_stmt|;
name|SortedSetMultimap
argument_list|<
name|Color
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|newSortedSetMultimap
argument_list|(
name|map
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|BLUE
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|Color
operator|.
name|RED
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INT_COMPARATOR
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndex ()
specifier|public
name|void
name|testIndex
parameter_list|()
block|{
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stringToObject
init|=
operator|new
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1L
argument_list|)
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
name|Multimaps
operator|.
name|index
argument_list|(
name|stringToObject
operator|.
name|values
argument_list|()
argument_list|,
name|Functions
operator|.
name|toStringFunction
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringToObject
argument_list|,
name|outputMap
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexIterator ()
specifier|public
name|void
name|testIndexIterator
parameter_list|()
block|{
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stringToObject
init|=
operator|new
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1L
argument_list|)
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
name|Multimaps
operator|.
name|index
argument_list|(
name|stringToObject
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|Functions
operator|.
name|toStringFunction
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringToObject
argument_list|,
name|outputMap
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndex_ordering ()
specifier|public
name|void
name|testIndex_ordering
parameter_list|()
block|{
specifier|final
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedIndex
init|=
operator|new
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"Inky"
argument_list|)
operator|.
name|put
argument_list|(
literal|6
argument_list|,
literal|"Blinky"
argument_list|)
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|"Pinky"
argument_list|)
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|"Pinky"
argument_list|)
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|"Clyde"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|badGuys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Inky"
argument_list|,
literal|"Blinky"
argument_list|,
literal|"Pinky"
argument_list|,
literal|"Pinky"
argument_list|,
literal|"Clyde"
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|stringLengthFunction
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|length
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|index
init|=
name|Multimaps
operator|.
name|index
argument_list|(
name|badGuys
argument_list|,
name|stringLengthFunction
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndex_nullValue ()
specifier|public
name|void
name|testIndex_nullValue
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Multimaps
operator|.
name|index
argument_list|(
name|values
argument_list|,
name|Functions
operator|.
name|identity
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIndex_nullKey ()
specifier|public
name|void
name|testIndex_nullKey
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|Multimaps
operator|.
name|index
argument_list|(
name|values
argument_list|,
name|Functions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
name|value
operator|=
literal|"untested"
argument_list|)
DECL|method|testTransformValues ()
specifier|public
name|void
name|testTransformValues
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|"b"
argument_list|,
operator|-
literal|3
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"c"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|square
init|=
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Integer
name|in
parameter_list|)
block|{
return|return
name|in
operator|*
name|in
return|;
block|}
block|}
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|transformed
init|=
name|Multimaps
operator|.
name|transformValues
argument_list|(
name|multimap
argument_list|,
name|square
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformed
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|16
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|9
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|9
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"c"
argument_list|,
literal|36
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
name|value
operator|=
literal|"untested"
argument_list|)
DECL|method|testTransformValuesIsView ()
specifier|public
name|void
name|testTransformValuesIsView
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|transformed
init|=
name|Multimaps
operator|.
name|transformValues
argument_list|(
name|multimap
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
literal|"bbb"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transformed
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
name|value
operator|=
literal|"untested"
argument_list|)
DECL|method|testTransformListValues ()
specifier|public
name|void
name|testTransformListValues
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|"b"
argument_list|,
operator|-
literal|3
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"c"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|square
init|=
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Integer
name|in
parameter_list|)
block|{
return|return
name|in
operator|*
name|in
return|;
block|}
block|}
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|transformed
init|=
name|Multimaps
operator|.
name|transformValues
argument_list|(
name|multimap
argument_list|,
name|square
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformed
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|16
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|9
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|9
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"c"
argument_list|,
literal|36
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
name|value
operator|=
literal|"untested"
argument_list|)
DECL|method|testTransformEntries ()
specifier|public
name|void
name|testTransformEntries
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
operator|-
literal|6
argument_list|)
decl_stmt|;
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|transformer
init|=
operator|new
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|transformEntry
parameter_list|(
name|String
name|key
parameter_list|,
name|Integer
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
condition|?
name|key
else|:
literal|"no"
operator|+
name|key
return|;
block|}
block|}
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transformed
init|=
name|Multimaps
operator|.
name|transformEntries
argument_list|(
name|multimap
argument_list|,
name|transformer
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformed
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|"nob"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
name|value
operator|=
literal|"untested"
argument_list|)
DECL|method|testTransformListEntries ()
specifier|public
name|void
name|testTransformListEntries
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
literal|"b"
argument_list|,
literal|6
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|transformer
init|=
operator|new
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|transformEntry
parameter_list|(
name|String
name|key
parameter_list|,
name|Integer
name|value
parameter_list|)
block|{
return|return
name|key
operator|+
name|value
return|;
block|}
block|}
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transformed
init|=
name|Multimaps
operator|.
name|transformEntries
argument_list|(
name|multimap
argument_list|,
name|transformer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a1"
argument_list|,
literal|"a"
argument_list|,
literal|"a4"
argument_list|,
literal|"a"
argument_list|,
literal|"a4"
argument_list|,
literal|"b"
argument_list|,
literal|"b6"
argument_list|)
argument_list|,
name|transformed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{a=[a1, a4, a4], b=[b6]}"
argument_list|,
name|transformed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSynchronizedMultimapSampleCodeCompilation ()
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|testSynchronizedMultimapSampleCodeCompilation
parameter_list|()
block|{
name|K
name|key
init|=
literal|null
decl_stmt|;
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|synchronizedMultimap
argument_list|(
name|HashMultimap
operator|.
expr|<
name|K
argument_list|,
name|V
operator|>
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|values
init|=
name|multimap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Needn't be in synchronized block
synchronized|synchronized
init|(
name|multimap
init|)
block|{
comment|// Synchronizing on multimap, not values!
name|Iterator
argument_list|<
name|V
argument_list|>
name|i
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Must be in synchronized block
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|foo
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|foo (Object o)
specifier|private
specifier|static
name|void
name|foo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{}
DECL|method|testFilteredKeysSetMultimapReplaceValues ()
specifier|public
name|void
name|testFilteredKeysSetMultimapReplaceValues
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|filtered
init|=
name|Multimaps
operator|.
name|filterKeys
argument_list|(
name|multimap
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|filtered
operator|.
name|replaceValues
argument_list|(
literal|"baz"
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|filtered
operator|.
name|replaceValues
argument_list|(
literal|"baz"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFilteredKeysSetMultimapGetBadValue ()
specifier|public
name|void
name|testFilteredKeysSetMultimapGetBadValue
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|filtered
init|=
name|Multimaps
operator|.
name|filterKeys
argument_list|(
name|multimap
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|bazSet
init|=
name|filtered
operator|.
name|get
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bazSet
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
block|{
name|bazSet
operator|.
name|add
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|bazSet
operator|.
name|addAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFilteredKeysListMultimapGetBadValue ()
specifier|public
name|void
name|testFilteredKeysListMultimapGetBadValue
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|filtered
init|=
name|Multimaps
operator|.
name|filterKeys
argument_list|(
name|multimap
argument_list|,
name|Predicates
operator|.
name|in
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|bazList
init|=
name|filtered
operator|.
name|get
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bazList
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
block|{
name|bazList
operator|.
name|add
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|bazList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|bazList
operator|.
name|addAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|bazList
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Multimaps
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

