begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied.  See the License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code TreeTraverser}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TreeTraverserTest
specifier|public
class|class
name|TreeTraverserTest
extends|extends
name|TestCase
block|{
DECL|class|Node
specifier|private
specifier|static
class|class
name|Node
block|{
DECL|field|value
specifier|final
name|char
name|value
decl_stmt|;
DECL|method|Node (char value)
name|Node
parameter_list|(
name|char
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|class|Tree
specifier|private
specifier|static
specifier|final
class|class
name|Tree
extends|extends
name|Node
block|{
DECL|field|children
specifier|final
name|List
argument_list|<
name|Tree
argument_list|>
name|children
decl_stmt|;
DECL|method|Tree (char value, Tree... children)
specifier|public
name|Tree
parameter_list|(
name|char
name|value
parameter_list|,
name|Tree
modifier|...
name|children
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|ADAPTER
specifier|private
specifier|static
specifier|final
name|TreeTraverser
argument_list|<
name|Tree
argument_list|>
name|ADAPTER
init|=
operator|new
name|TreeTraverser
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Tree
argument_list|>
name|children
parameter_list|(
name|Tree
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|children
return|;
block|}
block|}
decl_stmt|;
DECL|field|ADAPTER_USING_USING
specifier|private
specifier|static
specifier|final
name|TreeTraverser
argument_list|<
name|Tree
argument_list|>
name|ADAPTER_USING_USING
init|=
name|TreeTraverser
operator|.
name|using
argument_list|(
operator|new
name|Function
argument_list|<
name|Tree
argument_list|,
name|Iterable
argument_list|<
name|Tree
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Tree
argument_list|>
name|apply
parameter_list|(
name|Tree
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|children
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|//        h
comment|//      / | \
comment|//     /  e  \
comment|//    d       g
comment|//   /|\      |
comment|//  / | \     f
comment|// a  b  c
DECL|field|a
specifier|static
specifier|final
name|Tree
name|a
init|=
operator|new
name|Tree
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
DECL|field|b
specifier|static
specifier|final
name|Tree
name|b
init|=
operator|new
name|Tree
argument_list|(
literal|'b'
argument_list|)
decl_stmt|;
DECL|field|c
specifier|static
specifier|final
name|Tree
name|c
init|=
operator|new
name|Tree
argument_list|(
literal|'c'
argument_list|)
decl_stmt|;
DECL|field|d
specifier|static
specifier|final
name|Tree
name|d
init|=
operator|new
name|Tree
argument_list|(
literal|'d'
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
decl_stmt|;
DECL|field|e
specifier|static
specifier|final
name|Tree
name|e
init|=
operator|new
name|Tree
argument_list|(
literal|'e'
argument_list|)
decl_stmt|;
DECL|field|f
specifier|static
specifier|final
name|Tree
name|f
init|=
operator|new
name|Tree
argument_list|(
literal|'f'
argument_list|)
decl_stmt|;
DECL|field|g
specifier|static
specifier|final
name|Tree
name|g
init|=
operator|new
name|Tree
argument_list|(
literal|'g'
argument_list|,
name|f
argument_list|)
decl_stmt|;
DECL|field|h
specifier|static
specifier|final
name|Tree
name|h
init|=
operator|new
name|Tree
argument_list|(
literal|'h'
argument_list|,
name|d
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
DECL|method|iterationOrder (Iterable<? extends Node> iterable)
specifier|static
name|String
name|iterationOrder
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|iterable
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|t
range|:
name|iterable
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|forEachBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|iterable
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|forEachBuilder
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Iterator content was "
operator|+
name|builder
operator|+
literal|" but forEach content was "
operator|+
name|forEachBuilder
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|forEachBuilder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testPreOrder ()
specifier|public
name|void
name|testPreOrder
parameter_list|()
block|{
name|assertThat
argument_list|(
name|iterationOrder
argument_list|(
name|ADAPTER
operator|.
name|preOrderTraversal
argument_list|(
name|h
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hdabcegf"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPostOrder ()
specifier|public
name|void
name|testPostOrder
parameter_list|()
block|{
name|assertThat
argument_list|(
name|iterationOrder
argument_list|(
name|ADAPTER
operator|.
name|postOrderTraversal
argument_list|(
name|h
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"abcdefgh"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBreadthOrder ()
specifier|public
name|void
name|testBreadthOrder
parameter_list|()
block|{
name|assertThat
argument_list|(
name|iterationOrder
argument_list|(
name|ADAPTER
operator|.
name|breadthFirstTraversal
argument_list|(
name|h
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hdegabcf"
argument_list|)
expr_stmt|;
block|}
DECL|method|testUsing ()
specifier|public
name|void
name|testUsing
parameter_list|()
block|{
name|assertThat
argument_list|(
name|iterationOrder
argument_list|(
name|ADAPTER_USING_USING
operator|.
name|preOrderTraversal
argument_list|(
name|h
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"hdabcegf"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ADAPTER
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

