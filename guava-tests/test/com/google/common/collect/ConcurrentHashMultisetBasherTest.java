begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Basher test for {@link ConcurrentHashMultiset}: start a bunch of threads, have each of them  * do operations at random. Each thread keeps track of the per-key deltas that it's directly  * responsible for; after all threads have completed, we sum the per-key deltas and compare to the  * existing multiset values.  *  * @author schmoe@google.com (mike nonemacher)  */
end_comment

begin_class
DECL|class|ConcurrentHashMultisetBasherTest
specifier|public
class|class
name|ConcurrentHashMultisetBasherTest
extends|extends
name|TestCase
block|{
DECL|method|testAddAndRemove_ConcurrentHashMap ()
specifier|public
name|void
name|testAddAndRemove_ConcurrentHashMap
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddAndRemove
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndRemove_ConcurrentSkipListMap ()
specifier|public
name|void
name|testAddAndRemove_ConcurrentSkipListMap
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddAndRemove
argument_list|(
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndRemove_MapMakerMap ()
specifier|public
name|void
name|testAddAndRemove_MapMakerMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MapMaker
name|mapMaker
init|=
operator|new
name|MapMaker
argument_list|()
decl_stmt|;
comment|// force MapMaker to use its own CustomConcurrentHashMap
name|mapMaker
operator|.
name|useCustomMap
operator|=
literal|true
expr_stmt|;
name|testAddAndRemove
argument_list|(
name|mapMaker
operator|.
expr|<
name|String
argument_list|,
name|AtomicInteger
operator|>
name|makeMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndRemove (ConcurrentMap<String, AtomicInteger> map)
specifier|private
name|void
name|testAddAndRemove
parameter_list|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|map
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|int
name|nThreads
init|=
literal|20
decl_stmt|;
name|int
name|tasksPerThread
init|=
literal|10
decl_stmt|;
name|int
name|nTasks
init|=
name|nThreads
operator|*
name|tasksPerThread
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|nTasks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTasks
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|MutateTask
argument_list|(
name|multiset
argument_list|,
name|keys
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|deltas
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|int
index|[]
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|int
index|[]
name|taskDeltas
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deltas
index|[
name|i
index|]
operator|+=
name|taskDeltas
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|actualCounts
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|keys
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|multiset
operator|.
name|count
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Counts not as expected"
argument_list|,
name|Ints
operator|.
name|asList
argument_list|(
name|deltas
argument_list|)
argument_list|,
name|actualCounts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|// Since we have access to the backing map, verify that there are no zeroes in the map
for|for
control|(
name|AtomicInteger
name|value
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"map should not contain a zero"
argument_list|,
name|value
operator|.
name|get
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MutateTask
specifier|private
specifier|static
class|class
name|MutateTask
implements|implements
name|Callable
argument_list|<
name|int
index|[]
argument_list|>
block|{
DECL|field|multiset
specifier|private
specifier|final
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
name|multiset
decl_stmt|;
DECL|field|keys
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|keys
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|MutateTask (ConcurrentHashMultiset<String> multiset, ImmutableList<String> keys)
specifier|private
name|MutateTask
parameter_list|(
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
name|multiset
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|multiset
operator|=
name|multiset
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
block|}
DECL|method|call ()
annotation|@
name|Override
specifier|public
name|int
index|[]
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iterations
init|=
literal|100000
decl_stmt|;
name|int
name|nKeys
init|=
name|keys
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|deltas
init|=
operator|new
name|int
index|[
name|nKeys
index|]
decl_stmt|;
name|Operation
index|[]
name|operations
init|=
name|Operation
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|keyIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|nKeys
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|keys
operator|.
name|get
argument_list|(
name|keyIndex
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
name|operations
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|operations
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|ADD
case|:
block|{
name|int
name|delta
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|multiset
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|deltas
index|[
name|keyIndex
index|]
operator|+=
name|delta
expr_stmt|;
break|break;
block|}
case|case
name|SET_COUNT
case|:
block|{
name|int
name|newValue
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|int
name|oldValue
init|=
name|multiset
operator|.
name|setCount
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
name|deltas
index|[
name|keyIndex
index|]
operator|+=
operator|(
name|newValue
operator|-
name|oldValue
operator|)
expr_stmt|;
break|break;
block|}
case|case
name|SET_COUNT_IF
case|:
block|{
name|int
name|newValue
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|int
name|oldValue
init|=
name|multiset
operator|.
name|count
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiset
operator|.
name|setCount
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|deltas
index|[
name|keyIndex
index|]
operator|+=
operator|(
name|newValue
operator|-
name|oldValue
operator|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|REMOVE
case|:
block|{
name|int
name|delta
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|// [0, 5]
name|int
name|oldValue
init|=
name|multiset
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|delta
argument_list|)
decl_stmt|;
name|deltas
index|[
name|keyIndex
index|]
operator|-=
name|Math
operator|.
name|min
argument_list|(
name|delta
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REMOVE_EXACTLY
case|:
block|{
name|int
name|delta
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// [0, 4]
if|if
condition|(
name|multiset
operator|.
name|removeExactly
argument_list|(
name|key
argument_list|,
name|delta
argument_list|)
condition|)
block|{
name|deltas
index|[
name|keyIndex
index|]
operator|-=
name|delta
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
return|return
name|deltas
return|;
block|}
DECL|enum|Operation
specifier|private
enum|enum
name|Operation
block|{
DECL|enumConstant|ADD
name|ADD
block|,
DECL|enumConstant|SET_COUNT
name|SET_COUNT
block|,
DECL|enumConstant|SET_COUNT_IF
name|SET_COUNT_IF
block|,
DECL|enumConstant|REMOVE
name|REMOVE
block|,
DECL|enumConstant|REMOVE_EXACTLY
name|REMOVE_EXACTLY
block|,       ;     }
block|}
block|}
end_class

end_unit

