begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableSetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableRangeSet}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ImmutableRangeSet"
argument_list|)
DECL|class|ImmutableRangeSetTest
specifier|public
class|class
name|ImmutableRangeSetTest
extends|extends
name|AbstractRangeSetTest
block|{
DECL|class|ImmutableRangeSetIntegerAsSetGenerator
specifier|static
specifier|final
class|class
name|ImmutableRangeSetIntegerAsSetGenerator
implements|implements
name|TestSetGenerator
argument_list|<
name|Integer
argument_list|>
block|{
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Integer
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Integer
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Integer
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Integer> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|ImmutableRangeSet
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableRangeSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|o
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|asSet
argument_list|(
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableRangeSetBigIntegerAsSetGenerator
specifier|static
specifier|final
class|class
name|ImmutableRangeSetBigIntegerAsSetGenerator
implements|implements
name|TestSetGenerator
argument_list|<
name|BigInteger
argument_list|>
block|{
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|BigInteger
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|BigInteger
argument_list|>
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|BigInteger
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|BigInteger
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<BigInteger> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|BigInteger
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|BigInteger
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|BigInteger
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|ImmutableRangeSet
operator|.
name|Builder
argument_list|<
name|BigInteger
argument_list|>
name|builder
init|=
name|ImmutableRangeSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|BigInteger
name|i
init|=
operator|(
name|BigInteger
operator|)
name|o
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
name|i
argument_list|,
name|i
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|asSet
argument_list|(
name|DiscreteDomain
operator|.
name|bigIntegers
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableRangeSetTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableRangeSetIntegerAsSetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableRangeSet.asSet[DiscreteDomain.integers[]]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|NON_STANDARD_TOSTRING
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableRangeSetBigIntegerAsSetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableRangeSet.asSet[DiscreteDomain.bigIntegers[]]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|NON_STANDARD_TOSTRING
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|enclosesAll
argument_list|(
name|rangeSet
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll ()
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
name|all
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|enclosesAll
argument_list|(
name|rangeSet
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleBoundedRange ()
specifier|public
name|void
name|testSingleBoundedRange
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|expectedComplement
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|expectedComplement
operator|.
name|add
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedComplement
operator|.
name|add
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedComplement
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleBoundedBelowRange ()
specifier|public
name|void
name|testSingleBoundedBelowRange
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleBoundedAboveRange ()
specifier|public
name|void
name|testSingleBoundedAboveRange
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleBoundedRanges ()
specifier|public
name|void
name|testMultipleBoundedRanges
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|expectedComplement
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedComplement
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleBoundedBelowRanges ()
specifier|public
name|void
name|testMultipleBoundedBelowRanges
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|expectedComplement
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedComplement
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleBoundedAboveRanges ()
specifier|public
name|void
name|testMultipleBoundedAboveRanges
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|expectedComplement
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedComplement
argument_list|,
name|rangeSet
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddUnsupported ()
specifier|public
name|void
name|testAddUnsupported
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rangeSet
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testAddAllUnsupported ()
specifier|public
name|void
name|testAddAllUnsupported
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rangeSet
operator|.
name|addAll
argument_list|(
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testRemoveUnsupported ()
specifier|public
name|void
name|testRemoveUnsupported
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rangeSet
operator|.
name|remove
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testRemoveAllUnsupported ()
specifier|public
name|void
name|testRemoveAllUnsupported
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rangeSet
operator|.
name|removeAll
argument_list|(
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|rangeSet
operator|.
name|removeAll
argument_list|(
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testExhaustive ()
specifier|public
name|void
name|testExhaustive
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ImmutableSet
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|ranges
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|Range
operator|.
expr|<
name|Integer
operator|>
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|lessThan
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|10
argument_list|)
argument_list|,
name|Range
operator|.
name|atMost
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Range
operator|.
name|atLeast
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|subset
range|:
name|Sets
operator|.
name|powerSet
argument_list|(
name|ranges
argument_list|)
control|)
block|{
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|mutable
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableRangeSet
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableRangeSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|subset
control|)
block|{
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|other
range|:
name|mutable
operator|.
name|asRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|isConnected
argument_list|(
name|range
argument_list|)
operator|&&
operator|!
name|other
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
block|}
block|}
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|overlaps
argument_list|)
expr_stmt|;
name|mutable
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|overlaps
argument_list|)
expr_stmt|;
block|}
block|}
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|built
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mutable
argument_list|,
name|built
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableRangeSet
operator|.
name|copyOf
argument_list|(
name|mutable
argument_list|)
argument_list|,
name|built
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mutable
operator|.
name|complement
argument_list|()
argument_list|,
name|built
operator|.
name|complement
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|mutable
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|,
name|built
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|built
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|built
operator|.
name|asRanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAsSet ()
specifier|public
name|void
name|testAsSet
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|15
argument_list|,
literal|17
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|expectedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|asSet
init|=
name|rangeSet
operator|.
name|asSet
argument_list|(
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSet
argument_list|,
name|asSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|asSet
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedSet
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|asSet
operator|.
name|containsAll
argument_list|(
name|expectedSet
argument_list|)
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|asSet
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsSetHeadSet ()
specifier|public
name|void
name|testAsSetHeadSet
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|15
argument_list|,
literal|17
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|expectedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|asSet
init|=
name|rangeSet
operator|.
name|asSet
argument_list|(
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|asSet
operator|.
name|headSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
argument_list|,
name|expectedSet
operator|.
name|headSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asSet
operator|.
name|headSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
argument_list|,
name|expectedSet
operator|.
name|headSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAsSetTailSet ()
specifier|public
name|void
name|testAsSetTailSet
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|15
argument_list|,
literal|17
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|expectedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|asSet
init|=
name|rangeSet
operator|.
name|asSet
argument_list|(
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|asSet
operator|.
name|tailSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
argument_list|,
name|expectedSet
operator|.
name|tailSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asSet
operator|.
name|tailSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
argument_list|,
name|expectedSet
operator|.
name|tailSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAsSetSubSet ()
specifier|public
name|void
name|testAsSetSubSet
parameter_list|()
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|15
argument_list|,
literal|17
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|expectedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|asSet
init|=
name|rangeSet
operator|.
name|asSet
argument_list|(
name|DiscreteDomain
operator|.
name|integers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<=
literal|20
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
argument_list|,
name|asSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
argument_list|,
name|asSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|,
name|j
argument_list|,
literal|true
argument_list|)
argument_list|,
name|asSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|false
argument_list|,
name|j
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|,
name|j
argument_list|,
literal|true
argument_list|)
argument_list|,
name|asSet
operator|.
name|subSet
argument_list|(
name|i
argument_list|,
literal|true
argument_list|,
name|j
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSubRangeSet ()
specifier|public
name|void
name|testSubRangeSet
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|rangesBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rangesBuilder
operator|.
name|add
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|2
init|;
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|boundType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|rangesBuilder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|upTo
argument_list|(
name|i
argument_list|,
name|boundType
argument_list|)
argument_list|)
expr_stmt|;
name|rangesBuilder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|downTo
argument_list|(
name|i
argument_list|,
name|boundType
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<=
literal|2
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|lbType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|ubType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|rangesBuilder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|range
argument_list|(
name|i
argument_list|,
name|lbType
argument_list|,
name|j
argument_list|,
name|ubType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|ranges
init|=
name|rangesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|2
init|;
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|rangesBuilder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|rangesBuilder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|subRanges
init|=
name|rangesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|ranges
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|ranges
control|)
block|{
if|if
condition|(
operator|!
name|range1
operator|.
name|isConnected
argument_list|(
name|range2
argument_list|)
operator|||
name|range1
operator|.
name|intersection
argument_list|(
name|range2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|range1
argument_list|)
operator|.
name|add
argument_list|(
name|range2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|subRange
range|:
name|subRanges
control|)
block|{
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|rangeSet
operator|.
name|asRanges
argument_list|()
control|)
block|{
if|if
condition|(
name|range
operator|.
name|isConnected
argument_list|(
name|subRange
argument_list|)
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|range
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|subRangeSet
init|=
name|rangeSet
operator|.
name|subRangeSet
argument_list|(
name|subRange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|subRangeSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|asRanges
argument_list|()
argument_list|,
name|subRangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|span
argument_list|()
argument_list|,
name|subRangeSet
operator|.
name|span
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
operator|-
literal|3
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|,
name|subRangeSet
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

