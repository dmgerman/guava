begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code ForwardingObject}.  *  * @author Mike Bostock  */
end_comment

begin_class
DECL|class|ForwardingObjectTest
specifier|public
class|class
name|ForwardingObjectTest
extends|extends
name|TestCase
block|{
DECL|method|testEqualsReflexive ()
specifier|public
name|void
name|testEqualsReflexive
parameter_list|()
block|{
specifier|final
name|Object
name|delegate
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ForwardingObject
name|forward
init|=
operator|new
name|ForwardingObject
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|forward
operator|.
name|equals
argument_list|(
name|forward
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsSymmetric ()
specifier|public
name|void
name|testEqualsSymmetric
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|delegate
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ForwardingObject
name|forward
init|=
operator|new
name|ForwardingObject
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|forward
operator|.
name|equals
argument_list|(
name|delegate
argument_list|)
argument_list|,
name|delegate
operator|.
name|equals
argument_list|(
name|forward
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

