begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code AbstractMapEntry}.  *  * @author Mike Bostock  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractMapEntryTest
specifier|public
class|class
name|AbstractMapEntryTest
extends|extends
name|TestCase
block|{
DECL|field|NK
specifier|private
specifier|static
specifier|final
name|String
name|NK
init|=
literal|null
decl_stmt|;
DECL|field|NV
specifier|private
specifier|static
specifier|final
name|Integer
name|NV
init|=
literal|null
decl_stmt|;
DECL|method|entry (final K key, final V value)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|(
specifier|final
name|K
name|key
parameter_list|,
specifier|final
name|V
name|value
parameter_list|)
block|{
return|return
operator|new
name|AbstractMapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
return|;
block|}
DECL|method|control (K key, V value)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|control
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo=1"
argument_list|,
name|entry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToStringNull ()
specifier|public
name|void
name|testToStringNull
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"null=1"
argument_list|,
name|entry
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo=null"
argument_list|,
name|entry
argument_list|(
literal|"foo"
argument_list|,
name|NV
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null=null"
argument_list|,
name|entry
argument_list|(
name|NK
argument_list|,
name|NV
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|foo1
init|=
name|entry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|foo1
argument_list|,
name|foo1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|control
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|foo1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|control
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|control
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo1
operator|.
name|equals
argument_list|(
name|control
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo1
operator|.
name|equals
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsNull ()
specifier|public
name|void
name|testEqualsNull
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|control
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|control
argument_list|(
literal|"bar"
argument_list|,
name|NV
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|"bar"
argument_list|,
name|NV
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|control
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
argument_list|(
name|NK
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|control
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCode ()
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|control
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|control
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCodeNull ()
specifier|public
name|void
name|testHashCodeNull
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|control
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entry
argument_list|(
name|NK
argument_list|,
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|control
argument_list|(
literal|"bar"
argument_list|,
name|NV
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entry
argument_list|(
literal|"bar"
argument_list|,
name|NV
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|control
argument_list|(
name|NK
argument_list|,
name|NV
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|entry
argument_list|(
name|NK
argument_list|,
name|NV
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

