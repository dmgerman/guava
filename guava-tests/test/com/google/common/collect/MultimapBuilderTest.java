begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
operator|.
name|MultimapBuilderWithKeys
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MultimapBuilder}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|MultimapBuilderTest
specifier|public
class|class
name|MultimapBuilderTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
comment|// doesn't build without explicit type parameters on build() methods
DECL|method|testGenerics ()
specifier|public
name|void
name|testGenerics
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|a
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|SortedSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|b
init|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|treeSetValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|c
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
operator|.
name|hashSetValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
block|}
DECL|method|testGenerics_gwtCompatible ()
specifier|public
name|void
name|testGenerics_gwtCompatible
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|a
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
operator|<
name|String
decl_stmt|,
name|Integer
decl|>
name|build
argument_list|()
decl_stmt|;
name|SortedSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|b
init|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|treeSetValues
argument_list|()
operator|.
operator|<
name|String
decl_stmt|,
name|Integer
decl|>
name|build
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|c
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
operator|.
name|hashSetValues
argument_list|()
operator|.
operator|<
name|String
decl_stmt|,
name|Integer
decl|>
name|build
argument_list|()
decl_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// doesn't build without explicit type parameters on build() methods
DECL|method|testTreeKeys ()
specifier|public
name|void
name|testTreeKeys
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
operator|instanceof
name|SortedSet
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|asMap
argument_list|()
operator|instanceof
name|SortedMap
argument_list|)
expr_stmt|;
block|}
DECL|method|testTreeKeys_gwtCompatible ()
specifier|public
name|void
name|testTreeKeys_gwtCompatible
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
operator|<
name|String
decl_stmt|,
name|Integer
decl|>
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
operator|instanceof
name|SortedSet
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|asMap
argument_list|()
operator|instanceof
name|SortedMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// serialization
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MultimapBuilderWithKeys
argument_list|<
name|?
argument_list|>
name|builderWithKeys
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
argument_list|,
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
argument_list|,
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|()
argument_list|,
name|MultimapBuilder
operator|.
name|enumKeys
argument_list|(
name|RoundingMode
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
for|for
control|(
name|MultimapBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|builderWithKeys
operator|.
name|arrayListValues
argument_list|()
argument_list|,
name|builderWithKeys
operator|.
name|linkedListValues
argument_list|()
argument_list|,
name|builderWithKeys
operator|.
name|hashSetValues
argument_list|()
argument_list|,
name|builderWithKeys
operator|.
name|linkedHashSetValues
argument_list|()
argument_list|,
name|builderWithKeys
operator|.
name|treeSetValues
argument_list|()
argument_list|,
name|builderWithKeys
operator|.
name|enumSetValues
argument_list|(
name|RoundingMode
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
comment|/*          * Temporarily inlining SerializableTester here for obscure internal reasons.          */
name|reserializeAndAssert
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// serialization
DECL|method|reserializeAndAssert (Object object)
specifier|private
specifier|static
name|void
name|reserializeAndAssert
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|copy
init|=
name|reserialize
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|object
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|,
name|copy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// serialization
DECL|method|reserialize (Object object)
specifier|private
specifier|static
name|Object
name|reserialize
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readObject
argument_list|()
return|;
block|}
block|}
end_class

end_unit

