begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_comment
comment|/**  * Tests for {@code ForwardingListIterator}.  *  * @author Robert Konigsberg  */
end_comment

begin_class
DECL|class|ForwardingListIteratorTest
specifier|public
class|class
name|ForwardingListIteratorTest
extends|extends
name|ForwardingTestCase
block|{
DECL|field|forward
specifier|private
name|ForwardingListIterator
argument_list|<
name|String
argument_list|>
name|forward
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|/*      * Class parameters must be raw, so we can't create a proxy with generic      * type arguments. The created proxy only records calls and returns null, so      * the type is irrelevant at runtime.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|ListIterator
argument_list|<
name|String
argument_list|>
name|li
init|=
name|createProxyInstance
argument_list|(
name|ListIterator
operator|.
name|class
argument_list|)
decl_stmt|;
name|forward
operator|=
operator|new
name|ForwardingListIterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ListIterator
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|li
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|testAdd_T ()
specifier|public
name|void
name|testAdd_T
parameter_list|()
block|{
name|forward
operator|.
name|add
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[add(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasNext ()
specifier|public
name|void
name|testHasNext
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[hasNext]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasPrevious ()
specifier|public
name|void
name|testHasPrevious
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|hasPrevious
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[hasPrevious]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNext ()
specifier|public
name|void
name|testNext
parameter_list|()
block|{
name|String
name|unused
init|=
name|forward
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[next]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNextIndex ()
specifier|public
name|void
name|testNextIndex
parameter_list|()
block|{
name|int
name|unused
init|=
name|forward
operator|.
name|nextIndex
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[nextIndex]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrevious ()
specifier|public
name|void
name|testPrevious
parameter_list|()
block|{
name|String
name|unused
init|=
name|forward
operator|.
name|previous
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[previous]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreviousIndex ()
specifier|public
name|void
name|testPreviousIndex
parameter_list|()
block|{
name|int
name|unused
init|=
name|forward
operator|.
name|previousIndex
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[previousIndex]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|forward
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[remove]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSet_T ()
specifier|public
name|void
name|testSet_T
parameter_list|()
block|{
name|forward
operator|.
name|set
argument_list|(
literal|"asdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[set(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

