begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * @author Gregory Kick  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|// since Ranges is deprecated
DECL|class|RangesTest
specifier|public
class|class
name|RangesTest
extends|extends
name|TestCase
block|{
DECL|method|testSingleton ()
specifier|public
name|void
name|testSingleton
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Ranges
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ranges
operator|.
name|singleton
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncloseAll ()
specifier|public
name|void
name|testEncloseAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Ranges
operator|.
name|encloseAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
operator|-
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Ranges
operator|.
name|encloseAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
operator|-
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Ranges
operator|.
name|encloseAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncloseAll_empty ()
specifier|public
name|void
name|testEncloseAll_empty
parameter_list|()
block|{
try|try
block|{
name|Ranges
operator|.
name|encloseAll
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEncloseAll_nullValue ()
specifier|public
name|void
name|testEncloseAll_nullValue
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|nullFirst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Ranges
operator|.
name|encloseAll
argument_list|(
name|nullFirst
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|List
argument_list|<
name|Integer
argument_list|>
name|nullNotFirst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Ranges
operator|.
name|encloseAll
argument_list|(
name|nullNotFirst
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEquivalentFactories ()
specifier|public
name|void
name|testEquivalentFactories
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|downTo
argument_list|(
literal|1
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|downTo
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|atMost
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Ranges
operator|.
name|upTo
argument_list|(
literal|7
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Ranges
operator|.
name|upTo
argument_list|(
literal|7
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|open
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Ranges
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|,
literal|7
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|openClosed
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Ranges
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|,
literal|7
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Ranges
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|CLOSED
argument_list|,
literal|7
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Ranges
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|CLOSED
argument_list|,
literal|7
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

