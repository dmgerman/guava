begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Unhashables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|UnhashableObject
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableMultimap}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|ImmutableMultimapTest
specifier|public
class|class
name|ImmutableMultimapTest
extends|extends
name|TestCase
block|{
comment|// TODO: test ImmutableMultimap builder and factory methods
DECL|method|testCopyOf ()
specifier|public
name|void
name|testCopyOf
parameter_list|()
block|{
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setMultimap
init|=
name|ImmutableSetMultimap
operator|.
name|of
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setMultimapCopy
init|=
name|ImmutableMultimap
operator|.
name|copyOf
argument_list|(
name|setMultimap
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"copyOf(ImmutableSetMultimap) should not create a new instance"
argument_list|,
name|setMultimap
argument_list|,
name|setMultimapCopy
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|listMultimap
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|listMultimapCopy
init|=
name|ImmutableMultimap
operator|.
name|copyOf
argument_list|(
name|listMultimap
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"copyOf(ImmutableListMultimap) should not create a new instance"
argument_list|,
name|listMultimap
argument_list|,
name|listMultimapCopy
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnhashableSingletonValue ()
specifier|public
name|void
name|testUnhashableSingletonValue
parameter_list|()
block|{
name|SampleElements
argument_list|<
name|UnhashableObject
argument_list|>
name|unhashables
init|=
operator|new
name|Unhashables
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|UnhashableObject
argument_list|>
name|multimap
init|=
name|ImmutableMultimap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
name|unhashables
operator|.
name|e0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|unhashables
operator|.
name|e0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnhashableMixedValues ()
specifier|public
name|void
name|testUnhashableMixedValues
parameter_list|()
block|{
name|SampleElements
argument_list|<
name|UnhashableObject
argument_list|>
name|unhashables
init|=
operator|new
name|Unhashables
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|multimap
init|=
name|ImmutableMultimap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Object
decl|>
name|of
argument_list|(
literal|0
argument_list|,
name|unhashables
operator|.
name|e0
argument_list|,
literal|2
argument_list|,
literal|"hey you"
argument_list|,
literal|0
argument_list|,
name|unhashables
operator|.
name|e1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|unhashables
operator|.
name|e0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|unhashables
operator|.
name|e1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
literal|"hey you"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

