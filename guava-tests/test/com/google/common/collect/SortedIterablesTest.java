begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@code SortedIterables}.  *   * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|SortedIterablesTest
specifier|public
class|class
name|SortedIterablesTest
extends|extends
name|TestCase
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSortedCounts ()
specifier|public
name|void
name|testSortedCounts
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|SortedIterables
operator|.
name|sortedCounts
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|list
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSortedCountsIterator ()
specifier|public
name|void
name|testSortedCountsIterator
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|SortedIterables
operator|.
name|sortedCounts
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSameComparator ()
specifier|public
name|void
name|testSameComparator
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SortedIterables
operator|.
name|hasSameComparator
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|Sets
operator|.
name|newTreeSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Before JDK6 (including under GWT), the TreeMap keySet is a plain Set.
if|if
condition|(
name|Maps
operator|.
name|newTreeMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|instanceof
name|SortedSet
condition|)
block|{
name|assertTrue
argument_list|(
name|SortedIterables
operator|.
name|hasSameComparator
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|Maps
operator|.
name|newTreeMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|SortedIterables
operator|.
name|hasSameComparator
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|,
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

