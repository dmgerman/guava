begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Simple tests for {@code BstPath}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BstPathTest
specifier|public
class|class
name|BstPathTest
extends|extends
name|TestCase
block|{
DECL|class|SimplePath
specifier|static
class|class
name|SimplePath
extends|extends
name|BstPath
argument_list|<
name|SimpleNode
argument_list|,
name|SimplePath
argument_list|>
block|{
DECL|method|SimplePath (SimpleNode tip, SimplePath tail)
specifier|private
name|SimplePath
parameter_list|(
name|SimpleNode
name|tip
parameter_list|,
name|SimplePath
name|tail
parameter_list|)
block|{
name|super
argument_list|(
name|tip
argument_list|,
name|tail
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTailAtRoot ()
specifier|public
name|void
name|testTailAtRoot
parameter_list|()
block|{
name|SimpleNode
name|root
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimplePath
name|rootPath
init|=
operator|new
name|SimplePath
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rootPath
operator|.
name|hasPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rootPath
operator|.
name|prefixOrNull
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|rootPath
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testTailDown ()
specifier|public
name|void
name|testTailDown
parameter_list|()
block|{
name|SimpleNode
name|node
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|root
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|node
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimplePath
name|rootPath
init|=
operator|new
name|SimplePath
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimplePath
name|nodePath
init|=
operator|new
name|SimplePath
argument_list|(
name|node
argument_list|,
name|rootPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nodePath
operator|.
name|hasPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootPath
argument_list|,
name|nodePath
operator|.
name|prefixOrNull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootPath
argument_list|,
name|nodePath
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

