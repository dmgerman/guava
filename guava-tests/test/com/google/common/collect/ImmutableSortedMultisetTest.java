begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SortedMultisetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringMultisetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|UnmodifiableCollectionTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableSortedMultiset}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|ImmutableSortedMultisetTest
specifier|public
class|class
name|ImmutableSortedMultisetTest
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableSortedMultisetTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSortedMultiset"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
operator|.
name|elementSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|immutableSortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSortedMultiset, element set"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testCreation_noArgs ()
specifier|public
name|void
name|testCreation_noArgs
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_oneElement ()
specifier|public
name|void
name|testCreation_oneElement
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_twoElements ()
specifier|public
name|void
name|testCreation_twoElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_threeElements ()
specifier|public
name|void
name|testCreation_threeElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fourElements ()
specifier|public
name|void
name|testCreation_fourElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fiveElements ()
specifier|public
name|void
name|testCreation_fiveElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sixElements ()
specifier|public
name|void
name|testCreation_sixElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sevenElements ()
specifier|public
name|void
name|testCreation_sevenElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_emptyArray ()
specifier|public
name|void
name|testCreation_emptyArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfOneElement ()
specifier|public
name|void
name|testCreation_arrayOfOneElement
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfArray ()
specifier|public
name|void
name|testCreation_arrayOfArray
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|lexicographical
argument_list|()
operator|.
name|onResultOf
argument_list|(
operator|new
name|Function
argument_list|<
name|String
index|[]
argument_list|,
name|Iterable
argument_list|<
name|Comparable
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Comparable
argument_list|>
name|apply
parameter_list|(
name|String
index|[]
name|input
parameter_list|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Comparable
operator|>
name|asList
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Multiset
argument_list|<
name|String
index|[]
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|orderedBy
argument_list|(
name|comparator
argument_list|)
operator|.
name|add
argument_list|(
name|array
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
index|[]
argument_list|>
name|expected
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayContainingOnlyNull ()
specifier|public
name|void
name|testCreation_arrayContainingOnlyNull
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
decl_stmt|;
try|try
block|{
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOf_collection_empty ()
specifier|public
name|void
name|testCopyOf_collection_empty
parameter_list|()
block|{
comment|// "<String>" is required to work around a javac 1.5 bug.
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_oneElement ()
specifier|public
name|void
name|testCopyOf_collection_oneElement
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_general ()
specifier|public
name|void
name|testCopyOf_collection_general
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collectionContainingNull ()
specifier|public
name|void
name|testCopyOf_collectionContainingNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOf_multiset_empty ()
specifier|public
name|void
name|testCopyOf_multiset_empty
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multiset_oneElement ()
specifier|public
name|void
name|testCopyOf_multiset_oneElement
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multiset_general ()
specifier|public
name|void
name|testCopyOf_multiset_general
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multisetContainingNull ()
specifier|public
name|void
name|testCopyOf_multisetContainingNull
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOf_iterator_empty ()
specifier|public
name|void
name|testCopyOf_iterator_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_oneElement ()
specifier|public
name|void
name|testCopyOf_iterator_oneElement
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_general ()
specifier|public
name|void
name|testCopyOf_iterator_general
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iteratorContainingNull ()
specifier|public
name|void
name|testCopyOf_iteratorContainingNull
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|class|CountingIterable
specifier|private
specifier|static
class|class
name|CountingIterable
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|method|testCopyOf_plainIterable ()
specifier|public
name|void
name|testCopyOf_plainIterable
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|iterable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_empty ()
specifier|public
name|void
name|testCopyOf_shortcut_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_singleton ()
specifier|public
name|void
name|testCopyOf_shortcut_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_immutableMultiset ()
specifier|public
name|void
name|testCopyOf_shortcut_immutableMultiset
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAdd ()
specifier|public
name|void
name|testBuilderAdd
parameter_list|()
block|{
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAll ()
specifier|public
name|void
name|testBuilderAddAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|b
init|=
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllMultiset ()
specifier|public
name|void
name|testBuilderAddAllMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|a
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|b
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllIterator ()
specifier|public
name|void
name|testBuilderAddAllIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|addAll
argument_list|(
name|iterator
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddCopies ()
specifier|public
name|void
name|testBuilderAddCopies
parameter_list|()
block|{
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
operator|.
name|addCopies
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|.
name|addCopies
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderSetCount ()
specifier|public
name|void
name|testBuilderSetCount
parameter_list|()
block|{
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
expr|<
name|String
operator|>
name|naturalOrder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderAddAllHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddAllHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|builder
operator|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listWithNulls
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|listWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|builder
operator|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
expr_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multisetWithNull
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|multisetWithNull
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderAddCopiesHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddCopiesHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addCopies
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderAddCopiesIllegal ()
specifier|public
name|void
name|testBuilderAddCopiesIllegal
parameter_list|()
block|{
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderSetCountHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderSetCountHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCount
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderSetCountIllegal ()
specifier|public
name|void
name|testBuilderSetCountIllegal
parameter_list|()
block|{
name|ImmutableSortedMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedMultiset
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Comparator
operator|.
name|class
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Comparable
operator|.
name|class
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Iterator
operator|.
name|class
argument_list|,
name|Iterators
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Comparable
index|[]
operator|.
expr|class
argument_list|,
operator|new
name|Comparable
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ImmutableSortedMultiset
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_empty ()
specifier|public
name|void
name|testSerialization_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_multiple ()
specifier|public
name|void
name|testSerialization_multiple
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|copy
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_elementSet ()
specifier|public
name|void
name|testSerialization_elementSet
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
operator|.
name|elementSet
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|copy
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization_entrySet ()
specifier|public
name|void
name|testSerialization_entrySet
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_immutableMultiset ()
specifier|public
name|void
name|testEquals_immutableMultiset
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterationOrder ()
specifier|public
name|void
name|testIterationOrder
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultisetWrites ()
specifier|public
name|void
name|testMultisetWrites
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertMultisetIsUnmodifiable
argument_list|(
name|multiset
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList ()
specifier|public
name|void
name|testAsList
parameter_list|()
block|{
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|multiset
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|instanceof
name|ImmutableAsList
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|instanceof
name|ImmutableAsList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfDefensiveCopy ()
specifier|public
name|void
name|testCopyOfDefensiveCopy
parameter_list|()
block|{
comment|// Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified
comment|// synchronized collections can be safely copied.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|String
argument_list|>
name|toCopy
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|toCopy
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|toCopy
argument_list|)
expr_stmt|;
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|toCopy
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|toCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testCopyOfSortedDefensiveCopy ()
specifier|public
name|void
name|testCopyOfSortedDefensiveCopy
parameter_list|()
block|{
comment|// Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified
comment|// synchronized collections can be safely copied.
name|SortedMultiset
argument_list|<
name|String
argument_list|>
name|toCopy
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SortedMultiset
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|>
argument_list|>
name|entrySet
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
operator|(
name|Comparator
argument_list|<
name|Comparable
argument_list|>
operator|)
name|toCopy
operator|.
name|comparator
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|toCopy
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|entrySet
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|entrySet
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|toCopy
argument_list|,
name|entrySet
argument_list|)
expr_stmt|;
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOfSorted
argument_list|(
name|toCopy
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|toCopy
argument_list|,
name|entrySet
argument_list|)
expr_stmt|;
block|}
DECL|class|IntegerDiv10
specifier|private
specifier|static
class|class
name|IntegerDiv10
implements|implements
name|Comparable
argument_list|<
name|IntegerDiv10
argument_list|>
block|{
DECL|field|value
specifier|final
name|int
name|value
decl_stmt|;
DECL|method|IntegerDiv10 (int value)
name|IntegerDiv10
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (IntegerDiv10 o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|IntegerDiv10
name|o
parameter_list|)
block|{
return|return
name|value
operator|/
literal|10
operator|-
name|o
operator|.
name|value
operator|/
literal|10
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
DECL|method|testCopyOfDuplicateInconsistentWithEquals ()
specifier|public
name|void
name|testCopyOfDuplicateInconsistentWithEquals
parameter_list|()
block|{
name|IntegerDiv10
name|three
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|IntegerDiv10
name|eleven
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|IntegerDiv10
name|twelve
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|IntegerDiv10
name|twenty
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IntegerDiv10
argument_list|>
name|original
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|three
argument_list|,
name|eleven
argument_list|,
name|twelve
argument_list|,
name|twenty
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|IntegerDiv10
argument_list|>
name|copy
init|=
name|ImmutableSortedMultiset
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|contains
argument_list|(
name|eleven
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|contains
argument_list|(
name|twelve
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

