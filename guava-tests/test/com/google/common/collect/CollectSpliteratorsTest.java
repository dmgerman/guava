begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SpliteratorTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|DoubleStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Tests for {@code CollectSpliterators}. */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|CollectSpliteratorsTest
specifier|public
class|class
name|CollectSpliteratorsTest
extends|extends
name|TestCase
block|{
DECL|method|testMap ()
specifier|public
name|void
name|testMap
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|CollectSpliterators
operator|.
name|map
argument_list|(
name|Arrays
operator|.
name|spliterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|)
argument_list|,
name|Ascii
operator|::
name|toUpperCase
argument_list|)
argument_list|)
operator|.
name|expect
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatMap ()
specifier|public
name|void
name|testFlatMap
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|CollectSpliterators
operator|.
name|flatMap
argument_list|(
name|Arrays
operator|.
name|spliterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"abc"
block|,
literal|""
block|,
literal|"de"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|""
block|}
argument_list|)
argument_list|,
parameter_list|(
name|String
name|str
parameter_list|)
lambda|->
name|Lists
operator|.
name|charactersOf
argument_list|(
name|str
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|SIZED
operator||
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|NONNULL
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|expect
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|,
literal|'f'
argument_list|,
literal|'g'
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatMap_nullStream ()
specifier|public
name|void
name|testFlatMap_nullStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|CollectSpliterators
operator|.
name|flatMap
argument_list|(
name|Arrays
operator|.
name|spliterator
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"abc"
block|,
literal|""
block|,
literal|"de"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|""
block|}
argument_list|)
argument_list|,
operator|(
name|String
name|str
operator|)
operator|->
name|str
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Lists
operator|.
name|charactersOf
argument_list|(
name|str
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|SIZED
operator||
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|NONNULL
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|expect
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|,
literal|'f'
argument_list|,
literal|'g'
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatMapToInt_nullStream ()
specifier|public
name|void
name|testFlatMapToInt_nullStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|ofInt
argument_list|(
parameter_list|()
lambda|->
name|CollectSpliterators
operator|.
name|flatMapToInt
argument_list|(
name|Arrays
operator|.
name|spliterator
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|,
operator|(
name|Integer
name|i
operator|)
operator|->
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|IntStream
operator|.
name|of
argument_list|(
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|SIZED
operator||
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|NONNULL
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|expect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatMapToLong_nullStream ()
specifier|public
name|void
name|testFlatMapToLong_nullStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|ofLong
argument_list|(
parameter_list|()
lambda|->
name|CollectSpliterators
operator|.
name|flatMapToLong
argument_list|(
name|Arrays
operator|.
name|spliterator
argument_list|(
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|0L
block|,
literal|1L
block|,
literal|2L
block|,
literal|3L
block|}
argument_list|)
argument_list|,
operator|(
name|Long
name|i
operator|)
operator|->
name|i
operator|==
literal|0L
condition|?
literal|null
else|:
name|LongStream
operator|.
name|of
argument_list|(
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|SIZED
operator||
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|NONNULL
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|expect
argument_list|(
literal|1L
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlatMapToDouble_nullStream ()
specifier|public
name|void
name|testFlatMapToDouble_nullStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|ofDouble
argument_list|(
parameter_list|()
lambda|->
name|CollectSpliterators
operator|.
name|flatMapToDouble
argument_list|(
name|Arrays
operator|.
name|spliterator
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|1.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|2.0
block|,
literal|3.0
block|}
argument_list|)
argument_list|,
operator|(
name|Double
name|i
operator|)
operator|->
name|i
operator|==
literal|0.0
condition|?
literal|null
else|:
name|DoubleStream
operator|.
name|of
argument_list|(
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
name|Spliterator
operator|.
name|SIZED
operator||
name|Spliterator
operator|.
name|DISTINCT
operator||
name|Spliterator
operator|.
name|NONNULL
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|expect
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultisetsSpliterator ()
specifier|public
name|void
name|testMultisetsSpliterator
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|TreeMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|multiset
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multiset
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multiset
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|multiset
operator|.
name|spliterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|actualValues
operator|::
name|add
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multiset
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

