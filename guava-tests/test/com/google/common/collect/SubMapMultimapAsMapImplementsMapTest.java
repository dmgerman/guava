begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapInterfaceTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test {@code TreeMultimap.asMap().subMap()} with {@link MapInterfaceTest}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|SubMapMultimapAsMapImplementsMapTest
specifier|public
class|class
name|SubMapMultimapAsMapImplementsMapTest
extends|extends
name|AbstractMultimapAsMapImplementsMapTest
block|{
DECL|method|SubMapMultimapAsMapImplementsMapTest ()
specifier|public
name|SubMapMultimapAsMapImplementsMapTest
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createMultimap ()
specifier|private
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createMultimap
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|,
name|Ordering
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
name|multimap
return|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|createMultimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|subMap
argument_list|(
literal|"e"
argument_list|,
literal|"p"
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createMultimap
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"f"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"f"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"g"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"h"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|subMap
argument_list|(
literal|"e"
argument_list|,
literal|"p"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"a"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|Integer
argument_list|>
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|-
literal|2
argument_list|)
return|;
block|}
DECL|method|testEntrySetRemoveAllNullFromEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testEntrySetRemoveAllNullFromEmpty
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|testEntrySetRemoveAllNullFromEmpty
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|tolerated
parameter_list|)
block|{
comment|// GWT's TreeMap.entrySet().removeAll(null) doesn't throws NPE.
block|}
block|}
DECL|method|testEntrySetRetainAllNullFromEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testEntrySetRetainAllNullFromEmpty
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|testEntrySetRetainAllNullFromEmpty
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|tolerated
parameter_list|)
block|{
comment|// GWT's TreeMap.entrySet().retainAll(null) doesn't throws NPE.
block|}
block|}
DECL|method|testKeySetRemoveAllNullFromEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testKeySetRemoveAllNullFromEmpty
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|testKeySetRemoveAllNullFromEmpty
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|tolerated
parameter_list|)
block|{
comment|// GWT's TreeMap.keySet().removeAll(null) doesn't throws NPE.
block|}
block|}
DECL|method|testKeySetRetainAllNullFromEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testKeySetRetainAllNullFromEmpty
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|testKeySetRetainAllNullFromEmpty
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|tolerated
parameter_list|)
block|{
comment|// GWT's TreeMap.keySet().retainAll(null) doesn't throws NPE.
block|}
block|}
DECL|method|testValuesRemoveAllNullFromEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testValuesRemoveAllNullFromEmpty
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|testValuesRemoveAllNullFromEmpty
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|tolerated
parameter_list|)
block|{
comment|// GWT's TreeMap.values().removeAll(null) doesn't throws NPE.
block|}
block|}
DECL|method|testValuesRetainAllNullFromEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testValuesRetainAllNullFromEmpty
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|testValuesRemoveAllNullFromEmpty
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|tolerated
parameter_list|)
block|{
comment|// GWT's TreeMap.values().retainAll(null) doesn't throws NPE.
block|}
block|}
block|}
end_class

end_unit

