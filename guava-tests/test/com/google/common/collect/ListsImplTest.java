begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/** Tests the package level *impl methods directly using various types of lists. */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ListsImplTest
specifier|public
class|class
name|ListsImplTest
extends|extends
name|TestCase
block|{
comment|/** Describes how a list is modifiable */
DECL|enum|Modifiability
specifier|public
enum|enum
name|Modifiability
block|{
DECL|enumConstant|NONE
name|NONE
block|,
comment|// immutable lists
DECL|enumConstant|BY_ELEMENT
name|BY_ELEMENT
block|,
comment|// elements can change (set), but not structure
DECL|enumConstant|DIRECT_ONLY
name|DIRECT_ONLY
block|,
comment|// Element can be added and removed only via direct calls, not through iterators
DECL|enumConstant|ALL
name|ALL
comment|// Elements can be added and removed as well as modified.
block|}
comment|/** Handles the creation of lists needed for the tests */
DECL|class|ListExample
specifier|public
specifier|abstract
specifier|static
class|class
name|ListExample
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|modifiability
specifier|private
specifier|final
name|Modifiability
name|modifiability
decl_stmt|;
DECL|method|ListExample (String name, Modifiability modifiability)
specifier|protected
name|ListExample
parameter_list|(
name|String
name|name
parameter_list|,
name|Modifiability
name|modifiability
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|modifiability
operator|=
name|modifiability
expr_stmt|;
block|}
comment|/** Gets the name of the example */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** Creates a new list with the given contents. */
DECL|method|createList (Class<T> listType, Collection<? extends T> contents)
specifier|public
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|contents
parameter_list|)
function_decl|;
comment|/** The modifiablity of this list example. */
DECL|method|modifiability ()
specifier|public
name|Modifiability
name|modifiability
parameter_list|()
block|{
return|return
name|modifiability
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|createExampleSuite
argument_list|(
operator|new
name|ArrayListExample
argument_list|(
literal|"ArrayList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|createExampleSuite
argument_list|(
operator|new
name|LinkedListExample
argument_list|(
literal|"LinkedList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|createExampleSuite
argument_list|(
operator|new
name|ArraysAsListExample
argument_list|(
literal|"Arrays.asList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|createExampleSuite
argument_list|(
operator|new
name|ImmutableListExample
argument_list|(
literal|"ImmutableList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|createExampleSuite
argument_list|(
operator|new
name|CopyOnWriteListExample
argument_list|(
literal|"CopyOnWriteArrayList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ListsImplTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
annotation|@
name|GwtIncompatible
comment|// suite sub call
DECL|method|createExampleSuite (ListExample example)
specifier|private
specifier|static
name|TestSuite
name|createExampleSuite
parameter_list|(
name|ListExample
name|example
parameter_list|)
block|{
name|TestSuite
name|resultSuite
init|=
operator|new
name|TestSuite
argument_list|(
name|ListsImplTest
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Test
argument_list|>
name|testEnum
init|=
name|resultSuite
operator|.
name|tests
argument_list|()
init|;
name|testEnum
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ListsImplTest
name|test
init|=
operator|(
name|ListsImplTest
operator|)
name|testEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|test
operator|.
name|example
operator|=
name|example
expr_stmt|;
block|}
return|return
name|resultSuite
return|;
block|}
DECL|field|example
specifier|private
name|ListExample
name|example
decl_stmt|;
DECL|method|getExample ()
specifier|private
name|ListExample
name|getExample
parameter_list|()
block|{
comment|// because sometimes one version with a null example is created.
return|return
name|example
operator|==
literal|null
condition|?
operator|new
name|ImmutableListExample
argument_list|(
literal|"test"
argument_list|)
else|:
name|example
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|example
operator|==
literal|null
condition|?
name|super
operator|.
name|getName
argument_list|()
else|:
name|buildTestName
argument_list|()
return|;
block|}
DECL|method|buildTestName ()
specifier|private
name|String
name|buildTestName
parameter_list|()
block|{
return|return
name|super
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|example
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|testHashCodeImpl ()
specifier|public
name|void
name|testHashCodeImpl
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|base
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|copy
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|outOfOrder
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|diffValue
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|diffLength
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|empty
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|outOfOrder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|diffValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|diffLength
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|base
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Lists
operator|.
name|hashCodeImpl
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsImpl ()
specifier|public
name|void
name|testEqualsImpl
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|base
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|copy
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|otherType
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|outOfOrder
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|diffValue
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|diffLength
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|empty
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|equalsImpl
argument_list|(
name|base
argument_list|,
name|copy
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Lists
operator|.
name|equalsImpl
argument_list|(
name|base
argument_list|,
name|otherType
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|unEqualItems
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|outOfOrder
argument_list|,
name|diffValue
argument_list|,
name|diffLength
argument_list|,
name|empty
argument_list|,
literal|null
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|other
range|:
name|unEqualItems
control|)
block|{
name|assertWithMessage
argument_list|(
literal|"%s"
argument_list|,
name|other
argument_list|)
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|equalsImpl
argument_list|(
name|base
argument_list|,
name|other
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddAllImpl ()
specifier|public
name|void
name|testAddAllImpl
parameter_list|()
block|{
if|if
condition|(
name|getExample
argument_list|()
operator|.
name|modifiability
argument_list|()
operator|!=
name|Modifiability
operator|.
name|ALL
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|toTest
init|=
name|createList
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|toAdd
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|format
init|=
literal|"Adding %s at %s"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toAdd
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|indexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterableToAdd
init|=
name|toAdd
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|expectedChanged
init|=
name|iterableToAdd
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
name|format
argument_list|,
name|iterableToAdd
argument_list|,
name|index
argument_list|)
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|addAllImpl
argument_list|(
name|toTest
argument_list|,
name|index
argument_list|,
name|iterableToAdd
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedChanged
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
name|format
argument_list|,
name|iterableToAdd
argument_list|,
name|index
argument_list|)
operator|.
name|that
argument_list|(
name|toTest
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOfImpl_nonNull ()
specifier|public
name|void
name|testIndexOfImpl_nonNull
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|toTest
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
index|[]
name|expected
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|4
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
name|checkIndexOf
argument_list|(
name|toTest
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOfImpl_null ()
specifier|public
name|void
name|testIndexOfImpl_null
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toTest
decl_stmt|;
try|try
block|{
name|toTest
operator|=
name|createList
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|null
argument_list|,
literal|"C"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// example cannot handle nulls, test invalid
return|return;
block|}
name|int
index|[]
name|expected
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|4
block|,
literal|0
block|}
decl_stmt|;
name|checkIndexOf
argument_list|(
name|toTest
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastIndexOfImpl_nonNull ()
specifier|public
name|void
name|testLastIndexOfImpl_nonNull
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|toTest
init|=
name|createList
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|int
index|[]
name|expected
init|=
block|{
literal|7
block|,
literal|1
block|,
literal|8
block|,
literal|3
block|,
literal|7
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|checkLastIndexOf
argument_list|(
name|toTest
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastIndexOfImpl_null ()
specifier|public
name|void
name|testLastIndexOfImpl_null
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toTest
decl_stmt|;
try|try
block|{
name|toTest
operator|=
name|createList
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|null
argument_list|,
literal|"C"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// example cannot handle nulls, test invalid
return|return;
block|}
name|int
index|[]
name|expected
init|=
block|{
literal|3
block|,
literal|1
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|checkLastIndexOf
argument_list|(
name|toTest
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|checkIndexOf (List<?> toTest, int[] expected)
specifier|private
name|void
name|checkIndexOf
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|toTest
parameter_list|,
name|int
index|[]
name|expected
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|toTest
control|)
block|{
name|String
name|name
init|=
literal|"toTest["
operator|+
name|index
operator|+
literal|"] ("
operator|+
name|obj
operator|+
literal|")"
decl_stmt|;
name|assertWithMessage
argument_list|(
name|name
argument_list|)
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|indexOfImpl
argument_list|(
name|toTest
argument_list|,
name|obj
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
DECL|method|checkLastIndexOf (List<?> toTest, int[] expected)
specifier|private
name|void
name|checkLastIndexOf
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|toTest
parameter_list|,
name|int
index|[]
name|expected
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|toTest
control|)
block|{
name|String
name|name
init|=
literal|"toTest["
operator|+
name|index
operator|+
literal|"] ("
operator|+
name|obj
operator|+
literal|")"
decl_stmt|;
name|assertWithMessage
argument_list|(
name|name
argument_list|)
operator|.
name|that
argument_list|(
name|Lists
operator|.
name|lastIndexOfImpl
argument_list|(
name|toTest
argument_list|,
name|obj
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|SafeVarargs
annotation|@
name|SuppressWarnings
argument_list|(
literal|"varargs"
argument_list|)
DECL|method|createList (Class<T> listType, T... contents)
specifier|private
specifier|final
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|T
modifier|...
name|contents
parameter_list|)
block|{
return|return
name|getExample
argument_list|()
operator|.
name|createList
argument_list|(
name|listType
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|contents
argument_list|)
argument_list|)
return|;
block|}
DECL|class|ArrayListExample
specifier|private
specifier|static
specifier|final
class|class
name|ArrayListExample
extends|extends
name|ListExample
block|{
DECL|method|ArrayListExample (String name)
specifier|protected
name|ArrayListExample
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Modifiability
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createList (Class<T> listType, Collection<? extends T> contents)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|contents
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
DECL|class|LinkedListExample
specifier|private
specifier|static
specifier|final
class|class
name|LinkedListExample
extends|extends
name|ListExample
block|{
DECL|method|LinkedListExample (String name)
specifier|protected
name|LinkedListExample
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Modifiability
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createList (Class<T> listType, Collection<? extends T> contents)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|contents
parameter_list|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// Iterables.toArray
DECL|class|ArraysAsListExample
specifier|private
specifier|static
specifier|final
class|class
name|ArraysAsListExample
extends|extends
name|ListExample
block|{
DECL|method|ArraysAsListExample (String name)
specifier|protected
name|ArraysAsListExample
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Modifiability
operator|.
name|BY_ELEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createList (Class<T> listType, Collection<? extends T> contents)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|contents
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// safe by contract
name|T
index|[]
name|array
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|contents
argument_list|,
name|listType
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|array
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableListExample
specifier|private
specifier|static
specifier|final
class|class
name|ImmutableListExample
extends|extends
name|ListExample
block|{
DECL|method|ImmutableListExample (String name)
specifier|protected
name|ImmutableListExample
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Modifiability
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createList (Class<T> listType, Collection<? extends T> contents)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|contents
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// CopyOnWriteArrayList
DECL|class|CopyOnWriteListExample
specifier|private
specifier|static
specifier|final
class|class
name|CopyOnWriteListExample
extends|extends
name|ListExample
block|{
DECL|method|CopyOnWriteListExample (String name)
specifier|protected
name|CopyOnWriteListExample
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Modifiability
operator|.
name|DIRECT_ONLY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createList (Class<T> listType, Collection<? extends T> contents)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|createList
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|listType
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|contents
parameter_list|)
block|{
return|return
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|(
name|contents
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

