begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 'b'0'a''a' The Guava Authors  *  * Licensed under the Apache License, Version 'b'.0 (the "License"); you may not use this file  * except in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-'b'.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|defaultNullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for {@code BstNode}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|BstNodeTest
specifier|public
class|class
name|BstNodeTest
extends|extends
name|TestCase
block|{
DECL|method|testLacksChild (SimpleNode node, BstSide side)
specifier|private
name|void
name|testLacksChild
parameter_list|(
name|SimpleNode
name|node
parameter_list|,
name|BstSide
name|side
parameter_list|)
block|{
name|assertNull
argument_list|(
name|node
operator|.
name|childOrNull
argument_list|(
name|side
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|hasChild
argument_list|(
name|side
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|node
operator|.
name|getChild
argument_list|(
name|side
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testChildIs (SimpleNode node, BstSide side, SimpleNode expectedChild)
specifier|private
name|void
name|testChildIs
parameter_list|(
name|SimpleNode
name|node
parameter_list|,
name|BstSide
name|side
parameter_list|,
name|SimpleNode
name|expectedChild
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedChild
argument_list|,
name|node
operator|.
name|childOrNull
argument_list|(
name|side
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasChild
argument_list|(
name|side
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedChild
argument_list|,
name|node
operator|.
name|getChild
argument_list|(
name|side
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasChildLeaf ()
specifier|public
name|void
name|testHasChildLeaf
parameter_list|()
block|{
name|SimpleNode
name|leaf
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|testLacksChild
argument_list|(
name|leaf
argument_list|,
name|LEFT
argument_list|)
expr_stmt|;
name|testLacksChild
argument_list|(
name|leaf
argument_list|,
name|RIGHT
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasChildLeftOnly ()
specifier|public
name|void
name|testHasChildLeftOnly
parameter_list|()
block|{
name|SimpleNode
name|leaf
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|node
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|leaf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|testChildIs
argument_list|(
name|node
argument_list|,
name|LEFT
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
name|testLacksChild
argument_list|(
name|node
argument_list|,
name|RIGHT
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasChildRightOnly ()
specifier|public
name|void
name|testHasChildRightOnly
parameter_list|()
block|{
name|SimpleNode
name|leaf
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|node
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|leaf
argument_list|)
decl_stmt|;
name|testLacksChild
argument_list|(
name|node
argument_list|,
name|LEFT
argument_list|)
expr_stmt|;
name|testChildIs
argument_list|(
name|node
argument_list|,
name|RIGHT
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasChildBoth ()
specifier|public
name|void
name|testHasChildBoth
parameter_list|()
block|{
name|SimpleNode
name|left
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|right
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|node
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|testChildIs
argument_list|(
name|node
argument_list|,
name|LEFT
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|testChildIs
argument_list|(
name|node
argument_list|,
name|RIGHT
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
DECL|field|MIDDLE_KEY
specifier|private
specifier|static
specifier|final
name|char
name|MIDDLE_KEY
init|=
literal|'b'
decl_stmt|;
DECL|field|GOOD_LEFTS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SimpleNode
argument_list|>
name|GOOD_LEFTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|null
argument_list|,
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|BAD_LEFTS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SimpleNode
argument_list|>
name|BAD_LEFTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ALL_LEFTS
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|SimpleNode
argument_list|>
name|ALL_LEFTS
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|GOOD_LEFTS
argument_list|,
name|BAD_LEFTS
argument_list|)
decl_stmt|;
DECL|field|GOOD_RIGHTS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SimpleNode
argument_list|>
name|GOOD_RIGHTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|null
argument_list|,
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|BAD_RIGHTS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SimpleNode
argument_list|>
name|BAD_RIGHTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ALL_RIGHTS
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|SimpleNode
argument_list|>
name|ALL_RIGHTS
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|GOOD_RIGHTS
argument_list|,
name|BAD_RIGHTS
argument_list|)
decl_stmt|;
DECL|method|testOrderingInvariantHoldsForGood ()
specifier|public
name|void
name|testOrderingInvariantHoldsForGood
parameter_list|()
block|{
for|for
control|(
name|SimpleNode
name|left
range|:
name|GOOD_LEFTS
control|)
block|{
for|for
control|(
name|SimpleNode
name|right
range|:
name|GOOD_RIGHTS
control|)
block|{
name|assertTrue
argument_list|(
operator|new
name|SimpleNode
argument_list|(
name|MIDDLE_KEY
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
operator|.
name|orderingInvariantHolds
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testOrderingInvariantBadLeft ()
specifier|public
name|void
name|testOrderingInvariantBadLeft
parameter_list|()
block|{
for|for
control|(
name|SimpleNode
name|left
range|:
name|BAD_LEFTS
control|)
block|{
for|for
control|(
name|SimpleNode
name|right
range|:
name|ALL_RIGHTS
control|)
block|{
name|assertFalse
argument_list|(
operator|new
name|SimpleNode
argument_list|(
name|MIDDLE_KEY
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
operator|.
name|orderingInvariantHolds
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testOrderingInvariantBadRight ()
specifier|public
name|void
name|testOrderingInvariantBadRight
parameter_list|()
block|{
for|for
control|(
name|SimpleNode
name|left
range|:
name|ALL_LEFTS
control|)
block|{
for|for
control|(
name|SimpleNode
name|right
range|:
name|BAD_RIGHTS
control|)
block|{
name|assertFalse
argument_list|(
operator|new
name|SimpleNode
argument_list|(
name|MIDDLE_KEY
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
operator|.
name|orderingInvariantHolds
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultNullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|BstNode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

