begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|unmodifiableIterable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|SERIALIZABLE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
operator|.
name|newProxyInstance
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|BuilderAddAllListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|BuilderReversedListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|ImmutableListHeadSubListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|ImmutableListMiddleSubListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|ImmutableListOfGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|ImmutableListTailSubListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListGenerators
operator|.
name|UnhashableElementsImmutableListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|ListHashCodeTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ImmutableList}.  *  * @author Kevin Bourrillion  * @author George van den Driessche  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableListTest
specifier|public
class|class
name|ImmutableListTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableListOfGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|BuilderAddAllListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, built with Builder.add"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|BuilderAddAllListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, built with Builder.addAll"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|BuilderReversedListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, reversed"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableListHeadSubListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, head subList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableListTailSubListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, tail subList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableListMiddleSubListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, middle subList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|SERIALIZABLE
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|UnhashableElementsImmutableListGenerator
argument_list|()
argument_list|)
operator|.
name|suppressing
argument_list|(
name|ListHashCodeTester
operator|.
name|getHashCodeMethod
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableList, unhashable values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|class|CreationTests
specifier|public
specifier|static
class|class
name|CreationTests
extends|extends
name|TestCase
block|{
DECL|method|testCreation_noArgs ()
specifier|public
name|void
name|testCreation_noArgs
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_oneElement ()
specifier|public
name|void
name|testCreation_oneElement
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_twoElements ()
specifier|public
name|void
name|testCreation_twoElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_threeElements ()
specifier|public
name|void
name|testCreation_threeElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fourElements ()
specifier|public
name|void
name|testCreation_fourElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fiveElements ()
specifier|public
name|void
name|testCreation_fiveElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sixElements ()
specifier|public
name|void
name|testCreation_sixElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sevenElements ()
specifier|public
name|void
name|testCreation_sevenElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_eightElements ()
specifier|public
name|void
name|testCreation_eightElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_nineElements ()
specifier|public
name|void
name|testCreation_nineElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_tenElements ()
specifier|public
name|void
name|testCreation_tenElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_elevenElements ()
specifier|public
name|void
name|testCreation_elevenElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|// Varargs versions
DECL|method|testCreation_twelveElements ()
specifier|public
name|void
name|testCreation_twelveElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_thirteenElements ()
specifier|public
name|void
name|testCreation_thirteenElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|,
literal|"m"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|,
literal|"m"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fourteenElements ()
specifier|public
name|void
name|testCreation_fourteenElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|,
literal|"m"
argument_list|,
literal|"n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|,
literal|"m"
argument_list|,
literal|"n"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_singletonNull ()
specifier|public
name|void
name|testCreation_singletonNull
parameter_list|()
block|{
try|try
block|{
name|ImmutableList
operator|.
name|of
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCreation_withNull ()
specifier|public
name|void
name|testCreation_withNull
parameter_list|()
block|{
try|try
block|{
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCreation_generic ()
specifier|public
name|void
name|testCreation_generic
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
comment|// only verify that there is no compile warning
name|ImmutableList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|unused
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|a
argument_list|,
name|a
argument_list|)
decl_stmt|;
block|}
DECL|method|testCreation_arrayOfArray ()
specifier|public
name|void
name|testCreation_arrayOfArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
expr|<
name|String
index|[]
operator|>
name|of
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|array
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_emptyArray ()
specifier|public
name|void
name|testCopyOf_emptyArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_arrayOfOneElement ()
specifier|public
name|void
name|testCopyOf_arrayOfOneElement
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_nullArray ()
specifier|public
name|void
name|testCopyOf_nullArray
parameter_list|()
block|{
try|try
block|{
name|ImmutableList
operator|.
name|copyOf
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCopyOf_arrayContainingOnlyNull ()
specifier|public
name|void
name|testCopyOf_arrayContainingOnlyNull
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
decl_stmt|;
try|try
block|{
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCopyOf_collection_empty ()
specifier|public
name|void
name|testCopyOf_collection_empty
parameter_list|()
block|{
comment|// "<String>" is required to work around a javac 1.5 bug.
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_oneElement ()
specifier|public
name|void
name|testCopyOf_collection_oneElement
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_general ()
specifier|public
name|void
name|testCopyOf_collection_general
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mutableList
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|list
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mutableList
argument_list|)
expr_stmt|;
name|mutableList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collectionContainingNull ()
specifier|public
name|void
name|testCopyOf_collectionContainingNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCopyOf_iterator_empty ()
specifier|public
name|void
name|testCopyOf_iterator_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_oneElement ()
specifier|public
name|void
name|testCopyOf_iterator_oneElement
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_general ()
specifier|public
name|void
name|testCopyOf_iterator_general
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iteratorContainingNull ()
specifier|public
name|void
name|testCopyOf_iteratorContainingNull
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCopyOf_iteratorNull ()
specifier|public
name|void
name|testCopyOf_iteratorNull
parameter_list|()
block|{
try|try
block|{
name|ImmutableList
operator|.
name|copyOf
argument_list|(
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testCopyOf_concurrentlyMutating ()
specifier|public
name|void
name|testCopyOf_concurrentlyMutating
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sample
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|delta
range|:
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|}
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sample
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|misleading
init|=
name|Helpers
operator|.
name|misleadingSizeCollection
argument_list|(
name|delta
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|sample
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|misleading
operator|.
name|addAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|misleading
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|misleading
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CountingIterable
specifier|private
specifier|static
class|class
name|CountingIterable
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|method|testCopyOf_plainIterable ()
specifier|public
name|void
name|testCopyOf_plainIterable
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_plainIterable_iteratesOnce ()
specifier|public
name|void
name|testCopyOf_plainIterable_iteratesOnce
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|iterable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_empty ()
specifier|public
name|void
name|testCopyOf_shortcut_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_singleton ()
specifier|public
name|void
name|testCopyOf_shortcut_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_immutableList ()
specifier|public
name|void
name|testCopyOf_shortcut_immutableList
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddArrayHandlesNulls ()
specifier|public
name|void
name|testBuilderAddArrayHandlesNulls
parameter_list|()
block|{
name|String
index|[]
name|elements
init|=
block|{
literal|"a"
block|,
literal|null
block|,
literal|"b"
block|}
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/*        * Maybe it rejects all elements, or maybe it adds "a" before failing.        * Either way is fine with us.        */
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|assertTrue
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
operator|.
name|equals
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddCollectionHandlesNulls ()
specifier|public
name|void
name|testBuilderAddCollectionHandlesNulls
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_natural ()
specifier|public
name|void
name|testSortedCopyOf_natural
parameter_list|()
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|16
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
literal|16
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_natural_empty ()
specifier|public
name|void
name|testSortedCopyOf_natural_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_natural_singleton ()
specifier|public
name|void
name|testSortedCopyOf_natural_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|100
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_natural_containsNull ()
specifier|public
name|void
name|testSortedCopyOf_natural_containsNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testSortedCopyOf ()
specifier|public
name|void
name|testSortedCopyOf
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"A"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_empty ()
specifier|public
name|void
name|testSortedCopyOf_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_singleton ()
specifier|public
name|void
name|testSortedCopyOf_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedCopyOf_containsNull ()
specifier|public
name|void
name|testSortedCopyOf_containsNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"A"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableList ()
specifier|public
name|void
name|testToImmutableList
parameter_list|()
block|{
name|CollectorTester
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|toImmutableList
argument_list|()
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|class|ConcurrentTests
specifier|public
specifier|static
class|class
name|ConcurrentTests
extends|extends
name|TestCase
block|{
DECL|enum|WrapWithIterable
enum|enum
name|WrapWithIterable
block|{
DECL|enumConstant|WRAP
name|WRAP
block|,
DECL|enumConstant|NO_WRAP
name|NO_WRAP
block|}
DECL|method|runConcurrentlyMutatedTest ( Collection<Integer> initialContents, Iterable<ListFrobber> actionsToPerformConcurrently, WrapWithIterable wrap)
specifier|private
specifier|static
name|void
name|runConcurrentlyMutatedTest
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|initialContents
parameter_list|,
name|Iterable
argument_list|<
name|ListFrobber
argument_list|>
name|actionsToPerformConcurrently
parameter_list|,
name|WrapWithIterable
name|wrap
parameter_list|)
block|{
name|ConcurrentlyMutatedList
argument_list|<
name|Integer
argument_list|>
name|concurrentlyMutatedList
init|=
name|newConcurrentlyMutatedList
argument_list|(
name|initialContents
argument_list|,
name|actionsToPerformConcurrently
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|iterableToCopy
init|=
name|wrap
operator|==
name|WrapWithIterable
operator|.
name|WRAP
condition|?
name|unmodifiableIterable
argument_list|(
name|concurrentlyMutatedList
argument_list|)
else|:
name|concurrentlyMutatedList
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|copyOfIterable
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|iterableToCopy
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concurrentlyMutatedList
operator|.
name|getAllStates
argument_list|()
operator|.
name|contains
argument_list|(
name|copyOfIterable
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runConcurrentlyMutatedTest (WrapWithIterable wrap)
specifier|private
specifier|static
name|void
name|runConcurrentlyMutatedTest
parameter_list|(
name|WrapWithIterable
name|wrap
parameter_list|)
block|{
comment|/*        * TODO: Iterate over many array sizes and all possible operation lists,        * performing adds and removes in different ways.        */
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|()
argument_list|,
name|ops
argument_list|(
name|add
argument_list|(
literal|1
argument_list|)
argument_list|,
name|add
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|()
argument_list|,
name|ops
argument_list|(
name|add
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nop
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|()
argument_list|,
name|ops
argument_list|(
name|add
argument_list|(
literal|1
argument_list|)
argument_list|,
name|remove
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|()
argument_list|,
name|ops
argument_list|(
name|nop
argument_list|()
argument_list|,
name|add
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ops
argument_list|(
name|remove
argument_list|()
argument_list|,
name|nop
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ops
argument_list|(
name|remove
argument_list|()
argument_list|,
name|add
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ops
argument_list|(
name|remove
argument_list|()
argument_list|,
name|remove
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ops
argument_list|(
name|remove
argument_list|()
argument_list|,
name|nop
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ops
argument_list|(
name|remove
argument_list|()
argument_list|,
name|add
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ops
argument_list|(
name|nop
argument_list|()
argument_list|,
name|remove
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
name|runConcurrentlyMutatedTest
argument_list|(
name|elements
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ops
argument_list|(
name|remove
argument_list|()
argument_list|,
name|remove
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|)
expr_stmt|;
block|}
DECL|method|elements (Integer... elements)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|elements
parameter_list|(
name|Integer
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
DECL|method|ops (ListFrobber... elements)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|ListFrobber
argument_list|>
name|ops
parameter_list|(
name|ListFrobber
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
DECL|method|testCopyOf_concurrentlyMutatedList ()
specifier|public
name|void
name|testCopyOf_concurrentlyMutatedList
parameter_list|()
block|{
name|runConcurrentlyMutatedTest
argument_list|(
name|WrapWithIterable
operator|.
name|NO_WRAP
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_concurrentlyMutatedIterable ()
specifier|public
name|void
name|testCopyOf_concurrentlyMutatedIterable
parameter_list|()
block|{
name|runConcurrentlyMutatedTest
argument_list|(
name|WrapWithIterable
operator|.
name|WRAP
argument_list|)
expr_stmt|;
block|}
comment|/** An operation to perform on a list. */
DECL|interface|ListFrobber
interface|interface
name|ListFrobber
block|{
DECL|method|perform (List<Integer> list)
name|void
name|perform
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
function_decl|;
block|}
DECL|method|add (final int element)
specifier|static
name|ListFrobber
name|add
parameter_list|(
specifier|final
name|int
name|element
parameter_list|)
block|{
return|return
operator|new
name|ListFrobber
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|remove ()
specifier|static
name|ListFrobber
name|remove
parameter_list|()
block|{
return|return
operator|new
name|ListFrobber
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|nop ()
specifier|static
name|ListFrobber
name|nop
parameter_list|()
block|{
return|return
operator|new
name|ListFrobber
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{}
block|}
return|;
block|}
comment|/** A list that mutates itself after every call to each of its {@link List} methods. */
DECL|interface|ConcurrentlyMutatedList
interface|interface
name|ConcurrentlyMutatedList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|List
argument_list|<
name|E
argument_list|>
block|{
comment|/**        * The elements of a {@link ConcurrentlyMutatedList} are added and removed over time. This        * method returns every state that the list has passed through at some point.        */
DECL|method|getAllStates ()
name|Set
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|getAllStates
parameter_list|()
function_decl|;
block|}
comment|/**      * Returns a {@link ConcurrentlyMutatedList} that performs the given operations as its      * concurrent modifications. The mutations occur in the same thread as the triggering method      * call.      */
DECL|method|newConcurrentlyMutatedList ( final Collection<Integer> initialContents, final Iterable<ListFrobber> actionsToPerformConcurrently)
specifier|private
specifier|static
name|ConcurrentlyMutatedList
argument_list|<
name|Integer
argument_list|>
name|newConcurrentlyMutatedList
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Integer
argument_list|>
name|initialContents
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|ListFrobber
argument_list|>
name|actionsToPerformConcurrently
parameter_list|)
block|{
name|InvocationHandler
name|invocationHandler
init|=
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Integer
argument_list|>
name|delegate
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|(
name|initialContents
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getAllStatesMethod
init|=
name|getOnlyElement
argument_list|(
name|asList
argument_list|(
name|ConcurrentlyMutatedList
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|ListFrobber
argument_list|>
name|remainingActions
init|=
name|actionsToPerformConcurrently
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|allStates
init|=
name|newHashSet
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|method
operator|.
name|equals
argument_list|(
name|getAllStatesMethod
argument_list|)
condition|?
name|getAllStates
argument_list|()
else|:
name|invokeListMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getAllStates
parameter_list|()
block|{
return|return
name|allStates
return|;
block|}
specifier|private
name|Object
name|invokeListMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|Object
name|returnValue
init|=
name|method
operator|.
name|invoke
argument_list|(
name|delegate
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|mutateDelegate
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|mutateDelegate
parameter_list|()
block|{
name|allStates
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|remainingActions
operator|.
name|next
argument_list|()
operator|.
name|perform
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|allStates
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ConcurrentlyMutatedList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|(
name|ConcurrentlyMutatedList
argument_list|<
name|Integer
argument_list|>
operator|)
name|newProxyInstance
argument_list|(
name|ImmutableListTest
operator|.
name|CreationTests
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ConcurrentlyMutatedList
operator|.
name|class
block|}
argument_list|,
name|invocationHandler
argument_list|)
decl_stmt|;
return|return
name|list
return|;
block|}
block|}
DECL|class|BasicTests
specifier|public
specifier|static
class|class
name|BasicTests
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ImmutableList
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_empty ()
specifier|public
name|void
name|testSerialization_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_singleton ()
specifier|public
name|void
name|testSerialization_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_multiple ()
specifier|public
name|void
name|testSerialization_multiple
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_immutableList ()
specifier|public
name|void
name|testEquals_immutableList
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAdd ()
specifier|public
name|void
name|testBuilderAdd
parameter_list|()
block|{
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Builder impl"
argument_list|)
DECL|method|testBuilderForceCopy ()
specifier|public
name|void
name|testBuilderForceCopy
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Object
index|[]
name|prevArray
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|builder
operator|.
name|contents
argument_list|,
name|prevArray
argument_list|)
expr_stmt|;
name|prevArray
operator|=
name|builder
operator|.
name|contents
expr_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|unused
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
DECL|method|testBuilderExactlySizedReusesArray ()
specifier|public
name|void
name|testBuilderExactlySizedReusesArray
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builderWithExpectedSize
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Object
index|[]
name|builderArray
init|=
name|builder
operator|.
name|contents
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|builderArrayAfterAdds
init|=
name|builder
operator|.
name|contents
decl_stmt|;
name|RegularImmutableList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|(
name|RegularImmutableList
argument_list|<
name|Integer
argument_list|>
operator|)
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Object
index|[]
name|listInternalArray
init|=
name|list
operator|.
name|array
decl_stmt|;
name|assertSame
argument_list|(
name|builderArray
argument_list|,
name|builderArrayAfterAdds
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|builderArray
argument_list|,
name|listInternalArray
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAdd_varargs ()
specifier|public
name|void
name|testBuilderAdd_varargs
parameter_list|()
block|{
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAll_iterable ()
specifier|public
name|void
name|testBuilderAddAll_iterable
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|b
init|=
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|b
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAll_iterator ()
specifier|public
name|void
name|testBuilderAddAll_iterator
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|b
init|=
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|b
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexBuilder ()
specifier|public
name|void
name|testComplexBuilder
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|colorElem
init|=
name|asList
argument_list|(
literal|0x00
argument_list|,
literal|0x33
argument_list|,
literal|0x66
argument_list|,
literal|0x99
argument_list|,
literal|0xCC
argument_list|,
literal|0xFF
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|webSafeColorsBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|red
range|:
name|colorElem
control|)
block|{
for|for
control|(
name|Integer
name|green
range|:
name|colorElem
control|)
block|{
for|for
control|(
name|Integer
name|blue
range|:
name|colorElem
control|)
block|{
name|webSafeColorsBuilder
operator|.
name|add
argument_list|(
operator|(
name|red
operator|<<
literal|16
operator|)
operator|+
operator|(
name|green
operator|<<
literal|8
operator|)
operator|+
name|blue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|webSafeColors
init|=
name|webSafeColorsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|216
argument_list|,
name|webSafeColors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|webSafeColorArray
init|=
name|webSafeColors
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|webSafeColors
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x000000
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x000033
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x000066
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x003300
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x330000
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|36
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x000066
argument_list|,
operator|(
name|int
operator|)
name|webSafeColors
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x003300
argument_list|,
operator|(
name|int
operator|)
name|webSafeColors
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|addedColor
init|=
name|webSafeColorsBuilder
operator|.
name|add
argument_list|(
literal|0x00BFFF
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Modifying the builder should not have changed any already"
operator|+
literal|" built sets"
argument_list|,
literal|216
argument_list|,
name|webSafeColors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the new array should be one bigger than webSafeColors"
argument_list|,
literal|217
argument_list|,
name|addedColor
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|appendColorArray
init|=
name|addedColor
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|addedColor
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x00BFFF
argument_list|,
operator|(
name|int
operator|)
name|appendColorArray
index|[
literal|216
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderAddAllHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddAllHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|builder
operator|=
name|ImmutableList
operator|.
name|builder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listWithNulls
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|listWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|builder
operator|=
name|ImmutableList
operator|.
name|builder
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iteratorWithNulls
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|iteratorWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterableWithNulls
init|=
name|MinimalIterable
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|iterableWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testAsList ()
specifier|public
name|void
name|testAsList
parameter_list|()
block|{
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|list
argument_list|,
name|list
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

