begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|CollectionIteratorTester
operator|.
name|getIteratorKnownOrderRemoveSupportedMethod
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|CollectionTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Collections2}.  *  * @author Chris Povirk  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|Collections2Test
specifier|public
class|class
name|Collections2Test
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|Collections2Test
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForFilter
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForFilterAll
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForFilterLinkedList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForFilterNoNulls
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForFilterFiltered
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForTransform
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|Collections2Test
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|field|NOT_YYY_ZZZ
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|NOT_YYY_ZZZ
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
operator|!
literal|"yyy"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|&&
operator|!
literal|"zzz"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|LENGTH_1
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|LENGTH_1
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|length
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
decl_stmt|;
DECL|field|STARTS_WITH_VOWEL
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|STARTS_WITH_VOWEL
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'e'
argument_list|,
literal|'i'
argument_list|,
literal|'o'
argument_list|,
literal|'u'
argument_list|)
operator|.
name|contains
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|testsForFilter ()
specifier|private
specifier|static
name|Test
name|testsForFilter
parameter_list|()
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Collections2.filter"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|testsForFilterAll ()
specifier|private
specifier|static
name|Test
name|testsForFilterAll
parameter_list|()
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|unfiltered
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Collections2.filter"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|testsForFilterLinkedList ()
specifier|private
specifier|static
name|Test
name|testsForFilterLinkedList
parameter_list|()
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Collections2.filter"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|testsForFilterNoNulls ()
specifier|private
specifier|static
name|Test
name|testsForFilterNoNulls
parameter_list|()
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|addAll
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|LENGTH_1
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Collections2.filter, no nulls"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|testsForFilterFiltered ()
specifier|private
specifier|static
name|Test
name|testsForFilterFiltered
parameter_list|()
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|addAll
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|LENGTH_1
argument_list|)
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Collections2.filter, filtered input"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|class|FilterChangeTest
specifier|public
specifier|abstract
specifier|static
class|class
name|FilterChangeTest
extends|extends
name|TestCase
block|{
DECL|method|newList ()
specifier|protected
specifier|abstract
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|newList
parameter_list|()
function_decl|;
DECL|method|testFilterIllegalAdd ()
specifier|public
name|void
name|testFilterIllegalAdd
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
decl_stmt|;
name|filtered
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
try|try
block|{
name|filtered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|filtered
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"zzz"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterChangeUnfiltered ()
specifier|public
name|void
name|testFilterChangeUnfiltered
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"yyy"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"yyy"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|filtered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|unfiltered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filtered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|unfiltered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|unfiltered
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|,
literal|"yyy"
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testFilterChangeFiltered ()
specifier|public
name|void
name|testFilterChangeFiltered
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|NOT_YYY_ZZZ
argument_list|)
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"yyy"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"yyy"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterFiltered ()
specifier|public
name|void
name|testFilterFiltered
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|newList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|Collections2
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|LENGTH_1
argument_list|)
argument_list|,
name|STARTS_WITH_VOWEL
argument_list|)
decl_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"apple"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"banana"
argument_list|)
expr_stmt|;
name|unfiltered
operator|.
name|add
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"apple"
argument_list|,
literal|"banana"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
try|try
block|{
name|filtered
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|filtered
operator|.
name|add
argument_list|(
literal|"egg"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"apple"
argument_list|,
literal|"banana"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|filtered
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|unfiltered
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"b"
argument_list|,
literal|"apple"
argument_list|,
literal|"banana"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ArrayListFilterChangeTest
specifier|public
specifier|static
class|class
name|ArrayListFilterChangeTest
extends|extends
name|FilterChangeTest
block|{
DECL|method|newList ()
annotation|@
name|Override
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|newList
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|()
return|;
block|}
block|}
DECL|class|LinkedListFilterChangeTest
specifier|public
specifier|static
class|class
name|LinkedListFilterChangeTest
extends|extends
name|FilterChangeTest
block|{
DECL|method|newList ()
annotation|@
name|Override
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|newList
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newLinkedList
argument_list|()
return|;
block|}
block|}
DECL|field|REMOVE_FIRST_CHAR
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|REMOVE_FIRST_CHAR
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
operator|(
operator|(
name|from
operator|==
literal|null
operator|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|from
argument_list|)
operator|)
condition|?
literal|null
else|:
name|from
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|testsForTransform ()
specifier|private
specifier|static
name|Test
name|testsForTransform
parameter_list|()
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|element
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
literal|"q"
operator|+
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections2
operator|.
name|transform
argument_list|(
name|list
argument_list|,
name|REMOVE_FIRST_CHAR
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Collections2.transform"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Collections2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

