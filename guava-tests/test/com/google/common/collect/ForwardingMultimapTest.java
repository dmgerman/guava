begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ForwardingMultimap}.  *  * @author Hayward Chan  */
end_comment

begin_class
DECL|class|ForwardingMultimapTest
specifier|public
class|class
name|ForwardingMultimapTest
extends|extends
name|ForwardingTestCase
block|{
comment|// Package-private so subclasses can access this variable.
DECL|field|forward
name|Multimap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|forward
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|/*      * Class parameters must be raw, so we can't create a proxy with generic      * type arguments. The created proxy only records calls and returns null, so      * the type is irrelevant at runtime.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|multimap
init|=
name|createProxyInstance
argument_list|(
name|Multimap
operator|.
name|class
argument_list|)
decl_stmt|;
name|forward
operator|=
operator|new
name|ForwardingMultimap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multimap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|multimap
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|int
name|unused
init|=
name|forward
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[isEmpty]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsKey_Object ()
specifier|public
name|void
name|testContainsKey_Object
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|containsKey
argument_list|(
literal|"asdf"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[containsKey(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsValue_Object ()
specifier|public
name|void
name|testContainsValue_Object
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|containsValue
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[containsValue(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsEntry_Object_Object ()
specifier|public
name|void
name|testContainsEntry_Object_Object
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|containsEntry
argument_list|(
literal|"asdf"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[containsEntry(Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPut_Key_Value ()
specifier|public
name|void
name|testPut_Key_Value
parameter_list|()
block|{
name|forward
operator|.
name|put
argument_list|(
literal|"asdf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[put(Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove_Key_Value ()
specifier|public
name|void
name|testRemove_Key_Value
parameter_list|()
block|{
name|forward
operator|.
name|remove
argument_list|(
literal|"asdf"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[remove(Object,Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAll_Key_Iterable ()
specifier|public
name|void
name|testPutAll_Key_Iterable
parameter_list|()
block|{
name|forward
operator|.
name|putAll
argument_list|(
literal|"asfd"
argument_list|,
name|Collections
operator|.
expr|<
name|Boolean
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[putAll(Object,Iterable)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAll_Multimap ()
specifier|public
name|void
name|testPutAll_Multimap
parameter_list|()
block|{
name|forward
operator|.
name|putAll
argument_list|(
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Boolean
operator|>
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[putAll(Multimap)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplaceValues_Key_Iterable ()
specifier|public
name|void
name|testReplaceValues_Key_Iterable
parameter_list|()
block|{
name|forward
operator|.
name|replaceValues
argument_list|(
literal|"key"
argument_list|,
name|Collections
operator|.
expr|<
name|Boolean
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[replaceValues(Object,Iterable)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAll_Object ()
specifier|public
name|void
name|testRemoveAll_Object
parameter_list|()
block|{
name|forward
operator|.
name|removeAll
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[removeAll(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|forward
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[clear]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_Key ()
specifier|public
name|void
name|testGet_Key
parameter_list|()
block|{
name|Collection
argument_list|<
name|Boolean
argument_list|>
name|unused
init|=
name|forward
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[get(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySet ()
specifier|public
name|void
name|testKeySet
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|forward
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[keySet]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeys ()
specifier|public
name|void
name|testKeys
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|unused
init|=
name|forward
operator|.
name|keys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[keys]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValues ()
specifier|public
name|void
name|testValues
parameter_list|()
block|{
name|Collection
argument_list|<
name|Boolean
argument_list|>
name|unused
init|=
name|forward
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[values]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntries ()
specifier|public
name|void
name|testEntries
parameter_list|()
block|{
name|Collection
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|unused
init|=
name|forward
operator|.
name|entries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[entries]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsMap ()
specifier|public
name|void
name|testAsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|unused
init|=
name|forward
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[asMap]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|boolean
name|unused
init|=
name|forward
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[equals(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCode ()
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|int
name|unused
init|=
name|forward
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[hashCode]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|String
name|unused
init|=
name|forward
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[toString]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

