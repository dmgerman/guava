begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|assertInOrderTraversalIs
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|balancePolicy
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|countAggregate
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|defaultNullPointerTester
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|nodeFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|pathFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|pathToList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Tests for {@code BSTRangeOps}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|BstRangeOpsTest
specifier|public
class|class
name|BstRangeOpsTest
extends|extends
name|TestCase
block|{
DECL|field|MODEL
specifier|private
specifier|static
specifier|final
name|SortedSet
argument_list|<
name|Character
argument_list|>
name|MODEL
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|,
literal|'f'
argument_list|,
literal|'g'
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|SimpleNode
name|ROOT
decl_stmt|;
static|static
block|{
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|ROOT
operator|=
name|d
expr_stmt|;
block|}
DECL|method|testCountInRangeLowerBound ()
specifier|public
name|void
name|testCountInRangeLowerBound
parameter_list|()
block|{
for|for
control|(
name|char
name|c
range|:
literal|"abcdefg"
operator|.
name|toCharArray
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|type
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|count
init|=
name|BstRangeOps
operator|.
name|totalInRange
argument_list|(
name|countAggregate
argument_list|,
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|c
argument_list|,
name|type
argument_list|)
argument_list|,
name|ROOT
argument_list|)
decl_stmt|;
name|char
name|d
init|=
name|c
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|d
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MODEL
operator|.
name|tailSet
argument_list|(
name|d
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCountInRangeUpperBound ()
specifier|public
name|void
name|testCountInRangeUpperBound
parameter_list|()
block|{
for|for
control|(
name|char
name|c
range|:
literal|"abcdefg"
operator|.
name|toCharArray
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|type
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|count
init|=
name|BstRangeOps
operator|.
name|totalInRange
argument_list|(
name|countAggregate
argument_list|,
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|c
argument_list|,
name|type
argument_list|)
argument_list|,
name|ROOT
argument_list|)
decl_stmt|;
name|char
name|d
init|=
name|c
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BoundType
operator|.
name|CLOSED
condition|)
block|{
name|d
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MODEL
operator|.
name|headSet
argument_list|(
name|d
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCountInRangeBothBounds ()
specifier|public
name|void
name|testCountInRangeBothBounds
parameter_list|()
block|{
name|String
name|chars
init|=
literal|"abcdefg"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|lb
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|ub
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
operator|&&
name|lb
operator|==
name|BoundType
operator|.
name|OPEN
operator|&&
name|ub
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
continue|continue;
block|}
name|int
name|count
init|=
name|BstRangeOps
operator|.
name|totalInRange
argument_list|(
name|countAggregate
argument_list|,
name|GeneralRange
operator|.
name|range
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|chars
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|lb
argument_list|,
name|chars
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|,
name|ub
argument_list|)
argument_list|,
name|ROOT
argument_list|)
decl_stmt|;
name|char
name|lo
init|=
name|chars
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|lo
operator|++
expr_stmt|;
block|}
name|char
name|hi
init|=
name|chars
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|ub
operator|==
name|BoundType
operator|.
name|CLOSED
condition|)
block|{
name|hi
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|lo
operator|>
name|hi
condition|)
block|{
name|lo
operator|=
name|hi
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MODEL
operator|.
name|subSet
argument_list|(
name|lo
argument_list|,
name|hi
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testCountInRangeAll ()
specifier|public
name|void
name|testCountInRangeAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|MODEL
operator|.
name|size
argument_list|()
argument_list|,
name|BstRangeOps
operator|.
name|totalInRange
argument_list|(
name|countAggregate
argument_list|,
name|GeneralRange
operator|.
expr|<
name|Character
operator|>
name|all
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|,
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCountInRangeEmpty ()
specifier|public
name|void
name|testCountInRangeEmpty
parameter_list|()
block|{
name|SimpleNode
name|empty
init|=
literal|null
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range
init|=
name|GeneralRange
operator|.
name|all
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|BstRangeOps
operator|.
name|totalInRange
argument_list|(
name|countAggregate
argument_list|,
name|range
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearRangeLowerBound ()
specifier|public
name|void
name|testClearRangeLowerBound
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//  /   / \
comment|//  a   e g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|d
argument_list|,
literal|"abdefg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'f'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range1
argument_list|,
literal|"abde"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'f'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range2
argument_list|,
literal|"abdef"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range3
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range3
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range4
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range4
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range5
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'c'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range5
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range6
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'c'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range6
argument_list|,
literal|"ab"
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearRangeUpperBound ()
specifier|public
name|void
name|testClearRangeUpperBound
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//  /   / \
comment|//  a   e g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|d
argument_list|,
literal|"abdefg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'f'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range1
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'f'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range2
argument_list|,
literal|"fg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range3
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range3
argument_list|,
literal|"bdefg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range4
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range4
argument_list|,
literal|"abdefg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range5
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'c'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range5
argument_list|,
literal|"defg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range6
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'c'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range6
argument_list|,
literal|"defg"
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearRangeDoublyBounded ()
specifier|public
name|void
name|testClearRangeDoublyBounded
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//  / \ / \
comment|//  a c e g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|range
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'c'
argument_list|,
name|OPEN
argument_list|,
literal|'f'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range1
argument_list|,
literal|"abcg"
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|range
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|,
literal|'h'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|range2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearRangeAll ()
specifier|public
name|void
name|testClearRangeAll
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//  / \ / \
comment|//  a c e g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|testTraversalAfterClearingRangeIs
argument_list|(
name|d
argument_list|,
name|GeneralRange
operator|.
expr|<
name|Character
operator|>
name|all
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testTraversalAfterClearingRangeIs ( SimpleNode d, GeneralRange<Character> range, String expected)
specifier|private
name|void
name|testTraversalAfterClearingRangeIs
parameter_list|(
name|SimpleNode
name|d
parameter_list|,
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertInOrderTraversalIs
argument_list|(
name|BstRangeOps
operator|.
name|minusRange
argument_list|(
name|range
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|,
name|d
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|testLeftmostPathAll ()
specifier|public
name|void
name|testLeftmostPathAll
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//    \ / \
comment|//    c e g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|all
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLeftmostPathDownTo ()
specifier|public
name|void
name|testLeftmostPathDownTo
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//    \ / \
comment|//    c e g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|e
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range2
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range3
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range3
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range4
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'h'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range4
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLeftmostPathUpTo ()
specifier|public
name|void
name|testLeftmostPathUpTo
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//    \ / \
comment|//    c e g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range2
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range3
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range3
argument_list|,
name|LEFT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRightmostPathAll ()
specifier|public
name|void
name|testRightmostPathAll
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//    \ / \
comment|//    c e g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|all
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRightmostPathDownTo ()
specifier|public
name|void
name|testRightmostPathDownTo
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//    \ / \
comment|//    c e g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range2
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range3
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range3
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range4
init|=
name|GeneralRange
operator|.
name|downTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'h'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range4
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRightmostPathUpTo ()
specifier|public
name|void
name|testRightmostPathUpTo
parameter_list|()
block|{
comment|//     d
comment|//    / \
comment|//   b   f
comment|//    \ / \
comment|//    c e g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range1
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|OPEN
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range1
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|c
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range2
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'d'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range2
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range3
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'a'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range3
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|GeneralRange
argument_list|<
name|Character
argument_list|>
name|range4
init|=
name|GeneralRange
operator|.
name|upTo
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
literal|'h'
argument_list|,
name|CLOSED
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|BstRangeOps
operator|.
name|furthestPath
argument_list|(
name|range4
argument_list|,
name|RIGHT
argument_list|,
name|pathFactory
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultNullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|BstRangeOps
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

