begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
operator|.
name|findLast
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
operator|.
name|stream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SpliteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Doubles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|IterableSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalDouble
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|DoubleStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Streams}.  */
end_comment

begin_class
DECL|class|StreamsTest
specifier|public
class|class
name|StreamsTest
extends|extends
name|TestCase
block|{
comment|/*    * Full and proper black-box testing of a Stream-returning method is extremely involved, and is    * overkill when nearly all Streams are produced using well-tested JDK calls. So, we cheat and    * just test that the toArray() contents are as expected.    */
DECL|method|testStream_nonCollection ()
specifier|public
name|void
name|testStream_nonCollection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|FluentIterable
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|FluentIterable
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|FluentIterable
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|>
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testStream_collection ()
specifier|public
name|void
name|testStream_collection
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|>
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testStream_iterator ()
specifier|public
name|void
name|testStream_iterator
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|>
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testStream_googleOptional ()
specifier|public
name|void
name|testStream_googleOptional
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
operator|.
name|absent
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStream_javaOptional ()
specifier|public
name|void
name|testStream_javaOptional
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindLast_refStream ()
specifier|public
name|void
name|testFindLast_refStream
parameter_list|()
block|{
name|Truth8
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|Stream
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Truth8
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
comment|// test with a large, not-subsized Spliterator
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedList
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|Truth8
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// no way to find out the stream is empty without walking its spliterator
name|Truth8
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|<
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testFindLast_intStream ()
specifier|public
name|void
name|testFindLast_intStream
parameter_list|()
block|{
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|IntStream
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalInt
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|IntStream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalInt
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with a large, not-subsized Spliterator
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedList
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|i
lambda|->
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalInt
operator|.
name|of
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// no way to find out the stream is empty without walking its spliterator
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|i
lambda|->
name|i
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|<
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalInt
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindLast_longStream ()
specifier|public
name|void
name|testFindLast_longStream
parameter_list|()
block|{
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|LongStream
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalLong
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|LongStream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalLong
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with a large, not-subsized Spliterator
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|LongStream
operator|.
name|rangeClosed
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedList
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|i
lambda|->
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalLong
operator|.
name|of
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// no way to find out the stream is empty without walking its spliterator
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|i
lambda|->
name|i
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|<
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalLong
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindLast_doubleStream ()
specifier|public
name|void
name|testFindLast_doubleStream
parameter_list|()
block|{
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|DoubleStream
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalDouble
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|DoubleStream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalDouble
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with a large, not-subsized Spliterator
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|LongStream
operator|.
name|rangeClosed
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedList
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|i
lambda|->
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalDouble
operator|.
name|of
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// no way to find out the stream is empty without walking its spliterator
name|Truth
operator|.
name|assertThat
argument_list|(
name|findLast
argument_list|(
name|list
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|i
lambda|->
name|i
argument_list|)
operator|.
name|filter
argument_list|(
name|i
lambda|->
name|i
operator|<
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|OptionalDouble
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcat_refStream ()
specifier|public
name|void
name|testConcat_refStream
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Stream
operator|.
name|empty
argument_list|()
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|Streams
operator|.
name|concat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Stream
operator|.
name|empty
argument_list|()
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|)
operator|.
name|expect
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcat_refStream_parallel ()
specifier|public
name|void
name|testConcat_refStream_parallel
parameter_list|()
block|{
name|Truth
operator|.
name|assertThat
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Stream
operator|.
name|empty
argument_list|()
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
operator|.
name|parallel
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcat_intStream ()
specifier|public
name|void
name|testConcat_intStream
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|IntStream
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|IntStream
operator|.
name|of
argument_list|(
literal|2
argument_list|)
argument_list|,
name|IntStream
operator|.
name|empty
argument_list|()
argument_list|,
name|IntStream
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcat_longStream ()
specifier|public
name|void
name|testConcat_longStream
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|LongStream
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|LongStream
operator|.
name|of
argument_list|(
literal|2
argument_list|)
argument_list|,
name|LongStream
operator|.
name|empty
argument_list|()
argument_list|,
name|LongStream
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcat_doubleStream ()
specifier|public
name|void
name|testConcat_doubleStream
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|DoubleStream
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DoubleStream
operator|.
name|of
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DoubleStream
operator|.
name|empty
argument_list|()
argument_list|,
name|DoubleStream
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|,
literal|3.0
argument_list|,
literal|4.0
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testStream_optionalInt ()
specifier|public
name|void
name|testStream_optionalInt
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|OptionalInt
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|OptionalInt
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testStream_optionalLong ()
specifier|public
name|void
name|testStream_optionalLong
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|OptionalLong
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|OptionalLong
operator|.
name|of
argument_list|(
literal|5L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
block|}
DECL|method|testStream_optionalDouble ()
specifier|public
name|void
name|testStream_optionalDouble
parameter_list|()
block|{
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|OptionalDouble
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream
argument_list|(
name|java
operator|.
name|util
operator|.
name|OptionalDouble
operator|.
name|of
argument_list|(
literal|5.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|5.0
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex (Function<Collection<String>, Stream<String>> collectionImpl)
specifier|private
name|void
name|testMapWithIndex
parameter_list|(
name|Function
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|,
name|Stream
argument_list|<
name|String
argument_list|>
argument_list|>
name|collectionImpl
parameter_list|)
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|Streams
operator|.
name|mapWithIndex
argument_list|(
name|collectionImpl
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|str
parameter_list|,
name|i
parameter_list|)
lambda|->
name|str
operator|+
literal|":"
operator|+
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|)
operator|.
name|expect
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|Streams
operator|.
name|mapWithIndex
argument_list|(
name|collectionImpl
operator|.
name|apply
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|str
parameter_list|,
name|i
parameter_list|)
lambda|->
name|str
operator|+
literal|":"
operator|+
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|)
operator|.
name|expect
argument_list|(
literal|"a:0"
argument_list|,
literal|"b:1"
argument_list|,
literal|"c:2"
argument_list|,
literal|"d:3"
argument_list|,
literal|"e:4"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex_arrayListSource ()
specifier|public
name|void
name|testMapWithIndex_arrayListSource
parameter_list|()
block|{
name|testMapWithIndex
argument_list|(
name|elems
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|elems
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex_linkedHashSetSource ()
specifier|public
name|void
name|testMapWithIndex_linkedHashSetSource
parameter_list|()
block|{
name|testMapWithIndex
argument_list|(
name|elems
lambda|->
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|elems
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex_unsizedSource ()
specifier|public
name|void
name|testMapWithIndex_unsizedSource
parameter_list|()
block|{
name|testMapWithIndex
argument_list|(
name|elems
lambda|->
name|Stream
operator|.
name|of
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
operator|.
name|flatMap
argument_list|(
name|unused
lambda|->
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elems
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex_intStream ()
specifier|public
name|void
name|testMapWithIndex_intStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|Streams
operator|.
name|mapWithIndex
argument_list|(
name|IntStream
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
parameter_list|(
name|x
parameter_list|,
name|i
parameter_list|)
lambda|->
name|x
operator|+
literal|":"
operator|+
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|)
operator|.
name|expect
argument_list|(
literal|"0:0"
argument_list|,
literal|"1:1"
argument_list|,
literal|"2:2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex_longStream ()
specifier|public
name|void
name|testMapWithIndex_longStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|Streams
operator|.
name|mapWithIndex
argument_list|(
name|LongStream
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
parameter_list|(
name|x
parameter_list|,
name|i
parameter_list|)
lambda|->
name|x
operator|+
literal|":"
operator|+
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|)
operator|.
name|expect
argument_list|(
literal|"0:0"
argument_list|,
literal|"1:1"
argument_list|,
literal|"2:2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithIndex_doubleStream ()
specifier|public
name|void
name|testMapWithIndex_doubleStream
parameter_list|()
block|{
name|SpliteratorTester
operator|.
name|of
argument_list|(
parameter_list|()
lambda|->
name|Streams
operator|.
name|mapWithIndex
argument_list|(
name|DoubleStream
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
parameter_list|(
name|x
parameter_list|,
name|i
parameter_list|)
lambda|->
name|x
operator|+
literal|":"
operator|+
name|i
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|)
operator|.
name|expect
argument_list|(
literal|"0.0:0"
argument_list|,
literal|"1.0:1"
argument_list|,
literal|"2.0:2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testZip ()
specifier|public
name|void
name|testZip
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|zip
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testZipFiniteWithInfinite ()
specifier|public
name|void
name|testZipFiniteWithInfinite
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|zip
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Stream
operator|.
name|iterate
argument_list|(
literal|1
argument_list|,
name|i
lambda|->
name|i
operator|+
literal|1
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testZipInfiniteWithInfinite ()
specifier|public
name|void
name|testZipInfiniteWithInfinite
parameter_list|()
block|{
comment|// zip is doing an infinite zip, but we truncate the result so we can actually test it
comment|// but we want the zip itself to work
name|assertThat
argument_list|(
name|Streams
operator|.
name|zip
argument_list|(
name|Stream
operator|.
name|iterate
argument_list|(
literal|1
argument_list|,
name|i
lambda|->
name|i
operator|+
literal|1
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|valueOf
argument_list|)
argument_list|,
name|Stream
operator|.
name|iterate
argument_list|(
literal|1
argument_list|,
name|i
lambda|->
name|i
operator|+
literal|1
argument_list|)
argument_list|,
parameter_list|(
name|String
name|str
parameter_list|,
name|Integer
name|i
parameter_list|)
lambda|->
name|str
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|limit
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testZipDifferingLengths ()
specifier|public
name|void
name|testZipDifferingLengths
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Streams
operator|.
name|zip
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Streams
operator|.
name|zip
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testForEachPair ()
specifier|public
name|void
name|testForEachPair
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Streams
operator|.
name|forEachPair
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|list
operator|.
name|add
argument_list|(
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
expr_stmt|;
block|}
DECL|method|testForEachPair_differingLengths1 ()
specifier|public
name|void
name|testForEachPair_differingLengths1
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Streams
operator|.
name|forEachPair
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|list
operator|.
name|add
argument_list|(
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
expr_stmt|;
block|}
DECL|method|testForEachPair_differingLengths2 ()
specifier|public
name|void
name|testForEachPair_differingLengths2
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Streams
operator|.
name|forEachPair
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|list
operator|.
name|add
argument_list|(
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
expr_stmt|;
block|}
DECL|method|testForEachPair_oneEmpty ()
specifier|public
name|void
name|testForEachPair_oneEmpty
parameter_list|()
block|{
name|Streams
operator|.
name|forEachPair
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Stream
operator|.
name|empty
argument_list|()
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|fail
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testForEachPair_finiteWithInfinite ()
specifier|public
name|void
name|testForEachPair_finiteWithInfinite
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Streams
operator|.
name|forEachPair
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Stream
operator|.
name|iterate
argument_list|(
literal|1
argument_list|,
name|i
lambda|->
name|i
operator|+
literal|1
argument_list|)
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|list
operator|.
name|add
argument_list|(
name|a
operator|+
literal|":"
operator|+
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a:1"
argument_list|,
literal|"b:2"
argument_list|,
literal|"c:3"
argument_list|)
expr_stmt|;
block|}
DECL|method|testForEachPair_parallel ()
specifier|public
name|void
name|testForEachPair_parallel
parameter_list|()
block|{
name|Stream
argument_list|<
name|String
argument_list|>
name|streamA
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|String
operator|::
name|valueOf
argument_list|)
operator|.
name|parallel
argument_list|()
decl_stmt|;
name|Stream
argument_list|<
name|Integer
argument_list|>
name|streamB
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|i
argument_list|)
operator|.
name|parallel
argument_list|()
decl_stmt|;
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|forEachPair
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Truth
operator|.
name|assertThat
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
comment|// of course, this test doesn't prove that anything actually happened in parallel...
block|}
comment|// TODO(kevinb): switch to importing Truth's assertThat(Stream) if we get that added
DECL|method|assertThat (Stream<?> stream)
specifier|private
specifier|static
name|IterableSubject
name|assertThat
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
block|{
return|return
name|Truth
operator|.
name|assertThat
argument_list|(
name|stream
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
DECL|method|assertThat (IntStream stream)
specifier|private
specifier|static
name|IterableSubject
name|assertThat
parameter_list|(
name|IntStream
name|stream
parameter_list|)
block|{
return|return
name|Truth
operator|.
name|assertThat
argument_list|(
name|stream
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
DECL|method|assertThat (LongStream stream)
specifier|private
specifier|static
name|IterableSubject
name|assertThat
parameter_list|(
name|LongStream
name|stream
parameter_list|)
block|{
return|return
name|Truth
operator|.
name|assertThat
argument_list|(
name|stream
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
DECL|method|assertThat (DoubleStream stream)
specifier|private
specifier|static
name|IterableSubject
name|assertThat
parameter_list|(
name|DoubleStream
name|stream
parameter_list|)
block|{
return|return
name|Truth
operator|.
name|assertThat
argument_list|(
name|Doubles
operator|.
name|asList
argument_list|(
name|stream
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

