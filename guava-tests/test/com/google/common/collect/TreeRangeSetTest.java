begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ranges
operator|.
name|range
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_comment
comment|/**  * Tests for {@link TreeRangeSet}.  *  * @author Louis Wasserman  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
argument_list|(
literal|"TreeRangeSet"
argument_list|)
DECL|class|TreeRangeSetTest
specifier|public
class|class
name|TreeRangeSetTest
extends|extends
name|AbstractRangeSetTest
block|{
comment|// TODO(cpovirk): test all of these with the ranges added in the reverse order
DECL|method|testMergesConnectedWithOverlap ()
specifier|public
name|void
name|testMergesConnectedWithOverlap
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|open
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|atLeast
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergesConnectedDisjoint ()
specifier|public
name|void
name|testMergesConnectedDisjoint
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|open
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|atLeast
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnoresSmallerSharingNoBound ()
specifier|public
name|void
name|testIgnoresSmallerSharingNoBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|open
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnoresSmallerSharingLowerBound ()
specifier|public
name|void
name|testIgnoresSmallerSharingLowerBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnoresSmallerSharingUpperBound ()
specifier|public
name|void
name|testIgnoresSmallerSharingUpperBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnoresEqual ()
specifier|public
name|void
name|testIgnoresEqual
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtendSameLowerBound ()
specifier|public
name|void
name|testExtendSameLowerBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtendSameUpperBound ()
specifier|public
name|void
name|testExtendSameUpperBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtendBothDirections ()
specifier|public
name|void
name|testExtendBothDirections
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddEmpty ()
specifier|public
name|void
name|testAddEmpty
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFillHoleExactly ()
specifier|public
name|void
name|testFillHoleExactly
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|atLeast
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFillHoleWithOverlap ()
specifier|public
name|void
name|testFillHoleWithOverlap
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|atLeast
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddManyPairs ()
specifier|public
name|void
name|testAddManyPairs
parameter_list|()
block|{
for|for
control|(
name|int
name|aLow
init|=
literal|0
init|;
name|aLow
operator|<
literal|6
condition|;
name|aLow
operator|++
control|)
block|{
for|for
control|(
name|int
name|aHigh
init|=
literal|0
init|;
name|aHigh
operator|<
literal|6
condition|;
name|aHigh
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|aLowType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|aHighType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|aLow
operator|==
name|aHigh
operator|&&
name|aLowType
operator|==
name|OPEN
operator|&&
name|aHighType
operator|==
name|OPEN
operator|)
operator|||
name|aLow
operator|>
name|aHigh
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|bLow
init|=
literal|0
init|;
name|bLow
operator|<
literal|6
condition|;
name|bLow
operator|++
control|)
block|{
for|for
control|(
name|int
name|bHigh
init|=
literal|0
init|;
name|bHigh
operator|<
literal|6
condition|;
name|bHigh
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|bLowType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|bHighType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|bLow
operator|==
name|bHigh
operator|&&
name|bLowType
operator|==
name|OPEN
operator|&&
name|bHighType
operator|==
name|OPEN
operator|)
operator|||
name|bLow
operator|>
name|bHigh
condition|)
block|{
continue|continue;
block|}
name|doPairTest
argument_list|(
name|range
argument_list|(
name|aLow
argument_list|,
name|aLowType
argument_list|,
name|aHigh
argument_list|,
name|aHighType
argument_list|)
argument_list|,
name|range
argument_list|(
name|bLow
argument_list|,
name|bLowType
argument_list|,
name|bHigh
argument_list|,
name|bHighType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|doPairTest (Range<Integer> a, Range<Integer> b)
specifier|private
specifier|static
name|void
name|doPairTest
parameter_list|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|a
parameter_list|,
name|Range
argument_list|<
name|Integer
argument_list|>
name|b
parameter_list|)
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|isEmpty
argument_list|()
operator|&&
name|b
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|isConnected
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|a
operator|.
name|span
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|a
operator|.
name|lowerEndpoint
argument_list|()
operator|<
name|b
operator|.
name|lowerEndpoint
argument_list|()
condition|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRemoveEmpty ()
specifier|public
name|void
name|testRemoveEmpty
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovePartSharingLowerBound ()
specifier|public
name|void
name|testRemovePartSharingLowerBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|singleton
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovePartSharingUpperBound ()
specifier|public
name|void
name|testRemovePartSharingUpperBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|openClosed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|singleton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveMiddle ()
specifier|public
name|void
name|testRemoveMiddle
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|atMost
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Ranges
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Ranges
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveNoOverlap ()
specifier|public
name|void
name|testRemoveNoOverlap
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovePartFromBelowLowerBound ()
specifier|public
name|void
name|testRemovePartFromBelowLowerBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|openClosed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemovePartFromAboveUpperBound ()
specifier|public
name|void
name|testRemovePartFromAboveUpperBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Ranges
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveExact ()
specifier|public
name|void
name|testRemoveExact
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveAllFromBelowLowerBound ()
specifier|public
name|void
name|testRemoveAllFromBelowLowerBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveAllFromAboveUpperBound ()
specifier|public
name|void
name|testRemoveAllFromAboveUpperBound
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveAllExtendingBothDirections ()
specifier|public
name|void
name|testRemoveAllExtendingBothDirections
parameter_list|()
block|{
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|testInvariants
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testRangeContaining1 ()
specifier|public
name|void
name|testRangeContaining1
parameter_list|()
block|{
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|rangeSet
operator|.
name|rangeContaining
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rangeSet
operator|.
name|rangeContaining
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeContaining2 ()
specifier|public
name|void
name|testRangeContaining2
parameter_list|()
block|{
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|remove
argument_list|(
name|Ranges
operator|.
name|open
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|rangeSet
operator|.
name|rangeContaining
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ranges
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|10
argument_list|)
argument_list|,
name|rangeSet
operator|.
name|rangeContaining
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rangeSet
operator|.
name|rangeContaining
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rangeSet
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

