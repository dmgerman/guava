begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Utility class for being able to seed a {@link Random} value with a passed  * in seed from a benchmark parameter.  *   * TODO: Remove this class once Caliper has a better way.  *   * @author Nicholaus Shupe  */
end_comment

begin_class
DECL|class|SpecialRandom
specifier|public
specifier|final
class|class
name|SpecialRandom
extends|extends
name|Random
block|{
DECL|method|valueOf (String s)
specifier|public
specifier|static
name|SpecialRandom
name|valueOf
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|new
name|SpecialRandom
argument_list|()
else|:
operator|new
name|SpecialRandom
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
DECL|field|hasSeed
specifier|private
specifier|final
name|boolean
name|hasSeed
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
decl_stmt|;
DECL|method|SpecialRandom ()
specifier|public
name|SpecialRandom
parameter_list|()
block|{
name|this
operator|.
name|hasSeed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|seed
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|SpecialRandom (long seed)
specifier|public
name|SpecialRandom
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|super
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasSeed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|hasSeed
condition|?
literal|"(seed:"
operator|+
name|seed
else|:
literal|"(default seed)"
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

