begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test for {@link ForwardingBlockingDeque}  *  * @author Emily Soldal  */
end_comment

begin_class
DECL|class|ForwardingBlockingDequeTest
specifier|public
class|class
name|ForwardingBlockingDequeTest
extends|extends
name|ForwardingTestCase
block|{
DECL|field|forward
specifier|private
name|BlockingDeque
argument_list|<
name|String
argument_list|>
name|forward
decl_stmt|;
comment|/*    * Class parameters must be raw, so we can't create a proxy with generic    * type arguments. The created proxy only records calls and returns null, so    * the type is irrelevant at runtime.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setUp ()
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|BlockingDeque
argument_list|<
name|String
argument_list|>
name|deque
init|=
name|createProxyInstance
argument_list|(
name|BlockingDeque
operator|.
name|class
argument_list|)
decl_stmt|;
name|forward
operator|=
operator|new
name|ForwardingBlockingDeque
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BlockingDeque
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|deque
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|testRemainingCapacity ()
specifier|public
name|void
name|testRemainingCapacity
parameter_list|()
block|{
name|forward
operator|.
name|remainingCapacity
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[remainingCapacity]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutFirst_T ()
specifier|public
name|void
name|testPutFirst_T
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|putFirst
argument_list|(
literal|"asf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[putFirst(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutLast_T ()
specifier|public
name|void
name|testPutLast_T
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|putFirst
argument_list|(
literal|"asf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[putFirst(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfferFirst_T ()
specifier|public
name|void
name|testOfferFirst_T
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|offerFirst
argument_list|(
literal|"asf"
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[offerFirst(Object,long,TimeUnit)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfferLast_T ()
specifier|public
name|void
name|testOfferLast_T
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|offerLast
argument_list|(
literal|"asf"
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[offerLast(Object,long,TimeUnit)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTakeFirst ()
specifier|public
name|void
name|testTakeFirst
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[takeFirst]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTakeLast ()
specifier|public
name|void
name|testTakeLast
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|takeLast
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[takeLast]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPollFirst ()
specifier|public
name|void
name|testPollFirst
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|pollFirst
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[pollFirst(long,TimeUnit)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPollLast ()
specifier|public
name|void
name|testPollLast
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|pollLast
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[pollLast(long,TimeUnit)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPut_T ()
specifier|public
name|void
name|testPut_T
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|put
argument_list|(
literal|"asf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[put(Object)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOffer_T ()
specifier|public
name|void
name|testOffer_T
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|offer
argument_list|(
literal|"asf"
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[offer(Object,long,TimeUnit)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTake ()
specifier|public
name|void
name|testTake
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|take
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[take]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPoll ()
specifier|public
name|void
name|testPoll
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|forward
operator|.
name|poll
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[poll(long,TimeUnit)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDrainTo_T ()
specifier|public
name|void
name|testDrainTo_T
parameter_list|()
block|{
name|forward
operator|.
name|drainTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[drainTo(Collection)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDrainTo_T_maxElements ()
specifier|public
name|void
name|testDrainTo_T_maxElements
parameter_list|()
block|{
name|forward
operator|.
name|drainTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[drainTo(Collection,int)]"
argument_list|,
name|getCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

