begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Package up sample data for common collections benchmarking.  *   * @author Nicholaus Shupe  */
end_comment

begin_class
DECL|class|CollectionBenchmarkSampleData
class|class
name|CollectionBenchmarkSampleData
block|{
DECL|field|isUserTypeFast
specifier|private
specifier|final
name|boolean
name|isUserTypeFast
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|SpecialRandom
name|random
decl_stmt|;
DECL|field|hitRate
specifier|private
specifier|final
name|double
name|hitRate
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|valuesInSet
specifier|private
specifier|final
name|Set
argument_list|<
name|Element
argument_list|>
name|valuesInSet
decl_stmt|;
DECL|field|queries
specifier|private
specifier|final
name|Element
index|[]
name|queries
decl_stmt|;
DECL|method|CollectionBenchmarkSampleData ( boolean isUserTypeFast, SpecialRandom random, double hitRate, int size)
name|CollectionBenchmarkSampleData
parameter_list|(
name|boolean
name|isUserTypeFast
parameter_list|,
name|SpecialRandom
name|random
parameter_list|,
name|double
name|hitRate
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|isUserTypeFast
operator|=
name|isUserTypeFast
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|checkNotNull
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|this
operator|.
name|hitRate
operator|=
name|hitRate
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|valuesInSet
operator|=
name|createData
argument_list|()
expr_stmt|;
name|this
operator|.
name|queries
operator|=
name|createQueries
argument_list|(
name|valuesInSet
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
DECL|method|getValuesInSet ()
name|Set
argument_list|<
name|Element
argument_list|>
name|getValuesInSet
parameter_list|()
block|{
return|return
name|valuesInSet
return|;
block|}
DECL|method|getQueries ()
name|Element
index|[]
name|getQueries
parameter_list|()
block|{
return|return
name|queries
return|;
block|}
DECL|method|createQueries (Set<Element> elementsInSet, int numQueries)
specifier|private
name|Element
index|[]
name|createQueries
parameter_list|(
name|Set
argument_list|<
name|Element
argument_list|>
name|elementsInSet
parameter_list|,
name|int
name|numQueries
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|queryList
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|numQueries
argument_list|)
decl_stmt|;
name|int
name|numGoodQueries
init|=
call|(
name|int
call|)
argument_list|(
name|numQueries
operator|*
name|hitRate
operator|+
literal|0.5
argument_list|)
decl_stmt|;
comment|// add good queries
name|int
name|size
init|=
name|elementsInSet
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|int
name|minCopiesOfEachGoodQuery
init|=
name|numGoodQueries
operator|/
name|size
decl_stmt|;
name|int
name|extras
init|=
name|numGoodQueries
operator|%
name|size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minCopiesOfEachGoodQuery
condition|;
name|i
operator|++
control|)
block|{
name|queryList
operator|.
name|addAll
argument_list|(
name|elementsInSet
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|tmp
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elementsInSet
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|tmp
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|queryList
operator|.
name|addAll
argument_list|(
name|tmp
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|extras
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now add bad queries
while|while
condition|(
name|queryList
operator|.
name|size
argument_list|()
operator|<
name|numQueries
condition|)
block|{
name|Element
name|candidate
init|=
name|newElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|elementsInSet
operator|.
name|contains
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|queryList
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|queryList
argument_list|,
name|random
argument_list|)
expr_stmt|;
return|return
name|queryList
operator|.
name|toArray
argument_list|(
operator|new
name|Element
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|createData ()
specifier|private
name|Set
argument_list|<
name|Element
argument_list|>
name|createData
parameter_list|()
block|{
name|Set
argument_list|<
name|Element
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|newElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|newElement ()
specifier|private
name|Element
name|newElement
parameter_list|()
block|{
name|int
name|value
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
return|return
name|isUserTypeFast
condition|?
operator|new
name|Element
argument_list|(
name|value
argument_list|)
else|:
operator|new
name|SlowElement
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|class|Element
specifier|static
class|class
name|Element
implements|implements
name|Comparable
argument_list|<
name|Element
argument_list|>
block|{
DECL|field|hash
specifier|final
name|int
name|hash
decl_stmt|;
DECL|method|Element (int hash)
name|Element
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
DECL|method|equals (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
operator|(
name|obj
operator|instanceof
name|Element
operator|&&
operator|(
operator|(
name|Element
operator|)
name|obj
operator|)
operator|.
name|hash
operator|==
name|hash
operator|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Element that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Element
name|that
parameter_list|)
block|{
return|return
name|Ints
operator|.
name|compare
argument_list|(
name|hash
argument_list|,
name|that
operator|.
name|hash
argument_list|)
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|hash
argument_list|)
return|;
block|}
block|}
DECL|class|SlowElement
specifier|static
class|class
name|SlowElement
extends|extends
name|Element
block|{
DECL|method|SlowElement (int hash)
name|SlowElement
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
name|super
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
DECL|method|equals (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|slowItDown
argument_list|()
operator|!=
literal|1
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|slowItDown
argument_list|()
operator|+
name|hash
return|;
block|}
DECL|method|compareTo (Element e)
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|int
name|x
init|=
name|slowItDown
argument_list|()
decl_stmt|;
return|return
name|x
operator|+
name|super
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
operator|-
name|x
return|;
comment|// silly attempt to prevent opt
block|}
DECL|method|slowItDown ()
specifier|static
name|int
name|slowItDown
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|i
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

