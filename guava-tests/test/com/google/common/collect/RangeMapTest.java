begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Tests for {@code RangeMap}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|RangeMapTest
specifier|public
class|class
name|RangeMapTest
extends|extends
name|TestCase
block|{
DECL|field|RANGES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|RANGES
decl_stmt|;
DECL|field|MIN_BOUND
specifier|private
specifier|static
specifier|final
name|int
name|MIN_BOUND
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|MAX_BOUND
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BOUND
init|=
literal|1
decl_stmt|;
static|static
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Ranges
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one-ended ranges
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
init|;
name|i
operator|<=
name|MAX_BOUND
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|type
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|upTo
argument_list|(
name|i
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|downTo
argument_list|(
name|i
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add two-ended ranges
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
init|;
name|i
operator|<=
name|MAX_BOUND
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<=
name|MAX_BOUND
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|lowerType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|upperType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
operator|&
name|lowerType
operator|==
name|OPEN
operator|&
name|upperType
operator|==
name|OPEN
condition|)
block|{
continue|continue;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Ranges
operator|.
name|range
argument_list|(
name|i
argument_list|,
name|lowerType
argument_list|,
name|j
argument_list|,
name|upperType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|RANGES
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|testAllRangesAlone ()
specifier|public
name|void
name|testAllRangesAlone
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllRangePairs ()
specifier|public
name|void
name|testAllRangePairs
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAllRangeTriples ()
specifier|public
name|void
name|testAllRangeTriples
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range3
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testPutAll1 ()
specifier|public
name|void
name|testPutAll1
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range3
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test2
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// put range2 and range3 into test2, and then put test2 into test
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test2
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|test2
operator|.
name|put
argument_list|(
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|putAll
argument_list|(
name|test2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testPutAll2 ()
specifier|public
name|void
name|testPutAll2
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range3
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test2
init|=
name|RangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// put range3 into test2, and then put test2 into test
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|test2
operator|.
name|put
argument_list|(
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|putAll
argument_list|(
name|test2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify (Map<Integer, Integer> model, RangeMap<Integer, Integer> test)
specifier|private
name|void
name|verify
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
parameter_list|,
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
operator|-
literal|1
init|;
name|i
operator|<=
name|MAX_BOUND
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|model
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|test
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putModel (Map<Integer, Integer> model, Range<Integer> range, int value)
specifier|private
name|void
name|putModel
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
parameter_list|,
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|,
name|int
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
operator|-
literal|1
init|;
name|i
operator|<=
name|MAX_BOUND
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

