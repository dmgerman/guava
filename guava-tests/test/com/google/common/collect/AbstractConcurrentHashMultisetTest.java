begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ConcurrentHashMultiset}.  *  * @author Kevin Bourrillion  * @author Jared Levy  */
end_comment

begin_class
DECL|class|AbstractConcurrentHashMultisetTest
specifier|public
specifier|abstract
class|class
name|AbstractConcurrentHashMultisetTest
extends|extends
name|AbstractMultisetTest
block|{
comment|// we don't support null
DECL|method|testToStringNull ()
annotation|@
name|Override
specifier|public
name|void
name|testToStringNull
parameter_list|()
block|{}
DECL|method|testCopyConstructor ()
specifier|public
name|void
name|testCopyConstructor
parameter_list|()
block|{
name|ms
operator|=
name|ConcurrentHashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ms
operator|.
name|count
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ms
operator|.
name|count
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetCount ()
specifier|public
name|void
name|testSetCount
parameter_list|()
block|{
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
name|cms
init|=
name|ConcurrentHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|cms
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cms
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cms
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|setCount
argument_list|(
literal|"c"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetCountConditional ()
specifier|public
name|void
name|testSetCountConditional
parameter_list|()
block|{
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
name|cms
init|=
name|ConcurrentHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|cms
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cms
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"c"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"d"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveExactly ()
specifier|public
name|void
name|testRemoveExactly
parameter_list|()
block|{
name|ConcurrentHashMultiset
argument_list|<
name|String
argument_list|>
name|cms
init|=
name|ConcurrentHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|cms
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cms
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|cms
operator|.
name|removeExactly
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
name|assertTrue
argument_list|(
name|cms
operator|.
name|removeExactly
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|removeExactly
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cms
operator|.
name|removeExactly
argument_list|(
literal|"a"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|removeExactly
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cms
operator|.
name|removeExactly
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cms
operator|.
name|count
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

