begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_comment
comment|/**  * Tests common methods in {@link ImmutableTable}  *  * @author Gregory Kick  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableTableTest
specifier|public
class|class
name|ImmutableTableTest
extends|extends
name|AbstractTableReadTest
block|{
DECL|method|create (Object... data)
annotation|@
name|Override
specifier|protected
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|data
parameter_list|)
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|=
name|i
operator|+
literal|3
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|data
index|[
name|i
index|]
argument_list|,
operator|(
name|Integer
operator|)
name|data
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
operator|(
name|Character
operator|)
name|data
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testBuilder ()
specifier|public
name|void
name|testBuilder
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedTable
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|expectedTable
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|expectedTable
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|expectedTable
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|otherTable
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|otherTable
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|otherTable
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTable
argument_list|,
name|builder
operator|.
name|putAll
argument_list|(
name|otherTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableCell ()
specifier|public
name|void
name|testBuilder_withImmutableCell
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|builder
operator|.
name|put
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableCellAndNullContents ()
specifier|public
name|void
name|testBuilder_withImmutableCellAndNullContents
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
operator|(
name|Character
operator|)
literal|null
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|'a'
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|class|StringHolder
specifier|private
specifier|static
class|class
name|StringHolder
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
block|}
DECL|method|testBuilder_withMutableCell ()
specifier|public
name|void
name|testBuilder_withMutableCell
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|StringHolder
name|holder
init|=
operator|new
name|StringHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"foo"
expr_stmt|;
name|Table
operator|.
name|Cell
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|mutableCell
init|=
operator|new
name|Tables
operator|.
name|AbstractCell
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Character
name|getRowKey
parameter_list|()
block|{
return|return
literal|'K'
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getColumnKey
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|holder
operator|.
name|string
return|;
block|}
block|}
decl_stmt|;
comment|// Add the mutable cell to the builder
name|builder
operator|.
name|put
argument_list|(
name|mutableCell
argument_list|)
expr_stmt|;
comment|// Mutate the value
name|holder
operator|.
name|string
operator|=
literal|"bar"
expr_stmt|;
comment|// Make sure it uses the original value.
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|(
literal|'K'
argument_list|,
literal|42
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_noDuplicates ()
specifier|public
name|void
name|testBuilder_noDuplicates
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|testBuilder_noNulls ()
specifier|public
name|void
name|testBuilder_noNulls
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
DECL|method|validateTableCopies (Table<R, C, V> original)
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|void
name|validateTableCopies
parameter_list|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|original
parameter_list|)
block|{
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|copy
init|=
name|ImmutableTable
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|validateViewOrdering
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|built
init|=
name|ImmutableTable
operator|.
expr|<
name|R
decl_stmt|,
name|C
decl_stmt|,
name|V
decl|>
name|builder
argument_list|()
decl|.
name|putAll
argument_list|(
name|original
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|built
argument_list|)
expr_stmt|;
name|validateViewOrdering
argument_list|(
name|original
argument_list|,
name|built
argument_list|)
expr_stmt|;
block|}
DECL|method|validateViewOrdering ( Table<R, C, V> original, Table<R, C, V> copy)
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
name|void
name|validateViewOrdering
parameter_list|(
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|original
parameter_list|,
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|copy
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|original
operator|.
name|cellSet
argument_list|()
argument_list|,
name|copy
operator|.
name|cellSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|original
operator|.
name|rowKeySet
argument_list|()
argument_list|,
name|copy
operator|.
name|rowKeySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|original
operator|.
name|values
argument_list|()
argument_list|,
name|copy
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf ()
specifier|public
name|void
name|testCopyOf
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|validateTableCopies
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|validateTableCopies
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|validateTableCopies
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Even though rowKeySet, columnKeySet, and cellSet have the same
comment|// iteration ordering, row has an inconsistent ordering.
name|assertThat
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|'b'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableTable
operator|.
name|copyOf
argument_list|(
name|table
argument_list|)
operator|.
name|row
argument_list|(
literal|'b'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOfSparse ()
specifier|public
name|void
name|testCopyOfSparse
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|7
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|5
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|0
argument_list|,
literal|"axe"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|3
argument_list|,
literal|"tub"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|4
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|5
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|validateTableCopies
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfDense ()
specifier|public
name|void
name|testCopyOfDense
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|3
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|validateTableCopies
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_orderRowsAndColumnsBy_putAll ()
specifier|public
name|void
name|testBuilder_orderRowsAndColumnsBy_putAll
parameter_list|()
block|{
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|builder
operator|.
name|orderRowsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|orderColumnsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|putAll
argument_list|(
name|table
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|columnKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"baz"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|row
argument_list|(
literal|'b'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_orderRowsAndColumnsBy_sparse ()
specifier|public
name|void
name|testBuilder_orderRowsAndColumnsBy_sparse
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|orderRowsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderColumnsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|7
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|5
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|0
argument_list|,
literal|"axe"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|3
argument_list|,
literal|"tub"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|4
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|5
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'e'
argument_list|,
literal|'r'
argument_list|,
literal|'x'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|columnKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"cat"
argument_list|,
literal|"axe"
argument_list|,
literal|"baz"
argument_list|,
literal|"tub"
argument_list|,
literal|"dog"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|'c'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|column
argument_list|(
literal|5
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'e'
argument_list|,
literal|'x'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_orderRowsAndColumnsBy_dense ()
specifier|public
name|void
name|testBuilder_orderRowsAndColumnsBy_dense
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|orderRowsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderColumnsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|3
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|columnKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"baz"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"dog"
argument_list|,
literal|"cat"
argument_list|,
literal|"baz"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|'c'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_orderRowsBy_sparse ()
specifier|public
name|void
name|testBuilder_orderRowsBy_sparse
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|orderRowsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|7
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|5
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|0
argument_list|,
literal|"axe"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|3
argument_list|,
literal|"tub"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|4
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|5
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'e'
argument_list|,
literal|'r'
argument_list|,
literal|'x'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|column
argument_list|(
literal|5
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'e'
argument_list|,
literal|'x'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_orderRowsBy_dense ()
specifier|public
name|void
name|testBuilder_orderRowsBy_dense
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|orderRowsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|3
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_orderColumnsBy_sparse ()
specifier|public
name|void
name|testBuilder_orderColumnsBy_sparse
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|orderColumnsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|7
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|5
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|0
argument_list|,
literal|"axe"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'e'
argument_list|,
literal|3
argument_list|,
literal|"tub"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'r'
argument_list|,
literal|4
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'x'
argument_list|,
literal|5
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|columnKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|'c'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilder_orderColumnsBy_dense ()
specifier|public
name|void
name|testBuilder_orderColumnsBy_dense
parameter_list|()
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|orderColumnsBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'c'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|3
argument_list|,
literal|"cat"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|"dog"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|2
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|'a'
argument_list|,
literal|1
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|table
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|columnKeySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|'c'
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Mind-bogglingly slow in GWT"
argument_list|)
annotation|@
name|AndroidIncompatible
comment|// slow
DECL|method|testOverflowCondition ()
specifier|public
name|void
name|testOverflowCondition
parameter_list|()
block|{
comment|// See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details.
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|0x10000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|instanceof
name|SparseImmutableTable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

