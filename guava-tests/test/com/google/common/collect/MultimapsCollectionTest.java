begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|AbstractMultisetSetCountTester
operator|.
name|getSetCountDuplicateInitializingMethods
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultisetIteratorTester
operator|.
name|getIteratorDuplicateInitializingMethods
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultisetReadsTester
operator|.
name|getReadsDuplicateInitializingMethods
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
operator|.
name|newProxyInstance
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|EntryTransformer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|CollectionTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|ListMultimapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultimapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultisetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultisetWritesTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestListMultimapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestMultimapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringListMultimapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringMultisetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|CollectionIteratorTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Run collection tests on wrappers from {@link Multimaps}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
comment|// TODO(cpovirk): set up collect/gwt/suites version
DECL|class|MultimapsCollectionTest
specifier|public
class|class
name|MultimapsCollectionTest
extends|extends
name|TestCase
block|{
DECL|field|COLLECTION_FEATURES_ORDER
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES_ORDER
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
block|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
block|,
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
block|}
decl_stmt|;
DECL|field|COLLECTION_FEATURES_REMOVE
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES_REMOVE
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
block|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
block|}
decl_stmt|;
DECL|field|COLLECTION_FEATURES_REMOVE_ORDER
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|COLLECTION_FEATURES_REMOVE_ORDER
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
block|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
block|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
block|}
decl_stmt|;
DECL|field|FOR_MAP_FEATURES_ONE
specifier|private
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|FOR_MAP_FEATURES_ONE
init|=
block|{
name|CollectionSize
operator|.
name|ONE
block|,
name|ALLOWS_NULL_VALUES
block|,
name|SUPPORTS_REMOVE
block|,   }
decl_stmt|;
DECL|field|FOR_MAP_FEATURES_ANY
specifier|private
specifier|static
specifier|final
name|Feature
argument_list|<
name|?
argument_list|>
index|[]
name|FOR_MAP_FEATURES_ANY
init|=
block|{
name|CollectionSize
operator|.
name|ANY
block|,
name|ALLOWS_NULL_VALUES
block|,
name|SUPPORTS_REMOVE
block|,
name|MultisetTestSuiteBuilder
operator|.
name|NoRecurse
operator|.
name|NO_ENTRY_SET
block|,
comment|// Cannot create entries with count> 1
block|}
decl_stmt|;
DECL|field|STRING_TREESET_FACTORY
specifier|static
specifier|final
name|Supplier
argument_list|<
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|STRING_TREESET_FACTORY
init|=
operator|new
name|Supplier
argument_list|<
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|get
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsLast
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|populateMultimapForGet ( Multimap<Integer, String> multimap, String[] elements)
specifier|static
name|void
name|populateMultimapForGet
parameter_list|(
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
name|multimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateMultimapForKeySet ( Multimap<String, Integer> multimap, String[] elements)
specifier|static
name|void
name|populateMultimapForKeySet
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
name|element
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|element
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateMultimapForValues ( Multimap<Integer, String> multimap, String[] elements)
specifier|static
name|void
name|populateMultimapForValues
parameter_list|(
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
name|i
operator|%
literal|2
argument_list|,
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateMultimapForKeys ( Multimap<String, Integer> multimap, String[] elements)
specifier|static
name|void
name|populateMultimapForKeys
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
parameter_list|,
name|String
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Implements {@code Multimap.put()} -- and no other methods -- for a {@code    * Map} by ignoring all but the latest value for each key. This class exists    * only so that we can use    * {@link MultimapsCollectionTest#populateMultimapForGet(Multimap, String[])}    * and similar methods to populate a map to be passed to    * {@link Multimaps#forMap(Map)}. All tests should run against the result of    * {@link #build()}.    */
DECL|class|PopulatableMapAsMultimap
specifier|private
specifier|static
specifier|final
class|class
name|PopulatableMapAsMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|map
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
DECL|field|unusableDelegate
specifier|final
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|unusableDelegate
decl_stmt|;
DECL|method|create ()
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|PopulatableMapAsMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|PopulatableMapAsMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// all methods throw immediately
DECL|method|PopulatableMapAsMultimap ()
name|PopulatableMapAsMultimap
parameter_list|()
block|{
name|this
operator|.
name|map
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|unusableDelegate
operator|=
operator|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|newProxyInstance
argument_list|(
name|SetMultimap
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|SetMultimap
operator|.
name|class
block|}
operator|,
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|)
empty_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
specifier|protected
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|unusableDelegate
return|;
block|}
DECL|method|put (K key, V value)
annotation|@
name|Override
specifier|public
name|boolean
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|build ()
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
return|return
name|Multimaps
operator|.
name|forMap
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
end_class

begin_class
DECL|class|TestEntriesGenerator
specifier|abstract
specifier|static
class|class
name|TestEntriesGenerator
implements|implements
name|TestCollectionGenerator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"cat"
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Collection
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createMultimap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|element
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|multimap
operator|.
name|entries
argument_list|()
return|;
block|}
DECL|method|createMultimap ()
specifier|abstract
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createMultimap
parameter_list|()
function_decl|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
index|[]
operator|)
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order ( List<Entry<String, Integer>> insertionOrder)
specifier|public
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
block|}
end_class

begin_class
DECL|class|TestEntriesListGenerator
specifier|public
specifier|abstract
specifier|static
class|class
name|TestEntriesListGenerator
extends|extends
name|TestEntriesGenerator
implements|implements
name|TestListGenerator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
block|{
DECL|method|create (Object... elements)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
operator|)
name|super
operator|.
name|create
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
end_class

begin_decl_stmt
DECL|field|FILTER_GET_PREDICATE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|FILTER_GET_PREDICATE
init|=
operator|new
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
literal|"badvalue"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
literal|55556
operator|!=
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|FILTER_KEYSET_PREDICATE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|FILTER_KEYSET_PREDICATE
init|=
operator|new
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
literal|"badkey"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
literal|55556
operator|!=
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListMultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListMultimapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|Multimaps
operator|.
name|synchronizedListMultimap
argument_list|(
name|ArrayListMultimap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|create
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|multimap
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"synchronized ArrayListMultimap"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|MapFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|transformSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|PopulatableMapAsMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|PopulatableMapAsMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForGet
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.forMap.get"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|FOR_MAP_FEATURES_ONE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|SetMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForGet
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"badvalue"
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|55556
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
return|return
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|multimap
argument_list|,
name|FILTER_GET_PREDICATE
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.filterEntries.get"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_ORDER
argument_list|)
operator|.
name|suppressing
argument_list|(
name|CollectionIteratorTester
operator|.
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|PopulatableMapAsMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|PopulatableMapAsMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForKeySet
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|build
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.forMap.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|FOR_MAP_FEATURES_ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForKeySet
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"badkey"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|55556
argument_list|)
expr_stmt|;
return|return
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|multimap
argument_list|,
name|FILTER_KEYSET_PREDICATE
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.filterEntries.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|suppressing
argument_list|(
name|CollectionIteratorTester
operator|.
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringCollectionGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForValues
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"badvalue"
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|55556
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
return|return
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|multimap
argument_list|,
name|FILTER_GET_PREDICATE
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.filterEntries.values"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|suppressing
argument_list|(
name|CollectionIteratorTester
operator|.
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(user): use collection testers on Multimaps.forMap.values
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|PopulatableMapAsMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|PopulatableMapAsMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForKeys
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|build
argument_list|()
operator|.
name|keys
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.forMap.keys"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|FOR_MAP_FEATURES_ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getReadsDuplicateInitializingMethods
argument_list|()
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getSetCountDuplicateInitializingMethods
argument_list|()
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorDuplicateInitializingMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|populateMultimapForKeys
argument_list|(
name|multimap
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"badkey"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|55556
argument_list|)
expr_stmt|;
return|return
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|multimap
argument_list|,
name|FILTER_KEYSET_PREDICATE
argument_list|)
operator|.
name|keys
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.filterEntries.keys"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|COLLECTION_FEATURES_REMOVE_ORDER
argument_list|)
operator|.
name|suppressing
argument_list|(
name|CollectionIteratorTester
operator|.
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|suppressing
argument_list|(
name|MultisetWritesTester
operator|.
name|getEntrySetIteratorMethod
argument_list|()
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getIteratorDuplicateInitializingMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestEntriesGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"badkey"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|55556
argument_list|)
expr_stmt|;
return|return
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|multimap
argument_list|,
name|FILTER_KEYSET_PREDICATE
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimap.filterEntries.entries"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|suppressing
argument_list|(
name|CollectionIteratorTester
operator|.
name|getIteratorKnownOrderRemoveSupportedMethod
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: use collection testers on Multimaps.forMap.entries
return|return
name|suite
return|;
block|}
end_function

begin_class
DECL|class|TransformedMultimapGenerator
specifier|static
specifier|abstract
class|class
name|TransformedMultimapGenerator
parameter_list|<
name|M
extends|extends
name|Multimap
parameter_list|<
name|String
parameter_list|,
name|String
parameter_list|>
parameter_list|>
implements|implements
name|TestMultimapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|M
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|String
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|String
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|sampleKeys ()
specifier|public
name|SampleElements
argument_list|<
name|String
argument_list|>
name|sampleKeys
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|,
literal|"five"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sampleValues ()
specifier|public
name|SampleElements
argument_list|<
name|String
argument_list|>
name|sampleValues
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"january"
argument_list|,
literal|"february"
argument_list|,
literal|"march"
argument_list|,
literal|"april"
argument_list|,
literal|"may"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createCollection (Iterable<? extends String> values)
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|createCollection
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|mapEntry
argument_list|(
literal|"one"
argument_list|,
literal|"january"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"two"
argument_list|,
literal|"february"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"three"
argument_list|,
literal|"march"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"four"
argument_list|,
literal|"april"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"five"
argument_list|,
literal|"may"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|M
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|o
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Ascii
operator|.
name|toUpperCase
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|transform
argument_list|(
name|multimap
argument_list|)
return|;
block|}
DECL|method|transform (Multimap<String, String> multimap)
specifier|abstract
name|M
name|transform
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|)
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<String, String>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
DECL|field|FUNCTION
specifier|static
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ENTRY_TRANSFORMER
specifier|static
specifier|final
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|ENTRY_TRANSFORMER
init|=
operator|new
name|EntryTransformer
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|transformEntry
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|Ascii
operator|.
name|toLowerCase
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

begin_class
DECL|class|TransformedListMultimapGenerator
specifier|static
specifier|abstract
class|class
name|TransformedListMultimapGenerator
extends|extends
name|TransformedMultimapGenerator
argument_list|<
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
implements|implements
name|TestListMultimapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
block|{   }
end_class

begin_function
DECL|method|transformSuite ()
specifier|private
specifier|static
name|Test
name|transformSuite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"Multimaps.transform*"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TransformedMultimapGenerator
argument_list|<
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transform
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|)
block|{
return|return
name|Multimaps
operator|.
name|transformValues
argument_list|(
name|multimap
argument_list|,
name|FUNCTION
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.transformValues[Multimap]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TransformedMultimapGenerator
argument_list|<
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transform
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|)
block|{
return|return
name|Multimaps
operator|.
name|transformEntries
argument_list|(
name|multimap
argument_list|,
name|ENTRY_TRANSFORMER
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.transformEntries[Multimap]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListMultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TransformedListMultimapGenerator
argument_list|()
block|{
annotation|@
name|Override
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transform
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|)
block|{
return|return
name|Multimaps
operator|.
name|transformValues
argument_list|(
operator|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|multimap
argument_list|,
name|FUNCTION
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.transformValues[ListMultimap]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListMultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TransformedListMultimapGenerator
argument_list|()
block|{
annotation|@
name|Override
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transform
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
parameter_list|)
block|{
return|return
name|Multimaps
operator|.
name|transformEntries
argument_list|(
operator|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|multimap
argument_list|,
name|ENTRY_TRANSFORMER
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multimaps.transformEntries[ListMultimap]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
end_function

unit|}
end_unit

