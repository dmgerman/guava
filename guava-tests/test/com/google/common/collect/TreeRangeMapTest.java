begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests for {@code TreeRangeMap}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
comment|// NavigableMap
DECL|class|TreeRangeMapTest
specifier|public
class|class
name|TreeRangeMapTest
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeRangeMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|mapEntry
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"banana"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"frisbee"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|"fruitcake"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"elephant"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
argument_list|,
literal|"umbrella"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
operator|)
name|o
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Range
operator|.
name|RANGE_LEX_ORDERING
operator|.
expr|<
name|Range
argument_list|<
name|Integer
argument_list|>
operator|>
name|onKeys
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|Integer
argument_list|>
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Range
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeRangeMap.asMapOfRanges"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|mapEntry
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"banana"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"frisbee"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|"fruitcake"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"elephant"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
argument_list|,
literal|"umbrella"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
operator|)
name|o
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|22
argument_list|)
argument_list|)
operator|.
name|asMapOfRanges
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Range
operator|.
name|RANGE_LEX_ORDERING
operator|.
expr|<
name|Range
argument_list|<
name|Integer
argument_list|>
operator|>
name|onKeys
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|Integer
argument_list|>
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Range
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeRangeMap.subRangeMap.asMapOfRanges"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|mapEntry
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"banana"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"frisbee"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|"fruitcake"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"elephant"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
argument_list|,
literal|"umbrella"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
operator|)
name|o
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rangeMap
operator|.
name|asDescendingMapOfRanges
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Range
operator|.
name|RANGE_LEX_ORDERING
operator|.
name|reverse
argument_list|()
operator|.
operator|<
name|Range
argument_list|<
name|Integer
argument_list|>
operator|>
name|onKeys
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|Integer
argument_list|>
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Range
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeRangeMap.asDescendingMapOfRanges"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestMapGenerator
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|mapEntry
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"banana"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"frisbee"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|"fruitcake"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"elephant"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|20
argument_list|,
literal|22
argument_list|)
argument_list|,
literal|"umbrella"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
operator|)
name|o
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|22
argument_list|)
argument_list|)
operator|.
name|asDescendingMapOfRanges
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Range
operator|.
name|RANGE_LEX_ORDERING
operator|.
name|reverse
argument_list|()
operator|.
operator|<
name|Range
argument_list|<
name|Integer
argument_list|>
operator|>
name|onKeys
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Range
argument_list|<
name|Integer
argument_list|>
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Range
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeRangeMap.subRangeMap.asDescendingMapOfRanges"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|field|RANGES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|RANGES
decl_stmt|;
DECL|field|MIN_BOUND
specifier|private
specifier|static
specifier|final
name|int
name|MIN_BOUND
init|=
operator|-
literal|2
decl_stmt|;
DECL|field|MAX_BOUND
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BOUND
init|=
literal|2
decl_stmt|;
static|static
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one-ended ranges
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
init|;
name|i
operator|<=
name|MAX_BOUND
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|type
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|upTo
argument_list|(
name|i
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|downTo
argument_list|(
name|i
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add two-ended ranges
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
init|;
name|i
operator|<=
name|MAX_BOUND
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<=
name|MAX_BOUND
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|BoundType
name|lowerType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BoundType
name|upperType
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
operator|&
name|lowerType
operator|==
name|OPEN
operator|&
name|upperType
operator|==
name|OPEN
condition|)
block|{
continue|continue;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Range
operator|.
name|range
argument_list|(
name|i
argument_list|,
name|lowerType
argument_list|,
name|j
argument_list|,
name|upperType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|RANGES
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanSingleRange ()
specifier|public
name|void
name|testSpanSingleRange
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|RANGES
control|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|range
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|range
argument_list|,
name|rangeMap
operator|.
name|span
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSpanTwoRanges ()
specifier|public
name|void
name|testSpanTwoRanges
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Range
argument_list|<
name|Integer
argument_list|>
name|expected
decl_stmt|;
if|if
condition|(
name|range1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|range2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expected
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|range2
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|range2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expected
operator|=
name|range1
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|range1
operator|.
name|span
argument_list|(
name|range2
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|rangeMap
operator|.
name|span
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
name|assertNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testAllRangesAlone ()
specifier|public
name|void
name|testAllRangesAlone
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllRangePairs ()
specifier|public
name|void
name|testAllRangePairs
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAllRangeTriples ()
specifier|public
name|void
name|testAllRangeTriples
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range3
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testPutAll ()
specifier|public
name|void
name|testPutAll
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range3
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test2
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// put range2 and range3 into test2, and then put test2 into test
name|test
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test2
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|test2
operator|.
name|put
argument_list|(
name|range3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|putAll
argument_list|(
name|test2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testPutAndRemove ()
specifier|public
name|void
name|testPutAndRemove
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|rangeToPut
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|rangeToRemove
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|rangeToPut
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeModel
argument_list|(
name|model
argument_list|,
name|rangeToRemove
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|rangeToPut
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|rangeToRemove
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPutTwoAndRemove ()
specifier|public
name|void
name|testPutTwoAndRemove
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|rangeToPut1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|rangeToPut2
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|rangeToRemove
range|:
name|RANGES
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|rangeToPut1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putModel
argument_list|(
name|model
argument_list|,
name|rangeToPut2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|removeModel
argument_list|(
name|model
argument_list|,
name|rangeToRemove
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|rangeToPut1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|rangeToPut2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|rangeToRemove
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|model
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSubRangeMapExhaustive ()
specifier|public
name|void
name|testSubRangeMapExhaustive
parameter_list|()
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range1
range|:
name|RANGES
control|)
block|{
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range2
range|:
name|RANGES
control|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|range1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|range2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|subRange
range|:
name|RANGES
control|)
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|isConnected
argument_list|(
name|subRange
argument_list|)
condition|)
block|{
name|expected
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|intersection
argument_list|(
name|subRange
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|subRangeMap
init|=
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|subRange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|subRangeMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|asMapOfRanges
argument_list|()
argument_list|,
name|subRangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|asDescendingMapOfRanges
argument_list|()
argument_list|,
name|subRangeMap
operator|.
name|asDescendingMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|subRangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|reverse
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|subRangeMap
operator|.
name|asDescendingMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|span
argument_list|()
argument_list|,
name|subRangeMap
operator|.
name|span
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
init|;
name|i
operator|<=
name|MAX_BOUND
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|subRangeMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|query
range|:
name|RANGES
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|get
argument_list|(
name|query
argument_list|)
argument_list|,
name|subRangeMap
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|get
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testSubSubRangeMap ()
specifier|public
name|void
name|testSubSubRangeMap
parameter_list|()
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sub1
init|=
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub1
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sub2
init|=
name|sub1
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|15
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub2
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubRangeMapPut ()
specifier|public
name|void
name|testSubRangeMapPut
parameter_list|()
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sub
init|=
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|4
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|4
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|,
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sub
operator|.
name|put
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|9
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|sub
operator|=
name|sub
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|sub
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// should be a no-op
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|4
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|,
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubRangeMapRemove ()
specifier|public
name|void
name|testSubRangeMapRemove
parameter_list|()
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sub
init|=
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|remove
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|,
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|remove
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sub
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|,
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubRangeMapClear ()
specifier|public
name|void
name|testSubRangeMapClear
parameter_list|()
block|{
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rangeMap
init|=
name|TreeRangeMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sub
init|=
name|rangeMap
operator|.
name|subRangeMap
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|sub
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|,
name|rangeMap
operator|.
name|asMapOfRanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verify (Map<Integer, Integer> model, RangeMap<Integer, Integer> test)
specifier|private
name|void
name|verify
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
parameter_list|,
name|RangeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
operator|-
literal|1
init|;
name|i
operator|<=
name|MAX_BOUND
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|model
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|test
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
name|test
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
argument_list|,
name|entry
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|test
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|test
operator|.
name|asMapOfRanges
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putModel (Map<Integer, Integer> model, Range<Integer> range, int value)
specifier|private
specifier|static
name|void
name|putModel
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
parameter_list|,
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|,
name|int
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
operator|-
literal|1
init|;
name|i
operator|<=
name|MAX_BOUND
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeModel (Map<Integer, Integer> model, Range<Integer> range)
specifier|private
specifier|static
name|void
name|removeModel
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|model
parameter_list|,
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|MIN_BOUND
operator|-
literal|1
init|;
name|i
operator|<=
name|MAX_BOUND
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|model
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

