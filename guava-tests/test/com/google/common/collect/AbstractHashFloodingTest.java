begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2019 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntToDoubleFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Abstract superclass for tests that hash flooding a collection has controlled worst-case  * performance.  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractHashFloodingTest
specifier|public
specifier|abstract
class|class
name|AbstractHashFloodingTest
parameter_list|<
name|T
parameter_list|>
extends|extends
name|TestCase
block|{
DECL|field|constructions
specifier|private
specifier|final
name|List
argument_list|<
name|Construction
argument_list|<
name|T
argument_list|>
argument_list|>
name|constructions
decl_stmt|;
DECL|field|constructionAsymptotics
specifier|private
specifier|final
name|IntToDoubleFunction
name|constructionAsymptotics
decl_stmt|;
DECL|field|queries
specifier|private
specifier|final
name|List
argument_list|<
name|QueryOp
argument_list|<
name|T
argument_list|>
argument_list|>
name|queries
decl_stmt|;
DECL|method|AbstractHashFloodingTest ( List<Construction<T>> constructions, IntToDoubleFunction constructionAsymptotics, List<QueryOp<T>> queries)
name|AbstractHashFloodingTest
parameter_list|(
name|List
argument_list|<
name|Construction
argument_list|<
name|T
argument_list|>
argument_list|>
name|constructions
parameter_list|,
name|IntToDoubleFunction
name|constructionAsymptotics
parameter_list|,
name|List
argument_list|<
name|QueryOp
argument_list|<
name|T
argument_list|>
argument_list|>
name|queries
parameter_list|)
block|{
name|this
operator|.
name|constructions
operator|=
name|constructions
expr_stmt|;
name|this
operator|.
name|constructionAsymptotics
operator|=
name|constructionAsymptotics
expr_stmt|;
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
block|}
comment|/**    * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and    * compareTo.    */
DECL|class|CountsHashCodeAndEquals
specifier|private
specifier|static
class|class
name|CountsHashCodeAndEquals
implements|implements
name|Comparable
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
block|{
DECL|field|delegateString
specifier|private
specifier|final
name|String
name|delegateString
decl_stmt|;
DECL|field|onHashCode
specifier|private
specifier|final
name|Runnable
name|onHashCode
decl_stmt|;
DECL|field|onEquals
specifier|private
specifier|final
name|Runnable
name|onEquals
decl_stmt|;
DECL|field|onCompareTo
specifier|private
specifier|final
name|Runnable
name|onCompareTo
decl_stmt|;
DECL|method|CountsHashCodeAndEquals ( String delegateString, Runnable onHashCode, Runnable onEquals, Runnable onCompareTo)
name|CountsHashCodeAndEquals
parameter_list|(
name|String
name|delegateString
parameter_list|,
name|Runnable
name|onHashCode
parameter_list|,
name|Runnable
name|onEquals
parameter_list|,
name|Runnable
name|onCompareTo
parameter_list|)
block|{
name|this
operator|.
name|delegateString
operator|=
name|delegateString
expr_stmt|;
name|this
operator|.
name|onHashCode
operator|=
name|onHashCode
expr_stmt|;
name|this
operator|.
name|onEquals
operator|=
name|onEquals
expr_stmt|;
name|this
operator|.
name|onCompareTo
operator|=
name|onCompareTo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|onHashCode
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|delegateString
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|other
parameter_list|)
block|{
name|onEquals
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|other
operator|instanceof
name|CountsHashCodeAndEquals
operator|&&
name|delegateString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CountsHashCodeAndEquals
operator|)
name|other
operator|)
operator|.
name|delegateString
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (CountsHashCodeAndEquals o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|CountsHashCodeAndEquals
name|o
parameter_list|)
block|{
name|onCompareTo
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|delegateString
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|delegateString
argument_list|)
return|;
block|}
block|}
comment|/** A holder of counters for calls to hashCode, equals, and compareTo. */
DECL|class|CallsCounter
specifier|private
specifier|static
specifier|final
class|class
name|CallsCounter
block|{
DECL|field|hashCode
name|long
name|hashCode
decl_stmt|;
DECL|field|equals
name|long
name|equals
decl_stmt|;
DECL|field|compareTo
name|long
name|compareTo
decl_stmt|;
DECL|method|total ()
name|long
name|total
parameter_list|()
block|{
return|return
name|hashCode
operator|+
name|equals
operator|+
name|compareTo
return|;
block|}
DECL|method|zero ()
name|void
name|zero
parameter_list|()
block|{
name|hashCode
operator|=
literal|0
expr_stmt|;
name|equals
operator|=
literal|0
expr_stmt|;
name|compareTo
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|FunctionalInterface
DECL|interface|Construction
interface|interface
name|Construction
parameter_list|<
name|T
parameter_list|>
block|{
annotation|@
name|CanIgnoreReturnValue
DECL|method|create (List<?> keys)
specifier|abstract
name|T
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|keys
parameter_list|)
function_decl|;
DECL|method|mapFromKeys ( Supplier<Map<Object, Object>> mutableSupplier)
specifier|static
name|Construction
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapFromKeys
parameter_list|(
name|Supplier
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mutableSupplier
parameter_list|)
block|{
return|return
name|keys
lambda|->
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|mutableSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keys
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
return|;
block|}
block|}
DECL|class|QueryOp
specifier|abstract
specifier|static
class|class
name|QueryOp
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|create ( String name, BiConsumer<T, Object> queryLambda, IntToDoubleFunction asymptotic)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|QueryOp
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|BiConsumer
argument_list|<
name|T
argument_list|,
name|Object
argument_list|>
name|queryLambda
parameter_list|,
name|IntToDoubleFunction
name|asymptotic
parameter_list|)
block|{
return|return
operator|new
name|QueryOp
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|T
name|collection
parameter_list|,
name|Object
name|query
parameter_list|)
block|{
name|queryLambda
operator|.
name|accept
argument_list|(
name|collection
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|double
name|expectedAsymptotic
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|asymptotic
operator|.
name|applyAsDouble
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
return|;
block|}
DECL|field|MAP_GET
specifier|static
specifier|final
name|QueryOp
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|MAP_GET
init|=
name|QueryOp
operator|.
name|create
argument_list|(
literal|"Map.get"
argument_list|,
name|Map
operator|::
name|get
argument_list|,
name|Math
operator|::
name|log
argument_list|)
decl_stmt|;
DECL|method|apply (T collection, Object query)
specifier|abstract
name|void
name|apply
parameter_list|(
name|T
name|collection
parameter_list|,
name|Object
name|query
parameter_list|)
function_decl|;
DECL|method|expectedAsymptotic (int n)
specifier|abstract
name|double
name|expectedAsymptotic
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
block|}
comment|/**    * Returns a list of objects with the same hash code, of size 2^power, counting calls to equals,    * hashCode, and compareTo in counter.    */
DECL|method|createAdversarialInput (int power, CallsCounter counter)
specifier|static
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|createAdversarialInput
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|String
name|str1
init|=
literal|"Aa"
decl_stmt|;
name|String
name|str2
init|=
literal|"BB"
decl_stmt|;
name|assertEquals
argument_list|(
name|str1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|str2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|haveSameHashes2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|power
argument_list|,
name|haveSameHashes2
argument_list|)
argument_list|)
argument_list|,
name|strs
lambda|->
operator|new
name|CountsHashCodeAndEquals
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|strs
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|hashCode
operator|++
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|equals
operator|++
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|compareTo
operator|++
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|delegateString
operator|.
name|hashCode
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|delegateString
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingInConstruction ()
specifier|public
name|void
name|testResistsHashFloodingInConstruction
parameter_list|()
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesSmall
init|=
name|createAdversarialInput
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|int
name|smallSize
init|=
name|haveSameHashesSmall
operator|.
name|size
argument_list|()
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesLarge
init|=
name|createAdversarialInput
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|int
name|largeSize
init|=
name|haveSameHashesLarge
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Construction
argument_list|<
name|T
argument_list|>
name|pathway
range|:
name|constructions
control|)
block|{
name|smallCounter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|pathway
operator|.
name|create
argument_list|(
name|haveSameHashesSmall
argument_list|)
expr_stmt|;
name|long
name|smallOps
init|=
name|smallCounter
operator|.
name|total
argument_list|()
decl_stmt|;
name|largeCounter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|pathway
operator|.
name|create
argument_list|(
name|haveSameHashesLarge
argument_list|)
expr_stmt|;
name|long
name|largeOps
init|=
name|largeCounter
operator|.
name|total
argument_list|()
decl_stmt|;
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|largeOps
operator|/
name|smallOps
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"ratio of equals/hashCode/compareTo operations to build with %s entries versus %s"
operator|+
literal|" entries"
argument_list|,
name|largeSize
argument_list|,
name|smallSize
argument_list|)
operator|.
name|that
argument_list|(
name|ratio
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2
operator|*
name|constructionAsymptotics
operator|.
name|applyAsDouble
argument_list|(
name|largeSize
argument_list|)
operator|/
name|constructionAsymptotics
operator|.
name|applyAsDouble
argument_list|(
name|smallSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow up to 2x wobble in the constant factors
block|}
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingOnQuery ()
specifier|public
name|void
name|testResistsHashFloodingOnQuery
parameter_list|()
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesSmall
init|=
name|createAdversarialInput
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|int
name|smallSize
init|=
name|haveSameHashesSmall
operator|.
name|size
argument_list|()
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesLarge
init|=
name|createAdversarialInput
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|int
name|largeSize
init|=
name|haveSameHashesLarge
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryOp
argument_list|<
name|T
argument_list|>
name|query
range|:
name|queries
control|)
block|{
for|for
control|(
name|Construction
argument_list|<
name|T
argument_list|>
name|pathway
range|:
name|constructions
control|)
block|{
name|long
name|worstSmallOps
init|=
name|getWorstCaseOps
argument_list|(
name|smallCounter
argument_list|,
name|haveSameHashesSmall
argument_list|,
name|query
argument_list|,
name|pathway
argument_list|)
decl_stmt|;
name|long
name|worstLargeOps
init|=
name|getWorstCaseOps
argument_list|(
name|largeCounter
argument_list|,
name|haveSameHashesLarge
argument_list|,
name|query
argument_list|,
name|pathway
argument_list|)
decl_stmt|;
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|worstLargeOps
operator|/
name|worstSmallOps
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"ratio of equals/hashCode/compareTo operations to query %s with %s entries versus"
operator|+
literal|" %s entries"
argument_list|,
name|query
argument_list|,
name|largeSize
argument_list|,
name|smallSize
argument_list|)
operator|.
name|that
argument_list|(
name|ratio
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2
operator|*
name|query
operator|.
name|expectedAsymptotic
argument_list|(
name|largeSize
argument_list|)
operator|/
name|query
operator|.
name|expectedAsymptotic
argument_list|(
name|smallSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow up to 2x wobble in the constant factors
block|}
block|}
block|}
DECL|method|getWorstCaseOps ( CallsCounter counter, List<CountsHashCodeAndEquals> haveSameHashes, QueryOp<T> query, Construction<T> pathway)
specifier|private
name|long
name|getWorstCaseOps
parameter_list|(
name|CallsCounter
name|counter
parameter_list|,
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashes
parameter_list|,
name|QueryOp
argument_list|<
name|T
argument_list|>
name|query
parameter_list|,
name|Construction
argument_list|<
name|T
argument_list|>
name|pathway
parameter_list|)
block|{
name|T
name|collection
init|=
name|pathway
operator|.
name|create
argument_list|(
name|haveSameHashes
argument_list|)
decl_stmt|;
name|long
name|worstOps
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|haveSameHashes
control|)
block|{
name|counter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|query
operator|.
name|apply
argument_list|(
name|collection
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|worstOps
operator|=
name|Math
operator|.
name|max
argument_list|(
name|worstOps
argument_list|,
name|counter
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|worstOps
return|;
block|}
block|}
end_class

end_unit

