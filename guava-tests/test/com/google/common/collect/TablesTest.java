begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Tables}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TablesTest
specifier|public
class|class
name|TablesTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testImmutableEntrySerialization ()
specifier|public
name|void
name|testImmutableEntrySerialization
parameter_list|()
block|{
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|entry
init|=
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|testImmutableEntryToString ()
specifier|public
name|void
name|testImmutableEntryToString
parameter_list|()
block|{
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|entry
init|=
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(foo,1)=a"
argument_list|,
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|nullEntry
init|=
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(null,null)=null"
argument_list|,
name|nullEntry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntryEquals ()
specifier|public
name|void
name|testEntryEquals
parameter_list|()
block|{
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|entry
init|=
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|entry
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|,
literal|'a'
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testEntryEqualsNull ()
specifier|public
name|void
name|testEntryEqualsNull
parameter_list|()
block|{
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|entry
init|=
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|entry
argument_list|,
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|'b'
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

