begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|CollectPreconditions
operator|.
name|checkRemove
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|advance
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|get
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|getLast
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|MODIFIABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|UNMODIFIABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * Unit test for {@code Iterators}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|IteratorsTest
specifier|public
class|class
name|IteratorsTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
annotation|@
name|SuppressUnderAndroid
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|IteratorsTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForRemoveAllAndRetainAll
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|IteratorsTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testEmptyIterator ()
specifier|public
name|void
name|testEmptyIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEmptyListIterator ()
specifier|public
name|void
name|testEmptyListIterator
parameter_list|()
block|{
name|ListIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyListIterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|iterator
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|iterator
operator|.
name|previousIndex
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iterator
operator|.
name|previous
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iterator
operator|.
name|set
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iterator
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEmptyModifiableIterator ()
specifier|public
name|void
name|testEmptyModifiableIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyModifiableIterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testSize0 ()
specifier|public
name|void
name|testSize0
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize1 ()
specifier|public
name|void
name|testSize1
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize_partiallyConsumed ()
specifier|public
name|void
name|testSize_partiallyConsumed
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_yes ()
specifier|public
name|void
name|test_contains_nonnull_yes
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|set
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_no ()
specifier|public
name|void
name|test_contains_nonnull_no
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|set
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_null_yes ()
specifier|public
name|void
name|test_contains_null_yes
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|set
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_null_no ()
specifier|public
name|void
name|test_contains_null_no
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|set
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_valid ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_valid
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_empty ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetOnlyElement_noDefault_moreThanOneLessThanFiveElements ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_moreThanOneLessThanFiveElements
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected one element but was:<one, two>"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetOnlyElement_noDefault_fiveElements ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_fiveElements
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|,
literal|"five"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected one element but was: "
operator|+
literal|"<one, two, three, four, five>"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetOnlyElement_noDefault_moreThanFiveElements ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_moreThanFiveElements
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|,
literal|"four"
argument_list|,
literal|"five"
argument_list|,
literal|"six"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected one element but was: "
operator|+
literal|"<one, two, three, four, five, ...>"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetOnlyElement_withDefault_singleton ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_singleton
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_empty ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_empty_null ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_empty_null
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_two ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_two
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|iterator
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected one element but was:<foo, bar>"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterators.toArray(Iterator, Class)"
argument_list|)
DECL|method|testToArrayEmpty ()
specifier|public
name|void
name|testToArrayEmpty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
index|[]
name|array
init|=
name|Iterators
operator|.
name|toArray
argument_list|(
name|iterator
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterators.toArray(Iterator, Class)"
argument_list|)
DECL|method|testToArraySingleton ()
specifier|public
name|void
name|testToArraySingleton
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
index|[]
name|array
init|=
name|Iterators
operator|.
name|toArray
argument_list|(
name|iterator
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterators.toArray(Iterator, Class)"
argument_list|)
DECL|method|testToArray ()
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
name|String
index|[]
name|sourceArray
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
name|sourceArray
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
index|[]
name|newArray
init|=
name|Iterators
operator|.
name|toArray
argument_list|(
name|iterator
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|sourceArray
argument_list|,
name|newArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterSimple ()
specifier|public
name|void
name|testFilterSimple
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterNoMatch ()
specifier|public
name|void
name|testFilterNoMatch
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterMatchAll ()
specifier|public
name|void
name|testFilterMatchAll
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterNothing ()
specifier|public
name|void
name|testFilterNothing
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|unfiltered
init|=
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|filtered
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|unfiltered
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Should never be evaluated"
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonably slow"
argument_list|)
DECL|method|testFilterUsingIteratorTester ()
specifier|public
name|void
name|testFilterUsingIteratorTester
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|isEven
init|=
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|integer
parameter_list|)
block|{
return|return
name|integer
operator|%
literal|2
operator|==
literal|0
return|;
block|}
block|}
decl_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|isEven
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testAny ()
specifier|public
name|void
name|testAny
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|any
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"cool"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|any
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"pants"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|any
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll ()
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|all
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"cool"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|all
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"pants"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|all
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_firstElement ()
specifier|public
name|void
name|testFind_firstElement
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_lastElement ()
specifier|public
name|void
name|testFind_lastElement
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_notPresent ()
specifier|public
name|void
name|testFind_notPresent
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_matchAlways ()
specifier|public
name|void
name|testFind_matchAlways
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_withDefault_first ()
specifier|public
name|void
name|testFind_withDefault_first
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_withDefault_last ()
specifier|public
name|void
name|testFind_withDefault_last
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_withDefault_notPresent ()
specifier|public
name|void
name|testFind_withDefault_notPresent
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"woot"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_withDefault_notPresent_nullReturn ()
specifier|public
name|void
name|testFind_withDefault_notPresent_nullReturn
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_withDefault_matchAlways ()
specifier|public
name|void
name|testFind_withDefault_matchAlways
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterators
operator|.
name|find
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryFind_firstElement ()
specifier|public
name|void
name|testTryFind_firstElement
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterators
operator|.
name|tryFind
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryFind_lastElement ()
specifier|public
name|void
name|testTryFind_lastElement
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|Iterators
operator|.
name|tryFind
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryFind_alwaysTrue ()
specifier|public
name|void
name|testTryFind_alwaysTrue
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterators
operator|.
name|tryFind
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryFind_alwaysFalse_orDefault ()
specifier|public
name|void
name|testTryFind_alwaysFalse_orDefault
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"woot"
argument_list|,
name|Iterators
operator|.
name|tryFind
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
operator|.
name|or
argument_list|(
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryFind_alwaysFalse_isPresent ()
specifier|public
name|void
name|testTryFind_alwaysFalse_isPresent
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|tryFind
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransform ()
specifier|public
name|void
name|testTransform
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|input
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformRemove ()
specifier|public
name|void
name|testTransformRemove
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|input
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testPoorlyBehavedTransform ()
specifier|public
name|void
name|testPoorlyBehavedTransform
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|input
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|"3"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NFE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// Expected to fail.
block|}
block|}
DECL|method|testNullFriendlyTransform ()
specifier|public
name|void
name|testNullFriendlyTransform
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Iterators
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|from
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"null"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testCycleOfEmpty ()
specifier|public
name|void
name|testCycleOfEmpty
parameter_list|()
block|{
comment|// "<String>" for javac 1.5.
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
expr|<
name|String
operator|>
name|cycle
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCycleOfOne ()
specifier|public
name|void
name|testCycleOfOne
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCycleOfOneWithRemove ()
specifier|public
name|void
name|testCycleOfOneWithRemove
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCycleOfTwo ()
specifier|public
name|void
name|testCycleOfTwo
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCycleOfTwoWithRemove ()
specifier|public
name|void
name|testCycleOfTwoWithRemove
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCycleRemoveWithoutNext ()
specifier|public
name|void
name|testCycleRemoveWithoutNext
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCycleRemoveSameElementTwice ()
specifier|public
name|void
name|testCycleRemoveSameElementTwice
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|cycle
operator|.
name|next
argument_list|()
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCycleWhenRemoveIsNotSupported ()
specifier|public
name|void
name|testCycleWhenRemoveIsNotSupported
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|cycle
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCycleRemoveAfterHasNext ()
specifier|public
name|void
name|testCycleRemoveAfterHasNext
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** An Iterable whose Iterator is rigorous in checking for concurrent modification. */
DECL|class|PickyIterable
specifier|private
specifier|static
specifier|final
class|class
name|PickyIterable
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|E
argument_list|>
block|{
DECL|field|elements
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|elements
decl_stmt|;
DECL|field|modCount
name|int
name|modCount
init|=
literal|0
decl_stmt|;
DECL|method|PickyIterable (E... elements)
name|PickyIterable
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|this
operator|.
name|elements
operator|=
operator|new
name|ArrayList
argument_list|<
name|E
argument_list|>
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|PickyIterator
argument_list|()
return|;
block|}
DECL|class|PickyIterator
specifier|final
class|class
name|PickyIterator
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|expectedModCount
name|int
name|expectedModCount
init|=
name|modCount
decl_stmt|;
DECL|field|index
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|canRemove
name|boolean
name|canRemove
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|checkConcurrentModification
argument_list|()
expr_stmt|;
return|return
name|index
operator|<
name|elements
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|E
name|next
parameter_list|()
block|{
name|checkConcurrentModification
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|canRemove
operator|=
literal|true
expr_stmt|;
return|return
name|elements
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkConcurrentModification
argument_list|()
expr_stmt|;
name|checkRemove
argument_list|(
name|canRemove
argument_list|)
expr_stmt|;
name|elements
operator|.
name|remove
argument_list|(
operator|--
name|index
argument_list|)
expr_stmt|;
name|expectedModCount
operator|=
operator|++
name|modCount
expr_stmt|;
name|canRemove
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|checkConcurrentModification ()
name|void
name|checkConcurrentModification
parameter_list|()
block|{
if|if
condition|(
name|expectedModCount
operator|!=
name|modCount
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
DECL|method|testCycleRemoveAfterHasNextExtraPicky ()
specifier|public
name|void
name|testCycleRemoveAfterHasNextExtraPicky
parameter_list|()
block|{
name|PickyIterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
operator|new
name|PickyIterable
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|iterable
operator|.
name|elements
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCycleNoSuchElementException ()
specifier|public
name|void
name|testCycleNoSuchElementException
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterators
operator|.
name|cycle
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|cycle
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cycle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|cycle
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cycle
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonably slow"
argument_list|)
DECL|method|testCycleUsingIteratorTester ()
specifier|public
name|void
name|testCycleUsingIteratorTester
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|cycle
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~5s)"
argument_list|)
DECL|method|testConcatNoIteratorsYieldsEmpty ()
specifier|public
name|void
name|testConcatNoIteratorsYieldsEmpty
parameter_list|()
block|{
operator|new
name|EmptyIteratorTester
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~5s)"
argument_list|)
DECL|method|testConcatOneEmptyIteratorYieldsEmpty ()
specifier|public
name|void
name|testConcatOneEmptyIteratorYieldsEmpty
parameter_list|()
block|{
operator|new
name|EmptyIteratorTester
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~5s)"
argument_list|)
DECL|method|testConcatMultipleEmptyIteratorsYieldsEmpty ()
specifier|public
name|void
name|testConcatMultipleEmptyIteratorsYieldsEmpty
parameter_list|()
block|{
operator|new
name|EmptyIteratorTester
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|()
argument_list|,
name|iterateOver
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~3s)"
argument_list|)
DECL|method|testConcatSingletonYieldsSingleton ()
specifier|public
name|void
name|testConcatSingletonYieldsSingleton
parameter_list|()
block|{
operator|new
name|SingletonIteratorTester
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~5s)"
argument_list|)
DECL|method|testConcatEmptyAndSingletonAndEmptyYieldsSingleton ()
specifier|public
name|void
name|testConcatEmptyAndSingletonAndEmptyYieldsSingleton
parameter_list|()
block|{
operator|new
name|SingletonIteratorTester
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|()
argument_list|,
name|iterateOver
argument_list|(
literal|1
argument_list|)
argument_list|,
name|iterateOver
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"fairly slow (~40s)"
argument_list|)
DECL|method|testConcatSingletonAndSingletonYieldsDoubleton ()
specifier|public
name|void
name|testConcatSingletonAndSingletonYieldsDoubleton
parameter_list|()
block|{
operator|new
name|DoubletonIteratorTester
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|(
literal|1
argument_list|)
argument_list|,
name|iterateOver
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"fairly slow (~40s)"
argument_list|)
DECL|method|testConcatSingletonAndSingletonWithEmptiesYieldsDoubleton ()
specifier|public
name|void
name|testConcatSingletonAndSingletonWithEmptiesYieldsDoubleton
parameter_list|()
block|{
operator|new
name|DoubletonIteratorTester
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|(
literal|1
argument_list|)
argument_list|,
name|iterateOver
argument_list|()
argument_list|,
name|iterateOver
argument_list|()
argument_list|,
name|iterateOver
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"fairly slow (~50s)"
argument_list|)
DECL|method|testConcatUnmodifiable ()
specifier|public
name|void
name|testConcatUnmodifiable
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|Arrays
operator|.
expr|<
name|Integer
operator|>
name|asList
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
comment|/**    * Illustrates the somewhat bizarre behavior when a null is passed in.    */
DECL|method|testConcatContainingNull ()
specifier|public
name|void
name|testConcatContainingNull
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|input
init|=
name|asList
argument_list|(
name|iterateOver
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
name|iterateOver
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|result
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|.
name|hasNext
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
comment|// There is no way to get "through" to the 3.  Buh-bye
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testConcatVarArgsContainingNull ()
specifier|public
name|void
name|testConcatVarArgsContainingNull
parameter_list|()
block|{
try|try
block|{
name|Iterators
operator|.
name|concat
argument_list|(
name|iterateOver
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
name|iterateOver
argument_list|(
literal|3
argument_list|)
argument_list|,
name|iterateOver
argument_list|(
literal|4
argument_list|)
argument_list|,
name|iterateOver
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|testAddAllWithEmptyIterator ()
specifier|public
name|void
name|testAddAllWithEmptyIterator
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|alreadyThere
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|Iterators
operator|.
name|addAll
argument_list|(
name|alreadyThere
argument_list|,
name|Iterators
operator|.
expr|<
name|String
operator|>
name|emptyIterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|alreadyThere
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|changed
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAllToList ()
specifier|public
name|void
name|testAddAllToList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|alreadyThere
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|freshlyAdded
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"freshly"
argument_list|,
literal|"added"
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|Iterators
operator|.
name|addAll
argument_list|(
name|alreadyThere
argument_list|,
name|freshlyAdded
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|alreadyThere
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|,
literal|"freshly"
argument_list|,
literal|"added"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changed
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAllToSet ()
specifier|public
name|void
name|testAddAllToSet
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|alreadyThere
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oneMore
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"there"
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|Iterators
operator|.
name|addAll
argument_list|(
name|alreadyThere
argument_list|,
name|oneMore
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|alreadyThere
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|changed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Iterators
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Only used by @GwtIncompatible code"
argument_list|)
DECL|class|EmptyIteratorTester
specifier|private
specifier|static
specifier|abstract
class|class
name|EmptyIteratorTester
extends|extends
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
block|{
DECL|method|EmptyIteratorTester ()
specifier|protected
name|EmptyIteratorTester
parameter_list|()
block|{
name|super
argument_list|(
literal|3
argument_list|,
name|MODIFIABLE
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptySet
argument_list|()
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Only used by @GwtIncompatible code"
argument_list|)
DECL|class|SingletonIteratorTester
specifier|private
specifier|static
specifier|abstract
class|class
name|SingletonIteratorTester
extends|extends
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
block|{
DECL|method|SingletonIteratorTester ()
specifier|protected
name|SingletonIteratorTester
parameter_list|()
block|{
name|super
argument_list|(
literal|3
argument_list|,
name|MODIFIABLE
argument_list|,
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Only used by @GwtIncompatible code"
argument_list|)
DECL|class|DoubletonIteratorTester
specifier|private
specifier|static
specifier|abstract
class|class
name|DoubletonIteratorTester
extends|extends
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
block|{
DECL|method|DoubletonIteratorTester ()
specifier|protected
name|DoubletonIteratorTester
parameter_list|()
block|{
name|super
argument_list|(
literal|5
argument_list|,
name|MODIFIABLE
argument_list|,
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|iterateOver (final Integer... values)
specifier|private
specifier|static
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterateOver
parameter_list|(
specifier|final
name|Integer
modifier|...
name|values
parameter_list|)
block|{
return|return
name|newArrayList
argument_list|(
name|values
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|testElementsEqual ()
specifier|public
name|void
name|testElementsEqual
parameter_list|()
block|{
name|Iterable
argument_list|<
name|?
argument_list|>
name|a
decl_stmt|;
name|Iterable
argument_list|<
name|?
argument_list|>
name|b
decl_stmt|;
comment|// Base case.
name|a
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|b
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// A few elements.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// The same, but with nulls.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different Iterable types (still equal elements, though).
name|a
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// An element differs.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|12
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// null versus non-null.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|null
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|b
operator|.
name|iterator
argument_list|()
argument_list|,
name|a
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different lengths.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|b
operator|.
name|iterator
argument_list|()
argument_list|,
name|a
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different lengths, one is empty.
name|a
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
argument_list|,
name|b
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|elementsEqual
argument_list|(
name|b
operator|.
name|iterator
argument_list|()
argument_list|,
name|a
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_badSize ()
specifier|public
name|void
name|testPartition_badSize
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPartition_empty ()
specifier|public
name|void
name|testPartition_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_singleton1 ()
specifier|public
name|void
name|testPartition_singleton1
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_singleton2 ()
specifier|public
name|void
name|testPartition_singleton2
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"fairly slow (~50s)"
argument_list|)
DECL|method|testPartition_general ()
specifier|public
name|void
name|testPartition_general
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
literal|5
argument_list|,
name|IteratorFeature
operator|.
name|UNMODIFIABLE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|3
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_view ()
specifier|public
name|void
name|testPartition_view
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Changes before the partition is retrieved are reflected
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|first
init|=
name|partitions
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Changes after are not
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"?"
argument_list|)
comment|// TODO: Figure out why this is failing in GWT.
DECL|method|testPartitionRandomAccess ()
specifier|public
name|void
name|testPartitionRandomAccess
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartition_badSize ()
specifier|public
name|void
name|testPaddedPartition_badSize
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPaddedPartition_empty ()
specifier|public
name|void
name|testPaddedPartition_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartition_singleton1 ()
specifier|public
name|void
name|testPaddedPartition_singleton1
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartition_singleton2 ()
specifier|public
name|void
name|testPaddedPartition_singleton2
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|,
name|partitions
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partitions
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"fairly slow (~50s)"
argument_list|)
DECL|method|testPaddedPartition_general ()
specifier|public
name|void
name|testPaddedPartition_general
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
literal|5
argument_list|,
name|IteratorFeature
operator|.
name|UNMODIFIABLE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|7
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|3
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testPaddedPartition_view ()
specifier|public
name|void
name|testPaddedPartition_view
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Changes before the PaddedPartition is retrieved are reflected
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|first
init|=
name|partitions
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Changes after are not
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartitionRandomAccess ()
specifier|public
name|void
name|testPaddedPartitionRandomAccess
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partitions
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testForArrayEmpty ()
specifier|public
name|void
name|testForArrayEmpty
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testForArrayTypical ()
specifier|public
name|void
name|testForArrayTypical
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testForArrayOffset ()
specifier|public
name|void
name|testForArrayOffset
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"cat"
block|,
literal|"dog"
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testForArrayLength0 ()
specifier|public
name|void
name|testForArrayLength0
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Iterators
operator|.
name|forArray
argument_list|(
name|array
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonably slow"
argument_list|)
DECL|method|testForArrayUsingTester ()
specifier|public
name|void
name|testForArrayUsingTester
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|6
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonably slow"
argument_list|)
DECL|method|testForArrayWithOffsetUsingTester ()
specifier|public
name|void
name|testForArrayWithOffsetUsingTester
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|6
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testForEnumerationEmpty ()
specifier|public
name|void
name|testForEnumerationEmpty
parameter_list|()
block|{
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumer
init|=
name|enumerate
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|Iterators
operator|.
name|forEnumeration
argument_list|(
name|enumer
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testForEnumerationSingleton ()
specifier|public
name|void
name|testForEnumerationSingleton
parameter_list|()
block|{
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumer
init|=
name|enumerate
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|Iterators
operator|.
name|forEnumeration
argument_list|(
name|enumer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testForEnumerationTypical ()
specifier|public
name|void
name|testForEnumerationTypical
parameter_list|()
block|{
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumer
init|=
name|enumerate
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|Iterators
operator|.
name|forEnumeration
argument_list|(
name|enumer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsEnumerationEmpty ()
specifier|public
name|void
name|testAsEnumerationEmpty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumer
init|=
name|Iterators
operator|.
name|asEnumeration
argument_list|(
name|iter
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|enumer
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAsEnumerationSingleton ()
specifier|public
name|void
name|testAsEnumerationSingleton
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumer
init|=
name|Iterators
operator|.
name|asEnumeration
argument_list|(
name|iter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|enumer
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|enumer
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAsEnumerationTypical ()
specifier|public
name|void
name|testAsEnumerationTypical
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumer
init|=
name|Iterators
operator|.
name|asEnumeration
argument_list|(
name|iter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|enumer
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|enumer
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|enumer
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|enumer
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|enumerate (Integer... ints)
specifier|private
specifier|static
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|enumerate
parameter_list|(
name|Integer
modifier|...
name|ints
parameter_list|)
block|{
name|Vector
argument_list|<
name|Integer
argument_list|>
name|vector
init|=
operator|new
name|Vector
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|vector
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|ints
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|vector
operator|.
name|elements
argument_list|()
return|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"yam"
argument_list|,
literal|"bam"
argument_list|,
literal|"jam"
argument_list|,
literal|"ham"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[yam, bam, jam, ham]"
argument_list|,
name|Iterators
operator|.
name|toString
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToStringWithNull ()
specifier|public
name|void
name|testToStringWithNull
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"hello"
argument_list|,
literal|null
argument_list|,
literal|"world"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[hello, null, world]"
argument_list|,
name|Iterators
operator|.
name|toString
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToStringEmptyIterator ()
specifier|public
name|void
name|testToStringEmptyIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|Iterators
operator|.
name|toString
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit ()
specifier|public
name|void
name|testLimit
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"cool"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"pants"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"cool"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimitRemove ()
specifier|public
name|void
name|testLimitRemove
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"cool"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"pants"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|limit
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"fairly slow (~30s)"
argument_list|)
DECL|method|testLimitUsingIteratorTester ()
specifier|public
name|void
name|testLimitUsingIteratorTester
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|5
argument_list|,
name|MODIFIABLE
argument_list|,
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|limit
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|list
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
literal|3
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetNext_withDefault_singleton ()
specifier|public
name|void
name|testGetNext_withDefault_singleton
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterators
operator|.
name|getNext
argument_list|(
name|iterator
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetNext_withDefault_empty ()
specifier|public
name|void
name|testGetNext_withDefault_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterators
operator|.
name|getNext
argument_list|(
name|iterator
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetNext_withDefault_empty_null ()
specifier|public
name|void
name|testGetNext_withDefault_empty_null
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterators
operator|.
name|getNext
argument_list|(
name|iterator
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetNext_withDefault_two ()
specifier|public
name|void
name|testGetNext_withDefault_two
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterators
operator|.
name|getNext
argument_list|(
name|iterator
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_basic ()
specifier|public
name|void
name|testGetLast_basic
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|getLast
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_exception ()
specifier|public
name|void
name|testGetLast_exception
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|getLast
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetLast_withDefault_singleton ()
specifier|public
name|void
name|testGetLast_withDefault_singleton
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterators
operator|.
name|getLast
argument_list|(
name|iterator
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_empty ()
specifier|public
name|void
name|testGetLast_withDefault_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterators
operator|.
name|getLast
argument_list|(
name|iterator
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_empty_null ()
specifier|public
name|void
name|testGetLast_withDefault_empty_null
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterators
operator|.
name|getLast
argument_list|(
name|iterator
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_two ()
specifier|public
name|void
name|testGetLast_withDefault_two
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterators
operator|.
name|getLast
argument_list|(
name|iterator
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_basic ()
specifier|public
name|void
name|testGet_basic
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|get
argument_list|(
name|iterator
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_atSize ()
specifier|public
name|void
name|testGet_atSize
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|get
argument_list|(
name|iterator
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_pastEnd ()
specifier|public
name|void
name|testGet_pastEnd
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|get
argument_list|(
name|iterator
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_empty ()
specifier|public
name|void
name|testGet_empty
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|get
argument_list|(
name|iterator
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_negativeIndex ()
specifier|public
name|void
name|testGet_negativeIndex
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|get
argument_list|(
name|iterator
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testGet_withDefault_basic ()
specifier|public
name|void
name|testGet_withDefault_basic
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|get
argument_list|(
name|iterator
argument_list|,
literal|0
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_atSize ()
specifier|public
name|void
name|testGet_withDefault_atSize
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|get
argument_list|(
name|iterator
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_pastEnd ()
specifier|public
name|void
name|testGet_withDefault_pastEnd
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|get
argument_list|(
name|iterator
argument_list|,
literal|3
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_negativeIndex ()
specifier|public
name|void
name|testGet_withDefault_negativeIndex
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|get
argument_list|(
name|iterator
argument_list|,
operator|-
literal|1
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
comment|// pass
block|}
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdvance_basic ()
specifier|public
name|void
name|testAdvance_basic
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|advance
argument_list|(
name|iterator
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdvance_pastEnd ()
specifier|public
name|void
name|testAdvance_pastEnd
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|advance
argument_list|(
name|iterator
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAdvance_illegalArgument ()
specifier|public
name|void
name|testAdvance_illegalArgument
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|advance
argument_list|(
name|iterator
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testFrequency ()
specifier|public
name|void
name|testFrequency
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterators
operator|.
name|frequency
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|frequency
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|frequency
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|frequency
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|4.2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterators
operator|.
name|frequency
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~4s)"
argument_list|)
DECL|method|testSingletonIterator ()
specifier|public
name|void
name|testSingletonIterator
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|3
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveAll ()
specifier|public
name|void
name|testRemoveAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|removeAll
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|removeAll
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveIf ()
specifier|public
name|void
name|testRemoveIf
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|removeIf
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|removeIf
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
literal|"x"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"y"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"z"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetainAll ()
specifier|public
name|void
name|testRetainAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|retainAll
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|retainAll
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"e"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ListTestSuiteBuilder"
argument_list|)
annotation|@
name|SuppressUnderAndroid
DECL|method|testsForRemoveAllAndRetainAll ()
specifier|private
specifier|static
name|Test
name|testsForRemoveAllAndRetainAll
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
specifier|final
name|String
index|[]
name|elements
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|delegate
init|=
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
operator|new
name|ForwardingList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|removeAll
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|retainAll
argument_list|(
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayList with Iterators.removeAll and retainAll"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testConsumingIterator ()
specifier|public
name|void
name|testConsumingIterator
parameter_list|()
block|{
comment|// Test data
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
comment|// Test& Verify
name|Iterator
argument_list|<
name|String
argument_list|>
name|consumingIterator
init|=
name|Iterators
operator|.
name|consumingIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Iterators.consumingIterator(...)"
argument_list|,
name|consumingIterator
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|consumingIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|consumingIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"?"
argument_list|)
comment|// TODO: Figure out why this is failing in GWT.
DECL|method|testConsumingIterator_duelingIterators ()
specifier|public
name|void
name|testConsumingIterator_duelingIterators
parameter_list|()
block|{
comment|// Test data
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
comment|// Test& Verify
name|Iterator
argument_list|<
name|String
argument_list|>
name|i1
init|=
name|Iterators
operator|.
name|consumingIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|i2
init|=
name|Iterators
operator|.
name|consumingIterator
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|i1
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|i2
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Concurrent modification should throw an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|cme
parameter_list|)
block|{
comment|// Pass
block|}
block|}
DECL|method|testIndexOf_consumedData ()
specifier|public
name|void
name|testIndexOf_consumedData
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"manny"
argument_list|,
literal|"mo"
argument_list|,
literal|"jack"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|indexOf
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"mo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jack"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_consumedDataWithDuplicates ()
specifier|public
name|void
name|testIndexOf_consumedDataWithDuplicates
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"manny"
argument_list|,
literal|"mo"
argument_list|,
literal|"mo"
argument_list|,
literal|"jack"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|indexOf
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"mo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mo"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jack"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_consumedDataNoMatch ()
specifier|public
name|void
name|testIndexOf_consumedDataNoMatch
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"manny"
argument_list|,
literal|"mo"
argument_list|,
literal|"mo"
argument_list|,
literal|"jack"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Iterators
operator|.
name|indexOf
argument_list|(
name|iterator
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testUnmodifiableIteratorShortCircuit ()
specifier|public
name|void
name|testUnmodifiableIteratorShortCircuit
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|mod
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|UnmodifiableIterator
argument_list|<
name|String
argument_list|>
name|unmod
init|=
name|Iterators
operator|.
name|unmodifiableIterator
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|mod
argument_list|,
name|unmod
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|unmod
argument_list|,
name|Iterators
operator|.
name|unmodifiableIterator
argument_list|(
name|unmod
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|unmod
argument_list|,
name|Iterators
operator|.
name|unmodifiableIterator
argument_list|(
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
name|unmod
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testPeekingIteratorShortCircuit ()
specifier|public
name|void
name|testPeekingIteratorShortCircuit
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|nonpeek
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PeekingIterator
argument_list|<
name|String
argument_list|>
name|peek
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|nonpeek
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|peek
argument_list|,
name|nonpeek
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|peek
argument_list|,
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|peek
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|peek
argument_list|,
name|Iterators
operator|.
name|peekingIterator
argument_list|(
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
name|peek
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

